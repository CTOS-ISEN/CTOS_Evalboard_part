
CTOS_Hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e6e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0801e820  0801e820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ed68  0801ed68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ed70  0801ed70  0001fd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ed74  0801ed74  0001fd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  20000008  0801ed78  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000754c  200000d8  0801ee48  000200d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20007624  0801ee48  00020624  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007bc12  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008bcb  00000000  00000000  0009bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004678  00000000  00000000  000a48e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000367d  00000000  00000000  000a8f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000d557  00000000  00000000  000ac5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004b96b  00000000  00000000  000b9b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012b922  00000000  00000000  0010549f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00230dc1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000139d0  00000000  00000000  00230e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  002447d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e808 	.word	0x0801e808

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801e808 	.word	0x0801e808

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_ldivmod>:
 8000230:	b97b      	cbnz	r3, 8000252 <__aeabi_ldivmod+0x22>
 8000232:	b972      	cbnz	r2, 8000252 <__aeabi_ldivmod+0x22>
 8000234:	2900      	cmp	r1, #0
 8000236:	bfbe      	ittt	lt
 8000238:	2000      	movlt	r0, #0
 800023a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800023e:	e006      	blt.n	800024e <__aeabi_ldivmod+0x1e>
 8000240:	bf08      	it	eq
 8000242:	2800      	cmpeq	r0, #0
 8000244:	bf1c      	itt	ne
 8000246:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800024a:	f04f 30ff 	movne.w	r0, #4294967295
 800024e:	f000 b9b5 	b.w	80005bc <__aeabi_idiv0>
 8000252:	f1ad 0c08 	sub.w	ip, sp, #8
 8000256:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025a:	2900      	cmp	r1, #0
 800025c:	db09      	blt.n	8000272 <__aeabi_ldivmod+0x42>
 800025e:	2b00      	cmp	r3, #0
 8000260:	db1a      	blt.n	8000298 <__aeabi_ldivmod+0x68>
 8000262:	f000 f84d 	bl	8000300 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4770      	bx	lr
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	db1b      	blt.n	80002b4 <__aeabi_ldivmod+0x84>
 800027c:	f000 f840 	bl	8000300 <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	4252      	negs	r2, r2
 8000292:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000296:	4770      	bx	lr
 8000298:	4252      	negs	r2, r2
 800029a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029e:	f000 f82f 	bl	8000300 <__udivmoddi4>
 80002a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002aa:	b004      	add	sp, #16
 80002ac:	4240      	negs	r0, r0
 80002ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b2:	4770      	bx	lr
 80002b4:	4252      	negs	r2, r2
 80002b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ba:	f000 f821 	bl	8000300 <__udivmoddi4>
 80002be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c6:	b004      	add	sp, #16
 80002c8:	4252      	negs	r2, r2
 80002ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d013      	beq.n	8000600 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e8:	e000      	b.n	80005ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800061e:	f023 0218 	bic.w	r2, r3, #24
 8000622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e009      	b.n	8000692 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff9a 	bl	80005c0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf1      	blt.n	800067e <_write+0x12>
}
return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f013 fcfc 	bl	80140a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f894 	bl	80007d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b0:	f000 f908 	bl	80008c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fa0e 	bl	8000ad4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006b8:	f000 f9e4 	bl	8000a84 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80006bc:	f000 f996 	bl	80009ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006c0:	f000 f91e 	bl	8000900 <MX_TIM2_Init>
  MX_TIM16_Init();
 80006c4:	f000 f96a 	bl	800099c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  log_init(&huart1);
 80006c8:	482b      	ldr	r0, [pc, #172]	@ (8000778 <main+0xd4>)
 80006ca:	f013 fbed 	bl	8013ea8 <log_init>
  ToF_init();
 80006ce:	f018 fb9d 	bl	8018e0c <ToF_init>
  MyInitLSM6DSO();
 80006d2:	f013 fc2d 	bl	8013f30 <MyInitLSM6DSO>
  MyInitLIS2MDL();
 80006d6:	f013 fc93 	bl	8014000 <MyInitLIS2MDL>
  MyEnableLSM6DSO();
 80006da:	f013 fc57 	bl	8013f8c <MyEnableLSM6DSO>
  MyEnableLIS2MDL();
 80006de:	f013 fcbd 	bl	801405c <MyEnableLIS2MDL>

      HAL_TIM_Base_Start_IT(&htim16);
 80006e2:	4826      	ldr	r0, [pc, #152]	@ (800077c <main+0xd8>)
 80006e4:	f017 f940 	bl	8017968 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim2);
 80006e8:	4825      	ldr	r0, [pc, #148]	@ (8000780 <main+0xdc>)
 80006ea:	f017 f93d 	bl	8017968 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ee:	f018 fe09 	bl	8019304 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSend */
  MutexSendHandle = osMutexNew(&MutexSend_attributes);
 80006f2:	4824      	ldr	r0, [pc, #144]	@ (8000784 <main+0xe0>)
 80006f4:	f018 ffe2 	bl	80196bc <osMutexNew>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <main+0xe4>)
 80006fc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToFData_Queue */
  ToFData_QueueHandle = osMessageQueueNew (16, sizeof(RANGING_SENSOR_Result_t), &ToFData_Queue_attributes);
 80006fe:	4a23      	ldr	r2, [pc, #140]	@ (800078c <main+0xe8>)
 8000700:	2148      	movs	r1, #72	@ 0x48
 8000702:	2010      	movs	r0, #16
 8000704:	f019 f8e8 	bl	80198d8 <osMessageQueueNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <main+0xec>)
 800070c:	6013      	str	r3, [r2, #0]

  /* creation of LSM6DSOData_Queue */
  LSM6DSOData_QueueHandle = osMessageQueueNew (16, sizeof(IMU_Data), &LSM6DSOData_Queue_attributes);
 800070e:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <main+0xf0>)
 8000710:	2124      	movs	r1, #36	@ 0x24
 8000712:	2010      	movs	r0, #16
 8000714:	f019 f8e0 	bl	80198d8 <osMessageQueueNew>
 8000718:	4603      	mov	r3, r0
 800071a:	4a1f      	ldr	r2, [pc, #124]	@ (8000798 <main+0xf4>)
 800071c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <main+0xf8>)
 8000720:	2100      	movs	r1, #0
 8000722:	481f      	ldr	r0, [pc, #124]	@ (80007a0 <main+0xfc>)
 8000724:	f018 fe4d 	bl	80193c2 <osThreadNew>
 8000728:	4603      	mov	r3, r0
 800072a:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <main+0x100>)
 800072c:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <main+0x104>)
 8000730:	2100      	movs	r1, #0
 8000732:	481e      	ldr	r0, [pc, #120]	@ (80007ac <main+0x108>)
 8000734:	f018 fe45 	bl	80193c2 <osThreadNew>
 8000738:	4603      	mov	r3, r0
 800073a:	4a1d      	ldr	r2, [pc, #116]	@ (80007b0 <main+0x10c>)
 800073c:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 800073e:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <main+0x110>)
 8000740:	2100      	movs	r1, #0
 8000742:	481d      	ldr	r0, [pc, #116]	@ (80007b8 <main+0x114>)
 8000744:	f018 fe3d 	bl	80193c2 <osThreadNew>
 8000748:	4603      	mov	r3, r0
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <main+0x118>)
 800074c:	6013      	str	r3, [r2, #0]

  /* creation of Ack_LSM6DSO_Dat */
  Ack_LSM6DSO_DatHandle = osThreadNew(StartAck_LSM6DSO_Data, NULL, &Ack_LSM6DSO_Dat_attributes);
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <main+0x11c>)
 8000750:	2100      	movs	r1, #0
 8000752:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <main+0x120>)
 8000754:	f018 fe35 	bl	80193c2 <osThreadNew>
 8000758:	4603      	mov	r3, r0
 800075a:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <main+0x124>)
 800075c:	6013      	str	r3, [r2, #0]

  /* creation of SendDataLSM6 */
  SendDataLSM6Handle = osThreadNew(StartSendDataLSM6, NULL, &SendDataLSM6_attributes);
 800075e:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <main+0x128>)
 8000760:	2100      	movs	r1, #0
 8000762:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <main+0x12c>)
 8000764:	f018 fe2d 	bl	80193c2 <osThreadNew>
 8000768:	4603      	mov	r3, r0
 800076a:	4a1a      	ldr	r2, [pc, #104]	@ (80007d4 <main+0x130>)
 800076c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800076e:	f018 fded 	bl	801934c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <main+0xce>
 8000776:	bf00      	nop
 8000778:	2000018c 	.word	0x2000018c
 800077c:	20000140 	.word	0x20000140
 8000780:	200000f4 	.word	0x200000f4
 8000784:	0801ec5c 	.word	0x0801ec5c
 8000788:	20000c78 	.word	0x20000c78
 800078c:	0801ec2c 	.word	0x0801ec2c
 8000790:	20000510 	.word	0x20000510
 8000794:	0801ec44 	.word	0x0801ec44
 8000798:	200009e4 	.word	0x200009e4
 800079c:	0801eb78 	.word	0x0801eb78
 80007a0:	08000bcd 	.word	0x08000bcd
 80007a4:	200004fc 	.word	0x200004fc
 80007a8:	0801eb9c 	.word	0x0801eb9c
 80007ac:	08000bdd 	.word	0x08000bdd
 80007b0:	20000500 	.word	0x20000500
 80007b4:	0801ebc0 	.word	0x0801ebc0
 80007b8:	08000c19 	.word	0x08000c19
 80007bc:	20000504 	.word	0x20000504
 80007c0:	0801ebe4 	.word	0x0801ebe4
 80007c4:	08000c81 	.word	0x08000c81
 80007c8:	20000508 	.word	0x20000508
 80007cc:	0801ec08 	.word	0x0801ec08
 80007d0:	08000cd5 	.word	0x08000cd5
 80007d4:	2000050c 	.word	0x2000050c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09a      	sub	sp, #104	@ 0x68
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2248      	movs	r2, #72	@ 0x48
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f01d f836 	bl	801d858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800080c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f023 0303 	bic.w	r3, r3, #3
 8000818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000822:	f015 fa2b 	bl	8015c7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fef1 	bl	800060e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <SystemClock_Config+0xe8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000834:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <SystemClock_Config+0xe8>)
 8000836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <SystemClock_Config+0xe8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000848:	2327      	movs	r3, #39	@ 0x27
 800084a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000852:	2301      	movs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f015 fda1 	bl	80163bc <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000880:	f000 fab8 	bl	8000df4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000884:	236f      	movs	r3, #111	@ 0x6f
 8000886:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000888:	2302      	movs	r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f016 f8fd 	bl	8016aa4 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008b0:	f000 faa0 	bl	8000df4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008b4:	f016 feea 	bl	801768c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008b8:	bf00      	nop
 80008ba:	3768      	adds	r7, #104	@ 0x68
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	58000400 	.word	0x58000400

080008c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2250      	movs	r2, #80	@ 0x50
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f01c ffc1 	bl	801d858 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80008d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f016 fd5a 	bl	80173a0 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80008f2:	f000 fa7f 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000920:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000928:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800092c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000936:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_TIM2_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <MX_TIM2_Init+0x98>)
 800094a:	f016 ffb6 	bl	80178ba <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 fa4e 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000966:	f017 f954 	bl	8017c12 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000970:	f000 fa40 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_TIM2_Init+0x98>)
 8000982:	f017 fb43 	bl	801800c <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 fa32 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000f4 	.word	0x200000f4

0800099c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009a2:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <MX_TIM16_Init+0x4c>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009a8:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80009ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM16_Init+0x48>)
 80009d0:	f016 ff73 	bl	80178ba <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009da:	f000 fa0b 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000140 	.word	0x20000140
 80009e8:	40014400 	.word	0x40014400

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <MX_USART1_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a36:	f017 fb87 	bl	8018148 <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f9d8 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a48:	f018 f8dc 	bl	8018c04 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f9cf 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a5a:	f018 f911 	bl	8018c80 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f9c6 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f018 f892 	bl	8018b92 <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f9be 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000018c 	.word	0x2000018c
 8000a80:	40013800 	.word	0x40013800

08000a84 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000a8a:	4a11      	ldr	r2, [pc, #68]	@ (8000ad0 <MX_USB_PCD_Init+0x4c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_USB_PCD_Init+0x48>)
 8000aba:	f014 ffe6 	bl	8015a8a <HAL_PCD_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ac4:	f000 f996 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000220 	.word	0x20000220
 8000ad0:	40006800 	.word	0x40006800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2004      	movs	r0, #4
 8000aea:	f7ff fda6 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fda3 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff fda0 	bl	800063a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fd9d 	bl	800063a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2123      	movs	r1, #35	@ 0x23
 8000b04:	482e      	ldr	r0, [pc, #184]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b06:	f013 fe6b 	bl	80147e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VL53L4CX_XSHUT_GPIO_Port, VL53L4CX_XSHUT_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b14:	f013 fe64 	bl	80147e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4826      	ldr	r0, [pc, #152]	@ (8000bc4 <MX_GPIO_Init+0xf0>)
 8000b2c:	f013 fc0a 	bl	8014344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b30:	2323      	movs	r3, #35	@ 0x23
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b46:	f013 fbfd 	bl	8014344 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L4CX_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L4CX_XSHUT_Pin;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L4CX_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f013 fbee 	bl	8014344 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4813      	ldr	r0, [pc, #76]	@ (8000bc8 <MX_GPIO_Init+0xf4>)
 8000b7c:	f013 fbe2 	bl	8014344 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b80:	2302      	movs	r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <MX_GPIO_Init+0xf4>)
 8000b92:	f013 fbd7 	bl	8014344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2105      	movs	r1, #5
 8000b9a:	2006      	movs	r0, #6
 8000b9c:	f013 fbaa 	bl	80142f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f013 fbc1 	bl	8014328 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2105      	movs	r1, #5
 8000baa:	200a      	movs	r0, #10
 8000bac:	f013 fba2 	bl	80142f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bb0:	200a      	movs	r0, #10
 8000bb2:	f013 fbb9 	bl	8014328 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00

08000bcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f018 fd56 	bl	8019686 <osDelay>
 8000bda:	e7fb      	b.n	8000bd4 <StartDefaultTask+0x8>

08000bdc <StartAck_ToF_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	2100      	movs	r1, #0
 8000bea:	2001      	movs	r0, #1
 8000bec:	f018 fcca 	bl	8019584 <osThreadFlagsWait>
	  ToF_acquire_data(&result);
 8000bf0:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <StartAck_ToF_Data+0x34>)
 8000bf2:	f018 f98f 	bl	8018f14 <ToF_acquire_data>
	        osMessageQueuePut(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <StartAck_ToF_Data+0x38>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4903      	ldr	r1, [pc, #12]	@ (8000c10 <StartAck_ToF_Data+0x34>)
 8000c02:	f018 fedd 	bl	80199c0 <osMessageQueuePut>
	      osDelay(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f018 fd3d 	bl	8019686 <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c0c:	bf00      	nop
 8000c0e:	e7e9      	b.n	8000be4 <StartAck_ToF_Data+0x8>
 8000c10:	20000c7c 	.word	0x20000c7c
 8000c14:	20000510 	.word	0x20000510

08000c18 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	2100      	movs	r1, #0
 8000c26:	2001      	movs	r0, #1
 8000c28:	f018 fcac 	bl	8019584 <osThreadFlagsWait>
	  osMutexAcquire(MutexSendHandle, osWaitForever);
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <StartSendData+0x5c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	4618      	mov	r0, r3
 8000c36:	f018 fdc7 	bl	80197c8 <osMutexAcquire>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000c3a:	e00a      	b.n	8000c52 <StartSendData+0x3a>

			osMessageQueueGet(ToFData_QueueHandle, &result, (uint8_t*) 1,osWaitForever);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <StartSendData+0x60>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2201      	movs	r2, #1
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <StartSendData+0x64>)
 8000c48:	f018 ff1a 	bl	8019a80 <osMessageQueueGet>
			//print_result(&result);

			logger_print_result(&result);
 8000c4c:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <StartSendData+0x64>)
 8000c4e:	f018 fa33 	bl	80190b8 <logger_print_result>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <StartSendData+0x60>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f018 ff70 	bl	8019b3c <osMessageQueueGetCount>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1ec      	bne.n	8000c3c <StartSendData+0x24>
		}
	  osMutexRelease(MutexSendHandle);
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <StartSendData+0x5c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f018 fdf9 	bl	801985e <osMutexRelease>

    osDelay(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f018 fd0a 	bl	8019686 <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c72:	e7d5      	b.n	8000c20 <StartSendData+0x8>
 8000c74:	20000c78 	.word	0x20000c78
 8000c78:	20000510 	.word	0x20000510
 8000c7c:	20000cc4 	.word	0x20000cc4

08000c80 <StartAck_LSM6DSO_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_LSM6DSO_Data */
void StartAck_LSM6DSO_Data(void *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_LSM6DSO_Data */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f018 fc78 	bl	8019584 <osThreadFlagsWait>
		IMU_Data mov_data;
		MyGettingLSM6DSO(&mov_data.Acc, &mov_data.Gyr);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	f103 020c 	add.w	r2, r3, #12
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f013 f97e 	bl	8013fa4 <MyGettingLSM6DSO>
		MyGettingLIS2MDL(&mov_data.Mag);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	3318      	adds	r3, #24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f013 f9de 	bl	8014070 <MyGettingLIS2MDL>
				"Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
				mov_data.axes_gyro.x, mov_data.axes_gyro.y,
				mov_data.axes_gyro.z, mov_data.axes_acce.x,
				mov_data.axes_acce.y, mov_data.axes_acce.z);
		printf("Get at : %ld\n", osKernelGetTickCount());*/
		osMessageQueuePut(LSM6DSOData_QueueHandle, &mov_data, 1, osWaitForever);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <StartAck_LSM6DSO_Data+0x50>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f107 010c 	add.w	r1, r7, #12
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f018 fe7d 	bl	80199c0 <osMessageQueuePut>
		osDelay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f018 fcdd 	bl	8019686 <osDelay>
  {
 8000ccc:	bf00      	nop
 8000cce:	e7db      	b.n	8000c88 <StartAck_LSM6DSO_Data+0x8>
 8000cd0:	200009e4 	.word	0x200009e4

08000cd4 <StartSendDataLSM6>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataLSM6 */
void StartSendDataLSM6(void *argument)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b095      	sub	sp, #84	@ 0x54
 8000cd8:	af06      	add	r7, sp, #24
 8000cda:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartSendDataLSM6 */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f018 fc4e 	bl	8019584 <osThreadFlagsWait>
		osMutexAcquire(MutexSendHandle, osWaitForever);
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <StartSendDataLSM6+0x94>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f018 fd69 	bl	80197c8 <osMutexAcquire>
		IMU_Data send_data;
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000cf6:	e01f      	b.n	8000d38 <StartSendDataLSM6+0x64>
			osMessageQueueGet(LSM6DSOData_QueueHandle, &send_data, (uint8_t*) 1,
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <StartSendDataLSM6+0x98>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	f107 0114 	add.w	r1, r7, #20
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2201      	movs	r2, #1
 8000d06:	f018 febb 	bl	8019a80 <osMessageQueueGet>
					osWaitForever);
			log_printf(
 8000d0a:	6a3e      	ldr	r6, [r7, #32]
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d12:	6079      	str	r1, [r7, #4]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	69f9      	ldr	r1, [r7, #28]
 8000d1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d1c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8000d1e:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8000d20:	9505      	str	r5, [sp, #20]
 8000d22:	9404      	str	r4, [sp, #16]
 8000d24:	9003      	str	r0, [sp, #12]
 8000d26:	9102      	str	r1, [sp, #8]
 8000d28:	9201      	str	r2, [sp, #4]
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4631      	mov	r1, r6
 8000d32:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <StartSendDataLSM6+0x9c>)
 8000d34:	f013 f8dc 	bl	8013ef0 <log_printf>
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <StartSendDataLSM6+0x98>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f018 fefd 	bl	8019b3c <osMessageQueueGetCount>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1d7      	bne.n	8000cf8 <StartSendDataLSM6+0x24>
								send_data.Gyr.z, send_data.Acc.x,
								send_data.Acc.y, send_data.Acc.z,
								send_data.Mag.x, send_data.Mag.y,
								send_data.Mag.z);
		}
		printf("Send at : %ld\n", osKernelGetTickCount());
 8000d48:	f018 fb26 	bl	8019398 <osKernelGetTickCount>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <StartSendDataLSM6+0xa0>)
 8000d52:	f01c fbf9 	bl	801d548 <iprintf>
		osMutexRelease(MutexSendHandle);
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <StartSendDataLSM6+0x94>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f018 fd7f 	bl	801985e <osMutexRelease>
		osDelay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f018 fc90 	bl	8019686 <osDelay>
  {
 8000d66:	e7b9      	b.n	8000cdc <StartSendDataLSM6+0x8>
 8000d68:	20000c78 	.word	0x20000c78
 8000d6c:	200009e4 	.word	0x200009e4
 8000d70:	0801e898 	.word	0x0801e898
 8000d74:	0801e910 	.word	0x0801e910

08000d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM16) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10c      	bne.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			osThreadFlagsSet(Ack_LSM6DSO_DatHandle, 1);
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f018 fba9 	bl	80194e8 <osThreadFlagsSet>
			osThreadFlagsSet(Ack_ToF_DataHandle,1);
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f018 fba3 	bl	80194e8 <osThreadFlagsSet>
 8000da2:	e010      	b.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x4e>

	}else if(htim->Instance == TIM2){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dac:	d10b      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			osThreadFlagsSet(SendDataLSM6Handle, 1);
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f018 fb97 	bl	80194e8 <osThreadFlagsSet>
			osThreadFlagsSet(SendDataHandle, 1);
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f018 fb91 	bl	80194e8 <osThreadFlagsSet>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0x5c>
    HAL_IncTick();
 8000dd0:	f013 f988 	bl	80140e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40014400 	.word	0x40014400
 8000de0:	20000508 	.word	0x20000508
 8000de4:	20000500 	.word	0x20000500
 8000de8:	2000050c 	.word	0x2000050c
 8000dec:	20000504 	.word	0x20000504
 8000df0:	40014800 	.word	0x40014800

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <Error_Handler+0x8>

08000e00 <LL_AHB2_GRP1_EnableClock>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f013 fa27 	bl	80142f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff ffb7 	bl	8000e32 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2105      	movs	r1, #5
 8000ec8:	201c      	movs	r0, #28
 8000eca:	f013 fa13 	bl	80142f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f013 fa2a 	bl	8014328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ed4:	e010      	b.n	8000ef8 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <HAL_TIM_Base_MspInit+0x54>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10b      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ee0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000ee4:	f7ff ffbe 	bl	8000e64 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2019      	movs	r0, #25
 8000eee:	f013 fa01 	bl	80142f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ef2:	2019      	movs	r0, #25
 8000ef4:	f013 fa18 	bl	8014328 <HAL_NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40014400 	.word	0x40014400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09c      	sub	sp, #112	@ 0x70
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2250      	movs	r2, #80	@ 0x50
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f01c fc97 	bl	801d858 <memset>
  if(huart->Instance==USART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_UART_MspInit+0x84>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d124      	bne.n	8000f7e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4618      	mov	r0, r3
 8000f42:	f016 fa2d 	bl	80173a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f4c:	f7ff ff52 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f54:	f7ff ff86 	bl	8000e64 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff ff51 	bl	8000e00 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <HAL_UART_MspInit+0x88>)
 8000f7a:	f013 f9e3 	bl	8014344 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	3770      	adds	r7, #112	@ 0x70
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2250      	movs	r2, #80	@ 0x50
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f01c fc51 	bl	801d858 <memset>
  if(hpcd->Instance==USB)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <HAL_PCD_MspInit+0xa8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d136      	bne.n	800102e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000fc6:	2318      	movs	r3, #24
 8000fc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000fd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000fd6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fda:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fe0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fe2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000fe6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f016 f9d7 	bl	80173a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ff8:	f7ff fefc 	bl	8000df4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff feff 	bl	8000e00 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001002:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001006:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001014:	230a      	movs	r3, #10
 8001016:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f013 f98f 	bl	8014344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001026:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800102a:	f7ff ff02 	bl	8000e32 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3770      	adds	r7, #112	@ 0x70
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006800 	.word	0x40006800

0800103c <LL_APB2_GRP1_EnableClock>:
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001048:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001058:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	201a      	movs	r0, #26
 800108c:	f013 f932 	bl	80142f4 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001090:	201a      	movs	r0, #26
 8001092:	f013 f949 	bl	8014328 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001096:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800109a:	f7ff ffcf 	bl	800103c <LL_APB2_GRP1_EnableClock>

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f015 fee7 	bl	8016e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010ae:	f015 fecf 	bl	8016e50 <HAL_RCC_GetPCLK2Freq>
 80010b2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	4a21      	ldr	r2, [pc, #132]	@ (800113c <HAL_InitTick+0xcc>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0c9b      	lsrs	r3, r3, #18
 80010be:	3b01      	subs	r3, #1
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_InitTick+0xd0>)
 80010c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <HAL_InitTick+0xd4>)
 80010c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_InitTick+0xd0>)
 80010ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ce:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <HAL_InitTick+0xd0>)
 80010d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_InitTick+0xd0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_InitTick+0xd0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80010e2:	4817      	ldr	r0, [pc, #92]	@ (8001140 <HAL_InitTick+0xd0>)
 80010e4:	f016 fbe9 	bl	80178ba <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d11b      	bne.n	800112e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80010f6:	4812      	ldr	r0, [pc, #72]	@ (8001140 <HAL_InitTick+0xd0>)
 80010f8:	f016 fc36 	bl	8017968 <HAL_TIM_Base_Start_IT>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001102:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001106:	2b00      	cmp	r3, #0
 8001108:	d111      	bne.n	800112e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800110a:	201a      	movs	r0, #26
 800110c:	f013 f90c 	bl	8014328 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d808      	bhi.n	8001128 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001116:	2200      	movs	r2, #0
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	201a      	movs	r0, #26
 800111c:	f013 f8ea 	bl	80142f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_InitTick+0xd8>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e002      	b.n	800112e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800112e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001132:	4618      	mov	r0, r3
 8001134:	3738      	adds	r7, #56	@ 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	431bde83 	.word	0x431bde83
 8001140:	20000d0c 	.word	0x20000d0c
 8001144:	40014800 	.word	0x40014800
 8001148:	20000070 	.word	0x20000070

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x4>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001186:	2001      	movs	r0, #1
 8001188:	f013 fb42 	bl	8014810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001194:	2010      	movs	r0, #16
 8001196:	f013 fb3b 	bl	8014810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011a6:	f016 fc2d 	bl	8017a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000140 	.word	0x20000140

080011b4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80011ba:	f016 fc23 	bl	8017a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000d0c 	.word	0x20000d0c

080011c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM2_IRQHandler+0x10>)
 80011ce:	f016 fc19 	bl	8017a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000f4 	.word	0x200000f4

080011dc <LL_AHB2_GRP1_EnableClock>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_APB1_GRP1_EnableClock>:
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800121c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4313      	orrs	r3, r2
 8001224:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800122a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_APB1_GRP1_DisableClock>:
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	43db      	mvns	r3, r3
 8001252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001256:	4013      	ands	r3, r2
 8001258:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <BSP_I2C1_Init+0x70>)
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <BSP_I2C1_Init+0x74>)
 8001276:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <BSP_I2C1_Init+0x78>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	4918      	ldr	r1, [pc, #96]	@ (80012e0 <BSP_I2C1_Init+0x78>)
 8001280:	600a      	str	r2, [r1, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d122      	bne.n	80012cc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <BSP_I2C1_Init+0x70>)
 8001288:	f014 f800 	bl	801528c <HAL_I2C_GetState>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11c      	bne.n	80012cc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001292:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <BSP_I2C1_Init+0x70>)
 8001294:	f000 f952 	bl	800153c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d116      	bne.n	80012cc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800129e:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <BSP_I2C1_Init+0x70>)
 80012a0:	f000 f908 	bl	80014b4 <MX_I2C1_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012aa:	f06f 0307 	mvn.w	r3, #7
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	e00c      	b.n	80012cc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <BSP_I2C1_Init+0x70>)
 80012b6:	f014 fb51 	bl	801595c <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012c0:	f06f 0307 	mvn.w	r3, #7
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e001      	b.n	80012cc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000d58 	.word	0x20000d58
 80012dc:	40005400 	.word	0x40005400
 80012e0:	20000dac 	.word	0x20000dac

080012e4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <BSP_I2C1_DeInit+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d014      	beq.n	8001320 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <BSP_I2C1_DeInit+0x48>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <BSP_I2C1_DeInit+0x48>)
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <BSP_I2C1_DeInit+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10b      	bne.n	8001320 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001308:	4809      	ldr	r0, [pc, #36]	@ (8001330 <BSP_I2C1_DeInit+0x4c>)
 800130a:	f000 f95b 	bl	80015c4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <BSP_I2C1_DeInit+0x4c>)
 8001310:	f013 fb3c 	bl	801498c <HAL_I2C_DeInit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800131a:	f06f 0307 	mvn.w	r3, #7
 800131e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000dac 	.word	0x20000dac
 8001330:	20000d58 	.word	0x20000d58

08001334 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af04      	add	r7, sp, #16
 800133a:	60ba      	str	r2, [r7, #8]
 800133c:	461a      	mov	r2, r3
 800133e:	4603      	mov	r3, r0
 8001340:	81fb      	strh	r3, [r7, #14]
 8001342:	460b      	mov	r3, r1
 8001344:	81bb      	strh	r3, [r7, #12]
 8001346:	4613      	mov	r3, r2
 8001348:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800134e:	89ba      	ldrh	r2, [r7, #12]
 8001350:	89f9      	ldrh	r1, [r7, #14]
 8001352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	480c      	ldr	r0, [pc, #48]	@ (8001394 <BSP_I2C1_WriteReg+0x60>)
 8001364:	f013 fd64 	bl	8014e30 <HAL_I2C_Mem_Write>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <BSP_I2C1_WriteReg+0x60>)
 8001370:	f013 ff9a 	bl	80152a8 <HAL_I2C_GetError>
 8001374:	4603      	mov	r3, r0
 8001376:	2b04      	cmp	r3, #4
 8001378:	d103      	bne.n	8001382 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800137a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e002      	b.n	8001388 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001382:	f06f 0303 	mvn.w	r3, #3
 8001386:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001388:	697b      	ldr	r3, [r7, #20]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000d58 	.word	0x20000d58

08001398 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af04      	add	r7, sp, #16
 800139e:	60ba      	str	r2, [r7, #8]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	81fb      	strh	r3, [r7, #14]
 80013a6:	460b      	mov	r3, r1
 80013a8:	81bb      	strh	r3, [r7, #12]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013b2:	89ba      	ldrh	r2, [r7, #12]
 80013b4:	89f9      	ldrh	r1, [r7, #14]
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <BSP_I2C1_ReadReg+0x60>)
 80013c8:	f013 fe46 	bl	8015058 <HAL_I2C_Mem_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80013d2:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <BSP_I2C1_ReadReg+0x60>)
 80013d4:	f013 ff68 	bl	80152a8 <HAL_I2C_GetError>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d103      	bne.n	80013e6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013de:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e002      	b.n	80013ec <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013e6:	f06f 0303 	mvn.w	r3, #3
 80013ea:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80013ec:	697b      	ldr	r3, [r7, #20]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000d58 	.word	0x20000d58

080013fc <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	80fb      	strh	r3, [r7, #6]
 8001408:	4613      	mov	r3, r2
 800140a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	88f9      	ldrh	r1, [r7, #6]
 8001414:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	480b      	ldr	r0, [pc, #44]	@ (800144c <BSP_I2C1_Send+0x50>)
 800141e:	f013 faf9 	bl	8014a14 <HAL_I2C_Master_Transmit>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <BSP_I2C1_Send+0x50>)
 800142a:	f013 ff3d 	bl	80152a8 <HAL_I2C_GetError>
 800142e:	4603      	mov	r3, r0
 8001430:	2b04      	cmp	r3, #4
 8001432:	d003      	beq.n	800143c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001434:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e002      	b.n	8001442 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800143c:	f06f 0303 	mvn.w	r3, #3
 8001440:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000d58 	.word	0x20000d58

08001450 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	4613      	mov	r3, r2
 800145e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	88f9      	ldrh	r1, [r7, #6]
 8001468:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <BSP_I2C1_Recv+0x50>)
 8001472:	f013 fbe7 	bl	8014c44 <HAL_I2C_Master_Receive>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00c      	beq.n	8001496 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <BSP_I2C1_Recv+0x50>)
 800147e:	f013 ff13 	bl	80152a8 <HAL_I2C_GetError>
 8001482:	4603      	mov	r3, r0
 8001484:	2b04      	cmp	r3, #4
 8001486:	d003      	beq.n	8001490 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001488:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e002      	b.n	8001496 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001490:	f06f 0303 	mvn.w	r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000d58 	.word	0x20000d58

080014a4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80014a8:	f012 fe30 	bl	801410c <HAL_GetTick>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <MX_I2C1_Init+0x80>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <MX_I2C1_Init+0x84>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f013 f9ad 	bl	8014856 <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f014 fa27 	bl	801595c <HAL_I2CEx_ConfigAnalogFilter>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f014 fa69 	bl	80159f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	00b07cb4 	.word	0x00b07cb4

0800153c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	@ 0x70
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2250      	movs	r2, #80	@ 0x50
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f01c f983 	bl	801d858 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001552:	2304      	movs	r3, #4
 8001554:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001556:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f015 ff1d 	bl	80173a0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fe38 	bl	80011dc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800156c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001570:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001572:	2312      	movs	r3, #18
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800157e:	2304      	movs	r3, #4
 8001580:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001582:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001586:	4619      	mov	r1, r3
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <I2C1_MspInit+0x84>)
 800158a:	f012 fedb 	bl	8014344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800158e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001592:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80015a0:	2304      	movs	r3, #4
 80015a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80015a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <I2C1_MspInit+0x84>)
 80015ac:	f012 feca 	bl	8014344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015b4:	f7ff fe2b 	bl	800120e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	@ 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	48000400 	.word	0x48000400

080015c4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015d0:	f7ff fe36 	bl	8001240 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80015d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <I2C1_MspDeInit+0x2c>)
 80015da:	f013 f823 	bl	8014624 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80015de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <I2C1_MspDeInit+0x2c>)
 80015e4:	f013 f81e 	bl	8014624 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	48000400 	.word	0x48000400

080015f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
  }

  return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_close>:
  }
  return len;
}

int _close(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001656:	605a      	str	r2, [r3, #4]
  return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_isatty>:

int _isatty(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f01c f97e 	bl	801d9c8 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20030000 	.word	0x20030000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	20000db0 	.word	0x20000db0
 8001700:	20007628 	.word	0x20007628

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <SystemInit+0x98>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <SystemInit+0x98>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001730:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800173c:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <SystemInit+0x9c>)
 800173e:	4013      	ands	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174e:	f023 0305 	bic.w	r3, r3, #5
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800175e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176e:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <SystemInit+0xa0>)
 8001770:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <SystemInit+0xa0>)
 8001778:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	faf6fefb 	.word	0xfaf6fefb
 80017a4:	22041000 	.word	0x22041000

080017a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80017a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ac:	3304      	adds	r3, #4

080017ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80017b2:	d3f9      	bcc.n	80017a8 <CopyDataInit>
  bx lr
 80017b4:	4770      	bx	lr

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80017b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017b8:	3004      	adds	r0, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
  bx lr
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c4:	f7ff ff9e 	bl	8001704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <LoopForever+0x6>)
 80017ca:	490c      	ldr	r1, [pc, #48]	@ (80017fc <LoopForever+0xa>)
 80017cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001800 <LoopForever+0xe>)
 80017ce:	2300      	movs	r3, #0
 80017d0:	f7ff ffed 	bl	80017ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017d4:	480b      	ldr	r0, [pc, #44]	@ (8001804 <LoopForever+0x12>)
 80017d6:	490c      	ldr	r1, [pc, #48]	@ (8001808 <LoopForever+0x16>)
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <LoopForever+0x1a>)
 80017da:	2300      	movs	r3, #0
 80017dc:	f7ff ffe7 	bl	80017ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017e0:	480b      	ldr	r0, [pc, #44]	@ (8001810 <LoopForever+0x1e>)
 80017e2:	490c      	ldr	r1, [pc, #48]	@ (8001814 <LoopForever+0x22>)
 80017e4:	2300      	movs	r3, #0
 80017e6:	f7ff ffe8 	bl	80017ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ea:	f01c f8f3 	bl	801d9d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017ee:	f7fe ff59 	bl	80006a4 <main>

080017f2 <LoopForever>:

LoopForever:
  b LoopForever
 80017f2:	e7fe      	b.n	80017f2 <LoopForever>
  ldr   r0, =_estack
 80017f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017f8:	20000008 	.word	0x20000008
 80017fc:	200000d8 	.word	0x200000d8
 8001800:	0801ed78 	.word	0x0801ed78
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001804:	20030000 	.word	0x20030000
 8001808:	20030000 	.word	0x20030000
 800180c:	0801ee48 	.word	0x0801ee48
  INIT_BSS _sbss, _ebss
 8001810:	200000d8 	.word	0x200000d8
 8001814:	20007624 	.word	0x20007624

08001818 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_IRQHandler>
	...

0800181c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e067      	b.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b1a      	ldrb	r2, [r3, #12]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <LIS2MDL_RegisterBusIO+0xf8>)
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <LIS2MDL_RegisterBusIO+0xfc>)
 800187a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e036      	b.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4798      	blx	r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e02c      	b.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d028      	beq.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d123      	bne.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10d      	bne.n	80018e4 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80018c8:	2334      	movs	r3, #52	@ 0x34
 80018ca:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	461a      	mov	r2, r3
 80018d0:	2162      	movs	r1, #98	@ 0x62
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f984 	bl	8001be0 <LIS2MDL_Write_Reg>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d014      	beq.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e012      	b.n	800190a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d101      	bne.n	80018f0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	e00c      	b.n	800190a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3320      	adds	r3, #32
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fd8c 	bl	8002414 <lis2mdl_i2c_interface_set>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e000      	b.n	800190a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8001908:	68fb      	ldr	r3, [r7, #12]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08001c37 	.word	0x08001c37
 8001918:	08001cb9 	.word	0x08001cb9

0800191c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d144      	bne.n	80019b6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800192c:	f107 0208 	add.w	r2, r7, #8
 8001930:	2301      	movs	r3, #1
 8001932:	2162      	movs	r1, #98	@ 0x62
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fa00 	bl	8001d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	e06c      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8001946:	f107 020c 	add.w	r2, r7, #12
 800194a:	2301      	movs	r3, #1
 800194c:	2160      	movs	r1, #96	@ 0x60
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f9f3 	bl	8001d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e05f      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8001960:	7a3b      	ldrb	r3, [r7, #8]
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8001968:	7a3b      	ldrb	r3, [r7, #8]
 800196a:	f36f 0341 	bfc	r3, #1, #1
 800196e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8001970:	7b3b      	ldrb	r3, [r7, #12]
 8001972:	2202      	movs	r2, #2
 8001974:	f362 0301 	bfi	r3, r2, #0, #2
 8001978:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	f043 030c 	orr.w	r3, r3, #12
 8001980:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8001982:	f107 0208 	add.w	r2, r7, #8
 8001986:	2301      	movs	r3, #1
 8001988:	2162      	movs	r1, #98	@ 0x62
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fb14 	bl	8001fb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e041      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800199c:	f107 020c 	add.w	r2, r7, #12
 80019a0:	2301      	movs	r3, #1
 80019a2:	2160      	movs	r1, #96	@ 0x60
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fb07 	bl	8001fb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d032      	beq.n	8001a16 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	e034      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3320      	adds	r3, #32
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fc95 	bl	80022ec <lis2mdl_block_data_update_set>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	e028      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3320      	adds	r3, #32
 80019d2:	2102      	movs	r1, #2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fc3d 	bl	8002254 <lis2mdl_operating_mode_set>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	e01c      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3320      	adds	r3, #32
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fc57 	bl	80022a0 <lis2mdl_data_rate_set>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e010      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3320      	adds	r3, #32
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fcdf 	bl	80023c8 <lis2mdl_self_test_set>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	e004      	b.n	8001a20 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e032      	b.n	8001aa4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d11d      	bne.n	8001a82 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8001a46:	f107 020c 	add.w	r2, r7, #12
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2160      	movs	r1, #96	@ 0x60
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f973 	bl	8001d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e021      	b.n	8001aa4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	f36f 0301 	bfc	r3, #0, #2
 8001a66:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8001a68:	f107 020c 	add.w	r2, r7, #12
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2160      	movs	r1, #96	@ 0x60
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 faa1 	bl	8001fb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	e010      	b.n	8001aa4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3320      	adds	r3, #32
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fbe3 	bl	8002254 <lis2mdl_operating_mode_set>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	e004      	b.n	8001aa4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8001abc:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d134      	bne.n	8001b4e <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8001ae4:	f107 0218 	add.w	r2, r7, #24
 8001ae8:	2306      	movs	r3, #6
 8001aea:	2168      	movs	r1, #104	@ 0x68
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f924 	bl	8001d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	e06c      	b.n	8001bd8 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8001afe:	7e7b      	ldrb	r3, [r7, #25]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8001b04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	7e3a      	ldrb	r2, [r7, #24]
 8001b10:	4413      	add	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8001b18:	7efb      	ldrb	r3, [r7, #27]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8001b1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	7eba      	ldrb	r2, [r7, #26]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8001b32:	7f7b      	ldrb	r3, [r7, #29]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8001b38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	7f3a      	ldrb	r2, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	82bb      	strh	r3, [r7, #20]
 8001b4c:	e00d      	b.n	8001b6a <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3320      	adds	r3, #32
 8001b52:	f107 0210 	add.w	r2, r7, #16
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fbed 	bl	8002338 <lis2mdl_magnetic_raw_get>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	e036      	b.n	8001bd8 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff9b 	bl	8001aac <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 2a90 	vmov	r2, s15
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bae:	ee17 2a90 	vmov	r2, s15
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	ee17 2a90 	vmov	r2, s15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
 8001bec:	4613      	mov	r3, r2
 8001bee:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d10b      	bne.n	8001c10 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8001bf8:	1cba      	adds	r2, r7, #2
 8001bfa:	78f9      	ldrb	r1, [r7, #3]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f9da 	bl	8001fb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e00e      	b.n	8001c2e <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 0020 	add.w	r0, r3, #32
 8001c16:	1cba      	adds	r2, r7, #2
 8001c18:	78f9      	ldrb	r1, [r7, #3]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 fb02 	bl	8002224 <lis2mdl_write_reg>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e000      	b.n	8001c2e <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c36:	b590      	push	{r4, r7, lr}
 8001c38:	b087      	sub	sp, #28
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	461a      	mov	r2, r3
 8001c42:	460b      	mov	r3, r1
 8001c44:	72fb      	strb	r3, [r7, #11]
 8001c46:	4613      	mov	r3, r2
 8001c48:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10e      	bne.n	8001c74 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	695c      	ldr	r4, [r3, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	7b1b      	ldrb	r3, [r3, #12]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	47a0      	blx	r4
 8001c70:	4603      	mov	r3, r0
 8001c72:	e01d      	b.n	8001cb0 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d10b      	bne.n	8001c94 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	695c      	ldr	r4, [r3, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	893b      	ldrh	r3, [r7, #8]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	47a0      	blx	r4
 8001c90:	4603      	mov	r3, r0
 8001c92:	e00d      	b.n	8001cb0 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	695c      	ldr	r4, [r3, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	7b1b      	ldrb	r3, [r3, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	47a0      	blx	r4
 8001cae:	4603      	mov	r3, r0
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}

08001cb8 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	72fb      	strb	r3, [r7, #11]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10e      	bne.n	8001cf6 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	691c      	ldr	r4, [r3, #16]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	47a0      	blx	r4
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e01d      	b.n	8001d32 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d10b      	bne.n	8001d16 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	691c      	ldr	r4, [r3, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	893b      	ldrh	r3, [r7, #8]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	47a0      	blx	r4
 8001d12:	4603      	mov	r3, r0
 8001d14:	e00d      	b.n	8001d32 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	691c      	ldr	r4, [r3, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	7b1b      	ldrb	r3, [r3, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	893b      	ldrh	r3, [r7, #8]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	47a0      	blx	r4
 8001d30:	4603      	mov	r3, r0
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b08c      	sub	sp, #48	@ 0x30
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	461a      	mov	r2, r3
 8001d46:	460b      	mov	r3, r1
 8001d48:	72fb      	strb	r3, [r7, #11]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8001d54:	2340      	movs	r3, #64	@ 0x40
 8001d56:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8001d60:	233d      	movs	r3, #61	@ 0x3d
 8001d62:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8001d64:	2315      	movs	r3, #21
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8001d6a:	2316      	movs	r3, #22
 8001d6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8001d70:	2317      	movs	r3, #23
 8001d72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8001d76:	2314      	movs	r3, #20
 8001d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8001d7c:	2344      	movs	r3, #68	@ 0x44
 8001d7e:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8001d86:	2339      	movs	r3, #57	@ 0x39
 8001d88:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8001d92:	2329      	movs	r3, #41	@ 0x29
 8001d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8001d98:	231e      	movs	r3, #30
 8001d9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8001daa:	2310      	movs	r3, #16
 8001dac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8001db6:	2340      	movs	r3, #64	@ 0x40
 8001db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f103 0020 	add.w	r0, r3, #32
 8001dc2:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8001dc6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 fa2a 	bl	8002224 <lis2mdl_write_reg>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e0e9      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f103 0020 	add.w	r0, r3, #32
 8001de2:	f107 021f 	add.w	r2, r7, #31
 8001de6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 fa1a 	bl	8002224 <lis2mdl_write_reg>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e0d9      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f103 0020 	add.w	r0, r3, #32
 8001e02:	f107 020b 	add.w	r2, r7, #11
 8001e06:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f000 fa0a 	bl	8002224 <lis2mdl_write_reg>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e0c9      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f103 0020 	add.w	r0, r3, #32
 8001e22:	f107 021d 	add.w	r2, r7, #29
 8001e26:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 f9fa 	bl	8002224 <lis2mdl_write_reg>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e0b9      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f103 0020 	add.w	r0, r3, #32
 8001e42:	f107 021e 	add.w	r2, r7, #30
 8001e46:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f000 f9ea 	bl	8002224 <lis2mdl_write_reg>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e0a9      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f103 0020 	add.w	r0, r3, #32
 8001e62:	f107 0220 	add.w	r2, r7, #32
 8001e66:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f000 f9da 	bl	8002224 <lis2mdl_write_reg>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e099      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f103 0020 	add.w	r0, r3, #32
 8001e82:	f107 021c 	add.w	r2, r7, #28
 8001e86:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 f9b2 	bl	80021f4 <lis2mdl_read_reg>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e089      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8001e9c:	7f3b      	ldrb	r3, [r7, #28]
 8001e9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d102      	bne.n	8001eac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8001ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001eaa:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f103 0020 	add.w	r0, r3, #32
 8001eb2:	f107 021c 	add.w	r2, r7, #28
 8001eb6:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f000 f9b2 	bl	8002224 <lis2mdl_write_reg>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e071      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f103 0020 	add.w	r0, r3, #32
 8001ed2:	f107 0214 	add.w	r2, r7, #20
 8001ed6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001eda:	2306      	movs	r3, #6
 8001edc:	f000 f98a 	bl	80021f4 <lis2mdl_read_reg>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e061      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f103 0020 	add.w	r0, r3, #32
 8001ef2:	f107 021b 	add.w	r2, r7, #27
 8001ef6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 f97a 	bl	80021f4 <lis2mdl_read_reg>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e051      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8001f0c:	7efa      	ldrb	r2, [r7, #27]
 8001f0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f12:	4013      	ands	r3, r2
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1e6      	bne.n	8001eec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f103 0020 	add.w	r0, r3, #32
 8001f24:	f107 021b 	add.w	r2, r7, #27
 8001f28:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f000 f961 	bl	80021f4 <lis2mdl_read_reg>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e038      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8001f3e:	7efa      	ldrb	r2, [r7, #27]
 8001f40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f44:	4013      	ands	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1e6      	bne.n	8001f1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f103 0020 	add.w	r0, r3, #32
 8001f56:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8001f5a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f000 f960 	bl	8002224 <lis2mdl_write_reg>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e01f      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f103 0020 	add.w	r0, r3, #32
 8001f76:	893b      	ldrh	r3, [r7, #8]
 8001f78:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	f000 f939 	bl	80021f4 <lis2mdl_read_reg>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e010      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f103 0020 	add.w	r0, r3, #32
 8001f94:	f107 0220 	add.w	r2, r7, #32
 8001f98:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f000 f941 	bl	8002224 <lis2mdl_write_reg>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	e000      	b.n	8001fb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	@ 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	@ 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	72fb      	strb	r3, [r7, #11]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8001fd2:	2340      	movs	r3, #64	@ 0x40
 8001fd4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8001fde:	233c      	movs	r3, #60	@ 0x3c
 8001fe0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8001fe2:	2315      	movs	r3, #21
 8001fe4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8001fe8:	2316      	movs	r3, #22
 8001fea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8001fee:	2317      	movs	r3, #23
 8001ff0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8001ff8:	2314      	movs	r3, #20
 8001ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8001ffe:	2344      	movs	r3, #68	@ 0x44
 8002000:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8002002:	2339      	movs	r3, #57	@ 0x39
 8002004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800200e:	2329      	movs	r3, #41	@ 0x29
 8002010:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002014:	231e      	movs	r3, #30
 8002016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002020:	2310      	movs	r3, #16
 8002022:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800202c:	2340      	movs	r3, #64	@ 0x40
 800202e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8002032:	230e      	movs	r3, #14
 8002034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f103 0020 	add.w	r0, r3, #32
 800203e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002042:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002046:	2301      	movs	r3, #1
 8002048:	f000 f8ec 	bl	8002224 <lis2mdl_write_reg>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e0c9      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f103 0020 	add.w	r0, r3, #32
 800205e:	f107 021f 	add.w	r2, r7, #31
 8002062:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8002066:	2301      	movs	r3, #1
 8002068:	f000 f8dc 	bl	8002224 <lis2mdl_write_reg>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e0b9      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f103 0020 	add.w	r0, r3, #32
 800207e:	f107 020b 	add.w	r2, r7, #11
 8002082:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002086:	2301      	movs	r3, #1
 8002088:	f000 f8cc 	bl	8002224 <lis2mdl_write_reg>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e0a9      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f103 0020 	add.w	r0, r3, #32
 800209e:	f107 021e 	add.w	r2, r7, #30
 80020a2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80020a6:	2301      	movs	r3, #1
 80020a8:	f000 f8bc 	bl	8002224 <lis2mdl_write_reg>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e099      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f103 0020 	add.w	r0, r3, #32
 80020be:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80020c2:	2301      	movs	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	f000 f8ad 	bl	8002224 <lis2mdl_write_reg>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e08a      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f103 0020 	add.w	r0, r3, #32
 80020dc:	f107 021d 	add.w	r2, r7, #29
 80020e0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80020e4:	2301      	movs	r3, #1
 80020e6:	f000 f89d 	bl	8002224 <lis2mdl_write_reg>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	e07a      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f103 0020 	add.w	r0, r3, #32
 80020fc:	f107 0220 	add.w	r2, r7, #32
 8002100:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002104:	2301      	movs	r3, #1
 8002106:	f000 f88d 	bl	8002224 <lis2mdl_write_reg>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
 8002114:	e06a      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f103 0020 	add.w	r0, r3, #32
 800211c:	f107 021c 	add.w	r2, r7, #28
 8002120:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002124:	2301      	movs	r3, #1
 8002126:	f000 f865 	bl	80021f4 <lis2mdl_read_reg>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	e05a      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002136:	7f3b      	ldrb	r3, [r7, #28]
 8002138:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800213c:	429a      	cmp	r2, r3
 800213e:	d102      	bne.n	8002146 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002140:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002144:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f103 0020 	add.w	r0, r3, #32
 800214c:	f107 021c 	add.w	r2, r7, #28
 8002150:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002154:	2301      	movs	r3, #1
 8002156:	f000 f865 	bl	8002224 <lis2mdl_write_reg>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e042      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f103 0020 	add.w	r0, r3, #32
 800216c:	f107 0214 	add.w	r2, r7, #20
 8002170:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8002174:	2306      	movs	r3, #6
 8002176:	f000 f83d 	bl	80021f4 <lis2mdl_read_reg>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	e032      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f103 0020 	add.w	r0, r3, #32
 800218c:	f107 021b 	add.w	r2, r7, #27
 8002190:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002194:	2301      	movs	r3, #1
 8002196:	f000 f82d 	bl	80021f4 <lis2mdl_read_reg>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	e022      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80021a6:	7efa      	ldrb	r2, [r7, #27]
 80021a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021ac:	4013      	ands	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1e6      	bne.n	8002186 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f103 0020 	add.w	r0, r3, #32
 80021be:	f107 021b 	add.w	r2, r7, #27
 80021c2:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80021c6:	2301      	movs	r3, #1
 80021c8:	f000 f814 	bl	80021f4 <lis2mdl_read_reg>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80021d8:	7efa      	ldrb	r2, [r7, #27]
 80021da:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80021de:	4013      	ands	r3, r2
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d1e6      	bne.n	80021b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3730      	adds	r7, #48	@ 0x30
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	461a      	mov	r2, r3
 8002200:	460b      	mov	r3, r1
 8002202:	72fb      	strb	r3, [r7, #11]
 8002204:	4613      	mov	r3, r2
 8002206:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685c      	ldr	r4, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68d8      	ldr	r0, [r3, #12]
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	7af9      	ldrb	r1, [r7, #11]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	47a0      	blx	r4
 8002218:	6178      	str	r0, [r7, #20]

  return ret;
 800221a:	697b      	ldr	r3, [r7, #20]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	72fb      	strb	r3, [r7, #11]
 8002234:	4613      	mov	r3, r2
 8002236:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681c      	ldr	r4, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	893b      	ldrh	r3, [r7, #8]
 8002242:	7af9      	ldrb	r1, [r7, #11]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	47a0      	blx	r4
 8002248:	6178      	str	r0, [r7, #20]

  return ret;
 800224a:	697b      	ldr	r3, [r7, #20]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002260:	f107 0208 	add.w	r2, r7, #8
 8002264:	2301      	movs	r3, #1
 8002266:	2160      	movs	r1, #96	@ 0x60
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffc3 	bl	80021f4 <lis2mdl_read_reg>
 800226e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	b2da      	uxtb	r2, r3
 800227e:	7a3b      	ldrb	r3, [r7, #8]
 8002280:	f362 0301 	bfi	r3, r2, #0, #2
 8002284:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	2301      	movs	r3, #1
 800228c:	2160      	movs	r1, #96	@ 0x60
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffc8 	bl	8002224 <lis2mdl_write_reg>
 8002294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80022ac:	f107 0208 	add.w	r2, r7, #8
 80022b0:	2301      	movs	r3, #1
 80022b2:	2160      	movs	r1, #96	@ 0x60
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff9d 	bl	80021f4 <lis2mdl_read_reg>
 80022ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	7a3b      	ldrb	r3, [r7, #8]
 80022cc:	f362 0383 	bfi	r3, r2, #2, #2
 80022d0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80022d2:	f107 0208 	add.w	r2, r7, #8
 80022d6:	2301      	movs	r3, #1
 80022d8:	2160      	movs	r1, #96	@ 0x60
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <lis2mdl_write_reg>
 80022e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80022f8:	f107 0208 	add.w	r2, r7, #8
 80022fc:	2301      	movs	r3, #1
 80022fe:	2162      	movs	r1, #98	@ 0x62
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff77 	bl	80021f4 <lis2mdl_read_reg>
 8002306:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	7a3b      	ldrb	r3, [r7, #8]
 8002318:	f362 1304 	bfi	r3, r2, #4, #1
 800231c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800231e:	f107 0208 	add.w	r2, r7, #8
 8002322:	2301      	movs	r3, #1
 8002324:	2162      	movs	r1, #98	@ 0x62
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff7c 	bl	8002224 <lis2mdl_write_reg>
 800232c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002342:	f107 020c 	add.w	r2, r7, #12
 8002346:	2306      	movs	r3, #6
 8002348:	2168      	movs	r1, #104	@ 0x68
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff52 	bl	80021f4 <lis2mdl_read_reg>
 8002350:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002352:	7b7b      	ldrb	r3, [r7, #13]
 8002354:	b21a      	sxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002360:	b29b      	uxth	r3, r3
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	7b3a      	ldrb	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	b21a      	sxth	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	3302      	adds	r3, #2
 8002378:	b212      	sxth	r2, r2
 800237a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3302      	adds	r3, #2
 8002380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002384:	b29b      	uxth	r3, r3
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	7bba      	ldrb	r2, [r7, #14]
 800238c:	4413      	add	r3, r2
 800238e:	b29a      	uxth	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3302      	adds	r3, #2
 8002394:	b212      	sxth	r2, r2
 8002396:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002398:	7c7a      	ldrb	r2, [r7, #17]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3304      	adds	r3, #4
 800239e:	b212      	sxth	r2, r2
 80023a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	7c3a      	ldrb	r2, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3304      	adds	r3, #4
 80023ba:	b212      	sxth	r2, r2
 80023bc:	801a      	strh	r2, [r3, #0]

  return ret;
 80023be:	697b      	ldr	r3, [r7, #20]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80023d4:	f107 0208 	add.w	r2, r7, #8
 80023d8:	2301      	movs	r3, #1
 80023da:	2162      	movs	r1, #98	@ 0x62
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff09 	bl	80021f4 <lis2mdl_read_reg>
 80023e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	7a3b      	ldrb	r3, [r7, #8]
 80023f4:	f362 0341 	bfi	r3, r2, #1, #1
 80023f8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80023fa:	f107 0208 	add.w	r2, r7, #8
 80023fe:	2301      	movs	r3, #1
 8002400:	2162      	movs	r1, #98	@ 0x62
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ff0e 	bl	8002224 <lis2mdl_write_reg>
 8002408:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002420:	f107 0208 	add.w	r2, r7, #8
 8002424:	2301      	movs	r3, #1
 8002426:	2162      	movs	r1, #98	@ 0x62
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fee3 	bl	80021f4 <lis2mdl_read_reg>
 800242e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	7a3b      	ldrb	r3, [r7, #8]
 8002440:	f362 1345 	bfi	r3, r2, #5, #1
 8002444:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8002446:	f107 0208 	add.w	r2, r7, #8
 800244a:	2301      	movs	r3, #1
 800244c:	2162      	movs	r1, #98	@ 0x62
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fee8 	bl	8002224 <lis2mdl_write_reg>
 8002454:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e051      	b.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7b1a      	ldrb	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <LSM6DSO_RegisterBusIO+0xcc>)
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002530 <LSM6DSO_RegisterBusIO+0xd0>)
 80024be:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e020      	b.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4798      	blx	r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e016      	b.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d112      	bne.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002504:	230c      	movs	r3, #12
 8002506:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	461a      	mov	r2, r3
 800250c:	2112      	movs	r1, #18
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa23 	bl	800295a <LSM6DSO_Write_Reg>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	080029dd 	.word	0x080029dd
 8002530:	08002a13 	.word	0x08002a13

08002534 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d00b      	beq.n	800255c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3320      	adds	r3, #32
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fe5f 	bl	800320e <lsm6dso_i3c_disable_set>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e06a      	b.n	8002632 <LSM6DSO_Init+0xfe>
    }
  }

  /* Set main memory bank */
  if (LSM6DSO_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 800255c:	2100      	movs	r1, #0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa16 	bl	8002990 <LSM6DSO_Set_Mem_Bank>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <LSM6DSO_Init+0x3c>
  {
    return LSM6DSO_ERROR;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e060      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3320      	adds	r3, #32
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe23 	bl	80031c2 <lsm6dso_auto_increment_set>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <LSM6DSO_Init+0x54>
  {
    return LSM6DSO_ERROR;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e054      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3320      	adds	r3, #32
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd44 	bl	800301c <lsm6dso_block_data_update_set>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <LSM6DSO_Init+0x6c>
  {
    return LSM6DSO_ERROR;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e048      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3320      	adds	r3, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fe79 	bl	800329e <lsm6dso_fifo_mode_set>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <LSM6DSO_Init+0x84>
  {
    return LSM6DSO_ERROR;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e03c      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3320      	adds	r3, #32
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 facc 	bl	8002b64 <lsm6dso_xl_data_rate_set>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <LSM6DSO_Init+0xa4>
  {
    return LSM6DSO_ERROR;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e02c      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3320      	adds	r3, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fa62 	bl	8002aa8 <lsm6dso_xl_full_scale_set>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <LSM6DSO_Init+0xbc>
  {
    return LSM6DSO_ERROR;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e020      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3320      	adds	r3, #32
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fc12 	bl	8002e28 <lsm6dso_gy_data_rate_set>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <LSM6DSO_Init+0xdc>
  {
    return LSM6DSO_ERROR;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e010      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3320      	adds	r3, #32
 8002614:	2106      	movs	r1, #6
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb9e 	bl	8002d58 <lsm6dso_gy_full_scale_set>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <LSM6DSO_Init+0xf4>
  {
    return LSM6DSO_ERROR;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e004      	b.n	8002632 <LSM6DSO_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e014      	b.n	800267a <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 0220 	add.w	r2, r3, #32
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fa80 	bl	8002b64 <lsm6dso_xl_data_rate_set>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e004      	b.n	800267a <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3320      	adds	r3, #32
 8002696:	f107 020b 	add.w	r2, r7, #11
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fa29 	bl	8002af4 <lsm6dso_xl_full_scale_get>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e023      	b.n	80026f6 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d81b      	bhi.n	80026ec <LSM6DSO_ACC_GetSensitivity+0x68>
 80026b4:	a201      	add	r2, pc, #4	@ (adr r2, 80026bc <LSM6DSO_ACC_GetSensitivity+0x38>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026dd 	.word	0x080026dd
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80026d0:	601a      	str	r2, [r3, #0]
      break;
 80026d2:	e00f      	b.n	80026f4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80026d8:	601a      	str	r2, [r3, #0]
      break;
 80026da:	e00b      	b.n	80026f4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80026e0:	601a      	str	r2, [r3, #0]
      break;
 80026e2:	e007      	b.n	80026f4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <LSM6DSO_ACC_GetSensitivity+0x88>)
 80026e8:	601a      	str	r2, [r3, #0]
      break;
 80026ea:	e003      	b.n	80026f4 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	60fb      	str	r3, [r7, #12]
      break;
 80026f2:	bf00      	nop
  }

  return ret;
 80026f4:	68fb      	ldr	r3, [r7, #12]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	3d79db23 	.word	0x3d79db23
 8002704:	3df9db23 	.word	0x3df9db23
 8002708:	3e79db23 	.word	0x3e79db23
 800270c:	3ef9db23 	.word	0x3ef9db23

08002710 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3320      	adds	r3, #32
 8002724:	f107 0210 	add.w	r2, r7, #16
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fce4 	bl	80030f8 <lsm6dso_acceleration_raw_get>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e03c      	b.n	80027b6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff9e 	bl	8002684 <LSM6DSO_ACC_GetSensitivity>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e030      	b.n	80027b6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8002754:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002760:	edd7 7a03 	vldr	s15, [r7, #12]
 8002764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800276c:	ee17 2a90 	vmov	r2, s15
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8002774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002780:	edd7 7a03 	vldr	s15, [r7, #12]
 8002784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278c:	ee17 2a90 	vmov	r2, s15
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8002794:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ac:	ee17 2a90 	vmov	r2, s15
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e014      	b.n	80027fe <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0220 	add.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 fb20 	bl	8002e28 <lsm6dso_gy_data_rate_set>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e004      	b.n	80027fe <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3320      	adds	r3, #32
 800281a:	f107 020b 	add.w	r2, r7, #11
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fabf 	bl	8002da4 <lsm6dso_gy_full_scale_get>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e02d      	b.n	800288e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d825      	bhi.n	8002884 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002865 	.word	0x08002865
 8002844:	0800285d 	.word	0x0800285d
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002885 	.word	0x08002885
 8002850:	08002875 	.word	0x08002875
 8002854:	08002885 	.word	0x08002885
 8002858:	0800287d 	.word	0x0800287d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8002860:	601a      	str	r2, [r3, #0]
      break;
 8002862:	e013      	b.n	800288c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8002868:	601a      	str	r2, [r3, #0]
      break;
 800286a:	e00f      	b.n	800288c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8002870:	601a      	str	r2, [r3, #0]
      break;
 8002872:	e00b      	b.n	800288c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4a0b      	ldr	r2, [pc, #44]	@ (80028a4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8002878:	601a      	str	r2, [r3, #0]
      break;
 800287a:	e007      	b.n	800288c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8002880:	601a      	str	r2, [r3, #0]
      break;
 8002882:	e003      	b.n	800288c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	60fb      	str	r3, [r7, #12]
      break;
 800288a:	bf00      	nop
  }

  return ret;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	408c0000 	.word	0x408c0000
 800289c:	410c0000 	.word	0x410c0000
 80028a0:	418c0000 	.word	0x418c0000
 80028a4:	420c0000 	.word	0x420c0000
 80028a8:	428c0000 	.word	0x428c0000

080028ac <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3320      	adds	r3, #32
 80028c0:	f107 0210 	add.w	r2, r7, #16
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fbce 	bl	8003068 <lsm6dso_angular_rate_raw_get>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <LSM6DSO_GYRO_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e03c      	b.n	8002952 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff92 	bl	8002808 <LSM6DSO_GYRO_GetSensitivity>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <LSM6DSO_GYRO_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e030      	b.n	8002952 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80028f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002908:	ee17 2a90 	vmov	r2, s15
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8002910:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002928:	ee17 2a90 	vmov	r2, s15
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8002930:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002948:	ee17 2a90 	vmov	r2, s15
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
 8002966:	4613      	mov	r3, r2
 8002968:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f103 0020 	add.w	r0, r3, #32
 8002970:	1cba      	adds	r2, r7, #2
 8002972:	78f9      	ldrb	r1, [r7, #3]
 8002974:	2301      	movs	r3, #1
 8002976:	f000 f87f 	bl	8002a78 <lsm6dso_write_reg>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	e000      	b.n	8002988 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <LSM6DSO_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO_USER_BANK, 1 - LSM6DSO_SENSOR_HUB_BANK, 2 - LSM6DSO_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Set_Mem_Bank(LSM6DSO_Object_t *pObj, uint8_t Val)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  lsm6dso_reg_access_t reg;

  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
        : (Val == 2U) ? LSM6DSO_EMBEDDED_FUNC_BANK
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d006      	beq.n	80029b4 <LSM6DSO_Set_Mem_Bank+0x24>
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d101      	bne.n	80029b0 <LSM6DSO_Set_Mem_Bank+0x20>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <LSM6DSO_Set_Mem_Bank+0x26>
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <LSM6DSO_Set_Mem_Bank+0x26>
 80029b4:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
 80029b6:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO_USER_BANK;

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3320      	adds	r3, #32
 80029bc:	7afa      	ldrb	r2, [r7, #11]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fbe1 	bl	8003188 <lsm6dso_mem_bank_set>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <LSM6DSO_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	72fb      	strb	r3, [r7, #11]
 80029ec:	4613      	mov	r3, r2
 80029ee:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	695c      	ldr	r4, [r3, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	7b1b      	ldrb	r3, [r3, #12]
 80029fc:	4618      	mov	r0, r3
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	b299      	uxth	r1, r3
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	47a0      	blx	r4
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}

08002a12 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a12:	b590      	push	{r4, r7, lr}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	460b      	mov	r3, r1
 8002a20:	72fb      	strb	r3, [r7, #11]
 8002a22:	4613      	mov	r3, r2
 8002a24:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	691c      	ldr	r4, [r3, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	7b1b      	ldrb	r3, [r3, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b299      	uxth	r1, r3
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	47a0      	blx	r4
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}

08002a48 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	461a      	mov	r2, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	72fb      	strb	r3, [r7, #11]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685c      	ldr	r4, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68d8      	ldr	r0, [r3, #12]
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	7af9      	ldrb	r1, [r7, #11]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	47a0      	blx	r4
 8002a6c:	6178      	str	r0, [r7, #20]

  return ret;
 8002a6e:	697b      	ldr	r3, [r7, #20]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd90      	pop	{r4, r7, pc}

08002a78 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	461a      	mov	r2, r3
 8002a84:	460b      	mov	r3, r1
 8002a86:	72fb      	strb	r3, [r7, #11]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681c      	ldr	r4, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68d8      	ldr	r0, [r3, #12]
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	7af9      	ldrb	r1, [r7, #11]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	47a0      	blx	r4
 8002a9c:	6178      	str	r0, [r7, #20]

  return ret;
 8002a9e:	697b      	ldr	r3, [r7, #20]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002ab4:	f107 0208 	add.w	r2, r7, #8
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2110      	movs	r1, #16
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffc3 	bl	8002a48 <lsm6dso_read_reg>
 8002ac2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	7a3b      	ldrb	r3, [r7, #8]
 8002ad4:	f362 0383 	bfi	r3, r2, #2, #2
 8002ad8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002ada:	f107 0208 	add.w	r2, r7, #8
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffc8 	bl	8002a78 <lsm6dso_write_reg>
 8002ae8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002afe:	f107 0208 	add.w	r2, r7, #8
 8002b02:	2301      	movs	r3, #1
 8002b04:	2110      	movs	r1, #16
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff9e 	bl	8002a48 <lsm6dso_read_reg>
 8002b0c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d81a      	bhi.n	8002b50 <lsm6dso_xl_full_scale_get+0x5c>
 8002b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <lsm6dso_xl_full_scale_get+0x2c>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b39 	.word	0x08002b39
 8002b28:	08002b41 	.word	0x08002b41
 8002b2c:	08002b49 	.word	0x08002b49
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
      break;
 8002b36:	e00f      	b.n	8002b58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	e00b      	b.n	8002b58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
      break;
 8002b46:	e007      	b.n	8002b58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]
      break;
 8002b4e:	e003      	b.n	8002b58 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
      break;
 8002b56:	bf00      	nop
  }

  return ret;
 8002b58:	68fb      	ldr	r3, [r7, #12]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop

08002b64 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fbb5 	bl	80032ea <lsm6dso_fsm_enable_get>
 8002b80:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <lsm6dso_xl_data_rate_set+0x28>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	e0e0      	b.n	8002d4e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002b94:	7b3b      	ldrb	r3, [r7, #12]
 8002b96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b9a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002ba0:	7b3b      	ldrb	r3, [r7, #12]
 8002ba2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ba6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002bac:	7b3b      	ldrb	r3, [r7, #12]
 8002bae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002bb8:	7b3b      	ldrb	r3, [r7, #12]
 8002bba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002bc4:	7b3b      	ldrb	r3, [r7, #12]
 8002bc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002bd0:	7b3b      	ldrb	r3, [r7, #12]
 8002bd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002bdc:	7b3b      	ldrb	r3, [r7, #12]
 8002bde:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002be2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002be8:	7b7b      	ldrb	r3, [r7, #13]
 8002bea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002bf4:	7b7b      	ldrb	r3, [r7, #13]
 8002bf6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002c00:	7b7b      	ldrb	r3, [r7, #13]
 8002c02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002c0c:	7b7b      	ldrb	r3, [r7, #13]
 8002c0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002c18:	7b7b      	ldrb	r3, [r7, #13]
 8002c1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002c30:	7b7b      	ldrb	r3, [r7, #13]
 8002c32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002c3c:	7b7b      	ldrb	r3, [r7, #13]
 8002c3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d164      	bne.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002c4c:	f107 030b 	add.w	r3, r7, #11
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fb6a 	bl	800332c <lsm6dso_fsm_data_rate_get>
 8002c58:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <lsm6dso_xl_data_rate_set+0x100>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	e074      	b.n	8002d4e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d852      	bhi.n	8002d10 <lsm6dso_xl_data_rate_set+0x1ac>
 8002c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <lsm6dso_xl_data_rate_set+0x10c>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c93 	.word	0x08002c93
 8002c78:	08002cb1 	.word	0x08002cb1
 8002c7c:	08002cdb 	.word	0x08002cdb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002c8a:	e044      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	75fb      	strb	r3, [r7, #23]
        break;
 8002c90:	e041      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002c9c:	e03b      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ca8:	e035      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	75fb      	strb	r3, [r7, #23]
        break;
 8002cae:	e032      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002cba:	e02c      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002cc6:	e026      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d102      	bne.n	8002cd4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	75fb      	strb	r3, [r7, #23]
        break;
 8002cd2:	e020      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	75fb      	strb	r3, [r7, #23]
        break;
 8002cd8:	e01d      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002ce4:	e017      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002cec:	2304      	movs	r3, #4
 8002cee:	75fb      	strb	r3, [r7, #23]
        break;
 8002cf0:	e011      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d102      	bne.n	8002cfe <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	75fb      	strb	r3, [r7, #23]
        break;
 8002cfc:	e00b      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d102      	bne.n	8002d0a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002d04:	2304      	movs	r3, #4
 8002d06:	75fb      	strb	r3, [r7, #23]
        break;
 8002d08:	e005      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d0e:	e002      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	75fb      	strb	r3, [r7, #23]
        break;
 8002d14:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fe92 	bl	8002a48 <lsm6dso_read_reg>
 8002d24:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	7a3b      	ldrb	r3, [r7, #8]
 8002d30:	f362 1307 	bfi	r3, r2, #4, #4
 8002d34:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d36:	f107 0208 	add.w	r2, r7, #8
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fe9a 	bl	8002a78 <lsm6dso_write_reg>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

  return ret;
 8002d4c:	693b      	ldr	r3, [r7, #16]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	2301      	movs	r3, #1
 8002d6a:	2111      	movs	r1, #17
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fe6b 	bl	8002a48 <lsm6dso_read_reg>
 8002d72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	7a3b      	ldrb	r3, [r7, #8]
 8002d84:	f362 0343 	bfi	r3, r2, #1, #3
 8002d88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002d8a:	f107 0208 	add.w	r2, r7, #8
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2111      	movs	r1, #17
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fe70 	bl	8002a78 <lsm6dso_write_reg>
 8002d98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002dae:	f107 0208 	add.w	r2, r7, #8
 8002db2:	2301      	movs	r3, #1
 8002db4:	2111      	movs	r1, #17
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fe46 	bl	8002a48 <lsm6dso_read_reg>
 8002dbc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8002dbe:	7a3b      	ldrb	r3, [r7, #8]
 8002dc0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d824      	bhi.n	8002e14 <lsm6dso_gy_full_scale_get+0x70>
 8002dca:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <lsm6dso_gy_full_scale_get+0x2c>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	08002df5 	.word	0x08002df5
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002e05 	.word	0x08002e05
 8002de4:	08002e15 	.word	0x08002e15
 8002de8:	08002e0d 	.word	0x08002e0d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e013      	b.n	8002e1c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
      break;
 8002dfa:	e00f      	b.n	8002e1c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
      break;
 8002e02:	e00b      	b.n	8002e1c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
      break;
 8002e0a:	e007      	b.n	8002e1c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2206      	movs	r2, #6
 8002e10:	701a      	strb	r2, [r3, #0]
      break;
 8002e12:	e003      	b.n	8002e1c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
      break;
 8002e1a:	bf00      	nop
  }

  return ret;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa53 	bl	80032ea <lsm6dso_fsm_enable_get>
 8002e44:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <lsm6dso_gy_data_rate_set+0x28>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	e0e0      	b.n	8003012 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e50:	7b3b      	ldrb	r3, [r7, #12]
 8002e52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002e58:	7b3b      	ldrb	r3, [r7, #12]
 8002e5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e5e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002e64:	7b3b      	ldrb	r3, [r7, #12]
 8002e66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002e70:	7b3b      	ldrb	r3, [r7, #12]
 8002e72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002e7c:	7b3b      	ldrb	r3, [r7, #12]
 8002e7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002e88:	7b3b      	ldrb	r3, [r7, #12]
 8002e8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002e94:	7b3b      	ldrb	r3, [r7, #12]
 8002e96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002ea6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002eac:	7b7b      	ldrb	r3, [r7, #13]
 8002eae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002eb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002eb8:	7b7b      	ldrb	r3, [r7, #13]
 8002eba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ebe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002ec4:	7b7b      	ldrb	r3, [r7, #13]
 8002ec6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002eca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002ed0:	7b7b      	ldrb	r3, [r7, #13]
 8002ed2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ed6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002edc:	7b7b      	ldrb	r3, [r7, #13]
 8002ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ee2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002ee8:	7b7b      	ldrb	r3, [r7, #13]
 8002eea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002eee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002ef4:	7b7b      	ldrb	r3, [r7, #13]
 8002ef6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002efa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002f00:	7b7b      	ldrb	r3, [r7, #13]
 8002f02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d164      	bne.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002f10:	f107 030b 	add.w	r3, r7, #11
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa08 	bl	800332c <lsm6dso_fsm_data_rate_get>
 8002f1c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <lsm6dso_gy_data_rate_set+0x100>
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	e074      	b.n	8003012 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d852      	bhi.n	8002fd4 <lsm6dso_gy_data_rate_set+0x1ac>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <lsm6dso_gy_data_rate_set+0x10c>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f57 	.word	0x08002f57
 8002f3c:	08002f75 	.word	0x08002f75
 8002f40:	08002f9f 	.word	0x08002f9f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002f4e:	e044      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	75fb      	strb	r3, [r7, #23]
        break;
 8002f54:	e041      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002f60:	e03b      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	75fb      	strb	r3, [r7, #23]
        break;
 8002f6c:	e035      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	75fb      	strb	r3, [r7, #23]
        break;
 8002f72:	e032      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002f7e:	e02c      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002f86:	2303      	movs	r3, #3
 8002f88:	75fb      	strb	r3, [r7, #23]
        break;
 8002f8a:	e026      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d102      	bne.n	8002f98 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002f92:	2303      	movs	r3, #3
 8002f94:	75fb      	strb	r3, [r7, #23]
        break;
 8002f96:	e020      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	75fb      	strb	r3, [r7, #23]
        break;
 8002f9c:	e01d      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002fa8:	e017      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	75fb      	strb	r3, [r7, #23]
        break;
 8002fb4:	e011      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d102      	bne.n	8002fc2 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002fc0:	e00b      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d102      	bne.n	8002fce <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002fc8:	2304      	movs	r3, #4
 8002fca:	75fb      	strb	r3, [r7, #23]
        break;
 8002fcc:	e005      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8002fd2:	e002      	b.n	8002fda <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	75fb      	strb	r3, [r7, #23]
        break;
 8002fd8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002fda:	f107 0208 	add.w	r2, r7, #8
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2111      	movs	r1, #17
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fd30 	bl	8002a48 <lsm6dso_read_reg>
 8002fe8:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	7a3b      	ldrb	r3, [r7, #8]
 8002ff4:	f362 1307 	bfi	r3, r2, #4, #4
 8002ff8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002ffa:	f107 0208 	add.w	r2, r7, #8
 8002ffe:	2301      	movs	r3, #1
 8003000:	2111      	movs	r1, #17
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fd38 	bl	8002a78 <lsm6dso_write_reg>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

  return ret;
 8003010:	693b      	ldr	r3, [r7, #16]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop

0800301c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003028:	f107 0208 	add.w	r2, r7, #8
 800302c:	2301      	movs	r3, #1
 800302e:	2112      	movs	r1, #18
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fd09 	bl	8002a48 <lsm6dso_read_reg>
 8003036:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	7a3b      	ldrb	r3, [r7, #8]
 8003048:	f362 1386 	bfi	r3, r2, #6, #1
 800304c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800304e:	f107 0208 	add.w	r2, r7, #8
 8003052:	2301      	movs	r3, #1
 8003054:	2112      	movs	r1, #18
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fd0e 	bl	8002a78 <lsm6dso_write_reg>
 800305c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8003072:	f107 020c 	add.w	r2, r7, #12
 8003076:	2306      	movs	r3, #6
 8003078:	2122      	movs	r1, #34	@ 0x22
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fce4 	bl	8002a48 <lsm6dso_read_reg>
 8003080:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	b21a      	sxth	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003090:	b29b      	uxth	r3, r3
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	7b3a      	ldrb	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	b21a      	sxth	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3302      	adds	r3, #2
 80030a8:	b212      	sxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3302      	adds	r3, #2
 80030b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	7bba      	ldrb	r2, [r7, #14]
 80030bc:	4413      	add	r3, r2
 80030be:	b29a      	uxth	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	3302      	adds	r3, #2
 80030c4:	b212      	sxth	r2, r2
 80030c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80030c8:	7c7a      	ldrb	r2, [r7, #17]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3304      	adds	r3, #4
 80030ce:	b212      	sxth	r2, r2
 80030d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3304      	adds	r3, #4
 80030d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	7c3a      	ldrb	r2, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3304      	adds	r3, #4
 80030ea:	b212      	sxth	r2, r2
 80030ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80030ee:	697b      	ldr	r3, [r7, #20]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8003102:	f107 020c 	add.w	r2, r7, #12
 8003106:	2306      	movs	r3, #6
 8003108:	2128      	movs	r1, #40	@ 0x28
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fc9c 	bl	8002a48 <lsm6dso_read_reg>
 8003110:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003112:	7b7b      	ldrb	r3, [r7, #13]
 8003114:	b21a      	sxth	r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003120:	b29b      	uxth	r3, r3
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	b29b      	uxth	r3, r3
 8003126:	7b3a      	ldrb	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	b21a      	sxth	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3302      	adds	r3, #2
 8003138:	b212      	sxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	3302      	adds	r3, #2
 8003140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003144:	b29b      	uxth	r3, r3
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	b29b      	uxth	r3, r3
 800314a:	7bba      	ldrb	r2, [r7, #14]
 800314c:	4413      	add	r3, r2
 800314e:	b29a      	uxth	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	3302      	adds	r3, #2
 8003154:	b212      	sxth	r2, r2
 8003156:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003158:	7c7a      	ldrb	r2, [r7, #17]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	b212      	sxth	r2, r2
 8003160:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	b29b      	uxth	r3, r3
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b29b      	uxth	r3, r3
 8003170:	7c3a      	ldrb	r2, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	b29a      	uxth	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3304      	adds	r3, #4
 800317a:	b212      	sxth	r2, r2
 800317c:	801a      	strh	r2, [r3, #0]

  return ret;
 800317e:	697b      	ldr	r3, [r7, #20]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8003194:	2300      	movs	r3, #0
 8003196:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	7a3b      	ldrb	r3, [r7, #8]
 80031a2:	f362 1387 	bfi	r3, r2, #6, #2
 80031a6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80031a8:	f107 0208 	add.w	r2, r7, #8
 80031ac:	2301      	movs	r3, #1
 80031ae:	2101      	movs	r1, #1
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fc61 	bl	8002a78 <lsm6dso_write_reg>
 80031b6:	60f8      	str	r0, [r7, #12]

  return ret;
 80031b8:	68fb      	ldr	r3, [r7, #12]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031ce:	f107 0208 	add.w	r2, r7, #8
 80031d2:	2301      	movs	r3, #1
 80031d4:	2112      	movs	r1, #18
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fc36 	bl	8002a48 <lsm6dso_read_reg>
 80031dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	7a3b      	ldrb	r3, [r7, #8]
 80031ee:	f362 0382 	bfi	r3, r2, #2, #1
 80031f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	2301      	movs	r3, #1
 80031fa:	2112      	movs	r1, #18
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fc3b 	bl	8002a78 <lsm6dso_write_reg>
 8003202:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800321a:	f107 020c 	add.w	r2, r7, #12
 800321e:	2301      	movs	r3, #1
 8003220:	2118      	movs	r1, #24
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fc10 	bl	8002a48 <lsm6dso_read_reg>
 8003228:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	09db      	lsrs	r3, r3, #7
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	7b3b      	ldrb	r3, [r7, #12]
 8003238:	f362 0341 	bfi	r3, r2, #1, #1
 800323c:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800323e:	f107 020c 	add.w	r2, r7, #12
 8003242:	2301      	movs	r3, #1
 8003244:	2118      	movs	r1, #24
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fc16 	bl	8002a78 <lsm6dso_write_reg>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4413      	add	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <lsm6dso_i3c_disable_set+0x50>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	e01b      	b.n	8003296 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800325e:	f107 0210 	add.w	r2, r7, #16
 8003262:	2301      	movs	r3, #1
 8003264:	2162      	movs	r1, #98	@ 0x62
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fbee 	bl	8002a48 <lsm6dso_read_reg>
 800326c:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	7c3b      	ldrb	r3, [r7, #16]
 8003278:	f362 03c4 	bfi	r3, r2, #3, #2
 800327c:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800327e:	f107 0210 	add.w	r2, r7, #16
 8003282:	2301      	movs	r3, #1
 8003284:	2162      	movs	r1, #98	@ 0x62
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fbf6 	bl	8002a78 <lsm6dso_write_reg>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  return ret;
 8003294:	697b      	ldr	r3, [r7, #20]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80032aa:	f107 0208 	add.w	r2, r7, #8
 80032ae:	2301      	movs	r3, #1
 80032b0:	210a      	movs	r1, #10
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fbc8 	bl	8002a48 <lsm6dso_read_reg>
 80032b8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	7a3b      	ldrb	r3, [r7, #8]
 80032ca:	f362 0302 	bfi	r3, r2, #0, #3
 80032ce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80032d0:	f107 0208 	add.w	r2, r7, #8
 80032d4:	2301      	movs	r3, #1
 80032d6:	210a      	movs	r1, #10
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fbcd 	bl	8002a78 <lsm6dso_write_reg>
 80032de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80032f4:	2102      	movs	r1, #2
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff46 	bl	8003188 <lsm6dso_mem_bank_set>
 80032fc:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80032fe:	2302      	movs	r3, #2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	2146      	movs	r1, #70	@ 0x46
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff fb9f 	bl	8002a48 <lsm6dso_read_reg>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff37 	bl	8003188 <lsm6dso_mem_bank_set>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  return ret;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003336:	2102      	movs	r1, #2
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff25 	bl	8003188 <lsm6dso_mem_bank_set>
 800333e:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <lsm6dso_fsm_data_rate_get+0x1e>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	e03a      	b.n	80033c0 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800334a:	f107 0208 	add.w	r2, r7, #8
 800334e:	2301      	movs	r3, #1
 8003350:	215f      	movs	r1, #95	@ 0x5f
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fb78 	bl	8002a48 <lsm6dso_read_reg>
 8003358:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d125      	bne.n	80033ac <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8003360:	7a3b      	ldrb	r3, [r7, #8]
 8003362:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b03      	cmp	r3, #3
 800336a:	d81b      	bhi.n	80033a4 <lsm6dso_fsm_data_rate_get+0x78>
 800336c:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <lsm6dso_fsm_data_rate_get+0x48>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	08003385 	.word	0x08003385
 8003378:	0800338d 	.word	0x0800338d
 800337c:	08003395 	.word	0x08003395
 8003380:	0800339d 	.word	0x0800339d
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
      break;
 800338a:	e010      	b.n	80033ae <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
      break;
 8003392:	e00c      	b.n	80033ae <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
      break;
 800339a:	e008      	b.n	80033ae <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
      break;
 80033a2:	e004      	b.n	80033ae <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
      break;
 80033aa:	e000      	b.n	80033ae <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80033ac:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80033ae:	2100      	movs	r1, #0
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fee9 	bl	8003188 <lsm6dso_mem_bank_set>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  return ret;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3318      	adds	r3, #24
 80033dc:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80033e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	2101      	movs	r1, #1
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f00f ff2b 	bl	801324c <VL53LX_WrByte>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8003422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 800342a:	2101      	movs	r1, #1
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f001 fcfc 	bl	8004e2a <VL53LX_data_init>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8003436:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800343e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003442:	2102      	movs	r1, #2
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f885 	bl	8003554 <SetPresetModeL3CX>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800344e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003456:	f248 2135 	movw	r1, #33333	@ 0x8235
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f980 	bl	8003760 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8003464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3318      	adds	r3, #24
 8003470:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8003478:	220c      	movs	r2, #12
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f01a f9eb 	bl	801d858 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8003482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800348a:	2102      	movs	r1, #2
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f003 fef0 	bl	8007272 <VL53LX_set_dmax_mode>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8003496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 800349e:	2100      	movs	r1, #0
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 ff43 	bl	800432c <VL53LX_SmudgeCorrectionEnable>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80034aa:	2320      	movs	r3, #32
 80034ac:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80034c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80034d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f00f fa6f 	bl	80129c0 <VL53LX_poll_for_boot_completion>
 80034e2:	4603      	mov	r3, r0
 80034e4:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003500:	2300      	movs	r3, #0
 8003502:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8003504:	4a12      	ldr	r2, [pc, #72]	@ (8003550 <ComputeDevicePresetMode+0x5c>)
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4611      	mov	r1, r2
 800350e:	8019      	strh	r1, [r3, #0]
 8003510:	3302      	adds	r3, #2
 8003512:	0c12      	lsrs	r2, r2, #16
 8003514:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d002      	beq.n	8003522 <ComputeDevicePresetMode+0x2e>
 800351c:	2b02      	cmp	r3, #2
 800351e:	d003      	beq.n	8003528 <ComputeDevicePresetMode+0x34>
 8003520:	e005      	b.n	800352e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
		break;
 8003526:	e004      	b.n	8003532 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
		break;
 800352c:	e001      	b.n	8003532 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800352e:	2302      	movs	r3, #2
 8003530:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	3310      	adds	r3, #16
 8003536:	443b      	add	r3, r7
 8003538:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	701a      	strb	r2, [r3, #0]

	return Status;
 8003540:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	0801e920 	.word	0x0801e920

08003554 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003554:	b5b0      	push	{r4, r5, r7, lr}
 8003556:	b08e      	sub	sp, #56	@ 0x38
 8003558:	af04      	add	r7, sp, #16
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	460b      	mov	r3, r1
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003578:	2320      	movs	r3, #32
 800357a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800357e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ffb4 	bl	80034f4 <ComputeDevicePresetMode>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8003592:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003596:	2b00      	cmp	r3, #0
 8003598:	d112      	bne.n	80035c0 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 800359a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800359e:	f107 001c 	add.w	r0, r7, #28
 80035a2:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4603      	mov	r3, r0
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f002 f89b 	bl	80056f0 <VL53LX_get_preset_mode_timing_cfg>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80035c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d112      	bne.n	80035ee <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80035c8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80035cc:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80035ce:	69fd      	ldr	r5, [r7, #28]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	9102      	str	r1, [sp, #8]
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	462b      	mov	r3, r5
 80035de:	4622      	mov	r2, r4
 80035e0:	4601      	mov	r1, r0
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f002 f8e5 	bl	80057b2 <VL53LX_set_preset_mode>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80035ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80035fc:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80035fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003602:	4618      	mov	r0, r3
 8003604:	3728      	adds	r7, #40	@ 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bdb0      	pop	{r4, r5, r7, pc}

0800360a <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3318      	adds	r3, #24
 800361a:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 8003622:	2baa      	cmp	r3, #170	@ 0xaa
 8003624:	d106      	bne.n	8003634 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 800362c:	2beb      	cmp	r3, #235	@ 0xeb
 800362e:	d101      	bne.n	8003634 <IsL4+0x2a>
		devL4 = 1;
 8003630:	2301      	movs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
	return devL4;
 8003634:	68fb      	ldr	r3, [r7, #12]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800364e:	793b      	ldrb	r3, [r7, #4]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d808      	bhi.n	8003666 <CheckValidRectRoi+0x24>
 8003654:	797b      	ldrb	r3, [r7, #5]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	d805      	bhi.n	8003666 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800365a:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d802      	bhi.n	8003666 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d901      	bls.n	800366a <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003666:	23fc      	movs	r3, #252	@ 0xfc
 8003668:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800366a:	793a      	ldrb	r2, [r7, #4]
 800366c:	79bb      	ldrb	r3, [r7, #6]
 800366e:	429a      	cmp	r2, r3
 8003670:	d803      	bhi.n	800367a <CheckValidRectRoi+0x38>
 8003672:	797a      	ldrb	r2, [r7, #5]
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	429a      	cmp	r2, r3
 8003678:	d201      	bcs.n	800367e <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800367a:	23fc      	movs	r3, #252	@ 0xfc
 800367c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b088      	sub	sp, #32
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d008      	beq.n	80036c2 <VL53LX_SetDistanceMode+0x34>
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d005      	beq.n	80036c2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d002      	beq.n	80036c2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 80036bc:	f06f 0303 	mvn.w	r3, #3
 80036c0:	e049      	b.n	8003756 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffa1 	bl	800360a <IsL4>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <VL53LX_SetDistanceMode+0x4c>
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 80036d4:	f06f 0303 	mvn.w	r3, #3
 80036d8:	e03d      	b.n	8003756 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80036e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	f107 0210 	add.w	r2, r7, #16
 80036f0:	f107 010c 	add.w	r1, r7, #12
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 fed6 	bl	80054a6 <VL53LX_get_timeouts_us>
 80036fa:	4603      	mov	r3, r0
 80036fc:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 80036fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff21 	bl	8003554 <SetPresetModeL3CX>
 8003712:	4603      	mov	r3, r0
 8003714:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8003716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003724:	461a      	mov	r2, r3
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800372c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10e      	bne.n	8003752 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f001 fe7a 	bl	8005434 <VL53LX_set_timeouts_us>
 8003740:	4603      	mov	r3, r0
 8003742:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8003744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003752:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	@ 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800377c:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800377e:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4a31      	ldr	r2, [pc, #196]	@ (8003848 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d902      	bls.n	800378e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003788:	23fc      	movs	r3, #252	@ 0xfc
 800378a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 800378e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	f107 0210 	add.w	r2, r7, #16
 800379e:	f107 010c 	add.w	r1, r7, #12
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 fe7f 	bl	80054a6 <VL53LX_get_timeouts_us>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 80037ae:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 80037b2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 80037b4:	2306      	movs	r3, #6
 80037b6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff26 	bl	800360a <IsL4>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 80037c6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d803      	bhi.n	80037d8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80037d0:	23fc      	movs	r3, #252	@ 0xfc
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037d6:	e003      	b.n	80037e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80037de:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80037e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11c      	bne.n	8003822 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	6a3a      	ldr	r2, [r7, #32]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d203      	bcs.n	80037f8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80037f0:	23fc      	movs	r3, #252	@ 0xfc
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037f6:	e00d      	b.n	8003814 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f001 fe13 	bl	8005434 <VL53LX_set_timeouts_us>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8003814:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8003822:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003830:	461a      	mov	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003838:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	@ 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	00086470 	.word	0x00086470
 8003848:	00989680 	.word	0x00989680
 800384c:	00030d40 	.word	0x00030d40

08003850 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b092      	sub	sp, #72	@ 0x48
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff feeb 	bl	8003642 <CheckValidRectRoi>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8003872:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 800387a:	f06f 0303 	mvn.w	r3, #3
 800387e:	e050      	b.n	8003922 <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	789b      	ldrb	r3, [r3, #2]
 8003884:	461a      	mov	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	4413      	add	r3, r2
 800388c:	3301      	adds	r3, #1
 800388e:	0fda      	lsrs	r2, r3, #31
 8003890:	4413      	add	r3, r2
 8003892:	105b      	asrs	r3, r3, #1
 8003894:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	461a      	mov	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	78db      	ldrb	r3, [r3, #3]
 80038a2:	4413      	add	r3, r2
 80038a4:	3301      	adds	r3, #1
 80038a6:	0fda      	lsrs	r2, r3, #31
 80038a8:	4413      	add	r3, r2
 80038aa:	105b      	asrs	r3, r3, #1
 80038ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	789a      	ldrb	r2, [r3, #2]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	785a      	ldrb	r2, [r3, #1]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 80038cc:	2301      	movs	r3, #1
 80038ce:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 80038d4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 80038dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80038e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 80038e4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80038e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 80038ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80038f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 80038f4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d903      	bls.n	8003904 <VL53LX_SetUserROI+0xb4>
 80038fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003900:	2b02      	cmp	r3, #2
 8003902:	d803      	bhi.n	800390c <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8003904:	23fc      	movs	r3, #252	@ 0xfc
 8003906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800390a:	e008      	b.n	800391e <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f001 fea9 	bl	800566a <VL53LX_set_zone_config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 800391e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003922:	4618      	mov	r0, r3
 8003924:	3748      	adds	r7, #72	@ 0x48
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3318      	adds	r3, #24
 800393a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f001 f911 	bl	8004b64 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003942:	2300      	movs	r3, #0
 8003944:	75bb      	strb	r3, [r7, #22]
 8003946:	e01a      	b.n	800397e <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003948:	7dbb      	ldrb	r3, [r7, #22]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8003950:	3308      	adds	r3, #8
 8003952:	2100      	movs	r1, #0
 8003954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003958:	7dbb      	ldrb	r3, [r7, #22]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003962:	3318      	adds	r3, #24
 8003964:	22ff      	movs	r2, #255	@ 0xff
 8003966:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003968:	7dbb      	ldrb	r3, [r7, #22]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003972:	331c      	adds	r3, #28
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003978:	7dbb      	ldrb	r3, [r7, #22]
 800397a:	3301      	adds	r3, #1
 800397c:	75bb      	strb	r3, [r7, #22]
 800397e:	7dbb      	ldrb	r3, [r7, #22]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d9e1      	bls.n	8003948 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800398a:	2200      	movs	r2, #0
 800398c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003996:	2200      	movs	r2, #0
 8003998:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7edb      	ldrb	r3, [r3, #27]
 80039a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 80039a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2206      	movs	r2, #6
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f001 ffc1 	bl	8005938 <VL53LX_init_and_start_range>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 80039ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f002 fa7e 	bl	8005ed4 <VL53LX_stop_range>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f001 f9ef 	bl	8004dc0 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7edb      	ldrb	r3, [r3, #27]
 80039fe:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f002 ff7c 	bl	8006902 <VL53LX_clear_interrupt_and_enable_next_range>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f00e ff8e 	bl	801294c <VL53LX_is_new_data_ready>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	3b05      	subs	r3, #5
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d840      	bhi.n	8003ad4 <ConvertStatusHisto+0x94>
 8003a52:	a201      	add	r2, pc, #4	@ (adr r2, 8003a58 <ConvertStatusHisto+0x18>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003aa5 	.word	0x08003aa5
 8003a5c:	08003aab 	.word	0x08003aab
 8003a60:	08003ab7 	.word	0x08003ab7
 8003a64:	08003ad5 	.word	0x08003ad5
 8003a68:	08003acf 	.word	0x08003acf
 8003a6c:	08003ad5 	.word	0x08003ad5
 8003a70:	08003ad5 	.word	0x08003ad5
 8003a74:	08003ad5 	.word	0x08003ad5
 8003a78:	08003ad5 	.word	0x08003ad5
 8003a7c:	08003ad5 	.word	0x08003ad5
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ad5 	.word	0x08003ad5
 8003a8c:	08003ad5 	.word	0x08003ad5
 8003a90:	08003ab1 	.word	0x08003ab1
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003ad5 	.word	0x08003ad5
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003abd 	.word	0x08003abd
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	73fb      	strb	r3, [r7, #15]
		break;
 8003aa8:	e016      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
		break;
 8003aae:	e013      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8003ab4:	e010      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8003ab6:	2307      	movs	r3, #7
 8003ab8:	73fb      	strb	r3, [r7, #15]
		break;
 8003aba:	e00d      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003abc:	230c      	movs	r3, #12
 8003abe:	73fb      	strb	r3, [r7, #15]
		break;
 8003ac0:	e00a      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	73fb      	strb	r3, [r7, #15]
		break;
 8003ac6:	e007      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003ac8:	230b      	movs	r3, #11
 8003aca:	73fb      	strb	r3, [r7, #15]
		break;
 8003acc:	e004      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
		break;
 8003ad2:	e001      	b.n	8003ad8 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8003ad4:	23ff      	movs	r3, #255	@ 0xff
 8003ad6:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	@ 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	70fb      	strb	r3, [r7, #3]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70bb      	strb	r3, [r7, #2]
 8003afe:	4613      	mov	r3, r2
 8003b00:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	33f8      	adds	r3, #248	@ 0xf8
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8003b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8003b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b28:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003b2a:	025b      	lsls	r3, r3, #9
 8003b2c:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8003b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b36:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8003b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b44:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003b46:	025b      	lsls	r3, r3, #9
 8003b48:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b52:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8003b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b58:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8003b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8003b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b62:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8003b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b66:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b6c:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8003b6e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003b72:	2b11      	cmp	r3, #17
 8003b74:	d009      	beq.n	8003b8a <SetTargetData+0xa2>
 8003b76:	2b11      	cmp	r3, #17
 8003b78:	dc0f      	bgt.n	8003b9a <SetTargetData+0xb2>
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	dc02      	bgt.n	8003b84 <SetTargetData+0x9c>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	dc03      	bgt.n	8003b8a <SetTargetData+0xa2>
 8003b82:	e00a      	b.n	8003b9a <SetTargetData+0xb2>
 8003b84:	2b0d      	cmp	r3, #13
 8003b86:	d004      	beq.n	8003b92 <SetTargetData+0xaa>
 8003b88:	e007      	b.n	8003b9a <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	749a      	strb	r2, [r3, #18]
		break;
 8003b90:	e006      	b.n	8003ba0 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8003b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b94:	220d      	movs	r2, #13
 8003b96:	749a      	strb	r2, [r3, #18]
		break;
 8003b98:	e002      	b.n	8003ba0 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba2:	7c9b      	ldrb	r3, [r3, #18]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d117      	bne.n	8003bd8 <SetTargetData+0xf0>
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d114      	bne.n	8003bd8 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb0:	22ff      	movs	r2, #255	@ 0xff
 8003bb2:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8003bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc2:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8003bc6:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8003bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bca:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8003bce:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8003bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd2:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8003bd6:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bda:	7c9b      	ldrb	r3, [r3, #18]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8003be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff2b 	bl	8003a40 <ConvertStatusHisto>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8003bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf0:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f248 0191 	movw	r1, #32913	@ 0x8091
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f003 fb79 	bl	80072f4 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003c02:	78bb      	ldrb	r3, [r7, #2]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c12:	8a1b      	ldrh	r3, [r3, #16]
 8003c14:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8003c20:	f107 030b 	add.w	r3, r7, #11
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f009 fa83 	bl	800d132 <VL53LX_compute_histo_merge_nb>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d109      	bne.n	8003c4c <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 81db 	beq.w	800400e <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 8003c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c5a:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8003c5c:	2b07      	cmp	r3, #7
 8003c5e:	d004      	beq.n	8003c6a <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c62:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	f040 81d2 	bne.w	800400e <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8003c6a:	787b      	ldrb	r3, [r7, #1]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003c74:	3318      	adds	r3, #24
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d01c      	beq.n	8003cb6 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8003c7c:	787b      	ldrb	r3, [r7, #1]
 8003c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003c86:	3318      	adds	r3, #24
 8003c88:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d013      	beq.n	8003cb6 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8003c8e:	787b      	ldrb	r3, [r7, #1]
 8003c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003c98:	3318      	adds	r3, #24
 8003c9a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 81b6 	bne.w	800400e <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8003ca2:	787b      	ldrb	r3, [r7, #1]
 8003ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003cac:	331c      	adds	r3, #28
 8003cae:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 81ac 	bne.w	800400e <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003cc0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8003cc8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d00c      	beq.n	8003ce8 <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003cd8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8003ce0:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	f040 816b 	bne.w	8003fbe <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003cee:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003cf0:	787b      	ldrb	r3, [r7, #1]
 8003cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cf4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003cfe:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	2b21      	cmp	r3, #33	@ 0x21
 8003d12:	d008      	beq.n	8003d26 <SetTargetData+0x23e>
 8003d14:	2b21      	cmp	r3, #33	@ 0x21
 8003d16:	f300 814e 	bgt.w	8003fb6 <SetTargetData+0x4ce>
 8003d1a:	2b1b      	cmp	r3, #27
 8003d1c:	f000 80d7 	beq.w	8003ece <SetTargetData+0x3e6>
 8003d20:	2b1e      	cmp	r3, #30
 8003d22:	d004      	beq.n	8003d2e <SetTargetData+0x246>
 8003d24:	e147      	b.n	8003fb6 <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8003d2c:	e147      	b.n	8003fbe <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8003d34:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dd0e      	ble.n	8003d5a <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003d42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	da07      	bge.n	8003d5a <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d104      	bne.n	8003d5a <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8003d56:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003d58:	e0b8      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003d5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8003d64:	425b      	negs	r3, r3
 8003d66:	429a      	cmp	r2, r3
 8003d68:	da0f      	bge.n	8003d8a <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8003d6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 8003d74:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003d76:	429a      	cmp	r2, r3
 8003d78:	dd07      	ble.n	8003d8a <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8003d86:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003d88:	e0a0      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8003d90:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	dd0e      	ble.n	8003db6 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8003d9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	da07      	bge.n	8003db6 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8003db2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003db4:	e08a      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003db6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	da0f      	bge.n	8003de6 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003dc6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8003dd0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	dd07      	ble.n	8003de6 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d104      	bne.n	8003de6 <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8003de2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003de4:	e072      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8003dec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	dd0e      	ble.n	8003e12 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003dfa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	da07      	bge.n	8003e12 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d104      	bne.n	8003e12 <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e0e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003e10:	e05c      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003e12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8003e1c:	425b      	negs	r3, r3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	da0f      	bge.n	8003e42 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003e22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8003e2c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dd07      	ble.n	8003e42 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8003e3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003e40:	e044      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8003e48:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	dd0e      	ble.n	8003e6e <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003e56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	da07      	bge.n	8003e6e <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8003e6a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003e6c:	e02e      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8003e6e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8003e78:	425b      	negs	r3, r3
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	da0f      	bge.n	8003e9e <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8003e7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8003e88:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	dd07      	ble.n	8003e9e <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d104      	bne.n	8003e9e <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8003e9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003e9c:	e016      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8003ea4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	da0b      	bge.n	8003ec4 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003eb2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	dd04      	ble.n	8003ec4 <SetTargetData+0x3dc>
					AddOffset =
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8003ec0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003ec2:	e003      	b.n	8003ecc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8003eca:	e078      	b.n	8003fbe <SetTargetData+0x4d6>
 8003ecc:	e077      	b.n	8003fbe <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8003ed4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	dd0e      	ble.n	8003efa <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003ee2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	da07      	bge.n	8003efa <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8003ef6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003ef8:	e05c      	b.n	8003fb4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003efa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8003f04:	425b      	negs	r3, r3
 8003f06:	429a      	cmp	r2, r3
 8003f08:	da0f      	bge.n	8003f2a <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003f0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8003f14:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003f16:	429a      	cmp	r2, r3
 8003f18:	dd07      	ble.n	8003f2a <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d104      	bne.n	8003f2a <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8003f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f22:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8003f26:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f28:	e044      	b.n	8003fb4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8003f30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dd0e      	ble.n	8003f56 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003f3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	da07      	bge.n	8003f56 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d104      	bne.n	8003f56 <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003f52:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f54:	e02e      	b.n	8003fb4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003f56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8003f60:	425b      	negs	r3, r3
 8003f62:	429a      	cmp	r2, r3
 8003f64:	da0f      	bge.n	8003f86 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003f66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8003f70:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003f72:	429a      	cmp	r2, r3
 8003f74:	dd07      	ble.n	8003f86 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8003f82:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f84:	e016      	b.n	8003fb4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8003f8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	da0b      	bge.n	8003fac <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003f9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	dd04      	ble.n	8003fac <SetTargetData+0x4c4>
					AddOffset =
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8003fa8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003faa:	e003      	b.n	8003fb4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8003fb2:	e004      	b.n	8003fbe <SetTargetData+0x4d6>
 8003fb4:	e003      	b.n	8003fbe <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8003fbc:	bf00      	nop
			}
		}

		if (uwr_status) {
 8003fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d023      	beq.n	800400e <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	b21a      	sxth	r2, r3
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd8:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8003fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	b21a      	sxth	r2, r3
 8003fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fec:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	b21a      	sxth	r2, r3
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004000:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8004002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004004:	2201      	movs	r2, #1
 8004006:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8004008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800400a:	2200      	movs	r2, #0
 800400c:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 800400e:	787b      	ldrb	r3, [r7, #1]
 8004010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004012:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8004016:	3308      	adds	r3, #8
 8004018:	8ab9      	ldrh	r1, [r7, #20]
 800401a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800401e:	787b      	ldrb	r3, [r7, #1]
 8004020:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004022:	7c91      	ldrb	r1, [r2, #18]
 8004024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004026:	4413      	add	r3, r2
 8004028:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800402c:	3318      	adds	r3, #24
 800402e:	460a      	mov	r2, r1
 8004030:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8004032:	787b      	ldrb	r3, [r7, #1]
 8004034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004036:	7cd1      	ldrb	r1, [r2, #19]
 8004038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403a:	4413      	add	r3, r2
 800403c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8004040:	331c      	adds	r3, #28
 8004042:	460a      	mov	r2, r1
 8004044:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800404c:	461a      	mov	r2, r3
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 8004054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004056:	8a1b      	ldrh	r3, [r3, #16]
 8004058:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800405a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800405c:	7c9b      	ldrb	r3, [r3, #18]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d110      	bne.n	8004084 <SetTargetData+0x59c>
 8004062:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	da0c      	bge.n	8004084 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800406a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800406e:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <SetTargetData+0x5a8>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	da03      	bge.n	800407e <SetTargetData+0x596>
			pRangeData->RangeStatus =
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004078:	220e      	movs	r2, #14
 800407a:	749a      	strb	r2, [r3, #18]
 800407c:	e002      	b.n	8004084 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800407e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004080:	2200      	movs	r2, #0
 8004082:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8004084:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 8004088:	4618      	mov	r0, r3
 800408a:	3738      	adds	r7, #56	@ 0x38
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	2000000c 	.word	0x2000000c

08004094 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b08f      	sub	sp, #60	@ 0x3c
 8004098:	af04      	add	r7, sp, #16
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3318      	adds	r3, #24
 80040a4:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	7c9a      	ldrb	r2, [r3, #18]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	78da      	ldrb	r2, [r3, #3]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	7c9b      	ldrb	r3, [r3, #18]
 80040d2:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <SetMeasurementData+0x4e>

		iteration = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80040e0:	e002      	b.n	80040e8 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80040e2:	7ffb      	ldrb	r3, [r7, #31]
 80040e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040ee:	e035      	b.n	800415c <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80040f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	3308      	adds	r3, #8
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8004104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004108:	224c      	movs	r2, #76	@ 0x4c
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	3310      	adds	r3, #16
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	4413      	add	r3, r2
 8004114:	3304      	adds	r3, #4
 8004116:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8004118:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800411c:	2b00      	cmp	r3, #0
 800411e:	d113      	bne.n	8004148 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7918      	ldrb	r0, [r3, #4]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	7c1b      	ldrb	r3, [r3, #16]
 8004128:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800412c:	7ff9      	ldrb	r1, [r7, #31]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	9202      	str	r2, [sp, #8]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	9201      	str	r2, [sp, #4]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4623      	mov	r3, r4
 800413a:	4602      	mov	r2, r0
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fcd3 	bl	8003ae8 <SetTargetData>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004156:	3301      	adds	r3, #1
 8004158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800415c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004164:	429a      	cmp	r2, r3
 8004166:	d3c3      	bcc.n	80040f0 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004174:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800417c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004180:	e01f      	b.n	80041c2 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8004182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800418c:	3308      	adds	r3, #8
 800418e:	2100      	movs	r1, #0
 8004190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8004194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	4413      	add	r3, r2
 800419c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80041a0:	3318      	adds	r3, #24
 80041a2:	22ff      	movs	r2, #255	@ 0xff
 80041a4:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80041a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041aa:	6a3a      	ldr	r2, [r7, #32]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80041b2:	331c      	adds	r3, #28
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80041b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041bc:	3301      	adds	r3, #1
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80041c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d9db      	bls.n	8004182 <SetMeasurementData+0xee>
	}

	return Status;
 80041ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	372c      	adds	r7, #44	@ 0x2c
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}

080041d6 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3318      	adds	r3, #24
 80041e8:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80041f0:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80041f2:	225c      	movs	r2, #92	@ 0x5c
 80041f4:	21ff      	movs	r1, #255	@ 0xff
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f019 fb2e 	bl	801d858 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	2102      	movs	r1, #2
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f001 ff76 	bl	80060f2 <VL53LX_get_device_results>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff40 	bl	8004094 <SetMeasurementData>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8004218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b090      	sub	sp, #64	@ 0x40
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8004232:	f240 3305 	movw	r3, #773	@ 0x305
 8004236:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3318      	adds	r3, #24
 800423c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004240:	3348      	adds	r3, #72	@ 0x48
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800424a:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 800424e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 8004252:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 800425a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8db 	bl	800441c <VL53LX_run_ref_spad_char>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 800426c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004270:	f113 0f1d 	cmn.w	r3, #29
 8004274:	d14e      	bne.n	8004314 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8004276:	f107 0310 	add.w	r3, r7, #16
 800427a:	2206      	movs	r2, #6
 800427c:	2128      	movs	r1, #40	@ 0x28
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f00c fdd8 	bl	8010e34 <VL53LX_read_nvm_raw_data>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 800428a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 8004292:	f107 020c 	add.w	r2, r7, #12
 8004296:	2302      	movs	r3, #2
 8004298:	2114      	movs	r1, #20
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f00e ff6a 	bl	8013174 <VL53LX_WriteMulti>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80042a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80042ae:	7b3a      	ldrb	r2, [r7, #12]
 80042b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b2:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80042b4:	7b7a      	ldrb	r2, [r7, #13]
 80042b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b8:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80042ba:	f107 0310 	add.w	r3, r7, #16
 80042be:	3310      	adds	r3, #16
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80042c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 80042ca:	2306      	movs	r3, #6
 80042cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ce:	210d      	movs	r1, #13
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f00e ff4f 	bl	8013174 <VL53LX_WriteMulti>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80042dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d117      	bne.n	8004314 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80042e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ee:	785a      	ldrb	r2, [r3, #1]
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	789a      	ldrb	r2, [r3, #2]
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	78da      	ldrb	r2, [r3, #3]
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8004304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004306:	791a      	ldrb	r2, [r3, #4]
 8004308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430a:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	795a      	ldrb	r2, [r3, #5]
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 8004314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff f9b7 	bl	800368e <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 8004320:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004324:	4618      	mov	r0, r3
 8004326:	3740      	adds	r7, #64	@ 0x40
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 800433c:	2300      	movs	r3, #0
 800433e:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8004340:	2300      	movs	r3, #0
 8004342:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8004344:	2300      	movs	r3, #0
 8004346:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d84a      	bhi.n	80043e4 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800434e:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004365 	.word	0x08004365
 8004358:	08004385 	.word	0x08004385
 800435c:	080043a5 	.word	0x080043a5
 8004360:	080043c5 	.word	0x080043c5
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f003 fed0 	bl	800810a <VL53LX_dynamic_xtalk_correction_disable>
 800436a:	4603      	mov	r3, r0
 800436c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f003 fee2 	bl	8008138 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8004374:	4603      	mov	r3, r0
 8004376:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f003 ff0b 	bl	8008194 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800437e:	4603      	mov	r3, r0
 8004380:	733b      	strb	r3, [r7, #12]
		break;
 8004382:	e032      	b.n	80043ea <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f003 fea9 	bl	80080dc <VL53LX_dynamic_xtalk_correction_enable>
 800438a:	4603      	mov	r3, r0
 800438c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f003 ff17 	bl	80081c2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8004394:	4603      	mov	r3, r0
 8004396:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f003 fefb 	bl	8008194 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800439e:	4603      	mov	r3, r0
 80043a0:	733b      	strb	r3, [r7, #12]
		break;
 80043a2:	e022      	b.n	80043ea <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f003 fe99 	bl	80080dc <VL53LX_dynamic_xtalk_correction_enable>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f003 ff07 	bl	80081c2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80043b4:	4603      	mov	r3, r0
 80043b6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f003 fed4 	bl	8008166 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80043be:	4603      	mov	r3, r0
 80043c0:	733b      	strb	r3, [r7, #12]
		break;
 80043c2:	e012      	b.n	80043ea <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f003 fe89 	bl	80080dc <VL53LX_dynamic_xtalk_correction_enable>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f003 feb2 	bl	8008138 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80043d4:	4603      	mov	r3, r0
 80043d6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f003 fedb 	bl	8008194 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80043de:	4603      	mov	r3, r0
 80043e0:	733b      	strb	r3, [r7, #12]
		break;
 80043e2:	e002      	b.n	80043ea <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80043e4:	23fc      	movs	r3, #252	@ 0xfc
 80043e6:	73fb      	strb	r3, [r7, #15]
		break;
 80043e8:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80043ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80043fe:	7b7b      	ldrb	r3, [r7, #13]
 8004400:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 800440a:	7b3b      	ldrb	r3, [r7, #12]
 800440c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 800441c:	b5b0      	push	{r4, r5, r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af04      	add	r7, sp, #16
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3318      	adds	r3, #24
 800442e:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004436:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004438:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f005 fe94 	bl	800a16e <VL53LX_enable_powerforce>
 8004446:	4603      	mov	r3, r0
 8004448:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800444a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d117      	bne.n	8004482 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	7858      	ldrb	r0, [r3, #1]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	685c      	ldr	r4, [r3, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	891d      	ldrh	r5, [r3, #8]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	899b      	ldrh	r3, [r3, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	8952      	ldrh	r2, [r2, #10]
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 800446c:	9102      	str	r1, [sp, #8]
 800446e:	9201      	str	r2, [sp, #4]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	462b      	mov	r3, r5
 8004474:	4622      	mov	r2, r4
 8004476:	4601      	mov	r1, r0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f007 fd67 	bl	800bf4c <VL53LX_set_ref_spad_char_config>
 800447e:	4603      	mov	r3, r0
 8004480:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8004482:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f890 	bl	80045b6 <VL53LX_run_device_test>
 8004496:	4603      	mov	r3, r0
 8004498:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 800449a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 80044a2:	f107 020c 	add.w	r2, r7, #12
 80044a6:	2302      	movs	r3, #2
 80044a8:	21d9      	movs	r1, #217	@ 0xd9
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f00e fe98 	bl	80131e0 <VL53LX_ReadMulti>
 80044b0:	4603      	mov	r3, r0
 80044b2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80044b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80044bc:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c4:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80044c8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d0:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 80044d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 80044dc:	f107 020c 	add.w	r2, r7, #12
 80044e0:	2302      	movs	r3, #2
 80044e2:	2114      	movs	r1, #20
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f00e fe45 	bl	8013174 <VL53LX_WriteMulti>
 80044ea:	4603      	mov	r3, r0
 80044ec:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80044ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80044f6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 80044fe:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8004506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 800450e:	f107 020c 	add.w	r2, r7, #12
 8004512:	2306      	movs	r3, #6
 8004514:	21ac      	movs	r1, #172	@ 0xac
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f00e fe62 	bl	80131e0 <VL53LX_ReadMulti>
 800451c:	4603      	mov	r3, r0
 800451e:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8004520:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 8004528:	f107 020c 	add.w	r2, r7, #12
 800452c:	2306      	movs	r3, #6
 800452e:	210d      	movs	r1, #13
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f00e fe1f 	bl	8013174 <VL53LX_WriteMulti>
 8004536:	4603      	mov	r3, r0
 8004538:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 800453a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d117      	bne.n	8004572 <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8004542:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 800454a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8004552:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 800455a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8004562:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800456a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8004572:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8004580:	2b10      	cmp	r3, #16
 8004582:	d00c      	beq.n	800459e <VL53LX_run_ref_spad_char+0x182>
 8004584:	2b10      	cmp	r3, #16
 8004586:	dc0d      	bgt.n	80045a4 <VL53LX_run_ref_spad_char+0x188>
 8004588:	2b0e      	cmp	r3, #14
 800458a:	d002      	beq.n	8004592 <VL53LX_run_ref_spad_char+0x176>
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d003      	beq.n	8004598 <VL53LX_run_ref_spad_char+0x17c>
 8004590:	e008      	b.n	80045a4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8004592:	23e4      	movs	r3, #228	@ 0xe4
 8004594:	77fb      	strb	r3, [r7, #31]
			break;
 8004596:	e005      	b.n	80045a4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8004598:	23e3      	movs	r3, #227	@ 0xe3
 800459a:	77fb      	strb	r3, [r7, #31]
			break;
 800459c:	e002      	b.n	80045a4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800459e:	23e2      	movs	r3, #226	@ 0xe2
 80045a0:	77fb      	strb	r3, [r7, #31]
			break;
 80045a2:	bf00      	nop
		}
	}



	*pcal_status = status;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	7ffa      	ldrb	r2, [r7, #31]
 80045a8:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80045aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bdb0      	pop	{r4, r5, r7, pc}

080045b6 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3318      	adds	r3, #24
 80045ca:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80045d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 80045d8:	f107 030b 	add.w	r3, r7, #11
 80045dc:	461a      	mov	r2, r3
 80045de:	2130      	movs	r1, #48	@ 0x30
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f00e fe8f 	bl	8013304 <VL53LX_RdByte>
 80045e6:	4603      	mov	r3, r0
 80045e8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 80045ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80045f2:	7afa      	ldrb	r2, [r7, #11]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 80045fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f005 fd35 	bl	800a076 <VL53LX_start_test>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8004610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f00e f95e 	bl	80128da <VL53LX_wait_for_test_completion>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8004622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 800462a:	f107 020c 	add.w	r2, r7, #12
 800462e:	2302      	movs	r3, #2
 8004630:	2189      	movs	r1, #137	@ 0x89
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f00e fdd4 	bl	80131e0 <VL53LX_ReadMulti>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 800463c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8004644:	7b3a      	ldrb	r2, [r7, #12]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 800464c:	7b7a      	ldrb	r2, [r7, #13]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	b2da      	uxtb	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8004666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 800466e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f005 fd9d 	bl	800a1b6 <VL53LX_clear_interrupt>
 800467c:	4603      	mov	r3, r0
 800467e:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8004680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8004688:	2100      	movs	r1, #0
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f005 fcf3 	bl	800a076 <VL53LX_start_test>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8004694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b21      	cmp	r3, #33	@ 0x21
 80046b4:	d006      	beq.n	80046c4 <select_offset_per_vcsel+0x24>
 80046b6:	2b21      	cmp	r3, #33	@ 0x21
 80046b8:	dc2b      	bgt.n	8004712 <select_offset_per_vcsel+0x72>
 80046ba:	2b1b      	cmp	r3, #27
 80046bc:	d01c      	beq.n	80046f8 <select_offset_per_vcsel+0x58>
 80046be:	2b1e      	cmp	r3, #30
 80046c0:	d00d      	beq.n	80046de <select_offset_per_vcsel+0x3e>
 80046c2:	e026      	b.n	8004712 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ca:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 80046ce:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d6:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 80046da:	817b      	strh	r3, [r7, #10]
		break;
 80046dc:	e02b      	b.n	8004736 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e4:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 80046e8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f0:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 80046f4:	817b      	strh	r3, [r7, #10]
		break;
 80046f6:	e01e      	b.n	8004736 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fe:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8004702:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470a:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 800470e:	817b      	strh	r3, [r7, #10]
		break;
 8004710:	e011      	b.n	8004736 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004718:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800471c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004724:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8004728:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 800472a:	23fc      	movs	r3, #252	@ 0xfc
 800472c:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]
		break;
 8004734:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800473c:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 800473e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004746:	7a7b      	ldrb	r3, [r7, #9]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <select_offset_per_vcsel+0xb6>
 8004750:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004754:	e001      	b.n	800475a <select_offset_per_vcsel+0xba>
 8004756:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	8013      	strh	r3, [r2, #0]

	return status;
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 800476e:	b490      	push	{r4, r7}
 8004770:	b08a      	sub	sp, #40	@ 0x28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	4611      	mov	r1, r2
 800477a:	461a      	mov	r2, r3
 800477c:	460b      	mov	r3, r1
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	4613      	mov	r3, r2
 8004782:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	b29b      	uxth	r3, r3
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047a0:	e021      	b.n	80047e6 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80047a2:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	461a      	mov	r2, r3
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	441a      	add	r2, r3
 80047b2:	00d3      	lsls	r3, r2, #3
 80047b4:	461a      	mov	r2, r3
 80047b6:	460b      	mov	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4413      	add	r3, r2
 80047c0:	4423      	add	r3, r4
 80047c2:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 80047c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	4413      	add	r3, r2
 80047ce:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80047d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3206      	adds	r2, #6
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80047e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047e2:	3301      	adds	r3, #1
 80047e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3d8      	bcc.n	80047a2 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d047      	beq.n	8004886 <vl53lx_diff_histo_stddev+0x118>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d044      	beq.n	8004886 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004804:	e03a      	b.n	800487c <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8004806:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	461a      	mov	r2, r3
 8004812:	0052      	lsls	r2, r2, #1
 8004814:	441a      	add	r2, r3
 8004816:	00d3      	lsls	r3, r2, #3
 8004818:	461a      	mov	r2, r3
 800481a:	460b      	mov	r3, r1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	4413      	add	r3, r2
 8004824:	4423      	add	r3, r4
 8004826:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 800482a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800482e:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004836:	fb03 f202 	mul.w	r2, r3, r2
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004840:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8004842:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	3206      	adds	r2, #6
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004850:	fb03 f202 	mul.w	r2, r3, r2
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	fb92 f3f3 	sdiv	r3, r2, r3
 800485a:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800485c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8004866:	69b8      	ldr	r0, [r7, #24]
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	441a      	add	r2, r3
 8004872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004874:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004878:	3301      	adds	r3, #1
 800487a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800487c:	79bb      	ldrb	r3, [r7, #6]
 800487e:	b29b      	uxth	r3, r3
 8004880:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004882:	429a      	cmp	r2, r3
 8004884:	d3bf      	bcc.n	8004806 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	@ 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bc90      	pop	{r4, r7}
 800488e:	4770      	bx	lr

08004890 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b08c      	sub	sp, #48	@ 0x30
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3318      	adds	r3, #24
 800489e:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80048c0:	2318      	movs	r3, #24
 80048c2:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	461a      	mov	r2, r3
 80048ca:	f248 018f 	movw	r1, #32911	@ 0x808f
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f002 fd10 	bl	80072f4 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	461a      	mov	r2, r3
 80048da:	f248 018e 	movw	r1, #32910	@ 0x808e
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f002 fd08 	bl	80072f4 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ea:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 811a 	bne.w	8004b28 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 800490e:	7efb      	ldrb	r3, [r7, #27]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	b2db      	uxtb	r3, r3
 8004914:	7eba      	ldrb	r2, [r7, #26]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004920:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800492e:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004932:	3b01      	subs	r3, #1
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004938:	e004      	b.n	8004944 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8004944:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8004948:	7efb      	ldrb	r3, [r7, #27]
 800494a:	69f8      	ldr	r0, [r7, #28]
 800494c:	461a      	mov	r2, r3
 800494e:	0052      	lsls	r2, r2, #1
 8004950:	441a      	add	r2, r3
 8004952:	0153      	lsls	r3, r2, #5
 8004954:	461a      	mov	r2, r3
 8004956:	460b      	mov	r3, r1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	4413      	add	r3, r2
 8004960:	4403      	add	r3, r0
 8004962:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	dd0c      	ble.n	8004986 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 800496c:	7e79      	ldrb	r1, [r7, #25]
 800496e:	7efa      	ldrb	r2, [r7, #27]
 8004970:	f107 030c 	add.w	r3, r7, #12
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	69f8      	ldr	r0, [r7, #28]
 8004982:	f7ff fef4 	bl	800476e <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	429a      	cmp	r2, r3
 800498c:	db23      	blt.n	80049d6 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8004994:	3310      	adds	r3, #16
 8004996:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f018 ff5b 	bl	801d858 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 80049b4:	7efb      	ldrb	r3, [r7, #27]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c0:	2206      	movs	r2, #6
 80049c2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 80049c6:	e034      	b.n	8004a32 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ce:	2207      	movs	r2, #7
 80049d0:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 80049d4:	e02d      	b.n	8004a32 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049dc:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 80049e0:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80049e8:	e01e      	b.n	8004a28 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80049ea:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80049ee:	7e39      	ldrb	r1, [r7, #24]
 80049f0:	7efb      	ldrb	r3, [r7, #27]
 80049f2:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	3006      	adds	r0, #6
 80049fa:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80049fe:	69f8      	ldr	r0, [r7, #28]
 8004a00:	461a      	mov	r2, r3
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	441a      	add	r2, r3
 8004a06:	00d3      	lsls	r3, r2, #3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	442b      	add	r3, r5
 8004a16:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8004a1a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8004a1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a22:	3301      	adds	r3, #1
 8004a24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004a28:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004a2c:	7ebb      	ldrb	r3, [r7, #26]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d3db      	bcc.n	80049ea <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a38:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d109      	bne.n	8004a5a <vl53lx_histo_merge+0x1ca>
 8004a46:	7efb      	ldrb	r3, [r7, #27]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8004a58:	e00e      	b.n	8004a78 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8004a5a:	7efb      	ldrb	r3, [r7, #27]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10b      	bne.n	8004a78 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a66:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a74:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004a78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <vl53lx_histo_merge+0x1f6>
 8004a80:	7efb      	ldrb	r3, [r7, #27]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d069      	beq.n	8004b5a <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8c:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d162      	bne.n	8004b5a <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004a98:	e008      	b.n	8004aac <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8004a9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3206      	adds	r2, #6
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004aa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004aac:	7ebb      	ldrb	r3, [r7, #26]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3f1      	bcc.n	8004a9a <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004aba:	e02f      	b.n	8004b1c <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004ac2:	e023      	b.n	8004b0c <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8004ac4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	3206      	adds	r2, #6
 8004aca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8004ace:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004ad2:	7efb      	ldrb	r3, [r7, #27]
 8004ad4:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 8004ad6:	69fc      	ldr	r4, [r7, #28]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	0052      	lsls	r2, r2, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	00d3      	lsls	r3, r2, #3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	440b      	add	r3, r1
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	4413      	add	r3, r2
 8004aec:	442b      	add	r3, r5
 8004aee:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8004af2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8004af6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004af8:	18c1      	adds	r1, r0, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	3206      	adds	r2, #6
 8004afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8004b02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b06:	3301      	adds	r3, #1
 8004b08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004b0c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	dbd6      	blt.n	8004ac4 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8004b16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b18:	3301      	adds	r3, #1
 8004b1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b1c:	7ebb      	ldrb	r3, [r7, #26]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3ca      	bcc.n	8004abc <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004b26:	e018      	b.n	8004b5a <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b2e:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b3c:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b46:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8004b4a:	2bff      	cmp	r3, #255	@ 0xff
 8004b4c:	d105      	bne.n	8004b5a <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	@ 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b64 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b0c6      	sub	sp, #280	@ 0x118
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004b72:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004b80:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8004b88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b8c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004b90:	2200      	movs	r2, #0
 8004b92:	2185      	movs	r1, #133	@ 0x85
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f00e fb59 	bl	801324c <VL53LX_WrByte>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004ba0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8004ba8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	f005 fadc 	bl	800a16e <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004bb6:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8004bba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bc2:	f248 018c 	movw	r1, #32908	@ 0x808c
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	f002 fb94 	bl	80072f4 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8004bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d81b      	bhi.n	8004c0c <VL53LX_load_patch+0xa8>
 8004bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <VL53LX_load_patch+0x78>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bf5 	.word	0x08004bf5
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c05 	.word	0x08004c05
	case 0:
		patch_power = 0x00;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8004bf2:	e00e      	b.n	8004c12 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8004bfa:	e00a      	b.n	8004c12 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8004c02:	e006      	b.n	8004c12 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8004c04:	2340      	movs	r3, #64	@ 0x40
 8004c06:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8004c0a:	e002      	b.n	8004c12 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8004c12:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d134      	bne.n	8004c84 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8004c1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c22:	2229      	movs	r2, #41	@ 0x29
 8004c24:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004c26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c2e:	22c9      	movs	r2, #201	@ 0xc9
 8004c30:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004c32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c3a:	220e      	movs	r2, #14
 8004c3c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8004c3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c46:	2240      	movs	r2, #64	@ 0x40
 8004c48:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8004c4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c52:	2228      	movs	r2, #40	@ 0x28
 8004c54:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c64:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8004c66:	f107 020c 	add.w	r2, r7, #12
 8004c6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c6e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004c72:	2306      	movs	r3, #6
 8004c74:	f240 4176 	movw	r1, #1142	@ 0x476
 8004c78:	6800      	ldr	r0, [r0, #0]
 8004c7a:	f00e fa7b 	bl	8013174 <VL53LX_WriteMulti>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004c84:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d132      	bne.n	8004cf2 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004c8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c94:	2203      	movs	r2, #3
 8004c96:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004c98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ca0:	226d      	movs	r2, #109	@ 0x6d
 8004ca2:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004ca4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ca8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004cac:	2203      	movs	r2, #3
 8004cae:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004cb0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004cb8:	226f      	movs	r2, #111	@ 0x6f
 8004cba:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004cbc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004cc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ccc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004cd0:	2229      	movs	r2, #41	@ 0x29
 8004cd2:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8004cd4:	f107 020c 	add.w	r2, r7, #12
 8004cd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cdc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004ce0:	2306      	movs	r3, #6
 8004ce2:	f240 4196 	movw	r1, #1174	@ 0x496
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	f00e fa44 	bl	8013174 <VL53LX_WriteMulti>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004cf2:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11a      	bne.n	8004d30 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8004cfa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004d06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d0e:	2207      	movs	r2, #7
 8004d10:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8004d12:	f107 020c 	add.w	r2, r7, #12
 8004d16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d1a:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004d1e:	2302      	movs	r3, #2
 8004d20:	f240 4172 	movw	r1, #1138	@ 0x472
 8004d24:	6800      	ldr	r0, [r0, #0]
 8004d26:	f00e fa25 	bl	8013174 <VL53LX_WriteMulti>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004d30:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11a      	bne.n	8004d6e <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004d38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004d44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8004d50:	f107 020c 	add.w	r2, r7, #12
 8004d54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d58:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f240 4174 	movw	r1, #1140	@ 0x474
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	f00e fa06 	bl	8013174 <VL53LX_WriteMulti>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8004d6e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8004d76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f00e fa61 	bl	801324c <VL53LX_WrByte>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8004d90:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8004d98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004da0:	2201      	movs	r2, #1
 8004da2:	2185      	movs	r1, #133	@ 0x85
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f00e fa51 	bl	801324c <VL53LX_WrByte>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004db0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop

08004dc0 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8004dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2185      	movs	r1, #133	@ 0x85
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f00e fa37 	bl	801324c <VL53LX_WrByte>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f005 f9d1 	bl	800a192 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8004df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f00e fa24 	bl	801324c <VL53LX_WrByte>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8004e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8004e10:	2201      	movs	r2, #1
 8004e12:	2185      	movs	r1, #133	@ 0x85
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f00e fa19 	bl	801324c <VL53LX_WrByte>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004e2a:	b5b0      	push	{r4, r5, r7, lr}
 8004e2c:	b08a      	sub	sp, #40	@ 0x28
 8004e2e:	af04      	add	r7, sp, #16
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3318      	adds	r3, #24
 8004e3e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004e46:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8004e4c:	2162      	movs	r1, #98	@ 0x62
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f004 fa12 	bl	8009278 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2205      	movs	r2, #5
 8004e64:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004e70:	2300      	movs	r3, #0
 8004e72:	75bb      	strb	r3, [r7, #22]
 8004e74:	e01b      	b.n	8004eae <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8004e76:	7dba      	ldrb	r2, [r7, #22]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	3308      	adds	r3, #8
 8004e8a:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004ea8:	7dbb      	ldrb	r3, [r7, #22]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	75bb      	strb	r3, [r7, #22]
 8004eae:	7dbb      	ldrb	r3, [r7, #22]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d9e0      	bls.n	8004e76 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75bb      	strb	r3, [r7, #22]
 8004ed8:	e039      	b.n	8004f4e <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8004eda:	7dba      	ldrb	r2, [r7, #22]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8004ef0:	7dba      	ldrb	r2, [r7, #22]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8004f06:	7dba      	ldrb	r2, [r7, #22]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8004f1c:	7dba      	ldrb	r2, [r7, #22]
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8004f32:	7dba      	ldrb	r2, [r7, #22]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004f48:	7dbb      	ldrb	r3, [r7, #22]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	75bb      	strb	r3, [r7, #22]
 8004f4e:	7dbb      	ldrb	r3, [r7, #22]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d9c2      	bls.n	8004eda <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	221e      	movs	r2, #30
 8004f5e:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2200      	movs	r2, #0
 8004f64:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2201      	movs	r2, #1
 8004f76:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f84:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004f8c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8004f94:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8004fa2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f240 72db 	movw	r2, #2011	@ 0x7db
 8004fca:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8004fd4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f004 f931 	bl	8009240 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8004fe4:	3310      	adds	r3, #16
 8004fe6:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f018 fc33 	bl	801d858 <memset>
	pdev->bin_rec_pos = 0;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <VL53LX_data_init+0x1f8>
 8005010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8b7 	bl	800518c <VL53LX_read_p2p_data>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8005022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8005030:	4618      	mov	r0, r3
 8005032:	f003 f8dd 	bl	80081f0 <VL53LX_init_refspadchar_config_struct>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 800503a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005048:	4618      	mov	r0, r3
 800504a:	f003 f8f5 	bl	8008238 <VL53LX_init_ssc_config_struct>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8005052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f003 f906 	bl	800827a <VL53LX_init_xtalk_config_struct>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8005072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8005080:	4618      	mov	r0, r3
 8005082:	f003 f96d 	bl	8008360 <VL53LX_init_xtalk_extract_config_struct>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 800508a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005098:	4618      	mov	r0, r3
 800509a:	f003 f990 	bl	80083be <VL53LX_init_offset_cal_config_struct>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80050a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d107      	bne.n	80050ba <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 f9ab 	bl	800840c <VL53LX_init_zone_cal_config_struct>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80050ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f003 f9bf 	bl	8008454 <VL53LX_init_hist_post_process_config_struct>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 80050da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050e8:	4618      	mov	r0, r3
 80050ea:	f003 fbbe 	bl	800886a <VL53LX_init_hist_gen3_dmax_config_struct>
 80050ee:	4603      	mov	r3, r0
 80050f0:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 80050f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	33f8      	adds	r3, #248	@ 0xf8
 80050fe:	4618      	mov	r0, r3
 8005100:	f003 fa17 	bl	8008532 <VL53LX_init_tuning_parm_storage_struct>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8005108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	7858      	ldrb	r0, [r3, #1]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	8b1c      	ldrh	r4, [r3, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	689d      	ldr	r5, [r3, #8]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	6912      	ldr	r2, [r2, #16]
 8005124:	6939      	ldr	r1, [r7, #16]
 8005126:	6949      	ldr	r1, [r1, #20]
 8005128:	9102      	str	r1, [sp, #8]
 800512a:	9201      	str	r2, [sp, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	462b      	mov	r3, r5
 8005130:	4622      	mov	r2, r4
 8005132:	4601      	mov	r1, r0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb3c 	bl	80057b2 <VL53LX_set_preset_mode>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005144:	461a      	mov	r2, r3
 8005146:	2118      	movs	r1, #24
 8005148:	2000      	movs	r0, #0
 800514a:	f008 fc74 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8005154:	461a      	mov	r2, r3
 8005156:	2118      	movs	r1, #24
 8005158:	2000      	movs	r0, #0
 800515a:	f008 fc6c 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 8005164:	461a      	mov	r2, r3
 8005166:	210c      	movs	r1, #12
 8005168:	2000      	movs	r0, #0
 800516a:	f004 fe25 	bl	8009db8 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f007 fe45 	bl	800cdfe <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f007 fd4b 	bl	800cc10 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f007 fe6a 	bl	800ce54 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8005180:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bdb0      	pop	{r4, r5, r7, pc}

0800518c <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b091      	sub	sp, #68	@ 0x44
 8005190:	af04      	add	r7, sp, #16
 8005192:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3318      	adds	r3, #24
 800519e:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	3348      	adds	r3, #72	@ 0x48
 80051ac:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	339c      	adds	r3, #156	@ 0x9c
 80051b2:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80051b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f00b ffb2 	bl	801112e <VL53LX_get_static_nvm_managed>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 80051d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	3348      	adds	r3, #72	@ 0x48
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f00c f8e3 	bl	80113aa <VL53LX_get_customer_nvm_managed>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 80051ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d117      	bne.n	8005222 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	f203 3392 	addw	r3, r3, #914	@ 0x392
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f00c ffdf 	bl	80121be <VL53LX_get_nvm_copy_data>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8005206:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f004 fb21 	bl	8009864 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8005222:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10e      	bne.n	8005248 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	895b      	ldrh	r3, [r3, #10]
 800522e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8005248:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	33c0      	adds	r3, #192	@ 0xc0
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f00b fe1d 	bl	8010e96 <VL53LX_read_nvm_optical_centre>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8005262:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	3360      	adds	r3, #96	@ 0x60
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f00b fe33 	bl	8010edc <VL53LX_read_nvm_cal_peak_rate_map>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 800527c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005280:	2b00      	cmp	r3, #0
 8005282:	d12d      	bne.n	80052e0 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	339c      	adds	r3, #156	@ 0x9c
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f00b fe4c 	bl	8010f28 <VL53LX_read_nvm_additional_offset_cal_data>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	889b      	ldrh	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d120      	bne.n	80052e0 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11c      	bne.n	80052e0 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80052b2:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 80052ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052bc:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	3102      	adds	r1, #2
 80052cc:	9103      	str	r1, [sp, #12]
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	2238      	movs	r2, #56	@ 0x38
 80052d2:	9201      	str	r2, [sp, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	23ff      	movs	r3, #255	@ 0xff
 80052d8:	22c7      	movs	r2, #199	@ 0xc7
 80052da:	4621      	mov	r1, r4
 80052dc:	f006 fb30 	bl	800b940 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 80052e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d12f      	bne.n	8005348 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	461a      	mov	r2, r3
 80052ee:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f00b fe3b 	bl	8010f6e <VL53LX_read_nvm_fmt_range_results_data>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 80052fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005302:	2b00      	cmp	r3, #0
 8005304:	d120      	bne.n	8005348 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8005306:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800530e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8005316:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8005334:	e003      	b.n	800533e <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	2214      	movs	r2, #20
 800533a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005344:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8005348:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8005356:	3304      	adds	r3, #4
 8005358:	461a      	mov	r2, r3
 800535a:	21de      	movs	r1, #222	@ 0xde
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f00e f805 	bl	801336c <VL53LX_RdWord>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005372:	d204      	bcs.n	800537e <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800537a:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 800537e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	33bc      	adds	r3, #188	@ 0xbc
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f918 	bl	80055c2 <VL53LX_get_mode_mitigation_roi>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d114      	bne.n	80053cc <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80053cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3734      	adds	r7, #52	@ 0x34
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd90      	pop	{r4, r7, pc}

080053d8 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3318      	adds	r3, #24
 80053ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80053fa:	23f1      	movs	r3, #241	@ 0xf1
 80053fc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 80053fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005412:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8005416:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8005424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3318      	adds	r3, #24
 800544a:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8005456:	23f1      	movs	r3, #241	@ 0xf1
 8005458:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 800545a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11b      	bne.n	800549a <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8005486:	9201      	str	r2, [sp, #4]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	460b      	mov	r3, r1
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f005 f834 	bl	800a4fe <VL53LX_calc_timeout_register_values>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800549a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b088      	sub	sp, #32
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3318      	adds	r3, #24
 80054bc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80054d0:	23f1      	movs	r3, #241	@ 0xf1
 80054d2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 80054d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d148      	bne.n	800556e <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f004 fe80 	bl	800a1f0 <VL53LX_calc_macro_period_us>
 80054f0:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f004 ff3f 	bl	800a37e <VL53LX_calc_timeout_us>
 8005500:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 800550c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800550e:	8a7b      	ldrh	r3, [r7, #18]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 800551a:	4413      	add	r3, r2
 800551c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 800551e:	8a7b      	ldrh	r3, [r7, #18]
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	4618      	mov	r0, r3
 8005524:	f004 ff92 	bl	800a44c <VL53LX_calc_decoded_timeout_us>
 8005528:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 8005534:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005536:	8a7b      	ldrh	r3, [r7, #18]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 8005542:	4413      	add	r3, r2
 8005544:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8005546:	8a7b      	ldrh	r3, [r7, #18]
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	4618      	mov	r0, r3
 800554c:	f004 ff7e 	bl	800a44c <VL53LX_calc_decoded_timeout_us>
 8005550:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800556e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3318      	adds	r3, #24
 800558c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	7858      	ldrb	r0, [r3, #1]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7819      	ldrb	r1, [r3, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 800559c:	461a      	mov	r2, r3
 800559e:	f006 f84e 	bl	800b63e <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	7898      	ldrb	r0, [r3, #2]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	78d9      	ldrb	r1, [r3, #3]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80055b0:	461a      	mov	r2, r3
 80055b2:	f006 f883 	bl	800b6bc <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 80055b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3318      	adds	r3, #24
 80055d4:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 80055e8:	f107 020e 	add.w	r2, r7, #14
 80055ec:	f107 010d 	add.w	r1, r7, #13
 80055f0:	4618      	mov	r0, r3
 80055f2:	f008 fac9 	bl	800db88 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80055f6:	7bba      	ldrb	r2, [r7, #14]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80055fc:	7b7a      	ldrb	r2, [r7, #13]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 8005608:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	b2da      	uxtb	r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	b2da      	uxtb	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005634:	2300      	movs	r3, #0
 8005636:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
 800563c:	e008      	b.n	8005650 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	3301      	adds	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	7bfa      	ldrb	r2, [r7, #15]
 8005656:	429a      	cmp	r2, r3
 8005658:	d3f1      	bcc.n	800563e <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 800565a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3318      	adds	r3, #24
 800567c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	331c      	adds	r3, #28
 8005688:	2214      	movs	r2, #20
 800568a:	4619      	mov	r1, r3
 800568c:	f018 f9c9 	bl	801da22 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	785a      	ldrb	r2, [r3, #1]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	33c2      	adds	r3, #194	@ 0xc2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ffbf 	bl	800562c <VL53LX_init_zone_config_histogram_bins>
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 80056c2:	e00f      	b.n	80056e4 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d807      	bhi.n	80056dc <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	3301      	adds	r3, #1
 80056d2:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 80056da:	e003      	b.n	80056e4 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2206      	movs	r2, #6
 80056e0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 80056e4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	460b      	mov	r3, r1
 80056fe:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3318      	adds	r3, #24
 8005708:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800570a:	7afb      	ldrb	r3, [r7, #11]
 800570c:	2b21      	cmp	r3, #33	@ 0x21
 800570e:	d030      	beq.n	8005772 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8005710:	2b21      	cmp	r3, #33	@ 0x21
 8005712:	dc43      	bgt.n	800579c <VL53LX_get_preset_mode_timing_cfg+0xac>
 8005714:	2b1b      	cmp	r3, #27
 8005716:	d002      	beq.n	800571e <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8005718:	2b1e      	cmp	r3, #30
 800571a:	d015      	beq.n	8005748 <VL53LX_get_preset_mode_timing_cfg+0x58>
 800571c:	e03e      	b.n	800579c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	601a      	str	r2, [r3, #0]

	break;
 8005746:	e02c      	b.n	80057a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	601a      	str	r2, [r3, #0]
	break;
 8005770:	e017      	b.n	80057a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	601a      	str	r2, [r3, #0]
	break;
 800579a:	e002      	b.n	80057a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800579c:	23fc      	movs	r3, #252	@ 0xfc
 800579e:	75fb      	strb	r3, [r7, #23]
		break;
 80057a0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80057a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b096      	sub	sp, #88	@ 0x58
 80057b6:	af06      	add	r7, sp, #24
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	72fb      	strb	r3, [r7, #11]
 80057c0:	4613      	mov	r3, r2
 80057c2:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3318      	adds	r3, #24
 80057ce:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80057de:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80057fe:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8005806:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800580e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	33c2      	adds	r3, #194	@ 0xc2
 8005814:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	33f8      	adds	r3, #248	@ 0xf8
 800581a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	7afa      	ldrb	r2, [r7, #11]
 8005820:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005826:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800582c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005832:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8005834:	2103      	movs	r1, #3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f003 fd1e 	bl	8009278 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	2b21      	cmp	r3, #33	@ 0x21
 8005840:	d02e      	beq.n	80058a0 <VL53LX_set_preset_mode+0xee>
 8005842:	2b21      	cmp	r3, #33	@ 0x21
 8005844:	dc40      	bgt.n	80058c8 <VL53LX_set_preset_mode+0x116>
 8005846:	2b1b      	cmp	r3, #27
 8005848:	d002      	beq.n	8005850 <VL53LX_set_preset_mode+0x9e>
 800584a:	2b1e      	cmp	r3, #30
 800584c:	d014      	beq.n	8005878 <VL53LX_set_preset_mode+0xc6>
 800584e:	e03b      	b.n	80058c8 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	9303      	str	r3, [sp, #12]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005868:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800586a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800586c:	f003 fa41 	bl	8008cf2 <VL53LX_preset_mode_histogram_long_range>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005876:	e02b      	b.n	80058d0 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	9303      	str	r3, [sp, #12]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	9302      	str	r3, [sp, #8]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005890:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005894:	f003 facb 	bl	8008e2e <VL53LX_preset_mode_histogram_medium_range>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800589e:	e017      	b.n	80058d0 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	9303      	str	r3, [sp, #12]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058bc:	f003 fb55 	bl	8008f6a <VL53LX_preset_mode_histogram_short_range>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058c6:	e003      	b.n	80058d0 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80058c8:	23fc      	movs	r3, #252	@ 0xfc
 80058ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 80058ce:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 80058d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 80058d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058da:	893a      	ldrh	r2, [r7, #8]
 80058dc:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	893a      	ldrh	r2, [r7, #8]
 80058e2:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 80058e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d108      	bne.n	80058fe <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 80058ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff fd9e 	bl	8005434 <VL53LX_set_timeouts_us>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 80058fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8005906:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fd65 	bl	80053d8 <VL53LX_set_inter_measurement_period_ms>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005916:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 800591a:	3301      	adds	r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005920:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f004 f8bc 	bl	8009aa4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 800592c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005930:	4618      	mov	r0, r3
 8005932:	3740      	adds	r7, #64	@ 0x40
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0d2      	sub	sp, #328	@ 0x148
 800593c:	af00      	add	r7, sp, #0
 800593e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005942:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005946:	6018      	str	r0, [r3, #0]
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005950:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8005954:	4602      	mov	r2, r0
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800595c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005960:	460a      	mov	r2, r1
 8005962:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005964:	2300      	movs	r3, #0
 8005966:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800596a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800596e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3318      	adds	r3, #24
 8005976:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 800597a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800597e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8005988:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800598c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005990:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8005994:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005998:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800599c:	3348      	adds	r3, #72	@ 0x48
 800599e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80059a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059a6:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 80059aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80059ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059b2:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80059b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80059ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059be:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80059c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80059c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059ca:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80059ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80059d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059d6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80059da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80059de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059e2:	332c      	adds	r3, #44	@ 0x2c
 80059e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80059e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80059ec:	3348      	adds	r3, #72	@ 0x48
 80059ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005a16:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005a1a:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005a22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a26:	791b      	ldrb	r3, [r3, #4]
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005a30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a34:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8005a38:	f993 3000 	ldrsb.w	r3, [r3]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005a42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a46:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005a48:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005a4c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8005a50:	3336      	adds	r3, #54	@ 0x36
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8005a58:	4413      	add	r3, r2
 8005a5a:	1d9a      	adds	r2, r3, #6
 8005a5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a60:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005a64:	4611      	mov	r1, r2
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	f7ff fd87 	bl	800557a <VL53LX_set_user_zone>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005a72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005a76:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8005a7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005a82:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a86:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005a94:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8005a98:	4413      	add	r3, r2
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005aa0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	f001 fbbc 	bl	8007224 <VL53LX_set_zone_dss_config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005ab2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ab6:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005ac2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005ace:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ad2:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005ad6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ada:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ae6:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8005aea:	2bff      	cmp	r3, #255	@ 0xff
 8005aec:	d106      	bne.n	8005afc <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005aee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b04:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d139      	bne.n	8005b80 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b14:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d131      	bne.n	8005b80 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005b1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b20:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8005b24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2c:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b3e:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 8005b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005b4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005b52:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005b54:	b21a      	sxth	r2, r3
 8005b56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005b5a:	825a      	strh	r2, [r3, #18]
 8005b5c:	e003      	b.n	8005b66 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005b5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005b62:	2200      	movs	r2, #0
 8005b64:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005b66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b6a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d805      	bhi.n	8005b80 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005b74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b78:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d117      	bne.n	8005bc0 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005b90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b98:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10f      	bne.n	8005bc0 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba8:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005bac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005bb0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8005bb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005bb8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005bbc:	2206      	movs	r2, #6
 8005bbe:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8005bc0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8005bc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005bcc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f006 f81f 	bl	800bc14 <VL53LX_save_cfg_data>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 8005bdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005be0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d827      	bhi.n	8005c3c <VL53LX_init_and_start_range+0x304>
 8005bec:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <VL53LX_init_and_start_range+0x2bc>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c1d 	.word	0x08005c1d
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c0d 	.word	0x08005c0d
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c12:	e017      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005c14:	230d      	movs	r3, #13
 8005c16:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c1a:	e013      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8005c1c:	2324      	movs	r3, #36	@ 0x24
 8005c1e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c22:	e00f      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8005c24:	2344      	movs	r3, #68	@ 0x44
 8005c26:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c2a:	e00b      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8005c2c:	235a      	movs	r3, #90	@ 0x5a
 8005c2e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c32:	e007      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8005c34:	2371      	movs	r3, #113	@ 0x71
 8005c36:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c3a:	e003      	b.n	8005c44 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8005c3c:	2383      	movs	r3, #131	@ 0x83
 8005c3e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8005c42:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005c44:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005c48:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8005c4c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8005c5e:	e00b      	b.n	8005c78 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005c60:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005c6e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8005c72:	3301      	adds	r3, #1
 8005c74:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8005c78:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8005c7c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d3ed      	bcc.n	8005c60 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8005c84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005c88:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d917      	bls.n	8005cc2 <VL53LX_init_and_start_range+0x38a>
 8005c92:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d113      	bne.n	8005cc2 <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c9a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005c9e:	f1c3 0301 	rsb	r3, r3, #1
 8005ca2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ca6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8005caa:	f107 020c 	add.w	r2, r7, #12
 8005cae:	4413      	add	r3, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	210b      	movs	r1, #11
 8005cb4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8005cb8:	f00b f984 	bl	8010fc4 <VL53LX_i2c_encode_static_nvm_managed>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005cc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005cc6:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d917      	bls.n	8005d00 <VL53LX_init_and_start_range+0x3c8>
 8005cd0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d113      	bne.n	8005d00 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005cd8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005cdc:	f1c3 030d 	rsb	r3, r3, #13
 8005ce0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ce4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8005ce8:	f107 020c 	add.w	r2, r7, #12
 8005cec:	4413      	add	r3, r2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2117      	movs	r1, #23
 8005cf2:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8005cf6:	f00b fa41 	bl	801117c <VL53LX_i2c_encode_customer_nvm_managed>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005d00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005d04:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d917      	bls.n	8005d3e <VL53LX_init_and_start_range+0x406>
 8005d0e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d113      	bne.n	8005d3e <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d16:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005d1a:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005d1e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d22:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 8005d26:	f107 020c 	add.w	r2, r7, #12
 8005d2a:	4413      	add	r3, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2120      	movs	r1, #32
 8005d30:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8005d34:	f00b fb84 	bl	8011440 <VL53LX_i2c_encode_static_config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005d3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005d42:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d917      	bls.n	8005d7c <VL53LX_init_and_start_range+0x444>
 8005d4c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d113      	bne.n	8005d7c <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d54:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005d58:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8005d5c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d60:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 8005d64:	f107 020c 	add.w	r2, r7, #12
 8005d68:	4413      	add	r3, r2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2116      	movs	r1, #22
 8005d6e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8005d72:	f00b fc48 	bl	8011606 <VL53LX_i2c_encode_general_config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005d7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005d80:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d917      	bls.n	8005dba <VL53LX_init_and_start_range+0x482>
 8005d8a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d113      	bne.n	8005dba <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d92:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005d96:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8005d9a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d9e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 8005da2:	f107 020c 	add.w	r2, r7, #12
 8005da6:	4413      	add	r3, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	2117      	movs	r1, #23
 8005dac:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005db0:	f00b fcad 	bl	801170e <VL53LX_i2c_encode_timing_config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005dba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005dbe:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d036      	beq.n	8005e36 <VL53LX_init_and_start_range+0x4fe>
 8005dc8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d132      	bne.n	8005e36 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005dd0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005dd4:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8005dd8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005ddc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d017      	beq.n	8005e1a <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfa:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e0c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e18:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e1a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8005e1e:	f107 020c 	add.w	r2, r7, #12
 8005e22:	4413      	add	r3, r2
 8005e24:	461a      	mov	r2, r3
 8005e26:	2112      	movs	r1, #18
 8005e28:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8005e2c:	f00b fcf1 	bl	8011812 <VL53LX_i2c_encode_dynamic_config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8005e36:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d113      	bne.n	8005e66 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005e3e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005e42:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8005e46:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e4a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 8005e4e:	f107 020c 	add.w	r2, r7, #12
 8005e52:	4413      	add	r3, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	2105      	movs	r1, #5
 8005e58:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8005e5c:	f00b fd5e 	bl	801191c <VL53LX_i2c_encode_system_control>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8005e66:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10f      	bne.n	8005e8e <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 8005e6e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8005e72:	f107 020c 	add.w	r2, r7, #12
 8005e76:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8005e7a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8005e7e:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	f00d f976 	bl	8013174 <VL53LX_WriteMulti>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8005e8e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8005e96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005e9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	f003 fa1a 	bl	80092d8 <VL53LX_update_ll_driver_rd_state>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 8005eaa:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8005eb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005eb6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	f003 fbac 	bl	8009618 <VL53LX_update_ll_driver_cfg_state>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005ec6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3318      	adds	r3, #24
 8005ee4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8005eec:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005efc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f00b fd3d 	bl	8011992 <VL53LX_set_system_control>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8005f2e:	2103      	movs	r1, #3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f003 f9a1 	bl	8009278 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f003 fdab 	bl	8009aa4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f003 fddd 	bl	8009b0e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f5a:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d102      	bne.n	8005f68 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f006 ffbe 	bl	800cee4 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8005f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b0c8      	sub	sp, #288	@ 0x120
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005f82:	6018      	str	r0, [r3, #0]
 8005f84:	460a      	mov	r2, r1
 8005f86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f8a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005f8e:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005f96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8005fa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005faa:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8005fae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8005fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005fb6:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8005fba:	3318      	adds	r3, #24
 8005fbc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005fc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005fc4:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8005fc8:	331c      	adds	r3, #28
 8005fca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8005fce:	2388      	movs	r3, #136	@ 0x88
 8005fd0:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8005fe0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005fe4:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d008      	beq.n	8006000 <VL53LX_get_measurement_results+0x8c>
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d10d      	bne.n	800600e <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005ff2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8005ff6:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8005ffa:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005ffe:	e00a      	b.n	8006016 <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8006000:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006004:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8006008:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800600c:	e003      	b.n	8006016 <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 800600e:	232c      	movs	r3, #44	@ 0x2c
 8006010:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006014:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8006016:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10f      	bne.n	800603e <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 800601e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006022:	f107 0208 	add.w	r2, r7, #8
 8006026:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 800602a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800602e:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8006032:	6800      	ldr	r0, [r0, #0]
 8006034:	f00d f8d4 	bl	80131e0 <VL53LX_ReadMulti>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 800603e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006042:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d917      	bls.n	800607c <VL53LX_get_measurement_results+0x108>
 800604c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006054:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006058:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800605c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006060:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 8006064:	f107 0208 	add.w	r2, r7, #8
 8006068:	4413      	add	r3, r2
 800606a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800606e:	4619      	mov	r1, r3
 8006070:	2038      	movs	r0, #56	@ 0x38
 8006072:	f00b fe0c 	bl	8011c8e <VL53LX_i2c_decode_debug_results>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 800607c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006080:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <VL53LX_get_measurement_results+0x146>
 800608a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800608e:	2b00      	cmp	r3, #0
 8006090:	d113      	bne.n	80060ba <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006092:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006096:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800609a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800609e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 80060a2:	f107 0208 	add.w	r2, r7, #8
 80060a6:	4413      	add	r3, r2
 80060a8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80060ac:	4619      	mov	r1, r3
 80060ae:	2021      	movs	r0, #33	@ 0x21
 80060b0:	f00b fd8c 	bl	8011bcc <VL53LX_i2c_decode_core_results>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80060ba:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d110      	bne.n	80060e4 <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80060c8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 80060cc:	f107 0208 	add.w	r2, r7, #8
 80060d0:	4413      	add	r3, r2
 80060d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80060d6:	4619      	mov	r1, r3
 80060d8:	202c      	movs	r0, #44	@ 0x2c
 80060da:	f00b fc81 	bl	80119e0 <VL53LX_i2c_decode_system_results>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80060e4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	b0a0      	sub	sp, #128	@ 0x80
 80060f8:	af06      	add	r7, sp, #24
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	460b      	mov	r3, r1
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3318      	adds	r3, #24
 800610c:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8006114:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8006116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006118:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 800611a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800611c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8006120:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8006122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006124:	332c      	adds	r3, #44	@ 0x2c
 8006126:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8006128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800612a:	33c2      	adds	r3, #194	@ 0xc2
 800612c:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 800612e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006130:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8006134:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800613c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800613e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006142:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8006144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006146:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800614c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800614e:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 8006152:	3310      	adds	r3, #16
 8006154:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8006156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006158:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800615e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006160:	3348      	adds	r3, #72	@ 0x48
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8006164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006166:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800616a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800616c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800616e:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8006172:	331c      	adds	r3, #28
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8006176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006178:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8296 	beq.w	80066b2 <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8006186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006188:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fbd2 	bl	8006938 <VL53LX_get_histogram_bin_data>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 800619a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d118      	bne.n	80061d4 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d114      	bne.n	80061d4 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 80061aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80061b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 80061b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061bc:	4413      	add	r3, r2
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061c2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f004 fa11 	bl	800a5f0 <VL53LX_hist_copy_and_scale_ambient_info>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80061d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8206 	bne.w	80065ea <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80061de:	f107 0313 	add.w	r3, r7, #19
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f006 ffa4 	bl	800d132 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80061fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061fe:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8006206:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	3202      	adds	r2, #2
 800620e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8006216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006218:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 800621c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621e:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8006220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f004 f8e7 	bl	800a400 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8006232:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006236:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800623e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006240:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006244:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624a:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800624c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624e:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8006250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006252:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8006256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006258:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800625a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800625c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8006260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006262:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006266:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800626a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800626c:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8006270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006272:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8006276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006278:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800627c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800627e:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8006282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006284:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8006288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628a:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800628c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8006292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006294:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8006296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006298:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800629a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800629c:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800629e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a0:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 80062a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062a8:	f203 3292 	addw	r2, r3, #914	@ 0x392
 80062ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062ae:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f003 fad5 	bl	8009864 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80062ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d002      	beq.n	80062c8 <VL53LX_get_device_results+0x1d6>
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d02e      	beq.n	8006324 <VL53LX_get_device_results+0x232>
 80062c6:	e03d      	b.n	8006344 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80062c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062ca:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 80062ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80062de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062e0:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 80062e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062e6:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 80062ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ec:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80062f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062f2:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 80062f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80062f8:	319c      	adds	r1, #156	@ 0x9c
 80062fa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80062fc:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8006300:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 8006304:	b2a4      	uxth	r4, r4
 8006306:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8006308:	351c      	adds	r5, #28
 800630a:	9505      	str	r5, [sp, #20]
 800630c:	9404      	str	r4, [sp, #16]
 800630e:	9003      	str	r0, [sp, #12]
 8006310:	9102      	str	r1, [sp, #8]
 8006312:	9201      	str	r2, [sp, #4]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4643      	mov	r3, r8
 8006318:	4672      	mov	r2, lr
 800631a:	4661      	mov	r1, ip
 800631c:	4630      	mov	r0, r6
 800631e:	f005 f8de 	bl	800b4de <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8006322:	e013      	b.n	800634c <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006326:	331c      	adds	r3, #28
 8006328:	4619      	mov	r1, r3
 800632a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800632c:	f7fe f9b8 	bl	80046a0 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8006330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006332:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006336:	b29b      	uxth	r3, r3
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	b29b      	uxth	r3, r3
 800633c:	b21a      	sxth	r2, r3
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	839a      	strh	r2, [r3, #28]
		break;
 8006342:	e003      	b.n	800634c <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8006344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006346:	2200      	movs	r2, #0
 8006348:	839a      	strh	r2, [r3, #28]
		break;
 800634a:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800634c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 814c 	bne.w	80065ee <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8006356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006358:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 800635c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635e:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8006362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006364:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8006368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800636a:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 800636e:	461c      	mov	r4, r3
 8006370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006372:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4623      	mov	r3, r4
 800637a:	f005 fa53 	bl	800b824 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800637e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006380:	799b      	ldrb	r3, [r3, #6]
 8006382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006384:	4619      	mov	r1, r3
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 ff89 	bl	800729e <VL53LX_get_dmax_calibration_data>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8006392:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 812b 	bne.w	80065f2 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800639c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800639e:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 80063a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063a4:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 80063a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063aa:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80063ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063b0:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80063b4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80063b6:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 80063ba:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80063bc:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 80063c0:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 80063c2:	9405      	str	r4, [sp, #20]
 80063c4:	f107 0413 	add.w	r4, r7, #19
 80063c8:	9404      	str	r4, [sp, #16]
 80063ca:	9003      	str	r0, [sp, #12]
 80063cc:	9102      	str	r1, [sp, #8]
 80063ce:	9201      	str	r2, [sp, #4]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4633      	mov	r3, r6
 80063d4:	462a      	mov	r2, r5
 80063d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f00d f90f 	bl	80135fc <VL53LX_ipp_hist_process_data>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80063e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063e6:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d150      	bne.n	8006490 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d94d      	bls.n	8006490 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80063fa:	e045      	b.n	8006488 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80063fc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006400:	224c      	movs	r2, #76	@ 0x4c
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	3310      	adds	r3, #16
 8006408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	7cfa      	ldrb	r2, [r7, #19]
 8006416:	fbb3 f2f2 	udiv	r2, r3, r2
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	7cfa      	ldrb	r2, [r7, #19]
 8006424:	fbb3 f2f2 	udiv	r2, r3, r2
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	7cfa      	ldrb	r2, [r7, #19]
 8006432:	fb93 f2f2 	sdiv	r2, r3, r2
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800643e:	461a      	mov	r2, r3
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	fb92 f3f3 	sdiv	r3, r2, r3
 8006446:	b29a      	uxth	r2, r3
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006450:	461a      	mov	r2, r3
 8006452:	7cfb      	ldrb	r3, [r7, #19]
 8006454:	fb92 f3f3 	sdiv	r3, r2, r3
 8006458:	b29a      	uxth	r2, r3
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006462:	461a      	mov	r2, r3
 8006464:	7cfb      	ldrb	r3, [r7, #19]
 8006466:	fb92 f3f3 	sdiv	r3, r2, r3
 800646a:	b29a      	uxth	r2, r3
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	7cfa      	ldrb	r2, [r7, #19]
 8006476:	fbb3 f2f2 	udiv	r2, r3, r2
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800647e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006482:	3301      	adds	r3, #1
 8006484:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006488:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800648c:	2b03      	cmp	r3, #3
 800648e:	d9b5      	bls.n	80063fc <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8006490:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 80ae 	bne.w	80065f6 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 800649a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800649c:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 80064a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064a2:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 80064a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064a8:	330e      	adds	r3, #14
 80064aa:	461a      	mov	r2, r3
 80064ac:	f004 ffe1 	bl	800b472 <VL53LX_hist_wrap_dmax>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 80064b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 809d 	bne.w	80065fa <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80064c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80064c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80064ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d2:	4413      	add	r3, r2
 80064d4:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80064d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 80064da:	4613      	mov	r3, r2
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80064e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064e8:	4413      	add	r3, r2
 80064ea:	f103 0208 	add.w	r2, r3, #8
 80064ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f004 fadc 	bl	800aaae <VL53LX_hist_phase_consistency_check>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80064fc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006500:	2b00      	cmp	r3, #0
 8006502:	d17c      	bne.n	80065fe <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006506:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800650a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800650e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006516:	4413      	add	r3, r2
 8006518:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 800651a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800651e:	4613      	mov	r3, r2
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800652a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800652c:	4413      	add	r3, r2
 800652e:	f103 0208 	add.w	r2, r3, #8
 8006532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006534:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f004 ff42 	bl	800b3c2 <VL53LX_hist_xmonitor_consistency_check>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8006544:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006548:	2b00      	cmp	r3, #0
 800654a:	d15a      	bne.n	8006602 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800654c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800654e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8006556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006558:	2205      	movs	r2, #5
 800655a:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800655c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006562:	3301      	adds	r3, #1
 8006564:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8006566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006568:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006570:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8006572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006574:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 8006578:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800657c:	429a      	cmp	r2, r3
 800657e:	d222      	bcs.n	80065c6 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8006580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006588:	4413      	add	r3, r2
 800658a:	3304      	adds	r3, #4
 800658c:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800658e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006590:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006594:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800659a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659c:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800659e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 80065a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065a6:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 80065a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065aa:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b0:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80065b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 80065b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ba:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 80065c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c4:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 80065c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d11b      	bne.n	8006606 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 80065ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d0:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 80065d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d6:	f203 3266 	addw	r2, r3, #870	@ 0x366
 80065da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065dc:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 80065e0:	3318      	adds	r3, #24
 80065e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065e4:	f005 fa7b 	bl	800bade <VL53LX_hist_copy_results_to_sys_and_core>
 80065e8:	e00e      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065ea:	bf00      	nop
 80065ec:	e00c      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065ee:	bf00      	nop
 80065f0:	e00a      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065f2:	bf00      	nop
 80065f4:	e008      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065f6:	bf00      	nop
 80065f8:	e006      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065fa:	bf00      	nop
 80065fc:	e004      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80065fe:	bf00      	nop
 8006600:	e002      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8006606:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8006608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d036      	beq.n	800667e <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8006610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006612:	79db      	ldrb	r3, [r3, #7]
 8006614:	2b06      	cmp	r3, #6
 8006616:	d00a      	beq.n	800662e <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8006618:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8006620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f005 fb2f 	bl	800bc86 <VL53LX_dynamic_zone_update>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006634:	e015      	b.n	8006662 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8006636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006638:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 800663c:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <VL53LX_get_device_results+0x556>
 8006644:	2103      	movs	r1, #3
 8006646:	e000      	b.n	800664a <VL53LX_get_device_results+0x558>
 8006648:	2101      	movs	r1, #1
 800664a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800664e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006650:	4413      	add	r3, r2
 8006652:	460a      	mov	r2, r1
 8006654:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8006658:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800665c:	3301      	adds	r3, #1
 800665e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006662:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006666:	2b04      	cmp	r3, #4
 8006668:	d9e5      	bls.n	8006636 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 800666a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f005 fb81 	bl	800bd7a <VL53LX_multizone_hist_bins_update>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800667e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f006 f81c 	bl	800c6c4 <VL53LX_dynamic_xtalk_correction_corrector>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8006692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006694:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d157      	bne.n	800674c <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 800669c:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d054      	beq.n	800674c <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 80066a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	7cfa      	ldrb	r2, [r7, #19]
 80066a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e04c      	b.n	800674c <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 80066b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d107      	bne.n	80066ca <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	4619      	mov	r1, r3
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f7ff fc58 	bl	8005f74 <VL53LX_get_measurement_results>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 80066ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10d      	bne.n	80066ee <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80066d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066d4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 80066d8:	4618      	mov	r0, r3
 80066da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066dc:	f203 3166 	addw	r1, r3, #870	@ 0x366
 80066e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066e2:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 80066e6:	3218      	adds	r2, #24
 80066e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066ea:	f000 fc27 	bl	8006f3c <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d12a      	bne.n	800674c <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 80066f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f006 fc38 	bl	800cf7c <VL53LX_low_power_auto_setup_manual_calibration>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	2201      	movs	r2, #1
 8006716:	709a      	strb	r2, [r3, #2]
 8006718:	e00a      	b.n	8006730 <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 800671a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8006726:	2b01      	cmp	r3, #1
 8006728:	d102      	bne.n	8006730 <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	2202      	movs	r2, #2
 800672e:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	2bff      	cmp	r3, #255	@ 0xff
 8006736:	d009      	beq.n	800674c <VL53LX_get_device_results+0x65a>
 8006738:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f006 fc6d 	bl	800d020 <VL53LX_low_power_auto_update_DSS>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800674c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800674e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006754:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8006756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006758:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800675c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800675e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006762:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8006766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006768:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 800676a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 80b0 	bne.w	80068d4 <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8006774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006776:	2205      	movs	r2, #5
 8006778:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800677c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800677e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006782:	3301      	adds	r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006788:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 800678c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800678e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8006796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006798:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 800679c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80067a0:	429a      	cmp	r2, r3
 80067a2:	f080 8097 	bcs.w	80068d4 <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 80067a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 80067aa:	4613      	mov	r3, r2
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80067b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067b8:	4413      	add	r3, r2
 80067ba:	3308      	adds	r3, #8
 80067bc:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80067be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067c0:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80067c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c4:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80067c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067c8:	785a      	ldrb	r2, [r3, #1]
 80067ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067cc:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80067ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067d0:	789a      	ldrb	r2, [r3, #2]
 80067d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d4:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80067d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067d8:	78da      	ldrb	r2, [r3, #3]
 80067da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067dc:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 80067de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067e0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 80067e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e6:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 80067e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ea:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 80067ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067f0:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 80067f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067f4:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 80067f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80067fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006800:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8006804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 800680a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800680c:	7c5a      	ldrb	r2, [r3, #17]
 800680e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006810:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8006812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006814:	7c9a      	ldrb	r2, [r3, #18]
 8006816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006818:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006820:	e052      	b.n	80068c8 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8006822:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8006826:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800682a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800682c:	204c      	movs	r0, #76	@ 0x4c
 800682e:	fb00 f303 	mul.w	r3, r0, r3
 8006832:	440b      	add	r3, r1
 8006834:	3338      	adds	r3, #56	@ 0x38
 8006836:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8006838:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800683a:	4613      	mov	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4403      	add	r3, r0
 8006844:	3308      	adds	r3, #8
 8006846:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8006848:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800684c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8006850:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006852:	204c      	movs	r0, #76	@ 0x4c
 8006854:	fb00 f303 	mul.w	r3, r0, r3
 8006858:	440b      	add	r3, r1
 800685a:	333c      	adds	r3, #60	@ 0x3c
 800685c:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800685e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4403      	add	r3, r0
 800686a:	330c      	adds	r3, #12
 800686c:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 800686e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8006872:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8006876:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006878:	204c      	movs	r0, #76	@ 0x4c
 800687a:	fb00 f303 	mul.w	r3, r0, r3
 800687e:	440b      	add	r3, r1
 8006880:	3354      	adds	r3, #84	@ 0x54
 8006882:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8006884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3310      	adds	r3, #16
 8006892:	4602      	mov	r2, r0
 8006894:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8006896:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 800689a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 800689e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068a0:	204c      	movs	r0, #76	@ 0x4c
 80068a2:	fb00 f303 	mul.w	r3, r0, r3
 80068a6:	440b      	add	r3, r1
 80068a8:	335e      	adds	r3, #94	@ 0x5e
 80068aa:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 80068ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068ae:	4613      	mov	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3312      	adds	r3, #18
 80068ba:	4602      	mov	r2, r0
 80068bc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 80068be:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80068c2:	3301      	adds	r3, #1
 80068c4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80068c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068ca:	7c9b      	ldrb	r3, [r3, #18]
 80068cc:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d3a6      	bcc.n	8006822 <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 80068d4:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80068d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f017 f8a1 	bl	801da22 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 80068e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f002 fde3 	bl	80094b4 <VL53LX_check_ll_driver_rd_state>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80068f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3768      	adds	r7, #104	@ 0x68
 80068fc:	46bd      	mov	sp, r7
 80068fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006902 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8006912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d107      	bne.n	800692a <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	2203      	movs	r2, #3
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff f809 	bl	8005938 <VL53LX_init_and_start_range>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800692a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b0d2      	sub	sp, #328	@ 0x148
 800693c:	af00      	add	r7, sp, #0
 800693e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006942:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006946:	6018      	str	r0, [r3, #0]
 8006948:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800694c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006950:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
 8006954:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8006958:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800695c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3318      	adds	r3, #24
 8006964:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8006968:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800696c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8006976:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 800697a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800697e:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8006982:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006986:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800698a:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 800698e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006992:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006996:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800699a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 800699e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80069a2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80069a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 80069aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80069ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 80069e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80069e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80069f0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 80069f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80069fc:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8006a00:	2353      	movs	r3, #83	@ 0x53
 8006a02:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8006a06:	2188      	movs	r1, #136	@ 0x88
 8006a08:	6800      	ldr	r0, [r0, #0]
 8006a0a:	f00c fbe9 	bl	80131e0 <VL53LX_ReadMulti>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006a14:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006a1e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006a28:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006a2c:	785a      	ldrb	r2, [r3, #1]
 8006a2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006a32:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006a3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006a40:	789a      	ldrb	r2, [r3, #2]
 8006a42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006a46:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006a50:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006a54:	78da      	ldrb	r2, [r3, #3]
 8006a56:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006a5a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8006a64:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	2002      	movs	r0, #2
 8006a6e:	f003 fa21 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8006a72:	4603      	mov	r3, r0
 8006a74:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006a76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006a7a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8006a84:	234e      	movs	r3, #78	@ 0x4e
 8006a86:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006a8a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006a8e:	f107 020c 	add.w	r2, r7, #12
 8006a92:	4413      	add	r3, r2
 8006a94:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8006a98:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006a9c:	2002      	movs	r0, #2
 8006a9e:	f003 fa09 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006aa6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006aaa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8006ab4:	2350      	movs	r3, #80	@ 0x50
 8006ab6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006aba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006abe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006ac2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8006ac6:	5cd2      	ldrb	r2, [r2, r3]
 8006ac8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006acc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006ad6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006ada:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aec:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006af0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006af4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b06:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 8006b0a:	2351      	movs	r3, #81	@ 0x51
 8006b0c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006b10:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006b14:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006b18:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8006b1c:	5cd3      	ldrb	r3, [r2, r3]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8006b24:	2352      	movs	r3, #82	@ 0x52
 8006b26:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006b2a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006b2e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006b32:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8006b36:	5cd2      	ldrb	r2, [r2, r3]
 8006b38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8006b42:	234d      	movs	r3, #77	@ 0x4d
 8006b44:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006b48:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006b4c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006b50:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8006b54:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8006b58:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006b5a:	2306      	movs	r3, #6
 8006b5c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006b60:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006b64:	f107 020c 	add.w	r2, r7, #12
 8006b68:	4413      	add	r3, r2
 8006b6a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8006b74:	e01a      	b.n	8006bac <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8006b76:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006b7a:	2003      	movs	r0, #3
 8006b7c:	f003 fa39 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8006b80:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006b82:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8006b86:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006b88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006b8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3206      	adds	r2, #6
 8006b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006b98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006b9c:	3303      	adds	r3, #3
 8006b9e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006ba2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8006bac:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006bb0:	2b17      	cmp	r3, #23
 8006bb2:	d9e0      	bls.n	8006b76 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8006bb4:	f107 0208 	add.w	r2, r7, #8
 8006bb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006bbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006bc0:	f248 018d 	movw	r1, #32909	@ 0x808d
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f000 fb95 	bl	80072f4 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8006bca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006bce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d118      	bne.n	8006c0e <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006be0:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8006be4:	3310      	adds	r3, #16
 8006be6:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f016 fe33 	bl	801d858 <memset>
		pdev->bin_rec_pos = 0;
 8006bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 8006c00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 8006c0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c12:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d10b      	bne.n	8006c34 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 8006c1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c20:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8006c24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c28:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	f7fd fe2e 	bl	8004890 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006c34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c38:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8006c3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8006c48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006c56:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c5a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2218      	movs	r2, #24
 8006c62:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8006c64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2218      	movs	r2, #24
 8006c70:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006c72:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006c76:	78da      	ldrb	r2, [r3, #3]
 8006c78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006c86:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006c8a:	799b      	ldrb	r3, [r3, #6]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006c90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006c94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8006c9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006ca2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006cac:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006cb0:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 8006cb2:	4413      	add	r3, r2
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006cba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cc8:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8006cca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006cce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8006cd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006cdc:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8006ce0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006ce4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006ce8:	6811      	ldr	r1, [r2, #0]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	f003 fd81 	bl	800a7f2 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006cf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d115      	bne.n	8006d28 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d00:	791b      	ldrb	r3, [r3, #4]
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006d06:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8006d0a:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8006d12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d16:	799a      	ldrb	r2, [r3, #6]
 8006d18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006d1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8006d26:	e014      	b.n	8006d52 <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d2c:	79db      	ldrb	r3, [r3, #7]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006d32:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8006d36:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 8006d38:	4413      	add	r3, r2
 8006d3a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8006d3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d42:	7a5a      	ldrb	r2, [r3, #9]
 8006d44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006d48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006d52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006d56:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8006d66:	e01f      	b.n	8006da8 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006d68:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8006d6c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8006d70:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b07      	cmp	r3, #7
 8006d80:	d10d      	bne.n	8006d9e <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006d82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006d86:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	7adb      	ldrb	r3, [r3, #11]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006d92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006d96:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006d9e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8006da2:	3301      	adds	r3, #1
 8006da4:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8006da8:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d9db      	bls.n	8006d68 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8006db0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f003 fb8c 	bl	800a4d2 <VL53LX_decode_timeout>
 8006dba:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006dbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006dc0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8006dca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006dce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f006 f9ea 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 8006dde:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006de2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006de6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006df6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006dfa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 8006e04:	4619      	mov	r1, r3
 8006e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e0e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8006e12:	f006 f9e5 	bl	800d1e0 <VL53LX_duration_maths>
 8006e16:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006e18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006e26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e2a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8006e36:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e3a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	f006 faf4 	bl	800d42c <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8006e44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f006 ff0c 	bl	800dc6a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e56:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006e5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e5e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e6a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8006e6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8006e7a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006e7e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	789b      	ldrb	r3, [r3, #2]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006e94:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006e98:	4413      	add	r3, r2
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea4:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006ea6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006eaa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eb8:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006eba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006ebe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8006ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ecc:	2200      	movs	r2, #0
 8006ece:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006ed0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006ed4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2b11      	cmp	r3, #17
 8006ee4:	bf8c      	ite	hi
 8006ee6:	2201      	movhi	r2, #1
 8006ee8:	2200      	movls	r2, #0
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d11c      	bne.n	8006f2a <VL53LX_get_histogram_bin_data+0x5f2>
 8006ef0:	4a11      	ldr	r2, [pc, #68]	@ (8006f38 <VL53LX_get_histogram_bin_data+0x600>)
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf14      	ite	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	2300      	moveq	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006f08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8006f0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f20:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8006f22:	23fa      	movs	r3, #250	@ 0xfa
 8006f24:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 8006f28:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006f2a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	0002200e 	.word	0x0002200e

08006f3c <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b08b      	sub	sp, #44	@ 0x2c
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	78da      	ldrb	r2, [r3, #3]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	8a1b      	ldrh	r3, [r3, #16]
 8006f7c:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	8a9b      	ldrh	r3, [r3, #20]
 8006f82:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	8a5b      	ldrh	r3, [r3, #18]
 8006f88:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f90:	e00b      	b.n	8006faa <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8006f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4413      	add	r3, r2
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8006fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d9ef      	bls.n	8006f92 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fbe:	e0fe      	b.n	80071be <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006fc6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	78db      	ldrb	r3, [r3, #3]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006fde:	2b09      	cmp	r3, #9
 8006fe0:	d104      	bne.n	8006fec <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	2213      	movs	r2, #19
 8006fe6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8006fea:	e007      	b.n	8006ffc <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2200      	movs	r2, #0
 8007000:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2200      	movs	r2, #0
 8007006:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	2200      	movs	r2, #0
 800700c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	2200      	movs	r2, #0
 8007012:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	2200      	movs	r2, #0
 8007018:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	2200      	movs	r2, #0
 800701e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8007020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8007028:	2b01      	cmp	r3, #1
 800702a:	d05c      	beq.n	80070e6 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 800702c:	e0a8      	b.n	8007180 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	789b      	ldrb	r3, [r3, #2]
 8007032:	2b07      	cmp	r3, #7
 8007034:	d103      	bne.n	800703e <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	8a7a      	ldrh	r2, [r7, #18]
 800703a:	82da      	strh	r2, [r3, #22]
 800703c:	e00b      	b.n	8007056 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	789b      	ldrb	r3, [r3, #2]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d103      	bne.n	800704e <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	8aba      	ldrh	r2, [r7, #20]
 800704a:	82da      	strh	r2, [r3, #22]
 800704c:	e003      	b.n	8007056 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	8afa      	ldrh	r2, [r7, #22]
 800705a:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	895b      	ldrh	r3, [r3, #10]
 8007070:	015b      	lsls	r3, r3, #5
 8007072:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707a:	d302      	bcc.n	8007082 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800707c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007080:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	b29a      	uxth	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8007098:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070aa:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da01      	bge.n	80070b6 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80070b2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80070b6:	12db      	asrs	r3, r3, #11
 80070b8:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	b21a      	sxth	r2, r3
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 80070e4:	e04c      	b.n	8007180 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070fc:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	8bdb      	ldrh	r3, [r3, #30]
 800710a:	015b      	lsls	r3, r3, #5
 800710c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007114:	d302      	bcc.n	800711c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8007116:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800711a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	b29a      	uxth	r2, r3
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 8007132:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	fb02 f303 	mul.w	r3, r2, r3
 800713c:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007144:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	da01      	bge.n	8007150 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 800714c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8007150:	12db      	asrs	r3, r3, #11
 8007152:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	b21a      	sxth	r2, r3
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 800717e:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	334c      	adds	r3, #76	@ 0x4c
 80071b2:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80071b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071b8:	3301      	adds	r3, #1
 80071ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	f67f aefc 	bls.w	8006fc0 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2b11      	cmp	r3, #17
 80071d8:	bf8c      	ite	hi
 80071da:	2201      	movhi	r2, #1
 80071dc:	2200      	movls	r2, #0
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d117      	bne.n	8007214 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 80071e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007220 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 80071e6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bf14      	ite	ne
 80071f2:	2301      	movne	r3, #1
 80071f4:	2300      	moveq	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8007212:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8007214:	bf00      	nop
 8007216:	372c      	adds	r7, #44	@ 0x2c
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	0002200e 	.word	0x0002200e

08007224 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3318      	adds	r3, #24
 8007236:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	332c      	adds	r3, #44	@ 0x2c
 800723c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b05      	cmp	r3, #5
 8007244:	d109      	bne.n	800725a <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 8007258:	e003      	b.n	8007262 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8007262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3318      	adds	r3, #24
 8007286:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800728e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	460b      	mov	r3, r1
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3318      	adds	r3, #24
 80072b4:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d009      	beq.n	80072d0 <VL53LX_get_dmax_calibration_data+0x32>
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d10f      	bne.n	80072e0 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 80072c4:	220a      	movs	r2, #10
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f016 fbaa 	bl	801da22 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80072ce:	e00a      	b.n	80072e6 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 80072d4:	220a      	movs	r2, #10
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f016 fba2 	bl	801da22 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80072de:	e002      	b.n	80072e6 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80072e0:	23fc      	movs	r3, #252	@ 0xfc
 80072e2:	75fb      	strb	r3, [r7, #23]
	break;
 80072e4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80072e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b089      	sub	sp, #36	@ 0x24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	460b      	mov	r3, r1
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3318      	adds	r3, #24
 800730a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8007312:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800731a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800731c:	897b      	ldrh	r3, [r7, #10]
 800731e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007322:	2bb9      	cmp	r3, #185	@ 0xb9
 8007324:	f200 86ca 	bhi.w	80080bc <VL53LX_get_tuning_parm+0xdc8>
 8007328:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <VL53LX_get_tuning_parm+0x3c>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007619 	.word	0x08007619
 8007334:	08007629 	.word	0x08007629
 8007338:	08007639 	.word	0x08007639
 800733c:	08007649 	.word	0x08007649
 8007340:	08007657 	.word	0x08007657
 8007344:	08007665 	.word	0x08007665
 8007348:	08007673 	.word	0x08007673
 800734c:	08007681 	.word	0x08007681
 8007350:	0800768f 	.word	0x0800768f
 8007354:	0800769d 	.word	0x0800769d
 8007358:	080076ab 	.word	0x080076ab
 800735c:	080076b7 	.word	0x080076b7
 8007360:	080076c5 	.word	0x080076c5
 8007364:	080076d3 	.word	0x080076d3
 8007368:	080076df 	.word	0x080076df
 800736c:	080076ed 	.word	0x080076ed
 8007370:	080076fb 	.word	0x080076fb
 8007374:	0800770b 	.word	0x0800770b
 8007378:	0800771b 	.word	0x0800771b
 800737c:	08007729 	.word	0x08007729
 8007380:	08007739 	.word	0x08007739
 8007384:	08007747 	.word	0x08007747
 8007388:	08007757 	.word	0x08007757
 800738c:	08007767 	.word	0x08007767
 8007390:	08007777 	.word	0x08007777
 8007394:	08007787 	.word	0x08007787
 8007398:	08007797 	.word	0x08007797
 800739c:	080077a7 	.word	0x080077a7
 80073a0:	080077b7 	.word	0x080077b7
 80073a4:	080077c7 	.word	0x080077c7
 80073a8:	080077d7 	.word	0x080077d7
 80073ac:	080077e5 	.word	0x080077e5
 80073b0:	080077f5 	.word	0x080077f5
 80073b4:	08007805 	.word	0x08007805
 80073b8:	08007815 	.word	0x08007815
 80073bc:	08007825 	.word	0x08007825
 80073c0:	08007835 	.word	0x08007835
 80073c4:	08007845 	.word	0x08007845
 80073c8:	08007855 	.word	0x08007855
 80073cc:	08007865 	.word	0x08007865
 80073d0:	08007875 	.word	0x08007875
 80073d4:	08007885 	.word	0x08007885
 80073d8:	08007895 	.word	0x08007895
 80073dc:	080078a5 	.word	0x080078a5
 80073e0:	080078b5 	.word	0x080078b5
 80073e4:	080078c5 	.word	0x080078c5
 80073e8:	080078d3 	.word	0x080078d3
 80073ec:	080078e1 	.word	0x080078e1
 80073f0:	080078ef 	.word	0x080078ef
 80073f4:	080078fd 	.word	0x080078fd
 80073f8:	0800790b 	.word	0x0800790b
 80073fc:	08007919 	.word	0x08007919
 8007400:	08007927 	.word	0x08007927
 8007404:	08007935 	.word	0x08007935
 8007408:	08007943 	.word	0x08007943
 800740c:	08007951 	.word	0x08007951
 8007410:	0800795f 	.word	0x0800795f
 8007414:	0800796d 	.word	0x0800796d
 8007418:	0800797b 	.word	0x0800797b
 800741c:	08007989 	.word	0x08007989
 8007420:	08007997 	.word	0x08007997
 8007424:	080079a5 	.word	0x080079a5
 8007428:	080079b3 	.word	0x080079b3
 800742c:	080079c1 	.word	0x080079c1
 8007430:	080079cf 	.word	0x080079cf
 8007434:	080079dd 	.word	0x080079dd
 8007438:	080079eb 	.word	0x080079eb
 800743c:	080079f9 	.word	0x080079f9
 8007440:	08007a07 	.word	0x08007a07
 8007444:	08007a15 	.word	0x08007a15
 8007448:	08007a23 	.word	0x08007a23
 800744c:	08007a31 	.word	0x08007a31
 8007450:	08007a3f 	.word	0x08007a3f
 8007454:	08007a4d 	.word	0x08007a4d
 8007458:	08007a59 	.word	0x08007a59
 800745c:	08007a67 	.word	0x08007a67
 8007460:	08007a75 	.word	0x08007a75
 8007464:	08007a81 	.word	0x08007a81
 8007468:	08007a8d 	.word	0x08007a8d
 800746c:	08007a99 	.word	0x08007a99
 8007470:	08007aa5 	.word	0x08007aa5
 8007474:	08007ab1 	.word	0x08007ab1
 8007478:	08007abd 	.word	0x08007abd
 800747c:	08007acb 	.word	0x08007acb
 8007480:	08007ad9 	.word	0x08007ad9
 8007484:	08007ae7 	.word	0x08007ae7
 8007488:	08007af5 	.word	0x08007af5
 800748c:	08007b03 	.word	0x08007b03
 8007490:	08007b11 	.word	0x08007b11
 8007494:	08007b1f 	.word	0x08007b1f
 8007498:	08007b2d 	.word	0x08007b2d
 800749c:	08007b3b 	.word	0x08007b3b
 80074a0:	08007b49 	.word	0x08007b49
 80074a4:	08007b57 	.word	0x08007b57
 80074a8:	08007b65 	.word	0x08007b65
 80074ac:	08007b73 	.word	0x08007b73
 80074b0:	08007b81 	.word	0x08007b81
 80074b4:	08007b8f 	.word	0x08007b8f
 80074b8:	08007b9d 	.word	0x08007b9d
 80074bc:	08007bab 	.word	0x08007bab
 80074c0:	08007bb9 	.word	0x08007bb9
 80074c4:	08007bc7 	.word	0x08007bc7
 80074c8:	08007bd5 	.word	0x08007bd5
 80074cc:	08007be3 	.word	0x08007be3
 80074d0:	08007bf1 	.word	0x08007bf1
 80074d4:	08007bff 	.word	0x08007bff
 80074d8:	08007c0d 	.word	0x08007c0d
 80074dc:	08007c1b 	.word	0x08007c1b
 80074e0:	08007c29 	.word	0x08007c29
 80074e4:	08007c37 	.word	0x08007c37
 80074e8:	08007c45 	.word	0x08007c45
 80074ec:	08007c53 	.word	0x08007c53
 80074f0:	08007c61 	.word	0x08007c61
 80074f4:	08007c6f 	.word	0x08007c6f
 80074f8:	08007c7d 	.word	0x08007c7d
 80074fc:	08007c8b 	.word	0x08007c8b
 8007500:	08007c99 	.word	0x08007c99
 8007504:	08007ca7 	.word	0x08007ca7
 8007508:	08007cb5 	.word	0x08007cb5
 800750c:	08007cc7 	.word	0x08007cc7
 8007510:	08007cd9 	.word	0x08007cd9
 8007514:	08007ceb 	.word	0x08007ceb
 8007518:	08007cfd 	.word	0x08007cfd
 800751c:	08007d0f 	.word	0x08007d0f
 8007520:	08007d21 	.word	0x08007d21
 8007524:	08007d33 	.word	0x08007d33
 8007528:	08007d45 	.word	0x08007d45
 800752c:	08007d57 	.word	0x08007d57
 8007530:	08007d69 	.word	0x08007d69
 8007534:	08007d7b 	.word	0x08007d7b
 8007538:	08007d8d 	.word	0x08007d8d
 800753c:	08007d9f 	.word	0x08007d9f
 8007540:	08007db1 	.word	0x08007db1
 8007544:	08007dc3 	.word	0x08007dc3
 8007548:	08007dd5 	.word	0x08007dd5
 800754c:	08007de7 	.word	0x08007de7
 8007550:	08007df9 	.word	0x08007df9
 8007554:	08007e0b 	.word	0x08007e0b
 8007558:	08007e19 	.word	0x08007e19
 800755c:	08007e27 	.word	0x08007e27
 8007560:	08007e35 	.word	0x08007e35
 8007564:	08007e43 	.word	0x08007e43
 8007568:	08007e51 	.word	0x08007e51
 800756c:	08007e5f 	.word	0x08007e5f
 8007570:	08007e6d 	.word	0x08007e6d
 8007574:	08007e7f 	.word	0x08007e7f
 8007578:	08007e8d 	.word	0x08007e8d
 800757c:	08007e9b 	.word	0x08007e9b
 8007580:	08007ea9 	.word	0x08007ea9
 8007584:	08007eb7 	.word	0x08007eb7
 8007588:	08007ec5 	.word	0x08007ec5
 800758c:	08007ed3 	.word	0x08007ed3
 8007590:	08007ee1 	.word	0x08007ee1
 8007594:	08007eef 	.word	0x08007eef
 8007598:	08007efd 	.word	0x08007efd
 800759c:	08007f0b 	.word	0x08007f0b
 80075a0:	08007f19 	.word	0x08007f19
 80075a4:	08007f27 	.word	0x08007f27
 80075a8:	08007f35 	.word	0x08007f35
 80075ac:	08007f43 	.word	0x08007f43
 80075b0:	08007f51 	.word	0x08007f51
 80075b4:	08007f5f 	.word	0x08007f5f
 80075b8:	08007f6d 	.word	0x08007f6d
 80075bc:	08007f7b 	.word	0x08007f7b
 80075c0:	08007f89 	.word	0x08007f89
 80075c4:	08007f97 	.word	0x08007f97
 80075c8:	08007fa5 	.word	0x08007fa5
 80075cc:	08007fb3 	.word	0x08007fb3
 80075d0:	08007fc1 	.word	0x08007fc1
 80075d4:	08007fcf 	.word	0x08007fcf
 80075d8:	08007fdd 	.word	0x08007fdd
 80075dc:	08007feb 	.word	0x08007feb
 80075e0:	08007ff9 	.word	0x08007ff9
 80075e4:	08008007 	.word	0x08008007
 80075e8:	08008015 	.word	0x08008015
 80075ec:	08008023 	.word	0x08008023
 80075f0:	08008031 	.word	0x08008031
 80075f4:	0800803f 	.word	0x0800803f
 80075f8:	0800804d 	.word	0x0800804d
 80075fc:	0800805b 	.word	0x0800805b
 8007600:	08008069 	.word	0x08008069
 8007604:	08008077 	.word	0x08008077
 8007608:	08008085 	.word	0x08008085
 800760c:	08008093 	.word	0x08008093
 8007610:	080080a1 	.word	0x080080a1
 8007614:	080080af 	.word	0x080080af

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800761e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
	break;
 8007624:	f000 bd51 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800762e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
	break;
 8007634:	f000 bd49 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800763e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
	break;
 8007644:	f000 bd41 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	break;
 8007652:	f000 bd3a 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	break;
 8007660:	f000 bd33 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	break;
 800766e:	f000 bd2c 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	78db      	ldrb	r3, [r3, #3]
 8007676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
	break;
 800767c:	f000 bd25 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	791b      	ldrb	r3, [r3, #4]
 8007684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	601a      	str	r2, [r3, #0]
	break;
 800768a:	f000 bd1e 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
	break;
 8007698:	f000 bd17 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	799b      	ldrb	r3, [r3, #6]
 80076a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
	break;
 80076a6:	f000 bd10 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
	break;
 80076b2:	f000 bd0a 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	891b      	ldrh	r3, [r3, #8]
 80076ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	601a      	str	r2, [r3, #0]
	break;
 80076c0:	f000 bd03 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	8a1b      	ldrh	r3, [r3, #16]
 80076c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
	break;
 80076ce:	f000 bcfc 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
	break;
 80076da:	f000 bcf6 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	7e1b      	ldrb	r3, [r3, #24]
 80076e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
	break;
 80076e8:	f000 bcef 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	8b5b      	ldrh	r3, [r3, #26]
 80076f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
	break;
 80076f6:	f000 bce8 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8007700:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	break;
 8007706:	f000 bce0 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007710:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	break;
 8007716:	f000 bcd8 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800771e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
	break;
 8007724:	f000 bcd1 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800772e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
	break;
 8007734:	f000 bcc9 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800773c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
	break;
 8007742:	f000 bcc2 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800774c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	601a      	str	r2, [r3, #0]
	break;
 8007752:	f000 bcba 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800775c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
	break;
 8007762:	f000 bcb2 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800776c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	601a      	str	r2, [r3, #0]
	break;
 8007772:	f000 bcaa 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800777c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
	break;
 8007782:	f000 bca2 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800778c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
	break;
 8007792:	f000 bc9a 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 800779c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
	break;
 80077a2:	f000 bc92 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
	break;
 80077b2:	f000 bc8a 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 80077bc:	461a      	mov	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
	break;
 80077c2:	f000 bc82 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 80077cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
	break;
 80077d2:	f000 bc7a 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]
	break;
 80077e0:	f000 bc73 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	601a      	str	r2, [r3, #0]
	break;
 80077f0:	f000 bc6b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
	break;
 8007800:	f000 bc63 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 800780a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
	break;
 8007810:	f000 bc5b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 800781a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	601a      	str	r2, [r3, #0]
	break;
 8007820:	f000 bc53 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800782a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
	break;
 8007830:	f000 bc4b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800783a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
	break;
 8007840:	f000 bc43 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 800784a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	601a      	str	r2, [r3, #0]
	break;
 8007850:	f000 bc3b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800785a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
	break;
 8007860:	f000 bc33 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 800786a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
	break;
 8007870:	f000 bc2b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 800787a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
	break;
 8007880:	f000 bc23 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 800788a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
	break;
 8007890:	f000 bc1b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
	break;
 80078a0:	f000 bc13 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80078aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
	break;
 80078b0:	f000 bc0b 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
	break;
 80078c0:	f000 bc03 	b.w	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80078ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
	break;
 80078d0:	e3fb      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80078d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
	break;
 80078de:	e3f4      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 80078e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
	break;
 80078ec:	e3ed      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 80078f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
	break;
 80078fa:	e3e6      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8007902:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	break;
 8007908:	e3df      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8007910:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	break;
 8007916:	e3d8      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 800791e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	break;
 8007924:	e3d1      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 800792c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
	break;
 8007932:	e3ca      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800793a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
	break;
 8007940:	e3c3      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8007948:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
	break;
 800794e:	e3bc      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8007956:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
	break;
 800795c:	e3b5      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8007964:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
	break;
 800796a:	e3ae      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8007972:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
	break;
 8007978:	e3a7      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8007980:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
	break;
 8007986:	e3a0      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800798e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
	break;
 8007994:	e399      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800799c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
	break;
 80079a2:	e392      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 80079aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
	break;
 80079b0:	e38b      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 80079b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
	break;
 80079be:	e384      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80079c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
	break;
 80079cc:	e37d      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 80079d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
	break;
 80079da:	e376      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 80079e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
	break;
 80079e8:	e36f      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 80079f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]
	break;
 80079f6:	e368      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 80079fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	break;
 8007a04:	e361      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8007a0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	break;
 8007a12:	e35a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8007a1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
	break;
 8007a20:	e353      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8007a28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
	break;
 8007a2e:	e34c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8007a36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
	break;
 8007a3c:	e345      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8007a44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
	break;
 8007a4a:	e33e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	7c1b      	ldrb	r3, [r3, #16]
 8007a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
	break;
 8007a56:	e338      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
	break;
 8007a64:	e331      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
	break;
 8007a72:	e32a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
	break;
 8007a7e:	e324      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
	break;
 8007a8a:	e31e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	8adb      	ldrh	r3, [r3, #22]
 8007a90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	break;
 8007a96:	e318      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	8b1b      	ldrh	r3, [r3, #24]
 8007a9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
	break;
 8007aa2:	e312      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
	break;
 8007aae:	e30c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	break;
 8007aba:	e306      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
	break;
 8007ac8:	e2ff      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	break;
 8007ad6:	e2f8      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
	break;
 8007ae4:	e2f1      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
	break;
 8007af2:	e2ea      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8007afa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
	break;
 8007b00:	e2e3      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8007b08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
	break;
 8007b0e:	e2dc      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 8007b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
	break;
 8007b1c:	e2d5      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8007b24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
	break;
 8007b2a:	e2ce      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
	break;
 8007b38:	e2c7      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8007b40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	break;
 8007b46:	e2c0      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8007b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
	break;
 8007b54:	e2b9      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007b5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
	break;
 8007b62:	e2b2      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 8007b6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
	break;
 8007b70:	e2ab      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8007b78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
	break;
 8007b7e:	e2a4      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8007b86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]
	break;
 8007b8c:	e29d      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8007b94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
	break;
 8007b9a:	e296      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8007ba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
	break;
 8007ba8:	e28f      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8007bb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	break;
 8007bb6:	e288      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8007bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	break;
 8007bc4:	e281      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 8007bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
	break;
 8007bd2:	e27a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8007bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
	break;
 8007be0:	e273      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8007be8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
	break;
 8007bee:	e26c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8007bf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	break;
 8007bfc:	e265      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007c04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
	break;
 8007c0a:	e25e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007c12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
	break;
 8007c18:	e257      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8007c20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	break;
 8007c26:	e250      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007c2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	break;
 8007c34:	e249      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8007c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
	break;
 8007c42:	e242      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8007c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
	break;
 8007c50:	e23b      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007c58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	break;
 8007c5e:	e234      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8007c66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
	break;
 8007c6c:	e22d      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8007c74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
	break;
 8007c7a:	e226      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007c82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
	break;
 8007c88:	e21f      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8007c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
	break;
 8007c96:	e218      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8007c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
	break;
 8007ca4:	e211      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8007cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
	break;
 8007cb2:	e20a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cba:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 8007cbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
	break;
 8007cc4:	e201      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ccc:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 8007cd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	break;
 8007cd6:	e1f8      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cde:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007ce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
	break;
 8007ce8:	e1ef      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf0:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8007cf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	601a      	str	r2, [r3, #0]
	break;
 8007cfa:	e1e6      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d02:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 8007d06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
	break;
 8007d0c:	e1dd      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d14:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8007d18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
	break;
 8007d1e:	e1d4      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d26:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8007d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
	break;
 8007d30:	e1cb      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d38:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8007d3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]
	break;
 8007d42:	e1c2      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8007d4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
	break;
 8007d54:	e1b9      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d5c:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 8007d60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
	break;
 8007d66:	e1b0      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d6e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8007d72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
	break;
 8007d78:	e1a7      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d80:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8007d84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
	break;
 8007d8a:	e19e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d92:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 8007d96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
	break;
 8007d9c:	e195      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007da4:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	601a      	str	r2, [r3, #0]
	break;
 8007dae:	e18c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007db6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
	break;
 8007dc0:	e183      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	601a      	str	r2, [r3, #0]
	break;
 8007dd2:	e17a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dda:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8007dde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
	break;
 8007de4:	e171      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dec:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 8007df0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	break;
 8007df6:	e168      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dfe:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8007e02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]
	break;
 8007e08:	e15f      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007e10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	break;
 8007e16:	e158      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8007e1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	break;
 8007e24:	e151      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8007e2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
	break;
 8007e32:	e14a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8007e3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
	break;
 8007e40:	e143      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8007e48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
	break;
 8007e4e:	e13c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8007e56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
	break;
 8007e5c:	e135      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007e64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
	break;
 8007e6a:	e12e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
	break;
 8007e7c:	e125      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8007e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
	break;
 8007e8a:	e11e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 8007e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]
	break;
 8007e98:	e117      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 8007ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
	break;
 8007ea6:	e110      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 8007eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
	break;
 8007eb4:	e109      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 8007ebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
	break;
 8007ec2:	e102      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 8007eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
	break;
 8007ed0:	e0fb      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 8007ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
	break;
 8007ede:	e0f4      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 8007ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
	break;
 8007eec:	e0ed      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8007ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
	break;
 8007efa:	e0e6      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 8007f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
	break;
 8007f08:	e0df      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 8007f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	601a      	str	r2, [r3, #0]
	break;
 8007f16:	e0d8      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 8007f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
	break;
 8007f24:	e0d1      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 8007f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	break;
 8007f32:	e0ca      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 8007f3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	601a      	str	r2, [r3, #0]
	break;
 8007f40:	e0c3      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 8007f48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
	break;
 8007f4e:	e0bc      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 8007f56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
	break;
 8007f5c:	e0b5      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 8007f64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
	break;
 8007f6a:	e0ae      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 8007f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
	break;
 8007f78:	e0a7      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 8007f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
	break;
 8007f86:	e0a0      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 8007f8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
	break;
 8007f94:	e099      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 8007f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
	break;
 8007fa2:	e092      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 8007faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	601a      	str	r2, [r3, #0]
	break;
 8007fb0:	e08b      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 8007fb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
	break;
 8007fbe:	e084      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 8007fc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
	break;
 8007fcc:	e07d      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 8007fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
	break;
 8007fda:	e076      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 8007fe2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]
	break;
 8007fe8:	e06f      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 8007ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	break;
 8007ff6:	e068      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 8007ffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	break;
 8008004:	e061      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 800800c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
	break;
 8008012:	e05a      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 800801a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	601a      	str	r2, [r3, #0]
	break;
 8008020:	e053      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 8008028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
	break;
 800802e:	e04c      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 8008036:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
	break;
 800803c:	e045      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8008044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
	break;
 800804a:	e03e      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 8008052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
	break;
 8008058:	e037      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8008060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	break;
 8008066:	e030      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 800806e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	break;
 8008074:	e029      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 800807c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
	break;
 8008082:	e022      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 800808a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
	break;
 8008090:	e01b      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 8008098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
	break;
 800809e:	e014      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 80080a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
	break;
 80080ac:	e00d      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 80080b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
	break;
 80080ba:	e006      	b.n	80080ca <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80080c2:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80080c4:	23fc      	movs	r3, #252	@ 0xfc
 80080c6:	77fb      	strb	r3, [r7, #31]
	break;
 80080c8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80080ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3724      	adds	r7, #36	@ 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop

080080dc <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3318      	adds	r3, #24
 80080ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80080fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3318      	adds	r3, #24
 800811a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 8008128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3318      	adds	r3, #24
 8008148:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8008156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3318      	adds	r3, #24
 8008176:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8008184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3318      	adds	r3, #24
 80081a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 80081b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3318      	adds	r3, #24
 80081d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 80081e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2208      	movs	r2, #8
 8008200:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	220b      	movs	r2, #11
 8008206:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800820e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8008216:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800821e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008226:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2212      	movs	r2, #18
 800824e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	220f      	movs	r2, #15
 8008254:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2202      	movs	r2, #2
 800825a:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8008262:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220c      	movs	r2, #12
 8008268:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800826a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	895b      	ldrh	r3, [r3, #10]
 800828c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	895b      	ldrh	r3, [r3, #10]
 80082aa:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2200      	movs	r2, #0
 80082ce:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2240      	movs	r2, #64	@ 0x40
 80082d4:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2200      	movs	r2, #0
 80082f6:	741a      	strb	r2, [r3, #16]
 80082f8:	e002      	b.n	8008300 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8008300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d114      	bne.n	8008332 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800830c:	2b01      	cmp	r3, #1
 800830e:	d110      	bne.n	8008332 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	7d9b      	ldrb	r3, [r3, #22]
 8008324:	f001 ff94 	bl	800a250 <VL53LX_calc_range_ignore_threshold>
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	831a      	strh	r2, [r3, #24]
 8008330:	e002      	b.n	8008338 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800833e:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2232      	movs	r2, #50	@ 0x32
 8008344:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800834c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	228c      	movs	r2, #140	@ 0x8c
 8008352:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008372:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800837a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2207      	movs	r2, #7
 8008380:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8008388:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008390:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8008398:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2246      	movs	r2, #70	@ 0x46
 800839e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80083a6:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	228c      	movs	r2, #140	@ 0x8c
 80083ac:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80083ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80083d0:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80083d8:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80083e0:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80083e8:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2208      	movs	r2, #8
 80083ee:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2228      	movs	r2, #40	@ 0x28
 80083f4:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2209      	movs	r2, #9
 80083fa:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80083fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800841e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8008426:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800842e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008436:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2210      	movs	r2, #16
 800843c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2208      	movs	r2, #8
 8008442:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2204      	movs	r2, #4
 8008468:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2201      	movs	r2, #1
 800846e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2201      	movs	r2, #1
 8008474:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2202      	movs	r2, #2
 800847a:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2250      	movs	r2, #80	@ 0x50
 8008486:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2264      	movs	r2, #100	@ 0x64
 800848c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	f241 023d 	movw	r2, #4157	@ 0x103d
 8008494:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2210      	movs	r2, #16
 800849a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2232      	movs	r2, #50	@ 0x32
 80084a0:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2264      	movs	r2, #100	@ 0x64
 80084a6:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2201      	movs	r2, #1
 80084ac:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	22b4      	movs	r2, #180	@ 0xb4
 80084b2:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2200      	movs	r2, #0
 80084b8:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 80084c0:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2208      	movs	r2, #8
 80084c6:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2288      	movs	r2, #136	@ 0x88
 80084ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2208      	movs	r2, #8
 80084d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084e8:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2200      	movs	r2, #0
 80084ee:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	79fa      	ldrb	r2, [r7, #7]
 80084f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 80084fe:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2232      	movs	r2, #50	@ 0x32
 8008504:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800850c:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	228c      	movs	r2, #140	@ 0x8c
 8008512:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2250      	movs	r2, #80	@ 0x50
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2232      	movs	r2, #50	@ 0x32
 8008520:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8008522:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	221e      	movs	r2, #30
 8008542:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	220e      	movs	r2, #14
 8008548:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8008550:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	220e      	movs	r2, #14
 8008556:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	220a      	movs	r2, #10
 800855c:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2206      	movs	r2, #6
 8008562:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220e      	movs	r2, #14
 8008568:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	220a      	movs	r2, #10
 800856e:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2206      	movs	r2, #6
 8008574:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2209      	movs	r2, #9
 800857a:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2205      	movs	r2, #5
 8008580:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2203      	movs	r2, #3
 8008586:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2206      	movs	r2, #6
 800858c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2206      	movs	r2, #6
 8008592:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2206      	movs	r2, #6
 8008598:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2221      	movs	r2, #33	@ 0x21
 80085a4:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	223c      	movs	r2, #60	@ 0x3c
 80085b6:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	223c      	movs	r2, #60	@ 0x3c
 80085bc:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	223c      	movs	r2, #60	@ 0x3c
 80085c2:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2280      	movs	r2, #128	@ 0x80
 80085c8:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2280      	movs	r2, #128	@ 0x80
 80085ce:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2280      	movs	r2, #128	@ 0x80
 80085d4:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2208      	movs	r2, #8
 80085da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2210      	movs	r2, #16
 80085e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2202      	movs	r2, #2
 8008602:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800861c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f640 22be 	movw	r2, #2750	@ 0xabe
 8008626:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	22fa      	movs	r2, #250	@ 0xfa
 800862e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008638:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8008642:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800864c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8008656:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8008660:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f64f 7238 	movw	r2, #65336	@ 0xff38
 800866a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	22c8      	movs	r2, #200	@ 0xc8
 8008672:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f640 1238 	movw	r2, #2360	@ 0x938
 800867c:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f640 1247 	movw	r2, #2375	@ 0x947
 800868e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f640 4235 	movw	r2, #3125	@ 0xc35
 8008698:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f241 2270 	movw	r2, #4720	@ 0x1270
 80086a2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f640 429e 	movw	r2, #3230	@ 0xc9e
 80086ac:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f241 228e 	movw	r2, #4750	@ 0x128e
 80086b6:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 80086c0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	22fa      	movs	r2, #250	@ 0xfa
 80086d8:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80086e2:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 80086ec:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f241 1294 	movw	r2, #4500	@ 0x1194
 80086f6:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8008700:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	22c8      	movs	r2, #200	@ 0xc8
 8008708:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8008732:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800873c:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8008746:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8008788:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8008790:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008798:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80087a0:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087a8:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80087b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80087b8:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80087c0:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80087c8:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f242 3228 	movw	r2, #9000	@ 0x2328
 80087d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f241 7270 	movw	r2, #6000	@ 0x1770
 80087d8:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087e0:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80087e8:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80087f0:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80087f8:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008800:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8008808:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008810:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008818:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8008820:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800882e:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008836:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2206      	movs	r2, #6
 8008856:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800885a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800887c:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2238      	movs	r2, #56	@ 0x38
 8008882:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2270      	movs	r2, #112	@ 0x70
 800888e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2210      	movs	r2, #16
 8008894:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2264      	movs	r2, #100	@ 0x64
 800889a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088a2:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	220f      	movs	r2, #15
 80088a8:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2234      	movs	r2, #52	@ 0x34
 80088ae:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	22c8      	movs	r2, #200	@ 0xc8
 80088b4:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80088bc:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80088c4:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80088c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b087      	sub	sp, #28
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80088ee:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2211      	movs	r2, #17
 8008930:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2202      	movs	r2, #2
 8008936:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2202      	movs	r2, #2
 8008942:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2208      	movs	r2, #8
 8008948:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008966:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	22ff      	movs	r2, #255	@ 0xff
 800898a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800898c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	220b      	movs	r2, #11
 80089c4:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220d      	movs	r2, #13
 80089d8:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089dc:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8008a00:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2238      	movs	r2, #56	@ 0x38
 8008a0c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	22ff      	movs	r2, #255	@ 0xff
 8008a12:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	221a      	movs	r2, #26
 8008a24:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2201      	movs	r2, #1
 8008a36:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	22cc      	movs	r2, #204	@ 0xcc
 8008a3c:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	220b      	movs	r2, #11
 8008a42:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2201      	movs	r2, #1
 8008a48:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	22f5      	movs	r2, #245	@ 0xf5
 8008a4e:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2209      	movs	r2, #9
 8008a54:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2278      	movs	r2, #120	@ 0x78
 8008a70:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2200      	movs	r2, #0
 8008a76:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2207      	movs	r2, #7
 8008a82:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2221      	movs	r2, #33	@ 0x21
 8008a88:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2243      	movs	r2, #67	@ 0x43
 8008a8e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2210      	movs	r2, #16
 8008a94:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2232      	movs	r2, #50	@ 0x32
 8008a9a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2254      	movs	r2, #84	@ 0x54
 8008aa0:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2207      	movs	r2, #7
 8008aa6:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2221      	movs	r2, #33	@ 0x21
 8008aac:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2243      	movs	r2, #67	@ 0x43
 8008ab2:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2202      	movs	r2, #2
 8008abe:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2243      	movs	r2, #67	@ 0x43
 8008ac4:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2205      	movs	r2, #5
 8008aca:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2221      	movs	r2, #33	@ 0x21
 8008adc:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2243      	movs	r2, #67	@ 0x43
 8008ae2:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2232      	movs	r2, #50	@ 0x32
 8008aee:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2254      	movs	r2, #84	@ 0x54
 8008af4:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008afc:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b04:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8008b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0e:	2205      	movs	r2, #5
 8008b10:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b14:	2200      	movs	r2, #0
 8008b16:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	220f      	movs	r2, #15
 8008b1c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b20:	220f      	movs	r2, #15
 8008b22:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	2208      	movs	r2, #8
 8008b28:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	2201      	movs	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	2200      	movs	r2, #0
 8008b46:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	220b      	movs	r2, #11
 8008b56:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2209      	movs	r2, #9
 8008b5c:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b60:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b68:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	2201      	movs	r2, #1
 8008b72:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	22c7      	movs	r2, #199	@ 0xc7
 8008b8c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	22ff      	movs	r2, #255	@ 0xff
 8008b92:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	22db      	movs	r2, #219	@ 0xdb
 8008b98:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	2201      	movs	r2, #1
 8008baa:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	2201      	movs	r2, #1
 8008bb0:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	2221      	movs	r2, #33	@ 0x21
 8008bb6:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	@ 0x40
 8008bcc:	af0a      	add	r7, sp, #40	@ 0x28
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	68b8      	ldr	r0, [r7, #8]
 8008bf2:	f7ff fe70 	bl	80088d6 <VL53LX_preset_mode_standard_ranging>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d171      	bne.n	8008ce6 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008c08:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	9308      	str	r3, [sp, #32]
 8008c0e:	2305      	movs	r3, #5
 8008c10:	9307      	str	r3, [sp, #28]
 8008c12:	2304      	movs	r3, #4
 8008c14:	9306      	str	r3, [sp, #24]
 8008c16:	2303      	movs	r3, #3
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	2300      	movs	r3, #0
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	2304      	movs	r3, #4
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2302      	movs	r3, #2
 8008c30:	2201      	movs	r2, #1
 8008c32:	2100      	movs	r1, #0
 8008c34:	2007      	movs	r0, #7
 8008c36:	f000 ff9f 	bl	8009b78 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	3302      	adds	r3, #2
 8008c3e:	9308      	str	r3, [sp, #32]
 8008c40:	2305      	movs	r3, #5
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	2304      	movs	r3, #4
 8008c46:	9306      	str	r3, [sp, #24]
 8008c48:	2303      	movs	r3, #3
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	2301      	movs	r3, #1
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	2300      	movs	r3, #0
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	2304      	movs	r3, #4
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2302      	movs	r3, #2
 8008c62:	2201      	movs	r2, #1
 8008c64:	2100      	movs	r1, #0
 8008c66:	2007      	movs	r0, #7
 8008c68:	f001 f816 	bl	8009c98 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	2209      	movs	r2, #9
 8008c70:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	220b      	movs	r2, #11
 8008c76:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	2209      	movs	r2, #9
 8008c7c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	220b      	movs	r2, #11
 8008c82:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	2200      	movs	r2, #0
 8008c94:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	221a      	movs	r2, #26
 8008c9a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2228      	movs	r2, #40	@ 0x28
 8008ca6:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	2200      	movs	r2, #0
 8008cac:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	2221      	movs	r2, #33	@ 0x21
 8008cb2:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	22f5      	movs	r2, #245	@ 0xf5
 8008cb8:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2288      	movs	r2, #136	@ 0x88
 8008cc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f9e6 	bl	80090a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	229b      	movs	r2, #155	@ 0x9b
 8008cde:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2226      	movs	r2, #38	@ 0x26
 8008ce4:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b090      	sub	sp, #64	@ 0x40
 8008cf6:	af0a      	add	r7, sp, #40	@ 0x28
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff ff52 	bl	8008bc8 <VL53LX_preset_mode_histogram_ranging>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d178      	bne.n	8008e22 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	9308      	str	r3, [sp, #32]
 8008d34:	2305      	movs	r3, #5
 8008d36:	9307      	str	r3, [sp, #28]
 8008d38:	2304      	movs	r3, #4
 8008d3a:	9306      	str	r3, [sp, #24]
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	9305      	str	r3, [sp, #20]
 8008d40:	2302      	movs	r3, #2
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	2301      	movs	r3, #1
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9302      	str	r3, [sp, #8]
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	2303      	movs	r3, #3
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2302      	movs	r3, #2
 8008d56:	2201      	movs	r2, #1
 8008d58:	2100      	movs	r1, #0
 8008d5a:	2007      	movs	r0, #7
 8008d5c:	f000 ff0c 	bl	8009b78 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	3302      	adds	r3, #2
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	2305      	movs	r3, #5
 8008d68:	9307      	str	r3, [sp, #28]
 8008d6a:	2304      	movs	r3, #4
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	2303      	movs	r3, #3
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	2302      	movs	r3, #2
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	2301      	movs	r3, #1
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	2304      	movs	r3, #4
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	2303      	movs	r3, #3
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2302      	movs	r3, #2
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	2007      	movs	r0, #7
 8008d8e:	f000 ff83 	bl	8009c98 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f982 	bl	80090a6 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	2209      	movs	r2, #9
 8008da6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	220b      	movs	r2, #11
 8008dac:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	2221      	movs	r2, #33	@ 0x21
 8008db8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	221b      	movs	r2, #27
 8008dc4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	2229      	movs	r2, #41	@ 0x29
 8008dd0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	2222      	movs	r2, #34	@ 0x22
 8008ddc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2209      	movs	r2, #9
 8008de2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	22f5      	movs	r2, #245	@ 0xf5
 8008de8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	2209      	movs	r2, #9
 8008dee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	220b      	movs	r2, #11
 8008df4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8008df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df8:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2208      	movs	r2, #8
 8008e0a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2288      	movs	r2, #136	@ 0x88
 8008e12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	229b      	movs	r2, #155	@ 0x9b
 8008e1a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	2226      	movs	r2, #38	@ 0x26
 8008e20:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b090      	sub	sp, #64	@ 0x40
 8008e32:	af0a      	add	r7, sp, #40	@ 0x28
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff feb4 	bl	8008bc8 <VL53LX_preset_mode_histogram_ranging>
 8008e60:	4603      	mov	r3, r0
 8008e62:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d178      	bne.n	8008f5e <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	2303      	movs	r3, #3
 8008e72:	9307      	str	r3, [sp, #28]
 8008e74:	2302      	movs	r3, #2
 8008e76:	9306      	str	r3, [sp, #24]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	2301      	movs	r3, #1
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	2300      	movs	r3, #0
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	2302      	movs	r3, #2
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	2301      	movs	r3, #1
 8008e92:	2201      	movs	r2, #1
 8008e94:	2100      	movs	r1, #0
 8008e96:	2007      	movs	r0, #7
 8008e98:	f000 fe6e 	bl	8009b78 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	9307      	str	r3, [sp, #28]
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	9306      	str	r3, [sp, #24]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	2302      	movs	r3, #2
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9302      	str	r3, [sp, #8]
 8008eba:	2302      	movs	r3, #2
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	2007      	movs	r0, #7
 8008eca:	f000 fee5 	bl	8009c98 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8e4 	bl	80090a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	2207      	movs	r2, #7
 8008ee8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	2236      	movs	r2, #54	@ 0x36
 8008ef4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	2228      	movs	r2, #40	@ 0x28
 8008f00:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	2200      	movs	r2, #0
 8008f06:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	2244      	movs	r2, #68	@ 0x44
 8008f0c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	2200      	movs	r2, #0
 8008f12:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	2233      	movs	r2, #51	@ 0x33
 8008f18:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	22f5      	movs	r2, #245	@ 0xf5
 8008f24:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	2205      	movs	r2, #5
 8008f2a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	2207      	movs	r2, #7
 8008f30:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8008f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f38:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2208      	movs	r2, #8
 8008f46:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2248      	movs	r2, #72	@ 0x48
 8008f4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	229b      	movs	r2, #155	@ 0x9b
 8008f56:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	2226      	movs	r2, #38	@ 0x26
 8008f5c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b090      	sub	sp, #64	@ 0x40
 8008f6e:	af0a      	add	r7, sp, #40	@ 0x28
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	9302      	str	r3, [sp, #8]
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fe16 	bl	8008bc8 <VL53LX_preset_mode_histogram_ranging>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8008fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d178      	bne.n	800909a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	2302      	movs	r3, #2
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	9306      	str	r3, [sp, #24]
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	9303      	str	r3, [sp, #12]
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9302      	str	r3, [sp, #8]
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	2301      	movs	r3, #1
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2107      	movs	r1, #7
 8008fd2:	2007      	movs	r0, #7
 8008fd4:	f000 fdd0 	bl	8009b78 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	3302      	adds	r3, #2
 8008fdc:	9308      	str	r3, [sp, #32]
 8008fde:	2302      	movs	r3, #2
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	9306      	str	r3, [sp, #24]
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	2301      	movs	r3, #1
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2301      	movs	r3, #1
 8009000:	2200      	movs	r2, #0
 8009002:	2107      	movs	r1, #7
 8009004:	2007      	movs	r0, #7
 8009006:	f000 fe47 	bl	8009c98 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f846 	bl	80090a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	2203      	movs	r2, #3
 800901e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2205      	movs	r2, #5
 8009024:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	2252      	movs	r2, #82	@ 0x52
 8009030:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	2200      	movs	r2, #0
 8009036:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	2237      	movs	r2, #55	@ 0x37
 800903c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	2200      	movs	r2, #0
 8009042:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	2266      	movs	r2, #102	@ 0x66
 8009048:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	2200      	movs	r2, #0
 800904e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2244      	movs	r2, #68	@ 0x44
 8009054:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2203      	movs	r2, #3
 800905a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	22f5      	movs	r2, #245	@ 0xf5
 8009060:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	2203      	movs	r2, #3
 8009066:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	2205      	movs	r2, #5
 800906c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009070:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009078:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2208      	movs	r2, #8
 8009082:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2228      	movs	r2, #40	@ 0x28
 800908a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	22bb      	movs	r2, #187	@ 0xbb
 8009092:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	2226      	movs	r2, #38	@ 0x26
 8009098:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800909a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	60f8      	str	r0, [r7, #12]
 80090ae:	60b9      	str	r1, [r7, #8]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	7a12      	ldrb	r2, [r2, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	7892      	ldrb	r2, [r2, #2]
 8009134:	4413      	add	r3, r2
 8009136:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	7912      	ldrb	r2, [r2, #4]
 8009148:	4413      	add	r3, r2
 800914a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	7a12      	ldrb	r2, [r2, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	7892      	ldrb	r2, [r2, #2]
 8009208:	4413      	add	r3, r2
 800920a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	7912      	ldrb	r2, [r2, #4]
 800921c:	4413      	add	r3, r2
 800921e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3318      	adds	r3, #24
 800924c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3318      	adds	r3, #24
 8009288:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	332c      	adds	r3, #44	@ 0x2c
 800928e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2200      	movs	r2, #0
 800929a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2202      	movs	r2, #2
 80092a0:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2200      	movs	r2, #0
 80092a6:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2200      	movs	r2, #0
 80092b8:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2202      	movs	r2, #2
 80092be:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	735a      	strb	r2, [r3, #13]

}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3318      	adds	r3, #24
 80092e8:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	332c      	adds	r3, #44	@ 0x2c
 80092ee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80092f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d115      	bne.n	800932a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2203      	movs	r2, #3
 8009302:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2202      	movs	r2, #2
 800931a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	735a      	strb	r2, [r3, #13]
 8009328:	e0be      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	7a1b      	ldrb	r3, [r3, #8]
 800932e:	2bff      	cmp	r3, #255	@ 0xff
 8009330:	d103      	bne.n	800933a <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2280      	movs	r2, #128	@ 0x80
 8009336:	721a      	strb	r2, [r3, #8]
 8009338:	e005      	b.n	8009346 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	7a1b      	ldrb	r3, [r3, #8]
 800933e:	3301      	adds	r3, #1
 8009340:	b2da      	uxtb	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	7a19      	ldrb	r1, [r3, #8]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f103 0209 	add.w	r2, r3, #9
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	330a      	adds	r3, #10
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f002 fdba 	bl	800bece <VL53LX_update_internal_stream_counters>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	7adb      	ldrb	r3, [r3, #11]
 8009362:	f083 0302 	eor.w	r3, r3, #2
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	79db      	ldrb	r3, [r3, #7]
 8009370:	3b03      	subs	r3, #3
 8009372:	2b05      	cmp	r3, #5
 8009374:	f200 8082 	bhi.w	800947c <VL53LX_update_ll_driver_rd_state+0x1a4>
 8009378:	a201      	add	r2, pc, #4	@ (adr r2, 8009380 <VL53LX_update_ll_driver_rd_state+0xa8>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009399 	.word	0x08009399
 8009384:	0800947d 	.word	0x0800947d
 8009388:	0800947d 	.word	0x0800947d
 800938c:	080093eb 	.word	0x080093eb
 8009390:	08009421 	.word	0x08009421
 8009394:	0800944b 	.word	0x0800944b

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dd03      	ble.n	80093ae <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2206      	movs	r2, #6
 80093aa:	71da      	strb	r2, [r3, #7]
 80093ac:	e00d      	b.n	80093ca <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d303      	bcc.n	80093c4 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2208      	movs	r2, #8
 80093c0:	71da      	strb	r2, [r3, #7]
 80093c2:	e002      	b.n	80093ca <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2207      	movs	r2, #7
 80093c8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	735a      	strb	r2, [r3, #13]

			break;
 80093e8:	e05e      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 800940c:	429a      	cmp	r2, r3
 800940e:	d303      	bcc.n	8009418 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2208      	movs	r2, #8
 8009414:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8009416:	e047      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2207      	movs	r2, #7
 800941c:	71da      	strb	r2, [r3, #7]
			break;
 800941e:	e043      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	7b5b      	ldrb	r3, [r3, #13]
 8009424:	3301      	adds	r3, #1
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8009436:	429a      	cmp	r2, r3
 8009438:	d303      	bcc.n	8009442 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2208      	movs	r2, #8
 800943e:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8009440:	e032      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2207      	movs	r2, #7
 8009446:	71da      	strb	r2, [r3, #7]
			break;
 8009448:	e02e      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	7b1b      	ldrb	r3, [r3, #12]
 8009454:	f083 0301 	eor.w	r3, r3, #1
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8009468:	429a      	cmp	r2, r3
 800946a:	d303      	bcc.n	8009474 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2208      	movs	r2, #8
 8009470:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8009472:	e019      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2207      	movs	r2, #7
 8009478:	71da      	strb	r2, [r3, #7]
			break;
 800947a:	e015      	b.n	80094a8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2203      	movs	r2, #3
 8009480:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2202      	movs	r2, #2
 8009498:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	735a      	strb	r2, [r3, #13]
			break;
 80094a6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 80094a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b08d      	sub	sp, #52	@ 0x34
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80094bc:	2300      	movs	r3, #0
 80094be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3318      	adds	r3, #24
 80094c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	332c      	adds	r3, #44	@ 0x2c
 80094d4:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	f203 3366 	addw	r3, r3, #870	@ 0x366
 80094dc:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80094e4:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80094ec:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800950c:	f003 031f 	and.w	r3, r3, #31
 8009510:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	78db      	ldrb	r3, [r3, #3]
 8009516:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800951e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8009522:	2b00      	cmp	r3, #0
 8009524:	bf14      	ite	ne
 8009526:	2301      	movne	r3, #1
 8009528:	2300      	moveq	r3, #0
 800952a:	b2db      	uxtb	r3, r3
	histogram_mode =
 800952c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8009532:	111b      	asrs	r3, r3, #4
 8009534:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 800953e:	7c7b      	ldrb	r3, [r7, #17]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800954a:	111b      	asrs	r3, r3, #4
 800954c:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d04e      	beq.n	8009602 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	79db      	ldrb	r3, [r3, #7]
 8009568:	2b06      	cmp	r3, #6
 800956a:	d109      	bne.n	8009580 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800956c:	7c7b      	ldrb	r3, [r7, #17]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d14a      	bne.n	8009608 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8009572:	7cfb      	ldrb	r3, [r7, #19]
 8009574:	2b12      	cmp	r3, #18
 8009576:	d047      	beq.n	8009608 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8009578:	23ef      	movs	r3, #239	@ 0xef
 800957a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800957e:	e043      	b.n	8009608 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	7a1b      	ldrb	r3, [r3, #8]
 8009584:	7cba      	ldrb	r2, [r7, #18]
 8009586:	429a      	cmp	r2, r3
 8009588:	d002      	beq.n	8009590 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 800958a:	23ee      	movs	r3, #238	@ 0xee
 800958c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	7adb      	ldrb	r3, [r3, #11]
 8009594:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8009598:	429a      	cmp	r2, r3
 800959a:	d002      	beq.n	80095a2 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 800959c:	23ed      	movs	r3, #237	@ 0xed
 800959e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	7b5b      	ldrb	r3, [r3, #13]
 80095a6:	4619      	mov	r1, r3
		expected_stream_count =
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	460b      	mov	r3, r1
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4413      	add	r3, r2
 80095b4:	3302      	adds	r3, #2
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	7b5b      	ldrb	r3, [r3, #13]
 80095be:	4619      	mov	r1, r3
		expected_gph_id =
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	460b      	mov	r3, r1
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4413      	add	r3, r2
 80095cc:	3303      	adds	r3, #3
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 80095d2:	7c3a      	ldrb	r2, [r7, #16]
 80095d4:	7cbb      	ldrb	r3, [r7, #18]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d00a      	beq.n	80095f0 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <VL53LX_check_ll_driver_rd_state+0x136>
 80095e4:	7cbb      	ldrb	r3, [r7, #18]
 80095e6:	2bff      	cmp	r3, #255	@ 0xff
 80095e8:	d002      	beq.n	80095f0 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 80095ea:	23ec      	movs	r3, #236	@ 0xec
 80095ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d005      	beq.n	8009606 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80095fa:	23eb      	movs	r3, #235	@ 0xeb
 80095fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009600:	e002      	b.n	8009608 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8009602:	bf00      	nop
 8009604:	e000      	b.n	8009608 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8009606:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8009608:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800960c:	4618      	mov	r0, r3
 800960e:	3734      	adds	r7, #52	@ 0x34
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8009620:	2300      	movs	r3, #0
 8009622:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3318      	adds	r3, #24
 8009628:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009630:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	332c      	adds	r3, #44	@ 0x2c
 8009636:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800963e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8009646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d11b      	bne.n	8009686 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2203      	movs	r2, #3
 8009652:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2200      	movs	r2, #0
 8009658:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2200      	movs	r2, #0
 800965e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	2200      	movs	r2, #0
 8009664:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2202      	movs	r2, #2
 800966a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2200      	movs	r2, #0
 8009670:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2200      	movs	r2, #0
 8009676:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	773b      	strb	r3, [r7, #28]
 8009684:	e0b1      	b.n	80097ea <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	791b      	ldrb	r3, [r3, #4]
 800968a:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	799b      	ldrb	r3, [r3, #6]
 8009690:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2bff      	cmp	r3, #255	@ 0xff
 800969e:	d103      	bne.n	80096a8 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2280      	movs	r2, #128	@ 0x80
 80096a4:	705a      	strb	r2, [r3, #1]
 80096a6:	e005      	b.n	80096b4 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	3301      	adds	r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	7859      	ldrb	r1, [r3, #1]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	1c9a      	adds	r2, r3, #2
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	3303      	adds	r3, #3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f002 fc04 	bl	800bece <VL53LX_update_internal_stream_counters>
 80096c6:	4603      	mov	r3, r0
 80096c8:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	791b      	ldrb	r3, [r3, #4]
 80096ce:	f083 0302 	eor.w	r3, r3, #2
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b05      	cmp	r3, #5
 80096de:	d053      	beq.n	8009788 <VL53LX_update_ll_driver_cfg_state+0x170>
 80096e0:	2b05      	cmp	r3, #5
 80096e2:	dc69      	bgt.n	80097b8 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d002      	beq.n	80096ee <VL53LX_update_ll_driver_cfg_state+0xd6>
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d02d      	beq.n	8009748 <VL53LX_update_ll_driver_cfg_state+0x130>
 80096ec:	e064      	b.n	80097b8 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2201      	movs	r2, #1
 80096f2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 80096fe:	429a      	cmp	r2, r3
 8009700:	d909      	bls.n	8009716 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2200      	movs	r2, #0
 8009706:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	795b      	ldrb	r3, [r3, #5]
 800970c:	f083 0301 	eor.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2201      	movs	r2, #1
 800971a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2201      	movs	r2, #1
 800972a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2200      	movs	r2, #0
 8009730:	70da      	strb	r2, [r3, #3]
 8009732:	e005      	b.n	8009740 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2200      	movs	r2, #0
 8009738:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2201      	movs	r2, #1
 800973e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2204      	movs	r2, #4
 8009744:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8009746:	e050      	b.n	80097ea <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	799b      	ldrb	r3, [r3, #6]
 800974c:	3301      	adds	r3, #1
 800974e:	b2da      	uxtb	r2, r3
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 800975e:	429a      	cmp	r2, r3
 8009760:	d940      	bls.n	80097e4 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2200      	movs	r2, #0
 8009766:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	795b      	ldrb	r3, [r3, #5]
 800976c:	f083 0301 	eor.w	r3, r3, #1
 8009770:	b2da      	uxtb	r2, r3
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d031      	beq.n	80097e4 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2205      	movs	r2, #5
 8009784:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8009786:	e02d      	b.n	80097e4 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	799b      	ldrb	r3, [r3, #6]
 800978c:	3301      	adds	r3, #1
 800978e:	b2da      	uxtb	r2, r3
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 800979e:	429a      	cmp	r2, r3
 80097a0:	d922      	bls.n	80097e8 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2200      	movs	r2, #0
 80097a6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	795b      	ldrb	r3, [r3, #5]
 80097ac:	f083 0301 	eor.w	r3, r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	715a      	strb	r2, [r3, #5]
			}
			break;
 80097b6:	e017      	b.n	80097e8 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2203      	movs	r2, #3
 80097bc:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2200      	movs	r2, #0
 80097c2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2200      	movs	r2, #0
 80097c8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2200      	movs	r2, #0
 80097ce:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2202      	movs	r2, #2
 80097d4:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2200      	movs	r2, #0
 80097da:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2200      	movs	r2, #0
 80097e0:	719a      	strb	r2, [r3, #6]
			break;
 80097e2:	e002      	b.n	80097ea <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 80097e4:	bf00      	nop
 80097e6:	e000      	b.n	80097ea <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 80097e8:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11d      	bne.n	8009830 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 80097f4:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 80097f6:	7f3b      	ldrb	r3, [r7, #28]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b2d8      	uxtb	r0, r3
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	440b      	add	r3, r1
 8009808:	3302      	adds	r3, #2
 800980a:	4602      	mov	r2, r0
 800980c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	7b5b      	ldrb	r3, [r3, #13]
 8009812:	4619      	mov	r1, r3
 8009814:	7f7b      	ldrb	r3, [r7, #29]
 8009816:	f083 0302 	eor.w	r3, r3, #2
 800981a:	b2d8      	uxtb	r0, r3
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	460b      	mov	r3, r1
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	4413      	add	r3, r2
 8009828:	3303      	adds	r3, #3
 800982a:	4602      	mov	r2, r0
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e013      	b.n	8009858 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8009830:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	440b      	add	r3, r1
 800983e:	3302      	adds	r3, #2
 8009840:	7f3a      	ldrb	r2, [r7, #28]
 8009842:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8009844:	7fba      	ldrb	r2, [r7, #30]
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	440b      	add	r3, r1
 8009852:	3303      	adds	r3, #3
 8009854:	7f7a      	ldrb	r2, [r7, #29]
 8009856:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8009858:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7c1a      	ldrb	r2, [r3, #16]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	7c52      	ldrb	r2, [r2, #17]
 800987e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	3302      	adds	r3, #2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c92      	ldrb	r2, [r2, #18]
 8009888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	3303      	adds	r3, #3
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	7cd2      	ldrb	r2, [r2, #19]
 8009892:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	3304      	adds	r3, #4
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	7d12      	ldrb	r2, [r2, #20]
 800989c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	3305      	adds	r3, #5
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	7d52      	ldrb	r2, [r2, #21]
 80098a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	3306      	adds	r3, #6
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7d92      	ldrb	r2, [r2, #22]
 80098b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	3307      	adds	r3, #7
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	7dd2      	ldrb	r2, [r2, #23]
 80098ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	7e12      	ldrb	r2, [r2, #24]
 80098c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	3309      	adds	r3, #9
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	7e52      	ldrb	r2, [r2, #25]
 80098ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	330a      	adds	r3, #10
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7e92      	ldrb	r2, [r2, #26]
 80098d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	330b      	adds	r3, #11
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	7ed2      	ldrb	r2, [r2, #27]
 80098e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7f12      	ldrb	r2, [r2, #28]
 80098ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	330d      	adds	r3, #13
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	7f52      	ldrb	r2, [r2, #29]
 80098f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	330e      	adds	r3, #14
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7f92      	ldrb	r2, [r2, #30]
 8009900:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	330f      	adds	r3, #15
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	7fd2      	ldrb	r2, [r2, #31]
 800990a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	3310      	adds	r3, #16
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009916:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	3311      	adds	r3, #17
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8009922:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	3312      	adds	r3, #18
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800992e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	3313      	adds	r3, #19
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800993a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	3314      	adds	r3, #20
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009946:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3315      	adds	r3, #21
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8009952:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	3316      	adds	r3, #22
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 800995e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	3317      	adds	r3, #23
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800996a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	3318      	adds	r3, #24
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8009976:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3319      	adds	r3, #25
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8009982:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	331a      	adds	r3, #26
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 800998e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	331b      	adds	r3, #27
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800999a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	331c      	adds	r3, #28
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80099a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	331d      	adds	r3, #29
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80099b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	331e      	adds	r3, #30
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80099be:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	331f      	adds	r3, #31
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80099ca:	701a      	strb	r2, [r3, #0]
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	22ff      	movs	r2, #255	@ 0xff
 80099e4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	22ff      	movs	r2, #255	@ 0xff
 80099ea:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	22ff      	movs	r2, #255	@ 0xff
 80099f0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	22ff      	movs	r2, #255	@ 0xff
 80099f6:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099fe:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a06:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a0e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a16:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a1e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a26:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a2e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a36:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a3e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a46:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a4e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a56:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a5e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a66:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a6e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a76:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a7e:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a86:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	22ff      	movs	r2, #255	@ 0xff
 8009a94:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	79fa      	ldrb	r2, [r7, #7]
 8009abe:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
 8009ac4:	e017      	b.n	8009af6 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8009ac6:	7bfa      	ldrb	r2, [r7, #15]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2203      	movs	r2, #3
 8009adc:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2203      	movs	r2, #3
 8009ae2:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2204      	movs	r2, #4
 8009ae8:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2200      	movs	r2, #0
 8009aee:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	3301      	adds	r3, #1
 8009af4:	73fb      	strb	r3, [r7, #15]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	7bfa      	ldrb	r2, [r7, #15]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d3e2      	bcc.n	8009ac6 <V53L1_init_zone_results_structure+0x22>
	}
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b087      	sub	sp, #28
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009b1c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8009b22:	2305      	movs	r3, #5
 8009b24:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009b2c:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75fb      	strb	r3, [r7, #23]
 8009b32:	e016      	b.n	8009b62 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8009b34:	7dfa      	ldrb	r2, [r7, #23]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	440b      	add	r3, r1
 8009b42:	3304      	adds	r3, #4
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8009b48:	7dfa      	ldrb	r2, [r7, #23]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	440b      	add	r3, r1
 8009b56:	3306      	adds	r3, #6
 8009b58:	2200      	movs	r2, #0
 8009b5a:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	75fb      	strb	r3, [r7, #23]
 8009b62:	7dfa      	ldrb	r2, [r7, #23]
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3e4      	bcc.n	8009b34 <V53L1_init_zone_dss_configs+0x26>
	}
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8009b78:	b490      	push	{r4, r7}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	4611      	mov	r1, r2
 8009b84:	461a      	mov	r2, r3
 8009b86:	4623      	mov	r3, r4
 8009b88:	71fb      	strb	r3, [r7, #7]
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71bb      	strb	r3, [r7, #6]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	717b      	strb	r3, [r7, #5]
 8009b92:	4613      	mov	r3, r2
 8009b94:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009b96:	79bb      	ldrb	r3, [r7, #6]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8009ba6:	793b      	ldrb	r3, [r7, #4]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	797b      	ldrb	r3, [r7, #5]
 8009bae:	4413      	add	r3, r2
 8009bb0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009bb6:	7d3b      	ldrb	r3, [r7, #20]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	7c3b      	ldrb	r3, [r7, #16]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8009bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc4:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8009bc6:	7f3b      	ldrb	r3, [r7, #28]
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	7e3b      	ldrb	r3, [r7, #24]
 8009bce:	4413      	add	r3, r2
 8009bd0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8009bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009be2:	4413      	add	r3, r2
 8009be4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8009bea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009c24:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8009c26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c32:	4413      	add	r3, r2
 8009c34:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009c40:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	2200      	movs	r2, #0
 8009c46:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c7e:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8009c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c86:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]

}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bc90      	pop	{r4, r7}
 8009c96:	4770      	bx	lr

08009c98 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8009c98:	b490      	push	{r4, r7}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	71fb      	strb	r3, [r7, #7]
 8009caa:	4603      	mov	r3, r0
 8009cac:	71bb      	strb	r3, [r7, #6]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	717b      	strb	r3, [r7, #5]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8009cb6:	79bb      	ldrb	r3, [r7, #6]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8009cc6:	793b      	ldrb	r3, [r7, #4]
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	797b      	ldrb	r3, [r7, #5]
 8009cce:	4413      	add	r3, r2
 8009cd0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8009cd6:	7d3b      	ldrb	r3, [r7, #20]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	7c3b      	ldrb	r3, [r7, #16]
 8009cde:	4413      	add	r3, r2
 8009ce0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	789a      	ldrb	r2, [r3, #2]
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	78da      	ldrb	r2, [r3, #3]
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	789a      	ldrb	r2, [r3, #2]
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	78da      	ldrb	r2, [r3, #3]
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	791a      	ldrb	r2, [r3, #4]
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009d24:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8009d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d32:	4413      	add	r3, r2
 8009d34:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009d40:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	2200      	movs	r2, #0
 8009d46:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8009d48:	7f3b      	ldrb	r3, [r7, #28]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	7e3b      	ldrb	r3, [r7, #24]
 8009d50:	4413      	add	r3, r2
 8009d52:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8009d58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d64:	4413      	add	r3, r2
 8009d66:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8009d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d70:	011b      	lsls	r3, r3, #4
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d78:	4413      	add	r3, r2
 8009d7a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	7bda      	ldrb	r2, [r3, #15]
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	7c1a      	ldrb	r2, [r3, #16]
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	7c5a      	ldrb	r2, [r3, #17]
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d9e:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009da6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8009da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc90      	pop	{r4, r7}
 8009db6:	4770      	bx	lr

08009db8 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220c      	movs	r2, #12
 8009de0:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8009de2:	897b      	ldrh	r3, [r7, #10]
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8009e18:	2300      	movs	r3, #0
 8009e1a:	82fb      	strh	r3, [r7, #22]
 8009e1c:	e015      	b.n	8009e4a <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8009e1e:	8afa      	ldrh	r2, [r7, #22]
 8009e20:	897b      	ldrh	r3, [r7, #10]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d207      	bcs.n	8009e36 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8009e26:	8afb      	ldrh	r3, [r7, #22]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	605a      	str	r2, [r3, #4]
 8009e34:	e006      	b.n	8009e44 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8009e36:	8afb      	ldrh	r3, [r7, #22]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	3302      	adds	r3, #2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8009e44:	8afb      	ldrh	r3, [r7, #22]
 8009e46:	3301      	adds	r3, #1
 8009e48:	82fb      	strh	r3, [r7, #22]
 8009e4a:	8afb      	ldrh	r3, [r7, #22]
 8009e4c:	2b0b      	cmp	r3, #11
 8009e4e:	d9e6      	bls.n	8009e1e <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	4603      	mov	r3, r0
 8009e66:	603a      	str	r2, [r7, #0]
 8009e68:	80fb      	strh	r3, [r7, #6]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	81fb      	strh	r3, [r7, #14]
 8009e7e:	e00e      	b.n	8009e9e <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009e80:	88ba      	ldrh	r2, [r7, #4]
 8009e82:	89fb      	ldrh	r3, [r7, #14]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	3b01      	subs	r3, #1
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	89ba      	ldrh	r2, [r7, #12]
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8009e92:	89bb      	ldrh	r3, [r7, #12]
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	81fb      	strh	r3, [r7, #14]
 8009e9e:	89fa      	ldrh	r2, [r7, #14]
 8009ea0:	88bb      	ldrh	r3, [r7, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d3ec      	bcc.n	8009e80 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	6039      	str	r1, [r7, #0]
 8009ebe:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8009ec4:	e00a      	b.n	8009edc <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	021b      	lsls	r3, r3, #8
 8009eca:	b21a      	sxth	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	b21b      	sxth	r3, r3
 8009eda:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	1e5a      	subs	r2, r3, #1
 8009ee0:	80fa      	strh	r2, [r7, #6]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1ef      	bne.n	8009ec6 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8009ee6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	603a      	str	r2, [r7, #0]
 8009efe:	80fb      	strh	r3, [r7, #6]
 8009f00:	460b      	mov	r3, r1
 8009f02:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8009f0c:	88fb      	ldrh	r3, [r7, #6]
 8009f0e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8009f10:	2300      	movs	r3, #0
 8009f12:	81fb      	strh	r3, [r7, #14]
 8009f14:	e00f      	b.n	8009f36 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009f16:	88ba      	ldrh	r2, [r7, #4]
 8009f18:	89fb      	ldrh	r3, [r7, #14]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4413      	add	r3, r2
 8009f22:	89ba      	ldrh	r2, [r7, #12]
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8009f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009f2c:	121b      	asrs	r3, r3, #8
 8009f2e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	3301      	adds	r3, #1
 8009f34:	81fb      	strh	r3, [r7, #14]
 8009f36:	89fa      	ldrh	r2, [r7, #14]
 8009f38:	88bb      	ldrh	r3, [r7, #4]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d3eb      	bcc.n	8009f16 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da0e      	bge.n	8009f84 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8009f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f6a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8009f6c:	e00a      	b.n	8009f84 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8009f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	b21a      	sxth	r2, r3
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	1c59      	adds	r1, r3, #1
 8009f7a:	6039      	str	r1, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b21b      	sxth	r3, r3
 8009f80:	4313      	orrs	r3, r2
 8009f82:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	1e5a      	subs	r2, r3, #1
 8009f88:	80fa      	strh	r2, [r7, #6]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1ef      	bne.n	8009f6e <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8009f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b087      	sub	sp, #28
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8009fb8:	2300      	movs	r3, #0
 8009fba:	82fb      	strh	r3, [r7, #22]
 8009fbc:	e00e      	b.n	8009fdc <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8009fbe:	897a      	ldrh	r2, [r7, #10]
 8009fc0:	8afb      	ldrh	r3, [r7, #22]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	4413      	add	r3, r2
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	b2d2      	uxtb	r2, r2
 8009fce:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8009fd6:	8afb      	ldrh	r3, [r7, #22]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	82fb      	strh	r3, [r7, #22]
 8009fdc:	8afa      	ldrh	r2, [r7, #22]
 8009fde:	897b      	ldrh	r3, [r7, #10]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d3ec      	bcc.n	8009fbe <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	6039      	str	r1, [r7, #0]
 8009ffc:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800a002:	e007      	b.n	800a014 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	021a      	lsls	r2, r3, #8
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	6039      	str	r1, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800a014:	88fb      	ldrh	r3, [r7, #6]
 800a016:	1e5a      	subs	r2, r3, #1
 800a018:	80fa      	strh	r2, [r7, #6]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f2      	bne.n	800a004 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800a01e:	68fb      	ldr	r3, [r7, #12]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b25b      	sxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	da0b      	bge.n	800a05e <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800a04c:	e007      	b.n	800a05e <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	021a      	lsls	r2, r3, #8
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	1c59      	adds	r1, r3, #1
 800a056:	6039      	str	r1, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	80fa      	strh	r2, [r7, #6]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1f2      	bne.n	800a04e <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800a068:	68fb      	ldr	r3, [r7, #12]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800a086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d107      	bne.n	800a09e <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	461a      	mov	r2, r3
 800a092:	2127      	movs	r1, #39	@ 0x27
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f009 f8d9 	bl	801324c <VL53LX_WrByte>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2185      	movs	r1, #133	@ 0x85
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f009 f8ba 	bl	801324c <VL53LX_WrByte>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800a0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff ffd7 	bl	800a0aa <VL53LX_set_firmware_enable_register>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800a100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800a118:	2100      	movs	r1, #0
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff ffc5 	bl	800a0aa <VL53LX_set_firmware_enable_register>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800a124:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3318      	adds	r3, #24
 800a144:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 800a154:	461a      	mov	r2, r3
 800a156:	2183      	movs	r1, #131	@ 0x83
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f009 f877 	bl	801324c <VL53LX_WrByte>
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800a162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800a17a:	2101      	movs	r1, #1
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ffd7 	bl	800a130 <VL53LX_set_powerforce_register>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800a186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 800a19e:	2100      	movs	r1, #0
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff ffc5 	bl	800a130 <VL53LX_set_powerforce_register>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800a1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	2186      	movs	r1, #134	@ 0x86
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f009 f836 	bl	801324c <VL53LX_WrByte>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800a1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460a      	mov	r2, r1
 800a1fa:	80fb      	strh	r3, [r7, #6]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	4618      	mov	r0, r3
 800a210:	f002 ffcf 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 800a214:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 800a216:	797b      	ldrb	r3, [r7, #5]
 800a218:	4618      	mov	r0, r3
 800a21a:	f003 fbbb 	bl	800d994 <VL53LX_decode_vcsel_period>
 800a21e:	4603      	mov	r3, r0
 800a220:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4613      	mov	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	4413      	add	r3, r2
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 800a234:	7cfa      	ldrb	r2, [r7, #19]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	fb02 f303 	mul.w	r3, r2, r3
 800a23c:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	099b      	lsrs	r3, r3, #6
 800a242:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800a250:	b480      	push	{r7}
 800a252:	b089      	sub	sp, #36	@ 0x24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4603      	mov	r3, r0
 800a260:	817b      	strh	r3, [r7, #10]
 800a262:	460b      	mov	r3, r1
 800a264:	813b      	strh	r3, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	011b      	lsls	r3, r3, #4
 800a282:	4a23      	ldr	r2, [pc, #140]	@ (800a310 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800a284:	fb82 1203 	smull	r1, r2, r2, r3
 800a288:	1192      	asrs	r2, r2, #6
 800a28a:	17db      	asrs	r3, r3, #31
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800a290:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a294:	2b00      	cmp	r3, #0
 800a296:	da03      	bge.n	800a2a0 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800a298:	897b      	ldrh	r3, [r7, #10]
 800a29a:	425b      	negs	r3, r3
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800a2a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da03      	bge.n	800a2b0 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	425b      	negs	r3, r3
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800a2b0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a2b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	015b      	lsls	r3, r3, #5
 800a2bc:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4a13      	ldr	r2, [pc, #76]	@ (800a310 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800a2c2:	fb82 1203 	smull	r1, r2, r2, r3
 800a2c6:	1192      	asrs	r2, r2, #6
 800a2c8:	17db      	asrs	r3, r3, #31
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800a2d6:	79fa      	ldrb	r2, [r7, #7]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	3310      	adds	r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	da00      	bge.n	800a2ea <VL53LX_calc_range_ignore_threshold+0x9a>
 800a2e8:	331f      	adds	r3, #31
 800a2ea:	115b      	asrs	r3, r3, #5
 800a2ec:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f4:	db03      	blt.n	800a2fe <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800a2f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2fa:	83fb      	strh	r3, [r7, #30]
 800a2fc:	e001      	b.n	800a302 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800a302:	8bfb      	ldrh	r3, [r7, #30]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3724      	adds	r7, #36	@ 0x24
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	10624dd3 	.word	0x10624dd3

0800a314 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e008      	b.n	800a340 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	031a      	lsls	r2, r3, #12
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	441a      	add	r2, r3
		timeout_mclks   =
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800a340:	68fb      	ldr	r3, [r7, #12]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7ff ffd6 	bl	800a314 <VL53LX_calc_timeout_mclks>
 800a368:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f887 	bl	800a47e <VL53LX_encode_timeout>
 800a370:	4603      	mov	r3, r0
 800a372:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800a374:	897b      	ldrh	r3, [r7, #10]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800a37e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800a38a:	2100      	movs	r1, #0
 800a38c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800a38e:	f04f 0000 	mov.w	r0, #0
 800a392:	f04f 0100 	mov.w	r1, #0
 800a396:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	2000      	movs	r0, #0
 800a39e:	4688      	mov	r8, r1
 800a3a0:	4681      	mov	r9, r0
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	fb04 f009 	mul.w	r0, r4, r9
 800a3ae:	fb08 f105 	mul.w	r1, r8, r5
 800a3b2:	4401      	add	r1, r0
 800a3b4:	fba8 2304 	umull	r2, r3, r8, r4
 800a3b8:	4419      	add	r1, r3
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800a3c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800a3c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3c8:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800a3cc:	f143 0b00 	adc.w	fp, r3, #0
 800a3d0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800a3d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3d8:	f04f 0200 	mov.w	r2, #0
 800a3dc:	f04f 0300 	mov.w	r3, #0
 800a3e0:	0b02      	lsrs	r2, r0, #12
 800a3e2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a3e6:	0b0b      	lsrs	r3, r1, #12
 800a3e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800a3f0:	697b      	ldr	r3, [r7, #20]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a3fc:	4770      	bx	lr
	...

0800a400 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800a414:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800a418:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800a41a:	4413      	add	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da02      	bge.n	800a42a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e005      	b.n	800a436 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a430:	db01      	blt.n	800a436 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800a432:	4b05      	ldr	r3, [pc, #20]	@ (800a448 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 800a434:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800a43a:	68bb      	ldr	r3, [r7, #8]

}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	0003ffff 	.word	0x0003ffff

0800a44c <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f835 	bl	800a4d2 <VL53LX_decode_timeout>
 800a468:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7ff ff86 	bl	800a37e <VL53LX_calc_timeout_us>
 800a472:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800a474:	68bb      	ldr	r3, [r7, #8]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 800a47e:	b480      	push	{r7}
 800a480:	b087      	sub	sp, #28
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d015      	beq.n	800a4c4 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a49e:	e005      	b.n	800a4ac <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2bff      	cmp	r3, #255	@ 0xff
 800a4b0:	d8f6      	bhi.n	800a4a0 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a4b2:	89fb      	ldrh	r3, [r7, #14]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a4c0:	4413      	add	r3, r2
 800a4c2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a4c4:	8afb      	ldrh	r3, [r7, #22]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	4603      	mov	r3, r0
 800a4da:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a4e4:	88fa      	ldrh	r2, [r7, #6]
 800a4e6:	0a12      	lsrs	r2, r2, #8
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b088      	sub	sp, #32
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
 800a50a:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a50c:	2300      	movs	r3, #0
 800a50e:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800a51c:	887b      	ldrh	r3, [r7, #2]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a522:	23f1      	movs	r3, #241	@ 0xf1
 800a524:	77fb      	strb	r3, [r7, #31]
 800a526:	e05d      	b.n	800a5e4 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 800a528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a52a:	799a      	ldrb	r2, [r3, #6]
 800a52c:	887b      	ldrh	r3, [r7, #2]
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fe5d 	bl	800a1f0 <VL53LX_calc_macro_period_us>
 800a536:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff feea 	bl	800a314 <VL53LX_calc_timeout_mclks>
 800a540:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2bff      	cmp	r3, #255	@ 0xff
 800a546:	d901      	bls.n	800a54c <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800a548:	23ff      	movs	r3, #255	@ 0xff
 800a54a:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	68b8      	ldr	r0, [r7, #8]
 800a558:	f7ff fef9 	bl	800a34e <VL53LX_calc_encoded_timeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800a560:	8a7b      	ldrh	r3, [r7, #18]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	b29b      	uxth	r3, r3
 800a566:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800a56c:	8a7b      	ldrh	r3, [r7, #18]
 800a56e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a572:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800a574:	6979      	ldr	r1, [r7, #20]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fee9 	bl	800a34e <VL53LX_calc_encoded_timeout>
 800a57c:	4603      	mov	r3, r0
 800a57e:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800a580:	8a7b      	ldrh	r3, [r7, #18]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	b29b      	uxth	r3, r3
 800a586:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800a588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800a58c:	8a7b      	ldrh	r3, [r7, #18]
 800a58e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	7a5a      	ldrb	r2, [r3, #9]
 800a598:	887b      	ldrh	r3, [r7, #2]
 800a59a:	4611      	mov	r1, r2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fe27 	bl	800a1f0 <VL53LX_calc_macro_period_us>
 800a5a2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800a5a4:	6979      	ldr	r1, [r7, #20]
 800a5a6:	68b8      	ldr	r0, [r7, #8]
 800a5a8:	f7ff fed1 	bl	800a34e <VL53LX_calc_encoded_timeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800a5b0:	8a7b      	ldrh	r3, [r7, #18]
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800a5bc:	8a7b      	ldrh	r3, [r7, #18]
 800a5be:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c2:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff fec1 	bl	800a34e <VL53LX_calc_encoded_timeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800a5d0:	8a7b      	ldrh	r3, [r7, #18]
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800a5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5da:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800a5dc:	8a7b      	ldrh	r3, [r7, #18]
 800a5de:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800a5e4:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3720      	adds	r7, #32
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800a5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5f4:	b09e      	sub	sp, #120	@ 0x78
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6578      	str	r0, [r7, #84]	@ 0x54
 800a5fa:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	f04f 0300 	mov.w	r3, #0
 800a60a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 800a60e:	f04f 0200 	mov.w	r2, #0
 800a612:	f04f 0300 	mov.w	r3, #0
 800a616:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 800a61a:	f04f 0200 	mov.w	r2, #0
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800a626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a628:	885b      	ldrh	r3, [r3, #2]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a62e:	23f1      	movs	r3, #241	@ 0xf1
 800a630:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a634:	e0d6      	b.n	800a7e4 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800a636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a638:	785b      	ldrb	r3, [r3, #1]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 80d2 	beq.w	800a7e4 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800a640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a642:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 80cd 	bne.w	800a7e4 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800a64a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a650:	2200      	movs	r2, #0
 800a652:	643b      	str	r3, [r7, #64]	@ 0x40
 800a654:	647a      	str	r2, [r7, #68]	@ 0x44
 800a656:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a65a:	460b      	mov	r3, r1
 800a65c:	3301      	adds	r3, #1
 800a65e:	623b      	str	r3, [r7, #32]
 800a660:	4613      	mov	r3, r2
 800a662:	f143 0300 	adc.w	r3, r3, #0
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
 800a668:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a66c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800a670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a672:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800a676:	b29b      	uxth	r3, r3
 800a678:	2200      	movs	r2, #0
 800a67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a67c:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 800a67e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a680:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a684:	4602      	mov	r2, r0
 800a686:	fb02 f203 	mul.w	r2, r2, r3
 800a68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a68c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	441a      	add	r2, r3
 800a696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a698:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a69a:	fba3 4501 	umull	r4, r5, r3, r1
 800a69e:	1953      	adds	r3, r2, r5
 800a6a0:	461d      	mov	r5, r3
 800a6a2:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 800a6a6:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800a6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a6b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	f143 0300 	adc.w	r3, r3, #0
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a6ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800a6ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6d8:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 800a6da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	fb02 f203 	mul.w	r2, r2, r3
 800a6e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	fb01 f303 	mul.w	r3, r1, r3
 800a6ee:	441a      	add	r2, r3
 800a6f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	fba3 ab01 	umull	sl, fp, r3, r1
 800a6f8:	eb02 030b 	add.w	r3, r2, fp
 800a6fc:	469b      	mov	fp, r3
 800a6fe:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 800a702:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800a706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	17da      	asrs	r2, r3, #31
 800a70c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a70e:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 800a710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a712:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a716:	4622      	mov	r2, r4
 800a718:	fb02 f203 	mul.w	r2, r2, r3
 800a71c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a71e:	4629      	mov	r1, r5
 800a720:	fb01 f303 	mul.w	r3, r1, r3
 800a724:	4413      	add	r3, r2
 800a726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a728:	4621      	mov	r1, r4
 800a72a:	fba2 8901 	umull	r8, r9, r2, r1
 800a72e:	444b      	add	r3, r9
 800a730:	4699      	mov	r9, r3
 800a732:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 800a736:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 800a73a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a73e:	0fd9      	lsrs	r1, r3, #31
 800a740:	2000      	movs	r0, #0
 800a742:	6139      	str	r1, [r7, #16]
 800a744:	6178      	str	r0, [r7, #20]
 800a746:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a74a:	4621      	mov	r1, r4
 800a74c:	1889      	adds	r1, r1, r2
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	4629      	mov	r1, r5
 800a752:	eb43 0101 	adc.w	r1, r3, r1
 800a756:	60f9      	str	r1, [r7, #12]
 800a758:	f04f 0200 	mov.w	r2, #0
 800a75c:	f04f 0300 	mov.w	r3, #0
 800a760:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a764:	4621      	mov	r1, r4
 800a766:	084a      	lsrs	r2, r1, #1
 800a768:	4629      	mov	r1, r5
 800a76a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a76e:	4629      	mov	r1, r5
 800a770:	104b      	asrs	r3, r1, #1
 800a772:	4610      	mov	r0, r2
 800a774:	4619      	mov	r1, r3
 800a776:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a77a:	1814      	adds	r4, r2, r0
 800a77c:	603c      	str	r4, [r7, #0]
 800a77e:	414b      	adcs	r3, r1
 800a780:	607b      	str	r3, [r7, #4]
 800a782:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a786:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 800a78a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a78e:	4313      	orrs	r3, r2
 800a790:	d009      	beq.n	800a7a6 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800a792:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a796:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a79a:	f7f5 fd49 	bl	8000230 <__aeabi_ldivmod>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800a7a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 800a7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 800a7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 800a7ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800a7c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7c2:	7852      	ldrb	r2, [r2, #1]
 800a7c4:	0852      	lsrs	r2, r2, #1
 800a7c6:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800a7c8:	441a      	add	r2, r3
 800a7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 800a7d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800a7d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7d8:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 800a7da:	fb93 f2f2 	sdiv	r2, r3, r2
 800a7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800a7e4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3778      	adds	r7, #120	@ 0x78
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a7f2 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b087      	sub	sp, #28
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3318      	adds	r3, #24
 800a800:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 800a814:	029b      	lsls	r3, r3, #10
 800a816:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 800a81e:	029b      	lsls	r3, r3, #10
 800a820:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8095 	bne.w	800a95c <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 800a838:	091b      	lsrs	r3, r3, #4
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 800a846:	f003 030f 	and.w	r3, r3, #15
 800a84a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 800a856:	091b      	lsrs	r3, r3, #4
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 800a874:	091b      	lsrs	r3, r3, #4
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	429a      	cmp	r2, r3
 800a896:	da2c      	bge.n	800a8f2 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 800a89e:	091b      	lsrs	r3, r3, #4
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 800a8ac:	f003 030f 	and.w	r3, r3, #15
 800a8b0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 800a8bc:	091b      	lsrs	r3, r3, #4
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 800a8e8:	f003 030f 	and.w	r3, r3, #15
 800a8ec:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	f340 80c2 	ble.w	800aa84 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 800a906:	091b      	lsrs	r3, r3, #4
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 800a914:	f003 030f 	and.w	r3, r3, #15
 800a918:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 800a924:	091b      	lsrs	r3, r3, #4
 800a926:	b2da      	uxtb	r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 800a932:	f003 030f 	and.w	r3, r3, #15
 800a936:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 800a942:	091b      	lsrs	r3, r3, #4
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 800a950:	f003 030f 	and.w	r3, r3, #15
 800a954:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	731a      	strb	r2, [r3, #12]
 800a95a:	e093      	b.n	800aa84 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 800a962:	f003 030f 	and.w	r3, r3, #15
 800a966:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 800a982:	091b      	lsrs	r3, r3, #4
 800a984:	b2da      	uxtb	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 800a9a0:	091b      	lsrs	r3, r3, #4
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	da2c      	bge.n	800aa1e <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 800a9ca:	091b      	lsrs	r3, r3, #4
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 800a9d8:	f003 030f 	and.w	r3, r3, #15
 800a9dc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 800aa14:	f003 030f 	and.w	r3, r3, #15
 800aa18:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	dd2c      	ble.n	800aa84 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 800aa30:	091b      	lsrs	r3, r3, #4
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 800aa4e:	091b      	lsrs	r3, r3, #4
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 800aa6c:	091b      	lsrs	r3, r3, #4
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800aa84:	2300      	movs	r3, #0
 800aa86:	75fb      	strb	r3, [r7, #23]
 800aa88:	e007      	b.n	800aa9a <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	4413      	add	r3, r2
 800aa90:	2201      	movs	r2, #1
 800aa92:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	3301      	adds	r3, #1
 800aa98:	75fb      	strb	r3, [r7, #23]
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b05      	cmp	r3, #5
 800aa9e:	d9f4      	bls.n	800aa8a <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 800aaae:	b590      	push	{r4, r7, lr}
 800aab0:	b093      	sub	sp, #76	@ 0x4c
 800aab2:	af04      	add	r7, sp, #16
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
 800aaba:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3318      	adds	r3, #24
 800aac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800aae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaea:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800aaee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800aaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf4:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 800aaf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 800ab00:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab04:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 800ab08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 800ab0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab10:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 800ab12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	2b07      	cmp	r3, #7
 800ab1e:	d006      	beq.n	800ab2e <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d002      	beq.n	800ab2e <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800ab28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ab2c:	e0ec      	b.n	800ad08 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800ab2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 800ab34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ab38:	e0e6      	b.n	800ad08 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ab40:	e0d9      	b.n	800acf6 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800ab42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	214c      	movs	r1, #76	@ 0x4c
 800ab4a:	fb01 f303 	mul.w	r3, r1, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	335e      	adds	r3, #94	@ 0x5e
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b09      	cmp	r3, #9
 800ab56:	d00b      	beq.n	800ab70 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800ab58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	214c      	movs	r1, #76	@ 0x4c
 800ab60:	fb01 f303 	mul.w	r3, r1, r3
 800ab64:	4413      	add	r3, r2
 800ab66:	335e      	adds	r3, #94	@ 0x5e
 800ab68:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800ab6a:	2b13      	cmp	r3, #19
 800ab6c:	f040 80bd 	bne.w	800acea <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	795b      	ldrb	r3, [r3, #5]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 800ab78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	214c      	movs	r1, #76	@ 0x4c
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	4413      	add	r3, r2
 800ab86:	335e      	adds	r3, #94	@ 0x5e
 800ab88:	2217      	movs	r2, #23
 800ab8a:	701a      	strb	r2, [r3, #0]
 800ab8c:	e009      	b.n	800aba2 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 800ab8e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	214c      	movs	r1, #76	@ 0x4c
 800ab96:	fb01 f303 	mul.w	r3, r1, r3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	335e      	adds	r3, #94	@ 0x5e
 800ab9e:	2207      	movs	r2, #7
 800aba0:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800aba2:	2300      	movs	r3, #0
 800aba4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800aba8:	e097      	b.n	800acda <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800abaa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	214c      	movs	r1, #76	@ 0x4c
 800abb2:	fb01 f303 	mul.w	r3, r1, r3
 800abb6:	4413      	add	r3, r2
 800abb8:	3354      	adds	r3, #84	@ 0x54
 800abba:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 800abbc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4403      	add	r3, r0
 800abcc:	3310      	adds	r3, #16
 800abce:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800abd0:	4299      	cmp	r1, r3
 800abd2:	d915      	bls.n	800ac00 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 800abd4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	214c      	movs	r1, #76	@ 0x4c
 800abdc:	fb01 f303 	mul.w	r3, r1, r3
 800abe0:	4413      	add	r3, r2
 800abe2:	3354      	adds	r3, #84	@ 0x54
 800abe4:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 800abe6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	4613      	mov	r3, r2
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4403      	add	r3, r0
 800abf6:	3310      	adds	r3, #16
 800abf8:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800abfa:	1acb      	subs	r3, r1, r3
 800abfc:	867b      	strh	r3, [r7, #50]	@ 0x32
 800abfe:	e014      	b.n	800ac2a <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 800ac00:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	4613      	mov	r3, r2
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	3310      	adds	r3, #16
 800ac12:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 800ac14:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	204c      	movs	r0, #76	@ 0x4c
 800ac1c:	fb00 f303 	mul.w	r3, r0, r3
 800ac20:	440b      	add	r3, r1
 800ac22:	3354      	adds	r3, #84	@ 0x54
 800ac24:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 800ac2a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ac2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d24e      	bcs.n	800acd0 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 800ac32:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d125      	bne.n	800ac86 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800ac3a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 800ac3e:	4613      	mov	r3, r2
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	3308      	adds	r3, #8
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800ac4c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 800ac50:	224c      	movs	r2, #76	@ 0x4c
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	3310      	adds	r3, #16
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800ac60:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 800ac64:	f107 0217 	add.w	r2, r7, #23
 800ac68:	9203      	str	r2, [sp, #12]
 800ac6a:	f107 021c 	add.w	r2, r7, #28
 800ac6e:	9202      	str	r2, [sp, #8]
 800ac70:	f107 0218 	add.w	r2, r7, #24
 800ac74:	9201      	str	r2, [sp, #4]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4623      	mov	r3, r4
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	f000 f848 	bl	800ad10 <VL53LX_hist_events_consistency_check>
 800ac80:	4603      	mov	r3, r0
 800ac82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800ac86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d115      	bne.n	800acba <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800ac90:	2b09      	cmp	r3, #9
 800ac92:	d112      	bne.n	800acba <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800ac94:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800ac98:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 800ac9c:	224c      	movs	r2, #76	@ 0x4c
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	3310      	adds	r3, #16
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	4413      	add	r3, r2
 800aca8:	3304      	adds	r3, #4
 800acaa:	f107 0217 	add.w	r2, r7, #23
 800acae:	4619      	mov	r1, r3
 800acb0:	f000 fb44 	bl	800b33c <VL53LX_hist_merged_pulse_check>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800acba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800acbe:	7df8      	ldrb	r0, [r7, #23]
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	214c      	movs	r1, #76	@ 0x4c
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	4413      	add	r3, r2
 800acca:	335e      	adds	r3, #94	@ 0x5e
 800accc:	4602      	mov	r2, r0
 800acce:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800acd0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800acd4:	3301      	adds	r3, #1
 800acd6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800ace2:	429a      	cmp	r2, r3
 800ace4:	f4ff af61 	bcc.w	800abaa <VL53LX_hist_phase_consistency_check+0xfc>
 800ace8:	e000      	b.n	800acec <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 800acea:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800acec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800acf0:	3301      	adds	r3, #1
 800acf2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	7c9b      	ldrb	r3, [r3, #18]
 800acfa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800acfe:	429a      	cmp	r2, r3
 800ad00:	f4ff af1f 	bcc.w	800ab42 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ad04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	373c      	adds	r7, #60	@ 0x3c
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd90      	pop	{r4, r7, pc}

0800ad10 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800ad10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad14:	b0d4      	sub	sp, #336	@ 0x150
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800ad1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ad20:	4603      	mov	r3, r0
 800ad22:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800ad26:	460b      	mov	r3, r1
 800ad28:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 800ad3e:	f04f 0200 	mov.w	r2, #0
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 800ad62:	f04f 0200 	mov.w	r2, #0
 800ad66:	f04f 0300 	mov.w	r3, #0
 800ad6a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 800ad7a:	f04f 0200 	mov.w	r2, #0
 800ad7e:	f04f 0300 	mov.w	r3, #0
 800ad82:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 800ad9e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d106      	bne.n	800adb4 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800ada6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800adaa:	2209      	movs	r2, #9
 800adac:	701a      	strb	r2, [r3, #0]
		return status;
 800adae:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800adb2:	e2bd      	b.n	800b330 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800adb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adc0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800adc4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800adc8:	460b      	mov	r3, r1
 800adca:	3301      	adds	r3, #1
 800adcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800add0:	4613      	mov	r3, r2
 800add2:	f143 0300 	adc.w	r3, r3, #0
 800add6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adda:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800adde:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800ade2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ade6:	885b      	ldrh	r3, [r3, #2]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	2200      	movs	r2, #0
 800adec:	469a      	mov	sl, r3
 800adee:	4693      	mov	fp, r2
 800adf0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800adf4:	fb0a f203 	mul.w	r2, sl, r3
 800adf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800adfc:	fb0b f303 	mul.w	r3, fp, r3
 800ae00:	441a      	add	r2, r3
 800ae02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ae06:	fba3 450a 	umull	r4, r5, r3, sl
 800ae0a:	1953      	adds	r3, r2, r5
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 800ae12:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800ae16:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae22:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ae26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae32:	4613      	mov	r3, r2
 800ae34:	f143 0300 	adc.w	r3, r3, #0
 800ae38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae3c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800ae40:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800ae44:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800ae48:	8adb      	ldrh	r3, [r3, #22]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae52:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ae5a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800ae5e:	4622      	mov	r2, r4
 800ae60:	fb02 f203 	mul.w	r2, r2, r3
 800ae64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ae68:	4629      	mov	r1, r5
 800ae6a:	fb01 f303 	mul.w	r3, r1, r3
 800ae6e:	441a      	add	r2, r3
 800ae70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ae74:	4621      	mov	r1, r4
 800ae76:	fba3 8901 	umull	r8, r9, r3, r1
 800ae7a:	eb02 0309 	add.w	r3, r2, r9
 800ae7e:	4699      	mov	r9, r3
 800ae80:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 800ae84:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 800ae88:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800ae8c:	f04f 0000 	mov.w	r0, #0
 800ae90:	f04f 0100 	mov.w	r1, #0
 800ae94:	0319      	lsls	r1, r3, #12
 800ae96:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ae9a:	0310      	lsls	r0, r2, #12
 800ae9c:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 800aea0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800aea4:	4313      	orrs	r3, r2
 800aea6:	d035      	beq.n	800af14 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800aea8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800aeac:	0fd9      	lsrs	r1, r3, #31
 800aeae:	2000      	movs	r0, #0
 800aeb0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800aeb4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800aeb8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800aebc:	4621      	mov	r1, r4
 800aebe:	1889      	adds	r1, r1, r2
 800aec0:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800aec4:	4629      	mov	r1, r5
 800aec6:	eb43 0101 	adc.w	r1, r3, r1
 800aeca:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800aece:	f04f 0200 	mov.w	r2, #0
 800aed2:	f04f 0300 	mov.w	r3, #0
 800aed6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800aeda:	4621      	mov	r1, r4
 800aedc:	084a      	lsrs	r2, r1, #1
 800aede:	4629      	mov	r1, r5
 800aee0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800aee4:	4629      	mov	r1, r5
 800aee6:	104b      	asrs	r3, r1, #1
 800aee8:	4610      	mov	r0, r2
 800aeea:	4619      	mov	r1, r3
 800aeec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800aef0:	1814      	adds	r4, r2, r0
 800aef2:	67bc      	str	r4, [r7, #120]	@ 0x78
 800aef4:	414b      	adcs	r3, r1
 800aef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aef8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800aefc:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 800af00:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800af04:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800af08:	f7f5 f992 	bl	8000230 <__aeabi_ldivmod>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800af14:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800af18:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800af1c:	fb03 f102 	mul.w	r1, r3, r2
 800af20:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800af24:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800af28:	fb02 f303 	mul.w	r3, r2, r3
 800af2c:	18ca      	adds	r2, r1, r3
 800af2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800af32:	fba3 1303 	umull	r1, r3, r3, r3
 800af36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af3a:	460b      	mov	r3, r1
 800af3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af44:	18d3      	adds	r3, r2, r3
 800af46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af4a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800af4e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 800af52:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 800af56:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800af5a:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800af5e:	6739      	str	r1, [r7, #112]	@ 0x70
 800af60:	f143 0300 	adc.w	r3, r3, #0
 800af64:	677b      	str	r3, [r7, #116]	@ 0x74
 800af66:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800af6a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 800af6e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800af72:	2b00      	cmp	r3, #0
 800af74:	da08      	bge.n	800af88 <VL53LX_hist_events_consistency_check+0x278>
 800af76:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800af7a:	1851      	adds	r1, r2, r1
 800af7c:	66b9      	str	r1, [r7, #104]	@ 0x68
 800af7e:	f143 0300 	adc.w	r3, r3, #0
 800af82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800af88:	f04f 0000 	mov.w	r0, #0
 800af8c:	f04f 0100 	mov.w	r1, #0
 800af90:	0b10      	lsrs	r0, r2, #12
 800af92:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800af96:	1319      	asrs	r1, r3, #12
 800af98:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800af9c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800afa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa2:	2200      	movs	r2, #0
 800afa4:	663b      	str	r3, [r7, #96]	@ 0x60
 800afa6:	667a      	str	r2, [r7, #100]	@ 0x64
 800afa8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800afac:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800afb0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800afb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afbc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800afc0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800afc4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800afc8:	4621      	mov	r1, r4
 800afca:	1a51      	subs	r1, r2, r1
 800afcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800afce:	4629      	mov	r1, r5
 800afd0:	eb63 0301 	sbc.w	r3, r3, r1
 800afd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afd6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800afda:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 800afde:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800afe2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800afe6:	fb03 f102 	mul.w	r1, r3, r2
 800afea:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800afee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aff2:	fb02 f303 	mul.w	r3, r2, r3
 800aff6:	4419      	add	r1, r3
 800aff8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800affc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b000:	fba2 2303 	umull	r2, r3, r2, r3
 800b004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b008:	4613      	mov	r3, r2
 800b00a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b012:	18cb      	adds	r3, r1, r3
 800b014:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b018:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800b01c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800b020:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 800b024:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b028:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800b02c:	6539      	str	r1, [r7, #80]	@ 0x50
 800b02e:	f143 0300 	adc.w	r3, r3, #0
 800b032:	657b      	str	r3, [r7, #84]	@ 0x54
 800b034:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800b038:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 800b03c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b040:	2b00      	cmp	r3, #0
 800b042:	da08      	bge.n	800b056 <VL53LX_hist_events_consistency_check+0x346>
 800b044:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800b048:	1851      	adds	r1, r2, r1
 800b04a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b04c:	f143 0300 	adc.w	r3, r3, #0
 800b050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b052:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b056:	f04f 0000 	mov.w	r0, #0
 800b05a:	f04f 0100 	mov.w	r1, #0
 800b05e:	0b10      	lsrs	r0, r2, #12
 800b060:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800b064:	1319      	asrs	r1, r3, #12
 800b066:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800b06a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b06e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800b072:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800b076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b078:	2200      	movs	r2, #0
 800b07a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b07e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b086:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800b08a:	4622      	mov	r2, r4
 800b08c:	fb02 f203 	mul.w	r2, r2, r3
 800b090:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b094:	4629      	mov	r1, r5
 800b096:	fb01 f303 	mul.w	r3, r1, r3
 800b09a:	441a      	add	r2, r3
 800b09c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	fba3 1301 	umull	r1, r3, r3, r1
 800b0a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0b4:	18d3      	adds	r3, r2, r3
 800b0b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b0ba:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800b0be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b0c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 800b0c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b0ca:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800b0ce:	6439      	str	r1, [r7, #64]	@ 0x40
 800b0d0:	f143 0300 	adc.w	r3, r3, #0
 800b0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b0da:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 800b0de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da08      	bge.n	800b0f8 <VL53LX_hist_events_consistency_check+0x3e8>
 800b0e6:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800b0ea:	1851      	adds	r1, r2, r1
 800b0ec:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0ee:	f143 0300 	adc.w	r3, r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0f8:	f04f 0000 	mov.w	r0, #0
 800b0fc:	f04f 0100 	mov.w	r1, #0
 800b100:	0b10      	lsrs	r0, r2, #12
 800b102:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800b106:	1319      	asrs	r1, r3, #12
 800b108:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800b10c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b110:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800b114:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800b118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b120:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b128:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800b12c:	4622      	mov	r2, r4
 800b12e:	fb02 f203 	mul.w	r2, r2, r3
 800b132:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b136:	4629      	mov	r1, r5
 800b138:	fb01 f303 	mul.w	r3, r1, r3
 800b13c:	441a      	add	r2, r3
 800b13e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b142:	4621      	mov	r1, r4
 800b144:	fba3 1301 	umull	r1, r3, r3, r1
 800b148:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b14c:	460b      	mov	r3, r1
 800b14e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b156:	18d3      	adds	r3, r2, r3
 800b158:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b15c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800b160:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 800b164:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 800b168:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800b16c:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800b170:	6339      	str	r1, [r7, #48]	@ 0x30
 800b172:	f143 0300 	adc.w	r3, r3, #0
 800b176:	637b      	str	r3, [r7, #52]	@ 0x34
 800b178:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b17c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 800b180:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800b184:	4610      	mov	r0, r2
 800b186:	4619      	mov	r1, r3
 800b188:	2900      	cmp	r1, #0
 800b18a:	da08      	bge.n	800b19e <VL53LX_hist_events_consistency_check+0x48e>
 800b18c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800b190:	18c3      	adds	r3, r0, r3
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b194:	f141 0300 	adc.w	r3, r1, #0
 800b198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b19a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	f04f 0300 	mov.w	r3, #0
 800b1a6:	0b02      	lsrs	r2, r0, #12
 800b1a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b1ac:	130b      	asrs	r3, r1, #12
 800b1ae:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 800b1b2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800b1b6:	1c91      	adds	r1, r2, #2
 800b1b8:	6239      	str	r1, [r7, #32]
 800b1ba:	f143 0300 	adc.w	r3, r3, #0
 800b1be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b1c4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 800b1c8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da06      	bge.n	800b1de <VL53LX_hist_events_consistency_check+0x4ce>
 800b1d0:	1cd1      	adds	r1, r2, #3
 800b1d2:	61b9      	str	r1, [r7, #24]
 800b1d4:	f143 0300 	adc.w	r3, r3, #0
 800b1d8:	61fb      	str	r3, [r7, #28]
 800b1da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1de:	f04f 0000 	mov.w	r0, #0
 800b1e2:	f04f 0100 	mov.w	r1, #0
 800b1e6:	0890      	lsrs	r0, r2, #2
 800b1e8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800b1ec:	1099      	asrs	r1, r3, #2
 800b1ee:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800b1f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1f6:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	617a      	str	r2, [r7, #20]
 800b1fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b202:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 800b206:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800b20a:	1c91      	adds	r1, r2, #2
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	f143 0300 	adc.w	r3, r3, #0
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b218:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 800b21c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800b220:	2b00      	cmp	r3, #0
 800b222:	da06      	bge.n	800b232 <VL53LX_hist_events_consistency_check+0x522>
 800b224:	1cd1      	adds	r1, r2, #3
 800b226:	6039      	str	r1, [r7, #0]
 800b228:	f143 0300 	adc.w	r3, r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
 800b22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f04f 0100 	mov.w	r1, #0
 800b23a:	0890      	lsrs	r0, r2, #2
 800b23c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800b240:	1099      	asrs	r1, r3, #2
 800b242:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24a:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800b24c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800b250:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800b252:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 800b256:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800b258:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 800b25c:	4413      	add	r3, r2
 800b25e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800b262:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 f8ab 	bl	800d3c4 <VL53LX_isqrt>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
	*pevents_tolerance =
 800b272:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b276:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800b278:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800b282:	fb03 f202 	mul.w	r2, r3, r2
 800b286:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b28a:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800b28c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f103 0220 	add.w	r2, r3, #32
 800b296:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b29a:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800b29c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	da00      	bge.n	800b2a8 <VL53LX_hist_events_consistency_check+0x598>
 800b2a6:	333f      	adds	r3, #63	@ 0x3f
 800b2a8:	119b      	asrs	r3, r3, #6
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b2b0:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800b2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800b2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800b2ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b2d2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	da08      	bge.n	800b2ec <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800b2da:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e2:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800b2e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	e007      	b.n	800b2fc <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800b2ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b2f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800b2f4:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800b2f6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b2fa:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800b2fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	429a      	cmp	r2, r3
 800b30a:	dd0b      	ble.n	800b324 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800b30c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800b310:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800b312:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800b316:	429a      	cmp	r2, r3
 800b318:	d204      	bcs.n	800b324 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800b31a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b31e:	2214      	movs	r2, #20
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	e003      	b.n	800b32c <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800b324:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b328:	2209      	movs	r2, #9
 800b32a:	701a      	strb	r2, [r3, #0]





	return status;
 800b32c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800b330:	4618      	mov	r0, r3
 800b332:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800b336:	46bd      	mov	sp, r7
 800b338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b33c <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800b35e:	429a      	cmp	r2, r3
 800b360:	dd0b      	ble.n	800b37a <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800b370:	b29b      	uxth	r3, r3
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	b29b      	uxth	r3, r3
		delta_mm =
 800b376:	82fb      	strh	r3, [r7, #22]
 800b378:	e00a      	b.n	800b390 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800b380:	b29a      	uxth	r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800b388:	b29b      	uxth	r3, r3
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	b29b      	uxth	r3, r3
		delta_mm =
 800b38e:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800b390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b394:	2b00      	cmp	r3, #0
 800b396:	dd09      	ble.n	800b3ac <VL53LX_hist_merged_pulse_check+0x70>
 800b398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b39c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	dd03      	ble.n	800b3ac <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2216      	movs	r2, #22
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e002      	b.n	800b3b2 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2209      	movs	r2, #9
 800b3b0:	701a      	strb	r2, [r3, #0]

	return status;
 800b3b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b08e      	sub	sp, #56	@ 0x38
 800b3c6:	af04      	add	r7, sp, #16
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3318      	adds	r3, #24
 800b3da:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 800b3ea:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 800b3f2:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800b3fa:	2b09      	cmp	r3, #9
 800b3fc:	d009      	beq.n	800b412 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800b404:	2b13      	cmp	r3, #19
 800b406:	d004      	beq.n	800b412 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800b40e:	2b14      	cmp	r3, #20
 800b410:	d129      	bne.n	800b466 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b418:	2b09      	cmp	r3, #9
 800b41a:	d009      	beq.n	800b430 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800b422:	2b13      	cmp	r3, #19
 800b424:	d004      	beq.n	800b430 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800b42c:	2b14      	cmp	r3, #20
 800b42e:	d11a      	bne.n	800b466 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2209      	movs	r2, #9
 800b434:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 800b442:	8bb9      	ldrh	r1, [r7, #28]
 800b444:	7ff8      	ldrb	r0, [r7, #31]
 800b446:	9303      	str	r3, [sp, #12]
 800b448:	f107 0318 	add.w	r3, r7, #24
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	f107 0314 	add.w	r3, r7, #20
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	f7ff fc58 	bl	800ad10 <VL53LX_hist_events_consistency_check>
 800b460:	4603      	mov	r3, r0
 800b462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 800b466:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3728      	adds	r7, #40	@ 0x28
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b088      	sub	sp, #32
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b47e:	2300      	movs	r3, #0
 800b480:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d019      	beq.n	800b4d2 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f8f4 	bl	800d692 <VL53LX_calc_pll_period_mm>
 800b4aa:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
 800b4be:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b4c6:	0bdb      	lsrs	r3, r3, #15
 800b4c8:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	b21a      	sxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800b4de:	b590      	push	{r4, r7, lr}
 800b4e0:	b08d      	sub	sp, #52	@ 0x34
 800b4e2:	af04      	add	r7, sp, #16
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	80fb      	strh	r3, [r7, #6]
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	80bb      	strh	r3, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800b51c:	78b9      	ldrb	r1, [r7, #2]
 800b51e:	78f8      	ldrb	r0, [r7, #3]
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	9303      	str	r3, [sp, #12]
 800b526:	f107 030e 	add.w	r3, r7, #14
 800b52a:	9302      	str	r3, [sp, #8]
 800b52c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	23ff      	movs	r3, #255	@ 0xff
 800b538:	22c7      	movs	r2, #199	@ 0xc7
 800b53a:	f000 fa01 	bl	800b940 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800b53e:	89fb      	ldrh	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d050      	beq.n	800b5e6 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800b544:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800b546:	2b00      	cmp	r3, #0
 800b548:	d04d      	beq.n	800b5e6 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800b54a:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 800b54e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800b552:	78b9      	ldrb	r1, [r7, #2]
 800b554:	78f8      	ldrb	r0, [r7, #3]
 800b556:	f107 0308 	add.w	r3, r7, #8
 800b55a:	9303      	str	r3, [sp, #12]
 800b55c:	f107 030a 	add.w	r3, r7, #10
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	4623      	mov	r3, r4
 800b56e:	f000 f9e7 	bl	800b940 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800b576:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800b578:	897b      	ldrh	r3, [r7, #10]
 800b57a:	461a      	mov	r2, r3
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	fb02 f303 	mul.w	r3, r2, r3
 800b582:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800b584:	89fb      	ldrh	r3, [r7, #14]
 800b586:	461a      	mov	r2, r3
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b58e:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800b594:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800b596:	893b      	ldrh	r3, [r7, #8]
 800b598:	461a      	mov	r2, r3
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	fb02 f303 	mul.w	r3, r2, r3
 800b5a0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800b5a2:	89bb      	ldrh	r3, [r7, #12]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800b5ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	fb02 f303 	mul.w	r3, r2, r3
 800b5b8:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800b5ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	fb02 f303 	mul.w	r3, r2, r3
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800b5ca:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800b5cc:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800b5ce:	4413      	add	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d008      	beq.n	800b5ea <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	009a      	lsls	r2, r3, #2
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	fb92 f3f3 	sdiv	r3, r2, r3
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	e002      	b.n	800b5ec <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800b5e6:	bf00      	nop
 800b5e8:	e000      	b.n	800b5ec <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800b5ea:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	b21a      	sxth	r2, r3
 800b5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5f2:	801a      	strh	r2, [r3, #0]

}
 800b5f4:	bf00      	nop
 800b5f6:	3724      	adds	r7, #36	@ 0x24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd90      	pop	{r4, r7, pc}

0800b5fc <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	607a      	str	r2, [r7, #4]
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	4603      	mov	r3, r0
 800b60a:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	08db      	lsrs	r3, r3, #3
 800b610:	b2da      	uxtb	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	2301      	movs	r3, #1
 800b62a:	4093      	lsls	r3, r2
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	701a      	strb	r2, [r3, #0]

}
 800b632:	bf00      	nop
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	4603      	mov	r3, r0
 800b646:	603a      	str	r2, [r7, #0]
 800b648:	71fb      	strb	r3, [r7, #7]
 800b64a:	460b      	mov	r3, r1
 800b64c:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	2b07      	cmp	r3, #7
 800b652:	d90a      	bls.n	800b66a <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800b654:	79bb      	ldrb	r3, [r7, #6]
 800b656:	00db      	lsls	r3, r3, #3
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	3b71      	subs	r3, #113	@ 0x71
 800b662:	b2da      	uxtb	r2, r3
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800b668:	e00a      	b.n	800b680 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800b66a:	79bb      	ldrb	r3, [r7, #6]
 800b66c:	f1c3 030f 	rsb	r3, r3, #15
 800b670:	b2db      	uxtb	r3, r3
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	b2da      	uxtb	r2, r3
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	4413      	add	r3, r2
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	701a      	strb	r2, [r3, #0]
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
 800b69c:	091b      	lsrs	r3, r3, #4
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
 800b6a6:	f003 030f 	and.w	r3, r3, #15
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	701a      	strb	r2, [r3, #0]

}
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	603a      	str	r2, [r7, #0]
 800b6c6:	71fb      	strb	r3, [r7, #7]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800b6cc:	79bb      	ldrb	r3, [r7, #6]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	701a      	strb	r2, [r3, #0]

}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60ba      	str	r2, [r7, #8]
 800b6f0:	607b      	str	r3, [r7, #4]
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73fb      	strb	r3, [r7, #15]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800b70a:	f107 0217 	add.w	r2, r7, #23
 800b70e:	f107 0116 	add.w	r1, r7, #22
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	4618      	mov	r0, r3
 800b716:	f002 fa37 	bl	800db88 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800b71a:	f107 0214 	add.w	r2, r7, #20
 800b71e:	f107 0115 	add.w	r1, r7, #21
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff ffb1 	bl	800b68c <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	4619      	mov	r1, r3
 800b72e:	7d7b      	ldrb	r3, [r7, #21]
 800b730:	3301      	adds	r3, #1
 800b732:	0fda      	lsrs	r2, r3, #31
 800b734:	4413      	add	r3, r2
 800b736:	105b      	asrs	r3, r3, #1
 800b738:	425b      	negs	r3, r3
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	440b      	add	r3, r1
 800b73e:	b29b      	uxth	r3, r3
 800b740:	b21a      	sxth	r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da02      	bge.n	800b756 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2200      	movs	r2, #0
 800b754:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	7d7a      	ldrb	r2, [r7, #21]
 800b760:	4413      	add	r3, r2
 800b762:	b29b      	uxth	r3, r3
 800b764:	b21a      	sxth	r2, r3
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b770:	2b0f      	cmp	r3, #15
 800b772:	dd02      	ble.n	800b77a <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	220f      	movs	r2, #15
 800b778:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800b77a:	7dbb      	ldrb	r3, [r7, #22]
 800b77c:	4619      	mov	r1, r3
 800b77e:	7d3b      	ldrb	r3, [r7, #20]
 800b780:	3301      	adds	r3, #1
 800b782:	0fda      	lsrs	r2, r3, #31
 800b784:	4413      	add	r3, r2
 800b786:	105b      	asrs	r3, r3, #1
 800b788:	425b      	negs	r3, r3
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	440b      	add	r3, r1
 800b78e:	b29b      	uxth	r3, r3
 800b790:	b21a      	sxth	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da02      	bge.n	800b7a6 <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	7d3a      	ldrb	r2, [r7, #20]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	b21a      	sxth	r2, r3
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7c0:	2b0f      	cmp	r3, #15
 800b7c2:	dd02      	ble.n	800b7ca <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	220f      	movs	r2, #15
 800b7c8:	801a      	strh	r2, [r3, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	4603      	mov	r3, r0
 800b7da:	460a      	mov	r2, r1
 800b7dc:	71fb      	strb	r3, [r7, #7]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	f003 0303 	and.w	r3, r3, #3
 800b7ec:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800b7ee:	79bb      	ldrb	r3, [r7, #6]
 800b7f0:	f003 0303 	and.w	r3, r3, #3
 800b7f4:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d104      	bne.n	800b806 <VL53LX_is_aperture_location+0x34>
 800b7fc:	7b7b      	ldrb	r3, [r7, #13]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d101      	bne.n	800b806 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800b802:	2301      	movs	r3, #1
 800b804:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d104      	bne.n	800b816 <VL53LX_is_aperture_location+0x44>
 800b80c:	7b7b      	ldrb	r3, [r7, #13]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800b812:	2301      	movs	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800b816:	7bfb      	ldrb	r3, [r7, #15]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b08b      	sub	sp, #44	@ 0x2c
 800b828:	af02      	add	r7, sp, #8
 800b82a:	603a      	str	r2, [r7, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	4603      	mov	r3, r0
 800b830:	71fb      	strb	r3, [r7, #7]
 800b832:	460b      	mov	r3, r1
 800b834:	71bb      	strb	r3, [r7, #6]
 800b836:	4613      	mov	r3, r2
 800b838:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800b866:	f107 0416 	add.w	r4, r7, #22
 800b86a:	f107 0218 	add.w	r2, r7, #24
 800b86e:	79b9      	ldrb	r1, [r7, #6]
 800b870:	79f8      	ldrb	r0, [r7, #7]
 800b872:	f107 0312 	add.w	r3, r7, #18
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	f107 0314 	add.w	r3, r7, #20
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	4623      	mov	r3, r4
 800b880:	f7ff ff32 	bl	800b6e8 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	2200      	movs	r2, #0
 800b888:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b88a:	8afb      	ldrh	r3, [r7, #22]
 800b88c:	83bb      	strh	r3, [r7, #28]
 800b88e:	e04c      	b.n	800b92a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b890:	8b3b      	ldrh	r3, [r7, #24]
 800b892:	83fb      	strh	r3, [r7, #30]
 800b894:	e03d      	b.n	800b912 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800b896:	8bbb      	ldrh	r3, [r7, #28]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	8bfa      	ldrh	r2, [r7, #30]
 800b89c:	b2d1      	uxtb	r1, r2
 800b89e:	f107 0211 	add.w	r2, r7, #17
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff fecb 	bl	800b63e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800b8a8:	7c78      	ldrb	r0, [r7, #17]
 800b8aa:	f107 030e 	add.w	r3, r7, #14
 800b8ae:	f107 020f 	add.w	r2, r7, #15
 800b8b2:	f107 0110 	add.w	r1, r7, #16
 800b8b6:	f7ff fea1 	bl	800b5fc <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800b8ba:	7c3b      	ldrb	r3, [r7, #16]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d01b      	beq.n	800b906 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800b8ce:	8bbb      	ldrh	r3, [r7, #28]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	8bfa      	ldrh	r2, [r7, #30]
 800b8d4:	b2d2      	uxtb	r2, r2
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff ff7a 	bl	800b7d2 <VL53LX_is_aperture_location>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800b8e2:	7efb      	ldrb	r3, [r7, #27]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ea:	881a      	ldrh	r2, [r3, #0]
 800b8ec:	88bb      	ldrh	r3, [r7, #4]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f4:	801a      	strh	r2, [r3, #0]
 800b8f6:	e006      	b.n	800b906 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b900:	b29a      	uxth	r2, r3
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b906:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	3301      	adds	r3, #1
 800b90e:	b29b      	uxth	r3, r3
 800b910:	83fb      	strh	r3, [r7, #30]
 800b912:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b916:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	ddbb      	ble.n	800b896 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b91e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b922:	b29b      	uxth	r3, r3
 800b924:	3301      	adds	r3, #1
 800b926:	b29b      	uxth	r3, r3
 800b928:	83bb      	strh	r3, [r7, #28]
 800b92a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b92e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b932:	429a      	cmp	r2, r3
 800b934:	ddac      	ble.n	800b890 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	3724      	adds	r7, #36	@ 0x24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd90      	pop	{r4, r7, pc}

0800b940 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b08d      	sub	sp, #52	@ 0x34
 800b944:	af02      	add	r7, sp, #8
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	4623      	mov	r3, r4
 800b950:	71fb      	strb	r3, [r7, #7]
 800b952:	4603      	mov	r3, r0
 800b954:	71bb      	strb	r3, [r7, #6]
 800b956:	460b      	mov	r3, r1
 800b958:	717b      	strb	r3, [r7, #5]
 800b95a:	4613      	mov	r3, r2
 800b95c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 800b9a0:	f107 041c 	add.w	r4, r7, #28
 800b9a4:	f107 021e 	add.w	r2, r7, #30
 800b9a8:	79b9      	ldrb	r1, [r7, #6]
 800b9aa:	79f8      	ldrb	r0, [r7, #7]
 800b9ac:	f107 0318 	add.w	r3, r7, #24
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	f107 031a 	add.w	r3, r7, #26
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	f7ff fe95 	bl	800b6e8 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800b9be:	f107 0414 	add.w	r4, r7, #20
 800b9c2:	f107 0216 	add.w	r2, r7, #22
 800b9c6:	7939      	ldrb	r1, [r7, #4]
 800b9c8:	7978      	ldrb	r0, [r7, #5]
 800b9ca:	f107 0310 	add.w	r3, r7, #16
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	f107 0312 	add.w	r3, r7, #18
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	f7ff fe86 	bl	800b6e8 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800b9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9de:	2200      	movs	r2, #0
 800b9e0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800b9e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800b9e8:	8abb      	ldrh	r3, [r7, #20]
 800b9ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b9ec:	e06c      	b.n	800bac8 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800b9ee:	8afb      	ldrh	r3, [r7, #22]
 800b9f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b9f2:	e05d      	b.n	800bab0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800b9f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b9fa:	b2d1      	uxtb	r1, r2
 800b9fc:	f107 020f 	add.w	r2, r7, #15
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fe1c 	bl	800b63e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800ba06:	7bf8      	ldrb	r0, [r7, #15]
 800ba08:	f107 030c 	add.w	r3, r7, #12
 800ba0c:	f107 020d 	add.w	r2, r7, #13
 800ba10:	f107 010e 	add.w	r1, r7, #14
 800ba14:	f7ff fdf2 	bl	800b5fc <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1e:	4413      	add	r3, r2
 800ba20:	781a      	ldrb	r2, [r3, #0]
 800ba22:	7b3b      	ldrb	r3, [r7, #12]
 800ba24:	4013      	ands	r3, r2
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d03b      	beq.n	800baa4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800ba2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fecb 	bl	800b7d2 <VL53LX_is_aperture_location>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800ba42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800ba4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ba4c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ba4e:	e002      	b.n	800ba56 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800ba50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba54:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ba56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ba5a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	db19      	blt.n	800ba96 <VL53LX_calc_mm_effective_spads+0x156>
 800ba62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ba66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	dc13      	bgt.n	800ba96 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ba6e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ba72:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800ba76:	429a      	cmp	r2, r3
 800ba78:	db0d      	blt.n	800ba96 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ba7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ba7e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800ba82:	429a      	cmp	r2, r3
 800ba84:	dc07      	bgt.n	800ba96 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800ba86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba88:	881a      	ldrh	r2, [r3, #0]
 800ba8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba8c:	4413      	add	r3, r2
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba92:	801a      	strh	r2, [r3, #0]
 800ba94:	e006      	b.n	800baa4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800ba96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba98:	881a      	ldrh	r2, [r3, #0]
 800ba9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba9c:	4413      	add	r3, r2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baa2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800baa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3301      	adds	r3, #1
 800baac:	b29b      	uxth	r3, r3
 800baae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bab4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800bab8:	429a      	cmp	r2, r3
 800baba:	dd9b      	ble.n	800b9f4 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800babc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3301      	adds	r3, #1
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bac8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bacc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800bad0:	429a      	cmp	r2, r3
 800bad2:	dd8c      	ble.n	800b9ee <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	372c      	adds	r7, #44	@ 0x2c
 800bada:	46bd      	mov	sp, r7
 800badc:	bd90      	pop	{r4, r7, pc}

0800bade <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7fd ff71 	bl	80099d8 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	7c9a      	ldrb	r2, [r3, #18]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	3314      	adds	r3, #20
 800bb20:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800bb22:	2300      	movs	r3, #0
 800bb24:	75fb      	strb	r3, [r7, #23]
 800bb26:	e06b      	b.n	800bc00 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d034      	beq.n	800bb9c <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800bb32:	e05f      	b.n	800bbf4 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800bb6c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	8a9a      	ldrh	r2, [r3, #20]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	601a      	str	r2, [r3, #0]

			break;
 800bb9a:	e02b      	b.n	800bbf4 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800bbcc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	611a      	str	r2, [r3, #16]
			break;
 800bbf2:	bf00      	nop
		}

		pdata++;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	334c      	adds	r3, #76	@ 0x4c
 800bbf8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	7c9b      	ldrb	r3, [r3, #18]
 800bc04:	7dfa      	ldrb	r2, [r7, #23]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d38e      	bcc.n	800bb28 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b089      	sub	sp, #36	@ 0x24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3318      	adds	r3, #24
 800bc24:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800bc2c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800bc34:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bc3c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800bc3e:	4613      	mov	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	3302      	adds	r3, #2
 800bc50:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800bc76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3724      	adds	r7, #36	@ 0x24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b08b      	sub	sp, #44	@ 0x2c
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3318      	adds	r3, #24
 800bc98:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800bca0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800bca8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bcb0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800bcb8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800bcba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bcbe:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800bcc0:	7bfa      	ldrb	r2, [r7, #15]
 800bcc2:	6939      	ldr	r1, [r7, #16]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	440b      	add	r3, r1
 800bcce:	3306      	adds	r3, #6
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bcda:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bce2:	e01a      	b.n	800bd1a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800bce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	214c      	movs	r1, #76	@ 0x4c
 800bcec:	fb01 f303 	mul.w	r3, r1, r3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	334a      	adds	r3, #74	@ 0x4a
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d209      	bcs.n	800bd10 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800bcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	214c      	movs	r1, #76	@ 0x4c
 800bd04:	fb01 f303 	mul.w	r3, r1, r3
 800bd08:	4413      	add	r3, r2
 800bd0a:	334a      	adds	r3, #74	@ 0x4a
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 800bd10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd14:	3301      	adds	r3, #1
 800bd16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	7c9b      	ldrb	r3, [r3, #18]
 800bd1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3de      	bcc.n	800bce4 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800bd26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800bd2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd30:	623b      	str	r3, [r7, #32]
 800bd32:	e00e      	b.n	800bd52 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800bd34:	89bb      	ldrh	r3, [r7, #12]
 800bd36:	039b      	lsls	r3, r3, #14
 800bd38:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd3c:	6a3a      	ldr	r2, [r7, #32]
 800bd3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd42:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd4a:	d302      	bcc.n	800bd52 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800bd4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd50:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800bd52:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800bd58:	6939      	ldr	r1, [r7, #16]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	440b      	add	r3, r1
 800bd64:	3306      	adds	r3, #6
 800bd66:	4602      	mov	r2, r0
 800bd68:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800bd6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	372c      	adds	r7, #44	@ 0x2c
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b08a      	sub	sp, #40	@ 0x28
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	3318      	adds	r3, #24
 800bd8c:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	332c      	adds	r3, #44	@ 0x2c
 800bd92:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	33c2      	adds	r3, #194	@ 0xc2
 800bd98:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800bda0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	3302      	adds	r3, #2
 800bda6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bdb8:	461a      	mov	r2, r3
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d11e      	bne.n	800be04 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10b      	bne.n	800bde4 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d05d      	beq.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	719a      	strb	r2, [r3, #6]
 800be02:	e050      	b.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800be0a:	461a      	mov	r2, r3
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	4413      	add	r3, r2
 800be10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be14:	2b02      	cmp	r3, #2
 800be16:	d11e      	bne.n	800be56 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10b      	bne.n	800be36 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d034      	beq.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	719a      	strb	r2, [r3, #6]
 800be54:	e027      	b.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800be5c:	461a      	mov	r2, r3
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4413      	add	r3, r2
 800be62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be66:	2b03      	cmp	r3, #3
 800be68:	d11d      	bne.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00b      	beq.n	800bea6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800bea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d109      	bne.n	800bec2 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800beba:	461a      	mov	r2, r3
 800bebc:	6978      	ldr	r0, [r7, #20]
 800bebe:	f7fd f961 	bl	8009184 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bec2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3728      	adds	r7, #40	@ 0x28
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800bece:	b480      	push	{r7}
 800bed0:	b089      	sub	sp, #36	@ 0x24
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
 800beda:	460b      	mov	r3, r1
 800bedc:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800bede:	2300      	movs	r3, #0
 800bee0:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3318      	adds	r3, #24
 800bee6:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800beee:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	7afa      	ldrb	r2, [r7, #11]
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	e01e      	b.n	800bf3c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d111      	bne.n	800bf30 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2bff      	cmp	r3, #255	@ 0xff
 800bf12:	d103      	bne.n	800bf1c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2280      	movs	r2, #128	@ 0x80
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	e005      	b.n	800bf28 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	3301      	adds	r3, #1
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	e005      	b.n	800bf3c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800bf3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3724      	adds	r7, #36	@ 0x24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08a      	sub	sp, #40	@ 0x28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	607a      	str	r2, [r7, #4]
 800bf56:	461a      	mov	r2, r3
 800bf58:	460b      	mov	r3, r1
 800bf5a:	72fb      	strb	r3, [r7, #11]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3318      	adds	r3, #24
 800bf6a:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800bf74:	7afa      	ldrb	r2, [r7, #11]
 800bf76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe f938 	bl	800a1f0 <VL53LX_calc_macro_period_us>
 800bf80:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	031b      	lsls	r3, r3, #12
 800bf90:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	085b      	lsrs	r3, r3, #1
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	4413      	add	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	2bff      	cmp	r3, #255	@ 0xff
 800bfaa:	d904      	bls.n	800bfb6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	22ff      	movs	r2, #255	@ 0xff
 800bfb0:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800bfb4:	e004      	b.n	800bfc0 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	7afa      	ldrb	r2, [r7, #11]
 800bfc4:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800bfc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	214b      	movs	r1, #75	@ 0x4b
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f007 f936 	bl	801324c <VL53LX_WrByte>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800bfe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10a      	bne.n	800c004 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800bff4:	461a      	mov	r2, r3
 800bff6:	2160      	movs	r1, #96	@ 0x60
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f007 f927 	bl	801324c <VL53LX_WrByte>
 800bffe:	4603      	mov	r3, r0
 800c000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800c00a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800c012:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800c014:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d109      	bne.n	800c030 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800c01c:	f107 0214 	add.w	r2, r7, #20
 800c020:	2302      	movs	r3, #2
 800c022:	2178      	movs	r1, #120	@ 0x78
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f007 f8a5 	bl	8013174 <VL53LX_WriteMulti>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	893a      	ldrh	r2, [r7, #8]
 800c034:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800c038:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d108      	bne.n	800c052 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800c040:	893b      	ldrh	r3, [r7, #8]
 800c042:	461a      	mov	r2, r3
 800c044:	211c      	movs	r1, #28
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f007 f92a 	bl	80132a0 <VL53LX_WrWord>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800c052:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c056:	2b00      	cmp	r3, #0
 800c058:	d108      	bne.n	800c06c <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800c05a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c05c:	461a      	mov	r2, r3
 800c05e:	2164      	movs	r1, #100	@ 0x64
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f007 f91d 	bl	80132a0 <VL53LX_WrWord>
 800c066:	4603      	mov	r3, r0
 800c068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800c06c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c070:	2b00      	cmp	r3, #0
 800c072:	d108      	bne.n	800c086 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800c074:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c076:	461a      	mov	r2, r3
 800c078:	2166      	movs	r1, #102	@ 0x66
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f007 f910 	bl	80132a0 <VL53LX_WrWord>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800c086:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3728      	adds	r7, #40	@ 0x28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800c092:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c096:	b0a2      	sub	sp, #136	@ 0x88
 800c098:	af00      	add	r7, sp, #0
 800c09a:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c09c:	2300      	movs	r3, #0
 800c09e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a4:	3318      	adds	r3, #24
 800c0a6:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800c0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0aa:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800c0ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800c0b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0b2:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800c0ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0bc:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800c0c0:	3318      	adds	r3, #24
 800c0c2:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800c0c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c6:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800c0c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0ca:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800c0ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800c0d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800c0d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800c0dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800c0e0:	4413      	add	r3, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	461c      	mov	r4, r3
 800c0e6:	4615      	mov	r5, r2
 800c0e8:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800c0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800c0f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c0f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800c0fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c100:	4622      	mov	r2, r4
 800c102:	462b      	mov	r3, r5
 800c104:	f04f 0000 	mov.w	r0, #0
 800c108:	f04f 0100 	mov.w	r1, #0
 800c10c:	0159      	lsls	r1, r3, #5
 800c10e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c112:	0150      	lsls	r0, r2, #5
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	ebb2 0804 	subs.w	r8, r2, r4
 800c11c:	eb63 0905 	sbc.w	r9, r3, r5
 800c120:	f04f 0200 	mov.w	r2, #0
 800c124:	f04f 0300 	mov.w	r3, #0
 800c128:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c12c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c130:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c134:	4690      	mov	r8, r2
 800c136:	4699      	mov	r9, r3
 800c138:	eb18 0304 	adds.w	r3, r8, r4
 800c13c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c13e:	eb49 0305 	adc.w	r3, r9, r5
 800c142:	637b      	str	r3, [r7, #52]	@ 0x34
 800c144:	f04f 0200 	mov.w	r2, #0
 800c148:	f04f 0300 	mov.w	r3, #0
 800c14c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c150:	4629      	mov	r1, r5
 800c152:	00cb      	lsls	r3, r1, #3
 800c154:	4621      	mov	r1, r4
 800c156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c15a:	4621      	mov	r1, r4
 800c15c:	00ca      	lsls	r2, r1, #3
 800c15e:	4610      	mov	r0, r2
 800c160:	4619      	mov	r1, r3
 800c162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c166:	2200      	movs	r2, #0
 800c168:	643b      	str	r3, [r7, #64]	@ 0x40
 800c16a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c16c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c170:	f7f4 f8ae 	bl	80002d0 <__aeabi_uldivmod>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800c17c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c180:	4622      	mov	r2, r4
 800c182:	462b      	mov	r3, r5
 800c184:	f04f 0000 	mov.w	r0, #0
 800c188:	f04f 0100 	mov.w	r1, #0
 800c18c:	0159      	lsls	r1, r3, #5
 800c18e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c192:	0150      	lsls	r0, r2, #5
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	ebb2 0a04 	subs.w	sl, r2, r4
 800c19c:	eb63 0b05 	sbc.w	fp, r3, r5
 800c1a0:	f04f 0200 	mov.w	r2, #0
 800c1a4:	f04f 0300 	mov.w	r3, #0
 800c1a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c1ac:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800c1b0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800c1b4:	4692      	mov	sl, r2
 800c1b6:	469b      	mov	fp, r3
 800c1b8:	eb1a 0304 	adds.w	r3, sl, r4
 800c1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1be:	eb4b 0305 	adc.w	r3, fp, r5
 800c1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1c4:	f04f 0200 	mov.w	r2, #0
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	00cb      	lsls	r3, r1, #3
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1da:	4621      	mov	r1, r4
 800c1dc:	00ca      	lsls	r2, r1, #3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c1ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c1f0:	f7f4 f86e 	bl	80002d0 <__aeabi_uldivmod>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800c1fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c202:	8ad2      	ldrh	r2, [r2, #22]
 800c204:	fb02 f303 	mul.w	r3, r2, r3
 800c208:	2200      	movs	r2, #0
 800c20a:	623b      	str	r3, [r7, #32]
 800c20c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c20e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c212:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800c216:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c21a:	4313      	orrs	r3, r2
 800c21c:	d105      	bne.n	800c22a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800c21e:	f04f 0201 	mov.w	r2, #1
 800c222:	f04f 0300 	mov.w	r3, #0
 800c226:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800c22a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	f04f 0400 	mov.w	r4, #0
 800c236:	f04f 0500 	mov.w	r5, #0
 800c23a:	015d      	lsls	r5, r3, #5
 800c23c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800c240:	0154      	lsls	r4, r2, #5
 800c242:	4622      	mov	r2, r4
 800c244:	462b      	mov	r3, r5
 800c246:	1a14      	subs	r4, r2, r0
 800c248:	61bc      	str	r4, [r7, #24]
 800c24a:	eb63 0301 	sbc.w	r3, r3, r1
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800c25c:	464c      	mov	r4, r9
 800c25e:	00a3      	lsls	r3, r4, #2
 800c260:	4644      	mov	r4, r8
 800c262:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c266:	4644      	mov	r4, r8
 800c268:	00a2      	lsls	r2, r4, #2
 800c26a:	4614      	mov	r4, r2
 800c26c:	461d      	mov	r5, r3
 800c26e:	4623      	mov	r3, r4
 800c270:	181b      	adds	r3, r3, r0
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	462b      	mov	r3, r5
 800c276:	eb41 0303 	adc.w	r3, r1, r3
 800c27a:	617b      	str	r3, [r7, #20]
 800c27c:	f04f 0200 	mov.w	r2, #0
 800c280:	f04f 0300 	mov.w	r3, #0
 800c284:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c288:	4629      	mov	r1, r5
 800c28a:	02cb      	lsls	r3, r1, #11
 800c28c:	4621      	mov	r1, r4
 800c28e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c292:	4621      	mov	r1, r4
 800c294:	02ca      	lsls	r2, r1, #11
 800c296:	461c      	mov	r4, r3
 800c298:	4613      	mov	r3, r2
 800c29a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800c29e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c2a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c2a6:	f7f4 f813 	bl	80002d0 <__aeabi_uldivmod>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800c2b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	f04f 0400 	mov.w	r4, #0
 800c2be:	f04f 0500 	mov.w	r5, #0
 800c2c2:	015d      	lsls	r5, r3, #5
 800c2c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800c2c8:	0154      	lsls	r4, r2, #5
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	1a14      	subs	r4, r2, r0
 800c2d0:	60bc      	str	r4, [r7, #8]
 800c2d2:	eb63 0301 	sbc.w	r3, r3, r1
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	f04f 0300 	mov.w	r3, #0
 800c2e0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800c2e4:	464c      	mov	r4, r9
 800c2e6:	00a3      	lsls	r3, r4, #2
 800c2e8:	4644      	mov	r4, r8
 800c2ea:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c2ee:	4644      	mov	r4, r8
 800c2f0:	00a2      	lsls	r2, r4, #2
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	461d      	mov	r5, r3
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	181b      	adds	r3, r3, r0
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	eb41 0303 	adc.w	r3, r1, r3
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	f04f 0300 	mov.w	r3, #0
 800c30c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c310:	4629      	mov	r1, r5
 800c312:	02cb      	lsls	r3, r1, #11
 800c314:	4621      	mov	r1, r4
 800c316:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c31a:	4621      	mov	r1, r4
 800c31c:	02ca      	lsls	r2, r1, #11
 800c31e:	461c      	mov	r4, r3
 800c320:	4613      	mov	r3, r2
 800c322:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800c326:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c32a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c32e:	f7f3 ffcf 	bl	80002d0 <__aeabi_uldivmod>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800c33a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c33c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c33e:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800c340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d802      	bhi.n	800c34e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800c348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c34a:	2202      	movs	r2, #2
 800c34c:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800c34e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800c352:	4618      	mov	r0, r3
 800c354:	3788      	adds	r7, #136	@ 0x88
 800c356:	46bd      	mov	sp, r7
 800c358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c35c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b096      	sub	sp, #88	@ 0x58
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3318      	adds	r3, #24
 800c374:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800c376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c378:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c37c:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800c37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c380:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800c384:	331c      	adds	r3, #28
 800c386:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800c388:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d107      	bne.n	800c3a0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	889b      	ldrh	r3, [r3, #4]
 800c394:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	609a      	str	r2, [r3, #8]
 800c39e:	e002      	b.n	800c3a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ae:	899b      	ldrh	r3, [r3, #12]
 800c3b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b6:	89db      	ldrh	r3, [r3, #14]
 800c3b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d004      	beq.n	800c3d0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d126      	bne.n	800c41e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800c3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d2:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d022      	beq.n	800c41e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800c3d8:	f107 0317 	add.w	r3, r7, #23
 800c3dc:	4619      	mov	r1, r3
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f000 fea7 	bl	800d132 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800c3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f0:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d003      	beq.n	800c400 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800c3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3fe:	e006      	b.n	800c40e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800c404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c406:	3202      	adds	r2, #2
 800c408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40c:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800c40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c410:	889b      	ldrh	r3, [r3, #4]
 800c412:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800c416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c418:	88db      	ldrh	r3, [r3, #6]
 800c41a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800c428:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	795b      	ldrb	r3, [r3, #5]
 800c434:	f043 0301 	orr.w	r3, r3, #1
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800c448:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	795b      	ldrb	r3, [r3, #5]
 800c454:	f043 0302 	orr.w	r3, r3, #2
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800c45e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800c464:	2301      	movs	r3, #1
 800c466:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d108      	bne.n	800c484 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c476:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c47e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800c482:	e017      	b.n	800c4b4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800c484:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c488:	019a      	lsls	r2, r3, #6
 800c48a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c49a:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800c49c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800c4a0:	019a      	lsls	r2, r3, #6
 800c4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800c4b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d12a      	bne.n	800c514 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800c4c6:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800c4ca:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800c4cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ce:	119b      	asrs	r3, r3, #6
 800c4d0:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800c4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4d8:	db02      	blt.n	800c4e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800c4da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4de:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800c4e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4e2:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800c4f0:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800c4f4:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800c4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f8:	119b      	asrs	r3, r3, #6
 800c4fa:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800c4fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c502:	db02      	blt.n	800c50a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800c504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c508:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800c50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c50c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	81da      	strh	r2, [r3, #14]
 800c512:	e042      	b.n	800c59a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d13d      	bne.n	800c59a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800c522:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800c528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da00      	bge.n	800c530 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800c52e:	330f      	adds	r3, #15
 800c530:	111b      	asrs	r3, r3, #4
 800c532:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800c534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800c53a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c540:	4413      	add	r3, r2
 800c542:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800c544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c54a:	db02      	blt.n	800c552 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800c54c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c550:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800c552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c554:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800c55e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800c564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c566:	4a55      	ldr	r2, [pc, #340]	@ (800c6bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800c568:	fb82 1203 	smull	r1, r2, r2, r3
 800c56c:	1152      	asrs	r2, r2, #5
 800c56e:	17db      	asrs	r3, r3, #31
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800c574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800c57a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800c57e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c580:	4413      	add	r3, r2
 800c582:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800c584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c58a:	db02      	blt.n	800c592 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800c58c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c590:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800c592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c594:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	785b      	ldrb	r3, [r3, #1]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d17f      	bne.n	800c6a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800c5a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d07b      	beq.n	800c6a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800c5b6:	f107 0317 	add.w	r3, r7, #23
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 fdb8 	bl	800d132 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800c5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c4:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800c5c8:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800c5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d049      	beq.n	800c66a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d8:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d144      	bne.n	800c66a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800c5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d041      	beq.n	800c66a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800c5ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da01      	bge.n	800c5fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800c5f6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c5fa:	125b      	asrs	r3, r3, #9
 800c5fc:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c608:	461a      	mov	r2, r3
			if ((max ==  0)||
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	db03      	blt.n	800c618 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	719a      	strb	r2, [r3, #6]
 800c616:	e028      	b.n	800c66a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800c618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c620:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800c626:	2300      	movs	r3, #0
 800c628:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800c62c:	e014      	b.n	800c658 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800c62e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	4413      	add	r3, r2
 800c634:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800c636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c638:	4a21      	ldr	r2, [pc, #132]	@ (800c6c0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800c63a:	fba2 2303 	umull	r2, r3, r2, r3
 800c63e:	095a      	lsrs	r2, r3, #5
 800c640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c642:	441a      	add	r2, r3
 800c644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c646:	601a      	str	r2, [r3, #0]
					pcpo++;
 800c648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c64a:	3304      	adds	r3, #4
 800c64c:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800c64e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c652:	3301      	adds	r3, #1
 800c654:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800c658:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65e:	3b01      	subs	r3, #1
 800c660:	429a      	cmp	r2, r3
 800c662:	d3e4      	bcc.n	800c62e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800c664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c668:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	799b      	ldrb	r3, [r3, #6]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d017      	beq.n	800c6a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	789b      	ldrb	r3, [r3, #2]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d105      	bne.n	800c6a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800c6a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d002      	beq.n	800c6b0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c6b0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3758      	adds	r7, #88	@ 0x58
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	66666667 	.word	0x66666667
 800c6c0:	51eb851f 	.word	0x51eb851f

0800c6c4 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800c6c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6c8:	b0a2      	sub	sp, #136	@ 0x88
 800c6ca:	af02      	add	r7, sp, #8
 800c6cc:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	3318      	adds	r3, #24
 800c6d8:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800c6e0:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800c6e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6e4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800c6e8:	3314      	adds	r3, #20
 800c6ea:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800c6ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6ee:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800c6f2:	3318      	adds	r3, #24
 800c6f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800c6f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6f8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c6fc:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800c6fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c700:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800c702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c704:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c708:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800c726:	f04f 0200 	mov.w	r2, #0
 800c72a:	f04f 0300 	mov.w	r3, #0
 800c72e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800c732:	2300      	movs	r3, #0
 800c734:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800c754:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800c758:	4619      	mov	r1, r3
 800c75a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c75c:	f000 fce9 	bl	800d132 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800c760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c764:	2b00      	cmp	r3, #0
 800c766:	d004      	beq.n	800c772 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800c768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c76a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d002      	beq.n	800c778 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800c772:	2301      	movs	r3, #1
 800c774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800c778:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c77a:	f000 fb10 	bl	800cd9e <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800c77e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800c786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c78a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c78e:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800c792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c794:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800c798:	429a      	cmp	r2, r3
 800c79a:	d901      	bls.n	800c7a0 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e000      	b.n	800c7a2 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800c7a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7a8:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d106      	bne.n	800c7be <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800c7b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7b2:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800c7b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d101      	bne.n	800c7c2 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800c7c2:	2300      	movs	r3, #0
	merging_complete =
 800c7c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800c7c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7ca:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10e      	bne.n	800c7ee <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800c7d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800c7d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7da:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800c7de:	2b09      	cmp	r3, #9
 800c7e0:	d105      	bne.n	800c7ee <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c7e2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800c7ee:	2300      	movs	r3, #0
	run_smudge_detection =
 800c7f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800c7f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f6:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800c7fa:	2b09      	cmp	r3, #9
 800c7fc:	f000 80a6 	beq.w	800c94c <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800c800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c802:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800c804:	2b01      	cmp	r3, #1
 800c806:	f040 80a1 	bne.w	800c94c <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800c80a:	2302      	movs	r3, #2
 800c80c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800c810:	2300      	movs	r3, #0
 800c812:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c816:	e02d      	b.n	800c874 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800c818:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800c81c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c81e:	234c      	movs	r3, #76	@ 0x4c
 800c820:	fb01 f303 	mul.w	r3, r1, r3
 800c824:	4413      	add	r3, r2
 800c826:	335e      	adds	r3, #94	@ 0x5e
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	2b09      	cmp	r3, #9
 800c82c:	d11d      	bne.n	800c86a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800c82e:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800c832:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c834:	234c      	movs	r3, #76	@ 0x4c
 800c836:	fb01 f303 	mul.w	r3, r1, r3
 800c83a:	4413      	add	r3, r2
 800c83c:	335a      	adds	r3, #90	@ 0x5a
 800c83e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c842:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800c844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c846:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800c848:	429a      	cmp	r2, r3
 800c84a:	dc03      	bgt.n	800c854 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c852:	e00a      	b.n	800c86a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800c854:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d106      	bne.n	800c86a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800c85c:	2301      	movs	r3, #1
 800c85e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800c862:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c866:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800c86a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c86e:	3301      	adds	r3, #1
 800c870:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c876:	7c9a      	ldrb	r2, [r3, #18]
 800c878:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d3cb      	bcc.n	800c818 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800c880:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c884:	2b02      	cmp	r3, #2
 800c886:	d102      	bne.n	800c88e <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800c88e:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800c892:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c894:	234c      	movs	r3, #76	@ 0x4c
 800c896:	fb01 f303 	mul.w	r3, r1, r3
 800c89a:	4413      	add	r3, r2
 800c89c:	3348      	adds	r3, #72	@ 0x48
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800c8a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d150      	bne.n	800c94c <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800c8aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	469a      	mov	sl, r3
 800c8b0:	4693      	mov	fp, r2
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	f04f 0000 	mov.w	r0, #0
 800c8ba:	f04f 0100 	mov.w	r1, #0
 800c8be:	0159      	lsls	r1, r3, #5
 800c8c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c8c4:	0150      	lsls	r0, r2, #5
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	ebb2 040a 	subs.w	r4, r2, sl
 800c8ce:	eb63 050b 	sbc.w	r5, r3, fp
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	00ab      	lsls	r3, r5, #2
 800c8dc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c8e0:	00a2      	lsls	r2, r4, #2
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	461d      	mov	r5, r3
 800c8e6:	eb14 080a 	adds.w	r8, r4, sl
 800c8ea:	eb45 090b 	adc.w	r9, r5, fp
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c902:	4690      	mov	r8, r2
 800c904:	4699      	mov	r9, r3
 800c906:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800c90a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c90e:	f04f 0200 	mov.w	r2, #0
 800c912:	f04f 0300 	mov.w	r3, #0
 800c916:	024b      	lsls	r3, r1, #9
 800c918:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800c91c:	0242      	lsls	r2, r0, #9
 800c91e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800c922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c926:	2200      	movs	r2, #0
 800c928:	61bb      	str	r3, [r7, #24]
 800c92a:	61fa      	str	r2, [r7, #28]
 800c92c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c930:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800c934:	4621      	mov	r1, r4
 800c936:	428a      	cmp	r2, r1
 800c938:	4629      	mov	r1, r5
 800c93a:	418b      	sbcs	r3, r1
 800c93c:	d203      	bcs.n	800c946 <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800c93e:	2301      	movs	r3, #1
 800c940:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c944:	e002      	b.n	800c94c <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800c94c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 810b 	beq.w	800cb6c <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800c956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c958:	2200      	movs	r2, #0
 800c95a:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800c95c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c95e:	f7ff fb98 	bl	800c092 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800c962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c964:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800c968:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800c96a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800c970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800c976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c978:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800c97e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	1ad2      	subs	r2, r2, r3
 800c984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c986:	4413      	add	r3, r2
 800c988:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800c98a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	da02      	bge.n	800c996 <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800c990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c992:	425b      	negs	r3, r3
 800c994:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800c996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	461a      	mov	r2, r3
 800c99c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	dd0c      	ble.n	800c9bc <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800c9a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800c9a6:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800c9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	da03      	bge.n	800c9b6 <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800c9ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	709a      	strb	r2, [r3, #2]
 800c9b4:	e002      	b.n	800c9bc <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800c9b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800c9bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9c4:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800c9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d906      	bls.n	800c9e0 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800c9d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800c9d8:	2302      	movs	r3, #2
 800c9da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c9de:	e014      	b.n	800ca0a <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800c9e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c9e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	6139      	str	r1, [r7, #16]
 800c9ec:	6178      	str	r0, [r7, #20]
 800c9ee:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	1851      	adds	r1, r2, r1
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	eb43 0101 	adc.w	r1, r3, r1
 800c9fe:	60f9      	str	r1, [r7, #12]
 800ca00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca06:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ca0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d202      	bcs.n	800ca1c <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800ca16:	2301      	movs	r3, #1
 800ca18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ca1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ca22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2200      	movs	r2, #0
 800ca28:	603b      	str	r3, [r7, #0]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca30:	f7f3 fc4e 	bl	80002d0 <__aeabi_uldivmod>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ca38:	4613      	mov	r3, r2
 800ca3a:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ca3c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca40:	1ad2      	subs	r2, r2, r3
 800ca42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca44:	4413      	add	r3, r2
 800ca46:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ca48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	da02      	bge.n	800ca54 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800ca4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca50:	425b      	negs	r3, r3
 800ca52:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ca54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d112      	bne.n	800ca82 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ca5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ca62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca64:	4293      	cmp	r3, r2
 800ca66:	db0c      	blt.n	800ca82 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ca68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ca6c:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ca6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca70:	429a      	cmp	r2, r3
 800ca72:	da03      	bge.n	800ca7c <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800ca74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca76:	2201      	movs	r2, #1
 800ca78:	70da      	strb	r2, [r3, #3]
 800ca7a:	e002      	b.n	800ca82 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ca7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca7e:	2202      	movs	r2, #2
 800ca80:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ca82:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d108      	bne.n	800ca9c <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ca8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ca90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca92:	4293      	cmp	r3, r2
 800ca94:	da02      	bge.n	800ca9c <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800ca96:	2302      	movs	r3, #2
 800ca98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800ca9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca9e:	2200      	movs	r2, #0
 800caa0:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800caa2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d112      	bne.n	800cad0 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800caaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caac:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00e      	beq.n	800cad0 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800cab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800caba:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800cabe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d905      	bls.n	800cad0 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800cac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac6:	2201      	movs	r2, #1
 800cac8:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800caca:	2302      	movs	r3, #2
 800cacc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800cad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cad2:	7c1b      	ldrb	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d007      	beq.n	800cae8 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800cad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cada:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800cadc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cade:	429a      	cmp	r2, r3
 800cae0:	d902      	bls.n	800cae8 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800cae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800cae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caea:	7c1b      	ldrb	r3, [r3, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d107      	bne.n	800cb00 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800caf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caf2:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800caf4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d202      	bcs.n	800cb00 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800cafa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800cb00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb02:	089b      	lsrs	r3, r3, #2
 800cb04:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800cb06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb0c:	d301      	bcc.n	800cb12 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800cb0e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc0c <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800cb10:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800cb12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10d      	bne.n	800cb36 <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	2301      	movs	r3, #1
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb26:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cb28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb2a:	f7ff fc17 	bl	800c35c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800cb34:	e009      	b.n	800cb4a <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800cb36:	2301      	movs	r3, #1
 800cb38:	9301      	str	r3, [sp, #4]
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cb44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb46:	f7ff fc09 	bl	800c35c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800cb4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d10c      	bne.n	800cb6c <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800cb52:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800cb54:	f04f 0200 	mov.w	r2, #0
 800cb58:	f04f 0300 	mov.w	r3, #0
 800cb5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800cb60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800cb66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb68:	2200      	movs	r2, #0
 800cb6a:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800cb72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d140      	bne.n	800cbfc <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800cb7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb82:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800cb84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb86:	691a      	ldr	r2, [r3, #16]
 800cb88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d202      	bcs.n	800cb96 <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800cb96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9a:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800cb9c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d110      	bne.n	800cbc6 <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800cba4:	2300      	movs	r3, #0
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbb0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cbb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbb4:	f7ff fbd2 	bl	800c35c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800cbb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbba:	2202      	movs	r2, #2
 800cbbc:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800cbc4:	e009      	b.n	800cbda <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbd2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cbd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbd6:	f7ff fbc1 	bl	800c35c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800cbda:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d10c      	bne.n	800cbfc <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800cbe2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800cbf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800cbf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbfc:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3780      	adds	r7, #128	@ 0x80
 800cc04:	46bd      	mov	sp, r7
 800cc06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0003ffff 	.word	0x0003ffff

0800cc10 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3318      	adds	r3, #24
 800cc20:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800cc28:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc60:	461a      	mov	r2, r3
 800cc62:	2364      	movs	r3, #100	@ 0x64
 800cc64:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2300      	movs	r3, #0
 800cc72:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc88:	461a      	mov	r2, r3
 800cc8a:	23c8      	movs	r3, #200	@ 0xc8
 800cc8c:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc96:	461a      	mov	r2, r3
 800cc98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cc9c:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cca6:	461a      	mov	r2, r3
 800cca8:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800ccac:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800ccbc:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2380      	movs	r3, #128	@ 0x80
 800ccca:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cce4:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccf2:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800cd0e:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2328      	movs	r3, #40	@ 0x28
 800cd1c:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd26:	461a      	mov	r2, r3
 800cd28:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800cd2c:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd36:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800cd3a:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd44:	461a      	mov	r2, r3
 800cd46:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800cd4a:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd54:	461a      	mov	r2, r3
 800cd56:	2300      	movs	r3, #0
 800cd58:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd62:	461a      	mov	r2, r3
 800cd64:	2300      	movs	r3, #0
 800cd66:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800cd70:	4619      	mov	r1, r3
 800cd72:	f04f 0200 	mov.w	r2, #0
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd84:	461a      	mov	r2, r3
 800cd86:	2300      	movs	r3, #0
 800cd88:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f000 f806 	bl	800cd9e <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800cd92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800cdb0:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2200      	movs	r2, #0
 800cde0:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2200      	movs	r2, #0
 800cde6:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2200      	movs	r2, #0
 800cdec:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800cdee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3318      	adds	r3, #24
 800ce0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce16:	461a      	mov	r2, r3
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	2218      	movs	r2, #24
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f010 fd08 	bl	801d858 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800ce48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3318      	adds	r3, #24
 800ce64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cec0:	461a      	mov	r2, r3
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cece:	2200      	movs	r2, #0
 800ced0:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800ced4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3318      	adds	r3, #24
 800cef4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cefc:	22ff      	movs	r2, #255	@ 0xff
 800cefe:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf14:	461a      	mov	r2, r3
 800cf16:	2300      	movs	r3, #0
 800cf18:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf3c:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf4c:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d007      	beq.n	800cf64 <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf5a:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800cf6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3318      	adds	r3, #24
 800cf88:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf9a:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfaa:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800cfb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800cfc6:	f003 0303 	and.w	r3, r3, #3
 800cfca:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfd2:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cfda:	4413      	add	r3, r2
 800cfdc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cff2:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cffc:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d006:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800d010:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	3318      	adds	r3, #24
 800d02c:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800d034:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	8a1b      	ldrh	r3, [r3, #16]
 800d03e:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	891b      	ldrh	r3, [r3, #8]
 800d044:	4413      	add	r3, r2
	utemp32a =
 800d046:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d04e:	d302      	bcc.n	800d056 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800d050:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d054:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	041b      	lsls	r3, r3, #16
 800d05a:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d066:	23f1      	movs	r3, #241	@ 0xf1
 800d068:	75fb      	strb	r3, [r7, #23]
 800d06a:	e040      	b.n	800d0ee <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800d072:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	fbb3 f3f2 	udiv	r3, r3, r2
 800d07a:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d082:	461a      	mov	r2, r3
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800d090:	041b      	lsls	r3, r3, #16
 800d092:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d09a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d0a2:	23f1      	movs	r3, #241	@ 0xf1
 800d0a4:	75fb      	strb	r3, [r7, #23]
 800d0a6:	e022      	b.n	800d0ee <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0ae:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b8:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c0:	d302      	bcc.n	800d0c8 <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800d0c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0c6:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0d2:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0dc:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800d0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0f2:	f113 0f0f 	cmn.w	r3, #15
 800d0f6:	d114      	bne.n	800d122 <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d102:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d10c:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2202      	movs	r2, #2
 800d11a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800d11e:	2300      	movs	r3, #0
 800d120:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d126:	4618      	mov	r0, r3
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800d132:	b480      	push	{r7}
 800d134:	b087      	sub	sp, #28
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3318      	adds	r3, #24
 800d140:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800d150:	2b07      	cmp	r3, #7
 800d152:	bf0c      	ite	eq
 800d154:	2301      	moveq	r3, #1
 800d156:	2300      	movne	r3, #0
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800d15c:	2300      	movs	r3, #0
 800d15e:	75fb      	strb	r3, [r7, #23]
 800d160:	e019      	b.n	800d196 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800d162:	7df9      	ldrb	r1, [r7, #23]
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	6938      	ldr	r0, [r7, #16]
 800d168:	461a      	mov	r2, r3
 800d16a:	0052      	lsls	r2, r2, #1
 800d16c:	441a      	add	r2, r3
 800d16e:	0153      	lsls	r3, r2, #5
 800d170:	461a      	mov	r2, r3
 800d172:	460b      	mov	r3, r1
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	440b      	add	r3, r1
 800d178:	019b      	lsls	r3, r3, #6
 800d17a:	4413      	add	r3, r2
 800d17c:	4403      	add	r3, r0
 800d17e:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800d182:	330c      	adds	r3, #12
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	dd02      	ble.n	800d190 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800d18a:	7dbb      	ldrb	r3, [r7, #22]
 800d18c:	3301      	adds	r3, #1
 800d18e:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	3301      	adds	r3, #1
 800d194:	75fb      	strb	r3, [r7, #23]
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	2b05      	cmp	r3, #5
 800d19a:	d9e2      	bls.n	800d162 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	7dba      	ldrb	r2, [r7, #22]
 800d1a0:	701a      	strb	r2, [r3, #0]

	return status;
 800d1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800d1b2:	b480      	push	{r7}
 800d1b4:	b085      	sub	sp, #20
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d005      	beq.n	800d1d2 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800d1c6:	88fb      	ldrh	r3, [r7, #6]
 800d1c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d1cc:	fb92 f3f3 	sdiv	r3, r2, r3
 800d1d0:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800d1e0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d1e4:	b089      	sub	sp, #36	@ 0x24
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	607a      	str	r2, [r7, #4]
 800d1ee:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	fb02 f303 	mul.w	r3, r2, r3
 800d208:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	0b1b      	lsrs	r3, r3, #12
 800d20e:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2200      	movs	r2, #0
 800d214:	469a      	mov	sl, r3
 800d216:	4693      	mov	fp, r2
 800d218:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	fb02 f303 	mul.w	r3, r2, r3
 800d224:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	091b      	lsrs	r3, r3, #4
 800d22a:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2200      	movs	r2, #0
 800d230:	4698      	mov	r8, r3
 800d232:	4691      	mov	r9, r2
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	fb08 f203 	mul.w	r2, r8, r3
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	fb09 f303 	mul.w	r3, r9, r3
 800d240:	4413      	add	r3, r2
 800d242:	69ba      	ldr	r2, [r7, #24]
 800d244:	fba2 4508 	umull	r4, r5, r2, r8
 800d248:	442b      	add	r3, r5
 800d24a:	461d      	mov	r5, r3
 800d24c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800d250:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800d254:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d258:	f04f 0200 	mov.w	r2, #0
 800d25c:	f04f 0300 	mov.w	r3, #0
 800d260:	0b02      	lsrs	r2, r0, #12
 800d262:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d266:	0b0b      	lsrs	r3, r1, #12
 800d268:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800d26c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d305      	bcc.n	800d280 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	f04f 0300 	mov.w	r3, #0
 800d27c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	617b      	str	r3, [r7, #20]

	return duration_us;
 800d284:	697b      	ldr	r3, [r7, #20]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3724      	adds	r7, #36	@ 0x24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d290:	4770      	bx	lr

0800d292 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800d292:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d296:	b096      	sub	sp, #88	@ 0x58
 800d298:	af00      	add	r7, sp, #0
 800d29a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d29c:	460b      	mov	r3, r1
 800d29e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800d2ae:	f04f 0200 	mov.w	r2, #0
 800d2b2:	f04f 0300 	mov.w	r3, #0
 800d2b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	17da      	asrs	r2, r3, #31
 800d2c2:	469a      	mov	sl, r3
 800d2c4:	4693      	mov	fp, r2
 800d2c6:	4652      	mov	r2, sl
 800d2c8:	465b      	mov	r3, fp
 800d2ca:	f04f 0000 	mov.w	r0, #0
 800d2ce:	f04f 0100 	mov.w	r1, #0
 800d2d2:	0159      	lsls	r1, r3, #5
 800d2d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d2d8:	0150      	lsls	r0, r2, #5
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	ebb2 040a 	subs.w	r4, r2, sl
 800d2e2:	eb63 050b 	sbc.w	r5, r3, fp
 800d2e6:	f04f 0200 	mov.w	r2, #0
 800d2ea:	f04f 0300 	mov.w	r3, #0
 800d2ee:	00ab      	lsls	r3, r5, #2
 800d2f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d2f4:	00a2      	lsls	r2, r4, #2
 800d2f6:	4614      	mov	r4, r2
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	eb14 080a 	adds.w	r8, r4, sl
 800d2fe:	eb45 090b 	adc.w	r9, r5, fp
 800d302:	f04f 0200 	mov.w	r2, #0
 800d306:	f04f 0300 	mov.w	r3, #0
 800d30a:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800d30e:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800d312:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800d316:	4690      	mov	r8, r2
 800d318:	4699      	mov	r9, r3
 800d31a:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800d31e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00d      	beq.n	800d340 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800d324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d326:	2200      	movs	r2, #0
 800d328:	61bb      	str	r3, [r7, #24]
 800d32a:	61fa      	str	r2, [r7, #28]
 800d32c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d330:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800d334:	f7f2 ffcc 	bl	80002d0 <__aeabi_uldivmod>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800d340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d342:	2b00      	cmp	r3, #0
 800d344:	d02a      	beq.n	800d39c <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800d346:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d34a:	f04f 0200 	mov.w	r2, #0
 800d34e:	f04f 0300 	mov.w	r3, #0
 800d352:	02cb      	lsls	r3, r1, #11
 800d354:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d358:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800d35a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d35c:	0849      	lsrs	r1, r1, #1
 800d35e:	2000      	movs	r0, #0
 800d360:	6139      	str	r1, [r7, #16]
 800d362:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800d364:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d368:	4621      	mov	r1, r4
 800d36a:	1851      	adds	r1, r2, r1
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	4629      	mov	r1, r5
 800d370:	eb43 0101 	adc.w	r1, r3, r1
 800d374:	6079      	str	r1, [r7, #4]
 800d376:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d37a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	2200      	movs	r2, #0
 800d382:	60bb      	str	r3, [r7, #8]
 800d384:	60fa      	str	r2, [r7, #12]
 800d386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d38a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d38e:	f7f2 ff9f 	bl	80002d0 <__aeabi_uldivmod>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800d39a:	e00b      	b.n	800d3b4 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800d39c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d3a0:	f04f 0200 	mov.w	r2, #0
 800d3a4:	f04f 0300 	mov.w	r3, #0
 800d3a8:	02cb      	lsls	r3, r1, #11
 800d3aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d3ae:	02c2      	lsls	r2, r0, #11
 800d3b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800d3b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3b6:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800d3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3758      	adds	r7, #88	@ 0x58
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d3c4 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d3d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3d4:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800d3d6:	e002      	b.n	800d3de <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	089b      	lsrs	r3, r3, #2
 800d3dc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d8f8      	bhi.n	800d3d8 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800d3e6:	e017      	b.n	800d418 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d30b      	bcc.n	800d40c <VL53LX_isqrt+0x48>
			num -= res + bit;
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	085b      	lsrs	r3, r3, #1
 800d404:	68ba      	ldr	r2, [r7, #8]
 800d406:	4413      	add	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	e002      	b.n	800d412 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	085b      	lsrs	r3, r3, #1
 800d410:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	089b      	lsrs	r3, r3, #2
 800d416:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1e4      	bne.n	800d3e8 <VL53LX_isqrt+0x24>
	}

	return res;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d442:	4618      	mov	r0, r3
 800d444:	f000 faa6 	bl	800d994 <VL53LX_decode_vcsel_period>
 800d448:	4603      	mov	r3, r0
	period = 2048 *
 800d44a:	02db      	lsls	r3, r3, #11
 800d44c:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800d458:	461a      	mov	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d466:	02db      	lsls	r3, r3, #11
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	4413      	add	r3, r2
 800d46c:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d474:	02db      	lsls	r3, r3, #11
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d009      	beq.n	800d496 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	fbb3 f2f2 	udiv	r2, r3, r2
 800d48a:	68b9      	ldr	r1, [r7, #8]
 800d48c:	fb01 f202 	mul.w	r2, r1, r2
 800d490:	1a9b      	subs	r3, r3, r2
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	e001      	b.n	800d49a <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800d4be:	6838      	ldr	r0, [r7, #0]
 800d4c0:	f000 fb91 	bl	800dbe6 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff7a 	bl	800d3c4 <VL53LX_isqrt>
 800d4d0:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800d4d2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	fb02 f303 	mul.w	r3, r2, r3
 800d4dc:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	111b      	asrs	r3, r3, #4
 800d4e8:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2200      	movs	r2, #0
 800d502:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]
 800d50a:	e01e      	b.n	800d54a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800d50c:	7bfa      	ldrb	r2, [r7, #15]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	3206      	adds	r2, #6
 800d512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	429a      	cmp	r2, r3
 800d51a:	dd13      	ble.n	800d544 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d522:	7bf9      	ldrb	r1, [r7, #15]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	3106      	adds	r1, #6
 800d528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d52c:	441a      	add	r2, r3
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800d53a:	3301      	adds	r3, #1
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800d544:	7bfb      	ldrb	r3, [r7, #15]
 800d546:	3301      	adds	r3, #1
 800d548:	73fb      	strb	r3, [r7, #15]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	7a9b      	ldrb	r3, [r3, #10]
 800d54e:	7bfa      	ldrb	r2, [r7, #15]
 800d550:	429a      	cmp	r2, r3
 800d552:	d3db      	bcc.n	800d50c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d01c      	beq.n	800d598 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800d576:	0852      	lsrs	r2, r2, #1
 800d578:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800d57a:	441a      	add	r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800d58e:	fb93 f2f2 	sdiv	r2, r3, r2
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800d598:	bf00      	nop
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7b1b      	ldrb	r3, [r3, #12]
 800d5b8:	f003 0307 	and.w	r3, r3, #7
 800d5bc:	2b07      	cmp	r3, #7
 800d5be:	d13a      	bne.n	800d636 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	73bb      	strb	r3, [r7, #14]
 800d5c8:	e01f      	b.n	800d60a <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	7b1b      	ldrb	r3, [r3, #12]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b07      	cmp	r3, #7
 800d5d8:	d014      	beq.n	800d604 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800d5da:	7bba      	ldrb	r2, [r7, #14]
 800d5dc:	7b7b      	ldrb	r3, [r7, #13]
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	440a      	add	r2, r1
 800d5e2:	7b11      	ldrb	r1, [r2, #12]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	460a      	mov	r2, r1
 800d5ea:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800d5ec:	7bba      	ldrb	r2, [r7, #14]
 800d5ee:	7b7b      	ldrb	r3, [r7, #13]
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	440a      	add	r2, r1
 800d5f4:	7c91      	ldrb	r1, [r2, #18]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	460a      	mov	r2, r1
 800d5fc:	749a      	strb	r2, [r3, #18]
				i++;
 800d5fe:	7b7b      	ldrb	r3, [r7, #13]
 800d600:	3301      	adds	r3, #1
 800d602:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800d604:	7bbb      	ldrb	r3, [r7, #14]
 800d606:	3301      	adds	r3, #1
 800d608:	73bb      	strb	r3, [r7, #14]
 800d60a:	7bbb      	ldrb	r3, [r7, #14]
 800d60c:	2b05      	cmp	r3, #5
 800d60e:	d9dc      	bls.n	800d5ca <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800d610:	7b7b      	ldrb	r3, [r7, #13]
 800d612:	73bb      	strb	r3, [r7, #14]
 800d614:	e00c      	b.n	800d630 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	4413      	add	r3, r2
 800d61c:	2210      	movs	r2, #16
 800d61e:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	4413      	add	r3, r2
 800d626:	2200      	movs	r2, #0
 800d628:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	3301      	adds	r3, #1
 800d62e:	73bb      	strb	r3, [r7, #14]
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	2b05      	cmp	r3, #5
 800d634:	d9ef      	bls.n	800d616 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	7adb      	ldrb	r3, [r3, #11]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d023      	beq.n	800d686 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	7adb      	ldrb	r3, [r3, #11]
 800d642:	73fb      	strb	r3, [r7, #15]
 800d644:	e00f      	b.n	800d666 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800d646:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	7ad2      	ldrb	r2, [r2, #11]
 800d64e:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3106      	adds	r1, #6
 800d654:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3206      	adds	r2, #6
 800d65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800d660:	7bfb      	ldrb	r3, [r7, #15]
 800d662:	3301      	adds	r3, #1
 800d664:	73fb      	strb	r3, [r7, #15]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	7a5b      	ldrb	r3, [r3, #9]
 800d66a:	7bfa      	ldrb	r2, [r7, #15]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d3ea      	bcc.n	800d646 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	72da      	strb	r2, [r3, #11]
	}
}
 800d686:	bf00      	nop
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	4603      	mov	r3, r0
 800d69a:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800d6a4:	88fb      	ldrh	r3, [r7, #6]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7ff fd83 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 800d6ac:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800d6b2:	f249 2257 	movw	r2, #37463	@ 0x9257
 800d6b6:	fb02 f303 	mul.w	r3, r2, r3
 800d6ba:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d6c2:	0c1b      	lsrs	r3, r3, #16
 800d6c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800d6de:	2307      	movs	r3, #7
 800d6e0:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6ec:	db03      	blt.n	800d6f6 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800d6ee:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e004      	b.n	800d700 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dd01      	ble.n	800d700 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d706:	dd02      	ble.n	800d70e <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800d708:	2303      	movs	r3, #3
 800d70a:	613b      	str	r3, [r7, #16]
 800d70c:	e001      	b.n	800d712 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800d70e:	2307      	movs	r3, #7
 800d710:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d009      	beq.n	800d72c <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	409a      	lsls	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	085b      	lsrs	r3, r3, #1
 800d722:	441a      	add	r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	fbb2 f3f3 	udiv	r3, r2, r3
 800d72a:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d732:	dd02      	ble.n	800d73a <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	011b      	lsls	r3, r3, #4
 800d738:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d740:	d302      	bcc.n	800d748 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800d742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d746:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800d74c:	89fb      	ldrh	r3, [r7, #14]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	371c      	adds	r7, #28
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b087      	sub	sp, #28
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	603b      	str	r3, [r7, #0]
 800d766:	4613      	mov	r3, r2
 800d768:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d010      	beq.n	800d79a <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	021a      	lsls	r2, r3, #8
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	fa02 f303 	lsl.w	r3, r2, r3
 800d782:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800d784:	88fb      	ldrh	r3, [r7, #6]
 800d786:	085b      	lsrs	r3, r3, #1
 800d788:	b29b      	uxth	r3, r3
 800d78a:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800d790:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800d792:	fbb2 f3f3 	udiv	r3, r2, r3
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	e004      	b.n	800d7a4 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a2:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d901      	bls.n	800d7b0 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800d7b4:	8a7b      	ldrh	r3, [r7, #18]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	b093      	sub	sp, #76	@ 0x4c
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	461e      	mov	r6, r3
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d7da:	4633      	mov	r3, r6
 800d7dc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800d7f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fcd9 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 800d800:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800d802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d804:	2200      	movs	r2, #0
 800d806:	623b      	str	r3, [r7, #32]
 800d808:	627a      	str	r2, [r7, #36]	@ 0x24
 800d80a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d80c:	2200      	movs	r2, #0
 800d80e:	61bb      	str	r3, [r7, #24]
 800d810:	61fa      	str	r2, [r7, #28]
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d818:	4602      	mov	r2, r0
 800d81a:	1a9b      	subs	r3, r3, r2
 800d81c:	613b      	str	r3, [r7, #16]
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	460a      	mov	r2, r1
 800d822:	eb63 0302 	sbc.w	r3, r3, r2
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d82c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800d830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d832:	2200      	movs	r2, #0
 800d834:	469a      	mov	sl, r3
 800d836:	4693      	mov	fp, r2
 800d838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d83a:	fb0a f203 	mul.w	r2, sl, r3
 800d83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d840:	fb0b f303 	mul.w	r3, fp, r3
 800d844:	4413      	add	r3, r2
 800d846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d848:	fba2 890a 	umull	r8, r9, r2, sl
 800d84c:	444b      	add	r3, r9
 800d84e:	4699      	mov	r9, r3
 800d850:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800d854:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800d858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	da08      	bge.n	800d872 <VL53LX_range_maths+0xae>
 800d860:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800d864:	1851      	adds	r1, r2, r1
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	f143 0300 	adc.w	r3, r3, #0
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d872:	f04f 0000 	mov.w	r0, #0
 800d876:	f04f 0100 	mov.w	r1, #0
 800d87a:	0a50      	lsrs	r0, r2, #9
 800d87c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d880:	1259      	asrs	r1, r3, #9
 800d882:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800d886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d888:	f249 2257 	movw	r2, #37463	@ 0x9257
 800d88c:	fb03 f202 	mul.w	r2, r3, r2
 800d890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d892:	2100      	movs	r1, #0
 800d894:	fb01 f303 	mul.w	r3, r1, r3
 800d898:	4413      	add	r3, r2
 800d89a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d89c:	f249 2157 	movw	r1, #37463	@ 0x9257
 800d8a0:	fba2 4501 	umull	r4, r5, r2, r1
 800d8a4:	442b      	add	r3, r5
 800d8a6:	461d      	mov	r5, r3
 800d8a8:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800d8ac:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800d8b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	da07      	bge.n	800d8c8 <VL53LX_range_maths+0x104>
 800d8b8:	4934      	ldr	r1, [pc, #208]	@ (800d98c <VL53LX_range_maths+0x1c8>)
 800d8ba:	1851      	adds	r1, r2, r1
 800d8bc:	6039      	str	r1, [r7, #0]
 800d8be:	f143 0300 	adc.w	r3, r3, #0
 800d8c2:	607b      	str	r3, [r7, #4]
 800d8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8c8:	f04f 0000 	mov.w	r0, #0
 800d8cc:	f04f 0100 	mov.w	r1, #0
 800d8d0:	0d90      	lsrs	r0, r2, #22
 800d8d2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800d8d6:	1599      	asrs	r1, r3, #22
 800d8d8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d8e0:	4413      	add	r3, r2
 800d8e2:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800d8e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d8e8:	fb02 f303 	mul.w	r3, r2, r3
 800d8ec:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800d8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8f4:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800d8f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	da01      	bge.n	800d900 <VL53LX_range_maths+0x13c>
 800d8fc:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800d900:	12db      	asrs	r3, r3, #11
 800d902:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800d904:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d130      	bne.n	800d96e <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800d90c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d90e:	4613      	mov	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800d918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	da00      	bge.n	800d920 <VL53LX_range_maths+0x15c>
 800d91e:	3303      	adds	r3, #3
 800d920:	109b      	asrs	r3, r3, #2
 800d922:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800d924:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d926:	4b1a      	ldr	r3, [pc, #104]	@ (800d990 <VL53LX_range_maths+0x1cc>)
 800d928:	fb83 2301 	smull	r2, r3, r3, r1
 800d92c:	109a      	asrs	r2, r3, #2
 800d92e:	17cb      	asrs	r3, r1, #31
 800d930:	1ad2      	subs	r2, r2, r3
 800d932:	4613      	mov	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	4413      	add	r3, r2
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	1aca      	subs	r2, r1, r3
 800d93c:	2a04      	cmp	r2, #4
 800d93e:	dc09      	bgt.n	800d954 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800d940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d942:	4a13      	ldr	r2, [pc, #76]	@ (800d990 <VL53LX_range_maths+0x1cc>)
 800d944:	fb82 1203 	smull	r1, r2, r2, r3
 800d948:	1092      	asrs	r2, r2, #2
 800d94a:	17db      	asrs	r3, r3, #31
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	b21b      	sxth	r3, r3
 800d950:	647b      	str	r3, [r7, #68]	@ 0x44
 800d952:	e015      	b.n	800d980 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800d954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d956:	4a0e      	ldr	r2, [pc, #56]	@ (800d990 <VL53LX_range_maths+0x1cc>)
 800d958:	fb82 1203 	smull	r1, r2, r2, r3
 800d95c:	1092      	asrs	r2, r2, #2
 800d95e:	17db      	asrs	r3, r3, #31
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	b29b      	uxth	r3, r3
 800d964:	3301      	adds	r3, #1
 800d966:	b29b      	uxth	r3, r3
 800d968:	b21b      	sxth	r3, r3
 800d96a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d96c:	e008      	b.n	800d980 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800d96e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d972:	2b01      	cmp	r3, #1
 800d974:	d104      	bne.n	800d980 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800d976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d978:	0fda      	lsrs	r2, r3, #31
 800d97a:	4413      	add	r3, r2
 800d97c:	105b      	asrs	r3, r3, #1
 800d97e:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800d980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d982:	4618      	mov	r0, r3
 800d984:	374c      	adds	r7, #76	@ 0x4c
 800d986:	46bd      	mov	sp, r7
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	003fffff 	.word	0x003fffff
 800d990:	66666667 	.word	0x66666667

0800d994 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b083      	sub	sp, #12
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	781a      	ldrb	r2, [r3, #0]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	7a5a      	ldrb	r2, [r3, #9]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	605a      	str	r2, [r3, #4]
}
 800da2a:	bf00      	nop
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800da36:	b480      	push	{r7}
 800da38:	b087      	sub	sp, #28
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	460b      	mov	r3, r1
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2203      	movs	r2, #3
 800da4c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2203      	movs	r2, #3
 800da52:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2218      	movs	r2, #24
 800da6a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800da6c:	897b      	ldrh	r3, [r7, #10]
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800db0a:	2300      	movs	r3, #0
 800db0c:	82fb      	strh	r3, [r7, #22]
 800db0e:	e009      	b.n	800db24 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800db10:	8afb      	ldrh	r3, [r7, #22]
 800db12:	8afa      	ldrh	r2, [r7, #22]
 800db14:	b2d1      	uxtb	r1, r2
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4413      	add	r3, r2
 800db1a:	460a      	mov	r2, r1
 800db1c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800db1e:	8afb      	ldrh	r3, [r7, #22]
 800db20:	3301      	adds	r3, #1
 800db22:	82fb      	strh	r3, [r7, #22]
 800db24:	8afb      	ldrh	r3, [r7, #22]
 800db26:	2b05      	cmp	r3, #5
 800db28:	d9f2      	bls.n	800db10 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800db2a:	2300      	movs	r3, #0
 800db2c:	82fb      	strh	r3, [r7, #22]
 800db2e:	e007      	b.n	800db40 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800db30:	8afb      	ldrh	r3, [r7, #22]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	4413      	add	r3, r2
 800db36:	2201      	movs	r2, #1
 800db38:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800db3a:	8afb      	ldrh	r3, [r7, #22]
 800db3c:	3301      	adds	r3, #1
 800db3e:	82fb      	strh	r3, [r7, #22]
 800db40:	8afb      	ldrh	r3, [r7, #22]
 800db42:	2b05      	cmp	r3, #5
 800db44:	d9f4      	bls.n	800db30 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800db46:	2300      	movs	r3, #0
 800db48:	82fb      	strh	r3, [r7, #22]
 800db4a:	e013      	b.n	800db74 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800db4c:	8afa      	ldrh	r2, [r7, #22]
 800db4e:	897b      	ldrh	r3, [r7, #10]
 800db50:	429a      	cmp	r2, r3
 800db52:	d206      	bcs.n	800db62 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800db54:	8afa      	ldrh	r2, [r7, #22]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3206      	adds	r2, #6
 800db5a:	68f9      	ldr	r1, [r7, #12]
 800db5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800db60:	e005      	b.n	800db6e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800db62:	8afa      	ldrh	r2, [r7, #22]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	3206      	adds	r2, #6
 800db68:	2100      	movs	r1, #0
 800db6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800db6e:	8afb      	ldrh	r3, [r7, #22]
 800db70:	3301      	adds	r3, #1
 800db72:	82fb      	strh	r3, [r7, #22]
 800db74:	8afb      	ldrh	r3, [r7, #22]
 800db76:	2b17      	cmp	r3, #23
 800db78:	d9e8      	bls.n	800db4c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800db7a:	bf00      	nop
 800db7c:	bf00      	nop
 800db7e:	371c      	adds	r7, #28
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800db96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	da10      	bge.n	800dbc0 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	43db      	mvns	r3, r3
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 0307 	and.w	r3, r3, #7
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	3308      	adds	r3, #8
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	3b80      	subs	r3, #128	@ 0x80
 800dbb6:	10db      	asrs	r3, r3, #3
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800dbbe:	e00c      	b.n	800dbda <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800dbcc:	7bfb      	ldrb	r3, [r7, #15]
 800dbce:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800dbd2:	10db      	asrs	r3, r3, #3
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	701a      	strb	r2, [r3, #0]
}
 800dbda:	bf00      	nop
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
 800dbf6:	e02c      	b.n	800dc52 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d009      	beq.n	800dc12 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800dc04:	7bf9      	ldrb	r1, [r7, #15]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3106      	adds	r1, #6
 800dc0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	db07      	blt.n	800dc22 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800dc12:	7bfa      	ldrb	r2, [r7, #15]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3206      	adds	r2, #6
 800dc18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d009      	beq.n	800dc3c <VL53LX_hist_find_min_max_bin_values+0x56>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800dc2e:	7bf9      	ldrb	r1, [r7, #15]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3106      	adds	r1, #6
 800dc34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	dc07      	bgt.n	800dc4c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800dc3c:	7bfa      	ldrb	r2, [r7, #15]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	3206      	adds	r2, #6
 800dc42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	73fb      	strb	r3, [r7, #15]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	7a9b      	ldrb	r3, [r3, #10]
 800dc56:	7bfa      	ldrb	r2, [r7, #15]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d3cd      	bcc.n	800dbf8 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b085      	sub	sp, #20
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	7adb      	ldrb	r3, [r3, #11]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d03a      	beq.n	800dcf4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800dc90:	2300      	movs	r3, #0
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	e00e      	b.n	800dcb4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dc9c:	7bf9      	ldrb	r1, [r7, #15]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	3106      	adds	r1, #6
 800dca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dca6:	441a      	add	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	73fb      	strb	r3, [r7, #15]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	7adb      	ldrb	r3, [r3, #11]
 800dcb8:	7bfa      	ldrb	r2, [r7, #15]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d3eb      	bcc.n	800dc96 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	7ad2      	ldrb	r2, [r2, #11]
 800dcd4:	0852      	lsrs	r2, r2, #1
 800dcd6:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800dcd8:	441a      	add	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800dcea:	fb93 f2f2 	sdiv	r2, r3, r2
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800dcf4:	bf00      	nop
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800dd00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd04:	b0ca      	sub	sp, #296	@ 0x128
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800dd0c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800dd10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dd14:	4603      	mov	r3, r0
 800dd16:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800dd32:	f04f 0200 	mov.w	r2, #0
 800dd36:	f04f 0300 	mov.w	r3, #0
 800dd3a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800dd44:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd48:	2300      	movs	r3, #0
 800dd4a:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800dd4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd50:	2300      	movs	r3, #0
 800dd52:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800dd54:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd58:	2300      	movs	r3, #0
 800dd5a:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800dd5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd60:	2300      	movs	r3, #0
 800dd62:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800dd64:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd68:	2300      	movs	r3, #0
 800dd6a:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800dd6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd70:	2300      	movs	r3, #0
 800dd72:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800dd74:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd78:	2300      	movs	r3, #0
 800dd7a:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800dd7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800dd80:	2300      	movs	r3, #0
 800dd82:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800dd84:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800dd88:	2300      	movs	r3, #0
 800dd8a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800dd8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dd90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 80e1 	beq.w	800df5c <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800dd9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f000 80da 	beq.w	800df5c <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800dda8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ddac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff f9fe 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 800ddb6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800ddba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ddbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800ddc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ddd0:	2110      	movs	r1, #16
 800ddd2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800ddd6:	f7ff fa03 	bl	800d1e0 <VL53LX_duration_maths>
 800ddda:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800dddc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dde0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800dde2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dde6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ddea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	4610      	mov	r0, r2
 800ddf4:	f7ff fc6c 	bl	800d6d0 <VL53LX_rate_maths>
 800ddf8:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800ddfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800ddfe:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800de00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800de04:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800de08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800de0c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800de10:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	461a      	mov	r2, r3
 800de18:	f7ff fa3b 	bl	800d292 <VL53LX_events_per_spad_maths>
 800de1c:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800de1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de22:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800de24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de28:	8adb      	ldrh	r3, [r3, #22]
 800de2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800de2e:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800de30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de34:	8adb      	ldrh	r3, [r3, #22]
 800de36:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800de3a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800de3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	f000 808a 	beq.w	800df5c <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800de48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de4c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2200      	movs	r2, #0
 800de52:	461c      	mov	r4, r3
 800de54:	4615      	mov	r5, r2
 800de56:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800de5a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800de5e:	4622      	mov	r2, r4
 800de60:	462b      	mov	r3, r5
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f04f 0100 	mov.w	r1, #0
 800de6a:	0159      	lsls	r1, r3, #5
 800de6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de70:	0150      	lsls	r0, r2, #5
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	ebb2 0804 	subs.w	r8, r2, r4
 800de7a:	eb63 0905 	sbc.w	r9, r3, r5
 800de7e:	f04f 0200 	mov.w	r2, #0
 800de82:	f04f 0300 	mov.w	r3, #0
 800de86:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800de8a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800de8e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800de92:	4690      	mov	r8, r2
 800de94:	4699      	mov	r9, r3
 800de96:	eb18 0a04 	adds.w	sl, r8, r4
 800de9a:	eb49 0b05 	adc.w	fp, r9, r5
 800de9e:	f04f 0200 	mov.w	r2, #0
 800dea2:	f04f 0300 	mov.w	r3, #0
 800dea6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800deaa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800deae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800deb2:	4692      	mov	sl, r2
 800deb4:	469b      	mov	fp, r3
 800deb6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800deba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800debe:	f04f 0000 	mov.w	r0, #0
 800dec2:	f04f 0100 	mov.w	r1, #0
 800dec6:	0319      	lsls	r1, r3, #12
 800dec8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800decc:	0310      	lsls	r0, r2, #12
 800dece:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800ded2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	085b      	lsrs	r3, r3, #1
 800deda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800dede:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800deec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800def0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800def4:	4621      	mov	r1, r4
 800def6:	1851      	adds	r1, r2, r1
 800def8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800defa:	4629      	mov	r1, r5
 800defc:	eb43 0101 	adc.w	r1, r3, r1
 800df00:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800df02:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800df06:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800df0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	2200      	movs	r2, #0
 800df12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df16:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800df1a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800df1e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800df22:	f7f2 f9d5 	bl	80002d0 <__aeabi_uldivmod>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800df2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df32:	8adb      	ldrh	r3, [r3, #22]
 800df34:	b29b      	uxth	r3, r3
 800df36:	2200      	movs	r2, #0
 800df38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df3c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800df40:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800df44:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800df48:	4621      	mov	r1, r4
 800df4a:	428a      	cmp	r2, r1
 800df4c:	4629      	mov	r1, r5
 800df4e:	418b      	sbcs	r3, r1
 800df50:	d204      	bcs.n	800df5c <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800df52:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800df56:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800df5a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800df5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 82e9 	beq.w	800e53a <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800df68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800df6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800df70:	2b00      	cmp	r3, #0
 800df72:	f000 82e2 	beq.w	800e53a <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800df76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800df7a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f000 82dc 	beq.w	800e53a <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800df82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800df86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 82d5 	beq.w	800e53a <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800df90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800df94:	885b      	ldrh	r3, [r3, #2]
 800df96:	b29b      	uxth	r3, r3
 800df98:	2200      	movs	r2, #0
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df9c:	657a      	str	r2, [r7, #84]	@ 0x54
 800df9e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800dfa2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800dfa6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800dfaa:	4622      	mov	r2, r4
 800dfac:	462b      	mov	r3, r5
 800dfae:	f04f 0000 	mov.w	r0, #0
 800dfb2:	f04f 0100 	mov.w	r1, #0
 800dfb6:	0159      	lsls	r1, r3, #5
 800dfb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dfbc:	0150      	lsls	r0, r2, #5
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	1b11      	subs	r1, r2, r4
 800dfc4:	64b9      	str	r1, [r7, #72]	@ 0x48
 800dfc6:	eb63 0305 	sbc.w	r3, r3, r5
 800dfca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfcc:	f04f 0200 	mov.w	r2, #0
 800dfd0:	f04f 0300 	mov.w	r3, #0
 800dfd4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800dfd8:	4649      	mov	r1, r9
 800dfda:	008b      	lsls	r3, r1, #2
 800dfdc:	4641      	mov	r1, r8
 800dfde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dfe2:	4641      	mov	r1, r8
 800dfe4:	008a      	lsls	r2, r1, #2
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	461a      	mov	r2, r3
 800dfea:	460b      	mov	r3, r1
 800dfec:	191b      	adds	r3, r3, r4
 800dfee:	643b      	str	r3, [r7, #64]	@ 0x40
 800dff0:	4613      	mov	r3, r2
 800dff2:	eb45 0303 	adc.w	r3, r5, r3
 800dff6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dff8:	f04f 0200 	mov.w	r2, #0
 800dffc:	f04f 0300 	mov.w	r3, #0
 800e000:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e004:	4629      	mov	r1, r5
 800e006:	02cb      	lsls	r3, r1, #11
 800e008:	4621      	mov	r1, r4
 800e00a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e00e:	4621      	mov	r1, r4
 800e010:	02ca      	lsls	r2, r1, #11
 800e012:	461c      	mov	r4, r3
 800e014:	4613      	mov	r3, r2
 800e016:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800e01a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	085b      	lsrs	r3, r3, #1
 800e022:	b29b      	uxth	r3, r3
 800e024:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800e028:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e02c:	2200      	movs	r2, #0
 800e02e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e032:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e036:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e03a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800e03e:	4621      	mov	r1, r4
 800e040:	1851      	adds	r1, r2, r1
 800e042:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e044:	4629      	mov	r1, r5
 800e046:	eb43 0101 	adc.w	r1, r3, r1
 800e04a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800e04c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800e050:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800e054:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e066:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e06a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e06e:	f7f2 f92f 	bl	80002d0 <__aeabi_uldivmod>
 800e072:	4602      	mov	r2, r0
 800e074:	460b      	mov	r3, r1
 800e076:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800e07a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e07e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e082:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800e084:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	011a      	lsls	r2, r3, #4
 800e08c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e090:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800e092:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2200      	movs	r2, #0
 800e09a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e09c:	637a      	str	r2, [r7, #52]	@ 0x34
 800e09e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e0a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800e0a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0b2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e0b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e0ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800e0be:	4622      	mov	r2, r4
 800e0c0:	fb02 f203 	mul.w	r2, r2, r3
 800e0c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	fb01 f303 	mul.w	r3, r1, r3
 800e0ce:	441a      	add	r2, r3
 800e0d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	fba3 1301 	umull	r1, r3, r3, r1
 800e0da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e0de:	460b      	mov	r3, r1
 800e0e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e0e8:	18d3      	adds	r3, r2, r3
 800e0ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e0ee:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800e0f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800e0f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800e0fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0fe:	8b5b      	ldrh	r3, [r3, #26]
 800e100:	b29b      	uxth	r3, r3
 800e102:	2200      	movs	r2, #0
 800e104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e108:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e10c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e110:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e114:	4622      	mov	r2, r4
 800e116:	fb02 f203 	mul.w	r2, r2, r3
 800e11a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e11e:	4629      	mov	r1, r5
 800e120:	fb01 f303 	mul.w	r3, r1, r3
 800e124:	441a      	add	r2, r3
 800e126:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e12a:	4621      	mov	r1, r4
 800e12c:	fba3 1301 	umull	r1, r3, r3, r1
 800e130:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e134:	460b      	mov	r3, r1
 800e136:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e13e:	18d3      	adds	r3, r2, r3
 800e140:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e144:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800e148:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800e14c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800e150:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e154:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800e158:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e15a:	f143 0300 	adc.w	r3, r3, #0
 800e15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e160:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800e164:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800e168:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e16c:	f04f 0000 	mov.w	r0, #0
 800e170:	f04f 0100 	mov.w	r1, #0
 800e174:	0cd0      	lsrs	r0, r2, #19
 800e176:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800e17a:	0cd9      	lsrs	r1, r3, #19
 800e17c:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800e180:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e184:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800e188:	6239      	str	r1, [r7, #32]
 800e18a:	f143 0300 	adc.w	r3, r3, #0
 800e18e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e190:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e194:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800e198:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e19c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e1a0:	f04f 0300 	mov.w	r3, #0
 800e1a4:	f7f2 f894 	bl	80002d0 <__aeabi_uldivmod>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800e1b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e1b4:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800e1b8:	f173 0300 	sbcs.w	r3, r3, #0
 800e1bc:	d305      	bcc.n	800e1ca <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800e1be:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800e1c2:	f04f 0300 	mov.w	r3, #0
 800e1c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800e1ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e1ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1d2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800e1d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	61bb      	str	r3, [r7, #24]
 800e1de:	61fa      	str	r2, [r7, #28]
 800e1e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e1e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800e1e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e1f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e1f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e1fc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800e200:	4622      	mov	r2, r4
 800e202:	fb02 f203 	mul.w	r2, r2, r3
 800e206:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e20a:	4629      	mov	r1, r5
 800e20c:	fb01 f303 	mul.w	r3, r1, r3
 800e210:	441a      	add	r2, r3
 800e212:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e216:	4621      	mov	r1, r4
 800e218:	fba3 1301 	umull	r1, r3, r3, r1
 800e21c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e220:	460b      	mov	r3, r1
 800e222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e22a:	18d3      	adds	r3, r2, r3
 800e22c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e230:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800e234:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800e238:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800e23c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e240:	8b5b      	ldrh	r3, [r3, #26]
 800e242:	b29b      	uxth	r3, r3
 800e244:	2200      	movs	r2, #0
 800e246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e24a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e24e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e252:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800e256:	4622      	mov	r2, r4
 800e258:	fb02 f203 	mul.w	r2, r2, r3
 800e25c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e260:	4629      	mov	r1, r5
 800e262:	fb01 f303 	mul.w	r3, r1, r3
 800e266:	441a      	add	r2, r3
 800e268:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e26c:	4621      	mov	r1, r4
 800e26e:	fba3 1301 	umull	r1, r3, r3, r1
 800e272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e276:	460b      	mov	r3, r1
 800e278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e27c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e280:	18d3      	adds	r3, r2, r3
 800e282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e286:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800e28a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800e28e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800e292:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e296:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800e29a:	6139      	str	r1, [r7, #16]
 800e29c:	f143 0300 	adc.w	r3, r3, #0
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e2a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800e2aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e2ae:	f04f 0000 	mov.w	r0, #0
 800e2b2:	f04f 0100 	mov.w	r1, #0
 800e2b6:	0cd0      	lsrs	r0, r2, #19
 800e2b8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800e2bc:	0cd9      	lsrs	r1, r3, #19
 800e2be:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800e2c2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e2ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800e2cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e2d0:	891b      	ldrh	r3, [r3, #8]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800e2d8:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800e2da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e2de:	462b      	mov	r3, r5
 800e2e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e2e4:	4642      	mov	r2, r8
 800e2e6:	fb02 f203 	mul.w	r2, r2, r3
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	fb01 f303 	mul.w	r3, r1, r3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	4641      	mov	r1, r8
 800e2f8:	fba2 1201 	umull	r1, r2, r2, r1
 800e2fc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800e300:	460a      	mov	r2, r1
 800e302:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800e306:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800e30a:	4413      	add	r3, r2
 800e30c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e314:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800e318:	4622      	mov	r2, r4
 800e31a:	fb02 f203 	mul.w	r2, r2, r3
 800e31e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e322:	4629      	mov	r1, r5
 800e324:	fb01 f303 	mul.w	r3, r1, r3
 800e328:	4413      	add	r3, r2
 800e32a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e32e:	4621      	mov	r1, r4
 800e330:	fba2 1201 	umull	r1, r2, r2, r1
 800e334:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e338:	460a      	mov	r2, r1
 800e33a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800e33e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800e342:	4413      	add	r3, r2
 800e344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e348:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800e34c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800e350:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800e354:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e358:	88db      	ldrh	r3, [r3, #6]
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2200      	movs	r2, #0
 800e35e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e360:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e362:	f04f 0200 	mov.w	r2, #0
 800e366:	f04f 0300 	mov.w	r3, #0
 800e36a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800e36e:	4629      	mov	r1, r5
 800e370:	01cb      	lsls	r3, r1, #7
 800e372:	4621      	mov	r1, r4
 800e374:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800e378:	4621      	mov	r1, r4
 800e37a:	01ca      	lsls	r2, r1, #7
 800e37c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e380:	1884      	adds	r4, r0, r2
 800e382:	60bc      	str	r4, [r7, #8]
 800e384:	eb41 0303 	adc.w	r3, r1, r3
 800e388:	60fb      	str	r3, [r7, #12]
 800e38a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e38e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800e392:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	2200      	movs	r2, #0
 800e39c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e39e:	667a      	str	r2, [r7, #100]	@ 0x64
 800e3a0:	f04f 0200 	mov.w	r2, #0
 800e3a4:	f04f 0300 	mov.w	r3, #0
 800e3a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	020b      	lsls	r3, r1, #8
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	020a      	lsls	r2, r1, #8
 800e3ba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e3be:	f7f1 ff87 	bl	80002d0 <__aeabi_uldivmod>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800e3ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e3ce:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800e3d2:	6039      	str	r1, [r7, #0]
 800e3d4:	f143 0300 	adc.w	r3, r3, #0
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e3de:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800e3e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e3e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e3ea:	f04f 0300 	mov.w	r3, #0
 800e3ee:	f7f1 ff6f 	bl	80002d0 <__aeabi_uldivmod>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800e3fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e3fe:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800e402:	f173 0300 	sbcs.w	r3, r3, #0
 800e406:	d305      	bcc.n	800e414 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800e408:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800e40c:	f04f 0300 	mov.w	r3, #0
 800e410:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800e414:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e418:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e41c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800e41e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	021b      	lsls	r3, r3, #8
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe ffcc 	bl	800d3c4 <VL53LX_isqrt>
 800e42c:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800e430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e434:	785b      	ldrb	r3, [r3, #1]
 800e436:	461a      	mov	r2, r3
 800e438:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e43c:	fb02 f303 	mul.w	r3, r2, r3
 800e440:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800e444:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e448:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800e44a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800e44e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800e450:	4293      	cmp	r3, r2
 800e452:	d218      	bcs.n	800e486 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800e454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800e45c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e460:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800e468:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e46c:	021b      	lsls	r3, r3, #8
 800e46e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800e472:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800e476:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d203      	bcs.n	800e486 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800e47e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e482:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800e486:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e48a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800e48c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e490:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800e492:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800e494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e498:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800e49a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800e49e:	f000 f854 	bl	800e54a <VL53LX_f_002>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800e4a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e4aa:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800e4ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800e4b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e4ba:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e4c4:	fb02 f303 	mul.w	r3, r2, r3
 800e4c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800e4cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800e4d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e4da:	091b      	lsrs	r3, r3, #4
 800e4dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800e4e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e4e4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800e4e6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800e4e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e4ec:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800e4ee:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800e4f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e4f4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800e4f6:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800e4fa:	f000 f826 	bl	800e54a <VL53LX_f_002>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800e502:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e506:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800e508:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e50c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800e510:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e514:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800e518:	429a      	cmp	r2, r3
 800e51a:	da07      	bge.n	800e52c <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800e51c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e520:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800e524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e528:	801a      	strh	r2, [r3, #0]
 800e52a:	e006      	b.n	800e53a <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800e52c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e530:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800e534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e538:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800e53a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800e53e:	4618      	mov	r0, r3
 800e540:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e544:	46bd      	mov	sp, r7
 800e546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e54a <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b086      	sub	sp, #24
 800e54e:	af00      	add	r7, sp, #0
 800e550:	60f8      	str	r0, [r7, #12]
 800e552:	60b9      	str	r1, [r7, #8]
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	fb03 f303 	mul.w	r3, r3, r3
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	4413      	add	r3, r2
 800e570:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800e572:	6938      	ldr	r0, [r7, #16]
 800e574:	f7fe ff26 	bl	800d3c4 <VL53LX_isqrt>
 800e578:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	4413      	add	r3, r2
 800e580:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	011b      	lsls	r3, r3, #4
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe ff1c 	bl	800d3c4 <VL53LX_isqrt>
 800e58c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	fb02 f303 	mul.w	r3, r2, r3
 800e596:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d009      	beq.n	800e5b2 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	005b      	lsls	r3, r3, #1
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800e5b2:	697b      	ldr	r3, [r7, #20]

}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2218      	movs	r2, #24
 800e5cc:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	73fb      	strb	r3, [r7, #15]
 800e5f2:	e01f      	b.n	800e634 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	4413      	add	r3, r2
 800e604:	2200      	movs	r2, #0
 800e606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	4413      	add	r3, r2
 800e610:	2200      	movs	r2, #0
 800e612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800e616:	7bfa      	ldrb	r2, [r7, #15]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	322e      	adds	r2, #46	@ 0x2e
 800e61c:	2100      	movs	r1, #0
 800e61e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800e622:	7bfa      	ldrb	r2, [r7, #15]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	3246      	adds	r2, #70	@ 0x46
 800e628:	2100      	movs	r1, #0
 800e62a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800e62e:	7bfb      	ldrb	r3, [r7, #15]
 800e630:	3301      	adds	r3, #1
 800e632:	73fb      	strb	r3, [r7, #15]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	785b      	ldrb	r3, [r3, #1]
 800e638:	7bfa      	ldrb	r2, [r7, #15]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d3da      	bcc.n	800e5f4 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2208      	movs	r2, #8
 800e64a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e65c:	461a      	mov	r2, r3
 800e65e:	2118      	movs	r1, #24
 800e660:	2000      	movs	r0, #0
 800e662:	f7ff f9e8 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800e66c:	461a      	mov	r2, r3
 800e66e:	2118      	movs	r1, #24
 800e670:	2000      	movs	r0, #0
 800e672:	f7ff f9e0 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800e67c:	461a      	mov	r2, r3
 800e67e:	2118      	movs	r1, #24
 800e680:	2000      	movs	r0, #0
 800e682:	f7ff f9d8 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800e68c:	461a      	mov	r2, r3
 800e68e:	2118      	movs	r1, #24
 800e690:	2000      	movs	r0, #0
 800e692:	f7ff f9d0 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800e69c:	461a      	mov	r2, r3
 800e69e:	2118      	movs	r1, #24
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	f7ff f9c8 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800e6a6:	bf00      	nop
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e6ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6b2:	b090      	sub	sp, #64	@ 0x40
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	61b9      	str	r1, [r7, #24]
 800e6b8:	617a      	str	r2, [r7, #20]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4603      	mov	r3, r0
 800e6be:	83fb      	strh	r3, [r7, #30]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	f04f 0300 	mov.w	r3, #0
 800e6de:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800e6ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6f0:	7a5a      	ldrb	r2, [r3, #9]
 800e6f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6f4:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800e6f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6f8:	7a1a      	ldrb	r2, [r3, #8]
 800e6fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6fc:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800e6fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e700:	7a9a      	ldrb	r2, [r3, #10]
 800e702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e704:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800e706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e708:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e70c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e70e:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800e710:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff f93c 	bl	800d994 <VL53LX_decode_vcsel_period>
 800e71c:	4603      	mov	r3, r0
 800e71e:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800e720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e722:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800e724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e72a:	17da      	asrs	r2, r3, #31
 800e72c:	60bb      	str	r3, [r7, #8]
 800e72e:	60fa      	str	r2, [r7, #12]
 800e730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e734:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800e738:	8bfb      	ldrh	r3, [r7, #30]
 800e73a:	2200      	movs	r2, #0
 800e73c:	4698      	mov	r8, r3
 800e73e:	4691      	mov	r9, r2
 800e740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e742:	fb08 f203 	mul.w	r2, r8, r3
 800e746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e748:	fb09 f303 	mul.w	r3, r9, r3
 800e74c:	4413      	add	r3, r2
 800e74e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e750:	fba2 4508 	umull	r4, r5, r2, r8
 800e754:	442b      	add	r3, r5
 800e756:	461d      	mov	r5, r3
 800e758:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800e75c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800e760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e764:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800e768:	f143 0b00 	adc.w	fp, r3, #0
 800e76c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800e770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e774:	2b00      	cmp	r3, #0
 800e776:	da08      	bge.n	800e78a <VL53LX_f_006+0xdc>
 800e778:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800e77c:	1851      	adds	r1, r2, r1
 800e77e:	6039      	str	r1, [r7, #0]
 800e780:	f143 0300 	adc.w	r3, r3, #0
 800e784:	607b      	str	r3, [r7, #4]
 800e786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e78a:	f04f 0000 	mov.w	r0, #0
 800e78e:	f04f 0100 	mov.w	r1, #0
 800e792:	0b10      	lsrs	r0, r2, #12
 800e794:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e798:	1319      	asrs	r1, r3, #12
 800e79a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800e79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a0:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e7a8:	e062      	b.n	800e870 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800e7aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e7ae:	089b      	lsrs	r3, r3, #2
 800e7b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800e7b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7ba:	4413      	add	r3, r2
 800e7bc:	7c9b      	ldrb	r3, [r3, #18]
 800e7be:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	dd4f      	ble.n	800e866 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800e7c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e7c8:	7a9b      	ldrb	r3, [r3, #10]
 800e7ca:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d20f      	bcs.n	800e7f2 <VL53LX_f_006+0x144>
 800e7d2:	7f7b      	ldrb	r3, [r7, #29]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00c      	beq.n	800e7f2 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800e7d8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e7dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e7de:	3206      	adds	r2, #6
 800e7e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	441a      	add	r2, r3
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	fb02 f303 	mul.w	r3, r2, r3
 800e7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7f0:	e004      	b.n	800e7fc <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7f6:	fb02 f303 	mul.w	r3, r2, r3
 800e7fa:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fe fde0 	bl	800d3c4 <VL53LX_isqrt>
 800e804:	4603      	mov	r3, r0
 800e806:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	0fda      	lsrs	r2, r3, #31
 800e80c:	4413      	add	r3, r2
 800e80e:	105b      	asrs	r3, r3, #1
 800e810:	461a      	mov	r2, r3
 800e812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e814:	4413      	add	r3, r2
 800e816:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800e818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e820:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800e822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	fb02 f303 	mul.w	r3, r2, r3
 800e82a:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82e:	3308      	adds	r3, #8
 800e830:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800e832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e834:	2b00      	cmp	r3, #0
 800e836:	da00      	bge.n	800e83a <VL53LX_f_006+0x18c>
 800e838:	330f      	adds	r3, #15
 800e83a:	111b      	asrs	r3, r3, #4
 800e83c:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800e83e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e842:	4413      	add	r3, r2
 800e844:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800e846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	da01      	bge.n	800e852 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800e852:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e858:	3216      	adds	r2, #22
 800e85a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800e860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e862:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e864:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800e866:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e86a:	3301      	adds	r3, #1
 800e86c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e872:	7a9b      	ldrb	r3, [r3, #10]
 800e874:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e878:	429a      	cmp	r2, r3
 800e87a:	d396      	bcc.n	800e7aa <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800e87c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e87e:	2200      	movs	r2, #0
 800e880:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800e882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e884:	7a1b      	ldrb	r3, [r3, #8]
 800e886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e88a:	e033      	b.n	800e8f4 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800e88c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e892:	3206      	adds	r2, #6
 800e894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e898:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800e89c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e89e:	3116      	adds	r1, #22
 800e8a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	dd13      	ble.n	800e8d0 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800e8a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e8ae:	4413      	add	r3, r2
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800e8b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e8ba:	4413      	add	r3, r2
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800e8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8c4:	791b      	ldrb	r3, [r3, #4]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8cc:	711a      	strb	r2, [r3, #4]
 800e8ce:	e00c      	b.n	800e8ea <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800e8d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e8d6:	4413      	add	r3, r2
 800e8d8:	2200      	movs	r2, #0
 800e8da:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800e8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e8e2:	4413      	add	r3, r2
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800e8ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e8f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8f6:	7a9b      	ldrb	r3, [r3, #10]
 800e8f8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d3c5      	bcc.n	800e88c <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e900:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800e904:	4618      	mov	r0, r3
 800e906:	3740      	adds	r7, #64	@ 0x40
 800e908:	46bd      	mov	sp, r7
 800e90a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e90e <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e90e:	b480      	push	{r7}
 800e910:	b085      	sub	sp, #20
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e916:	2300      	movs	r3, #0
 800e918:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800e91e:	2300      	movs	r3, #0
 800e920:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800e922:	2300      	movs	r3, #0
 800e924:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800e92e:	2300      	movs	r3, #0
 800e930:	73fb      	strb	r3, [r7, #15]
 800e932:	e02d      	b.n	800e990 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800e934:	7bfb      	ldrb	r3, [r7, #15]
 800e936:	3301      	adds	r3, #1
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	78d2      	ldrb	r2, [r2, #3]
 800e93c:	fb93 f1f2 	sdiv	r1, r3, r2
 800e940:	fb01 f202 	mul.w	r2, r1, r2
 800e944:	1a9b      	subs	r3, r3, r2
 800e946:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	789b      	ldrb	r3, [r3, #2]
 800e94c:	7bfa      	ldrb	r2, [r7, #15]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d21b      	bcs.n	800e98a <VL53LX_f_007+0x7c>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	789b      	ldrb	r3, [r3, #2]
 800e956:	7b3a      	ldrb	r2, [r7, #12]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d216      	bcs.n	800e98a <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	4413      	add	r3, r2
 800e962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10f      	bne.n	800e98a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800e96a:	7b3b      	ldrb	r3, [r7, #12]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	4413      	add	r3, r2
 800e970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800e974:	2b01      	cmp	r3, #1
 800e976:	d108      	bne.n	800e98a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800e978:	7bbb      	ldrb	r3, [r7, #14]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d105      	bne.n	800e98a <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	7bfa      	ldrb	r2, [r7, #15]
 800e982:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800e986:	2301      	movs	r3, #1
 800e988:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
 800e98c:	3301      	adds	r3, #1
 800e98e:	73fb      	strb	r3, [r7, #15]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	78db      	ldrb	r3, [r3, #3]
 800e994:	7bfa      	ldrb	r2, [r7, #15]
 800e996:	429a      	cmp	r2, r3
 800e998:	d3cc      	bcc.n	800e934 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e99a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800e9c8:	73fb      	strb	r3, [r7, #15]
 800e9ca:	e05a      	b.n	800ea82 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	78da      	ldrb	r2, [r3, #3]
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
 800e9d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9d6:	fb01 f202 	mul.w	r2, r1, r2
 800e9da:	1a9b      	subs	r3, r3, r2
 800e9dc:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	78d2      	ldrb	r2, [r2, #3]
 800e9e6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e9ea:	fb01 f202 	mul.w	r2, r1, r2
 800e9ee:	1a9b      	subs	r3, r3, r2
 800e9f0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	789b      	ldrb	r3, [r3, #2]
 800e9f6:	7b7a      	ldrb	r2, [r7, #13]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d23f      	bcs.n	800ea7c <VL53LX_f_008+0xd2>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	789b      	ldrb	r3, [r3, #2]
 800ea00:	7b3a      	ldrb	r2, [r7, #12]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d23a      	bcs.n	800ea7c <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800ea06:	7b7b      	ldrb	r3, [r7, #13]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10e      	bne.n	800ea32 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800ea14:	7b3b      	ldrb	r3, [r7, #12]
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	4413      	add	r3, r2
 800ea1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d107      	bne.n	800ea32 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ea28:	3301      	adds	r3, #1
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d905      	bls.n	800ea4e <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800ea4e:	7b7b      	ldrb	r3, [r7, #13]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	4413      	add	r3, r2
 800ea54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800ea5c:	7b7b      	ldrb	r3, [r7, #13]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	4413      	add	r3, r2
 800ea68:	460a      	mov	r2, r1
 800ea6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea6e:	e005      	b.n	800ea7c <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800ea70:	7b7b      	ldrb	r3, [r7, #13]
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	4413      	add	r3, r2
 800ea76:	2200      	movs	r2, #0
 800ea78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800ea7c:	7bfb      	ldrb	r3, [r7, #15]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800ea82:	7bfa      	ldrb	r2, [r7, #15]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800ea8a:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800ea90:	440b      	add	r3, r1
 800ea92:	429a      	cmp	r2, r3
 800ea94:	db9a      	blt.n	800e9cc <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ea96:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b087      	sub	sp, #28
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800eaae:	2300      	movs	r3, #0
 800eab0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800eab2:	2300      	movs	r3, #0
 800eab4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	78db      	ldrb	r3, [r3, #3]
 800eaca:	3b01      	subs	r3, #1
 800eacc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800eace:	7cbb      	ldrb	r3, [r7, #18]
 800ead0:	085b      	lsrs	r3, r3, #1
 800ead2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800eada:	75fb      	strb	r3, [r7, #23]
 800eadc:	e0a2      	b.n	800ec24 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	78da      	ldrb	r2, [r3, #3]
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
 800eae4:	fbb3 f1f2 	udiv	r1, r3, r2
 800eae8:	fb01 f202 	mul.w	r2, r1, r2
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800eaf0:	7dfb      	ldrb	r3, [r7, #23]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	78d2      	ldrb	r2, [r2, #3]
 800eaf8:	fb93 f1f2 	sdiv	r1, r3, r2
 800eafc:	fb01 f202 	mul.w	r2, r1, r2
 800eb00:	1a9b      	subs	r3, r3, r2
 800eb02:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	789b      	ldrb	r3, [r3, #2]
 800eb08:	7d7a      	ldrb	r2, [r7, #21]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	f080 8087 	bcs.w	800ec1e <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800eb14:	7d3a      	ldrb	r2, [r7, #20]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	f080 8081 	bcs.w	800ec1e <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800eb1c:	7d7b      	ldrb	r3, [r7, #21]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d12f      	bne.n	800eb8a <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800eb2a:	7d3b      	ldrb	r3, [r7, #20]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d028      	beq.n	800eb8a <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800eb38:	7d3b      	ldrb	r3, [r7, #20]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb42:	3b01      	subs	r3, #1
 800eb44:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800eb4c:	7cfa      	ldrb	r2, [r7, #19]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d21b      	bcs.n	800eb8a <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800eb52:	7cfa      	ldrb	r2, [r7, #19]
 800eb54:	4613      	mov	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	4413      	add	r3, r2
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	4413      	add	r3, r2
 800eb64:	3304      	adds	r3, #4
 800eb66:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	7dfa      	ldrb	r2, [r7, #23]
 800eb6c:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	3301      	adds	r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	22ff      	movs	r2, #255	@ 0xff
 800eb7c:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800eb8a:	7d7b      	ldrb	r3, [r7, #21]
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	4413      	add	r3, r2
 800eb90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d042      	beq.n	800ec1e <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800eb98:	7d3b      	ldrb	r3, [r7, #20]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d13b      	bne.n	800ec1e <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800eba6:	7d7b      	ldrb	r3, [r7, #21]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ebba:	7cfa      	ldrb	r2, [r7, #19]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d22e      	bcs.n	800ec1e <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ebc0:	7cfa      	ldrb	r2, [r7, #19]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	4413      	add	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	7dfa      	ldrb	r2, [r7, #23]
 800ebda:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800ebdc:	7dfb      	ldrb	r3, [r7, #23]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	3301      	adds	r3, #1
 800ec08:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	799b      	ldrb	r3, [r3, #6]
 800ec12:	7cba      	ldrb	r2, [r7, #18]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d202      	bcs.n	800ec1e <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	7cba      	ldrb	r2, [r7, #18]
 800ec1c:	719a      	strb	r2, [r3, #6]
		blb++) {
 800ec1e:	7dfb      	ldrb	r3, [r7, #23]
 800ec20:	3301      	adds	r3, #1
 800ec22:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800ec24:	7dfa      	ldrb	r2, [r7, #23]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800ec2c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800ec32:	440b      	add	r3, r1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	f6ff af52 	blt.w	800eade <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ec3a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	371c      	adds	r7, #28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b090      	sub	sp, #64	@ 0x40
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	4603      	mov	r3, r0
 800ec52:	6039      	str	r1, [r7, #0]
 800ec54:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ec56:	2300      	movs	r3, #0
 800ec58:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800ec5c:	f107 030c 	add.w	r3, r7, #12
 800ec60:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d965      	bls.n	800ed44 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800ec78:	e05f      	b.n	800ed3a <VL53LX_f_016+0xf0>

		swapped = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800ec80:	2301      	movs	r3, #1
 800ec82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ec86:	e051      	b.n	800ed2c <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800ec88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ec8c:	1e5a      	subs	r2, r3, #1
 800ec8e:	4613      	mov	r3, r2
 800ec90:	00db      	lsls	r3, r3, #3
 800ec92:	4413      	add	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	3304      	adds	r3, #4
 800eca0:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800eca2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800eca6:	4613      	mov	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800ecba:	79fb      	ldrb	r3, [r7, #7]
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d118      	bne.n	800ecf2 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800ecc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc2:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	da2a      	bge.n	800ed22 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800eccc:	2224      	movs	r2, #36	@ 0x24
 800ecce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ecd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ecd2:	f00e fea6 	bl	801da22 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ecd6:	2224      	movs	r2, #36	@ 0x24
 800ecd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ecda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecdc:	f00e fea1 	bl	801da22 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ece0:	2224      	movs	r2, #36	@ 0x24
 800ece2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ece4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ece6:	f00e fe9c 	bl	801da22 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ecea:	2301      	movs	r3, #1
 800ecec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800ecf0:	e017      	b.n	800ed22 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf4:	699a      	ldr	r2, [r3, #24]
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d911      	bls.n	800ed22 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ecfe:	2224      	movs	r2, #36	@ 0x24
 800ed00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed04:	f00e fe8d 	bl	801da22 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ed08:	2224      	movs	r2, #36	@ 0x24
 800ed0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed0e:	f00e fe88 	bl	801da22 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ed12:	2224      	movs	r2, #36	@ 0x24
 800ed14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ed18:	f00e fe83 	bl	801da22 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800ed22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ed26:	3301      	adds	r3, #1
 800ed28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ed32:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d3a6      	bcc.n	800ec88 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800ed3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d19b      	bne.n	800ec7a <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800ed42:	e000      	b.n	800ed46 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800ed44:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800ed46:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3740      	adds	r7, #64	@ 0x40
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b087      	sub	sp, #28
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	4603      	mov	r3, r0
 800ed5a:	60b9      	str	r1, [r7, #8]
 800ed5c:	607a      	str	r2, [r7, #4]
 800ed5e:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ed6c:	7bfa      	ldrb	r2, [r7, #15]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	3304      	adds	r3, #4
 800ed80:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2200      	movs	r2, #0
 800ed86:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	75fb      	strb	r3, [r7, #23]
 800ed94:	e01c      	b.n	800edd0 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	78da      	ldrb	r2, [r3, #3]
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
 800ed9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800eda0:	fb01 f202 	mul.w	r2, r1, r2
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	68da      	ldr	r2, [r3, #12]
 800edac:	7d79      	ldrb	r1, [r7, #21]
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	3106      	adds	r1, #6
 800edb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edb6:	441a      	add	r2, r3
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	441a      	add	r2, r3
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	3301      	adds	r3, #1
 800edce:	75fb      	strb	r3, [r7, #23]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	791b      	ldrb	r3, [r3, #4]
 800edd4:	7dfa      	ldrb	r2, [r7, #23]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d9dd      	bls.n	800ed96 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	68da      	ldr	r2, [r3, #12]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	689b      	ldr	r3, [r3, #8]
 800ede2:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800ede8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800edec:	4618      	mov	r0, r3
 800edee:	371c      	adds	r7, #28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800edf8:	b590      	push	{r4, r7, lr}
 800edfa:	b08d      	sub	sp, #52	@ 0x34
 800edfc:	af02      	add	r7, sp, #8
 800edfe:	60ba      	str	r2, [r7, #8]
 800ee00:	607b      	str	r3, [r7, #4]
 800ee02:	4603      	mov	r3, r0
 800ee04:	73fb      	strb	r3, [r7, #15]
 800ee06:	460b      	mov	r3, r1
 800ee08:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ee26:	7bfa      	ldrb	r2, [r7, #15]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	4413      	add	r3, r2
 800ee38:	3304      	adds	r3, #4
 800ee3a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	789b      	ldrb	r3, [r3, #2]
 800ee40:	2bff      	cmp	r3, #255	@ 0xff
 800ee42:	d102      	bne.n	800ee4a <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2201      	movs	r2, #1
 800ee48:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	789b      	ldrb	r3, [r3, #2]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	78d2      	ldrb	r2, [r2, #3]
 800ee52:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee56:	fb01 f202 	mul.w	r2, r1, r2
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800ee60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee64:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	8c3b      	ldrh	r3, [r7, #32]
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800ee74:	8c3b      	ldrh	r3, [r7, #32]
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	7892      	ldrb	r2, [r2, #2]
 800ee7a:	1a9b      	subs	r3, r3, r2
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800ee80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee84:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	791b      	ldrb	r3, [r3, #4]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	8bfb      	ldrh	r3, [r7, #30]
 800ee8e:	4413      	add	r3, r2
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800ee94:	8bfb      	ldrh	r3, [r7, #30]
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	7892      	ldrb	r2, [r2, #2]
 800ee9a:	1a9b      	subs	r3, r3, r2
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800eea0:	8bfa      	ldrh	r2, [r7, #30]
 800eea2:	8c3b      	ldrh	r3, [r7, #32]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800eeaa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800eeae:	2b03      	cmp	r3, #3
 800eeb0:	dd01      	ble.n	800eeb6 <VL53LX_f_015+0xbe>
		window_width = 3;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800eeb6:	8c3a      	ldrh	r2, [r7, #32]
 800eeb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeba:	4413      	add	r3, r2
 800eebc:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800eebe:	b219      	sxth	r1, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	78da      	ldrb	r2, [r3, #3]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	3314      	adds	r3, #20
 800eec8:	7bbc      	ldrb	r4, [r7, #14]
 800eeca:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800eece:	9301      	str	r3, [sp, #4]
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	4623      	mov	r3, r4
 800eed6:	f000 f846 	bl	800ef66 <VL53LX_f_020>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800eee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d114      	bne.n	800ef12 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800eee8:	8bfa      	ldrh	r2, [r7, #30]
 800eeea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800eef0:	b218      	sxth	r0, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	78da      	ldrb	r2, [r3, #3]
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	331c      	adds	r3, #28
 800eefa:	7bbc      	ldrb	r4, [r7, #14]
 800eefc:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	4623      	mov	r3, r4
 800ef08:	f000 f82d 	bl	800ef66 <VL53LX_f_020>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	695a      	ldr	r2, [r3, #20]
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	69db      	ldr	r3, [r3, #28]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d909      	bls.n	800ef32 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	695b      	ldr	r3, [r3, #20]
 800ef22:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	69da      	ldr	r2, [r3, #28]
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	699a      	ldr	r2, [r3, #24]
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	695b      	ldr	r3, [r3, #20]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d203      	bcs.n	800ef46 <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	699a      	ldr	r2, [r3, #24]
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	699a      	ldr	r2, [r3, #24]
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	69db      	ldr	r3, [r3, #28]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d903      	bls.n	800ef5a <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	699a      	ldr	r2, [r3, #24]
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800ef5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	372c      	adds	r7, #44	@ 0x2c
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd90      	pop	{r4, r7, pc}

0800ef66 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800ef66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6a:	b09d      	sub	sp, #116	@ 0x74
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	461c      	mov	r4, r3
 800ef70:	4603      	mov	r3, r0
 800ef72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ef76:	460b      	mov	r3, r1
 800ef78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef82:	4623      	mov	r3, r4
 800ef84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800ef9a:	f04f 0200 	mov.w	r2, #0
 800ef9e:	f04f 0300 	mov.w	r3, #0
 800efa2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800efa6:	f04f 0200 	mov.w	r2, #0
 800efaa:	f04f 0300 	mov.w	r3, #0
 800efae:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800efb2:	f04f 0200 	mov.w	r2, #0
 800efb6:	f04f 0300 	mov.w	r3, #0
 800efba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800efbe:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800efc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efc6:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800efc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 809c 	beq.w	800f10a <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800efd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800efd6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800efda:	e08f      	b.n	800f0fc <VL53LX_f_020+0x196>

		if (lb < 0)
 800efdc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	da09      	bge.n	800eff8 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800efe4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efe8:	b29a      	uxth	r2, r3
 800efea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800efee:	4413      	add	r3, r2
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800eff6:	e00a      	b.n	800f00e <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800eff8:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800effc:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800f000:	fb91 f3f2 	sdiv	r3, r1, r2
 800f004:	fb02 f303 	mul.w	r3, r2, r3
 800f008:	1acb      	subs	r3, r1, r3
 800f00a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800f00e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800f012:	2b00      	cmp	r3, #0
 800f014:	db6b      	blt.n	800f0ee <VL53LX_f_020+0x188>
 800f016:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800f01a:	2b17      	cmp	r3, #23
 800f01c:	dc67      	bgt.n	800f0ee <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800f01e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800f022:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f026:	3306      	adds	r3, #6
 800f028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02c:	17da      	asrs	r2, r3, #31
 800f02e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f030:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800f032:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f03a:	17da      	asrs	r2, r3, #31
 800f03c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f03e:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800f040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f042:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f046:	4602      	mov	r2, r0
 800f048:	1a9b      	subs	r3, r3, r2
 800f04a:	623b      	str	r3, [r7, #32]
 800f04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f04e:	460a      	mov	r2, r1
 800f050:	eb63 0302 	sbc.w	r3, r3, r2
 800f054:	627b      	str	r3, [r7, #36]	@ 0x24
 800f056:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f05a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800f05e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800f062:	2b00      	cmp	r3, #0
 800f064:	d009      	beq.n	800f07a <VL53LX_f_020+0x114>
 800f066:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	da05      	bge.n	800f07a <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800f06e:	f04f 0200 	mov.w	r2, #0
 800f072:	f04f 0300 	mov.w	r3, #0
 800f076:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800f07a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800f07e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f082:	1884      	adds	r4, r0, r2
 800f084:	61bc      	str	r4, [r7, #24]
 800f086:	eb41 0303 	adc.w	r3, r1, r3
 800f08a:	61fb      	str	r3, [r7, #28]
 800f08c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f090:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800f094:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800f098:	17da      	asrs	r2, r3, #31
 800f09a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f09c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f09e:	f04f 0200 	mov.w	r2, #0
 800f0a2:	f04f 0300 	mov.w	r3, #0
 800f0a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0a8:	02cb      	lsls	r3, r1, #11
 800f0aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f0ac:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f0b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f0b2:	02ca      	lsls	r2, r1, #11
 800f0b4:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800f0b8:	f143 0600 	adc.w	r6, r3, #0
 800f0bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0be:	fb06 f203 	mul.w	r2, r6, r3
 800f0c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0c4:	fb05 f303 	mul.w	r3, r5, r3
 800f0c8:	441a      	add	r2, r3
 800f0ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0cc:	fba3 ab05 	umull	sl, fp, r3, r5
 800f0d0:	eb02 030b 	add.w	r3, r2, fp
 800f0d4:	469b      	mov	fp, r3
			weighted_sum +=
 800f0d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f0da:	eb12 010a 	adds.w	r1, r2, sl
 800f0de:	6139      	str	r1, [r7, #16]
 800f0e0:	eb43 030b 	adc.w	r3, r3, fp
 800f0e4:	617b      	str	r3, [r7, #20]
 800f0e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800f0ee:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800f0fc:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800f100:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800f104:	429a      	cmp	r2, r3
 800f106:	f77f af69 	ble.w	800efdc <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800f10a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f10e:	2a01      	cmp	r2, #1
 800f110:	f173 0300 	sbcs.w	r3, r3, #0
 800f114:	db3b      	blt.n	800f18e <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800f116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f11a:	0fd9      	lsrs	r1, r3, #31
 800f11c:	2000      	movs	r0, #0
 800f11e:	60b9      	str	r1, [r7, #8]
 800f120:	60f8      	str	r0, [r7, #12]
 800f122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f126:	4621      	mov	r1, r4
 800f128:	eb11 0802 	adds.w	r8, r1, r2
 800f12c:	4629      	mov	r1, r5
 800f12e:	eb41 0903 	adc.w	r9, r1, r3
 800f132:	f04f 0200 	mov.w	r2, #0
 800f136:	f04f 0300 	mov.w	r3, #0
 800f13a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800f13e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800f142:	ea4f 0369 	mov.w	r3, r9, asr #1
 800f146:	4610      	mov	r0, r2
 800f148:	4619      	mov	r1, r3
 800f14a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f14e:	1814      	adds	r4, r2, r0
 800f150:	603c      	str	r4, [r7, #0]
 800f152:	414b      	adcs	r3, r1
 800f154:	607b      	str	r3, [r7, #4]
 800f156:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f15a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800f15e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f162:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800f166:	f7f1 f863 	bl	8000230 <__aeabi_ldivmod>
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800f172:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f176:	2b00      	cmp	r3, #0
 800f178:	da05      	bge.n	800f186 <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	f04f 0300 	mov.w	r3, #0
 800f182:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800f186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f18c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f18e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800f192:	4618      	mov	r0, r3
 800f194:	3774      	adds	r7, #116	@ 0x74
 800f196:	46bd      	mov	sp, r7
 800f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f19c <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60b9      	str	r1, [r7, #8]
 800f1a4:	607a      	str	r2, [r7, #4]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800f1b8:	7bfa      	ldrb	r2, [r7, #15]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	4413      	add	r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800f1ce:	22ac      	movs	r2, #172	@ 0xac
 800f1d0:	68b9      	ldr	r1, [r7, #8]
 800f1d2:	6a38      	ldr	r0, [r7, #32]
 800f1d4:	f00e fc25 	bl	801da22 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800f1de:	75fb      	strb	r3, [r7, #23]
 800f1e0:	e020      	b.n	800f224 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	7dfa      	ldrb	r2, [r7, #23]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d304      	bcc.n	800f1f6 <VL53LX_f_011+0x5a>
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	791b      	ldrb	r3, [r3, #4]
 800f1f0:	7dfa      	ldrb	r2, [r7, #23]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d913      	bls.n	800f21e <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	78da      	ldrb	r2, [r3, #3]
 800f1fa:	7dfb      	ldrb	r3, [r7, #23]
 800f1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f200:	fb01 f202 	mul.w	r2, r1, r2
 800f204:	1a9b      	subs	r3, r3, r2
 800f206:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	7a9b      	ldrb	r3, [r3, #10]
 800f20c:	7d7a      	ldrb	r2, [r7, #21]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d205      	bcs.n	800f21e <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800f212:	7d7a      	ldrb	r2, [r7, #21]
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	3206      	adds	r2, #6
 800f218:	6839      	ldr	r1, [r7, #0]
 800f21a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
 800f220:	3301      	adds	r3, #1
 800f222:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800f224:	7dfa      	ldrb	r2, [r7, #23]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800f22c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800f232:	440b      	add	r3, r1
 800f234:	429a      	cmp	r2, r3
 800f236:	dbd4      	blt.n	800f1e2 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f238:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f248:	b096      	sub	sp, #88	@ 0x58
 800f24a:	af08      	add	r7, sp, #32
 800f24c:	4604      	mov	r4, r0
 800f24e:	4608      	mov	r0, r1
 800f250:	4611      	mov	r1, r2
 800f252:	461a      	mov	r2, r3
 800f254:	4623      	mov	r3, r4
 800f256:	73fb      	strb	r3, [r7, #15]
 800f258:	4603      	mov	r3, r0
 800f25a:	73bb      	strb	r3, [r7, #14]
 800f25c:	460b      	mov	r3, r1
 800f25e:	737b      	strb	r3, [r7, #13]
 800f260:	4613      	mov	r3, r2
 800f262:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800f264:	2300      	movs	r3, #0
 800f266:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800f26a:	2300      	movs	r3, #0
 800f26c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800f270:	2300      	movs	r3, #0
 800f272:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800f292:	2300      	movs	r3, #0
 800f294:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800f296:	7b7b      	ldrb	r3, [r7, #13]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d106      	bne.n	800f2aa <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800f29c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f29e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2a2:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800f2a4:	f06f 030e 	mvn.w	r3, #14
 800f2a8:	e06f      	b.n	800f38a <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
 800f2ac:	7b7a      	ldrb	r2, [r7, #13]
 800f2ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2b2:	fb01 f202 	mul.w	r2, r1, r2
 800f2b6:	1a9b      	subs	r3, r3, r2
 800f2b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800f2bc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f2c0:	7b39      	ldrb	r1, [r7, #12]
 800f2c2:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800f2c6:	f107 0320 	add.w	r3, r7, #32
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f2d6:	f000 fddb 	bl	800fe90 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800f2da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f2de:	7b39      	ldrb	r1, [r7, #12]
 800f2e0:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800f2e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f2e8:	9301      	str	r3, [sp, #4]
 800f2ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2f4:	f000 fdcc 	bl	800fe90 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800f2f8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00e      	beq.n	800f31e <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800f300:	f107 021c 	add.w	r2, r7, #28
 800f304:	7b39      	ldrb	r1, [r7, #12]
 800f306:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800f30a:	f107 0314 	add.w	r3, r7, #20
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	f107 0318 	add.w	r3, r7, #24
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	4613      	mov	r3, r2
 800f318:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f31a:	f000 fdb9 	bl	800fe90 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	469c      	mov	ip, r3
 800f322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f324:	469e      	mov	lr, r3
 800f326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f328:	4698      	mov	r8, r3
 800f32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32c:	4619      	mov	r1, r3
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	461c      	mov	r4, r3
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	461d      	mov	r5, r3
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	461e      	mov	r6, r3
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800f33e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800f344:	607b      	str	r3, [r7, #4]
 800f346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f348:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800f34c:	7bb8      	ldrb	r0, [r7, #14]
 800f34e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f350:	9207      	str	r2, [sp, #28]
 800f352:	9306      	str	r3, [sp, #24]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	9205      	str	r2, [sp, #20]
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	9603      	str	r6, [sp, #12]
 800f35e:	9502      	str	r5, [sp, #8]
 800f360:	9401      	str	r4, [sp, #4]
 800f362:	9100      	str	r1, [sp, #0]
 800f364:	4643      	mov	r3, r8
 800f366:	4672      	mov	r2, lr
 800f368:	4661      	mov	r1, ip
 800f36a:	f002 ff53 	bl	8012214 <VL53LX_f_023>
 800f36e:	4603      	mov	r3, r0
 800f370:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800f374:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800f378:	f113 0f0f 	cmn.w	r3, #15
 800f37c:	d103      	bne.n	800f386 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800f37e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f384:	801a      	strh	r2, [r3, #0]


	return status;
 800f386:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3738      	adds	r7, #56	@ 0x38
 800f38e:	46bd      	mov	sp, r7
 800f390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f394 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800f394:	b490      	push	{r4, r7}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4604      	mov	r4, r0
 800f39c:	4608      	mov	r0, r1
 800f39e:	4611      	mov	r1, r2
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4623      	mov	r3, r4
 800f3a4:	71fb      	strb	r3, [r7, #7]
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	71bb      	strb	r3, [r7, #6]
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	717b      	strb	r3, [r7, #5]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	79fa      	ldrb	r2, [r7, #7]
 800f3be:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800f3c0:	6a3b      	ldr	r3, [r7, #32]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	785a      	ldrb	r2, [r3, #1]
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	789a      	ldrb	r2, [r3, #2]
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	78da      	ldrb	r2, [r3, #3]
 800f3e2:	6a3b      	ldr	r3, [r7, #32]
 800f3e4:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	791a      	ldrb	r2, [r3, #4]
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	795a      	ldrb	r2, [r3, #5]
 800f3f2:	6a3b      	ldr	r3, [r7, #32]
 800f3f4:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	791a      	ldrb	r2, [r3, #4]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	b2db      	uxtb	r3, r3
 800f402:	3301      	adds	r3, #1
 800f404:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800f406:	6a3b      	ldr	r3, [r7, #32]
 800f408:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	8c1a      	ldrh	r2, [r3, #32]
 800f418:	6a3b      	ldr	r3, [r7, #32]
 800f41a:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	b29a      	uxth	r2, r3
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	6a3b      	ldr	r3, [r7, #32]
 800f42e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	69db      	ldr	r3, [r3, #28]
 800f436:	b29a      	uxth	r2, r3
 800f438:	6a3b      	ldr	r3, [r7, #32]
 800f43a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	461a      	mov	r2, r3
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	691a      	ldr	r2, [r3, #16]
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	461a      	mov	r2, r3
 800f456:	6a3b      	ldr	r3, [r7, #32]
 800f458:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f460:	6a3b      	ldr	r3, [r7, #32]
 800f462:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800f464:	6a3b      	ldr	r3, [r7, #32]
 800f466:	2213      	movs	r2, #19
 800f468:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800f46c:	887b      	ldrh	r3, [r7, #2]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00a      	beq.n	800f488 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	8c1b      	ldrh	r3, [r3, #32]
 800f476:	461a      	mov	r2, r3
 800f478:	887b      	ldrh	r3, [r7, #2]
 800f47a:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d903      	bls.n	800f488 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	2206      	movs	r2, #6
 800f484:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800f488:	79bb      	ldrb	r3, [r7, #6]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	021b      	lsls	r3, r3, #8
 800f48e:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	8a9b      	ldrh	r3, [r3, #20]
 800f494:	89fa      	ldrh	r2, [r7, #14]
 800f496:	429a      	cmp	r2, r3
 800f498:	d205      	bcs.n	800f4a6 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800f49a:	6a3b      	ldr	r3, [r7, #32]
 800f49c:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800f49e:	89fb      	ldrh	r3, [r7, #14]
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	81fb      	strh	r3, [r7, #14]
 800f4a4:	e001      	b.n	800f4aa <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800f4aa:	797b      	ldrb	r3, [r7, #5]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	021b      	lsls	r3, r3, #8
 800f4b0:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800f4b8:	89bb      	ldrh	r3, [r7, #12]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800f4be:	6a3b      	ldr	r3, [r7, #32]
 800f4c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f4c4:	89fa      	ldrh	r2, [r7, #14]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d805      	bhi.n	800f4d6 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800f4d0:	89ba      	ldrh	r2, [r7, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d203      	bcs.n	800f4de <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	2205      	movs	r2, #5
 800f4da:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bc90      	pop	{r4, r7}
 800f4e6:	4770      	bx	lr

0800f4e8 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ea:	b08f      	sub	sp, #60	@ 0x3c
 800f4ec:	af06      	add	r7, sp, #24
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
 800f4f4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f500:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f504:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800f506:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f508:	f7ff f858 	bl	800e5bc <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800f50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f50e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800f512:	22ac      	movs	r2, #172	@ 0xac
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	4618      	mov	r0, r3
 800f518:	f00e fa83 	bl	801da22 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	781a      	ldrb	r2, [r3, #0]
 800f520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f522:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	785a      	ldrb	r2, [r3, #1]
 800f528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f52a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	789a      	ldrb	r2, [r3, #2]
 800f530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f532:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800f53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f53c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800f53e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f540:	2200      	movs	r2, #0
 800f542:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800f544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f546:	2204      	movs	r2, #4
 800f548:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800f54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f54c:	2200      	movs	r2, #0
 800f54e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800f550:	2300      	movs	r3, #0
 800f552:	77bb      	strb	r3, [r7, #30]
 800f554:	e008      	b.n	800f568 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800f556:	7fbb      	ldrb	r3, [r7, #30]
 800f558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	4413      	add	r3, r2
 800f55e:	2200      	movs	r2, #0
 800f560:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800f562:	7fbb      	ldrb	r3, [r7, #30]
 800f564:	3301      	adds	r3, #1
 800f566:	77bb      	strb	r3, [r7, #30]
 800f568:	7fbb      	ldrb	r3, [r7, #30]
 800f56a:	2b04      	cmp	r3, #4
 800f56c:	d9f3      	bls.n	800f556 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800f56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f570:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd ff59 	bl	800d42c <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800f57e:	461a      	mov	r2, r3
 800f580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f582:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f7fd ff8f 	bl	800d4ac <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800f58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f590:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fb68 	bl	800dc6a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800f59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f59c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fd fffd 	bl	800d5a0 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d009      	beq.n	800f5c4 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800f5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5b2:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800f5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5b8:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800f5bc:	461a      	mov	r2, r3
 800f5be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f5c0:	f000 fdae 	bl	8010120 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	77bb      	strb	r3, [r7, #30]
 800f5d0:	e01e      	b.n	800f610 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800f5d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d117      	bne.n	800f60a <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800f5da:	7fbb      	ldrb	r3, [r7, #30]
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	3304      	adds	r3, #4
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	4413      	add	r3, r2
 800f5e4:	8898      	ldrh	r0, [r3, #4]
 800f5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5e8:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800f5ec:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800f5ee:	005b      	lsls	r3, r3, #1
 800f5f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5f2:	4413      	add	r3, r2
 800f5f4:	3304      	adds	r3, #4
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	68f9      	ldr	r1, [r7, #12]
 800f602:	f7fe fb7d 	bl	800dd00 <VL53LX_f_001>
 800f606:	4603      	mov	r3, r0
 800f608:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800f60a:	7fbb      	ldrb	r3, [r7, #30]
 800f60c:	3301      	adds	r3, #1
 800f60e:	77bb      	strb	r3, [r7, #30]
 800f610:	7fbb      	ldrb	r3, [r7, #30]
 800f612:	2b04      	cmp	r3, #4
 800f614:	d9dd      	bls.n	800f5d2 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800f616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d11a      	bne.n	800f654 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800f626:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800f632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f634:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f638:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f63a:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800f63e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f640:	9102      	str	r1, [sp, #8]
 800f642:	9201      	str	r2, [sp, #4]
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	462b      	mov	r3, r5
 800f648:	4622      	mov	r2, r4
 800f64a:	4631      	mov	r1, r6
 800f64c:	f7ff f82f 	bl	800e6ae <VL53LX_f_006>
 800f650:	4603      	mov	r3, r0
 800f652:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800f654:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d104      	bne.n	800f666 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800f65c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f65e:	f7ff f956 	bl	800e90e <VL53LX_f_007>
 800f662:	4603      	mov	r3, r0
 800f664:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800f666:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d104      	bne.n	800f678 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800f66e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f670:	f7ff f99b 	bl	800e9aa <VL53LX_f_008>
 800f674:	4603      	mov	r3, r0
 800f676:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800f678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d104      	bne.n	800f68a <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800f680:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f682:	f7ff fa10 	bl	800eaa6 <VL53LX_f_009>
 800f686:	4603      	mov	r3, r0
 800f688:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f68a:	2300      	movs	r3, #0
 800f68c:	77bb      	strb	r3, [r7, #30]
 800f68e:	e0a6      	b.n	800f7de <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800f690:	7fba      	ldrb	r2, [r7, #30]
 800f692:	4613      	mov	r3, r2
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	4413      	add	r3, r2
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f69e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6a0:	4413      	add	r3, r2
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800f6a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d109      	bne.n	800f6c2 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800f6b4:	7fbb      	ldrb	r3, [r7, #30]
 800f6b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff fb4a 	bl	800ed52 <VL53LX_f_010>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800f6c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d110      	bne.n	800f6ec <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800f6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6cc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800f6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6d8:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800f6dc:	7fb8      	ldrb	r0, [r7, #30]
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6e4:	f7ff fd5a 	bl	800f19c <VL53LX_f_011>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800f6ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10d      	bne.n	800f710 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6f6:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800f6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fc:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800f700:	7fb8      	ldrb	r0, [r7, #30]
 800f702:	9300      	str	r3, [sp, #0]
 800f704:	2300      	movs	r3, #0
 800f706:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f708:	f7ff fd48 	bl	800f19c <VL53LX_f_011>
 800f70c:	4603      	mov	r3, r0
 800f70e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800f710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d10d      	bne.n	800f734 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800f718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f71a:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800f71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f720:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800f724:	7fb8      	ldrb	r0, [r7, #30]
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	2300      	movs	r3, #0
 800f72a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f72c:	f7ff fd36 	bl	800f19c <VL53LX_f_011>
 800f730:	4603      	mov	r3, r0
 800f732:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800f734:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d109      	bne.n	800f750 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800f73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f73e:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800f742:	7fb8      	ldrb	r0, [r7, #30]
 800f744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f746:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f748:	f000 f8dd 	bl	800f906 <VL53LX_f_026>
 800f74c:	4603      	mov	r3, r0
 800f74e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800f750:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d108      	bne.n	800f76a <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	8a19      	ldrh	r1, [r3, #16]
 800f75c:	7fb8      	ldrb	r0, [r7, #30]
 800f75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f760:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f762:	f000 f95c 	bl	800fa1e <VL53LX_f_027>
 800f766:	4603      	mov	r3, r0
 800f768:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800f76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d124      	bne.n	800f7bc <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	789d      	ldrb	r5, [r3, #2]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	7e1e      	ldrb	r6, [r3, #24]
 800f77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77c:	f893 c003 	ldrb.w	ip, [r3, #3]
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f893 e006 	ldrb.w	lr, [r3, #6]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f78c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f78e:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800f792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f794:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800f798:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f79a:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800f79e:	697c      	ldr	r4, [r7, #20]
 800f7a0:	3420      	adds	r4, #32
 800f7a2:	9404      	str	r4, [sp, #16]
 800f7a4:	9003      	str	r0, [sp, #12]
 800f7a6:	9102      	str	r1, [sp, #8]
 800f7a8:	9201      	str	r2, [sp, #4]
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4673      	mov	r3, lr
 800f7ae:	4662      	mov	r2, ip
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f7ff fd46 	bl	800f244 <VL53LX_f_014>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800f7bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d109      	bne.n	800f7d8 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800f7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7c6:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800f7ca:	7fb8      	ldrb	r0, [r7, #30]
 800f7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	f7ff fb12 	bl	800edf8 <VL53LX_f_015>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f7d8:	7fbb      	ldrb	r3, [r7, #30]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	77bb      	strb	r3, [r7, #30]
 800f7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800f7e4:	7fba      	ldrb	r2, [r7, #30]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	f4ff af52 	bcc.w	800f690 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800f7ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d107      	bne.n	800f804 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	785b      	ldrb	r3, [r3, #1]
 800f7f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff fa25 	bl	800ec4a <VL53LX_f_016>
 800f800:	4603      	mov	r3, r0
 800f802:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f804:	2300      	movs	r3, #0
 800f806:	77bb      	strb	r3, [r7, #30]
 800f808:	e071      	b.n	800f8ee <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800f80a:	7fba      	ldrb	r2, [r7, #30]
 800f80c:	4613      	mov	r3, r2
 800f80e:	00db      	lsls	r3, r3, #3
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f81a:	4413      	add	r3, r2
 800f81c:	3304      	adds	r3, #4
 800f81e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800f820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f822:	7c9a      	ldrb	r2, [r3, #18]
 800f824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f826:	7c5b      	ldrb	r3, [r3, #17]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d25c      	bcs.n	800f8e6 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800f834:	429a      	cmp	r2, r3
 800f836:	dd57      	ble.n	800f8e8 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800f83c:	2bff      	cmp	r3, #255	@ 0xff
 800f83e:	d053      	beq.n	800f8e8 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800f840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f842:	7c9b      	ldrb	r3, [r3, #18]
 800f844:	461a      	mov	r2, r3
			prange_data =
 800f846:	234c      	movs	r3, #76	@ 0x4c
 800f848:	fb02 f303 	mul.w	r3, r2, r3
 800f84c:	3310      	adds	r3, #16
 800f84e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f850:	4413      	add	r3, r2
 800f852:	3304      	adds	r3, #4
 800f854:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800f856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d115      	bne.n	800f88a <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800f85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f860:	7c98      	ldrb	r0, [r3, #18]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 1020 	ldrb.w	r1, [r3, #32]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	8b5d      	ldrh	r5, [r3, #26]
 800f872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f874:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	9202      	str	r2, [sp, #8]
 800f87c:	697a      	ldr	r2, [r7, #20]
 800f87e:	9201      	str	r2, [sp, #4]
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	462b      	mov	r3, r5
 800f884:	4622      	mov	r2, r4
 800f886:	f7ff fd85 	bl	800f394 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800f88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d115      	bne.n	800f8be <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800f898:	69bb      	ldr	r3, [r7, #24]
 800f89a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800f8aa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f8ae:	9301      	str	r3, [sp, #4]
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	4623      	mov	r3, r4
 800f8b6:	f000 fb44 	bl	800ff42 <VL53LX_f_018>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800f8be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d108      	bne.n	800f8d8 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	8bd8      	ldrh	r0, [r3, #30]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f8d0:	693a      	ldr	r2, [r7, #16]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f000 fbda 	bl	801008c <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800f8d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8da:	7c9b      	ldrb	r3, [r3, #18]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8e2:	749a      	strb	r2, [r3, #18]
 800f8e4:	e000      	b.n	800f8e8 <VL53LX_f_025+0x400>
			continue;
 800f8e6:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800f8e8:	7fbb      	ldrb	r3, [r7, #30]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	77bb      	strb	r3, [r7, #30]
 800f8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8f0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800f8f4:	7fba      	ldrb	r2, [r7, #30]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d387      	bcc.n	800f80a <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800f8fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3724      	adds	r7, #36	@ 0x24
 800f902:	46bd      	mov	sp, r7
 800f904:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f906 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b08c      	sub	sp, #48	@ 0x30
 800f90a:	af02      	add	r7, sp, #8
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
 800f912:	4603      	mov	r3, r0
 800f914:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800f916:	2300      	movs	r3, #0
 800f918:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800f91c:	7bfa      	ldrb	r2, [r7, #15]
 800f91e:	4613      	mov	r3, r2
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	4413      	add	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	4413      	add	r3, r2
 800f92e:	3304      	adds	r3, #4
 800f930:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800f938:	2300      	movs	r3, #0
 800f93a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800f93c:	2300      	movs	r3, #0
 800f93e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800f940:	2300      	movs	r3, #0
 800f942:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800f944:	2300      	movs	r3, #0
 800f946:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	785a      	ldrb	r2, [r3, #1]
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	781a      	ldrb	r2, [r3, #0]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	789a      	ldrb	r2, [r3, #2]
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800f960:	6a3b      	ldr	r3, [r7, #32]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f968:	e04d      	b.n	800fa06 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	78da      	ldrb	r2, [r3, #3]
 800f96e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f972:	fbb3 f1f2 	udiv	r1, r3, r2
 800f976:	fb01 f202 	mul.w	r2, r1, r2
 800f97a:	1a9b      	subs	r3, r3, r2
 800f97c:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	7999      	ldrb	r1, [r3, #6]
 800f982:	f107 0218 	add.w	r2, r7, #24
 800f986:	7ff8      	ldrb	r0, [r7, #31]
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	f107 0314 	add.w	r3, r7, #20
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	4613      	mov	r3, r2
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	f000 fa7a 	bl	800fe90 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800f99c:	7ffb      	ldrb	r3, [r7, #31]
 800f99e:	69ba      	ldr	r2, [r7, #24]
 800f9a0:	6839      	ldr	r1, [r7, #0]
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	440b      	add	r3, r1
 800f9a6:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800f9a8:	7ffb      	ldrb	r3, [r7, #31]
 800f9aa:	697a      	ldr	r2, [r7, #20]
 800f9ac:	6839      	ldr	r1, [r7, #0]
 800f9ae:	3318      	adds	r3, #24
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	440b      	add	r3, r1
 800f9b4:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800f9b6:	7ffb      	ldrb	r3, [r7, #31]
 800f9b8:	693a      	ldr	r2, [r7, #16]
 800f9ba:	6839      	ldr	r1, [r7, #0]
 800f9bc:	3330      	adds	r3, #48	@ 0x30
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	440b      	add	r3, r1
 800f9c2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800f9c4:	69ba      	ldr	r2, [r7, #24]
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	689a      	ldr	r2, [r3, #8]
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800f9d2:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800f9d4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	3348      	adds	r3, #72	@ 0x48
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	440b      	add	r3, r1
 800f9de:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800f9ee:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800f9f0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800f9f2:	6839      	ldr	r1, [r7, #0]
 800f9f4:	3360      	adds	r3, #96	@ 0x60
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	440b      	add	r3, r1
 800f9fa:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800f9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa00:	3301      	adds	r3, #1
 800fa02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	791b      	ldrb	r3, [r3, #4]
 800fa0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d9ab      	bls.n	800f96a <VL53LX_f_026+0x64>
	}

	return status;
 800fa12:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3728      	adds	r7, #40	@ 0x28
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800fa1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa20:	b08f      	sub	sp, #60	@ 0x3c
 800fa22:	af06      	add	r7, sp, #24
 800fa24:	60ba      	str	r2, [r7, #8]
 800fa26:	607b      	str	r3, [r7, #4]
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800fa30:	2300      	movs	r3, #0
 800fa32:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800fa34:	2300      	movs	r3, #0
 800fa36:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800fa38:	7bfa      	ldrb	r2, [r7, #15]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	00db      	lsls	r3, r3, #3
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	4413      	add	r3, r2
 800fa4a:	3304      	adds	r3, #4
 800fa4c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	77fb      	strb	r3, [r7, #31]
 800fa60:	e0b9      	b.n	800fbd6 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	78da      	ldrb	r2, [r3, #3]
 800fa66:	7ffb      	ldrb	r3, [r7, #31]
 800fa68:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa6c:	fb01 f202 	mul.w	r2, r1, r2
 800fa70:	1a9b      	subs	r3, r3, r2
 800fa72:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800fa74:	7ffb      	ldrb	r3, [r7, #31]
 800fa76:	3301      	adds	r3, #1
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	78d2      	ldrb	r2, [r2, #3]
 800fa7c:	fb93 f1f2 	sdiv	r1, r3, r2
 800fa80:	fb01 f202 	mul.w	r2, r1, r2
 800fa84:	1a9b      	subs	r3, r3, r2
 800fa86:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	789b      	ldrb	r3, [r3, #2]
 800fa8c:	7dfa      	ldrb	r2, [r7, #23]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f080 809e 	bcs.w	800fbd0 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800fa98:	7dba      	ldrb	r2, [r7, #22]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	f080 8098 	bcs.w	800fbd0 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	3348      	adds	r3, #72	@ 0x48
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4413      	add	r3, r2
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10e      	bne.n	800face <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	3360      	adds	r3, #96	@ 0x60
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4413      	add	r3, r2
 800faba:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d106      	bne.n	800face <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	4413      	add	r3, r2
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800facc:	e043      	b.n	800fb56 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	3348      	adds	r3, #72	@ 0x48
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	4413      	add	r3, r2
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	db0e      	blt.n	800fafc <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	3360      	adds	r3, #96	@ 0x60
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4413      	add	r3, r2
 800fae8:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800faea:	2b00      	cmp	r3, #0
 800faec:	db06      	blt.n	800fafc <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800faee:	7dfb      	ldrb	r3, [r7, #23]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	4413      	add	r3, r2
 800faf4:	2201      	movs	r2, #1
 800faf6:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800fafa:	e02c      	b.n	800fb56 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800fafc:	7dfb      	ldrb	r3, [r7, #23]
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	3348      	adds	r3, #72	@ 0x48
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	da1e      	bge.n	800fb4a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	3360      	adds	r3, #96	@ 0x60
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4413      	add	r3, r2
 800fb16:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	db16      	blt.n	800fb4a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800fb1c:	7dbb      	ldrb	r3, [r7, #22]
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	3348      	adds	r3, #72	@ 0x48
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4413      	add	r3, r2
 800fb26:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	db0e      	blt.n	800fb4a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800fb2c:	7dbb      	ldrb	r3, [r7, #22]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	3360      	adds	r3, #96	@ 0x60
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4413      	add	r3, r2
 800fb36:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	da06      	bge.n	800fb4a <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800fb3c:	7dfb      	ldrb	r3, [r7, #23]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	4413      	add	r3, r2
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800fb48:	e005      	b.n	800fb56 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800fb4a:	7dfb      	ldrb	r3, [r7, #23]
 800fb4c:	68ba      	ldr	r2, [r7, #8]
 800fb4e:	4413      	add	r3, r2
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800fb56:	7dfb      	ldrb	r3, [r7, #23]
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d035      	beq.n	800fbd0 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	7ffa      	ldrb	r2, [r7, #31]
 800fb68:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800fb6a:	7dfb      	ldrb	r3, [r7, #23]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	4413      	add	r3, r2
 800fb72:	685c      	ldr	r4, [r3, #4]
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	3318      	adds	r3, #24
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	685d      	ldr	r5, [r3, #4]
 800fb80:	7dfb      	ldrb	r3, [r7, #23]
 800fb82:	68ba      	ldr	r2, [r7, #8]
 800fb84:	3330      	adds	r3, #48	@ 0x30
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	685e      	ldr	r6, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	78d2      	ldrb	r2, [r2, #3]
 800fb94:	69b9      	ldr	r1, [r7, #24]
 800fb96:	3118      	adds	r1, #24
 800fb98:	7ff8      	ldrb	r0, [r7, #31]
 800fb9a:	9105      	str	r1, [sp, #20]
 800fb9c:	9204      	str	r2, [sp, #16]
 800fb9e:	9303      	str	r3, [sp, #12]
 800fba0:	2300      	movs	r3, #0
 800fba2:	9302      	str	r3, [sp, #8]
 800fba4:	2300      	movs	r3, #0
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	2300      	movs	r3, #0
 800fbaa:	9300      	str	r3, [sp, #0]
 800fbac:	4633      	mov	r3, r6
 800fbae:	462a      	mov	r2, r5
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	f000 f81c 	bl	800fbee <VL53LX_f_028>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800fbba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fbbe:	f113 0f0f 	cmn.w	r3, #15
 800fbc2:	d105      	bne.n	800fbd0 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800fbc4:	7dfb      	ldrb	r3, [r7, #23]
 800fbc6:	68ba      	ldr	r2, [r7, #8]
 800fbc8:	4413      	add	r3, r2
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800fbd0:	7ffb      	ldrb	r3, [r7, #31]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	77fb      	strb	r3, [r7, #31]
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	791b      	ldrb	r3, [r3, #4]
 800fbda:	7ffa      	ldrb	r2, [r7, #31]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	f4ff af40 	bcc.w	800fa62 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800fbe2:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3724      	adds	r7, #36	@ 0x24
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbee <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800fbee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbf2:	b0b2      	sub	sp, #200	@ 0xc8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800fbfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fbfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fc02:	4603      	mov	r3, r0
 800fc04:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800fc08:	23f1      	movs	r3, #241	@ 0xf1
 800fc0a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800fc0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc12:	f04f 0300 	mov.w	r3, #0
 800fc16:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800fc1a:	f04f 0200 	mov.w	r2, #0
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800fc26:	f04f 0200 	mov.w	r2, #0
 800fc2a:	f04f 0300 	mov.w	r3, #0
 800fc2e:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800fc32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fc36:	17da      	asrs	r2, r3, #31
 800fc38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800fc3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800fc40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800fc44:	17da      	asrs	r2, r3, #31
 800fc46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fc4a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800fc4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fc52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800fc56:	4602      	mov	r2, r0
 800fc58:	ebb3 0802 	subs.w	r8, r3, r2
 800fc5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc60:	460a      	mov	r2, r1
 800fc62:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800fc66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc6a:	17da      	asrs	r2, r3, #31
 800fc6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800fc70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800fc74:	460b      	mov	r3, r1
 800fc76:	ebb8 0a03 	subs.w	sl, r8, r3
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	eb69 0b03 	sbc.w	fp, r9, r3
 800fc80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fc84:	17da      	asrs	r2, r3, #31
 800fc86:	673b      	str	r3, [r7, #112]	@ 0x70
 800fc88:	677a      	str	r2, [r7, #116]	@ 0x74
 800fc8a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800fc8e:	460b      	mov	r3, r1
 800fc90:	ebba 0403 	subs.w	r4, sl, r3
 800fc94:	4613      	mov	r3, r2
 800fc96:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800fc9a:	f04f 0200 	mov.w	r2, #0
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	032b      	lsls	r3, r5, #12
 800fca4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800fca8:	0322      	lsls	r2, r4, #12
 800fcaa:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800fcae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcb2:	17da      	asrs	r2, r3, #31
 800fcb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fcb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800fcb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800fcbc:	17da      	asrs	r2, r3, #31
 800fcbe:	663b      	str	r3, [r7, #96]	@ 0x60
 800fcc0:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800fcc2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800fcc6:	4623      	mov	r3, r4
 800fcc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fccc:	4602      	mov	r2, r0
 800fcce:	1a9b      	subs	r3, r3, r2
 800fcd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fcd2:	462b      	mov	r3, r5
 800fcd4:	460a      	mov	r2, r1
 800fcd6:	eb63 0302 	sbc.w	r3, r3, r2
 800fcda:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800fcdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fce0:	17da      	asrs	r2, r3, #31
 800fce2:	653b      	str	r3, [r7, #80]	@ 0x50
 800fce4:	657a      	str	r2, [r7, #84]	@ 0x54
 800fce6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800fcea:	4623      	mov	r3, r4
 800fcec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcf6:	462b      	mov	r3, r5
 800fcf8:	460a      	mov	r2, r1
 800fcfa:	eb63 0302 	sbc.w	r3, r3, r2
 800fcfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800fd00:	f04f 0200 	mov.w	r2, #0
 800fd04:	f04f 0300 	mov.w	r3, #0
 800fd08:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	030b      	lsls	r3, r1, #12
 800fd10:	4621      	mov	r1, r4
 800fd12:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800fd16:	4621      	mov	r1, r4
 800fd18:	030a      	lsls	r2, r1, #12
 800fd1a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800fd1e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800fd22:	4313      	orrs	r3, r2
 800fd24:	f000 80a8 	beq.w	800fe78 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800fd28:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800fd2c:	f04f 0000 	mov.w	r0, #0
 800fd30:	f04f 0100 	mov.w	r1, #0
 800fd34:	0319      	lsls	r1, r3, #12
 800fd36:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800fd3a:	0310      	lsls	r0, r2, #12
 800fd3c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800fd40:	1814      	adds	r4, r2, r0
 800fd42:	633c      	str	r4, [r7, #48]	@ 0x30
 800fd44:	414b      	adcs	r3, r1
 800fd46:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd48:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800fd4c:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800fd50:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800fd54:	1891      	adds	r1, r2, r2
 800fd56:	62b9      	str	r1, [r7, #40]	@ 0x28
 800fd58:	415b      	adcs	r3, r3
 800fd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800fd60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800fd64:	f7f0 fa64 	bl	8000230 <__aeabi_ldivmod>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800fd70:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800fd74:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800fd78:	6239      	str	r1, [r7, #32]
 800fd7a:	f143 0300 	adc.w	r3, r3, #0
 800fd7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800fd84:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800fd88:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd90:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd92:	f04f 0200 	mov.w	r2, #0
 800fd96:	f04f 0300 	mov.w	r3, #0
 800fd9a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800fd9e:	4629      	mov	r1, r5
 800fda0:	030b      	lsls	r3, r1, #12
 800fda2:	4621      	mov	r1, r4
 800fda4:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800fda8:	4621      	mov	r1, r4
 800fdaa:	030a      	lsls	r2, r1, #12
 800fdac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800fdb0:	1884      	adds	r4, r0, r2
 800fdb2:	61bc      	str	r4, [r7, #24]
 800fdb4:	eb41 0303 	adc.w	r3, r1, r3
 800fdb8:	61fb      	str	r3, [r7, #28]
 800fdba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fdbe:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800fdc2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800fdc6:	1c51      	adds	r1, r2, #1
 800fdc8:	63b9      	str	r1, [r7, #56]	@ 0x38
 800fdca:	f143 0300 	adc.w	r3, r3, #0
 800fdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdd0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	0fdb      	lsrs	r3, r3, #31
 800fdd8:	2200      	movs	r2, #0
 800fdda:	613b      	str	r3, [r7, #16]
 800fddc:	617a      	str	r2, [r7, #20]
 800fdde:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800fde2:	4623      	mov	r3, r4
 800fde4:	4602      	mov	r2, r0
 800fde6:	189b      	adds	r3, r3, r2
 800fde8:	60bb      	str	r3, [r7, #8]
 800fdea:	460b      	mov	r3, r1
 800fdec:	462a      	mov	r2, r5
 800fdee:	eb42 0303 	adc.w	r3, r2, r3
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	f04f 0200 	mov.w	r2, #0
 800fdf8:	f04f 0300 	mov.w	r3, #0
 800fdfc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800fe00:	4621      	mov	r1, r4
 800fe02:	084a      	lsrs	r2, r1, #1
 800fe04:	4629      	mov	r1, r5
 800fe06:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	104b      	asrs	r3, r1, #1
 800fe0e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800fe12:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	da05      	bge.n	800fe26 <VL53LX_f_028+0x238>
			mean_phase = 0;
 800fe1a:	f04f 0200 	mov.w	r2, #0
 800fe1e:	f04f 0300 	mov.w	r3, #0
 800fe22:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800fe26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800fe2a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fe2e:	f173 0300 	sbcs.w	r3, r3, #0
 800fe32:	db05      	blt.n	800fe40 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800fe34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe38:	f04f 0300 	mov.w	r3, #0
 800fe3c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800fe40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fe44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800fe48:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800fe4c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800fe4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fe52:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe56:	fb01 f202 	mul.w	r2, r1, r2
 800fe5a:	1a9b      	subs	r3, r3, r2
 800fe5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800fe60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fe64:	17da      	asrs	r2, r3, #31
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	607a      	str	r2, [r7, #4]
 800fe6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fe6e:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800fe78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fe7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fe80:	601a      	str	r2, [r3, #0]

	return status;
 800fe82:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	37c8      	adds	r7, #200	@ 0xc8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fe90 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b087      	sub	sp, #28
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60ba      	str	r2, [r7, #8]
 800fe98:	607b      	str	r3, [r7, #4]
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	73fb      	strb	r3, [r7, #15]
 800fe9e:	460b      	mov	r3, r1
 800fea0:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800feb0:	7bfa      	ldrb	r2, [r7, #15]
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	3206      	adds	r2, #6
 800feb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec0:	2200      	movs	r2, #0
 800fec2:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800fec4:	2300      	movs	r3, #0
 800fec6:	75fb      	strb	r3, [r7, #23]
 800fec8:	e02f      	b.n	800ff2a <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800feca:	7bfa      	ldrb	r2, [r7, #15]
 800fecc:	7dfb      	ldrb	r3, [r7, #23]
 800fece:	4413      	add	r3, r2
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	7a92      	ldrb	r2, [r2, #10]
 800fed4:	441a      	add	r2, r3
 800fed6:	7bbb      	ldrb	r3, [r7, #14]
 800fed8:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	7a92      	ldrb	r2, [r2, #10]
 800fede:	fb93 f1f2 	sdiv	r1, r3, r2
 800fee2:	fb01 f202 	mul.w	r2, r1, r2
 800fee6:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800fee8:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800feea:	7dfa      	ldrb	r2, [r7, #23]
 800feec:	7bbb      	ldrb	r3, [r7, #14]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d20a      	bcs.n	800ff08 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	7db9      	ldrb	r1, [r7, #22]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	3106      	adds	r1, #6
 800fefc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff00:	441a      	add	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	e00d      	b.n	800ff24 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800ff08:	7dfa      	ldrb	r2, [r7, #23]
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d909      	bls.n	800ff24 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	7db9      	ldrb	r1, [r7, #22]
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	3106      	adds	r1, #6
 800ff1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff1e:	441a      	add	r2, r3
 800ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff22:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800ff24:	7dfb      	ldrb	r3, [r7, #23]
 800ff26:	3301      	adds	r3, #1
 800ff28:	75fb      	strb	r3, [r7, #23]
 800ff2a:	7bbb      	ldrb	r3, [r7, #14]
 800ff2c:	005a      	lsls	r2, r3, #1
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	daca      	bge.n	800feca <VL53LX_f_022+0x3a>
	}
}
 800ff34:	bf00      	nop
 800ff36:	bf00      	nop
 800ff38:	371c      	adds	r7, #28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b088      	sub	sp, #32
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	60ba      	str	r2, [r7, #8]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	81fb      	strh	r3, [r7, #14]
 800ff50:	460b      	mov	r3, r1
 800ff52:	81bb      	strh	r3, [r7, #12]
 800ff54:	4613      	mov	r3, r2
 800ff56:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800ff64:	2300      	movs	r3, #0
 800ff66:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6a:	89fa      	ldrh	r2, [r7, #14]
 800ff6c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800ff6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff70:	89ba      	ldrh	r2, [r7, #12]
 800ff72:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800ff74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800ff7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7c:	88fa      	ldrh	r2, [r7, #6]
 800ff7e:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800ff80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff82:	8a5b      	ldrh	r3, [r3, #18]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ff88:	23f1      	movs	r3, #241	@ 0xf1
 800ff8a:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800ff8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ff94:	23f1      	movs	r3, #241	@ 0xf1
 800ff96:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800ff98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d16f      	bne.n	8010080 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800ffa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa2:	8a5b      	ldrh	r3, [r3, #18]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fd f904 	bl	800d1b2 <VL53LX_calc_pll_period_us>
 800ffaa:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800ffac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffae:	699b      	ldr	r3, [r3, #24]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800ffb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb6:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800ffb8:	4619      	mov	r1, r3
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffc0:	6978      	ldr	r0, [r7, #20]
 800ffc2:	f7fd f90d 	bl	800d1e0 <VL53LX_duration_maths>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffca:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800ffcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffce:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800ffd0:	0119      	lsls	r1, r3, #4
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffd8:	6978      	ldr	r0, [r7, #20]
 800ffda:	f7fd f901 	bl	800d1e0 <VL53LX_duration_maths>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800ffe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800ffe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffea:	69db      	ldr	r3, [r3, #28]
 800ffec:	4619      	mov	r1, r3
 800ffee:	4610      	mov	r0, r2
 800fff0:	f7fd fb6e 	bl	800d6d0 <VL53LX_rate_maths>
 800fff4:	4603      	mov	r3, r0
 800fff6:	461a      	mov	r2, r3
 800fff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fffa:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800fffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 8010000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010002:	6a1b      	ldr	r3, [r3, #32]
 8010004:	4619      	mov	r1, r3
 8010006:	4610      	mov	r0, r2
 8010008:	f7fd fb62 	bl	800d6d0 <VL53LX_rate_maths>
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
 8010010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010012:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 8010014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 8010018:	461a      	mov	r2, r3
 801001a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001c:	6a1b      	ldr	r3, [r3, #32]
 801001e:	4619      	mov	r1, r3
 8010020:	4610      	mov	r0, r2
 8010022:	f7fd fb55 	bl	800d6d0 <VL53LX_rate_maths>
 8010026:	4603      	mov	r3, r0
 8010028:	461a      	mov	r2, r3
 801002a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002c:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801002e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010030:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8010032:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8010034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010036:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 8010038:	4413      	add	r3, r2
 801003a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 801003c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010040:	2b01      	cmp	r3, #1
 8010042:	d905      	bls.n	8010050 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 8010044:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010048:	69ba      	ldr	r2, [r7, #24]
 801004a:	fbb2 f3f3 	udiv	r3, r2, r3
 801004e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 8010050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010052:	8ada      	ldrh	r2, [r3, #22]
 8010054:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010058:	69b9      	ldr	r1, [r7, #24]
 801005a:	2006      	movs	r0, #6
 801005c:	f7fd fb7d 	bl	800d75a <VL53LX_rate_per_spad_maths>
 8010060:	4603      	mov	r3, r0
 8010062:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8010064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010066:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 8010068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801006c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006e:	8ad9      	ldrh	r1, [r3, #22]
 8010070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010072:	69db      	ldr	r3, [r3, #28]
 8010074:	461a      	mov	r2, r3
 8010076:	f7fd f90c 	bl	800d292 <VL53LX_events_per_spad_maths>
 801007a:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 801007c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801007e:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8010080:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3720      	adds	r7, #32
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 801008c:	b590      	push	{r4, r7, lr}
 801008e:	b085      	sub	sp, #20
 8010090:	af02      	add	r7, sp, #8
 8010092:	4603      	mov	r3, r0
 8010094:	603a      	str	r2, [r7, #0]
 8010096:	80fb      	strh	r3, [r7, #6]
 8010098:	460b      	mov	r3, r1
 801009a:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	8a58      	ldrh	r0, [r3, #18]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	8a9c      	ldrh	r4, [r3, #20]
 80100a8:	88fb      	ldrh	r3, [r7, #6]
 80100aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80100ae:	9201      	str	r2, [sp, #4]
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	2300      	movs	r3, #0
 80100b4:	4622      	mov	r2, r4
 80100b6:	f7fd fb85 	bl	800d7c4 <VL53LX_range_maths>
 80100ba:	4603      	mov	r3, r0
 80100bc:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	8a58      	ldrh	r0, [r3, #18]
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	8a9c      	ldrh	r4, [r3, #20]
 80100d2:	88fb      	ldrh	r3, [r7, #6]
 80100d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80100d8:	9201      	str	r2, [sp, #4]
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	2300      	movs	r3, #0
 80100de:	4622      	mov	r2, r4
 80100e0:	f7fd fb70 	bl	800d7c4 <VL53LX_range_maths>
 80100e4:	4603      	mov	r3, r0
 80100e6:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	8a58      	ldrh	r0, [r3, #18]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	8a9c      	ldrh	r4, [r3, #20]
 80100fc:	88fb      	ldrh	r3, [r7, #6]
 80100fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010102:	9201      	str	r2, [sp, #4]
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	2300      	movs	r3, #0
 8010108:	4622      	mov	r2, r4
 801010a:	f7fd fb5b 	bl	800d7c4 <VL53LX_range_maths>
 801010e:	4603      	mov	r3, r0
 8010110:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	bd90      	pop	{r4, r7, pc}

08010120 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8010138:	2300      	movs	r3, #0
 801013a:	757b      	strb	r3, [r7, #21]





	memcpy(
 801013c:	22ac      	movs	r2, #172	@ 0xac
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f00d fc6e 	bl	801da22 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8010146:	2300      	movs	r3, #0
 8010148:	75fb      	strb	r3, [r7, #23]
 801014a:	e008      	b.n	801015e <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 801014c:	7dfa      	ldrb	r2, [r7, #23]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	3206      	adds	r2, #6
 8010152:	2100      	movs	r1, #0
 8010154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8010158:	7dfb      	ldrb	r3, [r7, #23]
 801015a:	3301      	adds	r3, #1
 801015c:	75fb      	strb	r3, [r7, #23]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7a5b      	ldrb	r3, [r3, #9]
 8010162:	7dfa      	ldrb	r2, [r7, #23]
 8010164:	429a      	cmp	r2, r3
 8010166:	d3f1      	bcc.n	801014c <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	68b8      	ldr	r0, [r7, #8]
 801016c:	f000 f878 	bl	8010260 <VL53LX_f_030>
 8010170:	4603      	mov	r3, r0
 8010172:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	7a9a      	ldrb	r2, [r3, #10]
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	7a9b      	ldrb	r3, [r3, #10]
 801017c:	429a      	cmp	r2, r3
 801017e:	d203      	bcs.n	8010188 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	7a9b      	ldrb	r3, [r3, #10]
 8010184:	75bb      	strb	r3, [r7, #22]
 8010186:	e002      	b.n	801018e <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	7a9b      	ldrb	r3, [r3, #10]
 801018c:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801018e:	2300      	movs	r3, #0
 8010190:	75fb      	strb	r3, [r7, #23]
 8010192:	e05c      	b.n	801024e <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 8010194:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	db0f      	blt.n	80101bc <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 801019c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80101a0:	461a      	mov	r2, r3
 80101a2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80101a6:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	7a92      	ldrb	r2, [r2, #10]
 80101ac:	b252      	sxtb	r2, r2
 80101ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80101b2:	fb01 f202 	mul.w	r2, r1, r2
 80101b6:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80101b8:	757b      	strb	r3, [r7, #21]
 80101ba:	e013      	b.n	80101e4 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	7a9b      	ldrb	r3, [r3, #10]
 80101c0:	b25b      	sxtb	r3, r3
 80101c2:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80101c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80101c8:	4619      	mov	r1, r3
 80101ca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80101ce:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 80101d0:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	7a92      	ldrb	r2, [r2, #10]
 80101d6:	b252      	sxtb	r2, r2
 80101d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80101dc:	fb01 f202 	mul.w	r2, r1, r2
 80101e0:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 80101e2:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80101e4:	7d7b      	ldrb	r3, [r7, #21]
 80101e6:	461a      	mov	r2, r3
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	3206      	adds	r2, #6
 80101ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 80101f0:	7df9      	ldrb	r1, [r7, #23]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	3106      	adds	r1, #6
 80101f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80101fa:	429a      	cmp	r2, r3
 80101fc:	dd12      	ble.n	8010224 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 80101fe:	7d7b      	ldrb	r3, [r7, #21]
 8010200:	461a      	mov	r2, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	3206      	adds	r2, #6
 8010206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801020a:	7df9      	ldrb	r1, [r7, #23]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3106      	adds	r1, #6
 8010210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8010214:	7d79      	ldrb	r1, [r7, #21]
 8010216:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8010218:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	1d82      	adds	r2, r0, #6
 801021e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010222:	e006      	b.n	8010232 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8010224:	7d7b      	ldrb	r3, [r7, #21]
 8010226:	461a      	mov	r2, r3
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	3206      	adds	r2, #6
 801022c:	2100      	movs	r1, #0
 801022e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8010232:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8010234:	7d7b      	ldrb	r3, [r7, #21]
 8010236:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3206      	adds	r2, #6
 801023c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	1d82      	adds	r2, r0, #6
 8010244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8010248:	7dfb      	ldrb	r3, [r7, #23]
 801024a:	3301      	adds	r3, #1
 801024c:	75fb      	strb	r3, [r7, #23]
 801024e:	7dfa      	ldrb	r2, [r7, #23]
 8010250:	7dbb      	ldrb	r3, [r7, #22]
 8010252:	429a      	cmp	r2, r3
 8010254:	d39e      	bcc.n	8010194 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8010256:	bf00      	nop
 8010258:	bf00      	nop
 801025a:	3718      	adds	r7, #24
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8010272:	2300      	movs	r3, #0
 8010274:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010280:	4618      	mov	r0, r3
 8010282:	f7fd fb87 	bl	800d994 <VL53LX_decode_vcsel_period>
 8010286:	4603      	mov	r3, r0
	period = 2048 *
 8010288:	02db      	lsls	r3, r3, #11
 801028a:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00a      	beq.n	80102a8 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	fbb3 f2f2 	udiv	r2, r3, r2
 801029e:	68b9      	ldr	r1, [r7, #8]
 80102a0:	fb01 f202 	mul.w	r2, r1, r2
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80102ae:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80102b0:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dd09      	ble.n	80102d0 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	da01      	bge.n	80102ca <VL53LX_f_030+0x6a>
 80102c6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80102ca:	12db      	asrs	r3, r3, #11
 80102cc:	75fb      	strb	r3, [r7, #23]
 80102ce:	e008      	b.n	80102e2 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	da01      	bge.n	80102de <VL53LX_f_030+0x7e>
 80102da:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80102de:	12db      	asrs	r3, r3, #11
 80102e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80102e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3718      	adds	r7, #24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b08e      	sub	sp, #56	@ 0x38
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80102f8:	2300      	movs	r3, #0
 80102fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 8010320:	22ac      	movs	r2, #172	@ 0xac
 8010322:	6879      	ldr	r1, [r7, #4]
 8010324:	6838      	ldr	r0, [r7, #0]
 8010326:	f00d fb7c 	bl	801da22 <memcpy>


	podata->VL53LX_p_021 = 0;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2200      	movs	r2, #0
 801032e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8010330:	2300      	movs	r3, #0
 8010332:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8010336:	e00a      	b.n	801034e <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 8010338:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	4413      	add	r3, r2
 8010340:	2210      	movs	r2, #16
 8010342:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8010344:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010348:	3301      	adds	r3, #1
 801034a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 801034e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010352:	2b05      	cmp	r3, #5
 8010354:	d9f0      	bls.n	8010338 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8010356:	2300      	movs	r3, #0
 8010358:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 801035c:	e00b      	b.n	8010376 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 801035e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	3206      	adds	r2, #6
 8010366:	2100      	movs	r1, #0
 8010368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 801036c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010370:	3301      	adds	r3, #1
 8010372:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	7a5b      	ldrb	r3, [r3, #9]
 801037a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 801037e:	429a      	cmp	r2, r3
 8010380:	d3ed      	bcc.n	801035e <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8010382:	2300      	movs	r3, #0
 8010384:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8010388:	e012      	b.n	80103b0 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 801038a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801038e:	3338      	adds	r3, #56	@ 0x38
 8010390:	443b      	add	r3, r7
 8010392:	2200      	movs	r2, #0
 8010394:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8010398:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801039c:	3338      	adds	r3, #56	@ 0x38
 801039e:	443b      	add	r3, r7
 80103a0:	2200      	movs	r2, #0
 80103a2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80103a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80103aa:	3301      	adds	r3, #1
 80103ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80103b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80103b4:	2b0f      	cmp	r3, #15
 80103b6:	d9e8      	bls.n	801038a <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 80103b8:	2300      	movs	r3, #0
 80103ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80103be:	2300      	movs	r3, #0
 80103c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80103c4:	e068      	b.n	8010498 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80103c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80103ca:	687a      	ldr	r2, [r7, #4]
 80103cc:	4413      	add	r3, r2
 80103ce:	7b1b      	ldrb	r3, [r3, #12]
 80103d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 80103d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80103d8:	3338      	adds	r3, #56	@ 0x38
 80103da:	443b      	add	r3, r7
 80103dc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d115      	bne.n	8010410 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 80103e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80103e8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80103ec:	0092      	lsls	r2, r2, #2
 80103ee:	b2d2      	uxtb	r2, r2
 80103f0:	3338      	adds	r3, #56	@ 0x38
 80103f2:	443b      	add	r3, r7
 80103f4:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 80103f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	4413      	add	r3, r2
 8010400:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8010404:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8010406:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801040a:	3301      	adds	r3, #1
 801040c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8010410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010414:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010418:	443a      	add	r2, r7
 801041a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801041e:	3201      	adds	r2, #1
 8010420:	b2d2      	uxtb	r2, r2
 8010422:	3338      	adds	r3, #56	@ 0x38
 8010424:	443b      	add	r3, r7
 8010426:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 801042a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801042e:	3338      	adds	r3, #56	@ 0x38
 8010430:	443b      	add	r3, r7
 8010432:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 801043a:	2300      	movs	r3, #0
 801043c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8010440:	e021      	b.n	8010486 <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 8010442:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8010446:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801044a:	441a      	add	r2, r3
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	3206      	adds	r2, #6
 8010450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8010454:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010458:	009a      	lsls	r2, r3, #2
 801045a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801045e:	441a      	add	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3206      	adds	r2, #6
 8010464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 8010468:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 801046c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010470:	4402      	add	r2, r0
 8010472:	4419      	add	r1, r3
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	3206      	adds	r2, #6
 8010478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 801047c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010480:	3301      	adds	r3, #1
 8010482:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8010486:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801048a:	2b03      	cmp	r3, #3
 801048c:	d9d9      	bls.n	8010442 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801048e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010492:	3301      	adds	r3, #1
 8010494:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8010498:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801049c:	2b05      	cmp	r3, #5
 801049e:	d992      	bls.n	80103c6 <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80104a0:	2300      	movs	r3, #0
 80104a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80104a6:	e022      	b.n	80104ee <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 80104a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	4413      	add	r3, r2
 80104b0:	7b1b      	ldrb	r3, [r3, #12]
 80104b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 80104b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80104ba:	2b0f      	cmp	r3, #15
 80104bc:	d80c      	bhi.n	80104d8 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80104be:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 80104c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 80104c6:	3238      	adds	r2, #56	@ 0x38
 80104c8:	443a      	add	r2, r7
 80104ca:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	4413      	add	r3, r2
 80104d2:	460a      	mov	r2, r1
 80104d4:	749a      	strb	r2, [r3, #18]
 80104d6:	e005      	b.n	80104e4 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80104d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104dc:	683a      	ldr	r2, [r7, #0]
 80104de:	4413      	add	r3, r2
 80104e0:	2200      	movs	r2, #0
 80104e2:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80104e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104e8:	3301      	adds	r3, #1
 80104ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80104ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104f2:	2b05      	cmp	r3, #5
 80104f4:	d9d8      	bls.n	80104a8 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 80104f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8010502:	2300      	movs	r3, #0
 8010504:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8010508:	e050      	b.n	80105ac <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801050a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801050e:	3338      	adds	r3, #56	@ 0x38
 8010510:	443b      	add	r3, r7
 8010512:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8010516:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 8010518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051a:	2b00      	cmp	r3, #0
 801051c:	dd41      	ble.n	80105a2 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 801051e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010522:	3338      	adds	r3, #56	@ 0x38
 8010524:	443b      	add	r3, r7
 8010526:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801052a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 801052e:	2300      	movs	r3, #0
 8010530:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8010534:	e031      	b.n	801059a <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 8010536:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801053a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801053e:	441a      	add	r2, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	3206      	adds	r2, #6
 8010544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8010548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054a:	0fda      	lsrs	r2, r3, #31
 801054c:	4413      	add	r3, r2
 801054e:	105b      	asrs	r3, r3, #1
 8010550:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 8010552:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8010556:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801055a:	441a      	add	r2, r3
 801055c:	4401      	add	r1, r0
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	3206      	adds	r2, #6
 8010562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 8010566:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801056a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801056e:	441a      	add	r2, r3
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	3206      	adds	r2, #6
 8010574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010578:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801057c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010580:	441a      	add	r2, r3
 8010582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010584:	fb91 f1f3 	sdiv	r1, r1, r3
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	3206      	adds	r2, #6
 801058c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8010590:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010594:	3301      	adds	r3, #1
 8010596:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 801059a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801059e:	2b03      	cmp	r3, #3
 80105a0:	d9c9      	bls.n	8010536 <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80105a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80105a6:	3301      	adds	r3, #1
 80105a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80105ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80105b0:	2b0f      	cmp	r3, #15
 80105b2:	d9aa      	bls.n	801050a <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	2200      	movs	r2, #0
 80105b8:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d102      	bne.n	80105c6 <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d002      	beq.n	80105cc <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2204      	movs	r2, #4
 80105ca:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 80105cc:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3738      	adds	r7, #56	@ 0x38
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 80105d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105da:	b0cb      	sub	sp, #300	@ 0x12c
 80105dc:	af06      	add	r7, sp, #24
 80105de:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 80105e2:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 80105e6:	6020      	str	r0, [r4, #0]
 80105e8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80105ec:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80105f0:	6001      	str	r1, [r0, #0]
 80105f2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80105f6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80105fa:	600a      	str	r2, [r1, #0]
 80105fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8010600:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8010604:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8010606:	2300      	movs	r3, #0
 8010608:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 801060c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010610:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8010614:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010618:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 801061c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8010620:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8010624:	f107 0318 	add.w	r3, r7, #24
 8010628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8010630:	2300      	movs	r3, #0
 8010632:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 8010654:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010658:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801065c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8010660:	6818      	ldr	r0, [r3, #0]
 8010662:	f7ff fe44 	bl	80102ee <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 8010666:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801066a:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 801066c:	4619      	mov	r1, r3
 801066e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010672:	3348      	adds	r3, #72	@ 0x48
 8010674:	461a      	mov	r2, r3
 8010676:	2000      	movs	r0, #0
 8010678:	f7fd f9dd 	bl	800da36 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 801067c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010680:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010684:	3348      	adds	r3, #72	@ 0x48
 8010686:	4619      	mov	r1, r3
 8010688:	4610      	mov	r0, r2
 801068a:	f7fd f996 	bl	800d9ba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 801068e:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8010692:	2b00      	cmp	r3, #0
 8010694:	d142      	bne.n	801071c <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8010696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801069a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d039      	beq.n	801071c <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 80106a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80106b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 80106c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 80106d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80106de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80106e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80106e6:	6812      	ldr	r2, [r2, #0]
 80106e8:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 80106ec:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80106f0:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80106f4:	6809      	ldr	r1, [r1, #0]
 80106f6:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 80106fa:	f107 0014 	add.w	r0, r7, #20
 80106fe:	9004      	str	r0, [sp, #16]
 8010700:	9103      	str	r1, [sp, #12]
 8010702:	9202      	str	r2, [sp, #8]
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	2300      	movs	r3, #0
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	2300      	movs	r3, #0
 801070c:	4632      	mov	r2, r6
 801070e:	4629      	mov	r1, r5
 8010710:	4620      	mov	r0, r4
 8010712:	f002 f9af 	bl	8012a74 <VL53LX_f_032>
 8010716:	4603      	mov	r3, r0
 8010718:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 801071c:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8010720:	2b00      	cmp	r3, #0
 8010722:	d115      	bne.n	8010750 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8010724:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010728:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00c      	beq.n	8010750 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 8010736:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010740:	3348      	adds	r3, #72	@ 0x48
 8010742:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8010746:	f002 fc04 	bl	8012f52 <VL53LX_f_033>
 801074a:	4603      	mov	r3, r0
 801074c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8010750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010754:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 8010758:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801075c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 8010760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010764:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 8010768:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801076c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8010770:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010774:	2200      	movs	r2, #0
 8010776:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 801077a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801077e:	2200      	movs	r2, #0
 8010780:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 8010784:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010788:	2200      	movs	r2, #0
 801078a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 801078e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010792:	2200      	movs	r2, #0
 8010794:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 8010798:	2300      	movs	r3, #0
 801079a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 801079e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d002      	beq.n	80107b6 <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 80107b0:	2301      	movs	r3, #1
 80107b2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80107b6:	2300      	movs	r3, #0
 80107b8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80107bc:	e108      	b.n	80109d0 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80107be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80107cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 80107d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107d4:	3348      	adds	r3, #72	@ 0x48
 80107d6:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80107da:	7814      	ldrb	r4, [r2, #0]
 80107dc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80107e0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80107e4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80107e8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80107ec:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80107f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80107f4:	9405      	str	r4, [sp, #20]
 80107f6:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 80107fa:	9404      	str	r4, [sp, #16]
 80107fc:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 8010800:	9403      	str	r4, [sp, #12]
 8010802:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 8010806:	9402      	str	r4, [sp, #8]
 8010808:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 801080c:	9401      	str	r4, [sp, #4]
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010814:	6812      	ldr	r2, [r2, #0]
 8010816:	6809      	ldr	r1, [r1, #0]
 8010818:	6800      	ldr	r0, [r0, #0]
 801081a:	f7fe fe65 	bl	800f4e8 <VL53LX_f_025>
 801081e:	4603      	mov	r3, r0
 8010820:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 8010824:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8010828:	2b00      	cmp	r3, #0
 801082a:	f040 80cb 	bne.w	80109c4 <VL53LX_hist_process_data+0x3ec>
 801082e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8010832:	2b00      	cmp	r3, #0
 8010834:	f040 80c6 	bne.w	80109c4 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8010838:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801083c:	7c9b      	ldrb	r3, [r3, #18]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d110      	bne.n	8010864 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 8010842:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010846:	3314      	adds	r3, #20
 8010848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 801084c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010850:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8010852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010856:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 8010858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801085c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 801085e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010862:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8010864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8010870:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8010874:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010880:	fb02 f303 	mul.w	r3, r2, r3
 8010884:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8010888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801088c:	011b      	lsls	r3, r3, #4
 801088e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8010892:	2300      	movs	r3, #0
 8010894:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8010898:	e08b      	b.n	80109b2 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 801089a:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 801089e:	224c      	movs	r2, #76	@ 0x4c
 80108a0:	fb02 f303 	mul.w	r3, r2, r3
 80108a4:	3310      	adds	r3, #16
 80108a6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80108aa:	4413      	add	r3, r2
 80108ac:	3304      	adds	r3, #4
 80108ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 80108b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108b6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 80108ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108be:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80108c2:	429a      	cmp	r2, r3
 80108c4:	dd0e      	ble.n	80108e4 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 80108c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108ca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80108ce:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 80108d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108d4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80108d8:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	b29b      	uxth	r3, r3
				delta_mm =
 80108de:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80108e2:	e00d      	b.n	8010900 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 80108e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108e8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80108ec:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 80108ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80108f2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80108f6:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	b29b      	uxth	r3, r3
				delta_mm =
 80108fc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8010900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 801090c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8010910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801091c:	fb02 f303 	mul.w	r3, r2, r3
 8010920:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 8010924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010928:	015b      	lsls	r3, r3, #5
 801092a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 801092e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010932:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8010936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801093a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 8010944:	429a      	cmp	r2, r3
 8010946:	dd2f      	ble.n	80109a8 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8010948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801094c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8010950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010954:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801095e:	429a      	cmp	r2, r3
 8010960:	da22      	bge.n	80109a8 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 8010962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8010968:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801096c:	429a      	cmp	r2, r3
 801096e:	d91b      	bls.n	80109a8 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 8010970:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010974:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010976:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8010978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801097c:	4293      	cmp	r3, r2
 801097e:	d913      	bls.n	80109a8 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 8010980:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8010984:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8010988:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 801098c:	6812      	ldr	r2, [r2, #0]
 801098e:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 8010990:	4293      	cmp	r3, r2
 8010992:	da09      	bge.n	80109a8 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8010994:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010998:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 801099c:	224c      	movs	r2, #76	@ 0x4c
 801099e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80109a2:	4618      	mov	r0, r3
 80109a4:	f00d f83d 	bl	801da22 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 80109a8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80109ac:	3301      	adds	r3, #1
 80109ae:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80109b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80109b6:	7c9b      	ldrb	r3, [r3, #18]
 80109b8:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80109bc:	429a      	cmp	r2, r3
 80109be:	f4ff af6c 	bcc.w	801089a <VL53LX_hist_process_data+0x2c2>
 80109c2:	e000      	b.n	80109c6 <VL53LX_hist_process_data+0x3ee>
			continue;
 80109c4:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 80109c6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80109ca:	3301      	adds	r3, #1
 80109cc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80109d0:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80109d4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80109d8:	429a      	cmp	r2, r3
 80109da:	f67f aef0 	bls.w	80107be <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 80109de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80109e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80109ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 80109f0:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109fe <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b086      	sub	sp, #24
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	60f8      	str	r0, [r7, #12]
 8010a06:	460b      	mov	r3, r1
 8010a08:	607a      	str	r2, [r7, #4]
 8010a0a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 8010a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d104      	bne.n	8010a22 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f7f9 fb77 	bl	800a10c <VL53LX_disable_firmware>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 8010a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d104      	bne.n	8010a34 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f7f9 fb9f 	bl	800a16e <VL53LX_enable_powerforce>
 8010a30:	4603      	mov	r3, r0
 8010a32:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 8010a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d105      	bne.n	8010a48 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 8010a3c:	21fa      	movs	r1, #250	@ 0xfa
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f002 fcf6 	bl	8013430 <VL53LX_WaitUs>
 8010a44:	4603      	mov	r3, r0
 8010a46:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 8010a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d107      	bne.n	8010a60 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 8010a50:	2201      	movs	r2, #1
 8010a52:	f240 7181 	movw	r1, #1921	@ 0x781
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f002 fbf8 	bl	801324c <VL53LX_WrByte>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8010a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d107      	bne.n	8010a78 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 8010a68:	2205      	movs	r2, #5
 8010a6a:	f240 6183 	movw	r1, #1667	@ 0x683
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f002 fbec 	bl	801324c <VL53LX_WrByte>
 8010a74:	4603      	mov	r3, r0
 8010a76:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 8010a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d105      	bne.n	8010a8c <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f002 fcd4 	bl	8013430 <VL53LX_WaitUs>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 8010a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d107      	bne.n	8010aa4 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 8010a94:	2201      	movs	r2, #1
 8010a96:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f002 fbd6 	bl	801324c <VL53LX_WrByte>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 8010aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d108      	bne.n	8010abe <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 8010aac:	897b      	ldrh	r3, [r7, #10]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	f240 7184 	movw	r1, #1924	@ 0x784
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f002 fbf3 	bl	80132a0 <VL53LX_WrWord>
 8010aba:	4603      	mov	r3, r0
 8010abc:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8010abe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3718      	adds	r7, #24
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b086      	sub	sp, #24
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	607b      	str	r3, [r7, #4]
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	72fb      	strb	r3, [r7, #11]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010adc:	2300      	movs	r3, #0
 8010ade:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8010ae4:	7afb      	ldrb	r3, [r7, #11]
 8010ae6:	75bb      	strb	r3, [r7, #22]
 8010ae8:	e041      	b.n	8010b6e <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 8010aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d108      	bne.n	8010b04 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 8010af2:	7dbb      	ldrb	r3, [r7, #22]
 8010af4:	461a      	mov	r2, r3
 8010af6:	f240 7194 	movw	r1, #1940	@ 0x794
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f002 fba6 	bl	801324c <VL53LX_WrByte>
 8010b00:	4603      	mov	r3, r0
 8010b02:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 8010b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d107      	bne.n	8010b1c <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f240 7183 	movw	r1, #1923	@ 0x783
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f002 fb9a 	bl	801324c <VL53LX_WrByte>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 8010b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d105      	bne.n	8010b30 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 8010b24:	2105      	movs	r1, #5
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f002 fc82 	bl	8013430 <VL53LX_WaitUs>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 8010b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d107      	bne.n	8010b48 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 8010b38:	2201      	movs	r2, #1
 8010b3a:	f240 7183 	movw	r1, #1923	@ 0x783
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f002 fb84 	bl	801324c <VL53LX_WrByte>
 8010b44:	4603      	mov	r3, r0
 8010b46:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 8010b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d108      	bne.n	8010b62 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 8010b50:	2304      	movs	r3, #4
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f002 fb41 	bl	80131e0 <VL53LX_ReadMulti>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	3304      	adds	r3, #4
 8010b66:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8010b68:	7dbb      	ldrb	r3, [r7, #22]
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	75bb      	strb	r3, [r7, #22]
 8010b6e:	7dba      	ldrb	r2, [r7, #22]
 8010b70:	7af9      	ldrb	r1, [r7, #11]
 8010b72:	7abb      	ldrb	r3, [r7, #10]
 8010b74:	440b      	add	r3, r1
 8010b76:	429a      	cmp	r2, r3
 8010b78:	dbb7      	blt.n	8010aea <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8010b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3718      	adds	r7, #24
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d107      	bne.n	8010baa <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	f240 7183 	movw	r1, #1923	@ 0x783
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f002 fb53 	bl	801324c <VL53LX_WrByte>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8010baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d107      	bne.n	8010bc2 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f240 7181 	movw	r1, #1921	@ 0x781
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f002 fb47 	bl	801324c <VL53LX_WrByte>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d104      	bne.n	8010bd4 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7f9 fae1 	bl	800a192 <VL53LX_disable_powerforce>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 8010bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d104      	bne.n	8010be6 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7f9 fa83 	bl	800a0e8 <VL53LX_enable_firmware>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8010be6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}

08010bf2 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 8010bf2:	b480      	push	{r7}
 8010bf4:	b087      	sub	sp, #28
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	60b9      	str	r1, [r7, #8]
 8010bfc:	607a      	str	r2, [r7, #4]
 8010bfe:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010c00:	2300      	movs	r3, #0
 8010c02:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8010c08:	89fb      	ldrh	r3, [r7, #14]
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d802      	bhi.n	8010c14 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010c0e:	f06f 0308 	mvn.w	r3, #8
 8010c12:	e017      	b.n	8010c44 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 8010c14:	23f0      	movs	r3, #240	@ 0xf0
 8010c16:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	3302      	adds	r3, #2
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	8afb      	ldrh	r3, [r7, #22]
 8010c22:	1a9b      	subs	r3, r3, r2
 8010c24:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8010c26:	8afb      	ldrh	r3, [r7, #22]
 8010c28:	2bff      	cmp	r3, #255	@ 0xff
 8010c2a:	d901      	bls.n	8010c30 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8010c30:	8afb      	ldrh	r3, [r7, #22]
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	78da      	ldrb	r2, [r3, #3]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	705a      	strb	r2, [r3, #1]

	return status;
 8010c40:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	371c      	adds	r7, #28
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 8010c50:	b590      	push	{r4, r7, lr}
 8010c52:	b087      	sub	sp, #28
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	4603      	mov	r3, r0
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8010c6a:	89fb      	ldrh	r3, [r7, #14]
 8010c6c:	2b37      	cmp	r3, #55	@ 0x37
 8010c6e:	d802      	bhi.n	8010c76 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010c70:	f06f 0308 	mvn.w	r3, #8
 8010c74:	e03e      	b.n	8010cf4 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8010c76:	68b9      	ldr	r1, [r7, #8]
 8010c78:	2002      	movs	r0, #2
 8010c7a:	f7f9 f91b 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	3302      	adds	r3, #2
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	2002      	movs	r0, #2
 8010c8e:	f7f9 f911 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8010c9e:	099b      	lsrs	r3, r3, #6
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2219      	movs	r2, #25
 8010caa:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2205      	movs	r2, #5
 8010cb0:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2205      	movs	r2, #5
 8010cb6:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	3304      	adds	r3, #4
 8010cbc:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	74fb      	strb	r3, [r7, #19]
 8010cc2:	e012      	b.n	8010cea <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8010cc4:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 8010cc6:	6979      	ldr	r1, [r7, #20]
 8010cc8:	2002      	movs	r0, #2
 8010cca:	f7f9 f8f3 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	1d23      	adds	r3, r4, #4
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	460a      	mov	r2, r1
 8010cdc:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	3302      	adds	r3, #2
 8010ce2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8010ce4:	7cfb      	ldrb	r3, [r7, #19]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	74fb      	strb	r3, [r7, #19]
 8010cea:	7cfb      	ldrb	r3, [r7, #19]
 8010cec:	2b18      	cmp	r3, #24
 8010cee:	d9e9      	bls.n	8010cc4 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8010cf0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	371c      	adds	r7, #28
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd90      	pop	{r4, r7, pc}

08010cfc <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b086      	sub	sp, #24
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8010d0e:	89fb      	ldrh	r3, [r7, #14]
 8010d10:	2b07      	cmp	r3, #7
 8010d12:	d802      	bhi.n	8010d1a <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010d14:	f06f 0308 	mvn.w	r3, #8
 8010d18:	e027      	b.n	8010d6a <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8010d1a:	68b9      	ldr	r1, [r7, #8]
 8010d1c:	2002      	movs	r0, #2
 8010d1e:	f7f9 f8c9 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010d22:	4603      	mov	r3, r0
 8010d24:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	3302      	adds	r3, #2
 8010d2e:	4619      	mov	r1, r3
 8010d30:	2002      	movs	r0, #2
 8010d32:	f7f9 f8bf 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010d36:	4603      	mov	r3, r0
 8010d38:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	3304      	adds	r3, #4
 8010d42:	4619      	mov	r1, r3
 8010d44:	2002      	movs	r0, #2
 8010d46:	f7f9 f8b5 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	3306      	adds	r3, #6
 8010d56:	4619      	mov	r1, r3
 8010d58:	2002      	movs	r0, #2
 8010d5a:	f7f9 f8ab 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	80da      	strh	r2, [r3, #6]

	return status;
 8010d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3718      	adds	r7, #24
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b086      	sub	sp, #24
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	4603      	mov	r3, r0
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
 8010d7e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8010d80:	2300      	movs	r3, #0
 8010d82:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8010d84:	89fb      	ldrh	r3, [r7, #14]
 8010d86:	2b0f      	cmp	r3, #15
 8010d88:	d802      	bhi.n	8010d90 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8010d8a:	f06f 0308 	mvn.w	r3, #8
 8010d8e:	e04d      	b.n	8010e2c <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8010d90:	68b9      	ldr	r1, [r7, #8]
 8010d92:	2002      	movs	r0, #2
 8010d94:	f7f9 f88e 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	789a      	ldrb	r2, [r3, #2]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	78da      	ldrb	r2, [r3, #3]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	3304      	adds	r3, #4
 8010db4:	4619      	mov	r1, r3
 8010db6:	2002      	movs	r0, #2
 8010db8:	f7f9 f87c 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	3306      	adds	r3, #6
 8010dc8:	4619      	mov	r1, r3
 8010dca:	2002      	movs	r0, #2
 8010dcc:	f7f9 f872 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	4619      	mov	r1, r3
 8010dde:	2002      	movs	r0, #2
 8010de0:	f7f9 f868 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010de4:	4603      	mov	r3, r0
 8010de6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	330a      	adds	r3, #10
 8010df0:	4619      	mov	r1, r3
 8010df2:	2002      	movs	r0, #2
 8010df4:	f7f9 f85e 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	330c      	adds	r3, #12
 8010e04:	4619      	mov	r1, r3
 8010e06:	2002      	movs	r0, #2
 8010e08:	f7f9 f854 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	330e      	adds	r3, #14
 8010e18:	4619      	mov	r1, r3
 8010e1a:	2002      	movs	r0, #2
 8010e1c:	f7f9 f84a 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	81da      	strh	r2, [r3, #14]

	return status;
 8010e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3718      	adds	r7, #24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	607b      	str	r3, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	72fb      	strb	r3, [r7, #11]
 8010e42:	4613      	mov	r3, r2
 8010e44:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010e46:	2300      	movs	r3, #0
 8010e48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8010e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d106      	bne.n	8010e60 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 8010e52:	2232      	movs	r2, #50	@ 0x32
 8010e54:	2104      	movs	r1, #4
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f7ff fdd1 	bl	80109fe <VL53LX_nvm_enable>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 8010e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d107      	bne.n	8010e78 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 8010e68:	7aba      	ldrb	r2, [r7, #10]
 8010e6a:	7af9      	ldrb	r1, [r7, #11]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f7ff fe2b 	bl	8010aca <VL53LX_nvm_read>
 8010e74:	4603      	mov	r3, r0
 8010e76:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 8010e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d104      	bne.n	8010e8a <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f7ff fe80 	bl	8010b86 <VL53LX_nvm_disable>
 8010e86:	4603      	mov	r3, r0
 8010e88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8010e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3718      	adds	r7, #24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8010ea4:	f107 0308 	add.w	r3, r7, #8
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	212e      	movs	r1, #46	@ 0x2e
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7ff ffc1 	bl	8010e34 <VL53LX_read_nvm_raw_data>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d108      	bne.n	8010ed0 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 8010ebe:	f107 0308 	add.w	r3, r7, #8
 8010ec2:	683a      	ldr	r2, [r7, #0]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	2004      	movs	r0, #4
 8010ec8:	f7ff fe93 	bl	8010bf2 <VL53LX_nvm_decode_optical_centre>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8010ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b092      	sub	sp, #72	@ 0x48
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8010eec:	f107 030c 	add.w	r3, r7, #12
 8010ef0:	220e      	movs	r2, #14
 8010ef2:	2157      	movs	r1, #87	@ 0x57
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff ff9d 	bl	8010e34 <VL53LX_read_nvm_raw_data>
 8010efa:	4603      	mov	r3, r0
 8010efc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010f00:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d109      	bne.n	8010f1c <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 8010f08:	f107 030c 	add.w	r3, r7, #12
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	4619      	mov	r1, r3
 8010f10:	2038      	movs	r0, #56	@ 0x38
 8010f12:	f7ff fe9d 	bl	8010c50 <VL53LX_nvm_decode_cal_peak_rate_map>
 8010f16:	4603      	mov	r3, r0
 8010f18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010f1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3748      	adds	r7, #72	@ 0x48
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010f32:	2300      	movs	r3, #0
 8010f34:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8010f36:	f107 030c 	add.w	r3, r7, #12
 8010f3a:	2202      	movs	r2, #2
 8010f3c:	2165      	movs	r1, #101	@ 0x65
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7ff ff78 	bl	8010e34 <VL53LX_read_nvm_raw_data>
 8010f44:	4603      	mov	r3, r0
 8010f46:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d108      	bne.n	8010f62 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 8010f50:	f107 030c 	add.w	r3, r7, #12
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	4619      	mov	r1, r3
 8010f58:	2008      	movs	r0, #8
 8010f5a:	f7ff fecf 	bl	8010cfc <VL53LX_nvm_decode_additional_offset_cal_data>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8010f62:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3718      	adds	r7, #24
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b08a      	sub	sp, #40	@ 0x28
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	460b      	mov	r3, r1
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 8010f82:	897b      	ldrh	r3, [r7, #10]
 8010f84:	089b      	lsrs	r3, r3, #2
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	b2d9      	uxtb	r1, r3
 8010f8a:	f107 0314 	add.w	r3, r7, #20
 8010f8e:	2204      	movs	r2, #4
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f7ff ff4f 	bl	8010e34 <VL53LX_read_nvm_raw_data>
 8010f96:	4603      	mov	r3, r0
 8010f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8010f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d109      	bne.n	8010fb8 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 8010fa4:	f107 0314 	add.w	r3, r7, #20
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	4619      	mov	r1, r3
 8010fac:	2010      	movs	r0, #16
 8010fae:	f7ff fee0 	bl	8010d72 <VL53LX_nvm_decode_fmt_range_results_data>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8010fb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3728      	adds	r7, #40	@ 0x28
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	607a      	str	r2, [r7, #4]
 8010fd0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8010fd6:	897b      	ldrh	r3, [r7, #10]
 8010fd8:	2b0a      	cmp	r3, #10
 8010fda:	d802      	bhi.n	8010fe2 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010fdc:	f06f 0309 	mvn.w	r3, #9
 8010fe0:	e047      	b.n	8011072 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fea:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010ff8:	f002 020f 	and.w	r2, r2, #15
 8010ffc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010ffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801100c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801100e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011018:	f002 0203 	and.w	r2, r2, #3
 801101c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801101e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011028:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801102c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801102e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	88d8      	ldrh	r0, [r3, #6]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3305      	adds	r3, #5
 8011038:	461a      	mov	r2, r3
 801103a:	2102      	movs	r1, #2
 801103c:	f7f8 ff0f 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8011048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8011052:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801105c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011060:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801106c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801106e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b086      	sub	sp, #24
 801107e:	af00      	add	r7, sp, #0
 8011080:	4603      	mov	r3, r0
 8011082:	60b9      	str	r1, [r7, #8]
 8011084:	607a      	str	r2, [r7, #4]
 8011086:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011088:	2300      	movs	r3, #0
 801108a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801108c:	89fb      	ldrh	r3, [r7, #14]
 801108e:	2b0a      	cmp	r3, #10
 8011090:	d802      	bhi.n	8011098 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011092:	f06f 0309 	mvn.w	r3, #9
 8011096:	e046      	b.n	8011126 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110a0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	3301      	adds	r3, #1
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f003 030f 	and.w	r3, r3, #15
 80110b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	3302      	adds	r3, #2
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	3303      	adds	r3, #3
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	f003 0303 	and.w	r3, r3, #3
 80110d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	3304      	adds	r3, #4
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	3305      	adds	r3, #5
 80110ea:	4619      	mov	r1, r3
 80110ec:	2002      	movs	r0, #2
 80110ee:	f7f8 fee1 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 80110f2:	4603      	mov	r3, r0
 80110f4:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	79da      	ldrb	r2, [r3, #7]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	7a1a      	ldrb	r2, [r3, #8]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	3309      	adds	r3, #9
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011114:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	7a9a      	ldrb	r2, [r3, #10]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8011122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3718      	adds	r7, #24
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b086      	sub	sp, #24
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011138:	2300      	movs	r3, #0
 801113a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 801113c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d108      	bne.n	8011156 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 8011144:	f107 020c 	add.w	r2, r7, #12
 8011148:	230b      	movs	r3, #11
 801114a:	2101      	movs	r1, #1
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f002 f847 	bl	80131e0 <VL53LX_ReadMulti>
 8011152:	4603      	mov	r3, r0
 8011154:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8011156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d108      	bne.n	8011170 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 801115e:	f107 030c 	add.w	r3, r7, #12
 8011162:	683a      	ldr	r2, [r7, #0]
 8011164:	4619      	mov	r1, r3
 8011166:	200b      	movs	r0, #11
 8011168:	f7ff ff87 	bl	801107a <VL53LX_i2c_decode_static_nvm_managed>
 801116c:	4603      	mov	r3, r0
 801116e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8011170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	460b      	mov	r3, r1
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801118a:	2300      	movs	r3, #0
 801118c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 801118e:	897b      	ldrh	r3, [r7, #10]
 8011190:	2b16      	cmp	r3, #22
 8011192:	d802      	bhi.n	801119a <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011194:	f06f 0309 	mvn.w	r3, #9
 8011198:	e076      	b.n	8011288 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80111aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80111b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80111be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80111c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80111d2:	f002 020f 	and.w	r2, r2, #15
 80111d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80111d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80111e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80111ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80111f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80111f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80111fc:	f002 0203 	and.w	r2, r2, #3
 8011200:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8011202:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	8958      	ldrh	r0, [r3, #10]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	3309      	adds	r3, #9
 801120c:	461a      	mov	r2, r3
 801120e:	2102      	movs	r1, #2
 8011210:	f7f8 fe25 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	330b      	adds	r3, #11
 801121e:	461a      	mov	r2, r3
 8011220:	2102      	movs	r1, #2
 8011222:	f7f8 fe67 	bl	8009ef4 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	330d      	adds	r3, #13
 8011230:	461a      	mov	r2, r3
 8011232:	2102      	movs	r1, #2
 8011234:	f7f8 fe5e 	bl	8009ef4 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	8a18      	ldrh	r0, [r3, #16]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	330f      	adds	r3, #15
 8011240:	461a      	mov	r2, r3
 8011242:	2102      	movs	r1, #2
 8011244:	f7f8 fe0b 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 801124e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011252:	b218      	sxth	r0, r3
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3311      	adds	r3, #17
 8011258:	461a      	mov	r2, r3
 801125a:	2102      	movs	r1, #2
 801125c:	f7f8 fe4a 	bl	8009ef4 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	3313      	adds	r3, #19
 801126a:	461a      	mov	r2, r3
 801126c:	2102      	movs	r1, #2
 801126e:	f7f8 fe41 	bl	8009ef4 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3315      	adds	r3, #21
 801127c:	461a      	mov	r2, r3
 801127e:	2102      	movs	r1, #2
 8011280:	f7f8 fe38 	bl	8009ef4 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8011284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3718      	adds	r7, #24
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
 801129c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801129e:	2300      	movs	r3, #0
 80112a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80112a2:	89fb      	ldrh	r3, [r7, #14]
 80112a4:	2b16      	cmp	r3, #22
 80112a6:	d802      	bhi.n	80112ae <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80112a8:	f06f 0309 	mvn.w	r3, #9
 80112ac:	e079      	b.n	80113a2 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	785a      	ldrb	r2, [r3, #1]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	789a      	ldrb	r2, [r3, #2]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	78da      	ldrb	r2, [r3, #3]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	791a      	ldrb	r2, [r3, #4]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	3305      	adds	r3, #5
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	f003 030f 	and.w	r3, r3, #15
 80112e0:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	799a      	ldrb	r2, [r3, #6]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	3307      	adds	r3, #7
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112f8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	3308      	adds	r3, #8
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 0303 	and.w	r3, r3, #3
 8011308:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	3309      	adds	r3, #9
 8011312:	4619      	mov	r1, r3
 8011314:	2002      	movs	r0, #2
 8011316:	f7f8 fdcd 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 801131a:	4603      	mov	r3, r0
 801131c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	330b      	adds	r3, #11
 8011326:	4619      	mov	r1, r3
 8011328:	2002      	movs	r0, #2
 801132a:	f7f8 fe0f 	bl	8009f4c <VL53LX_i2c_decode_int16_t>
 801132e:	4603      	mov	r3, r0
 8011330:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	330d      	adds	r3, #13
 801133a:	4619      	mov	r1, r3
 801133c:	2002      	movs	r0, #2
 801133e:	f7f8 fe05 	bl	8009f4c <VL53LX_i2c_decode_int16_t>
 8011342:	4603      	mov	r3, r0
 8011344:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	330f      	adds	r3, #15
 801134e:	4619      	mov	r1, r3
 8011350:	2002      	movs	r0, #2
 8011352:	f7f8 fdaf 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011356:	4603      	mov	r3, r0
 8011358:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	3311      	adds	r3, #17
 8011362:	4619      	mov	r1, r3
 8011364:	2002      	movs	r0, #2
 8011366:	f7f8 fdf1 	bl	8009f4c <VL53LX_i2c_decode_int16_t>
 801136a:	4603      	mov	r3, r0
 801136c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011370:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3313      	adds	r3, #19
 801137a:	4619      	mov	r1, r3
 801137c:	2002      	movs	r0, #2
 801137e:	f7f8 fde5 	bl	8009f4c <VL53LX_i2c_decode_int16_t>
 8011382:	4603      	mov	r3, r0
 8011384:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	3315      	adds	r3, #21
 801138e:	4619      	mov	r1, r3
 8011390:	2002      	movs	r0, #2
 8011392:	f7f8 fddb 	bl	8009f4c <VL53LX_i2c_decode_int16_t>
 8011396:	4603      	mov	r3, r0
 8011398:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 801139e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b08a      	sub	sp, #40	@ 0x28
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80113b4:	2300      	movs	r3, #0
 80113b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80113ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d109      	bne.n	80113d6 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 80113c2:	f107 020c 	add.w	r2, r7, #12
 80113c6:	2317      	movs	r3, #23
 80113c8:	210d      	movs	r1, #13
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f001 ff08 	bl	80131e0 <VL53LX_ReadMulti>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80113d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d109      	bne.n	80113f2 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 80113de:	f107 030c 	add.w	r3, r7, #12
 80113e2:	683a      	ldr	r2, [r7, #0]
 80113e4:	4619      	mov	r1, r3
 80113e6:	2017      	movs	r0, #23
 80113e8:	f7ff ff52 	bl	8011290 <VL53LX_i2c_decode_customer_nvm_managed>
 80113ec:	4603      	mov	r3, r0
 80113ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 80113f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d11c      	bne.n	8011434 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	8a5b      	ldrh	r3, [r3, #18]
 80113fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 8011400:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011404:	2b00      	cmp	r3, #0
 8011406:	da00      	bge.n	801140a <VL53LX_get_customer_nvm_managed+0x60>
 8011408:	3303      	adds	r3, #3
 801140a:	109b      	asrs	r3, r3, #2
 801140c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 801140e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011416:	db04      	blt.n	8011422 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 8011418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801141a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801141e:	b29b      	uxth	r3, r3
 8011420:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	2200      	movs	r2, #0
 8011426:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801142c:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011432:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8011434:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8011438:	4618      	mov	r0, r3
 801143a:	3728      	adds	r7, #40	@ 0x28
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	460b      	mov	r3, r1
 801144a:	607a      	str	r2, [r7, #4]
 801144c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801144e:	2300      	movs	r3, #0
 8011450:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8011452:	897b      	ldrh	r3, [r7, #10]
 8011454:	2b1f      	cmp	r3, #31
 8011456:	d802      	bhi.n	801145e <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011458:	f06f 0309 	mvn.w	r3, #9
 801145c:	e0cf      	b.n	80115fe <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	2102      	movs	r1, #2
 8011466:	4618      	mov	r0, r3
 8011468:	f7f8 fcf9 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8011474:	f002 0201 	and.w	r2, r2, #1
 8011478:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801147a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8011484:	f002 020f 	and.w	r2, r2, #15
 8011488:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801148a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8011494:	f002 020f 	and.w	r2, r2, #15
 8011498:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801149a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80114a4:	f002 021f 	and.w	r2, r2, #31
 80114a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80114aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80114b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80114b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80114ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80114c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80114c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80114ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80114d4:	f002 0201 	and.w	r2, r2, #1
 80114d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80114da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80114e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80114ee:	f002 0201 	and.w	r2, r2, #1
 80114f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80114f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80114fe:	f002 0203 	and.w	r2, r2, #3
 8011502:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8011504:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801150e:	f002 021f 	and.w	r2, r2, #31
 8011512:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8011514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 801151e:	f002 0203 	and.w	r2, r2, #3
 8011522:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8011524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 801152e:	f002 0203 	and.w	r2, r2, #3
 8011532:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8011534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801153e:	f002 0207 	and.w	r2, r2, #7
 8011542:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8011544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801154e:	f002 021f 	and.w	r2, r2, #31
 8011552:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8011554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801155e:	f002 0201 	and.w	r2, r2, #1
 8011562:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8011564:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801156e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8011578:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8011582:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801158c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8011596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80115a0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	8b18      	ldrh	r0, [r3, #24]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3318      	adds	r3, #24
 80115aa:	461a      	mov	r2, r3
 80115ac:	2102      	movs	r1, #2
 80115ae:	f7f8 fc56 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80115ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80115c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80115ce:	f002 020f 	and.w	r2, r2, #15
 80115d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80115d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80115de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80115e8:	f002 020f 	and.w	r2, r2, #15
 80115ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80115ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80115f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80115fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3718      	adds	r7, #24
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b086      	sub	sp, #24
 801160a:	af00      	add	r7, sp, #0
 801160c:	60f8      	str	r0, [r7, #12]
 801160e:	460b      	mov	r3, r1
 8011610:	607a      	str	r2, [r7, #4]
 8011612:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011614:	2300      	movs	r3, #0
 8011616:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8011618:	897b      	ldrh	r3, [r7, #10]
 801161a:	2b15      	cmp	r3, #21
 801161c:	d802      	bhi.n	8011624 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801161e:	f06f 0309 	mvn.w	r3, #9
 8011622:	e070      	b.n	8011706 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8011634:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801163e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8011648:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801164c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801164e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 8011654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011658:	b298      	uxth	r0, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3304      	adds	r3, #4
 801165e:	461a      	mov	r2, r3
 8011660:	2102      	movs	r1, #2
 8011662:	f7f8 fbfc 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801166e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011672:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8011674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801167e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8011688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8011692:	f002 0201 	and.w	r2, r2, #1
 8011696:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011698:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80116a2:	f002 0207 	and.w	r2, r2, #7
 80116a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80116a8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	8998      	ldrh	r0, [r3, #12]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	330c      	adds	r3, #12
 80116b2:	461a      	mov	r2, r3
 80116b4:	2102      	movs	r1, #2
 80116b6:	f7f8 fbd2 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	89d8      	ldrh	r0, [r3, #14]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	330e      	adds	r3, #14
 80116c2:	461a      	mov	r2, r3
 80116c4:	2102      	movs	r1, #2
 80116c6:	f7f8 fbca 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	8a18      	ldrh	r0, [r3, #16]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	3310      	adds	r3, #16
 80116d2:	461a      	mov	r2, r3
 80116d4:	2102      	movs	r1, #2
 80116d6:	f7f8 fbc2 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80116e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80116ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80116f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8011700:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011706:	4618      	mov	r0, r3
 8011708:	3718      	adds	r7, #24
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b086      	sub	sp, #24
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	460b      	mov	r3, r1
 8011718:	607a      	str	r2, [r7, #4]
 801171a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801171c:	2300      	movs	r3, #0
 801171e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8011720:	897b      	ldrh	r3, [r7, #10]
 8011722:	2b16      	cmp	r3, #22
 8011724:	d802      	bhi.n	801172c <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011726:	f06f 0309 	mvn.w	r3, #9
 801172a:	e06e      	b.n	801180a <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	f003 030f 	and.w	r3, r3, #15
 8011734:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8011742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801174c:	f002 020f 	and.w	r2, r2, #15
 8011750:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8011752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801175c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8011766:	f002 020f 	and.w	r2, r2, #15
 801176a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801176c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8011776:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8011780:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011784:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8011786:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8011790:	f002 020f 	and.w	r2, r2, #15
 8011794:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8011796:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80117a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80117aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80117ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80117b0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	8958      	ldrh	r0, [r3, #10]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	330a      	adds	r3, #10
 80117ba:	461a      	mov	r2, r3
 80117bc:	2102      	movs	r1, #2
 80117be:	f7f8 fb4e 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	8998      	ldrh	r0, [r3, #12]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	330c      	adds	r3, #12
 80117ca:	461a      	mov	r2, r3
 80117cc:	2102      	movs	r1, #2
 80117ce:	f7f8 fb46 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80117da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80117e4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6918      	ldr	r0, [r3, #16]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	3312      	adds	r3, #18
 80117ee:	461a      	mov	r2, r3
 80117f0:	2104      	movs	r1, #4
 80117f2:	f7f8 fbd4 	bl	8009f9e <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80117fe:	f002 0201 	and.w	r2, r2, #1
 8011802:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8011804:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801180a:	4618      	mov	r0, r3
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b086      	sub	sp, #24
 8011816:	af00      	add	r7, sp, #0
 8011818:	60f8      	str	r0, [r7, #12]
 801181a:	460b      	mov	r3, r1
 801181c:	607a      	str	r2, [r7, #4]
 801181e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011820:	2300      	movs	r3, #0
 8011822:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8011824:	897b      	ldrh	r3, [r7, #10]
 8011826:	2b11      	cmp	r3, #17
 8011828:	d802      	bhi.n	8011830 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801182a:	f06f 0309 	mvn.w	r3, #9
 801182e:	e071      	b.n	8011914 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	f003 0303 	and.w	r3, r3, #3
 8011838:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	8858      	ldrh	r0, [r3, #2]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	3301      	adds	r3, #1
 8011846:	461a      	mov	r2, r3
 8011848:	2102      	movs	r1, #2
 801184a:	f7f8 fb08 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	8898      	ldrh	r0, [r3, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3303      	adds	r3, #3
 8011856:	461a      	mov	r2, r3
 8011858:	2102      	movs	r1, #2
 801185a:	f7f8 fb00 	bl	8009e5e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8011866:	f002 0201 	and.w	r2, r2, #1
 801186a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801186c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8011876:	f002 0207 	and.w	r2, r2, #7
 801187a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801187c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8011886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801188c:	68fa      	ldr	r2, [r7, #12]
 801188e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8011890:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801189a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801189e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80118a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80118aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80118ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80118b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80118ba:	f002 0203 	and.w	r2, r2, #3
 80118be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80118c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80118ca:	f002 0203 	and.w	r2, r2, #3
 80118ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80118d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80118da:	f002 020f 	and.w	r2, r2, #15
 80118de:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80118e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80118e6:	68fa      	ldr	r2, [r7, #12]
 80118e8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80118ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80118f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80118fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8011908:	f002 0203 	and.w	r2, r2, #3
 801190c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801190e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3718      	adds	r7, #24
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801191c:	b480      	push	{r7}
 801191e:	b087      	sub	sp, #28
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	460b      	mov	r3, r1
 8011926:	607a      	str	r2, [r7, #4]
 8011928:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 801192e:	897b      	ldrh	r3, [r7, #10]
 8011930:	2b04      	cmp	r3, #4
 8011932:	d802      	bhi.n	801193a <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011934:	f06f 0309 	mvn.w	r3, #9
 8011938:	e025      	b.n	8011986 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	f003 0301 	and.w	r3, r3, #1
 8011942:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8011950:	f002 0201 	and.w	r2, r2, #1
 8011954:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8011956:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8011960:	f002 0201 	and.w	r2, r2, #1
 8011964:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8011966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8011970:	f002 0203 	and.w	r2, r2, #3
 8011974:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8011976:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8011980:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011986:	4618      	mov	r0, r3
 8011988:	371c      	adds	r7, #28
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr

08011992 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b084      	sub	sp, #16
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
 801199a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801199c:	2300      	movs	r3, #0
 801199e:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80119a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d108      	bne.n	80119ba <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 80119a8:	f107 0308 	add.w	r3, r7, #8
 80119ac:	461a      	mov	r2, r3
 80119ae:	2105      	movs	r1, #5
 80119b0:	6838      	ldr	r0, [r7, #0]
 80119b2:	f7ff ffb3 	bl	801191c <VL53LX_i2c_encode_system_control>
 80119b6:	4603      	mov	r3, r0
 80119b8:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 80119ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d108      	bne.n	80119d4 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 80119c2:	f107 0208 	add.w	r2, r7, #8
 80119c6:	2305      	movs	r3, #5
 80119c8:	2183      	movs	r1, #131	@ 0x83
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f001 fbd2 	bl	8013174 <VL53LX_WriteMulti>
 80119d0:	4603      	mov	r3, r0
 80119d2:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80119d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b086      	sub	sp, #24
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	4603      	mov	r3, r0
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
 80119ec:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80119ee:	2300      	movs	r3, #0
 80119f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 80119f2:	89fb      	ldrh	r3, [r7, #14]
 80119f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80119f6:	d802      	bhi.n	80119fe <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80119f8:	f06f 0309 	mvn.w	r3, #9
 80119fc:	e0e2      	b.n	8011bc4 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a06:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	785a      	ldrb	r2, [r3, #1]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	3302      	adds	r3, #2
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	f003 030f 	and.w	r3, r3, #15
 8011a1e:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	78da      	ldrb	r2, [r3, #3]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	3304      	adds	r3, #4
 8011a30:	4619      	mov	r1, r3
 8011a32:	2002      	movs	r0, #2
 8011a34:	f7f8 fa3e 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	3306      	adds	r3, #6
 8011a44:	4619      	mov	r1, r3
 8011a46:	2002      	movs	r0, #2
 8011a48:	f7f8 fa34 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	3308      	adds	r3, #8
 8011a58:	4619      	mov	r1, r3
 8011a5a:	2002      	movs	r0, #2
 8011a5c:	f7f8 fa2a 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a60:	4603      	mov	r3, r0
 8011a62:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	330a      	adds	r3, #10
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	2002      	movs	r0, #2
 8011a70:	f7f8 fa20 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a74:	4603      	mov	r3, r0
 8011a76:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	330c      	adds	r3, #12
 8011a80:	4619      	mov	r1, r3
 8011a82:	2002      	movs	r0, #2
 8011a84:	f7f8 fa16 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	330e      	adds	r3, #14
 8011a94:	4619      	mov	r1, r3
 8011a96:	2002      	movs	r0, #2
 8011a98:	f7f8 fa0c 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	3310      	adds	r3, #16
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	2002      	movs	r0, #2
 8011aac:	f7f8 fa02 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	3312      	adds	r3, #18
 8011abc:	4619      	mov	r1, r3
 8011abe:	2002      	movs	r0, #2
 8011ac0:	f7f8 f9f8 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	3314      	adds	r3, #20
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	2002      	movs	r0, #2
 8011ad4:	f7f8 f9ee 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	3316      	adds	r3, #22
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	2002      	movs	r0, #2
 8011ae8:	f7f8 f9e4 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011aec:	4603      	mov	r3, r0
 8011aee:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	3318      	adds	r3, #24
 8011af8:	4619      	mov	r1, r3
 8011afa:	2002      	movs	r0, #2
 8011afc:	f7f8 f9da 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b00:	4603      	mov	r3, r0
 8011b02:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	331a      	adds	r3, #26
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	2002      	movs	r0, #2
 8011b10:	f7f8 f9d0 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b14:	4603      	mov	r3, r0
 8011b16:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	331c      	adds	r3, #28
 8011b20:	4619      	mov	r1, r3
 8011b22:	2002      	movs	r0, #2
 8011b24:	f7f8 f9c6 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	331e      	adds	r3, #30
 8011b34:	4619      	mov	r1, r3
 8011b36:	2002      	movs	r0, #2
 8011b38:	f7f8 f9bc 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	3320      	adds	r3, #32
 8011b48:	4619      	mov	r1, r3
 8011b4a:	2002      	movs	r0, #2
 8011b4c:	f7f8 f9b2 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b50:	4603      	mov	r3, r0
 8011b52:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	3322      	adds	r3, #34	@ 0x22
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	2002      	movs	r0, #2
 8011b60:	f7f8 f9a8 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b64:	4603      	mov	r3, r0
 8011b66:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	3324      	adds	r3, #36	@ 0x24
 8011b70:	4619      	mov	r1, r3
 8011b72:	2002      	movs	r0, #2
 8011b74:	f7f8 f99e 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	3326      	adds	r3, #38	@ 0x26
 8011b84:	4619      	mov	r1, r3
 8011b86:	2002      	movs	r0, #2
 8011b88:	f7f8 f994 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	3328      	adds	r3, #40	@ 0x28
 8011b98:	4619      	mov	r1, r3
 8011b9a:	2002      	movs	r0, #2
 8011b9c:	f7f8 f98a 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8011bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3718      	adds	r7, #24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8011bde:	89fb      	ldrh	r3, [r7, #14]
 8011be0:	2b20      	cmp	r3, #32
 8011be2:	d802      	bhi.n	8011bea <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011be4:	f06f 0309 	mvn.w	r3, #9
 8011be8:	e04d      	b.n	8011c86 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8011bea:	68b9      	ldr	r1, [r7, #8]
 8011bec:	2004      	movs	r0, #4
 8011bee:	f7f8 fa00 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011bf2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	3304      	adds	r3, #4
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	2004      	movs	r0, #4
 8011c00:	f7f8 f9f7 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011c04:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	4619      	mov	r1, r3
 8011c10:	2004      	movs	r0, #4
 8011c12:	f7f8 fa0b 	bl	800a02c <VL53LX_i2c_decode_int32_t>
 8011c16:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	330c      	adds	r3, #12
 8011c20:	4619      	mov	r1, r3
 8011c22:	2004      	movs	r0, #4
 8011c24:	f7f8 f9e5 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011c28:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	3310      	adds	r3, #16
 8011c32:	4619      	mov	r1, r3
 8011c34:	2004      	movs	r0, #4
 8011c36:	f7f8 f9dc 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011c3a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	3314      	adds	r3, #20
 8011c44:	4619      	mov	r1, r3
 8011c46:	2004      	movs	r0, #4
 8011c48:	f7f8 f9d3 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011c4c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	3318      	adds	r3, #24
 8011c56:	4619      	mov	r1, r3
 8011c58:	2004      	movs	r0, #4
 8011c5a:	f7f8 f9e7 	bl	800a02c <VL53LX_i2c_decode_int32_t>
 8011c5e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	331c      	adds	r3, #28
 8011c68:	4619      	mov	r1, r3
 8011c6a:	2004      	movs	r0, #4
 8011c6c:	f7f8 f9c1 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011c70:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8011c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b086      	sub	sp, #24
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	4603      	mov	r3, r0
 8011c96:	60b9      	str	r1, [r7, #8]
 8011c98:	607a      	str	r2, [r7, #4]
 8011c9a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8011ca0:	89fb      	ldrh	r3, [r7, #14]
 8011ca2:	2b37      	cmp	r3, #55	@ 0x37
 8011ca4:	d802      	bhi.n	8011cac <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011ca6:	f06f 0309 	mvn.w	r3, #9
 8011caa:	e15e      	b.n	8011f6a <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8011cac:	68b9      	ldr	r1, [r7, #8]
 8011cae:	2002      	movs	r0, #2
 8011cb0:	f7f8 f900 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	3302      	adds	r3, #2
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cc6:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	3303      	adds	r3, #3
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011cd6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	3304      	adds	r3, #4
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	f003 0303 	and.w	r3, r3, #3
 8011ce6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	3305      	adds	r3, #5
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f003 0301 	and.w	r3, r3, #1
 8011cf6:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	3306      	adds	r3, #6
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d06:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	3307      	adds	r3, #7
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d16:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	3308      	adds	r3, #8
 8011d20:	4619      	mov	r1, r3
 8011d22:	2002      	movs	r0, #2
 8011d24:	f7f8 f8c6 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d2e:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	330a      	adds	r3, #10
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f003 0303 	and.w	r3, r3, #3
 8011d3e:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	330b      	adds	r3, #11
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	f003 0303 	and.w	r3, r3, #3
 8011d4e:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	330c      	adds	r3, #12
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	f003 030f 	and.w	r3, r3, #15
 8011d5e:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	330d      	adds	r3, #13
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	f003 0307 	and.w	r3, r3, #7
 8011d6e:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	330e      	adds	r3, #14
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	f003 0301 	and.w	r3, r3, #1
 8011d7e:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	330f      	adds	r3, #15
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	f003 0303 	and.w	r3, r3, #3
 8011d8e:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	7c1a      	ldrb	r2, [r3, #16]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	7c5a      	ldrb	r2, [r3, #17]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	3312      	adds	r3, #18
 8011da8:	4619      	mov	r1, r3
 8011daa:	2002      	movs	r0, #2
 8011dac:	f7f8 f882 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011db0:	4603      	mov	r3, r0
 8011db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011db6:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	3316      	adds	r3, #22
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	2002      	movs	r0, #2
 8011dc4:	f7f8 f876 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	3318      	adds	r3, #24
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	2002      	movs	r0, #2
 8011dd8:	f7f8 f86c 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	331a      	adds	r3, #26
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	331b      	adds	r3, #27
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	f003 0307 	and.w	r3, r3, #7
 8011dfe:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	7f1a      	ldrb	r2, [r3, #28]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	7f5a      	ldrb	r2, [r3, #29]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	331e      	adds	r3, #30
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e1e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	331f      	adds	r3, #31
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e2e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	3320      	adds	r3, #32
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	f003 0303 	and.w	r3, r3, #3
 8011e3e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	3321      	adds	r3, #33	@ 0x21
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	f003 030f 	and.w	r3, r3, #15
 8011e4e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	3325      	adds	r3, #37	@ 0x25
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	f003 0301 	and.w	r3, r3, #1
 8011e82:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	3326      	adds	r3, #38	@ 0x26
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	f003 0303 	and.w	r3, r3, #3
 8011e94:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	3327      	adds	r3, #39	@ 0x27
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f003 031f 	and.w	r3, r3, #31
 8011ea6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	3328      	adds	r3, #40	@ 0x28
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f003 031f 	and.w	r3, r3, #31
 8011eb8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	3329      	adds	r3, #41	@ 0x29
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	f003 031f 	and.w	r3, r3, #31
 8011eca:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	332a      	adds	r3, #42	@ 0x2a
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	332b      	adds	r3, #43	@ 0x2b
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	f003 0301 	and.w	r3, r3, #1
 8011eee:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	332c      	adds	r3, #44	@ 0x2c
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f003 0303 	and.w	r3, r3, #3
 8011f00:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	332d      	adds	r3, #45	@ 0x2d
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f12:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	332e      	adds	r3, #46	@ 0x2e
 8011f1e:	4619      	mov	r1, r3
 8011f20:	2004      	movs	r0, #4
 8011f22:	f7f8 f866 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011f26:	4603      	mov	r3, r0
 8011f28:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	3332      	adds	r3, #50	@ 0x32
 8011f34:	4619      	mov	r1, r3
 8011f36:	2004      	movs	r0, #4
 8011f38:	f7f8 f85b 	bl	8009ff2 <VL53LX_i2c_decode_uint32_t>
 8011f3c:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	3336      	adds	r3, #54	@ 0x36
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f003 0301 	and.w	r3, r3, #1
 8011f4c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	3337      	adds	r3, #55	@ 0x37
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8011f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b086      	sub	sp, #24
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	4603      	mov	r3, r0
 8011f7a:	60b9      	str	r1, [r7, #8]
 8011f7c:	607a      	str	r2, [r7, #4]
 8011f7e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011f80:	2300      	movs	r3, #0
 8011f82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8011f84:	89fb      	ldrh	r3, [r7, #14]
 8011f86:	2b30      	cmp	r3, #48	@ 0x30
 8011f88:	d802      	bhi.n	8011f90 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011f8a:	f06f 0309 	mvn.w	r3, #9
 8011f8e:	e112      	b.n	80121b6 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	785a      	ldrb	r2, [r3, #1]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	789a      	ldrb	r2, [r3, #2]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	3303      	adds	r3, #3
 8011fac:	4619      	mov	r1, r3
 8011fae:	2002      	movs	r0, #2
 8011fb0:	f7f7 ff80 	bl	8009eb4 <VL53LX_i2c_decode_uint16_t>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	3305      	adds	r3, #5
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fc6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	3306      	adds	r3, #6
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	f003 0307 	and.w	r3, r3, #7
 8011fd6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	3307      	adds	r3, #7
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	f003 0307 	and.w	r3, r3, #7
 8011fe6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	3308      	adds	r3, #8
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ff6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	3309      	adds	r3, #9
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012006:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	330a      	adds	r3, #10
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	f003 0301 	and.w	r3, r3, #1
 8012016:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	330b      	adds	r3, #11
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012026:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	330c      	adds	r3, #12
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	f003 0301 	and.w	r3, r3, #1
 8012036:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	330d      	adds	r3, #13
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012046:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	330e      	adds	r3, #14
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012056:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	7bda      	ldrb	r2, [r3, #15]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	7c1a      	ldrb	r2, [r3, #16]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	7c5a      	ldrb	r2, [r3, #17]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	7c9a      	ldrb	r2, [r3, #18]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	7cda      	ldrb	r2, [r3, #19]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	7d1a      	ldrb	r2, [r3, #20]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	7d5a      	ldrb	r2, [r3, #21]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	7d9a      	ldrb	r2, [r3, #22]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	7dda      	ldrb	r2, [r3, #23]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	7e1a      	ldrb	r2, [r3, #24]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	7e5a      	ldrb	r2, [r3, #25]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	7e9a      	ldrb	r2, [r3, #26]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	7eda      	ldrb	r2, [r3, #27]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	7f1a      	ldrb	r2, [r3, #28]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	7f5a      	ldrb	r2, [r3, #29]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	7f9a      	ldrb	r2, [r3, #30]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	7fda      	ldrb	r2, [r3, #31]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80121b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3718      	adds	r7, #24
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b090      	sub	sp, #64	@ 0x40
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80121c8:	2300      	movs	r3, #0
 80121ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80121ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10a      	bne.n	80121ec <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80121d6:	f107 020c 	add.w	r2, r7, #12
 80121da:	2331      	movs	r3, #49	@ 0x31
 80121dc:	f240 110f 	movw	r1, #271	@ 0x10f
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fffd 	bl	80131e0 <VL53LX_ReadMulti>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80121ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d109      	bne.n	8012208 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80121f4:	f107 030c 	add.w	r3, r7, #12
 80121f8:	683a      	ldr	r2, [r7, #0]
 80121fa:	4619      	mov	r1, r3
 80121fc:	2031      	movs	r0, #49	@ 0x31
 80121fe:	f7ff feb8 	bl	8011f72 <VL53LX_i2c_decode_nvm_copy_data>
 8012202:	4603      	mov	r3, r0
 8012204:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012208:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801220c:	4618      	mov	r0, r3
 801220e:	3740      	adds	r7, #64	@ 0x40
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8012214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012218:	b0d6      	sub	sp, #344	@ 0x158
 801221a:	af00      	add	r7, sp, #0
 801221c:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8012220:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8012224:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8012228:	4603      	mov	r3, r0
 801222a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 801222e:	23f1      	movs	r3, #241	@ 0xf1
 8012230:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8012234:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012238:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 801223c:	2300      	movs	r3, #0
 801223e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8012242:	f04f 0200 	mov.w	r2, #0
 8012246:	f04f 0300 	mov.w	r3, #0
 801224a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 801224e:	f04f 0200 	mov.w	r2, #0
 8012252:	f04f 0300 	mov.w	r3, #0
 8012256:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 801225a:	f04f 0200 	mov.w	r2, #0
 801225e:	f04f 0300 	mov.w	r3, #0
 8012262:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 8012266:	f04f 0200 	mov.w	r2, #0
 801226a:	f04f 0300 	mov.w	r3, #0
 801226e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 8012272:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8012276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801227a:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801227c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 8322 	beq.w	80128ca <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8012286:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 801228a:	4618      	mov	r0, r3
 801228c:	f7fb fa01 	bl	800d692 <VL53LX_calc_pll_period_mm>
 8012290:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 8012294:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8012298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801229c:	429a      	cmp	r2, r3
 801229e:	d91a      	bls.n	80122d6 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80122a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80122a4:	2200      	movs	r2, #0
 80122a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80122aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80122ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80122b2:	2200      	movs	r2, #0
 80122b4:	4698      	mov	r8, r3
 80122b6:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80122b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80122bc:	460b      	mov	r3, r1
 80122be:	ebb3 0308 	subs.w	r3, r3, r8
 80122c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122c4:	4613      	mov	r3, r2
 80122c6:	eb63 0309 	sbc.w	r3, r3, r9
 80122ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122cc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80122d0:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 80122d4:	e013      	b.n	80122fe <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80122d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80122da:	2200      	movs	r2, #0
 80122dc:	469a      	mov	sl, r3
 80122de:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 80122e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80122e4:	2200      	movs	r2, #0
 80122e6:	461c      	mov	r4, r3
 80122e8:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80122ea:	ebba 0304 	subs.w	r3, sl, r4
 80122ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80122f0:	eb6b 0305 	sbc.w	r3, fp, r5
 80122f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80122f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80122fa:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 80122fe:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012302:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012306:	429a      	cmp	r2, r3
 8012308:	d91f      	bls.n	801234a <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801230a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801230e:	2200      	movs	r2, #0
 8012310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012314:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 8012318:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801231c:	2200      	movs	r2, #0
 801231e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012322:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8012326:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 801232a:	4623      	mov	r3, r4
 801232c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8012330:	4602      	mov	r2, r0
 8012332:	1a9b      	subs	r3, r3, r2
 8012334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012336:	462b      	mov	r3, r5
 8012338:	460a      	mov	r2, r1
 801233a:	eb63 0302 	sbc.w	r3, r3, r2
 801233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012340:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8012344:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8012348:	e01e      	b.n	8012388 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801234a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801234e:	2200      	movs	r2, #0
 8012350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 8012358:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801235c:	2200      	movs	r2, #0
 801235e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012362:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8012366:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 801236a:	4623      	mov	r3, r4
 801236c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8012370:	4602      	mov	r2, r0
 8012372:	1a9b      	subs	r3, r3, r2
 8012374:	623b      	str	r3, [r7, #32]
 8012376:	462b      	mov	r3, r5
 8012378:	460a      	mov	r2, r1
 801237a:	eb63 0302 	sbc.w	r3, r3, r2
 801237e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012380:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012384:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 8012388:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801238c:	4313      	orrs	r3, r2
 801238e:	f000 829c 	beq.w	80128ca <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8012392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012396:	2200      	movs	r2, #0
 8012398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801239c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80123a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80123a4:	2200      	movs	r2, #0
 80123a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80123aa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80123ae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80123b2:	4623      	mov	r3, r4
 80123b4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80123b8:	4602      	mov	r2, r0
 80123ba:	189b      	adds	r3, r3, r2
 80123bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123c0:	460b      	mov	r3, r1
 80123c2:	462a      	mov	r2, r5
 80123c4:	eb42 0303 	adc.w	r3, r2, r3
 80123c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 80123cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80123d0:	2200      	movs	r2, #0
 80123d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123d6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80123da:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80123de:	4623      	mov	r3, r4
 80123e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80123e4:	4602      	mov	r2, r0
 80123e6:	189b      	adds	r3, r3, r2
 80123e8:	61bb      	str	r3, [r7, #24]
 80123ea:	460b      	mov	r3, r1
 80123ec:	462a      	mov	r2, r5
 80123ee:	eb42 0303 	adc.w	r3, r2, r3
 80123f2:	61fb      	str	r3, [r7, #28]
 80123f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80123f8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 80123fc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012400:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8012404:	f173 0300 	sbcs.w	r3, r3, #0
 8012408:	d305      	bcc.n	8012416 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 801240a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801240e:	f04f 0300 	mov.w	r3, #0
 8012412:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8012416:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801241a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801241e:	fb03 f102 	mul.w	r1, r3, r2
 8012422:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012426:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801242a:	fb02 f303 	mul.w	r3, r2, r3
 801242e:	18ca      	adds	r2, r1, r3
 8012430:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012434:	fba3 1303 	umull	r1, r3, r3, r3
 8012438:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801243c:	460b      	mov	r3, r1
 801243e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8012442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012446:	18d3      	adds	r3, r2, r3
 8012448:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801244c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8012450:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8012454:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 8012458:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 801245c:	f04f 0000 	mov.w	r0, #0
 8012460:	f04f 0100 	mov.w	r1, #0
 8012464:	0219      	lsls	r1, r3, #8
 8012466:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801246a:	0210      	lsls	r0, r2, #8
 801246c:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 8012470:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8012474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012478:	d305      	bcc.n	8012486 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 801247a:	f04f 32ff 	mov.w	r2, #4294967295
 801247e:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8012482:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8012486:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801248a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801248e:	f7ed ff1f 	bl	80002d0 <__aeabi_uldivmod>
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 801249a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801249e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80124a2:	f7ed ff15 	bl	80002d0 <__aeabi_uldivmod>
 80124a6:	4602      	mov	r2, r0
 80124a8:	460b      	mov	r3, r1
 80124aa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80124ae:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80124b2:	2b80      	cmp	r3, #128	@ 0x80
 80124b4:	d305      	bcc.n	80124c2 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 80124b6:	f04f 32ff 	mov.w	r2, #4294967295
 80124ba:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 80124be:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 80124c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80124c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80124ca:	fb03 f102 	mul.w	r1, r3, r2
 80124ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80124d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80124d6:	fb02 f303 	mul.w	r3, r2, r3
 80124da:	4419      	add	r1, r3
 80124dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80124e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80124e4:	fba2 2303 	umull	r2, r3, r2, r3
 80124e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80124ec:	4613      	mov	r3, r2
 80124ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80124f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124f6:	18cb      	adds	r3, r1, r3
 80124f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80124fc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8012500:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8012504:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8012508:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801250c:	2200      	movs	r2, #0
 801250e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012516:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 801251a:	2200      	movs	r2, #0
 801251c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012524:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8012528:	4623      	mov	r3, r4
 801252a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801252e:	4602      	mov	r2, r0
 8012530:	189b      	adds	r3, r3, r2
 8012532:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012536:	460b      	mov	r3, r1
 8012538:	462a      	mov	r2, r5
 801253a:	eb42 0303 	adc.w	r3, r2, r3
 801253e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8012542:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8012546:	2200      	movs	r2, #0
 8012548:	67bb      	str	r3, [r7, #120]	@ 0x78
 801254a:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801254c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8012550:	4623      	mov	r3, r4
 8012552:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8012556:	4602      	mov	r2, r0
 8012558:	189b      	adds	r3, r3, r2
 801255a:	673b      	str	r3, [r7, #112]	@ 0x70
 801255c:	460b      	mov	r3, r1
 801255e:	462a      	mov	r2, r5
 8012560:	eb42 0303 	adc.w	r3, r2, r3
 8012564:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8012566:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801256a:	2200      	movs	r2, #0
 801256c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801256e:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8012570:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8012574:	4623      	mov	r3, r4
 8012576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801257a:	4602      	mov	r2, r0
 801257c:	189b      	adds	r3, r3, r2
 801257e:	613b      	str	r3, [r7, #16]
 8012580:	460b      	mov	r3, r1
 8012582:	462a      	mov	r2, r5
 8012584:	eb42 0303 	adc.w	r3, r2, r3
 8012588:	617b      	str	r3, [r7, #20]
 801258a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801258e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8012592:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8012596:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 801259a:	f173 0300 	sbcs.w	r3, r3, #0
 801259e:	d305      	bcc.n	80125ac <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 80125a0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80125a4:	f04f 0300 	mov.w	r3, #0
 80125a8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 80125ac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80125b0:	f04f 0000 	mov.w	r0, #0
 80125b4:	f04f 0100 	mov.w	r1, #0
 80125b8:	0219      	lsls	r1, r3, #8
 80125ba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80125be:	0210      	lsls	r0, r2, #8
 80125c0:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 80125c4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80125c8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80125cc:	1884      	adds	r4, r0, r2
 80125ce:	60bc      	str	r4, [r7, #8]
 80125d0:	eb41 0303 	adc.w	r3, r1, r3
 80125d4:	60fb      	str	r3, [r7, #12]
 80125d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80125da:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80125de:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	da05      	bge.n	80125f2 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 80125e6:	f04f 32ff 	mov.w	r2, #4294967295
 80125ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125ee:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80125f2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d331      	bcc.n	801265e <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80125fa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80125fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012602:	f7ed fe65 	bl	80002d0 <__aeabi_uldivmod>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 801260e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012612:	2200      	movs	r2, #0
 8012614:	663b      	str	r3, [r7, #96]	@ 0x60
 8012616:	667a      	str	r2, [r7, #100]	@ 0x64
 8012618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801261c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8012620:	4622      	mov	r2, r4
 8012622:	fb02 f203 	mul.w	r2, r2, r3
 8012626:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801262a:	4629      	mov	r1, r5
 801262c:	fb01 f303 	mul.w	r3, r1, r3
 8012630:	441a      	add	r2, r3
 8012632:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012636:	4621      	mov	r1, r4
 8012638:	fba3 1301 	umull	r1, r3, r3, r1
 801263c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8012640:	460b      	mov	r3, r1
 8012642:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8012646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801264a:	18d3      	adds	r3, r2, r3
 801264c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8012650:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8012654:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8012658:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801265c:	e030      	b.n	80126c0 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801265e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012662:	2200      	movs	r2, #0
 8012664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012666:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801266c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8012670:	4622      	mov	r2, r4
 8012672:	fb02 f203 	mul.w	r2, r2, r3
 8012676:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801267a:	4629      	mov	r1, r5
 801267c:	fb01 f303 	mul.w	r3, r1, r3
 8012680:	441a      	add	r2, r3
 8012682:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012686:	4621      	mov	r1, r4
 8012688:	fba3 1301 	umull	r1, r3, r3, r1
 801268c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012690:	460b      	mov	r3, r1
 8012692:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801269a:	18d3      	adds	r3, r2, r3
 801269c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80126a0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80126a4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80126a8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80126ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80126b0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80126b4:	f7ed fe0c 	bl	80002d0 <__aeabi_uldivmod>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80126c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	da05      	bge.n	80126d4 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 80126c8:	f04f 32ff 	mov.w	r2, #4294967295
 80126cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80126d0:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80126d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d33d      	bcc.n	8012758 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80126dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80126e0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80126e4:	f7ed fdf4 	bl	80002d0 <__aeabi_uldivmod>
 80126e8:	4602      	mov	r2, r0
 80126ea:	460b      	mov	r3, r1
 80126ec:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 80126f0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80126f4:	f04f 0200 	mov.w	r2, #0
 80126f8:	f04f 0300 	mov.w	r3, #0
 80126fc:	0882      	lsrs	r2, r0, #2
 80126fe:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8012702:	088b      	lsrs	r3, r1, #2
 8012704:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8012708:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801270c:	2200      	movs	r2, #0
 801270e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012710:	657a      	str	r2, [r7, #84]	@ 0x54
 8012712:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8012716:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 801271a:	4622      	mov	r2, r4
 801271c:	fb02 f203 	mul.w	r2, r2, r3
 8012720:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012724:	4629      	mov	r1, r5
 8012726:	fb01 f303 	mul.w	r3, r1, r3
 801272a:	4413      	add	r3, r2
 801272c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8012730:	4621      	mov	r1, r4
 8012732:	fba2 1201 	umull	r1, r2, r2, r1
 8012736:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801273a:	460a      	mov	r2, r1
 801273c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8012740:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8012744:	4413      	add	r3, r2
 8012746:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801274a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 801274e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8012752:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8012756:	e03c      	b.n	80127d2 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8012758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801275c:	2200      	movs	r2, #0
 801275e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012760:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8012766:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 801276a:	4622      	mov	r2, r4
 801276c:	fb02 f203 	mul.w	r2, r2, r3
 8012770:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012774:	4629      	mov	r1, r5
 8012776:	fb01 f303 	mul.w	r3, r1, r3
 801277a:	4413      	add	r3, r2
 801277c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8012780:	4621      	mov	r1, r4
 8012782:	fba2 1201 	umull	r1, r2, r2, r1
 8012786:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801278a:	460a      	mov	r2, r1
 801278c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8012790:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012794:	4413      	add	r3, r2
 8012796:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801279a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 801279e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80127a2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80127a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80127aa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80127ae:	f7ed fd8f 	bl	80002d0 <__aeabi_uldivmod>
 80127b2:	4602      	mov	r2, r0
 80127b4:	460b      	mov	r3, r1
 80127b6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 80127ba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80127be:	f04f 0200 	mov.w	r2, #0
 80127c2:	f04f 0300 	mov.w	r3, #0
 80127c6:	0882      	lsrs	r2, r0, #2
 80127c8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80127cc:	088b      	lsrs	r3, r1, #2
 80127ce:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80127d2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	da05      	bge.n	80127e6 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 80127da:	f04f 32ff 	mov.w	r2, #4294967295
 80127de:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80127e2:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 80127e6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80127ea:	f04f 0200 	mov.w	r2, #0
 80127ee:	f04f 0300 	mov.w	r3, #0
 80127f2:	0882      	lsrs	r2, r0, #2
 80127f4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80127f8:	088b      	lsrs	r3, r1, #2
 80127fa:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80127fe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012802:	2b01      	cmp	r3, #1
 8012804:	d305      	bcc.n	8012812 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8012806:	f04f 32ff 	mov.w	r2, #4294967295
 801280a:	f04f 0300 	mov.w	r3, #0
 801280e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8012812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012816:	2200      	movs	r2, #0
 8012818:	643b      	str	r3, [r7, #64]	@ 0x40
 801281a:	647a      	str	r2, [r7, #68]	@ 0x44
 801281c:	f04f 0200 	mov.w	r2, #0
 8012820:	f04f 0300 	mov.w	r3, #0
 8012824:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8012828:	4629      	mov	r1, r5
 801282a:	01cb      	lsls	r3, r1, #7
 801282c:	4621      	mov	r1, r4
 801282e:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8012832:	4621      	mov	r1, r4
 8012834:	01ca      	lsls	r2, r1, #7
 8012836:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 801283a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801283e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012842:	fb03 f202 	mul.w	r2, r3, r2
 8012846:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801284a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 801284e:	fb01 f303 	mul.w	r3, r1, r3
 8012852:	441a      	add	r2, r3
 8012854:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012858:	fba3 1303 	umull	r1, r3, r3, r3
 801285c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012860:	460b      	mov	r3, r1
 8012862:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801286a:	18d3      	adds	r3, r2, r3
 801286c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012870:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8012874:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8012878:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 801287c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8012880:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8012884:	1884      	adds	r4, r0, r2
 8012886:	603c      	str	r4, [r7, #0]
 8012888:	eb41 0303 	adc.w	r3, r1, r3
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012892:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8012896:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 801289a:	2b01      	cmp	r3, #1
 801289c:	d305      	bcc.n	80128aa <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 801289e:	f04f 32ff 	mov.w	r2, #4294967295
 80128a2:	f04f 0300 	mov.w	r3, #0
 80128a6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 80128aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fa fd88 	bl	800d3c4 <VL53LX_isqrt>
 80128b4:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 80128b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80128bc:	b29a      	uxth	r2, r3
 80128be:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80128c2:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 80128c4:	2300      	movs	r3, #0
 80128c6:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 80128ca:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80128d4:	46bd      	mov	sp, r7
 80128d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080128da <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b086      	sub	sp, #24
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80128e2:	2300      	movs	r3, #0
 80128e4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	3318      	adds	r3, #24
 80128ea:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d107      	bne.n	8012908 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 80128f8:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 f88b 	bl	8012a18 <VL53LX_poll_for_range_completion>
 8012902:	4603      	mov	r3, r0
 8012904:	75fb      	strb	r3, [r7, #23]
 8012906:	e01b      	b.n	8012940 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8012908:	2300      	movs	r3, #0
 801290a:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801290c:	e011      	b.n	8012932 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 801290e:	f107 030f 	add.w	r3, r7, #15
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f819 	bl	801294c <VL53LX_is_new_data_ready>
 801291a:	4603      	mov	r3, r0
 801291c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 801291e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d105      	bne.n	8012932 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8012926:	2101      	movs	r1, #1
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fd71 	bl	8013410 <VL53LX_WaitMs>
 801292e:	4603      	mov	r3, r0
 8012930:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8012932:	7bfb      	ldrb	r3, [r7, #15]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d103      	bne.n	8012940 <VL53LX_wait_for_test_completion+0x66>
 8012938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d0e6      	beq.n	801290e <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012944:	4618      	mov	r0, r3
 8012946:	3718      	adds	r7, #24
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8012956:	2300      	movs	r3, #0
 8012958:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3318      	adds	r3, #24
 801295e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8012960:	2300      	movs	r3, #0
 8012962:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8012964:	2300      	movs	r3, #0
 8012966:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8012968:	2300      	movs	r3, #0
 801296a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8012972:	f003 0310 	and.w	r3, r3, #16
 8012976:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8012978:	7bfb      	ldrb	r3, [r7, #15]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d102      	bne.n	8012984 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 801297e:	2301      	movs	r3, #1
 8012980:	75fb      	strb	r3, [r7, #23]
 8012982:	e001      	b.n	8012988 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8012984:	2300      	movs	r3, #0
 8012986:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8012988:	f107 030e 	add.w	r3, r7, #14
 801298c:	461a      	mov	r2, r3
 801298e:	2131      	movs	r1, #49	@ 0x31
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fcb7 	bl	8013304 <VL53LX_RdByte>
 8012996:	4603      	mov	r3, r0
 8012998:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 801299a:	7bbb      	ldrb	r3, [r7, #14]
 801299c:	f003 0201 	and.w	r2, r3, #1
 80129a0:	7dfb      	ldrb	r3, [r7, #23]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d103      	bne.n	80129ae <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	2201      	movs	r2, #1
 80129aa:	701a      	strb	r2, [r3, #0]
 80129ac:	e002      	b.n	80129b4 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80129b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3718      	adds	r7, #24
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af02      	add	r7, sp, #8
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80129ca:	2300      	movs	r3, #0
 80129cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80129ce:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fd2c 	bl	8013430 <VL53LX_WaitUs>
 80129d8:	4603      	mov	r3, r0
 80129da:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80129dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10b      	bne.n	80129fc <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80129e4:	2301      	movs	r3, #1
 80129e6:	9301      	str	r3, [sp, #4]
 80129e8:	2301      	movs	r3, #1
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	2301      	movs	r3, #1
 80129ee:	22e5      	movs	r2, #229	@ 0xe5
 80129f0:	6839      	ldr	r1, [r7, #0]
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 fd34 	bl	8013460 <VL53LX_WaitValueMaskEx>
 80129f8:	4603      	mov	r3, r0
 80129fa:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80129fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d103      	bne.n	8012a0c <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8012a04:	2103      	movs	r1, #3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f7f6 fc36 	bl	8009278 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8012a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af02      	add	r7, sp, #8
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8012a22:	2300      	movs	r3, #0
 8012a24:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	3318      	adds	r3, #24
 8012a2a:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8012a30:	2300      	movs	r3, #0
 8012a32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8012a3a:	f003 0310 	and.w	r3, r3, #16
 8012a3e:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8012a40:	7bfb      	ldrb	r3, [r7, #15]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d102      	bne.n	8012a4c <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8012a46:	2301      	movs	r3, #1
 8012a48:	75fb      	strb	r3, [r7, #23]
 8012a4a:	e001      	b.n	8012a50 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	2201      	movs	r2, #1
 8012a54:	9201      	str	r2, [sp, #4]
 8012a56:	2201      	movs	r2, #1
 8012a58:	9200      	str	r2, [sp, #0]
 8012a5a:	2231      	movs	r2, #49	@ 0x31
 8012a5c:	6839      	ldr	r1, [r7, #0]
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 fcfe 	bl	8013460 <VL53LX_WaitValueMaskEx>
 8012a64:	4603      	mov	r3, r0
 8012a66:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8012a68:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3718      	adds	r7, #24
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8012a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a78:	b0c0      	sub	sp, #256	@ 0x100
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8012a80:	4618      	mov	r0, r3
 8012a82:	460b      	mov	r3, r1
 8012a84:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8012a88:	4613      	mov	r3, r2
 8012a8a:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8012a94:	2300      	movs	r3, #0
 8012a96:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 8012abe:	f04f 0200 	mov.w	r2, #0
 8012ac2:	f04f 0300 	mov.w	r3, #0
 8012ac6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 8012aca:	f04f 0200 	mov.w	r2, #0
 8012ace:	f04f 0300 	mov.w	r3, #0
 8012ad2:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 8012ad6:	f04f 0200 	mov.w	r2, #0
 8012ada:	f04f 0300 	mov.w	r3, #0
 8012ade:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8012ae2:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d108      	bne.n	8012afc <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8012aea:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8012aee:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8012af2:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fb f846 	bl	800db88 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8012afc:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d162      	bne.n	8012bca <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8012b04:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b08:	091b      	lsrs	r3, r3, #4
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	f003 0301 	and.w	r3, r3, #1
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00d      	beq.n	8012b30 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8012b14:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8012b18:	461a      	mov	r2, r3
 8012b1a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b1e:	095b      	lsrs	r3, r3, #5
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	1ad3      	subs	r3, r2, r3
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	3b01      	subs	r3, #1
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8012b2e:	e00a      	b.n	8012b46 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8012b30:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8012b34:	461a      	mov	r2, r3
 8012b36:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b3a:	095b      	lsrs	r3, r3, #5
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8012b46:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b50:	095b      	lsrs	r3, r3, #5
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	4413      	add	r3, r2
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8012b5c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b60:	f003 0301 	and.w	r3, r3, #1
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d011      	beq.n	8012b8c <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 8012b68:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8012b6c:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8012b6e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b72:	f003 020f 	and.w	r2, r3, #15
 8012b76:	0fd3      	lsrs	r3, r2, #31
 8012b78:	4413      	add	r3, r2
 8012b7a:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	1acb      	subs	r3, r1, r3
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	3b01      	subs	r3, #1
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8012b8a:	e00f      	b.n	8012bac <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 8012b8c:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8012b90:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8012b92:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012b96:	f003 020f 	and.w	r2, r3, #15
 8012b9a:	0fd3      	lsrs	r3, r2, #31
 8012b9c:	4413      	add	r3, r2
 8012b9e:	105b      	asrs	r3, r3, #1
 8012ba0:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	440b      	add	r3, r1
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 8012bac:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8012bb0:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8012bb2:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8012bb6:	f003 020f 	and.w	r2, r3, #15
 8012bba:	0fd3      	lsrs	r3, r2, #31
 8012bbc:	4413      	add	r3, r2
 8012bbe:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	440b      	add	r3, r1
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8012bca:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d133      	bne.n	8012c3a <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8012bd2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012bdc:	4413      	add	r3, r2
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	005b      	lsls	r3, r3, #1
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	3b0f      	subs	r3, #15
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8012bec:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8012bf6:	4413      	add	r3, r2
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	3b0f      	subs	r3, #15
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8012c06:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8012c10:	4413      	add	r3, r2
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	005b      	lsls	r3, r3, #1
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	3b0f      	subs	r3, #15
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8012c20:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8012c2a:	4413      	add	r3, r2
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	3b0f      	subs	r3, #15
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8012c3a:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f040 8135 	bne.w	8012eae <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8012c44:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8012c48:	17da      	asrs	r2, r3, #31
 8012c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012c4e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8012c52:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8012c56:	17da      	asrs	r2, r3, #31
 8012c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8012c60:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8012c64:	460b      	mov	r3, r1
 8012c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012c6a:	fb02 f203 	mul.w	r2, r2, r3
 8012c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c72:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 8012c76:	4601      	mov	r1, r0
 8012c78:	fb01 f303 	mul.w	r3, r1, r3
 8012c7c:	4413      	add	r3, r2
 8012c7e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8012c82:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012c86:	fba2 4501 	umull	r4, r5, r2, r1
 8012c8a:	442b      	add	r3, r5
 8012c8c:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8012c8e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8012c92:	17da      	asrs	r2, r3, #31
 8012c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012c98:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 8012c9c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8012ca0:	17da      	asrs	r2, r3, #31
 8012ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012ca6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8012caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012cb4:	fb02 f203 	mul.w	r2, r2, r3
 8012cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012cbc:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 8012cc0:	4601      	mov	r1, r0
 8012cc2:	fb01 f303 	mul.w	r3, r1, r3
 8012cc6:	4413      	add	r3, r2
 8012cc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012ccc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012cd0:	fba2 8901 	umull	r8, r9, r2, r1
 8012cd4:	444b      	add	r3, r9
 8012cd6:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8012cd8:	eb14 0308 	adds.w	r3, r4, r8
 8012cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012cde:	eb45 0309 	adc.w	r3, r5, r9
 8012ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ce4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8012ce8:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8012cec:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8012cf0:	1c51      	adds	r1, r2, #1
 8012cf2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8012cf6:	f143 0300 	adc.w	r3, r3, #0
 8012cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012cfe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012d02:	460b      	mov	r3, r1
 8012d04:	0fdb      	lsrs	r3, r3, #31
 8012d06:	2200      	movs	r2, #0
 8012d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d0c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8012d10:	4623      	mov	r3, r4
 8012d12:	4602      	mov	r2, r0
 8012d14:	189b      	adds	r3, r3, r2
 8012d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d18:	460b      	mov	r3, r1
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	eb42 0303 	adc.w	r3, r2, r3
 8012d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d22:	f04f 0200 	mov.w	r2, #0
 8012d26:	f04f 0300 	mov.w	r3, #0
 8012d2a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8012d2e:	4621      	mov	r1, r4
 8012d30:	084a      	lsrs	r2, r1, #1
 8012d32:	4629      	mov	r1, r5
 8012d34:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8012d38:	4629      	mov	r1, r5
 8012d3a:	104b      	asrs	r3, r1, #1
 8012d3c:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8012d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012d44:	2200      	movs	r2, #0
 8012d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012d4e:	f04f 0000 	mov.w	r0, #0
 8012d52:	f04f 0100 	mov.w	r1, #0
 8012d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8012d5a:	462b      	mov	r3, r5
 8012d5c:	0099      	lsls	r1, r3, #2
 8012d5e:	4623      	mov	r3, r4
 8012d60:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8012d64:	4623      	mov	r3, r4
 8012d66:	0098      	lsls	r0, r3, #2
 8012d68:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8012d6c:	1814      	adds	r4, r2, r0
 8012d6e:	633c      	str	r4, [r7, #48]	@ 0x30
 8012d70:	414b      	adcs	r3, r1
 8012d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8012d78:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8012d7c:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 8012d80:	17da      	asrs	r2, r3, #31
 8012d82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012d86:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8012d8a:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8012d8e:	17da      	asrs	r2, r3, #31
 8012d90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012d94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8012d98:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8012d9c:	462b      	mov	r3, r5
 8012d9e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8012da2:	4642      	mov	r2, r8
 8012da4:	fb02 f203 	mul.w	r2, r2, r3
 8012da8:	464b      	mov	r3, r9
 8012daa:	4621      	mov	r1, r4
 8012dac:	fb01 f303 	mul.w	r3, r1, r3
 8012db0:	4413      	add	r3, r2
 8012db2:	4622      	mov	r2, r4
 8012db4:	4641      	mov	r1, r8
 8012db6:	fba2 ab01 	umull	sl, fp, r2, r1
 8012dba:	445b      	add	r3, fp
 8012dbc:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8012dbe:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8012dc2:	17da      	asrs	r2, r3, #31
 8012dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 8012dc8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8012dcc:	17da      	asrs	r2, r3, #31
 8012dce:	673b      	str	r3, [r7, #112]	@ 0x70
 8012dd0:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8012dd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8012dd6:	462b      	mov	r3, r5
 8012dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012ddc:	4642      	mov	r2, r8
 8012dde:	fb02 f203 	mul.w	r2, r2, r3
 8012de2:	464b      	mov	r3, r9
 8012de4:	4621      	mov	r1, r4
 8012de6:	fb01 f303 	mul.w	r3, r1, r3
 8012dea:	4413      	add	r3, r2
 8012dec:	4622      	mov	r2, r4
 8012dee:	4641      	mov	r1, r8
 8012df0:	fba2 1201 	umull	r1, r2, r2, r1
 8012df4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012df8:	460a      	mov	r2, r1
 8012dfa:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8012dfe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012e02:	4413      	add	r3, r2
 8012e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8012e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8012e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e14:	4613      	mov	r3, r2
 8012e16:	eb4b 0303 	adc.w	r3, fp, r3
 8012e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012e1c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8012e20:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8012e24:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8012e28:	1c51      	adds	r1, r2, #1
 8012e2a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8012e2c:	f143 0300 	adc.w	r3, r3, #0
 8012e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012e32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8012e36:	460b      	mov	r3, r1
 8012e38:	0fdb      	lsrs	r3, r3, #31
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	623b      	str	r3, [r7, #32]
 8012e3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e40:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8012e44:	4623      	mov	r3, r4
 8012e46:	4602      	mov	r2, r0
 8012e48:	189b      	adds	r3, r3, r2
 8012e4a:	61bb      	str	r3, [r7, #24]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	462a      	mov	r2, r5
 8012e50:	eb42 0303 	adc.w	r3, r2, r3
 8012e54:	61fb      	str	r3, [r7, #28]
 8012e56:	f04f 0200 	mov.w	r2, #0
 8012e5a:	f04f 0300 	mov.w	r3, #0
 8012e5e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012e62:	4621      	mov	r1, r4
 8012e64:	084a      	lsrs	r2, r1, #1
 8012e66:	4629      	mov	r1, r5
 8012e68:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8012e6c:	4629      	mov	r1, r5
 8012e6e:	104b      	asrs	r3, r1, #1
 8012e70:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8012e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012e78:	2200      	movs	r2, #0
 8012e7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8012e7c:	667a      	str	r2, [r7, #100]	@ 0x64
 8012e7e:	f04f 0200 	mov.w	r2, #0
 8012e82:	f04f 0300 	mov.w	r3, #0
 8012e86:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8012e8a:	4629      	mov	r1, r5
 8012e8c:	008b      	lsls	r3, r1, #2
 8012e8e:	4621      	mov	r1, r4
 8012e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012e94:	4621      	mov	r1, r4
 8012e96:	008a      	lsls	r2, r1, #2
 8012e98:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8012e9c:	1884      	adds	r4, r0, r2
 8012e9e:	613c      	str	r4, [r7, #16]
 8012ea0:	eb41 0303 	adc.w	r3, r1, r3
 8012ea4:	617b      	str	r3, [r7, #20]
 8012ea6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012eaa:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8012eae:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d132      	bne.n	8012f1c <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 8012eb6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8012eba:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8012ebe:	1884      	adds	r4, r0, r2
 8012ec0:	65bc      	str	r4, [r7, #88]	@ 0x58
 8012ec2:	eb41 0303 	adc.w	r3, r1, r3
 8012ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ec8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012ecc:	460b      	mov	r3, r1
 8012ece:	3301      	adds	r3, #1
 8012ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	f143 0300 	adc.w	r3, r3, #0
 8012ed8:	657b      	str	r3, [r7, #84]	@ 0x54
 8012eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8012ede:	460b      	mov	r3, r1
 8012ee0:	0fdb      	lsrs	r3, r3, #31
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	60bb      	str	r3, [r7, #8]
 8012ee6:	60fa      	str	r2, [r7, #12]
 8012ee8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012eec:	4623      	mov	r3, r4
 8012eee:	4602      	mov	r2, r0
 8012ef0:	189b      	adds	r3, r3, r2
 8012ef2:	603b      	str	r3, [r7, #0]
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	462a      	mov	r2, r5
 8012ef8:	eb42 0303 	adc.w	r3, r2, r3
 8012efc:	607b      	str	r3, [r7, #4]
 8012efe:	f04f 0200 	mov.w	r2, #0
 8012f02:	f04f 0300 	mov.w	r3, #0
 8012f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	084a      	lsrs	r2, r1, #1
 8012f0e:	4629      	mov	r1, r5
 8012f10:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8012f14:	4629      	mov	r1, r5
 8012f16:	104b      	asrs	r3, r1, #1
 8012f18:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8012f1c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d109      	bne.n	8012f38 <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 8012f24:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	da05      	bge.n	8012f38 <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 8012f2c:	f04f 0200 	mov.w	r2, #0
 8012f30:	f04f 0300 	mov.w	r3, #0
 8012f34:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8012f38:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012f3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012f40:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8012f42:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012f52 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8012f52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012f56:	b09a      	sub	sp, #104	@ 0x68
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6478      	str	r0, [r7, #68]	@ 0x44
 8012f5c:	6439      	str	r1, [r7, #64]	@ 0x40
 8012f5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012f60:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8012f62:	2300      	movs	r3, #0
 8012f64:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8012f68:	f04f 0200 	mov.w	r2, #0
 8012f6c:	f04f 0300 	mov.w	r3, #0
 8012f70:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 8012f74:	f04f 0200 	mov.w	r2, #0
 8012f78:	f04f 0300 	mov.w	r3, #0
 8012f7c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 8012f80:	f04f 0200 	mov.w	r2, #0
 8012f84:	f04f 0300 	mov.w	r3, #0
 8012f88:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8012f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f94:	2200      	movs	r2, #0
 8012f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f98:	637a      	str	r2, [r7, #52]	@ 0x34
 8012f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012fa6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012faa:	460b      	mov	r3, r1
 8012fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fae:	fb02 f203 	mul.w	r2, r2, r3
 8012fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb4:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8012fb8:	4601      	mov	r1, r0
 8012fba:	fb01 f303 	mul.w	r3, r1, r3
 8012fbe:	4413      	add	r3, r2
 8012fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012fc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012fc4:	fba2 4501 	umull	r4, r5, r2, r1
 8012fc8:	442b      	add	r3, r5
 8012fca:	461d      	mov	r5, r3
 8012fcc:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 8012fd0:	623b      	str	r3, [r7, #32]
 8012fd2:	f145 0300 	adc.w	r3, r5, #0
 8012fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012fdc:	f04f 0300 	mov.w	r3, #0
 8012fe0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012fe4:	f7ed f974 	bl	80002d0 <__aeabi_uldivmod>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	460b      	mov	r3, r1
 8012fec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8012ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ff2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	61bb      	str	r3, [r7, #24]
 8012ffc:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8012ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013000:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013004:	4622      	mov	r2, r4
 8013006:	fb02 f203 	mul.w	r2, r2, r3
 801300a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801300c:	4629      	mov	r1, r5
 801300e:	fb01 f303 	mul.w	r3, r1, r3
 8013012:	4413      	add	r3, r2
 8013014:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013016:	4621      	mov	r1, r4
 8013018:	fba2 ab01 	umull	sl, fp, r2, r1
 801301c:	445b      	add	r3, fp
 801301e:	469b      	mov	fp, r3
 8013020:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8013024:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8013028:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801302c:	f04f 0200 	mov.w	r2, #0
 8013030:	f04f 0300 	mov.w	r3, #0
 8013034:	0a02      	lsrs	r2, r0, #8
 8013036:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801303a:	0a0b      	lsrs	r3, r1, #8
 801303c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8013040:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8013044:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 8013048:	6139      	str	r1, [r7, #16]
 801304a:	f143 0300 	adc.w	r3, r3, #0
 801304e:	617b      	str	r3, [r7, #20]
 8013050:	f04f 0200 	mov.w	r2, #0
 8013054:	f04f 0300 	mov.w	r3, #0
 8013058:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801305c:	4621      	mov	r1, r4
 801305e:	0aca      	lsrs	r2, r1, #11
 8013060:	4629      	mov	r1, r5
 8013062:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8013066:	4629      	mov	r1, r5
 8013068:	0acb      	lsrs	r3, r1, #11
 801306a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801306e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8013072:	2b01      	cmp	r3, #1
 8013074:	d305      	bcc.n	8013082 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8013076:	f04f 32ff 	mov.w	r2, #4294967295
 801307a:	f04f 0300 	mov.w	r3, #0
 801307e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8013082:	2300      	movs	r3, #0
 8013084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013088:	e041      	b.n	801310e <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801308a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801308e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013090:	3302      	adds	r3, #2
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4413      	add	r3, r2
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	2200      	movs	r2, #0
 801309a:	60bb      	str	r3, [r7, #8]
 801309c:	60fa      	str	r2, [r7, #12]
 801309e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80130a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80130a4:	4622      	mov	r2, r4
 80130a6:	fb02 f203 	mul.w	r2, r2, r3
 80130aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80130ac:	4629      	mov	r1, r5
 80130ae:	fb01 f303 	mul.w	r3, r1, r3
 80130b2:	4413      	add	r3, r2
 80130b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80130b6:	4621      	mov	r1, r4
 80130b8:	fba2 8901 	umull	r8, r9, r2, r1
 80130bc:	444b      	add	r3, r9
 80130be:	4699      	mov	r9, r3
 80130c0:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80130c4:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80130c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80130cc:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 80130d0:	6039      	str	r1, [r7, #0]
 80130d2:	f143 0300 	adc.w	r3, r3, #0
 80130d6:	607b      	str	r3, [r7, #4]
 80130d8:	f04f 0200 	mov.w	r2, #0
 80130dc:	f04f 0300 	mov.w	r3, #0
 80130e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80130e4:	4621      	mov	r1, r4
 80130e6:	0a8a      	lsrs	r2, r1, #10
 80130e8:	4629      	mov	r1, r5
 80130ea:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80130ee:	4629      	mov	r1, r5
 80130f0:	0a8b      	lsrs	r3, r1, #10
 80130f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80130f6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80130fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80130fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130fe:	3206      	adds	r2, #6
 8013100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8013104:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013108:	3301      	adds	r3, #1
 801310a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801310e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013110:	7a9b      	ldrb	r3, [r3, #10]
 8013112:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8013116:	429a      	cmp	r2, r3
 8013118:	d3b7      	bcc.n	801308a <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801311a:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 801311e:	4618      	mov	r0, r3
 8013120:	3768      	adds	r7, #104	@ 0x68
 8013122:	46bd      	mov	sp, r7
 8013124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013128 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	68fa      	ldr	r2, [r7, #12]
 801313a:	8910      	ldrh	r0, [r2, #8]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	b292      	uxth	r2, r2
 8013140:	68b9      	ldr	r1, [r7, #8]
 8013142:	4798      	blx	r3
 8013144:	4603      	mov	r3, r0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	60f8      	str	r0, [r7, #12]
 8013156:	60b9      	str	r1, [r7, #8]
 8013158:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	8910      	ldrh	r0, [r2, #8]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	b292      	uxth	r2, r2
 8013166:	68b9      	ldr	r1, [r7, #8]
 8013168:	4798      	blx	r3
 801316a:	4603      	mov	r3, r0
}
 801316c:	4618      	mov	r0, r3
 801316e:	3710      	adds	r7, #16
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8013174:	b580      	push	{r7, lr}
 8013176:	b086      	sub	sp, #24
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	607a      	str	r2, [r7, #4]
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	460b      	mov	r3, r1
 8013182:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8013184:	2300      	movs	r3, #0
 8013186:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	2bff      	cmp	r3, #255	@ 0xff
 801318c:	d902      	bls.n	8013194 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 801318e:	f06f 0303 	mvn.w	r3, #3
 8013192:	e01d      	b.n	80131d0 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8013194:	897b      	ldrh	r3, [r7, #10]
 8013196:	0a1b      	lsrs	r3, r3, #8
 8013198:	b29b      	uxth	r3, r3
 801319a:	b2da      	uxtb	r2, r3
 801319c:	4b0e      	ldr	r3, [pc, #56]	@ (80131d8 <VL53LX_WriteMulti+0x64>)
 801319e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80131a0:	897b      	ldrh	r3, [r7, #10]
 80131a2:	b2da      	uxtb	r2, r3
 80131a4:	4b0c      	ldr	r3, [pc, #48]	@ (80131d8 <VL53LX_WriteMulti+0x64>)
 80131a6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80131a8:	683a      	ldr	r2, [r7, #0]
 80131aa:	6879      	ldr	r1, [r7, #4]
 80131ac:	480b      	ldr	r0, [pc, #44]	@ (80131dc <VL53LX_WriteMulti+0x68>)
 80131ae:	f00a fc38 	bl	801da22 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	3302      	adds	r3, #2
 80131b6:	461a      	mov	r2, r3
 80131b8:	4907      	ldr	r1, [pc, #28]	@ (80131d8 <VL53LX_WriteMulti+0x64>)
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	f7ff ffb4 	bl	8013128 <_I2CWrite>
 80131c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80131c8:	23f3      	movs	r3, #243	@ 0xf3
 80131ca:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80131cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3718      	adds	r7, #24
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	20000db4 	.word	0x20000db4
 80131dc:	20000db6 	.word	0x20000db6

080131e0 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b086      	sub	sp, #24
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	607a      	str	r2, [r7, #4]
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	460b      	mov	r3, r1
 80131ee:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80131f0:	2300      	movs	r3, #0
 80131f2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80131f4:	897b      	ldrh	r3, [r7, #10]
 80131f6:	0a1b      	lsrs	r3, r3, #8
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	b2da      	uxtb	r2, r3
 80131fc:	4b12      	ldr	r3, [pc, #72]	@ (8013248 <VL53LX_ReadMulti+0x68>)
 80131fe:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8013200:	897b      	ldrh	r3, [r7, #10]
 8013202:	b2da      	uxtb	r2, r3
 8013204:	4b10      	ldr	r3, [pc, #64]	@ (8013248 <VL53LX_ReadMulti+0x68>)
 8013206:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8013208:	2202      	movs	r2, #2
 801320a:	490f      	ldr	r1, [pc, #60]	@ (8013248 <VL53LX_ReadMulti+0x68>)
 801320c:	68f8      	ldr	r0, [r7, #12]
 801320e:	f7ff ff8b 	bl	8013128 <_I2CWrite>
 8013212:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d002      	beq.n	8013220 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801321a:	23f3      	movs	r3, #243	@ 0xf3
 801321c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801321e:	e00c      	b.n	801323a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f7ff ff92 	bl	801314e <_I2CRead>
 801322a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d002      	beq.n	8013238 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8013232:	23f3      	movs	r3, #243	@ 0xf3
 8013234:	75fb      	strb	r3, [r7, #23]
 8013236:	e000      	b.n	801323a <VL53LX_ReadMulti+0x5a>
    }
done:
 8013238:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801323a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3718      	adds	r7, #24
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	20000db4 	.word	0x20000db4

0801324c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	807b      	strh	r3, [r7, #2]
 8013258:	4613      	mov	r3, r2
 801325a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801325c:	2300      	movs	r3, #0
 801325e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8013260:	887b      	ldrh	r3, [r7, #2]
 8013262:	0a1b      	lsrs	r3, r3, #8
 8013264:	b29b      	uxth	r3, r3
 8013266:	b2da      	uxtb	r2, r3
 8013268:	4b0c      	ldr	r3, [pc, #48]	@ (801329c <VL53LX_WrByte+0x50>)
 801326a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801326c:	887b      	ldrh	r3, [r7, #2]
 801326e:	b2da      	uxtb	r2, r3
 8013270:	4b0a      	ldr	r3, [pc, #40]	@ (801329c <VL53LX_WrByte+0x50>)
 8013272:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8013274:	4a09      	ldr	r2, [pc, #36]	@ (801329c <VL53LX_WrByte+0x50>)
 8013276:	787b      	ldrb	r3, [r7, #1]
 8013278:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801327a:	2203      	movs	r2, #3
 801327c:	4907      	ldr	r1, [pc, #28]	@ (801329c <VL53LX_WrByte+0x50>)
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7ff ff52 	bl	8013128 <_I2CWrite>
 8013284:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d001      	beq.n	8013290 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801328c:	23f3      	movs	r3, #243	@ 0xf3
 801328e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8013290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3710      	adds	r7, #16
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	20000db4 	.word	0x20000db4

080132a0 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	807b      	strh	r3, [r7, #2]
 80132ac:	4613      	mov	r3, r2
 80132ae:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80132b0:	2300      	movs	r3, #0
 80132b2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80132b4:	887b      	ldrh	r3, [r7, #2]
 80132b6:	0a1b      	lsrs	r3, r3, #8
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	b2da      	uxtb	r2, r3
 80132bc:	4b10      	ldr	r3, [pc, #64]	@ (8013300 <VL53LX_WrWord+0x60>)
 80132be:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80132c0:	887b      	ldrh	r3, [r7, #2]
 80132c2:	b2da      	uxtb	r2, r3
 80132c4:	4b0e      	ldr	r3, [pc, #56]	@ (8013300 <VL53LX_WrWord+0x60>)
 80132c6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80132c8:	883b      	ldrh	r3, [r7, #0]
 80132ca:	0a1b      	lsrs	r3, r3, #8
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	b2da      	uxtb	r2, r3
 80132d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013300 <VL53LX_WrWord+0x60>)
 80132d2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80132d4:	883b      	ldrh	r3, [r7, #0]
 80132d6:	b2da      	uxtb	r2, r3
 80132d8:	4b09      	ldr	r3, [pc, #36]	@ (8013300 <VL53LX_WrWord+0x60>)
 80132da:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80132dc:	2204      	movs	r2, #4
 80132de:	4908      	ldr	r1, [pc, #32]	@ (8013300 <VL53LX_WrWord+0x60>)
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7ff ff21 	bl	8013128 <_I2CWrite>
 80132e6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d001      	beq.n	80132f2 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80132ee:	23f3      	movs	r3, #243	@ 0xf3
 80132f0:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80132f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	20000db4 	.word	0x20000db4

08013304 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	460b      	mov	r3, r1
 801330e:	607a      	str	r2, [r7, #4]
 8013310:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8013312:	2300      	movs	r3, #0
 8013314:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8013316:	897b      	ldrh	r3, [r7, #10]
 8013318:	0a1b      	lsrs	r3, r3, #8
 801331a:	b29b      	uxth	r3, r3
 801331c:	b2da      	uxtb	r2, r3
 801331e:	4b12      	ldr	r3, [pc, #72]	@ (8013368 <VL53LX_RdByte+0x64>)
 8013320:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8013322:	897b      	ldrh	r3, [r7, #10]
 8013324:	b2da      	uxtb	r2, r3
 8013326:	4b10      	ldr	r3, [pc, #64]	@ (8013368 <VL53LX_RdByte+0x64>)
 8013328:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801332a:	2202      	movs	r2, #2
 801332c:	490e      	ldr	r1, [pc, #56]	@ (8013368 <VL53LX_RdByte+0x64>)
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	f7ff fefa 	bl	8013128 <_I2CWrite>
 8013334:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801333c:	23f3      	movs	r3, #243	@ 0xf3
 801333e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8013340:	e00c      	b.n	801335c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8013342:	2201      	movs	r2, #1
 8013344:	6879      	ldr	r1, [r7, #4]
 8013346:	68f8      	ldr	r0, [r7, #12]
 8013348:	f7ff ff01 	bl	801314e <_I2CRead>
 801334c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8013354:	23f3      	movs	r3, #243	@ 0xf3
 8013356:	75fb      	strb	r3, [r7, #23]
 8013358:	e000      	b.n	801335c <VL53LX_RdByte+0x58>
    }
done:
 801335a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801335c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	20000db4 	.word	0x20000db4

0801336c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 801336c:	b580      	push	{r7, lr}
 801336e:	b086      	sub	sp, #24
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	460b      	mov	r3, r1
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801337a:	2300      	movs	r3, #0
 801337c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801337e:	897b      	ldrh	r3, [r7, #10]
 8013380:	0a1b      	lsrs	r3, r3, #8
 8013382:	b29b      	uxth	r3, r3
 8013384:	b2da      	uxtb	r2, r3
 8013386:	4b17      	ldr	r3, [pc, #92]	@ (80133e4 <VL53LX_RdWord+0x78>)
 8013388:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801338a:	897b      	ldrh	r3, [r7, #10]
 801338c:	b2da      	uxtb	r2, r3
 801338e:	4b15      	ldr	r3, [pc, #84]	@ (80133e4 <VL53LX_RdWord+0x78>)
 8013390:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8013392:	2202      	movs	r2, #2
 8013394:	4913      	ldr	r1, [pc, #76]	@ (80133e4 <VL53LX_RdWord+0x78>)
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff fec6 	bl	8013128 <_I2CWrite>
 801339c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d002      	beq.n	80133aa <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80133a4:	23f3      	movs	r3, #243	@ 0xf3
 80133a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80133a8:	e015      	b.n	80133d6 <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80133aa:	2202      	movs	r2, #2
 80133ac:	490d      	ldr	r1, [pc, #52]	@ (80133e4 <VL53LX_RdWord+0x78>)
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f7ff fecd 	bl	801314e <_I2CRead>
 80133b4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80133bc:	23f3      	movs	r3, #243	@ 0xf3
 80133be:	75fb      	strb	r3, [r7, #23]
        goto done;
 80133c0:	e009      	b.n	80133d6 <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80133c2:	4b08      	ldr	r3, [pc, #32]	@ (80133e4 <VL53LX_RdWord+0x78>)
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	021b      	lsls	r3, r3, #8
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4a06      	ldr	r2, [pc, #24]	@ (80133e4 <VL53LX_RdWord+0x78>)
 80133cc:	7852      	ldrb	r2, [r2, #1]
 80133ce:	4413      	add	r3, r2
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80133d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3718      	adds	r7, #24
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	20000db4 	.word	0x20000db4

080133e8 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 80133f2:	2300      	movs	r3, #0
 80133f4:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	695b      	ldr	r3, [r3, #20]
 80133fa:	4798      	blx	r3
 80133fc:	4603      	mov	r3, r0
 80133fe:	461a      	mov	r2, r3
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8013404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3710      	adds	r7, #16
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}

08013410 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	4619      	mov	r1, r3
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f8d2 	bl	80135c8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
	...

08013430 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	4a07      	ldr	r2, [pc, #28]	@ (801345c <VL53LX_WaitUs+0x2c>)
 801343e:	fb82 1203 	smull	r1, r2, r2, r3
 8013442:	1192      	asrs	r2, r2, #6
 8013444:	17db      	asrs	r3, r3, #31
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f8bc 	bl	80135c8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	10624dd3 	.word	0x10624dd3

08013460 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8013460:	b590      	push	{r4, r7, lr}
 8013462:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8013466:	af00      	add	r7, sp, #0
 8013468:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 801346c:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8013470:	6020      	str	r0, [r4, #0]
 8013472:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8013476:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 801347a:	6001      	str	r1, [r0, #0]
 801347c:	4619      	mov	r1, r3
 801347e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013482:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8013486:	801a      	strh	r2, [r3, #0]
 8013488:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801348c:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8013490:	460a      	mov	r2, r1
 8013492:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8013494:	2300      	movs	r3, #0
 8013496:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 801349a:	2300      	movs	r3, #0
 801349c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 80134a6:	2300      	movs	r3, #0
 80134a8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 80134b2:	2300      	movs	r3, #0
 80134b4:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80134b8:	f107 0310 	add.w	r3, r7, #16
 80134bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80134c0:	4940      	ldr	r1, [pc, #256]	@ (80135c4 <VL53LX_WaitValueMaskEx+0x164>)
 80134c2:	4618      	mov	r0, r3
 80134c4:	f00a f9d0 	bl	801d868 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80134c8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80134cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80134d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80134d4:	4611      	mov	r1, r2
 80134d6:	6818      	ldr	r0, [r3, #0]
 80134d8:	f7ff ff86 	bl	80133e8 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 80134dc:	e04e      	b.n	801357c <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 80134de:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d110      	bne.n	8013508 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 80134e6:	f207 2213 	addw	r2, r7, #531	@ 0x213
 80134ea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80134ee:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80134f2:	8819      	ldrh	r1, [r3, #0]
 80134f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80134f8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80134fc:	6818      	ldr	r0, [r3, #0]
 80134fe:	f7ff ff01 	bl	8013304 <VL53LX_RdByte>
 8013502:	4603      	mov	r3, r0
 8013504:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8013508:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 801350c:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8013510:	4013      	ands	r3, r2
 8013512:	b2db      	uxtb	r3, r3
 8013514:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8013518:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 801351c:	7812      	ldrb	r2, [r2, #0]
 801351e:	429a      	cmp	r2, r3
 8013520:	d102      	bne.n	8013528 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8013522:	2301      	movs	r3, #1
 8013524:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8013528:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801352c:	2b00      	cmp	r3, #0
 801352e:	d114      	bne.n	801355a <VL53LX_WaitValueMaskEx+0xfa>
 8013530:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8013534:	2b00      	cmp	r3, #0
 8013536:	d110      	bne.n	801355a <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8013538:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00c      	beq.n	801355a <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8013540:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8013544:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013548:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801354c:	4611      	mov	r1, r2
 801354e:	6818      	ldr	r0, [r3, #0]
 8013550:	f7ff ff5e 	bl	8013410 <VL53LX_WaitMs>
 8013554:	4603      	mov	r3, r0
 8013556:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 801355a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801355e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013562:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8013566:	4611      	mov	r1, r2
 8013568:	6818      	ldr	r0, [r3, #0]
 801356a:	f7ff ff3d 	bl	80133e8 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801356e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8013572:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 801357c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8013580:	2b00      	cmp	r3, #0
 8013582:	d10c      	bne.n	801359e <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 8013584:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013588:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801358c:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	429a      	cmp	r2, r3
 8013594:	d203      	bcs.n	801359e <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8013596:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801359a:	2b00      	cmp	r3, #0
 801359c:	d09f      	beq.n	80134de <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 801359e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d106      	bne.n	80135b4 <VL53LX_WaitValueMaskEx+0x154>
 80135a6:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d102      	bne.n	80135b4 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80135ae:	23f9      	movs	r3, #249	@ 0xf9
 80135b0:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 80135b4:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}
 80135c2:	bf00      	nop
 80135c4:	0801e928 	.word	0x0801e928

080135c8 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	695b      	ldr	r3, [r3, #20]
 80135d6:	4798      	blx	r3
 80135d8:	4603      	mov	r3, r0
 80135da:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80135dc:	bf00      	nop
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	4798      	blx	r3
 80135e4:	4603      	mov	r3, r0
 80135e6:	461a      	mov	r2, r3
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	683a      	ldr	r2, [r7, #0]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d8f5      	bhi.n	80135de <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 80135f2:	2300      	movs	r3, #0
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3710      	adds	r7, #16
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b08c      	sub	sp, #48	@ 0x30
 8013600:	af06      	add	r7, sp, #24
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801360a:	2300      	movs	r3, #0
 801360c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 801360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013610:	9304      	str	r3, [sp, #16]
 8013612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013614:	9303      	str	r3, [sp, #12]
 8013616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013618:	9302      	str	r3, [sp, #8]
 801361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801361c:	9301      	str	r3, [sp, #4]
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	6a3b      	ldr	r3, [r7, #32]
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	6879      	ldr	r1, [r7, #4]
 8013628:	68b8      	ldr	r0, [r7, #8]
 801362a:	f7fc ffd5 	bl	80105d8 <VL53LX_hist_process_data>
 801362e:	4603      	mov	r3, r0
 8013630:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8013632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}

0801363e <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 801363e:	b580      	push	{r7, lr}
 8013640:	b084      	sub	sp, #16
 8013642:	af00      	add	r7, sp, #0
 8013644:	6078      	str	r0, [r7, #4]
 8013646:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d103      	bne.n	8013656 <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801364e:	f06f 0301 	mvn.w	r3, #1
 8013652:	60fb      	str	r3, [r7, #12]
 8013654:	e023      	b.n	801369e <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	685a      	ldr	r2, [r3, #4]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	891a      	ldrh	r2, [r3, #8]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	68da      	ldr	r2, [r3, #12]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	691a      	ldr	r2, [r3, #16]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	695a      	ldr	r2, [r3, #20]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d004      	beq.n	8013698 <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4798      	blx	r3
 8013694:	60f8      	str	r0, [r7, #12]
 8013696:	e002      	b.n	801369e <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 8013698:	f04f 33ff 	mov.w	r3, #4294967295
 801369c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801369e:	68fb      	ldr	r3, [r7, #12]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3710      	adds	r7, #16
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80136b6:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d003      	beq.n	80136c6 <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 80136be:	f04f 33ff 	mov.w	r3, #4294967295
 80136c2:	60fb      	str	r3, [r7, #12]
 80136c4:	e043      	b.n	801374e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f7ef ff00 	bl	80034cc <VL53LX_WaitDeviceBooted>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d003      	beq.n	80136da <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 80136d2:	f04f 33ff 	mov.w	r3, #4294967295
 80136d6:	60fb      	str	r3, [r7, #12]
 80136d8:	e039      	b.n	801374e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7ef fe9b 	bl	8003416 <VL53LX_DataInit>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d003      	beq.n	80136ee <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 80136e6:	f04f 33ff 	mov.w	r3, #4294967295
 80136ea:	60fb      	str	r3, [r7, #12]
 80136ec:	e02f      	b.n	801374e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7f0 fd98 	bl	8004224 <VL53LX_PerformRefSpadManagement>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d003      	beq.n	8013702 <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 80136fa:	f04f 33ff 	mov.w	r3, #4294967295
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	e025      	b.n	801374e <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013708:	2200      	movs	r2, #0
 801370a:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013714:	2200      	movs	r2, #0
 8013716:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013720:	2200      	movs	r2, #0
 8013722:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801372c:	2200      	movs	r2, #0
 801372e:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013738:	2200      	movs	r2, #0
 801373a:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013744:	2201      	movs	r2, #1
 8013746:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 801374a:	2300      	movs	r3, #0
 801374c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801374e:	68fb      	ldr	r3, [r7, #12]
}
 8013750:	4618      	mov	r0, r3
 8013752:	3710      	adds	r7, #16
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 8013760:	f04f 33ff 	mov.w	r3, #4294967295
 8013764:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801376c:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8013770:	2b01      	cmp	r3, #1
 8013772:	d111      	bne.n	8013798 <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	4798      	blx	r3
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d003      	beq.n	8013788 <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 8013780:	f04f 33ff 	mov.w	r3, #4294967295
 8013784:	60fb      	str	r3, [r7, #12]
 8013786:	e007      	b.n	8013798 <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 8013788:	2300      	movs	r3, #0
 801378a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013792:	2200      	movs	r2, #0
 8013794:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 8013798:	68fb      	ldr	r3, [r7, #12]
}
 801379a:	4618      	mov	r0, r3
 801379c:	3710      	adds	r7, #16
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b084      	sub	sp, #16
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
 80137aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d002      	beq.n	80137b8 <VL53L4CX_ReadID+0x16>
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d103      	bne.n	80137c0 <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80137b8:	f06f 0301 	mvn.w	r3, #1
 80137bc:	60fb      	str	r3, [r7, #12]
 80137be:	e00a      	b.n	80137d6 <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2200      	movs	r2, #0
 80137c4:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 80137c6:	683a      	ldr	r2, [r7, #0]
 80137c8:	f240 110f 	movw	r1, #271	@ 0x10f
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7ff fdcd 	bl	801336c <VL53LX_RdWord>
 80137d2:	4603      	mov	r3, r0
 80137d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80137d6:	68fb      	ldr	r3, [r7, #12]
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <VL53L4CX_GetCapabilities+0x16>
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d103      	bne.n	80137fe <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80137f6:	f06f 0301 	mvn.w	r3, #1
 80137fa:	60fb      	str	r3, [r7, #12]
 80137fc:	e00d      	b.n	801381a <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	2201      	movs	r2, #1
 8013802:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	2204      	movs	r2, #4
 8013808:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	2201      	movs	r2, #1
 801380e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	2200      	movs	r2, #0
 8013814:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 8013816:	2300      	movs	r3, #0
 8013818:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801381a:	68fb      	ldr	r3, [r7, #12]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3714      	adds	r7, #20
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d009      	beq.n	801384c <VL53L4CX_ConfigProfile+0x24>
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d006      	beq.n	801384c <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8013844:	7afb      	ldrb	r3, [r7, #11]
 8013846:	2b01      	cmp	r3, #1
 8013848:	d103      	bne.n	8013852 <VL53L4CX_ConfigProfile+0x2a>
 801384a:	e00c      	b.n	8013866 <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 801384c:	f06f 0301 	mvn.w	r3, #1
 8013850:	e043      	b.n	80138da <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8013852:	7afb      	ldrb	r3, [r7, #11]
 8013854:	2b02      	cmp	r3, #2
 8013856:	d006      	beq.n	8013866 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8013858:	7afb      	ldrb	r3, [r7, #11]
 801385a:	2b03      	cmp	r3, #3
 801385c:	d003      	beq.n	8013866 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 801385e:	f06f 0301 	mvn.w	r3, #1
 8013862:	60fb      	str	r3, [r7, #12]
 8013864:	e038      	b.n	80138d8 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8013866:	7afb      	ldrb	r3, [r7, #11]
 8013868:	4619      	mov	r1, r3
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f7ef ff0f 	bl	800368e <VL53LX_SetDistanceMode>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d003      	beq.n	801387e <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8013876:	f04f 33ff 	mov.w	r3, #4294967295
 801387a:	60fb      	str	r3, [r7, #12]
 801387c:	e02c      	b.n	80138d8 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8013882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013886:	fb02 f303 	mul.w	r3, r2, r3
 801388a:	4619      	mov	r1, r3
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ef ff67 	bl	8003760 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d003      	beq.n	80138a0 <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8013898:	f04f 33ff 	mov.w	r3, #4294967295
 801389c:	60fb      	str	r3, [r7, #12]
 801389e:	e01b      	b.n	80138d8 <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	bf14      	ite	ne
 80138a8:	2301      	movne	r3, #1
 80138aa:	2300      	moveq	r3, #0
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	461a      	mov	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80138b6:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	691b      	ldr	r3, [r3, #16]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	bf14      	ite	ne
 80138c2:	2301      	movne	r3, #1
 80138c4:	2300      	moveq	r3, #0
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	461a      	mov	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80138d0:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 80138d4:	2300      	movs	r3, #0
 80138d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80138d8:	68fb      	ldr	r3, [r7, #12]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}

080138e2 <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b084      	sub	sp, #16
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	6078      	str	r0, [r7, #4]
 80138ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d002      	beq.n	80138f8 <VL53L4CX_ConfigROI+0x16>
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d103      	bne.n	8013900 <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80138f8:	f06f 0301 	mvn.w	r3, #1
 80138fc:	60fb      	str	r3, [r7, #12]
 80138fe:	e01a      	b.n	8013936 <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	789b      	ldrb	r3, [r3, #2]
 8013904:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	78db      	ldrb	r3, [r3, #3]
 801390a:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	785b      	ldrb	r3, [r3, #1]
 8013916:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8013918:	f107 0308 	add.w	r3, r7, #8
 801391c:	4619      	mov	r1, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ef ff96 	bl	8003850 <VL53LX_SetUserROI>
 8013924:	4603      	mov	r3, r0
 8013926:	2b00      	cmp	r3, #0
 8013928:	d003      	beq.n	8013932 <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 801392a:	f04f 33ff 	mov.w	r3, #4294967295
 801392e:	60fb      	str	r3, [r7, #12]
 8013930:	e001      	b.n	8013936 <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8013936:	68fb      	ldr	r3, [r7, #12]
}
 8013938:	4618      	mov	r0, r3
 801393a:	3710      	adds	r7, #16
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 801394a:	f06f 0303 	mvn.w	r3, #3
}
 801394e:	4618      	mov	r0, r3
 8013950:	370c      	adds	r7, #12
 8013952:	46bd      	mov	sp, r7
 8013954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013958:	4770      	bx	lr

0801395a <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 801395a:	b580      	push	{r7, lr}
 801395c:	b084      	sub	sp, #16
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
 8013962:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8013964:	2300      	movs	r3, #0
 8013966:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d002      	beq.n	8013974 <VL53L4CX_GetDistance+0x1a>
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d103      	bne.n	801397c <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013974:	f06f 0301 	mvn.w	r3, #1
 8013978:	60fb      	str	r3, [r7, #12]
 801397a:	e009      	b.n	8013990 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013982:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8013986:	2b00      	cmp	r3, #0
 8013988:	d102      	bne.n	8013990 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 801398a:	f04f 33ff 	mov.w	r3, #4294967295
 801398e:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d112      	bne.n	80139bc <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801399c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d106      	bne.n	80139b2 <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80139a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 f931 	bl	8013c10 <vl53l4cx_poll_for_measurement>
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	e004      	b.n	80139bc <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 80139b2:	2100      	movs	r1, #0
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f000 f92b 	bl	8013c10 <vl53l4cx_poll_for_measurement>
 80139ba:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d119      	bne.n	80139f6 <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 f951 	bl	8013c6c <vl53l4cx_get_result>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d003      	beq.n	80139d8 <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 80139d0:	f04f 33ff 	mov.w	r3, #4294967295
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	e00e      	b.n	80139f6 <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80139de:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d105      	bne.n	80139f2 <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f7f0 f801 	bl	80039ee <VL53LX_ClearInterruptAndStartMeasurement>
 80139ec:	4603      	mov	r3, r0
 80139ee:	60fb      	str	r3, [r7, #12]
 80139f0:	e001      	b.n	80139f6 <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 80139f2:	2300      	movs	r3, #0
 80139f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80139f6:	68fb      	ldr	r3, [r7, #12]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d103      	bne.n	8013a18 <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013a10:	f06f 0301 	mvn.w	r3, #1
 8013a14:	60fb      	str	r3, [r7, #12]
 8013a16:	e06e      	b.n	8013af6 <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a1e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	d103      	bne.n	8013a2e <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 8013a26:	f04f 33ff 	mov.w	r3, #4294967295
 8013a2a:	60fb      	str	r3, [r7, #12]
 8013a2c:	e063      	b.n	8013af6 <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ef ff7b 	bl	800392a <VL53LX_StartMeasurement>
 8013a34:	4603      	mov	r3, r0
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d15a      	bne.n	8013af0 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a40:	2201      	movs	r2, #1
 8013a42:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ef ffcf 	bl	80039ee <VL53LX_ClearInterruptAndStartMeasurement>
 8013a50:	4603      	mov	r3, r0
 8013a52:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d83f      	bhi.n	8013adc <VL53L4CX_Start+0xdc>
 8013a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8013a64 <VL53L4CX_Start+0x64>)
 8013a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a62:	bf00      	nop
 8013a64:	08013a75 	.word	0x08013a75
 8013a68:	08013a8f 	.word	0x08013a8f
 8013a6c:	08013aa9 	.word	0x08013aa9
 8013a70:	08013ac3 	.word	0x08013ac3
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a86:	2201      	movs	r2, #1
 8013a88:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8013a8c:	e033      	b.n	8013af6 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013a94:	2200      	movs	r2, #0
 8013a96:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8013aa6:	e026      	b.n	8013af6 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013aae:	2201      	movs	r2, #1
 8013ab0:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013aba:	2200      	movs	r2, #0
 8013abc:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8013ac0:	e019      	b.n	8013af6 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8013ada:	e00c      	b.n	8013af6 <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 8013ae8:	f06f 0301 	mvn.w	r3, #1
 8013aec:	60fb      	str	r3, [r7, #12]
      break;
 8013aee:	e002      	b.n	8013af6 <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8013af0:	f04f 33ff 	mov.w	r3, #4294967295
 8013af4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013af6:	68fb      	ldr	r3, [r7, #12]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d103      	bne.n	8013b16 <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013b0e:	f06f 0301 	mvn.w	r3, #1
 8013b12:	60fb      	str	r3, [r7, #12]
 8013b14:	e01c      	b.n	8013b50 <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013b1c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d103      	bne.n	8013b2c <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8013b24:	f04f 33ff 	mov.w	r3, #4294967295
 8013b28:	60fb      	str	r3, [r7, #12]
 8013b2a:	e011      	b.n	8013b50 <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7ef ff4a 	bl	80039c6 <VL53LX_StopMeasurement>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d108      	bne.n	8013b4a <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8013b44:	2300      	movs	r3, #0
 8013b46:	60fb      	str	r3, [r7, #12]
 8013b48:	e002      	b.n	8013b50 <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8013b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b4e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013b50:	68fb      	ldr	r3, [r7, #12]
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b084      	sub	sp, #16
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
 8013b62:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d103      	bne.n	8013b72 <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013b6a:	f06f 0301 	mvn.w	r3, #1
 8013b6e:	60fb      	str	r3, [r7, #12]
 8013b70:	e012      	b.n	8013b98 <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	4619      	mov	r1, r3
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ef fc25 	bl	80033c8 <VL53LX_SetDeviceAddress>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d003      	beq.n	8013b8c <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 8013b84:	f04f 33ff 	mov.w	r3, #4294967295
 8013b88:	60fb      	str	r3, [r7, #12]
 8013b8a:	e005      	b.n	8013b98 <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013b98:	68fb      	ldr	r3, [r7, #12]
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 8013ba2:	b480      	push	{r7}
 8013ba4:	b085      	sub	sp, #20
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d002      	beq.n	8013bb8 <VL53L4CX_GetAddress+0x16>
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d103      	bne.n	8013bc0 <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013bb8:	f06f 0301 	mvn.w	r3, #1
 8013bbc:	60fb      	str	r3, [r7, #12]
 8013bbe:	e006      	b.n	8013bce <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	891b      	ldrh	r3, [r3, #8]
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013bce:	68fb      	ldr	r3, [r7, #12]
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3714      	adds	r7, #20
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8013be6:	f06f 0303 	mvn.w	r3, #3
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	370c      	adds	r7, #12
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr

08013bf6 <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8013bf6:	b480      	push	{r7}
 8013bf8:	b083      	sub	sp, #12
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8013c00:	f06f 0303 	mvn.w	r3, #3
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d102      	bne.n	8013c2a <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8013c24:	f06f 0301 	mvn.w	r3, #1
 8013c28:	e01b      	b.n	8013c62 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	695b      	ldr	r3, [r3, #20]
 8013c2e:	4798      	blx	r3
 8013c30:	4603      	mov	r3, r0
 8013c32:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8013c34:	f107 030b 	add.w	r3, r7, #11
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ef feed 	bl	8003a1a <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8013c40:	7afb      	ldrb	r3, [r7, #11]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d101      	bne.n	8013c4a <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 8013c46:	2300      	movs	r3, #0
 8013c48:	e00b      	b.n	8013c62 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	695b      	ldr	r3, [r3, #20]
 8013c4e:	4798      	blx	r3
 8013c50:	4603      	mov	r3, r0
 8013c52:	461a      	mov	r2, r3
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	683a      	ldr	r2, [r7, #0]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d8ea      	bhi.n	8013c34 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 8013c5e:	f06f 0302 	mvn.w	r3, #2
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3710      	adds	r7, #16
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
	...

08013c6c <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8013c6c:	b590      	push	{r4, r7, lr}
 8013c6e:	b089      	sub	sp, #36	@ 0x24
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d002      	beq.n	8013c82 <vl53l4cx_get_result+0x16>
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d103      	bne.n	8013c8a <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8013c82:	f06f 0301 	mvn.w	r3, #1
 8013c86:	61fb      	str	r3, [r7, #28]
 8013c88:	e103      	b.n	8013e92 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8013c8a:	4984      	ldr	r1, [pc, #528]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7f0 faa2 	bl	80041d6 <VL53LX_GetMultiRangingData>
 8013c92:	4603      	mov	r3, r0
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d003      	beq.n	8013ca0 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8013c98:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9c:	61fb      	str	r3, [r7, #28]
 8013c9e:	e0f8      	b.n	8013e92 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	76fb      	strb	r3, [r7, #27]
 8013ca4:	e0ec      	b.n	8013e80 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8013ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013ca8:	795b      	ldrb	r3, [r3, #5]
 8013caa:	7efa      	ldrb	r2, [r7, #27]
 8013cac:	4618      	mov	r0, r3
 8013cae:	6839      	ldr	r1, [r7, #0]
 8013cb0:	4613      	mov	r3, r2
 8013cb2:	011b      	lsls	r3, r3, #4
 8013cb4:	4413      	add	r3, r2
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	440b      	add	r3, r1
 8013cba:	3304      	adds	r3, #4
 8013cbc:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	76bb      	strb	r3, [r7, #26]
 8013cc2:	e0d4      	b.n	8013e6e <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8013cc4:	7eba      	ldrb	r2, [r7, #26]
 8013cc6:	4975      	ldr	r1, [pc, #468]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013cc8:	4613      	mov	r3, r2
 8013cca:	009b      	lsls	r3, r3, #2
 8013ccc:	4413      	add	r3, r2
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	440b      	add	r3, r1
 8013cd2:	3318      	adds	r3, #24
 8013cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	da0b      	bge.n	8013cf4 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8013cdc:	7efa      	ldrb	r2, [r7, #27]
 8013cde:	7eb8      	ldrb	r0, [r7, #26]
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	011b      	lsls	r3, r3, #4
 8013ce6:	4413      	add	r3, r2
 8013ce8:	4403      	add	r3, r0
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	440b      	add	r3, r1
 8013cee:	2200      	movs	r2, #0
 8013cf0:	609a      	str	r2, [r3, #8]
 8013cf2:	e014      	b.n	8013d1e <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8013cf4:	7eba      	ldrb	r2, [r7, #26]
 8013cf6:	4969      	ldr	r1, [pc, #420]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	4413      	add	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	440b      	add	r3, r1
 8013d02:	3318      	adds	r3, #24
 8013d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d08:	7efa      	ldrb	r2, [r7, #27]
 8013d0a:	7eb8      	ldrb	r0, [r7, #26]
 8013d0c:	461c      	mov	r4, r3
 8013d0e:	6839      	ldr	r1, [r7, #0]
 8013d10:	4613      	mov	r3, r2
 8013d12:	011b      	lsls	r3, r3, #4
 8013d14:	4413      	add	r3, r2
 8013d16:	4403      	add	r3, r0
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	440b      	add	r3, r1
 8013d1c:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013d24:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d132      	bne.n	8013d92 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8013d2c:	7eba      	ldrb	r2, [r7, #26]
 8013d2e:	495b      	ldr	r1, [pc, #364]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013d30:	4613      	mov	r3, r2
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	4413      	add	r3, r2
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	440b      	add	r3, r1
 8013d3a:	3310      	adds	r3, #16
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	ee07 3a90 	vmov	s15, r3
 8013d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d46:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8013ea0 <vl53l4cx_get_result+0x234>
 8013d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013d4e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013ea4 <vl53l4cx_get_result+0x238>
 8013d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d56:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8013d5a:	4b50      	ldr	r3, [pc, #320]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013d60:	0a1b      	lsrs	r3, r3, #8
 8013d62:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8013d64:	8a7b      	ldrh	r3, [r7, #18]
 8013d66:	ee07 3a90 	vmov	s15, r3
 8013d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d6e:	7efa      	ldrb	r2, [r7, #27]
 8013d70:	7eb8      	ldrb	r0, [r7, #26]
 8013d72:	edd7 6a05 	vldr	s13, [r7, #20]
 8013d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	011b      	lsls	r3, r3, #4
 8013d80:	4413      	add	r3, r2
 8013d82:	4403      	add	r3, r0
 8013d84:	3308      	adds	r3, #8
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	440b      	add	r3, r1
 8013d8a:	3308      	adds	r3, #8
 8013d8c:	edc3 7a00 	vstr	s15, [r3]
 8013d90:	e00d      	b.n	8013dae <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8013d92:	7efa      	ldrb	r2, [r7, #27]
 8013d94:	7eb8      	ldrb	r0, [r7, #26]
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	4613      	mov	r3, r2
 8013d9a:	011b      	lsls	r3, r3, #4
 8013d9c:	4413      	add	r3, r2
 8013d9e:	4403      	add	r3, r0
 8013da0:	3308      	adds	r3, #8
 8013da2:	009b      	lsls	r3, r3, #2
 8013da4:	440b      	add	r3, r1
 8013da6:	3308      	adds	r3, #8
 8013da8:	f04f 0200 	mov.w	r2, #0
 8013dac:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013db4:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d132      	bne.n	8013e22 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8013dbc:	7eba      	ldrb	r2, [r7, #26]
 8013dbe:	4937      	ldr	r1, [pc, #220]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013dc0:	4613      	mov	r3, r2
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	4413      	add	r3, r2
 8013dc6:	009b      	lsls	r3, r3, #2
 8013dc8:	440b      	add	r3, r1
 8013dca:	330c      	adds	r3, #12
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	ee07 3a90 	vmov	s15, r3
 8013dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013dd6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8013ea0 <vl53l4cx_get_result+0x234>
 8013dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013dde:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8013ea4 <vl53l4cx_get_result+0x238>
 8013de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013de6:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8013dea:	4b2c      	ldr	r3, [pc, #176]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013df0:	0a1b      	lsrs	r3, r3, #8
 8013df2:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8013df4:	8a7b      	ldrh	r3, [r7, #18]
 8013df6:	ee07 3a90 	vmov	s15, r3
 8013dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013dfe:	7efa      	ldrb	r2, [r7, #27]
 8013e00:	7eb8      	ldrb	r0, [r7, #26]
 8013e02:	edd7 6a03 	vldr	s13, [r7, #12]
 8013e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	011b      	lsls	r3, r3, #4
 8013e10:	4413      	add	r3, r2
 8013e12:	4403      	add	r3, r0
 8013e14:	330c      	adds	r3, #12
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	440b      	add	r3, r1
 8013e1a:	3308      	adds	r3, #8
 8013e1c:	edc3 7a00 	vstr	s15, [r3]
 8013e20:	e00d      	b.n	8013e3e <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8013e22:	7efa      	ldrb	r2, [r7, #27]
 8013e24:	7eb8      	ldrb	r0, [r7, #26]
 8013e26:	6839      	ldr	r1, [r7, #0]
 8013e28:	4613      	mov	r3, r2
 8013e2a:	011b      	lsls	r3, r3, #4
 8013e2c:	4413      	add	r3, r2
 8013e2e:	4403      	add	r3, r0
 8013e30:	330c      	adds	r3, #12
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	440b      	add	r3, r1
 8013e36:	3308      	adds	r3, #8
 8013e38:	f04f 0200 	mov.w	r2, #0
 8013e3c:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8013e3e:	7eba      	ldrb	r2, [r7, #26]
 8013e40:	4916      	ldr	r1, [pc, #88]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013e42:	4613      	mov	r3, r2
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	440b      	add	r3, r1
 8013e4c:	331a      	adds	r3, #26
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	7efa      	ldrb	r2, [r7, #27]
 8013e52:	7eb8      	ldrb	r0, [r7, #26]
 8013e54:	461c      	mov	r4, r3
 8013e56:	6839      	ldr	r1, [r7, #0]
 8013e58:	4613      	mov	r3, r2
 8013e5a:	011b      	lsls	r3, r3, #4
 8013e5c:	4413      	add	r3, r2
 8013e5e:	4403      	add	r3, r0
 8013e60:	3304      	adds	r3, #4
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	440b      	add	r3, r1
 8013e66:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8013e68:	7ebb      	ldrb	r3, [r7, #26]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	76bb      	strb	r3, [r7, #26]
 8013e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8013e9c <vl53l4cx_get_result+0x230>)
 8013e70:	795b      	ldrb	r3, [r3, #5]
 8013e72:	7eba      	ldrb	r2, [r7, #26]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	f4ff af25 	bcc.w	8013cc4 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8013e7a:	7efb      	ldrb	r3, [r7, #27]
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	76fb      	strb	r3, [r7, #27]
 8013e80:	7efb      	ldrb	r3, [r7, #27]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f43f af0f 	beq.w	8013ca6 <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8013e92:	69fb      	ldr	r3, [r7, #28]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3724      	adds	r7, #36	@ 0x24
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd90      	pop	{r4, r7, pc}
 8013e9c:	20000eb4 	.word	0x20000eb4
 8013ea0:	47800000 	.word	0x47800000
 8013ea4:	447a0000 	.word	0x447a0000

08013ea8 <log_init>:

UART_HandleTypeDef *log_huart;

static char log_buffer[LOG_BUFFER_SIZE];

void log_init(void *huart) {
 8013ea8:	b480      	push	{r7}
 8013eaa:	b083      	sub	sp, #12
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
	log_huart = (UART_HandleTypeDef*) huart;
 8013eb0:	4a04      	ldr	r2, [pc, #16]	@ (8013ec4 <log_init+0x1c>)
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6013      	str	r3, [r2, #0]
}
 8013eb6:	bf00      	nop
 8013eb8:	370c      	adds	r7, #12
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr
 8013ec2:	bf00      	nop
 8013ec4:	20000f10 	.word	0x20000f10

08013ec8 <log_transmit>:

void log_transmit(uint8_t *data, uint16_t data_len) {
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	460b      	mov	r3, r1
 8013ed2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(log_huart, data, data_len, LOG_UART_TIMEOUT);
 8013ed4:	4b05      	ldr	r3, [pc, #20]	@ (8013eec <log_transmit+0x24>)
 8013ed6:	6818      	ldr	r0, [r3, #0]
 8013ed8:	887a      	ldrh	r2, [r7, #2]
 8013eda:	2364      	movs	r3, #100	@ 0x64
 8013edc:	6879      	ldr	r1, [r7, #4]
 8013ede:	f004 f983 	bl	80181e8 <HAL_UART_Transmit>
}
 8013ee2:	bf00      	nop
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	20000f10 	.word	0x20000f10

08013ef0 <log_printf>:

void log_printf(const char *format, ...) {
 8013ef0:	b40f      	push	{r0, r1, r2, r3}
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b082      	sub	sp, #8
 8013ef6:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8013ef8:	f107 0314 	add.w	r3, r7, #20
 8013efc:	607b      	str	r3, [r7, #4]
	vsnprintf(log_buffer, LOG_BUFFER_SIZE, format, argptr);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013f06:	4809      	ldr	r0, [pc, #36]	@ (8013f2c <log_printf+0x3c>)
 8013f08:	f009 fc04 	bl	801d714 <vsniprintf>
	va_end(argptr);
	log_transmit((uint8_t*) log_buffer, strlen(log_buffer));
 8013f0c:	4807      	ldr	r0, [pc, #28]	@ (8013f2c <log_printf+0x3c>)
 8013f0e:	f7ec f937 	bl	8000180 <strlen>
 8013f12:	4603      	mov	r3, r0
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	4619      	mov	r1, r3
 8013f18:	4804      	ldr	r0, [pc, #16]	@ (8013f2c <log_printf+0x3c>)
 8013f1a:	f7ff ffd5 	bl	8013ec8 <log_transmit>
}
 8013f1e:	bf00      	nop
 8013f20:	3708      	adds	r7, #8
 8013f22:	46bd      	mov	sp, r7
 8013f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f28:	b004      	add	sp, #16
 8013f2a:	4770      	bx	lr
 8013f2c:	20000f14 	.word	0x20000f14

08013f30 <MyInitLSM6DSO>:
#include "MEMS_library.h"

static LSM6DSO_Object_t lsm6dso_obj_0;
static LIS2MDL_Object_t lis2mdl_obj_0;

void MyInitLSM6DSO(void){
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b088      	sub	sp, #32
 8013f34:	af00      	add	r7, sp, #0
	LSM6DSO_IO_t io_ctx;
	io_ctx.BusType     = LSM6DSO_I2C_BUS;
 8013f36:	2300      	movs	r3, #0
 8013f38:	60bb      	str	r3, [r7, #8]
	io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8013f3a:	23d7      	movs	r3, #215	@ 0xd7
 8013f3c:	733b      	strb	r3, [r7, #12]
	io_ctx.Init        = LSM6DSO_I2C_INIT;
 8013f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8013f70 <MyInitLSM6DSO+0x40>)
 8013f40:	603b      	str	r3, [r7, #0]
	io_ctx.DeInit      = LSM6DSO_I2C_DEINIT;
 8013f42:	4b0c      	ldr	r3, [pc, #48]	@ (8013f74 <MyInitLSM6DSO+0x44>)
 8013f44:	607b      	str	r3, [r7, #4]
	io_ctx.ReadReg     = LSM6DSO_I2C_READ_REG;
 8013f46:	4b0c      	ldr	r3, [pc, #48]	@ (8013f78 <MyInitLSM6DSO+0x48>)
 8013f48:	617b      	str	r3, [r7, #20]
	io_ctx.WriteReg    = LSM6DSO_I2C_WRITE_REG;
 8013f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8013f7c <MyInitLSM6DSO+0x4c>)
 8013f4c:	613b      	str	r3, [r7, #16]
	io_ctx.GetTick     = LSM6DSO_GET_TICK;
 8013f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8013f80 <MyInitLSM6DSO+0x50>)
 8013f50:	61bb      	str	r3, [r7, #24]
	io_ctx.Delay       = LSM6DSO_DELAY;
 8013f52:	4b0c      	ldr	r3, [pc, #48]	@ (8013f84 <MyInitLSM6DSO+0x54>)
 8013f54:	61fb      	str	r3, [r7, #28]

	LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx);
 8013f56:	463b      	mov	r3, r7
 8013f58:	4619      	mov	r1, r3
 8013f5a:	480b      	ldr	r0, [pc, #44]	@ (8013f88 <MyInitLSM6DSO+0x58>)
 8013f5c:	f7ee fa80 	bl	8002460 <LSM6DSO_RegisterBusIO>
	LSM6DSO_Init(&lsm6dso_obj_0);
 8013f60:	4809      	ldr	r0, [pc, #36]	@ (8013f88 <MyInitLSM6DSO+0x58>)
 8013f62:	f7ee fae7 	bl	8002534 <LSM6DSO_Init>
}
 8013f66:	bf00      	nop
 8013f68:	3720      	adds	r7, #32
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	08001269 	.word	0x08001269
 8013f74:	080012e5 	.word	0x080012e5
 8013f78:	08001399 	.word	0x08001399
 8013f7c:	08001335 	.word	0x08001335
 8013f80:	080014a5 	.word	0x080014a5
 8013f84:	0801413d 	.word	0x0801413d
 8013f88:	20001114 	.word	0x20001114

08013f8c <MyEnableLSM6DSO>:

void MyEnableLSM6DSO(void){
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	af00      	add	r7, sp, #0
	LSM6DSO_ACC_Enable(&lsm6dso_obj_0);
 8013f90:	4803      	ldr	r0, [pc, #12]	@ (8013fa0 <MyEnableLSM6DSO+0x14>)
 8013f92:	f7ee fb52 	bl	800263a <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&lsm6dso_obj_0);
 8013f96:	4802      	ldr	r0, [pc, #8]	@ (8013fa0 <MyEnableLSM6DSO+0x14>)
 8013f98:	f7ee fc11 	bl	80027be <LSM6DSO_GYRO_Enable>
}
 8013f9c:	bf00      	nop
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	20001114 	.word	0x20001114

08013fa4 <MyGettingLSM6DSO>:

void MyGettingLSM6DSO(LSM6DSO_Axes_t *Acc, LSM6DSO_Axes_t *Gyr){
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
	LSM6DSO_ACC_GetAxes(&lsm6dso_obj_0, Acc);
 8013fae:	6879      	ldr	r1, [r7, #4]
 8013fb0:	480f      	ldr	r0, [pc, #60]	@ (8013ff0 <MyGettingLSM6DSO+0x4c>)
 8013fb2:	f7ee fbad 	bl	8002710 <LSM6DSO_ACC_GetAxes>
	LSM6DSO_GYRO_GetAxes(&lsm6dso_obj_0, Gyr);
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	480d      	ldr	r0, [pc, #52]	@ (8013ff0 <MyGettingLSM6DSO+0x4c>)
 8013fba:	f7ee fc77 	bl	80028ac <LSM6DSO_GYRO_GetAxes>
	printf("______________________________________________________\n");
 8013fbe:	480d      	ldr	r0, [pc, #52]	@ (8013ff4 <MyGettingLSM6DSO+0x50>)
 8013fc0:	f009 fb32 	bl	801d628 <puts>
	printf("Gyr X : %ld | Gyr Y : %ld | Gyr Z : %ld\n", Gyr->x, Gyr->y, Gyr->z);
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	6819      	ldr	r1, [r3, #0]
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	689b      	ldr	r3, [r3, #8]
 8013fd0:	4809      	ldr	r0, [pc, #36]	@ (8013ff8 <MyGettingLSM6DSO+0x54>)
 8013fd2:	f009 fab9 	bl	801d548 <iprintf>
	printf("Acc X : %ld | Acc Y : %ld | Acc Z : %ld\n", Acc->x, Acc->y, Acc->z);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6819      	ldr	r1, [r3, #0]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	685a      	ldr	r2, [r3, #4]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	4806      	ldr	r0, [pc, #24]	@ (8013ffc <MyGettingLSM6DSO+0x58>)
 8013fe4:	f009 fab0 	bl	801d548 <iprintf>
}
 8013fe8:	bf00      	nop
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	20001114 	.word	0x20001114
 8013ff4:	0801e92c 	.word	0x0801e92c
 8013ff8:	0801e964 	.word	0x0801e964
 8013ffc:	0801e990 	.word	0x0801e990

08014000 <MyInitLIS2MDL>:

void MyInitLIS2MDL(void){
 8014000:	b580      	push	{r7, lr}
 8014002:	b088      	sub	sp, #32
 8014004:	af00      	add	r7, sp, #0
	LIS2MDL_IO_t io_ctx_bis;
	io_ctx_bis.BusType     = LIS2MDL_I2C_BUS;
 8014006:	2300      	movs	r3, #0
 8014008:	60bb      	str	r3, [r7, #8]
	io_ctx_bis.Address     = LIS2MDL_I2C_ADD_H;
 801400a:	233d      	movs	r3, #61	@ 0x3d
 801400c:	733b      	strb	r3, [r7, #12]
	io_ctx_bis.Init        = LIS2MDL_I2C_INIT;
 801400e:	4b0c      	ldr	r3, [pc, #48]	@ (8014040 <MyInitLIS2MDL+0x40>)
 8014010:	603b      	str	r3, [r7, #0]
	io_ctx_bis.DeInit      = LIS2MDL_I2C_DEINIT;
 8014012:	4b0c      	ldr	r3, [pc, #48]	@ (8014044 <MyInitLIS2MDL+0x44>)
 8014014:	607b      	str	r3, [r7, #4]
	io_ctx_bis.ReadReg     = LIS2MDL_I2C_READ_REG;
 8014016:	4b0c      	ldr	r3, [pc, #48]	@ (8014048 <MyInitLIS2MDL+0x48>)
 8014018:	617b      	str	r3, [r7, #20]
	io_ctx_bis.WriteReg    = LIS2MDL_I2C_WRITE_REG;
 801401a:	4b0c      	ldr	r3, [pc, #48]	@ (801404c <MyInitLIS2MDL+0x4c>)
 801401c:	613b      	str	r3, [r7, #16]
	io_ctx_bis.GetTick     = LIS2MDL_GET_TICK;
 801401e:	4b0c      	ldr	r3, [pc, #48]	@ (8014050 <MyInitLIS2MDL+0x50>)
 8014020:	61bb      	str	r3, [r7, #24]
	io_ctx_bis.Delay       = LIS2MDL_DELAY;
 8014022:	4b0c      	ldr	r3, [pc, #48]	@ (8014054 <MyInitLIS2MDL+0x54>)
 8014024:	61fb      	str	r3, [r7, #28]

	LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx_bis);
 8014026:	463b      	mov	r3, r7
 8014028:	4619      	mov	r1, r3
 801402a:	480b      	ldr	r0, [pc, #44]	@ (8014058 <MyInitLIS2MDL+0x58>)
 801402c:	f7ed fbf6 	bl	800181c <LIS2MDL_RegisterBusIO>
	LIS2MDL_Init(&lis2mdl_obj_0);
 8014030:	4809      	ldr	r0, [pc, #36]	@ (8014058 <MyInitLIS2MDL+0x58>)
 8014032:	f7ed fc73 	bl	800191c <LIS2MDL_Init>
}
 8014036:	bf00      	nop
 8014038:	3720      	adds	r7, #32
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	08001269 	.word	0x08001269
 8014044:	080012e5 	.word	0x080012e5
 8014048:	08001399 	.word	0x08001399
 801404c:	08001335 	.word	0x08001335
 8014050:	080014a5 	.word	0x080014a5
 8014054:	0801413d 	.word	0x0801413d
 8014058:	2000114c 	.word	0x2000114c

0801405c <MyEnableLIS2MDL>:

void MyEnableLIS2MDL(void){
 801405c:	b580      	push	{r7, lr}
 801405e:	af00      	add	r7, sp, #0
	LIS2MDL_MAG_Enable(&lis2mdl_obj_0);
 8014060:	4802      	ldr	r0, [pc, #8]	@ (801406c <MyEnableLIS2MDL+0x10>)
 8014062:	f7ed fce1 	bl	8001a28 <LIS2MDL_MAG_Enable>
}
 8014066:	bf00      	nop
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	2000114c 	.word	0x2000114c

08014070 <MyGettingLIS2MDL>:

void MyGettingLIS2MDL(LIS2MDL_Axes_t *Magn){
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
	LIS2MDL_MAG_GetAxes(&lis2mdl_obj_0, Magn);
 8014078:	6879      	ldr	r1, [r7, #4]
 801407a:	4808      	ldr	r0, [pc, #32]	@ (801409c <MyGettingLIS2MDL+0x2c>)
 801407c:	f7ed fd26 	bl	8001acc <LIS2MDL_MAG_GetAxes>
	printf("Mag X : %ld | Mag Y : %ld | Mag Z : %ld\n", Magn->x, Magn->y, Magn->z);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6819      	ldr	r1, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685a      	ldr	r2, [r3, #4]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	689b      	ldr	r3, [r3, #8]
 801408c:	4804      	ldr	r0, [pc, #16]	@ (80140a0 <MyGettingLIS2MDL+0x30>)
 801408e:	f009 fa5b 	bl	801d548 <iprintf>
}
 8014092:	bf00      	nop
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	2000114c 	.word	0x2000114c
 80140a0:	0801e9bc 	.word	0x0801e9bc

080140a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80140aa:	2300      	movs	r3, #0
 80140ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80140ae:	4b0c      	ldr	r3, [pc, #48]	@ (80140e0 <HAL_Init+0x3c>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4a0b      	ldr	r2, [pc, #44]	@ (80140e0 <HAL_Init+0x3c>)
 80140b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80140b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80140ba:	2003      	movs	r0, #3
 80140bc:	f000 f90f 	bl	80142de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80140c0:	200f      	movs	r0, #15
 80140c2:	f7ec ffd5 	bl	8001070 <HAL_InitTick>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d002      	beq.n	80140d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80140cc:	2301      	movs	r3, #1
 80140ce:	71fb      	strb	r3, [r7, #7]
 80140d0:	e001      	b.n	80140d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80140d2:	f7ec fee0 	bl	8000e96 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80140d6:	79fb      	ldrb	r3, [r7, #7]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	58004000 	.word	0x58004000

080140e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80140e4:	b480      	push	{r7}
 80140e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80140e8:	4b06      	ldr	r3, [pc, #24]	@ (8014104 <HAL_IncTick+0x20>)
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	461a      	mov	r2, r3
 80140ee:	4b06      	ldr	r3, [pc, #24]	@ (8014108 <HAL_IncTick+0x24>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	4413      	add	r3, r2
 80140f4:	4a04      	ldr	r2, [pc, #16]	@ (8014108 <HAL_IncTick+0x24>)
 80140f6:	6013      	str	r3, [r2, #0]
}
 80140f8:	bf00      	nop
 80140fa:	46bd      	mov	sp, r7
 80140fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	20000074 	.word	0x20000074
 8014108:	20001180 	.word	0x20001180

0801410c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801410c:	b480      	push	{r7}
 801410e:	af00      	add	r7, sp, #0
  return uwTick;
 8014110:	4b03      	ldr	r3, [pc, #12]	@ (8014120 <HAL_GetTick+0x14>)
 8014112:	681b      	ldr	r3, [r3, #0]
}
 8014114:	4618      	mov	r0, r3
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop
 8014120:	20001180 	.word	0x20001180

08014124 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8014124:	b480      	push	{r7}
 8014126:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8014128:	4b03      	ldr	r3, [pc, #12]	@ (8014138 <HAL_GetTickPrio+0x14>)
 801412a:	681b      	ldr	r3, [r3, #0]
}
 801412c:	4618      	mov	r0, r3
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr
 8014136:	bf00      	nop
 8014138:	20000070 	.word	0x20000070

0801413c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014144:	f7ff ffe2 	bl	801410c <HAL_GetTick>
 8014148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014154:	d005      	beq.n	8014162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014156:	4b0a      	ldr	r3, [pc, #40]	@ (8014180 <HAL_Delay+0x44>)
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	461a      	mov	r2, r3
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	4413      	add	r3, r2
 8014160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8014162:	bf00      	nop
 8014164:	f7ff ffd2 	bl	801410c <HAL_GetTick>
 8014168:	4602      	mov	r2, r0
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	1ad3      	subs	r3, r2, r3
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	429a      	cmp	r2, r3
 8014172:	d8f7      	bhi.n	8014164 <HAL_Delay+0x28>
  {
  }
}
 8014174:	bf00      	nop
 8014176:	bf00      	nop
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	20000074 	.word	0x20000074

08014184 <__NVIC_SetPriorityGrouping>:
{
 8014184:	b480      	push	{r7}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f003 0307 	and.w	r3, r3, #7
 8014192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014194:	4b0c      	ldr	r3, [pc, #48]	@ (80141c8 <__NVIC_SetPriorityGrouping+0x44>)
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80141a0:	4013      	ands	r3, r2
 80141a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80141ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80141b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80141b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80141b6:	4a04      	ldr	r2, [pc, #16]	@ (80141c8 <__NVIC_SetPriorityGrouping+0x44>)
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	60d3      	str	r3, [r2, #12]
}
 80141bc:	bf00      	nop
 80141be:	3714      	adds	r7, #20
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	e000ed00 	.word	0xe000ed00

080141cc <__NVIC_GetPriorityGrouping>:
{
 80141cc:	b480      	push	{r7}
 80141ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80141d0:	4b04      	ldr	r3, [pc, #16]	@ (80141e4 <__NVIC_GetPriorityGrouping+0x18>)
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	0a1b      	lsrs	r3, r3, #8
 80141d6:	f003 0307 	and.w	r3, r3, #7
}
 80141da:	4618      	mov	r0, r3
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr
 80141e4:	e000ed00 	.word	0xe000ed00

080141e8 <__NVIC_EnableIRQ>:
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	4603      	mov	r3, r0
 80141f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80141f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	db0b      	blt.n	8014212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141fa:	79fb      	ldrb	r3, [r7, #7]
 80141fc:	f003 021f 	and.w	r2, r3, #31
 8014200:	4907      	ldr	r1, [pc, #28]	@ (8014220 <__NVIC_EnableIRQ+0x38>)
 8014202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014206:	095b      	lsrs	r3, r3, #5
 8014208:	2001      	movs	r0, #1
 801420a:	fa00 f202 	lsl.w	r2, r0, r2
 801420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014212:	bf00      	nop
 8014214:	370c      	adds	r7, #12
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr
 801421e:	bf00      	nop
 8014220:	e000e100 	.word	0xe000e100

08014224 <__NVIC_SetPriority>:
{
 8014224:	b480      	push	{r7}
 8014226:	b083      	sub	sp, #12
 8014228:	af00      	add	r7, sp, #0
 801422a:	4603      	mov	r3, r0
 801422c:	6039      	str	r1, [r7, #0]
 801422e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014234:	2b00      	cmp	r3, #0
 8014236:	db0a      	blt.n	801424e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	b2da      	uxtb	r2, r3
 801423c:	490c      	ldr	r1, [pc, #48]	@ (8014270 <__NVIC_SetPriority+0x4c>)
 801423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014242:	0112      	lsls	r2, r2, #4
 8014244:	b2d2      	uxtb	r2, r2
 8014246:	440b      	add	r3, r1
 8014248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801424c:	e00a      	b.n	8014264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	b2da      	uxtb	r2, r3
 8014252:	4908      	ldr	r1, [pc, #32]	@ (8014274 <__NVIC_SetPriority+0x50>)
 8014254:	79fb      	ldrb	r3, [r7, #7]
 8014256:	f003 030f 	and.w	r3, r3, #15
 801425a:	3b04      	subs	r3, #4
 801425c:	0112      	lsls	r2, r2, #4
 801425e:	b2d2      	uxtb	r2, r2
 8014260:	440b      	add	r3, r1
 8014262:	761a      	strb	r2, [r3, #24]
}
 8014264:	bf00      	nop
 8014266:	370c      	adds	r7, #12
 8014268:	46bd      	mov	sp, r7
 801426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426e:	4770      	bx	lr
 8014270:	e000e100 	.word	0xe000e100
 8014274:	e000ed00 	.word	0xe000ed00

08014278 <NVIC_EncodePriority>:
{
 8014278:	b480      	push	{r7}
 801427a:	b089      	sub	sp, #36	@ 0x24
 801427c:	af00      	add	r7, sp, #0
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f003 0307 	and.w	r3, r3, #7
 801428a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801428c:	69fb      	ldr	r3, [r7, #28]
 801428e:	f1c3 0307 	rsb	r3, r3, #7
 8014292:	2b04      	cmp	r3, #4
 8014294:	bf28      	it	cs
 8014296:	2304      	movcs	r3, #4
 8014298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	3304      	adds	r3, #4
 801429e:	2b06      	cmp	r3, #6
 80142a0:	d902      	bls.n	80142a8 <NVIC_EncodePriority+0x30>
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	3b03      	subs	r3, #3
 80142a6:	e000      	b.n	80142aa <NVIC_EncodePriority+0x32>
 80142a8:	2300      	movs	r3, #0
 80142aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80142ac:	f04f 32ff 	mov.w	r2, #4294967295
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	fa02 f303 	lsl.w	r3, r2, r3
 80142b6:	43da      	mvns	r2, r3
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	401a      	ands	r2, r3
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80142c0:	f04f 31ff 	mov.w	r1, #4294967295
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	fa01 f303 	lsl.w	r3, r1, r3
 80142ca:	43d9      	mvns	r1, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80142d0:	4313      	orrs	r3, r2
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3724      	adds	r7, #36	@ 0x24
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr

080142de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b082      	sub	sp, #8
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff ff4c 	bl	8014184 <__NVIC_SetPriorityGrouping>
}
 80142ec:	bf00      	nop
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b086      	sub	sp, #24
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	4603      	mov	r3, r0
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
 8014300:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8014302:	f7ff ff63 	bl	80141cc <__NVIC_GetPriorityGrouping>
 8014306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	68b9      	ldr	r1, [r7, #8]
 801430c:	6978      	ldr	r0, [r7, #20]
 801430e:	f7ff ffb3 	bl	8014278 <NVIC_EncodePriority>
 8014312:	4602      	mov	r2, r0
 8014314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014318:	4611      	mov	r1, r2
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff ff82 	bl	8014224 <__NVIC_SetPriority>
}
 8014320:	bf00      	nop
 8014322:	3718      	adds	r7, #24
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	4603      	mov	r3, r0
 8014330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014336:	4618      	mov	r0, r3
 8014338:	f7ff ff56 	bl	80141e8 <__NVIC_EnableIRQ>
}
 801433c:	bf00      	nop
 801433e:	3708      	adds	r7, #8
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801434e:	2300      	movs	r3, #0
 8014350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014352:	e14c      	b.n	80145ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	2101      	movs	r1, #1
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	fa01 f303 	lsl.w	r3, r1, r3
 8014360:	4013      	ands	r3, r2
 8014362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2b00      	cmp	r3, #0
 8014368:	f000 813e 	beq.w	80145e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	f003 0303 	and.w	r3, r3, #3
 8014374:	2b01      	cmp	r3, #1
 8014376:	d005      	beq.n	8014384 <HAL_GPIO_Init+0x40>
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	f003 0303 	and.w	r3, r3, #3
 8014380:	2b02      	cmp	r3, #2
 8014382:	d130      	bne.n	80143e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	689b      	ldr	r3, [r3, #8]
 8014388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	2203      	movs	r2, #3
 8014390:	fa02 f303 	lsl.w	r3, r2, r3
 8014394:	43db      	mvns	r3, r3
 8014396:	693a      	ldr	r2, [r7, #16]
 8014398:	4013      	ands	r3, r2
 801439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	68da      	ldr	r2, [r3, #12]
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	fa02 f303 	lsl.w	r3, r2, r3
 80143a8:	693a      	ldr	r2, [r7, #16]
 80143aa:	4313      	orrs	r3, r2
 80143ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	693a      	ldr	r2, [r7, #16]
 80143b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80143ba:	2201      	movs	r2, #1
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	fa02 f303 	lsl.w	r3, r2, r3
 80143c2:	43db      	mvns	r3, r3
 80143c4:	693a      	ldr	r2, [r7, #16]
 80143c6:	4013      	ands	r3, r2
 80143c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	091b      	lsrs	r3, r3, #4
 80143d0:	f003 0201 	and.w	r2, r3, #1
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	fa02 f303 	lsl.w	r3, r2, r3
 80143da:	693a      	ldr	r2, [r7, #16]
 80143dc:	4313      	orrs	r3, r2
 80143de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	693a      	ldr	r2, [r7, #16]
 80143e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	f003 0303 	and.w	r3, r3, #3
 80143ee:	2b03      	cmp	r3, #3
 80143f0:	d017      	beq.n	8014422 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	2203      	movs	r2, #3
 80143fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014402:	43db      	mvns	r3, r3
 8014404:	693a      	ldr	r2, [r7, #16]
 8014406:	4013      	ands	r3, r2
 8014408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	689a      	ldr	r2, [r3, #8]
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	005b      	lsls	r3, r3, #1
 8014412:	fa02 f303 	lsl.w	r3, r2, r3
 8014416:	693a      	ldr	r2, [r7, #16]
 8014418:	4313      	orrs	r3, r2
 801441a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	693a      	ldr	r2, [r7, #16]
 8014420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	f003 0303 	and.w	r3, r3, #3
 801442a:	2b02      	cmp	r3, #2
 801442c:	d123      	bne.n	8014476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	08da      	lsrs	r2, r3, #3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	3208      	adds	r2, #8
 8014436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	f003 0307 	and.w	r3, r3, #7
 8014442:	009b      	lsls	r3, r3, #2
 8014444:	220f      	movs	r2, #15
 8014446:	fa02 f303 	lsl.w	r3, r2, r3
 801444a:	43db      	mvns	r3, r3
 801444c:	693a      	ldr	r2, [r7, #16]
 801444e:	4013      	ands	r3, r2
 8014450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	691a      	ldr	r2, [r3, #16]
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	f003 0307 	and.w	r3, r3, #7
 801445c:	009b      	lsls	r3, r3, #2
 801445e:	fa02 f303 	lsl.w	r3, r2, r3
 8014462:	693a      	ldr	r2, [r7, #16]
 8014464:	4313      	orrs	r3, r2
 8014466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	08da      	lsrs	r2, r3, #3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	3208      	adds	r2, #8
 8014470:	6939      	ldr	r1, [r7, #16]
 8014472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	005b      	lsls	r3, r3, #1
 8014480:	2203      	movs	r2, #3
 8014482:	fa02 f303 	lsl.w	r3, r2, r3
 8014486:	43db      	mvns	r3, r3
 8014488:	693a      	ldr	r2, [r7, #16]
 801448a:	4013      	ands	r3, r2
 801448c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	f003 0203 	and.w	r2, r3, #3
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	fa02 f303 	lsl.w	r3, r2, r3
 801449e:	693a      	ldr	r2, [r7, #16]
 80144a0:	4313      	orrs	r3, r2
 80144a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	693a      	ldr	r2, [r7, #16]
 80144a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 8098 	beq.w	80145e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80144b8:	4a54      	ldr	r2, [pc, #336]	@ (801460c <HAL_GPIO_Init+0x2c8>)
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	089b      	lsrs	r3, r3, #2
 80144be:	3302      	adds	r3, #2
 80144c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	f003 0303 	and.w	r3, r3, #3
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	220f      	movs	r2, #15
 80144d0:	fa02 f303 	lsl.w	r3, r2, r3
 80144d4:	43db      	mvns	r3, r3
 80144d6:	693a      	ldr	r2, [r7, #16]
 80144d8:	4013      	ands	r3, r2
 80144da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80144e2:	d019      	beq.n	8014518 <HAL_GPIO_Init+0x1d4>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	4a4a      	ldr	r2, [pc, #296]	@ (8014610 <HAL_GPIO_Init+0x2cc>)
 80144e8:	4293      	cmp	r3, r2
 80144ea:	d013      	beq.n	8014514 <HAL_GPIO_Init+0x1d0>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	4a49      	ldr	r2, [pc, #292]	@ (8014614 <HAL_GPIO_Init+0x2d0>)
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d00d      	beq.n	8014510 <HAL_GPIO_Init+0x1cc>
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	4a48      	ldr	r2, [pc, #288]	@ (8014618 <HAL_GPIO_Init+0x2d4>)
 80144f8:	4293      	cmp	r3, r2
 80144fa:	d007      	beq.n	801450c <HAL_GPIO_Init+0x1c8>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	4a47      	ldr	r2, [pc, #284]	@ (801461c <HAL_GPIO_Init+0x2d8>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d101      	bne.n	8014508 <HAL_GPIO_Init+0x1c4>
 8014504:	2304      	movs	r3, #4
 8014506:	e008      	b.n	801451a <HAL_GPIO_Init+0x1d6>
 8014508:	2307      	movs	r3, #7
 801450a:	e006      	b.n	801451a <HAL_GPIO_Init+0x1d6>
 801450c:	2303      	movs	r3, #3
 801450e:	e004      	b.n	801451a <HAL_GPIO_Init+0x1d6>
 8014510:	2302      	movs	r3, #2
 8014512:	e002      	b.n	801451a <HAL_GPIO_Init+0x1d6>
 8014514:	2301      	movs	r3, #1
 8014516:	e000      	b.n	801451a <HAL_GPIO_Init+0x1d6>
 8014518:	2300      	movs	r3, #0
 801451a:	697a      	ldr	r2, [r7, #20]
 801451c:	f002 0203 	and.w	r2, r2, #3
 8014520:	0092      	lsls	r2, r2, #2
 8014522:	4093      	lsls	r3, r2
 8014524:	693a      	ldr	r2, [r7, #16]
 8014526:	4313      	orrs	r3, r2
 8014528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801452a:	4938      	ldr	r1, [pc, #224]	@ (801460c <HAL_GPIO_Init+0x2c8>)
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	089b      	lsrs	r3, r3, #2
 8014530:	3302      	adds	r3, #2
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8014538:	4b39      	ldr	r3, [pc, #228]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	43db      	mvns	r3, r3
 8014542:	693a      	ldr	r2, [r7, #16]
 8014544:	4013      	ands	r3, r2
 8014546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014550:	2b00      	cmp	r3, #0
 8014552:	d003      	beq.n	801455c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8014554:	693a      	ldr	r2, [r7, #16]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	4313      	orrs	r3, r2
 801455a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801455c:	4a30      	ldr	r2, [pc, #192]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8014562:	4b2f      	ldr	r3, [pc, #188]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	43db      	mvns	r3, r3
 801456c:	693a      	ldr	r2, [r7, #16]
 801456e:	4013      	ands	r3, r2
 8014570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801457a:	2b00      	cmp	r3, #0
 801457c:	d003      	beq.n	8014586 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801457e:	693a      	ldr	r2, [r7, #16]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4313      	orrs	r3, r2
 8014584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8014586:	4a26      	ldr	r2, [pc, #152]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801458c:	4b24      	ldr	r3, [pc, #144]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 801458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	43db      	mvns	r3, r3
 8014598:	693a      	ldr	r2, [r7, #16]
 801459a:	4013      	ands	r3, r2
 801459c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d003      	beq.n	80145b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80145aa:	693a      	ldr	r2, [r7, #16]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	4313      	orrs	r3, r2
 80145b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80145b2:	4a1b      	ldr	r2, [pc, #108]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80145ba:	4b19      	ldr	r3, [pc, #100]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 80145bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	43db      	mvns	r3, r3
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	4013      	ands	r3, r2
 80145ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d003      	beq.n	80145e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80145d8:	693a      	ldr	r2, [r7, #16]
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	4313      	orrs	r3, r2
 80145de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80145e0:	4a0f      	ldr	r2, [pc, #60]	@ (8014620 <HAL_GPIO_Init+0x2dc>)
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	3301      	adds	r3, #1
 80145ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	fa22 f303 	lsr.w	r3, r2, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f47f aeab 	bne.w	8014354 <HAL_GPIO_Init+0x10>
  }
}
 80145fe:	bf00      	nop
 8014600:	bf00      	nop
 8014602:	371c      	adds	r7, #28
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr
 801460c:	40010000 	.word	0x40010000
 8014610:	48000400 	.word	0x48000400
 8014614:	48000800 	.word	0x48000800
 8014618:	48000c00 	.word	0x48000c00
 801461c:	48001000 	.word	0x48001000
 8014620:	58000800 	.word	0x58000800

08014624 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014624:	b480      	push	{r7}
 8014626:	b087      	sub	sp, #28
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801462e:	2300      	movs	r3, #0
 8014630:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8014632:	e0bb      	b.n	80147ac <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8014634:	2201      	movs	r2, #1
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	fa02 f303 	lsl.w	r3, r2, r3
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	4013      	ands	r3, r2
 8014640:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 80ae 	beq.w	80147a6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801464a:	4a5f      	ldr	r2, [pc, #380]	@ (80147c8 <HAL_GPIO_DeInit+0x1a4>)
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	089b      	lsrs	r3, r3, #2
 8014650:	3302      	adds	r3, #2
 8014652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014656:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	f003 0303 	and.w	r3, r3, #3
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	220f      	movs	r2, #15
 8014662:	fa02 f303 	lsl.w	r3, r2, r3
 8014666:	68fa      	ldr	r2, [r7, #12]
 8014668:	4013      	ands	r3, r2
 801466a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8014672:	d019      	beq.n	80146a8 <HAL_GPIO_DeInit+0x84>
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	4a55      	ldr	r2, [pc, #340]	@ (80147cc <HAL_GPIO_DeInit+0x1a8>)
 8014678:	4293      	cmp	r3, r2
 801467a:	d013      	beq.n	80146a4 <HAL_GPIO_DeInit+0x80>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4a54      	ldr	r2, [pc, #336]	@ (80147d0 <HAL_GPIO_DeInit+0x1ac>)
 8014680:	4293      	cmp	r3, r2
 8014682:	d00d      	beq.n	80146a0 <HAL_GPIO_DeInit+0x7c>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	4a53      	ldr	r2, [pc, #332]	@ (80147d4 <HAL_GPIO_DeInit+0x1b0>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d007      	beq.n	801469c <HAL_GPIO_DeInit+0x78>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	4a52      	ldr	r2, [pc, #328]	@ (80147d8 <HAL_GPIO_DeInit+0x1b4>)
 8014690:	4293      	cmp	r3, r2
 8014692:	d101      	bne.n	8014698 <HAL_GPIO_DeInit+0x74>
 8014694:	2304      	movs	r3, #4
 8014696:	e008      	b.n	80146aa <HAL_GPIO_DeInit+0x86>
 8014698:	2307      	movs	r3, #7
 801469a:	e006      	b.n	80146aa <HAL_GPIO_DeInit+0x86>
 801469c:	2303      	movs	r3, #3
 801469e:	e004      	b.n	80146aa <HAL_GPIO_DeInit+0x86>
 80146a0:	2302      	movs	r3, #2
 80146a2:	e002      	b.n	80146aa <HAL_GPIO_DeInit+0x86>
 80146a4:	2301      	movs	r3, #1
 80146a6:	e000      	b.n	80146aa <HAL_GPIO_DeInit+0x86>
 80146a8:	2300      	movs	r3, #0
 80146aa:	697a      	ldr	r2, [r7, #20]
 80146ac:	f002 0203 	and.w	r2, r2, #3
 80146b0:	0092      	lsls	r2, r2, #2
 80146b2:	4093      	lsls	r3, r2
 80146b4:	68fa      	ldr	r2, [r7, #12]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d136      	bne.n	8014728 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80146ba:	4b48      	ldr	r3, [pc, #288]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	43db      	mvns	r3, r3
 80146c4:	4945      	ldr	r1, [pc, #276]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146c6:	4013      	ands	r3, r2
 80146c8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80146cc:	4b43      	ldr	r3, [pc, #268]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	43db      	mvns	r3, r3
 80146d6:	4941      	ldr	r1, [pc, #260]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146d8:	4013      	ands	r3, r2
 80146da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80146de:	4b3f      	ldr	r3, [pc, #252]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	43db      	mvns	r3, r3
 80146e6:	493d      	ldr	r1, [pc, #244]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146e8:	4013      	ands	r3, r2
 80146ea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80146ec:	4b3b      	ldr	r3, [pc, #236]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146ee:	685a      	ldr	r2, [r3, #4]
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	43db      	mvns	r3, r3
 80146f4:	4939      	ldr	r1, [pc, #228]	@ (80147dc <HAL_GPIO_DeInit+0x1b8>)
 80146f6:	4013      	ands	r3, r2
 80146f8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	f003 0303 	and.w	r3, r3, #3
 8014700:	009b      	lsls	r3, r3, #2
 8014702:	220f      	movs	r2, #15
 8014704:	fa02 f303 	lsl.w	r3, r2, r3
 8014708:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801470a:	4a2f      	ldr	r2, [pc, #188]	@ (80147c8 <HAL_GPIO_DeInit+0x1a4>)
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	089b      	lsrs	r3, r3, #2
 8014710:	3302      	adds	r3, #2
 8014712:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	43da      	mvns	r2, r3
 801471a:	482b      	ldr	r0, [pc, #172]	@ (80147c8 <HAL_GPIO_DeInit+0x1a4>)
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	089b      	lsrs	r3, r3, #2
 8014720:	400a      	ands	r2, r1
 8014722:	3302      	adds	r3, #2
 8014724:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681a      	ldr	r2, [r3, #0]
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	2103      	movs	r1, #3
 8014732:	fa01 f303 	lsl.w	r3, r1, r3
 8014736:	431a      	orrs	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	08da      	lsrs	r2, r3, #3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	3208      	adds	r2, #8
 8014744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	f003 0307 	and.w	r3, r3, #7
 801474e:	009b      	lsls	r3, r3, #2
 8014750:	220f      	movs	r2, #15
 8014752:	fa02 f303 	lsl.w	r3, r2, r3
 8014756:	43db      	mvns	r3, r3
 8014758:	697a      	ldr	r2, [r7, #20]
 801475a:	08d2      	lsrs	r2, r2, #3
 801475c:	4019      	ands	r1, r3
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	3208      	adds	r2, #8
 8014762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	68da      	ldr	r2, [r3, #12]
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	2103      	movs	r1, #3
 8014770:	fa01 f303 	lsl.w	r3, r1, r3
 8014774:	43db      	mvns	r3, r3
 8014776:	401a      	ands	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	685a      	ldr	r2, [r3, #4]
 8014780:	2101      	movs	r1, #1
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	fa01 f303 	lsl.w	r3, r1, r3
 8014788:	43db      	mvns	r3, r3
 801478a:	401a      	ands	r2, r3
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	689a      	ldr	r2, [r3, #8]
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	2103      	movs	r1, #3
 801479a:	fa01 f303 	lsl.w	r3, r1, r3
 801479e:	43db      	mvns	r3, r3
 80147a0:	401a      	ands	r2, r3
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	3301      	adds	r3, #1
 80147aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80147ac:	683a      	ldr	r2, [r7, #0]
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	fa22 f303 	lsr.w	r3, r2, r3
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f47f af3d 	bne.w	8014634 <HAL_GPIO_DeInit+0x10>
  }
}
 80147ba:	bf00      	nop
 80147bc:	bf00      	nop
 80147be:	371c      	adds	r7, #28
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr
 80147c8:	40010000 	.word	0x40010000
 80147cc:	48000400 	.word	0x48000400
 80147d0:	48000800 	.word	0x48000800
 80147d4:	48000c00 	.word	0x48000c00
 80147d8:	48001000 	.word	0x48001000
 80147dc:	58000800 	.word	0x58000800

080147e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	460b      	mov	r3, r1
 80147ea:	807b      	strh	r3, [r7, #2]
 80147ec:	4613      	mov	r3, r2
 80147ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80147f0:	787b      	ldrb	r3, [r7, #1]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d003      	beq.n	80147fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80147f6:	887a      	ldrh	r2, [r7, #2]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80147fc:	e002      	b.n	8014804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80147fe:	887a      	ldrh	r2, [r7, #2]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014804:	bf00      	nop
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	4603      	mov	r3, r0
 8014818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801481a:	4b08      	ldr	r3, [pc, #32]	@ (801483c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801481c:	68da      	ldr	r2, [r3, #12]
 801481e:	88fb      	ldrh	r3, [r7, #6]
 8014820:	4013      	ands	r3, r2
 8014822:	2b00      	cmp	r3, #0
 8014824:	d006      	beq.n	8014834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014826:	4a05      	ldr	r2, [pc, #20]	@ (801483c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014828:	88fb      	ldrh	r3, [r7, #6]
 801482a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801482c:	88fb      	ldrh	r3, [r7, #6]
 801482e:	4618      	mov	r0, r3
 8014830:	f000 f806 	bl	8014840 <HAL_GPIO_EXTI_Callback>
  }
}
 8014834:	bf00      	nop
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	58000800 	.word	0x58000800

08014840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
 8014846:	4603      	mov	r3, r0
 8014848:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801484a:	bf00      	nop
 801484c:	370c      	adds	r7, #12
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr

08014856 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014856:	b580      	push	{r7, lr}
 8014858:	b082      	sub	sp, #8
 801485a:	af00      	add	r7, sp, #0
 801485c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d101      	bne.n	8014868 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014864:	2301      	movs	r3, #1
 8014866:	e08d      	b.n	8014984 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b00      	cmp	r3, #0
 8014872:	d106      	bne.n	8014882 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2200      	movs	r2, #0
 8014878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 f8b4 	bl	80149ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2224      	movs	r2, #36	@ 0x24
 8014886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	f022 0201 	bic.w	r2, r2, #1
 8014898:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685a      	ldr	r2, [r3, #4]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80148a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	689a      	ldr	r2, [r3, #8]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80148b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d107      	bne.n	80148d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	689a      	ldr	r2, [r3, #8]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80148cc:	609a      	str	r2, [r3, #8]
 80148ce:	e006      	b.n	80148de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	689a      	ldr	r2, [r3, #8]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80148dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	2b02      	cmp	r3, #2
 80148e4:	d108      	bne.n	80148f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80148f4:	605a      	str	r2, [r3, #4]
 80148f6:	e007      	b.n	8014908 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	685a      	ldr	r2, [r3, #4]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014906:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	6812      	ldr	r2, [r2, #0]
 8014912:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801491a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	68da      	ldr	r2, [r3, #12]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801492a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	691a      	ldr	r2, [r3, #16]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	695b      	ldr	r3, [r3, #20]
 8014934:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	430a      	orrs	r2, r1
 8014944:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	69d9      	ldr	r1, [r3, #28]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6a1a      	ldr	r2, [r3, #32]
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	430a      	orrs	r2, r1
 8014954:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	681a      	ldr	r2, [r3, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f042 0201 	orr.w	r2, r2, #1
 8014964:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2200      	movs	r2, #0
 801496a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2220      	movs	r2, #32
 8014970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2200      	movs	r2, #0
 801497e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8014982:	2300      	movs	r3, #0
}
 8014984:	4618      	mov	r0, r3
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801499a:	2301      	movs	r3, #1
 801499c:	e021      	b.n	80149e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2224      	movs	r2, #36	@ 0x24
 80149a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f022 0201 	bic.w	r2, r2, #1
 80149b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 f821 	bl	80149fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2200      	movs	r2, #0
 80149c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80149f2:	bf00      	nop
 80149f4:	370c      	adds	r7, #12
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr

080149fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80149fe:	b480      	push	{r7}
 8014a00:	b083      	sub	sp, #12
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8014a06:	bf00      	nop
 8014a08:	370c      	adds	r7, #12
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr
	...

08014a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b088      	sub	sp, #32
 8014a18:	af02      	add	r7, sp, #8
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	607a      	str	r2, [r7, #4]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	460b      	mov	r3, r1
 8014a22:	817b      	strh	r3, [r7, #10]
 8014a24:	4613      	mov	r3, r2
 8014a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	2b20      	cmp	r3, #32
 8014a32:	f040 80fd 	bne.w	8014c30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d101      	bne.n	8014a44 <HAL_I2C_Master_Transmit+0x30>
 8014a40:	2302      	movs	r3, #2
 8014a42:	e0f6      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2201      	movs	r2, #1
 8014a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014a4c:	f7ff fb5e 	bl	801410c <HAL_GetTick>
 8014a50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	2319      	movs	r3, #25
 8014a58:	2201      	movs	r2, #1
 8014a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014a5e:	68f8      	ldr	r0, [r7, #12]
 8014a60:	f000 fcfa 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e0e1      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2221      	movs	r2, #33	@ 0x21
 8014a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2210      	movs	r2, #16
 8014a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2200      	movs	r2, #0
 8014a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	893a      	ldrh	r2, [r7, #8]
 8014a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2200      	movs	r2, #0
 8014a94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	2bff      	cmp	r3, #255	@ 0xff
 8014a9e:	d906      	bls.n	8014aae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	22ff      	movs	r2, #255	@ 0xff
 8014aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014aa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	e007      	b.n	8014abe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014abc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d024      	beq.n	8014b10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aca:	781a      	ldrb	r2, [r3, #0]
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ad6:	1c5a      	adds	r2, r3, #1
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	3b01      	subs	r3, #1
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014aee:	3b01      	subs	r3, #1
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	3301      	adds	r3, #1
 8014afe:	b2da      	uxtb	r2, r3
 8014b00:	8979      	ldrh	r1, [r7, #10]
 8014b02:	4b4e      	ldr	r3, [pc, #312]	@ (8014c3c <HAL_I2C_Master_Transmit+0x228>)
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f000 fef5 	bl	80158f8 <I2C_TransferConfig>
 8014b0e:	e066      	b.n	8014bde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b14:	b2da      	uxtb	r2, r3
 8014b16:	8979      	ldrh	r1, [r7, #10]
 8014b18:	4b48      	ldr	r3, [pc, #288]	@ (8014c3c <HAL_I2C_Master_Transmit+0x228>)
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f000 feea 	bl	80158f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8014b24:	e05b      	b.n	8014bde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014b26:	693a      	ldr	r2, [r7, #16]
 8014b28:	6a39      	ldr	r1, [r7, #32]
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f000 fced 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8014b36:	2301      	movs	r3, #1
 8014b38:	e07b      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b3e:	781a      	ldrb	r2, [r3, #0]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b4a:	1c5a      	adds	r2, r3, #1
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	3b01      	subs	r3, #1
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b62:	3b01      	subs	r3, #1
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d034      	beq.n	8014bde <HAL_I2C_Master_Transmit+0x1ca>
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d130      	bne.n	8014bde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	9300      	str	r3, [sp, #0]
 8014b80:	6a3b      	ldr	r3, [r7, #32]
 8014b82:	2200      	movs	r2, #0
 8014b84:	2180      	movs	r1, #128	@ 0x80
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f000 fc66 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d001      	beq.n	8014b96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8014b92:	2301      	movs	r3, #1
 8014b94:	e04d      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	2bff      	cmp	r3, #255	@ 0xff
 8014b9e:	d90e      	bls.n	8014bbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	22ff      	movs	r2, #255	@ 0xff
 8014ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	8979      	ldrh	r1, [r7, #10]
 8014bae:	2300      	movs	r3, #0
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f000 fe9e 	bl	80158f8 <I2C_TransferConfig>
 8014bbc:	e00f      	b.n	8014bde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bcc:	b2da      	uxtb	r2, r3
 8014bce:	8979      	ldrh	r1, [r7, #10]
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f000 fe8d 	bl	80158f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d19e      	bne.n	8014b26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014be8:	693a      	ldr	r2, [r7, #16]
 8014bea:	6a39      	ldr	r1, [r7, #32]
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f000 fcd3 	bl	8015598 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d001      	beq.n	8014bfc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	e01a      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2220      	movs	r2, #32
 8014c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	6859      	ldr	r1, [r3, #4]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8014c40 <HAL_I2C_Master_Transmit+0x22c>)
 8014c10:	400b      	ands	r3, r1
 8014c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2220      	movs	r2, #32
 8014c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	e000      	b.n	8014c32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8014c30:	2302      	movs	r3, #2
  }
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3718      	adds	r7, #24
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	80002000 	.word	0x80002000
 8014c40:	fe00e800 	.word	0xfe00e800

08014c44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b088      	sub	sp, #32
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	607a      	str	r2, [r7, #4]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	460b      	mov	r3, r1
 8014c52:	817b      	strh	r3, [r7, #10]
 8014c54:	4613      	mov	r3, r2
 8014c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014c5e:	b2db      	uxtb	r3, r3
 8014c60:	2b20      	cmp	r3, #32
 8014c62:	f040 80db 	bne.w	8014e1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d101      	bne.n	8014c74 <HAL_I2C_Master_Receive+0x30>
 8014c70:	2302      	movs	r3, #2
 8014c72:	e0d4      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2201      	movs	r2, #1
 8014c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014c7c:	f7ff fa46 	bl	801410c <HAL_GetTick>
 8014c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	9300      	str	r3, [sp, #0]
 8014c86:	2319      	movs	r3, #25
 8014c88:	2201      	movs	r2, #1
 8014c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	f000 fbe2 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	e0bf      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2222      	movs	r2, #34	@ 0x22
 8014ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2210      	movs	r2, #16
 8014caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	687a      	ldr	r2, [r7, #4]
 8014cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	893a      	ldrh	r2, [r7, #8]
 8014cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	2bff      	cmp	r3, #255	@ 0xff
 8014cce:	d90e      	bls.n	8014cee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	22ff      	movs	r2, #255	@ 0xff
 8014cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cda:	b2da      	uxtb	r2, r3
 8014cdc:	8979      	ldrh	r1, [r7, #10]
 8014cde:	4b52      	ldr	r3, [pc, #328]	@ (8014e28 <HAL_I2C_Master_Receive+0x1e4>)
 8014ce0:	9300      	str	r3, [sp, #0]
 8014ce2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f000 fe06 	bl	80158f8 <I2C_TransferConfig>
 8014cec:	e06d      	b.n	8014dca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	8979      	ldrh	r1, [r7, #10]
 8014d00:	4b49      	ldr	r3, [pc, #292]	@ (8014e28 <HAL_I2C_Master_Receive+0x1e4>)
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014d08:	68f8      	ldr	r0, [r7, #12]
 8014d0a:	f000 fdf5 	bl	80158f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8014d0e:	e05c      	b.n	8014dca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014d10:	697a      	ldr	r2, [r7, #20]
 8014d12:	6a39      	ldr	r1, [r7, #32]
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f000 fc83 	bl	8015620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d001      	beq.n	8014d24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8014d20:	2301      	movs	r3, #1
 8014d22:	e07c      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d36:	1c5a      	adds	r2, r3, #1
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d40:	3b01      	subs	r3, #1
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d034      	beq.n	8014dca <HAL_I2C_Master_Receive+0x186>
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d130      	bne.n	8014dca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	6a3b      	ldr	r3, [r7, #32]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	2180      	movs	r1, #128	@ 0x80
 8014d72:	68f8      	ldr	r0, [r7, #12]
 8014d74:	f000 fb70 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d001      	beq.n	8014d82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e04d      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	2bff      	cmp	r3, #255	@ 0xff
 8014d8a:	d90e      	bls.n	8014daa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	22ff      	movs	r2, #255	@ 0xff
 8014d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d96:	b2da      	uxtb	r2, r3
 8014d98:	8979      	ldrh	r1, [r7, #10]
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	9300      	str	r3, [sp, #0]
 8014d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f000 fda8 	bl	80158f8 <I2C_TransferConfig>
 8014da8:	e00f      	b.n	8014dca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014db8:	b2da      	uxtb	r2, r3
 8014dba:	8979      	ldrh	r1, [r7, #10]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	9300      	str	r3, [sp, #0]
 8014dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f000 fd97 	bl	80158f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d19d      	bne.n	8014d10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014dd4:	697a      	ldr	r2, [r7, #20]
 8014dd6:	6a39      	ldr	r1, [r7, #32]
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f000 fbdd 	bl	8015598 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014dde:	4603      	mov	r3, r0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d001      	beq.n	8014de8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8014de4:	2301      	movs	r3, #1
 8014de6:	e01a      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	2220      	movs	r2, #32
 8014dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	6859      	ldr	r1, [r3, #4]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8014e2c <HAL_I2C_Master_Receive+0x1e8>)
 8014dfc:	400b      	ands	r3, r1
 8014dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2220      	movs	r2, #32
 8014e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2200      	movs	r2, #0
 8014e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	e000      	b.n	8014e1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8014e1c:	2302      	movs	r3, #2
  }
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3718      	adds	r7, #24
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	80002400 	.word	0x80002400
 8014e2c:	fe00e800 	.word	0xfe00e800

08014e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b088      	sub	sp, #32
 8014e34:	af02      	add	r7, sp, #8
 8014e36:	60f8      	str	r0, [r7, #12]
 8014e38:	4608      	mov	r0, r1
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	4603      	mov	r3, r0
 8014e40:	817b      	strh	r3, [r7, #10]
 8014e42:	460b      	mov	r3, r1
 8014e44:	813b      	strh	r3, [r7, #8]
 8014e46:	4613      	mov	r3, r2
 8014e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	2b20      	cmp	r3, #32
 8014e54:	f040 80f9 	bne.w	801504a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014e58:	6a3b      	ldr	r3, [r7, #32]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d002      	beq.n	8014e64 <HAL_I2C_Mem_Write+0x34>
 8014e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d105      	bne.n	8014e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	e0ed      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d101      	bne.n	8014e7e <HAL_I2C_Mem_Write+0x4e>
 8014e7a:	2302      	movs	r3, #2
 8014e7c:	e0e6      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2201      	movs	r2, #1
 8014e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014e86:	f7ff f941 	bl	801410c <HAL_GetTick>
 8014e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	2319      	movs	r3, #25
 8014e92:	2201      	movs	r2, #1
 8014e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f000 fadd 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	e0d1      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	2221      	movs	r2, #33	@ 0x21
 8014eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2240      	movs	r2, #64	@ 0x40
 8014eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	6a3a      	ldr	r2, [r7, #32]
 8014ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014ed0:	88f8      	ldrh	r0, [r7, #6]
 8014ed2:	893a      	ldrh	r2, [r7, #8]
 8014ed4:	8979      	ldrh	r1, [r7, #10]
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	9301      	str	r3, [sp, #4]
 8014eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014edc:	9300      	str	r3, [sp, #0]
 8014ede:	4603      	mov	r3, r0
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f000 f9ed 	bl	80152c0 <I2C_RequestMemoryWrite>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d005      	beq.n	8014ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e0a9      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	2bff      	cmp	r3, #255	@ 0xff
 8014f00:	d90e      	bls.n	8014f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	22ff      	movs	r2, #255	@ 0xff
 8014f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f0c:	b2da      	uxtb	r2, r3
 8014f0e:	8979      	ldrh	r1, [r7, #10]
 8014f10:	2300      	movs	r3, #0
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014f18:	68f8      	ldr	r0, [r7, #12]
 8014f1a:	f000 fced 	bl	80158f8 <I2C_TransferConfig>
 8014f1e:	e00f      	b.n	8014f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f24:	b29a      	uxth	r2, r3
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f2e:	b2da      	uxtb	r2, r3
 8014f30:	8979      	ldrh	r1, [r7, #10]
 8014f32:	2300      	movs	r3, #0
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f000 fcdc 	bl	80158f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014f40:	697a      	ldr	r2, [r7, #20]
 8014f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f000 fae0 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d001      	beq.n	8014f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8014f50:	2301      	movs	r3, #1
 8014f52:	e07b      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f58:	781a      	ldrb	r2, [r3, #0]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f64:	1c5a      	adds	r2, r3, #1
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	3b01      	subs	r3, #1
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f7c:	3b01      	subs	r3, #1
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d034      	beq.n	8014ff8 <HAL_I2C_Mem_Write+0x1c8>
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d130      	bne.n	8014ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	2180      	movs	r1, #128	@ 0x80
 8014fa0:	68f8      	ldr	r0, [r7, #12]
 8014fa2:	f000 fa59 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d001      	beq.n	8014fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8014fac:	2301      	movs	r3, #1
 8014fae:	e04d      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	2bff      	cmp	r3, #255	@ 0xff
 8014fb8:	d90e      	bls.n	8014fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	22ff      	movs	r2, #255	@ 0xff
 8014fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014fc4:	b2da      	uxtb	r2, r3
 8014fc6:	8979      	ldrh	r1, [r7, #10]
 8014fc8:	2300      	movs	r3, #0
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014fd0:	68f8      	ldr	r0, [r7, #12]
 8014fd2:	f000 fc91 	bl	80158f8 <I2C_TransferConfig>
 8014fd6:	e00f      	b.n	8014ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014fdc:	b29a      	uxth	r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014fe6:	b2da      	uxtb	r2, r3
 8014fe8:	8979      	ldrh	r1, [r7, #10]
 8014fea:	2300      	movs	r3, #0
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014ff2:	68f8      	ldr	r0, [r7, #12]
 8014ff4:	f000 fc80 	bl	80158f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d19e      	bne.n	8014f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015002:	697a      	ldr	r2, [r7, #20]
 8015004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015006:	68f8      	ldr	r0, [r7, #12]
 8015008:	f000 fac6 	bl	8015598 <I2C_WaitOnSTOPFlagUntilTimeout>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d001      	beq.n	8015016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8015012:	2301      	movs	r3, #1
 8015014:	e01a      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2220      	movs	r2, #32
 801501c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	6859      	ldr	r1, [r3, #4]
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	4b0a      	ldr	r3, [pc, #40]	@ (8015054 <HAL_I2C_Mem_Write+0x224>)
 801502a:	400b      	ands	r3, r1
 801502c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	2220      	movs	r2, #32
 8015032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2200      	movs	r2, #0
 801503a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	2200      	movs	r2, #0
 8015042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8015046:	2300      	movs	r3, #0
 8015048:	e000      	b.n	801504c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801504a:	2302      	movs	r3, #2
  }
}
 801504c:	4618      	mov	r0, r3
 801504e:	3718      	adds	r7, #24
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	fe00e800 	.word	0xfe00e800

08015058 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b088      	sub	sp, #32
 801505c:	af02      	add	r7, sp, #8
 801505e:	60f8      	str	r0, [r7, #12]
 8015060:	4608      	mov	r0, r1
 8015062:	4611      	mov	r1, r2
 8015064:	461a      	mov	r2, r3
 8015066:	4603      	mov	r3, r0
 8015068:	817b      	strh	r3, [r7, #10]
 801506a:	460b      	mov	r3, r1
 801506c:	813b      	strh	r3, [r7, #8]
 801506e:	4613      	mov	r3, r2
 8015070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015078:	b2db      	uxtb	r3, r3
 801507a:	2b20      	cmp	r3, #32
 801507c:	f040 80fd 	bne.w	801527a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8015080:	6a3b      	ldr	r3, [r7, #32]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d002      	beq.n	801508c <HAL_I2C_Mem_Read+0x34>
 8015086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015088:	2b00      	cmp	r3, #0
 801508a:	d105      	bne.n	8015098 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015092:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015094:	2301      	movs	r3, #1
 8015096:	e0f1      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d101      	bne.n	80150a6 <HAL_I2C_Mem_Read+0x4e>
 80150a2:	2302      	movs	r3, #2
 80150a4:	e0ea      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2201      	movs	r2, #1
 80150aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80150ae:	f7ff f82d 	bl	801410c <HAL_GetTick>
 80150b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	9300      	str	r3, [sp, #0]
 80150b8:	2319      	movs	r3, #25
 80150ba:	2201      	movs	r2, #1
 80150bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f000 f9c9 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d001      	beq.n	80150d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80150cc:	2301      	movs	r3, #1
 80150ce:	e0d5      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2222      	movs	r2, #34	@ 0x22
 80150d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2240      	movs	r2, #64	@ 0x40
 80150dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2200      	movs	r2, #0
 80150e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6a3a      	ldr	r2, [r7, #32]
 80150ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80150f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2200      	movs	r2, #0
 80150f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80150f8:	88f8      	ldrh	r0, [r7, #6]
 80150fa:	893a      	ldrh	r2, [r7, #8]
 80150fc:	8979      	ldrh	r1, [r7, #10]
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	9301      	str	r3, [sp, #4]
 8015102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	4603      	mov	r3, r0
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f000 f92d 	bl	8015368 <I2C_RequestMemoryRead>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d005      	beq.n	8015120 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2200      	movs	r2, #0
 8015118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 801511c:	2301      	movs	r3, #1
 801511e:	e0ad      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015124:	b29b      	uxth	r3, r3
 8015126:	2bff      	cmp	r3, #255	@ 0xff
 8015128:	d90e      	bls.n	8015148 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	22ff      	movs	r2, #255	@ 0xff
 801512e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015134:	b2da      	uxtb	r2, r3
 8015136:	8979      	ldrh	r1, [r7, #10]
 8015138:	4b52      	ldr	r3, [pc, #328]	@ (8015284 <HAL_I2C_Mem_Read+0x22c>)
 801513a:	9300      	str	r3, [sp, #0]
 801513c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8015140:	68f8      	ldr	r0, [r7, #12]
 8015142:	f000 fbd9 	bl	80158f8 <I2C_TransferConfig>
 8015146:	e00f      	b.n	8015168 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801514c:	b29a      	uxth	r2, r3
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015156:	b2da      	uxtb	r2, r3
 8015158:	8979      	ldrh	r1, [r7, #10]
 801515a:	4b4a      	ldr	r3, [pc, #296]	@ (8015284 <HAL_I2C_Mem_Read+0x22c>)
 801515c:	9300      	str	r3, [sp, #0]
 801515e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f000 fbc8 	bl	80158f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516e:	2200      	movs	r2, #0
 8015170:	2104      	movs	r1, #4
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f000 f970 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d001      	beq.n	8015182 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801517e:	2301      	movs	r3, #1
 8015180:	e07c      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801518c:	b2d2      	uxtb	r2, r2
 801518e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015194:	1c5a      	adds	r2, r3, #1
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801519e:	3b01      	subs	r3, #1
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	3b01      	subs	r3, #1
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d034      	beq.n	8015228 <HAL_I2C_Mem_Read+0x1d0>
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d130      	bne.n	8015228 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	9300      	str	r3, [sp, #0]
 80151ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151cc:	2200      	movs	r2, #0
 80151ce:	2180      	movs	r1, #128	@ 0x80
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f000 f941 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 80151d6:	4603      	mov	r3, r0
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d001      	beq.n	80151e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80151dc:	2301      	movs	r3, #1
 80151de:	e04d      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	2bff      	cmp	r3, #255	@ 0xff
 80151e8:	d90e      	bls.n	8015208 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	22ff      	movs	r2, #255	@ 0xff
 80151ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151f4:	b2da      	uxtb	r2, r3
 80151f6:	8979      	ldrh	r1, [r7, #10]
 80151f8:	2300      	movs	r3, #0
 80151fa:	9300      	str	r3, [sp, #0]
 80151fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8015200:	68f8      	ldr	r0, [r7, #12]
 8015202:	f000 fb79 	bl	80158f8 <I2C_TransferConfig>
 8015206:	e00f      	b.n	8015228 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801520c:	b29a      	uxth	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015216:	b2da      	uxtb	r2, r3
 8015218:	8979      	ldrh	r1, [r7, #10]
 801521a:	2300      	movs	r3, #0
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f000 fb68 	bl	80158f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801522c:	b29b      	uxth	r3, r3
 801522e:	2b00      	cmp	r3, #0
 8015230:	d19a      	bne.n	8015168 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015232:	697a      	ldr	r2, [r7, #20]
 8015234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015236:	68f8      	ldr	r0, [r7, #12]
 8015238:	f000 f9ae 	bl	8015598 <I2C_WaitOnSTOPFlagUntilTimeout>
 801523c:	4603      	mov	r3, r0
 801523e:	2b00      	cmp	r3, #0
 8015240:	d001      	beq.n	8015246 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8015242:	2301      	movs	r3, #1
 8015244:	e01a      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2220      	movs	r2, #32
 801524c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	6859      	ldr	r1, [r3, #4]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	4b0b      	ldr	r3, [pc, #44]	@ (8015288 <HAL_I2C_Mem_Read+0x230>)
 801525a:	400b      	ands	r3, r1
 801525c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2220      	movs	r2, #32
 8015262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2200      	movs	r2, #0
 8015272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8015276:	2300      	movs	r3, #0
 8015278:	e000      	b.n	801527c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801527a:	2302      	movs	r3, #2
  }
}
 801527c:	4618      	mov	r0, r3
 801527e:	3718      	adds	r7, #24
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	80002400 	.word	0x80002400
 8015288:	fe00e800 	.word	0xfe00e800

0801528c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801529a:	b2db      	uxtb	r3, r3
}
 801529c:	4618      	mov	r0, r3
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	370c      	adds	r7, #12
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr

080152c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b086      	sub	sp, #24
 80152c4:	af02      	add	r7, sp, #8
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	4608      	mov	r0, r1
 80152ca:	4611      	mov	r1, r2
 80152cc:	461a      	mov	r2, r3
 80152ce:	4603      	mov	r3, r0
 80152d0:	817b      	strh	r3, [r7, #10]
 80152d2:	460b      	mov	r3, r1
 80152d4:	813b      	strh	r3, [r7, #8]
 80152d6:	4613      	mov	r3, r2
 80152d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80152da:	88fb      	ldrh	r3, [r7, #6]
 80152dc:	b2da      	uxtb	r2, r3
 80152de:	8979      	ldrh	r1, [r7, #10]
 80152e0:	4b20      	ldr	r3, [pc, #128]	@ (8015364 <I2C_RequestMemoryWrite+0xa4>)
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f000 fb05 	bl	80158f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80152ee:	69fa      	ldr	r2, [r7, #28]
 80152f0:	69b9      	ldr	r1, [r7, #24]
 80152f2:	68f8      	ldr	r0, [r7, #12]
 80152f4:	f000 f909 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d001      	beq.n	8015302 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80152fe:	2301      	movs	r3, #1
 8015300:	e02c      	b.n	801535c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015302:	88fb      	ldrh	r3, [r7, #6]
 8015304:	2b01      	cmp	r3, #1
 8015306:	d105      	bne.n	8015314 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015308:	893b      	ldrh	r3, [r7, #8]
 801530a:	b2da      	uxtb	r2, r3
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	629a      	str	r2, [r3, #40]	@ 0x28
 8015312:	e015      	b.n	8015340 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015314:	893b      	ldrh	r3, [r7, #8]
 8015316:	0a1b      	lsrs	r3, r3, #8
 8015318:	b29b      	uxth	r3, r3
 801531a:	b2da      	uxtb	r2, r3
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8015322:	69fa      	ldr	r2, [r7, #28]
 8015324:	69b9      	ldr	r1, [r7, #24]
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	f000 f8ef 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 801532c:	4603      	mov	r3, r0
 801532e:	2b00      	cmp	r3, #0
 8015330:	d001      	beq.n	8015336 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8015332:	2301      	movs	r3, #1
 8015334:	e012      	b.n	801535c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015336:	893b      	ldrh	r3, [r7, #8]
 8015338:	b2da      	uxtb	r2, r3
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	2200      	movs	r2, #0
 8015348:	2180      	movs	r1, #128	@ 0x80
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f000 f884 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d001      	beq.n	801535a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8015356:	2301      	movs	r3, #1
 8015358:	e000      	b.n	801535c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801535a:	2300      	movs	r3, #0
}
 801535c:	4618      	mov	r0, r3
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	80002000 	.word	0x80002000

08015368 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af02      	add	r7, sp, #8
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	4608      	mov	r0, r1
 8015372:	4611      	mov	r1, r2
 8015374:	461a      	mov	r2, r3
 8015376:	4603      	mov	r3, r0
 8015378:	817b      	strh	r3, [r7, #10]
 801537a:	460b      	mov	r3, r1
 801537c:	813b      	strh	r3, [r7, #8]
 801537e:	4613      	mov	r3, r2
 8015380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8015382:	88fb      	ldrh	r3, [r7, #6]
 8015384:	b2da      	uxtb	r2, r3
 8015386:	8979      	ldrh	r1, [r7, #10]
 8015388:	4b20      	ldr	r3, [pc, #128]	@ (801540c <I2C_RequestMemoryRead+0xa4>)
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	2300      	movs	r3, #0
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f000 fab2 	bl	80158f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8015394:	69fa      	ldr	r2, [r7, #28]
 8015396:	69b9      	ldr	r1, [r7, #24]
 8015398:	68f8      	ldr	r0, [r7, #12]
 801539a:	f000 f8b6 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d001      	beq.n	80153a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80153a4:	2301      	movs	r3, #1
 80153a6:	e02c      	b.n	8015402 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80153a8:	88fb      	ldrh	r3, [r7, #6]
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d105      	bne.n	80153ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80153ae:	893b      	ldrh	r3, [r7, #8]
 80153b0:	b2da      	uxtb	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80153b8:	e015      	b.n	80153e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80153ba:	893b      	ldrh	r3, [r7, #8]
 80153bc:	0a1b      	lsrs	r3, r3, #8
 80153be:	b29b      	uxth	r3, r3
 80153c0:	b2da      	uxtb	r2, r3
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80153c8:	69fa      	ldr	r2, [r7, #28]
 80153ca:	69b9      	ldr	r1, [r7, #24]
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f000 f89c 	bl	801550a <I2C_WaitOnTXISFlagUntilTimeout>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d001      	beq.n	80153dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80153d8:	2301      	movs	r3, #1
 80153da:	e012      	b.n	8015402 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80153dc:	893b      	ldrh	r3, [r7, #8]
 80153de:	b2da      	uxtb	r2, r3
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	2200      	movs	r2, #0
 80153ee:	2140      	movs	r1, #64	@ 0x40
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f000 f831 	bl	8015458 <I2C_WaitOnFlagUntilTimeout>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d001      	beq.n	8015400 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80153fc:	2301      	movs	r3, #1
 80153fe:	e000      	b.n	8015402 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3710      	adds	r7, #16
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	80002000 	.word	0x80002000

08015410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015410:	b480      	push	{r7}
 8015412:	b083      	sub	sp, #12
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	699b      	ldr	r3, [r3, #24]
 801541e:	f003 0302 	and.w	r3, r3, #2
 8015422:	2b02      	cmp	r3, #2
 8015424:	d103      	bne.n	801542e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	2200      	movs	r2, #0
 801542c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	699b      	ldr	r3, [r3, #24]
 8015434:	f003 0301 	and.w	r3, r3, #1
 8015438:	2b01      	cmp	r3, #1
 801543a:	d007      	beq.n	801544c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	699a      	ldr	r2, [r3, #24]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f042 0201 	orr.w	r2, r2, #1
 801544a:	619a      	str	r2, [r3, #24]
  }
}
 801544c:	bf00      	nop
 801544e:	370c      	adds	r7, #12
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr

08015458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	603b      	str	r3, [r7, #0]
 8015464:	4613      	mov	r3, r2
 8015466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015468:	e03b      	b.n	80154e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801546a:	69ba      	ldr	r2, [r7, #24]
 801546c:	6839      	ldr	r1, [r7, #0]
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f000 f962 	bl	8015738 <I2C_IsErrorOccurred>
 8015474:	4603      	mov	r3, r0
 8015476:	2b00      	cmp	r3, #0
 8015478:	d001      	beq.n	801547e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 801547a:	2301      	movs	r3, #1
 801547c:	e041      	b.n	8015502 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015484:	d02d      	beq.n	80154e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015486:	f7fe fe41 	bl	801410c <HAL_GetTick>
 801548a:	4602      	mov	r2, r0
 801548c:	69bb      	ldr	r3, [r7, #24]
 801548e:	1ad3      	subs	r3, r2, r3
 8015490:	683a      	ldr	r2, [r7, #0]
 8015492:	429a      	cmp	r2, r3
 8015494:	d302      	bcc.n	801549c <I2C_WaitOnFlagUntilTimeout+0x44>
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d122      	bne.n	80154e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	699a      	ldr	r2, [r3, #24]
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	4013      	ands	r3, r2
 80154a6:	68ba      	ldr	r2, [r7, #8]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	bf0c      	ite	eq
 80154ac:	2301      	moveq	r3, #1
 80154ae:	2300      	movne	r3, #0
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	461a      	mov	r2, r3
 80154b4:	79fb      	ldrb	r3, [r7, #7]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d113      	bne.n	80154e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154be:	f043 0220 	orr.w	r2, r3, #32
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2220      	movs	r2, #32
 80154ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2200      	movs	r2, #0
 80154d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2200      	movs	r2, #0
 80154da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80154de:	2301      	movs	r3, #1
 80154e0:	e00f      	b.n	8015502 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	699a      	ldr	r2, [r3, #24]
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	4013      	ands	r3, r2
 80154ec:	68ba      	ldr	r2, [r7, #8]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	bf0c      	ite	eq
 80154f2:	2301      	moveq	r3, #1
 80154f4:	2300      	movne	r3, #0
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	461a      	mov	r2, r3
 80154fa:	79fb      	ldrb	r3, [r7, #7]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d0b4      	beq.n	801546a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015500:	2300      	movs	r3, #0
}
 8015502:	4618      	mov	r0, r3
 8015504:	3710      	adds	r7, #16
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801550a:	b580      	push	{r7, lr}
 801550c:	b084      	sub	sp, #16
 801550e:	af00      	add	r7, sp, #0
 8015510:	60f8      	str	r0, [r7, #12]
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015516:	e033      	b.n	8015580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015518:	687a      	ldr	r2, [r7, #4]
 801551a:	68b9      	ldr	r1, [r7, #8]
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f000 f90b 	bl	8015738 <I2C_IsErrorOccurred>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	d001      	beq.n	801552c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015528:	2301      	movs	r3, #1
 801552a:	e031      	b.n	8015590 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015532:	d025      	beq.n	8015580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015534:	f7fe fdea 	bl	801410c <HAL_GetTick>
 8015538:	4602      	mov	r2, r0
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	68ba      	ldr	r2, [r7, #8]
 8015540:	429a      	cmp	r2, r3
 8015542:	d302      	bcc.n	801554a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d11a      	bne.n	8015580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	699b      	ldr	r3, [r3, #24]
 8015550:	f003 0302 	and.w	r3, r3, #2
 8015554:	2b02      	cmp	r3, #2
 8015556:	d013      	beq.n	8015580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801555c:	f043 0220 	orr.w	r2, r3, #32
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	2220      	movs	r2, #32
 8015568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2200      	movs	r2, #0
 8015570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2200      	movs	r2, #0
 8015578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801557c:	2301      	movs	r3, #1
 801557e:	e007      	b.n	8015590 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	699b      	ldr	r3, [r3, #24]
 8015586:	f003 0302 	and.w	r3, r3, #2
 801558a:	2b02      	cmp	r3, #2
 801558c:	d1c4      	bne.n	8015518 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801558e:	2300      	movs	r3, #0
}
 8015590:	4618      	mov	r0, r3
 8015592:	3710      	adds	r7, #16
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}

08015598 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80155a4:	e02f      	b.n	8015606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	68b9      	ldr	r1, [r7, #8]
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f000 f8c4 	bl	8015738 <I2C_IsErrorOccurred>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d001      	beq.n	80155ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80155b6:	2301      	movs	r3, #1
 80155b8:	e02d      	b.n	8015616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80155ba:	f7fe fda7 	bl	801410c <HAL_GetTick>
 80155be:	4602      	mov	r2, r0
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d302      	bcc.n	80155d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d11a      	bne.n	8015606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	699b      	ldr	r3, [r3, #24]
 80155d6:	f003 0320 	and.w	r3, r3, #32
 80155da:	2b20      	cmp	r3, #32
 80155dc:	d013      	beq.n	8015606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155e2:	f043 0220 	orr.w	r2, r3, #32
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	2220      	movs	r2, #32
 80155ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	2200      	movs	r2, #0
 80155fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8015602:	2301      	movs	r3, #1
 8015604:	e007      	b.n	8015616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	699b      	ldr	r3, [r3, #24]
 801560c:	f003 0320 	and.w	r3, r3, #32
 8015610:	2b20      	cmp	r3, #32
 8015612:	d1c8      	bne.n	80155a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3710      	adds	r7, #16
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
	...

08015620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b086      	sub	sp, #24
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801562c:	2300      	movs	r3, #0
 801562e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8015630:	e071      	b.n	8015716 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	68b9      	ldr	r1, [r7, #8]
 8015636:	68f8      	ldr	r0, [r7, #12]
 8015638:	f000 f87e 	bl	8015738 <I2C_IsErrorOccurred>
 801563c:	4603      	mov	r3, r0
 801563e:	2b00      	cmp	r3, #0
 8015640:	d001      	beq.n	8015646 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8015642:	2301      	movs	r3, #1
 8015644:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	699b      	ldr	r3, [r3, #24]
 801564c:	f003 0320 	and.w	r3, r3, #32
 8015650:	2b20      	cmp	r3, #32
 8015652:	d13b      	bne.n	80156cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8015654:	7dfb      	ldrb	r3, [r7, #23]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d138      	bne.n	80156cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	699b      	ldr	r3, [r3, #24]
 8015660:	f003 0304 	and.w	r3, r3, #4
 8015664:	2b04      	cmp	r3, #4
 8015666:	d105      	bne.n	8015674 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801566c:	2b00      	cmp	r3, #0
 801566e:	d001      	beq.n	8015674 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8015670:	2300      	movs	r3, #0
 8015672:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	699b      	ldr	r3, [r3, #24]
 801567a:	f003 0310 	and.w	r3, r3, #16
 801567e:	2b10      	cmp	r3, #16
 8015680:	d121      	bne.n	80156c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	2210      	movs	r2, #16
 8015688:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2204      	movs	r2, #4
 801568e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2220      	movs	r2, #32
 8015696:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	6859      	ldr	r1, [r3, #4]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	4b24      	ldr	r3, [pc, #144]	@ (8015734 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80156a4:	400b      	ands	r3, r1
 80156a6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2220      	movs	r2, #32
 80156ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2200      	movs	r2, #0
 80156b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2200      	movs	r2, #0
 80156bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	75fb      	strb	r3, [r7, #23]
 80156c4:	e002      	b.n	80156cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2200      	movs	r2, #0
 80156ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80156cc:	f7fe fd1e 	bl	801410c <HAL_GetTick>
 80156d0:	4602      	mov	r2, r0
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	1ad3      	subs	r3, r2, r3
 80156d6:	68ba      	ldr	r2, [r7, #8]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d302      	bcc.n	80156e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d119      	bne.n	8015716 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80156e2:	7dfb      	ldrb	r3, [r7, #23]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d116      	bne.n	8015716 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	699b      	ldr	r3, [r3, #24]
 80156ee:	f003 0304 	and.w	r3, r3, #4
 80156f2:	2b04      	cmp	r3, #4
 80156f4:	d00f      	beq.n	8015716 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156fa:	f043 0220 	orr.w	r2, r3, #32
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2220      	movs	r2, #32
 8015706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2200      	movs	r2, #0
 801570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8015712:	2301      	movs	r3, #1
 8015714:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	699b      	ldr	r3, [r3, #24]
 801571c:	f003 0304 	and.w	r3, r3, #4
 8015720:	2b04      	cmp	r3, #4
 8015722:	d002      	beq.n	801572a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8015724:	7dfb      	ldrb	r3, [r7, #23]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d083      	beq.n	8015632 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 801572a:	7dfb      	ldrb	r3, [r7, #23]
}
 801572c:	4618      	mov	r0, r3
 801572e:	3718      	adds	r7, #24
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}
 8015734:	fe00e800 	.word	0xfe00e800

08015738 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b08a      	sub	sp, #40	@ 0x28
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015744:	2300      	movs	r3, #0
 8015746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	699b      	ldr	r3, [r3, #24]
 8015750:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8015752:	2300      	movs	r3, #0
 8015754:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	f003 0310 	and.w	r3, r3, #16
 8015760:	2b00      	cmp	r3, #0
 8015762:	d068      	beq.n	8015836 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2210      	movs	r2, #16
 801576a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801576c:	e049      	b.n	8015802 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801576e:	68bb      	ldr	r3, [r7, #8]
 8015770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015774:	d045      	beq.n	8015802 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015776:	f7fe fcc9 	bl	801410c <HAL_GetTick>
 801577a:	4602      	mov	r2, r0
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	68ba      	ldr	r2, [r7, #8]
 8015782:	429a      	cmp	r2, r3
 8015784:	d302      	bcc.n	801578c <I2C_IsErrorOccurred+0x54>
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d13a      	bne.n	8015802 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015796:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801579e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	699b      	ldr	r3, [r3, #24]
 80157a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80157aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80157ae:	d121      	bne.n	80157f4 <I2C_IsErrorOccurred+0xbc>
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157b6:	d01d      	beq.n	80157f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80157b8:	7cfb      	ldrb	r3, [r7, #19]
 80157ba:	2b20      	cmp	r3, #32
 80157bc:	d01a      	beq.n	80157f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	685a      	ldr	r2, [r3, #4]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80157cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80157ce:	f7fe fc9d 	bl	801410c <HAL_GetTick>
 80157d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80157d4:	e00e      	b.n	80157f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80157d6:	f7fe fc99 	bl	801410c <HAL_GetTick>
 80157da:	4602      	mov	r2, r0
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	2b19      	cmp	r3, #25
 80157e2:	d907      	bls.n	80157f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	f043 0320 	orr.w	r3, r3, #32
 80157ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80157ec:	2301      	movs	r3, #1
 80157ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80157f2:	e006      	b.n	8015802 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	699b      	ldr	r3, [r3, #24]
 80157fa:	f003 0320 	and.w	r3, r3, #32
 80157fe:	2b20      	cmp	r3, #32
 8015800:	d1e9      	bne.n	80157d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	699b      	ldr	r3, [r3, #24]
 8015808:	f003 0320 	and.w	r3, r3, #32
 801580c:	2b20      	cmp	r3, #32
 801580e:	d003      	beq.n	8015818 <I2C_IsErrorOccurred+0xe0>
 8015810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015814:	2b00      	cmp	r3, #0
 8015816:	d0aa      	beq.n	801576e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8015818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801581c:	2b00      	cmp	r3, #0
 801581e:	d103      	bne.n	8015828 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	2220      	movs	r2, #32
 8015826:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8015828:	6a3b      	ldr	r3, [r7, #32]
 801582a:	f043 0304 	orr.w	r3, r3, #4
 801582e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8015830:	2301      	movs	r3, #1
 8015832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	699b      	ldr	r3, [r3, #24]
 801583c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015844:	2b00      	cmp	r3, #0
 8015846:	d00b      	beq.n	8015860 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8015848:	6a3b      	ldr	r3, [r7, #32]
 801584a:	f043 0301 	orr.w	r3, r3, #1
 801584e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801585a:	2301      	movs	r3, #1
 801585c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015866:	2b00      	cmp	r3, #0
 8015868:	d00b      	beq.n	8015882 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801586a:	6a3b      	ldr	r3, [r7, #32]
 801586c:	f043 0308 	orr.w	r3, r3, #8
 8015870:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801587a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801587c:	2301      	movs	r3, #1
 801587e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00b      	beq.n	80158a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801588c:	6a3b      	ldr	r3, [r7, #32]
 801588e:	f043 0302 	orr.w	r3, r3, #2
 8015892:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801589c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801589e:	2301      	movs	r3, #1
 80158a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80158a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d01c      	beq.n	80158e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80158ac:	68f8      	ldr	r0, [r7, #12]
 80158ae:	f7ff fdaf 	bl	8015410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	6859      	ldr	r1, [r3, #4]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681a      	ldr	r2, [r3, #0]
 80158bc:	4b0d      	ldr	r3, [pc, #52]	@ (80158f4 <I2C_IsErrorOccurred+0x1bc>)
 80158be:	400b      	ands	r3, r1
 80158c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80158c6:	6a3b      	ldr	r3, [r7, #32]
 80158c8:	431a      	orrs	r2, r3
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2220      	movs	r2, #32
 80158d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2200      	movs	r2, #0
 80158da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2200      	movs	r2, #0
 80158e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80158e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3728      	adds	r7, #40	@ 0x28
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	fe00e800 	.word	0xfe00e800

080158f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b087      	sub	sp, #28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	607b      	str	r3, [r7, #4]
 8015902:	460b      	mov	r3, r1
 8015904:	817b      	strh	r3, [r7, #10]
 8015906:	4613      	mov	r3, r2
 8015908:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801590a:	897b      	ldrh	r3, [r7, #10]
 801590c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015910:	7a7b      	ldrb	r3, [r7, #9]
 8015912:	041b      	lsls	r3, r3, #16
 8015914:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015918:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801591e:	6a3b      	ldr	r3, [r7, #32]
 8015920:	4313      	orrs	r3, r2
 8015922:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015926:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	685a      	ldr	r2, [r3, #4]
 801592e:	6a3b      	ldr	r3, [r7, #32]
 8015930:	0d5b      	lsrs	r3, r3, #21
 8015932:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8015936:	4b08      	ldr	r3, [pc, #32]	@ (8015958 <I2C_TransferConfig+0x60>)
 8015938:	430b      	orrs	r3, r1
 801593a:	43db      	mvns	r3, r3
 801593c:	ea02 0103 	and.w	r1, r2, r3
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	697a      	ldr	r2, [r7, #20]
 8015946:	430a      	orrs	r2, r1
 8015948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801594a:	bf00      	nop
 801594c:	371c      	adds	r7, #28
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop
 8015958:	03ff63ff 	.word	0x03ff63ff

0801595c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801595c:	b480      	push	{r7}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801596c:	b2db      	uxtb	r3, r3
 801596e:	2b20      	cmp	r3, #32
 8015970:	d138      	bne.n	80159e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015978:	2b01      	cmp	r3, #1
 801597a:	d101      	bne.n	8015980 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801597c:	2302      	movs	r3, #2
 801597e:	e032      	b.n	80159e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2201      	movs	r2, #1
 8015984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2224      	movs	r2, #36	@ 0x24
 801598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	f022 0201 	bic.w	r2, r2, #1
 801599e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80159ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	6819      	ldr	r1, [r3, #0]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	683a      	ldr	r2, [r7, #0]
 80159bc:	430a      	orrs	r2, r1
 80159be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	f042 0201 	orr.w	r2, r2, #1
 80159ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2220      	movs	r2, #32
 80159d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2200      	movs	r2, #0
 80159dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80159e0:	2300      	movs	r3, #0
 80159e2:	e000      	b.n	80159e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80159e4:	2302      	movs	r3, #2
  }
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	370c      	adds	r7, #12
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr

080159f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80159f2:	b480      	push	{r7}
 80159f4:	b085      	sub	sp, #20
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
 80159fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	2b20      	cmp	r3, #32
 8015a06:	d139      	bne.n	8015a7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d101      	bne.n	8015a16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8015a12:	2302      	movs	r3, #2
 8015a14:	e033      	b.n	8015a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2201      	movs	r2, #1
 8015a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2224      	movs	r2, #36	@ 0x24
 8015a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	f022 0201 	bic.w	r2, r2, #1
 8015a34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8015a44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	021b      	lsls	r3, r3, #8
 8015a4a:	68fa      	ldr	r2, [r7, #12]
 8015a4c:	4313      	orrs	r3, r2
 8015a4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	681a      	ldr	r2, [r3, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	f042 0201 	orr.w	r2, r2, #1
 8015a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2220      	movs	r2, #32
 8015a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2200      	movs	r2, #0
 8015a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e000      	b.n	8015a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015a7c:	2302      	movs	r3, #2
  }
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3714      	adds	r7, #20
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr

08015a8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b084      	sub	sp, #16
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d101      	bne.n	8015a9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e0c0      	b.n	8015c1e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d106      	bne.n	8015ab6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7eb fa6d 	bl	8000f90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2203      	movs	r2, #3
 8015aba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f003 f968 	bl	8018d98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015ac8:	2300      	movs	r3, #0
 8015aca:	73fb      	strb	r3, [r7, #15]
 8015acc:	e03e      	b.n	8015b4c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8015ace:	7bfa      	ldrb	r2, [r7, #15]
 8015ad0:	6879      	ldr	r1, [r7, #4]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	4413      	add	r3, r2
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	440b      	add	r3, r1
 8015adc:	3311      	adds	r3, #17
 8015ade:	2201      	movs	r2, #1
 8015ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015ae2:	7bfa      	ldrb	r2, [r7, #15]
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	4413      	add	r3, r2
 8015aec:	00db      	lsls	r3, r3, #3
 8015aee:	440b      	add	r3, r1
 8015af0:	3310      	adds	r3, #16
 8015af2:	7bfa      	ldrb	r2, [r7, #15]
 8015af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015af6:	7bfa      	ldrb	r2, [r7, #15]
 8015af8:	6879      	ldr	r1, [r7, #4]
 8015afa:	4613      	mov	r3, r2
 8015afc:	009b      	lsls	r3, r3, #2
 8015afe:	4413      	add	r3, r2
 8015b00:	00db      	lsls	r3, r3, #3
 8015b02:	440b      	add	r3, r1
 8015b04:	3313      	adds	r3, #19
 8015b06:	2200      	movs	r2, #0
 8015b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015b0a:	7bfa      	ldrb	r2, [r7, #15]
 8015b0c:	6879      	ldr	r1, [r7, #4]
 8015b0e:	4613      	mov	r3, r2
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	4413      	add	r3, r2
 8015b14:	00db      	lsls	r3, r3, #3
 8015b16:	440b      	add	r3, r1
 8015b18:	3320      	adds	r3, #32
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8015b1e:	7bfa      	ldrb	r2, [r7, #15]
 8015b20:	6879      	ldr	r1, [r7, #4]
 8015b22:	4613      	mov	r3, r2
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	4413      	add	r3, r2
 8015b28:	00db      	lsls	r3, r3, #3
 8015b2a:	440b      	add	r3, r1
 8015b2c:	3324      	adds	r3, #36	@ 0x24
 8015b2e:	2200      	movs	r2, #0
 8015b30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015b32:	7bfb      	ldrb	r3, [r7, #15]
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	1c5a      	adds	r2, r3, #1
 8015b38:	4613      	mov	r3, r2
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	4413      	add	r3, r2
 8015b3e:	00db      	lsls	r3, r3, #3
 8015b40:	440b      	add	r3, r1
 8015b42:	2200      	movs	r2, #0
 8015b44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015b46:	7bfb      	ldrb	r3, [r7, #15]
 8015b48:	3301      	adds	r3, #1
 8015b4a:	73fb      	strb	r3, [r7, #15]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	791b      	ldrb	r3, [r3, #4]
 8015b50:	7bfa      	ldrb	r2, [r7, #15]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d3bb      	bcc.n	8015ace <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015b56:	2300      	movs	r3, #0
 8015b58:	73fb      	strb	r3, [r7, #15]
 8015b5a:	e044      	b.n	8015be6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015b5c:	7bfa      	ldrb	r2, [r7, #15]
 8015b5e:	6879      	ldr	r1, [r7, #4]
 8015b60:	4613      	mov	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	4413      	add	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	440b      	add	r3, r1
 8015b6a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8015b6e:	2200      	movs	r2, #0
 8015b70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015b72:	7bfa      	ldrb	r2, [r7, #15]
 8015b74:	6879      	ldr	r1, [r7, #4]
 8015b76:	4613      	mov	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4413      	add	r3, r2
 8015b7c:	00db      	lsls	r3, r3, #3
 8015b7e:	440b      	add	r3, r1
 8015b80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015b84:	7bfa      	ldrb	r2, [r7, #15]
 8015b86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015b88:	7bfa      	ldrb	r2, [r7, #15]
 8015b8a:	6879      	ldr	r1, [r7, #4]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	00db      	lsls	r3, r3, #3
 8015b94:	440b      	add	r3, r1
 8015b96:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015b9e:	7bfa      	ldrb	r2, [r7, #15]
 8015ba0:	6879      	ldr	r1, [r7, #4]
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	4413      	add	r3, r2
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	440b      	add	r3, r1
 8015bac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015bb4:	7bfa      	ldrb	r2, [r7, #15]
 8015bb6:	6879      	ldr	r1, [r7, #4]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015bca:	7bfa      	ldrb	r2, [r7, #15]
 8015bcc:	6879      	ldr	r1, [r7, #4]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	4413      	add	r3, r2
 8015bd4:	00db      	lsls	r3, r3, #3
 8015bd6:	440b      	add	r3, r1
 8015bd8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8015bdc:	2200      	movs	r2, #0
 8015bde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015be0:	7bfb      	ldrb	r3, [r7, #15]
 8015be2:	3301      	adds	r3, #1
 8015be4:	73fb      	strb	r3, [r7, #15]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	791b      	ldrb	r3, [r3, #4]
 8015bea:	7bfa      	ldrb	r2, [r7, #15]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d3b5      	bcc.n	8015b5c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6818      	ldr	r0, [r3, #0]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	3304      	adds	r3, #4
 8015bf8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015bfc:	f003 f8e7 	bl	8018dce <USB_DevInit>

  hpcd->USB_Address = 0U;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2200      	movs	r2, #0
 8015c04:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2201      	movs	r2, #1
 8015c0a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	7a9b      	ldrb	r3, [r3, #10]
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d102      	bne.n	8015c1c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f000 f805 	bl	8015c26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3710      	adds	r7, #16
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8015c26:	b480      	push	{r7}
 8015c28:	b085      	sub	sp, #20
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2201      	movs	r2, #1
 8015c38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8015c4a:	b29b      	uxth	r3, r3
 8015c4c:	f043 0301 	orr.w	r3, r3, #1
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	f043 0302 	orr.w	r3, r3, #2
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3714      	adds	r7, #20
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
	...

08015c7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015c80:	4b05      	ldr	r3, [pc, #20]	@ (8015c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	4a04      	ldr	r2, [pc, #16]	@ (8015c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8015c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015c8a:	6013      	str	r3, [r2, #0]
}
 8015c8c:	bf00      	nop
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr
 8015c96:	bf00      	nop
 8015c98:	58000400 	.word	0x58000400

08015c9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8015ca0:	4b04      	ldr	r3, [pc, #16]	@ (8015cb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	58000400 	.word	0x58000400

08015cb8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8015cb8:	b480      	push	{r7}
 8015cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8015cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8015cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015cca:	d101      	bne.n	8015cd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e000      	b.n	8015cd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8015cd0:	2300      	movs	r3, #0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr

08015cdc <LL_RCC_HSE_Enable>:
{
 8015cdc:	b480      	push	{r7}
 8015cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8015ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015cee:	6013      	str	r3, [r2, #0]
}
 8015cf0:	bf00      	nop
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr

08015cfa <LL_RCC_HSE_Disable>:
{
 8015cfa:	b480      	push	{r7}
 8015cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8015cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015d0c:	6013      	str	r3, [r2, #0]
}
 8015d0e:	bf00      	nop
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <LL_RCC_HSE_IsReady>:
{
 8015d18:	b480      	push	{r7}
 8015d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8015d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015d2a:	d101      	bne.n	8015d30 <LL_RCC_HSE_IsReady+0x18>
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e000      	b.n	8015d32 <LL_RCC_HSE_IsReady+0x1a>
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <LL_RCC_HSI_Enable>:
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8015d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015d4e:	6013      	str	r3, [r2, #0]
}
 8015d50:	bf00      	nop
 8015d52:	46bd      	mov	sp, r7
 8015d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d58:	4770      	bx	lr

08015d5a <LL_RCC_HSI_Disable>:
{
 8015d5a:	b480      	push	{r7}
 8015d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8015d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015d6c:	6013      	str	r3, [r2, #0]
}
 8015d6e:	bf00      	nop
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr

08015d78 <LL_RCC_HSI_IsReady>:
{
 8015d78:	b480      	push	{r7}
 8015d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8015d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015d8a:	d101      	bne.n	8015d90 <LL_RCC_HSI_IsReady+0x18>
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	e000      	b.n	8015d92 <LL_RCC_HSI_IsReady+0x1a>
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr

08015d9c <LL_RCC_HSI_SetCalibTrimming>:
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b083      	sub	sp, #12
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8015da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	061b      	lsls	r3, r3, #24
 8015db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015db6:	4313      	orrs	r3, r2
 8015db8:	604b      	str	r3, [r1, #4]
}
 8015dba:	bf00      	nop
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr

08015dc6 <LL_RCC_HSI48_Enable>:
{
 8015dc6:	b480      	push	{r7}
 8015dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8015dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015dd6:	f043 0301 	orr.w	r3, r3, #1
 8015dda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8015dde:	bf00      	nop
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr

08015de8 <LL_RCC_HSI48_Disable>:
{
 8015de8:	b480      	push	{r7}
 8015dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8015dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015df8:	f023 0301 	bic.w	r3, r3, #1
 8015dfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8015e00:	bf00      	nop
 8015e02:	46bd      	mov	sp, r7
 8015e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e08:	4770      	bx	lr

08015e0a <LL_RCC_HSI48_IsReady>:
{
 8015e0a:	b480      	push	{r7}
 8015e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8015e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015e16:	f003 0302 	and.w	r3, r3, #2
 8015e1a:	2b02      	cmp	r3, #2
 8015e1c:	d101      	bne.n	8015e22 <LL_RCC_HSI48_IsReady+0x18>
 8015e1e:	2301      	movs	r3, #1
 8015e20:	e000      	b.n	8015e24 <LL_RCC_HSI48_IsReady+0x1a>
 8015e22:	2300      	movs	r3, #0
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr

08015e2e <LL_RCC_LSE_Enable>:
{
 8015e2e:	b480      	push	{r7}
 8015e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015e3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015e3e:	f043 0301 	orr.w	r3, r3, #1
 8015e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015e46:	bf00      	nop
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr

08015e50 <LL_RCC_LSE_Disable>:
{
 8015e50:	b480      	push	{r7}
 8015e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015e60:	f023 0301 	bic.w	r3, r3, #1
 8015e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015e68:	bf00      	nop
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <LL_RCC_LSE_EnableBypass>:
{
 8015e72:	b480      	push	{r7}
 8015e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015e82:	f043 0304 	orr.w	r3, r3, #4
 8015e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015e8a:	bf00      	nop
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr

08015e94 <LL_RCC_LSE_DisableBypass>:
{
 8015e94:	b480      	push	{r7}
 8015e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015ea4:	f023 0304 	bic.w	r3, r3, #4
 8015ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015eac:	bf00      	nop
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb4:	4770      	bx	lr

08015eb6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8015eb6:	b480      	push	{r7}
 8015eb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8015eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015ec2:	f003 0302 	and.w	r3, r3, #2
 8015ec6:	2b02      	cmp	r3, #2
 8015ec8:	d101      	bne.n	8015ece <LL_RCC_LSE_IsReady+0x18>
 8015eca:	2301      	movs	r3, #1
 8015ecc:	e000      	b.n	8015ed0 <LL_RCC_LSE_IsReady+0x1a>
 8015ece:	2300      	movs	r3, #0
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr

08015eda <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8015eda:	b480      	push	{r7}
 8015edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8015ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015ee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015eea:	f043 0301 	orr.w	r3, r3, #1
 8015eee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015ef2:	bf00      	nop
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8015efc:	b480      	push	{r7}
 8015efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8015f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015f0c:	f023 0301 	bic.w	r3, r3, #1
 8015f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015f14:	bf00      	nop
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr

08015f1e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8015f1e:	b480      	push	{r7}
 8015f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8015f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f2a:	f003 0302 	and.w	r3, r3, #2
 8015f2e:	2b02      	cmp	r3, #2
 8015f30:	d101      	bne.n	8015f36 <LL_RCC_LSI1_IsReady+0x18>
 8015f32:	2301      	movs	r3, #1
 8015f34:	e000      	b.n	8015f38 <LL_RCC_LSI1_IsReady+0x1a>
 8015f36:	2300      	movs	r3, #0
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr

08015f42 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8015f42:	b480      	push	{r7}
 8015f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8015f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015f52:	f043 0304 	orr.w	r3, r3, #4
 8015f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015f5a:	bf00      	nop
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8015f64:	b480      	push	{r7}
 8015f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8015f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015f74:	f023 0304 	bic.w	r3, r3, #4
 8015f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8015f7c:	bf00      	nop
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr

08015f86 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8015f86:	b480      	push	{r7}
 8015f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8015f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f92:	f003 0308 	and.w	r3, r3, #8
 8015f96:	2b08      	cmp	r3, #8
 8015f98:	d101      	bne.n	8015f9e <LL_RCC_LSI2_IsReady+0x18>
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	e000      	b.n	8015fa0 <LL_RCC_LSI2_IsReady+0x1a>
 8015f9e:	2300      	movs	r3, #0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa8:	4770      	bx	lr

08015faa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8015faa:	b480      	push	{r7}
 8015fac:	b083      	sub	sp, #12
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8015fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	021b      	lsls	r3, r3, #8
 8015fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015fc6:	4313      	orrs	r3, r2
 8015fc8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8015fcc:	bf00      	nop
 8015fce:	370c      	adds	r7, #12
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr

08015fd8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8015fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015fe6:	f043 0301 	orr.w	r3, r3, #1
 8015fea:	6013      	str	r3, [r2, #0]
}
 8015fec:	bf00      	nop
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr

08015ff6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8015ff6:	b480      	push	{r7}
 8015ff8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8015ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016004:	f023 0301 	bic.w	r3, r3, #1
 8016008:	6013      	str	r3, [r2, #0]
}
 801600a:	bf00      	nop
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016014:	b480      	push	{r7}
 8016016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	f003 0302 	and.w	r3, r3, #2
 8016022:	2b02      	cmp	r3, #2
 8016024:	d101      	bne.n	801602a <LL_RCC_MSI_IsReady+0x16>
 8016026:	2301      	movs	r3, #1
 8016028:	e000      	b.n	801602c <LL_RCC_MSI_IsReady+0x18>
 801602a:	2300      	movs	r3, #0
}
 801602c:	4618      	mov	r0, r3
 801602e:	46bd      	mov	sp, r7
 8016030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016034:	4770      	bx	lr

08016036 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016036:	b480      	push	{r7}
 8016038:	b083      	sub	sp, #12
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801603e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8016048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	4313      	orrs	r3, r2
 8016050:	600b      	str	r3, [r1, #0]
}
 8016052:	bf00      	nop
 8016054:	370c      	adds	r7, #12
 8016056:	46bd      	mov	sp, r7
 8016058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605c:	4770      	bx	lr

0801605e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801605e:	b480      	push	{r7}
 8016060:	b083      	sub	sp, #12
 8016062:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801606e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2bb0      	cmp	r3, #176	@ 0xb0
 8016074:	d901      	bls.n	801607a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016076:	23b0      	movs	r3, #176	@ 0xb0
 8016078:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 801607a:	687b      	ldr	r3, [r7, #4]
}
 801607c:	4618      	mov	r0, r3
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016088:	b480      	push	{r7}
 801608a:	b083      	sub	sp, #12
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	021b      	lsls	r3, r3, #8
 801609e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80160a2:	4313      	orrs	r3, r2
 80160a4:	604b      	str	r3, [r1, #4]
}
 80160a6:	bf00      	nop
 80160a8:	370c      	adds	r7, #12
 80160aa:	46bd      	mov	sp, r7
 80160ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b0:	4770      	bx	lr

080160b2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80160b2:	b480      	push	{r7}
 80160b4:	b083      	sub	sp, #12
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80160ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	f023 0203 	bic.w	r2, r3, #3
 80160c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	4313      	orrs	r3, r2
 80160cc:	608b      	str	r3, [r1, #8]
}
 80160ce:	bf00      	nop
 80160d0:	370c      	adds	r7, #12
 80160d2:	46bd      	mov	sp, r7
 80160d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d8:	4770      	bx	lr

080160da <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80160da:	b480      	push	{r7}
 80160dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80160de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80160e2:	689b      	ldr	r3, [r3, #8]
 80160e4:	f003 030c 	and.w	r3, r3, #12
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	46bd      	mov	sp, r7
 80160ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f0:	4770      	bx	lr

080160f2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80160f2:	b480      	push	{r7}
 80160f4:	b083      	sub	sp, #12
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80160fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80160fe:	689b      	ldr	r3, [r3, #8]
 8016100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8016104:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	4313      	orrs	r3, r2
 801610c:	608b      	str	r3, [r1, #8]
}
 801610e:	bf00      	nop
 8016110:	370c      	adds	r7, #12
 8016112:	46bd      	mov	sp, r7
 8016114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016118:	4770      	bx	lr

0801611a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801611a:	b480      	push	{r7}
 801611c:	b083      	sub	sp, #12
 801611e:	af00      	add	r7, sp, #0
 8016120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016126:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801612a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801612e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	4313      	orrs	r3, r2
 8016136:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 801613a:	bf00      	nop
 801613c:	370c      	adds	r7, #12
 801613e:	46bd      	mov	sp, r7
 8016140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016144:	4770      	bx	lr

08016146 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016146:	b480      	push	{r7}
 8016148:	b083      	sub	sp, #12
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801614e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016152:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016156:	f023 020f 	bic.w	r2, r3, #15
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	091b      	lsrs	r3, r3, #4
 801615e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016162:	4313      	orrs	r3, r2
 8016164:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8016168:	bf00      	nop
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr

08016174 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016174:	b480      	push	{r7}
 8016176:	b083      	sub	sp, #12
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801617c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016180:	689b      	ldr	r3, [r3, #8]
 8016182:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8016186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	4313      	orrs	r3, r2
 801618e:	608b      	str	r3, [r1, #8]
}
 8016190:	bf00      	nop
 8016192:	370c      	adds	r7, #12
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr

0801619c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 801619c:	b480      	push	{r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80161a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80161a8:	689b      	ldr	r3, [r3, #8]
 80161aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80161ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	4313      	orrs	r3, r2
 80161b6:	608b      	str	r3, [r1, #8]
}
 80161b8:	bf00      	nop
 80161ba:	370c      	adds	r7, #12
 80161bc:	46bd      	mov	sp, r7
 80161be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c2:	4770      	bx	lr

080161c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80161c4:	b480      	push	{r7}
 80161c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80161c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80161d2:	4618      	mov	r0, r3
 80161d4:	46bd      	mov	sp, r7
 80161d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161da:	4770      	bx	lr

080161dc <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80161dc:	b480      	push	{r7}
 80161de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80161e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80161e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80161e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	46bd      	mov	sp, r7
 80161f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f4:	4770      	bx	lr

080161f6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80161f6:	b480      	push	{r7}
 80161f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80161fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80161fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016202:	011b      	lsls	r3, r3, #4
 8016204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8016208:	4618      	mov	r0, r3
 801620a:	46bd      	mov	sp, r7
 801620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016210:	4770      	bx	lr

08016212 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016212:	b480      	push	{r7}
 8016214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8016220:	4618      	mov	r0, r3
 8016222:	46bd      	mov	sp, r7
 8016224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016228:	4770      	bx	lr

0801622a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801622a:	b480      	push	{r7}
 801622c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801622e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016232:	689b      	ldr	r3, [r3, #8]
 8016234:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8016238:	4618      	mov	r0, r3
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr

08016242 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016242:	b480      	push	{r7}
 8016244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016250:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016254:	6013      	str	r3, [r2, #0]
}
 8016256:	bf00      	nop
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr

08016260 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016260:	b480      	push	{r7}
 8016262:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801626e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8016272:	6013      	str	r3, [r2, #0]
}
 8016274:	bf00      	nop
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr

0801627e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801627e:	b480      	push	{r7}
 8016280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801628c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016290:	d101      	bne.n	8016296 <LL_RCC_PLL_IsReady+0x18>
 8016292:	2301      	movs	r3, #1
 8016294:	e000      	b.n	8016298 <LL_RCC_PLL_IsReady+0x1a>
 8016296:	2300      	movs	r3, #0
}
 8016298:	4618      	mov	r0, r3
 801629a:	46bd      	mov	sp, r7
 801629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a0:	4770      	bx	lr

080162a2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80162a2:	b480      	push	{r7}
 80162a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80162a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162aa:	68db      	ldr	r3, [r3, #12]
 80162ac:	0a1b      	lsrs	r3, r3, #8
 80162ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80162bc:	b480      	push	{r7}
 80162be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80162c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80162d4:	b480      	push	{r7}
 80162d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80162d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162dc:	68db      	ldr	r3, [r3, #12]
 80162de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80162ec:	b480      	push	{r7}
 80162ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80162f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	f003 0303 	and.w	r3, r3, #3
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016304:	b480      	push	{r7}
 8016306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801630c:	689b      	ldr	r3, [r3, #8]
 801630e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016316:	d101      	bne.n	801631c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8016318:	2301      	movs	r3, #1
 801631a:	e000      	b.n	801631e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801631c:	2300      	movs	r3, #0
}
 801631e:	4618      	mov	r0, r3
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr

08016328 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8016328:	b480      	push	{r7}
 801632a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801632c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016330:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801633c:	d101      	bne.n	8016342 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801633e:	2301      	movs	r3, #1
 8016340:	e000      	b.n	8016344 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8016342:	2300      	movs	r3, #0
}
 8016344:	4618      	mov	r0, r3
 8016346:	46bd      	mov	sp, r7
 8016348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634c:	4770      	bx	lr

0801634e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801634e:	b480      	push	{r7}
 8016350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8016352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016356:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801635a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801635e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016362:	d101      	bne.n	8016368 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8016364:	2301      	movs	r3, #1
 8016366:	e000      	b.n	801636a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8016368:	2300      	movs	r3, #0
}
 801636a:	4618      	mov	r0, r3
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8016374:	b480      	push	{r7}
 8016376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8016378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801637c:	689b      	ldr	r3, [r3, #8]
 801637e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016386:	d101      	bne.n	801638c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8016388:	2301      	movs	r3, #1
 801638a:	e000      	b.n	801638e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801638c:	2300      	movs	r3, #0
}
 801638e:	4618      	mov	r0, r3
 8016390:	46bd      	mov	sp, r7
 8016392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016396:	4770      	bx	lr

08016398 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8016398:	b480      	push	{r7}
 801639a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801639c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80163a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80163aa:	d101      	bne.n	80163b0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80163ac:	2301      	movs	r3, #1
 80163ae:	e000      	b.n	80163b2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80163b0:	2300      	movs	r3, #0
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr

080163bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80163bc:	b590      	push	{r4, r7, lr}
 80163be:	b08d      	sub	sp, #52	@ 0x34
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d101      	bne.n	80163ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80163ca:	2301      	movs	r3, #1
 80163cc:	e363      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	f003 0320 	and.w	r3, r3, #32
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f000 808d 	beq.w	80164f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80163dc:	f7ff fe7d 	bl	80160da <LL_RCC_GetSysClkSource>
 80163e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80163e2:	f7ff ff83 	bl	80162ec <LL_RCC_PLL_GetMainSource>
 80163e6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80163e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d005      	beq.n	80163fa <HAL_RCC_OscConfig+0x3e>
 80163ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163f0:	2b0c      	cmp	r3, #12
 80163f2:	d147      	bne.n	8016484 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80163f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d144      	bne.n	8016484 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	69db      	ldr	r3, [r3, #28]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d101      	bne.n	8016406 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8016402:	2301      	movs	r3, #1
 8016404:	e347      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801640a:	f7ff fe28 	bl	801605e <LL_RCC_MSI_GetRange>
 801640e:	4603      	mov	r3, r0
 8016410:	429c      	cmp	r4, r3
 8016412:	d914      	bls.n	801643e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016418:	4618      	mov	r0, r3
 801641a:	f000 fd61 	bl	8016ee0 <RCC_SetFlashLatencyFromMSIRange>
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d001      	beq.n	8016428 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8016424:	2301      	movs	r3, #1
 8016426:	e336      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801642c:	4618      	mov	r0, r3
 801642e:	f7ff fe02 	bl	8016036 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6a1b      	ldr	r3, [r3, #32]
 8016436:	4618      	mov	r0, r3
 8016438:	f7ff fe26 	bl	8016088 <LL_RCC_MSI_SetCalibTrimming>
 801643c:	e013      	b.n	8016466 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016442:	4618      	mov	r0, r3
 8016444:	f7ff fdf7 	bl	8016036 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6a1b      	ldr	r3, [r3, #32]
 801644c:	4618      	mov	r0, r3
 801644e:	f7ff fe1b 	bl	8016088 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016456:	4618      	mov	r0, r3
 8016458:	f000 fd42 	bl	8016ee0 <RCC_SetFlashLatencyFromMSIRange>
 801645c:	4603      	mov	r3, r0
 801645e:	2b00      	cmp	r3, #0
 8016460:	d001      	beq.n	8016466 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8016462:	2301      	movs	r3, #1
 8016464:	e317      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016466:	f000 fcc9 	bl	8016dfc <HAL_RCC_GetHCLKFreq>
 801646a:	4603      	mov	r3, r0
 801646c:	4aa4      	ldr	r2, [pc, #656]	@ (8016700 <HAL_RCC_OscConfig+0x344>)
 801646e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8016470:	4ba4      	ldr	r3, [pc, #656]	@ (8016704 <HAL_RCC_OscConfig+0x348>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	4618      	mov	r0, r3
 8016476:	f7ea fdfb 	bl	8001070 <HAL_InitTick>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	d039      	beq.n	80164f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8016480:	2301      	movs	r3, #1
 8016482:	e308      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	69db      	ldr	r3, [r3, #28]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d01e      	beq.n	80164ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801648c:	f7ff fda4 	bl	8015fd8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016490:	f7fd fe3c 	bl	801410c <HAL_GetTick>
 8016494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8016496:	e008      	b.n	80164aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016498:	f7fd fe38 	bl	801410c <HAL_GetTick>
 801649c:	4602      	mov	r2, r0
 801649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164a0:	1ad3      	subs	r3, r2, r3
 80164a2:	2b02      	cmp	r3, #2
 80164a4:	d901      	bls.n	80164aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80164a6:	2303      	movs	r3, #3
 80164a8:	e2f5      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80164aa:	f7ff fdb3 	bl	8016014 <LL_RCC_MSI_IsReady>
 80164ae:	4603      	mov	r3, r0
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d0f1      	beq.n	8016498 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7ff fdbc 	bl	8016036 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6a1b      	ldr	r3, [r3, #32]
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7ff fde0 	bl	8016088 <LL_RCC_MSI_SetCalibTrimming>
 80164c8:	e015      	b.n	80164f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80164ca:	f7ff fd94 	bl	8015ff6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80164ce:	f7fd fe1d 	bl	801410c <HAL_GetTick>
 80164d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80164d4:	e008      	b.n	80164e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80164d6:	f7fd fe19 	bl	801410c <HAL_GetTick>
 80164da:	4602      	mov	r2, r0
 80164dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	d901      	bls.n	80164e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80164e4:	2303      	movs	r3, #3
 80164e6:	e2d6      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80164e8:	f7ff fd94 	bl	8016014 <LL_RCC_MSI_IsReady>
 80164ec:	4603      	mov	r3, r0
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1f1      	bne.n	80164d6 <HAL_RCC_OscConfig+0x11a>
 80164f2:	e000      	b.n	80164f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80164f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f003 0301 	and.w	r3, r3, #1
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d047      	beq.n	8016592 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016502:	f7ff fdea 	bl	80160da <LL_RCC_GetSysClkSource>
 8016506:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016508:	f7ff fef0 	bl	80162ec <LL_RCC_PLL_GetMainSource>
 801650c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801650e:	6a3b      	ldr	r3, [r7, #32]
 8016510:	2b08      	cmp	r3, #8
 8016512:	d005      	beq.n	8016520 <HAL_RCC_OscConfig+0x164>
 8016514:	6a3b      	ldr	r3, [r7, #32]
 8016516:	2b0c      	cmp	r3, #12
 8016518:	d108      	bne.n	801652c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801651a:	69fb      	ldr	r3, [r7, #28]
 801651c:	2b03      	cmp	r3, #3
 801651e:	d105      	bne.n	801652c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d134      	bne.n	8016592 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8016528:	2301      	movs	r3, #1
 801652a:	e2b4      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016534:	d102      	bne.n	801653c <HAL_RCC_OscConfig+0x180>
 8016536:	f7ff fbd1 	bl	8015cdc <LL_RCC_HSE_Enable>
 801653a:	e001      	b.n	8016540 <HAL_RCC_OscConfig+0x184>
 801653c:	f7ff fbdd 	bl	8015cfa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d012      	beq.n	801656e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016548:	f7fd fde0 	bl	801410c <HAL_GetTick>
 801654c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801654e:	e008      	b.n	8016562 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016550:	f7fd fddc 	bl	801410c <HAL_GetTick>
 8016554:	4602      	mov	r2, r0
 8016556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	2b64      	cmp	r3, #100	@ 0x64
 801655c:	d901      	bls.n	8016562 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801655e:	2303      	movs	r3, #3
 8016560:	e299      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8016562:	f7ff fbd9 	bl	8015d18 <LL_RCC_HSE_IsReady>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d0f1      	beq.n	8016550 <HAL_RCC_OscConfig+0x194>
 801656c:	e011      	b.n	8016592 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801656e:	f7fd fdcd 	bl	801410c <HAL_GetTick>
 8016572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8016574:	e008      	b.n	8016588 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016576:	f7fd fdc9 	bl	801410c <HAL_GetTick>
 801657a:	4602      	mov	r2, r0
 801657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	2b64      	cmp	r3, #100	@ 0x64
 8016582:	d901      	bls.n	8016588 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8016584:	2303      	movs	r3, #3
 8016586:	e286      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8016588:	f7ff fbc6 	bl	8015d18 <LL_RCC_HSE_IsReady>
 801658c:	4603      	mov	r3, r0
 801658e:	2b00      	cmp	r3, #0
 8016590:	d1f1      	bne.n	8016576 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	f003 0302 	and.w	r3, r3, #2
 801659a:	2b00      	cmp	r3, #0
 801659c:	d04c      	beq.n	8016638 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801659e:	f7ff fd9c 	bl	80160da <LL_RCC_GetSysClkSource>
 80165a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80165a4:	f7ff fea2 	bl	80162ec <LL_RCC_PLL_GetMainSource>
 80165a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	2b04      	cmp	r3, #4
 80165ae:	d005      	beq.n	80165bc <HAL_RCC_OscConfig+0x200>
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	2b0c      	cmp	r3, #12
 80165b4:	d10e      	bne.n	80165d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	2b02      	cmp	r3, #2
 80165ba:	d10b      	bne.n	80165d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d101      	bne.n	80165c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80165c4:	2301      	movs	r3, #1
 80165c6:	e266      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	691b      	ldr	r3, [r3, #16]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7ff fbe5 	bl	8015d9c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80165d2:	e031      	b.n	8016638 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d019      	beq.n	8016610 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80165dc:	f7ff fbae 	bl	8015d3c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80165e0:	f7fd fd94 	bl	801410c <HAL_GetTick>
 80165e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80165e6:	e008      	b.n	80165fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80165e8:	f7fd fd90 	bl	801410c <HAL_GetTick>
 80165ec:	4602      	mov	r2, r0
 80165ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d901      	bls.n	80165fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80165f6:	2303      	movs	r3, #3
 80165f8:	e24d      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80165fa:	f7ff fbbd 	bl	8015d78 <LL_RCC_HSI_IsReady>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	d0f1      	beq.n	80165e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	4618      	mov	r0, r3
 801660a:	f7ff fbc7 	bl	8015d9c <LL_RCC_HSI_SetCalibTrimming>
 801660e:	e013      	b.n	8016638 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016610:	f7ff fba3 	bl	8015d5a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016614:	f7fd fd7a 	bl	801410c <HAL_GetTick>
 8016618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801661a:	e008      	b.n	801662e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801661c:	f7fd fd76 	bl	801410c <HAL_GetTick>
 8016620:	4602      	mov	r2, r0
 8016622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016624:	1ad3      	subs	r3, r2, r3
 8016626:	2b02      	cmp	r3, #2
 8016628:	d901      	bls.n	801662e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801662a:	2303      	movs	r3, #3
 801662c:	e233      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801662e:	f7ff fba3 	bl	8015d78 <LL_RCC_HSI_IsReady>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d1f1      	bne.n	801661c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	f003 0308 	and.w	r3, r3, #8
 8016640:	2b00      	cmp	r3, #0
 8016642:	d106      	bne.n	8016652 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801664c:	2b00      	cmp	r3, #0
 801664e:	f000 80a3 	beq.w	8016798 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	695b      	ldr	r3, [r3, #20]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d076      	beq.n	8016748 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	f003 0310 	and.w	r3, r3, #16
 8016662:	2b00      	cmp	r3, #0
 8016664:	d046      	beq.n	80166f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8016666:	f7ff fc5a 	bl	8015f1e <LL_RCC_LSI1_IsReady>
 801666a:	4603      	mov	r3, r0
 801666c:	2b00      	cmp	r3, #0
 801666e:	d113      	bne.n	8016698 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8016670:	f7ff fc33 	bl	8015eda <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8016674:	f7fd fd4a 	bl	801410c <HAL_GetTick>
 8016678:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801667a:	e008      	b.n	801668e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801667c:	f7fd fd46 	bl	801410c <HAL_GetTick>
 8016680:	4602      	mov	r2, r0
 8016682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016684:	1ad3      	subs	r3, r2, r3
 8016686:	2b02      	cmp	r3, #2
 8016688:	d901      	bls.n	801668e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801668a:	2303      	movs	r3, #3
 801668c:	e203      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801668e:	f7ff fc46 	bl	8015f1e <LL_RCC_LSI1_IsReady>
 8016692:	4603      	mov	r3, r0
 8016694:	2b00      	cmp	r3, #0
 8016696:	d0f1      	beq.n	801667c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8016698:	f7ff fc53 	bl	8015f42 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801669c:	f7fd fd36 	bl	801410c <HAL_GetTick>
 80166a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80166a2:	e008      	b.n	80166b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80166a4:	f7fd fd32 	bl	801410c <HAL_GetTick>
 80166a8:	4602      	mov	r2, r0
 80166aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ac:	1ad3      	subs	r3, r2, r3
 80166ae:	2b03      	cmp	r3, #3
 80166b0:	d901      	bls.n	80166b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80166b2:	2303      	movs	r3, #3
 80166b4:	e1ef      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80166b6:	f7ff fc66 	bl	8015f86 <LL_RCC_LSI2_IsReady>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d0f1      	beq.n	80166a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	699b      	ldr	r3, [r3, #24]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7ff fc70 	bl	8015faa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80166ca:	f7ff fc17 	bl	8015efc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80166ce:	f7fd fd1d 	bl	801410c <HAL_GetTick>
 80166d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80166d4:	e008      	b.n	80166e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80166d6:	f7fd fd19 	bl	801410c <HAL_GetTick>
 80166da:	4602      	mov	r2, r0
 80166dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166de:	1ad3      	subs	r3, r2, r3
 80166e0:	2b02      	cmp	r3, #2
 80166e2:	d901      	bls.n	80166e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80166e4:	2303      	movs	r3, #3
 80166e6:	e1d6      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80166e8:	f7ff fc19 	bl	8015f1e <LL_RCC_LSI1_IsReady>
 80166ec:	4603      	mov	r3, r0
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d1f1      	bne.n	80166d6 <HAL_RCC_OscConfig+0x31a>
 80166f2:	e051      	b.n	8016798 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80166f4:	f7ff fbf1 	bl	8015eda <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80166f8:	f7fd fd08 	bl	801410c <HAL_GetTick>
 80166fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80166fe:	e00c      	b.n	801671a <HAL_RCC_OscConfig+0x35e>
 8016700:	20000008 	.word	0x20000008
 8016704:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8016708:	f7fd fd00 	bl	801410c <HAL_GetTick>
 801670c:	4602      	mov	r2, r0
 801670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	2b02      	cmp	r3, #2
 8016714:	d901      	bls.n	801671a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8016716:	2303      	movs	r3, #3
 8016718:	e1bd      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801671a:	f7ff fc00 	bl	8015f1e <LL_RCC_LSI1_IsReady>
 801671e:	4603      	mov	r3, r0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d0f1      	beq.n	8016708 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8016724:	f7ff fc1e 	bl	8015f64 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8016728:	e008      	b.n	801673c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801672a:	f7fd fcef 	bl	801410c <HAL_GetTick>
 801672e:	4602      	mov	r2, r0
 8016730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	2b03      	cmp	r3, #3
 8016736:	d901      	bls.n	801673c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8016738:	2303      	movs	r3, #3
 801673a:	e1ac      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801673c:	f7ff fc23 	bl	8015f86 <LL_RCC_LSI2_IsReady>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d1f1      	bne.n	801672a <HAL_RCC_OscConfig+0x36e>
 8016746:	e027      	b.n	8016798 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8016748:	f7ff fc0c 	bl	8015f64 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801674c:	f7fd fcde 	bl	801410c <HAL_GetTick>
 8016750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8016752:	e008      	b.n	8016766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8016754:	f7fd fcda 	bl	801410c <HAL_GetTick>
 8016758:	4602      	mov	r2, r0
 801675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675c:	1ad3      	subs	r3, r2, r3
 801675e:	2b03      	cmp	r3, #3
 8016760:	d901      	bls.n	8016766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8016762:	2303      	movs	r3, #3
 8016764:	e197      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8016766:	f7ff fc0e 	bl	8015f86 <LL_RCC_LSI2_IsReady>
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1f1      	bne.n	8016754 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8016770:	f7ff fbc4 	bl	8015efc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016774:	f7fd fcca 	bl	801410c <HAL_GetTick>
 8016778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801677a:	e008      	b.n	801678e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801677c:	f7fd fcc6 	bl	801410c <HAL_GetTick>
 8016780:	4602      	mov	r2, r0
 8016782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016784:	1ad3      	subs	r3, r2, r3
 8016786:	2b02      	cmp	r3, #2
 8016788:	d901      	bls.n	801678e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801678a:	2303      	movs	r3, #3
 801678c:	e183      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801678e:	f7ff fbc6 	bl	8015f1e <LL_RCC_LSI1_IsReady>
 8016792:	4603      	mov	r3, r0
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1f1      	bne.n	801677c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	f003 0304 	and.w	r3, r3, #4
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d05b      	beq.n	801685c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80167a4:	4ba7      	ldr	r3, [pc, #668]	@ (8016a44 <HAL_RCC_OscConfig+0x688>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d114      	bne.n	80167da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80167b0:	f7ff fa64 	bl	8015c7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80167b4:	f7fd fcaa 	bl	801410c <HAL_GetTick>
 80167b8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80167ba:	e008      	b.n	80167ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80167bc:	f7fd fca6 	bl	801410c <HAL_GetTick>
 80167c0:	4602      	mov	r2, r0
 80167c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c4:	1ad3      	subs	r3, r2, r3
 80167c6:	2b02      	cmp	r3, #2
 80167c8:	d901      	bls.n	80167ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80167ca:	2303      	movs	r3, #3
 80167cc:	e163      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80167ce:	4b9d      	ldr	r3, [pc, #628]	@ (8016a44 <HAL_RCC_OscConfig+0x688>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d0f0      	beq.n	80167bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	689b      	ldr	r3, [r3, #8]
 80167de:	2b01      	cmp	r3, #1
 80167e0:	d102      	bne.n	80167e8 <HAL_RCC_OscConfig+0x42c>
 80167e2:	f7ff fb24 	bl	8015e2e <LL_RCC_LSE_Enable>
 80167e6:	e00c      	b.n	8016802 <HAL_RCC_OscConfig+0x446>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	689b      	ldr	r3, [r3, #8]
 80167ec:	2b05      	cmp	r3, #5
 80167ee:	d104      	bne.n	80167fa <HAL_RCC_OscConfig+0x43e>
 80167f0:	f7ff fb3f 	bl	8015e72 <LL_RCC_LSE_EnableBypass>
 80167f4:	f7ff fb1b 	bl	8015e2e <LL_RCC_LSE_Enable>
 80167f8:	e003      	b.n	8016802 <HAL_RCC_OscConfig+0x446>
 80167fa:	f7ff fb29 	bl	8015e50 <LL_RCC_LSE_Disable>
 80167fe:	f7ff fb49 	bl	8015e94 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	689b      	ldr	r3, [r3, #8]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d014      	beq.n	8016834 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801680a:	f7fd fc7f 	bl	801410c <HAL_GetTick>
 801680e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8016810:	e00a      	b.n	8016828 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016812:	f7fd fc7b 	bl	801410c <HAL_GetTick>
 8016816:	4602      	mov	r2, r0
 8016818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801681a:	1ad3      	subs	r3, r2, r3
 801681c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016820:	4293      	cmp	r3, r2
 8016822:	d901      	bls.n	8016828 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8016824:	2303      	movs	r3, #3
 8016826:	e136      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8016828:	f7ff fb45 	bl	8015eb6 <LL_RCC_LSE_IsReady>
 801682c:	4603      	mov	r3, r0
 801682e:	2b00      	cmp	r3, #0
 8016830:	d0ef      	beq.n	8016812 <HAL_RCC_OscConfig+0x456>
 8016832:	e013      	b.n	801685c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016834:	f7fd fc6a 	bl	801410c <HAL_GetTick>
 8016838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801683a:	e00a      	b.n	8016852 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801683c:	f7fd fc66 	bl	801410c <HAL_GetTick>
 8016840:	4602      	mov	r2, r0
 8016842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016844:	1ad3      	subs	r3, r2, r3
 8016846:	f241 3288 	movw	r2, #5000	@ 0x1388
 801684a:	4293      	cmp	r3, r2
 801684c:	d901      	bls.n	8016852 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801684e:	2303      	movs	r3, #3
 8016850:	e121      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8016852:	f7ff fb30 	bl	8015eb6 <LL_RCC_LSE_IsReady>
 8016856:	4603      	mov	r3, r0
 8016858:	2b00      	cmp	r3, #0
 801685a:	d1ef      	bne.n	801683c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016864:	2b00      	cmp	r3, #0
 8016866:	d02c      	beq.n	80168c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801686c:	2b00      	cmp	r3, #0
 801686e:	d014      	beq.n	801689a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8016870:	f7ff faa9 	bl	8015dc6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016874:	f7fd fc4a 	bl	801410c <HAL_GetTick>
 8016878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801687a:	e008      	b.n	801688e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801687c:	f7fd fc46 	bl	801410c <HAL_GetTick>
 8016880:	4602      	mov	r2, r0
 8016882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016884:	1ad3      	subs	r3, r2, r3
 8016886:	2b02      	cmp	r3, #2
 8016888:	d901      	bls.n	801688e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801688a:	2303      	movs	r3, #3
 801688c:	e103      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801688e:	f7ff fabc 	bl	8015e0a <LL_RCC_HSI48_IsReady>
 8016892:	4603      	mov	r3, r0
 8016894:	2b00      	cmp	r3, #0
 8016896:	d0f1      	beq.n	801687c <HAL_RCC_OscConfig+0x4c0>
 8016898:	e013      	b.n	80168c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801689a:	f7ff faa5 	bl	8015de8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801689e:	f7fd fc35 	bl	801410c <HAL_GetTick>
 80168a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80168a4:	e008      	b.n	80168b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80168a6:	f7fd fc31 	bl	801410c <HAL_GetTick>
 80168aa:	4602      	mov	r2, r0
 80168ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ae:	1ad3      	subs	r3, r2, r3
 80168b0:	2b02      	cmp	r3, #2
 80168b2:	d901      	bls.n	80168b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80168b4:	2303      	movs	r3, #3
 80168b6:	e0ee      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80168b8:	f7ff faa7 	bl	8015e0a <LL_RCC_HSI48_IsReady>
 80168bc:	4603      	mov	r3, r0
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1f1      	bne.n	80168a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	f000 80e4 	beq.w	8016a94 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80168cc:	f7ff fc05 	bl	80160da <LL_RCC_GetSysClkSource>
 80168d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80168d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80168d6:	68db      	ldr	r3, [r3, #12]
 80168d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168de:	2b02      	cmp	r3, #2
 80168e0:	f040 80b4 	bne.w	8016a4c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f003 0203 	and.w	r2, r3, #3
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d123      	bne.n	801693a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d11c      	bne.n	801693a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	0a1b      	lsrs	r3, r3, #8
 8016904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801690c:	429a      	cmp	r2, r3
 801690e:	d114      	bne.n	801693a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801691a:	429a      	cmp	r2, r3
 801691c:	d10d      	bne.n	801693a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016928:	429a      	cmp	r2, r3
 801692a:	d106      	bne.n	801693a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8016936:	429a      	cmp	r2, r3
 8016938:	d05d      	beq.n	80169f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	2b0c      	cmp	r3, #12
 801693e:	d058      	beq.n	80169f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8016940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801694a:	2b00      	cmp	r3, #0
 801694c:	d001      	beq.n	8016952 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801694e:	2301      	movs	r3, #1
 8016950:	e0a1      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8016952:	f7ff fc85 	bl	8016260 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8016956:	f7fd fbd9 	bl	801410c <HAL_GetTick>
 801695a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801695c:	e008      	b.n	8016970 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801695e:	f7fd fbd5 	bl	801410c <HAL_GetTick>
 8016962:	4602      	mov	r2, r0
 8016964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016966:	1ad3      	subs	r3, r2, r3
 8016968:	2b02      	cmp	r3, #2
 801696a:	d901      	bls.n	8016970 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801696c:	2303      	movs	r3, #3
 801696e:	e092      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801697a:	2b00      	cmp	r3, #0
 801697c:	d1ef      	bne.n	801695e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801697e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016982:	68da      	ldr	r2, [r3, #12]
 8016984:	4b30      	ldr	r3, [pc, #192]	@ (8016a48 <HAL_RCC_OscConfig+0x68c>)
 8016986:	4013      	ands	r3, r2
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801698c:	687a      	ldr	r2, [r7, #4]
 801698e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8016990:	4311      	orrs	r1, r2
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8016996:	0212      	lsls	r2, r2, #8
 8016998:	4311      	orrs	r1, r2
 801699a:	687a      	ldr	r2, [r7, #4]
 801699c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801699e:	4311      	orrs	r1, r2
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80169a4:	4311      	orrs	r1, r2
 80169a6:	687a      	ldr	r2, [r7, #4]
 80169a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80169aa:	430a      	orrs	r2, r1
 80169ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80169b0:	4313      	orrs	r3, r2
 80169b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80169b4:	f7ff fc45 	bl	8016242 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80169b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169bc:	68db      	ldr	r3, [r3, #12]
 80169be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80169c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80169c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80169c8:	f7fd fba0 	bl	801410c <HAL_GetTick>
 80169cc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80169ce:	e008      	b.n	80169e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80169d0:	f7fd fb9c 	bl	801410c <HAL_GetTick>
 80169d4:	4602      	mov	r2, r0
 80169d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169d8:	1ad3      	subs	r3, r2, r3
 80169da:	2b02      	cmp	r3, #2
 80169dc:	d901      	bls.n	80169e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80169de:	2303      	movs	r3, #3
 80169e0:	e059      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80169e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d0ef      	beq.n	80169d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80169f0:	e050      	b.n	8016a94 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80169f2:	2301      	movs	r3, #1
 80169f4:	e04f      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80169f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d147      	bne.n	8016a94 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8016a04:	f7ff fc1d 	bl	8016242 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8016a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a0c:	68db      	ldr	r3, [r3, #12]
 8016a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8016a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8016a18:	f7fd fb78 	bl	801410c <HAL_GetTick>
 8016a1c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016a1e:	e008      	b.n	8016a32 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016a20:	f7fd fb74 	bl	801410c <HAL_GetTick>
 8016a24:	4602      	mov	r2, r0
 8016a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a28:	1ad3      	subs	r3, r2, r3
 8016a2a:	2b02      	cmp	r3, #2
 8016a2c:	d901      	bls.n	8016a32 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8016a2e:	2303      	movs	r3, #3
 8016a30:	e031      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d0ef      	beq.n	8016a20 <HAL_RCC_OscConfig+0x664>
 8016a40:	e028      	b.n	8016a94 <HAL_RCC_OscConfig+0x6d8>
 8016a42:	bf00      	nop
 8016a44:	58000400 	.word	0x58000400
 8016a48:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	2b0c      	cmp	r3, #12
 8016a50:	d01e      	beq.n	8016a90 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016a52:	f7ff fc05 	bl	8016260 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016a56:	f7fd fb59 	bl	801410c <HAL_GetTick>
 8016a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016a5c:	e008      	b.n	8016a70 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016a5e:	f7fd fb55 	bl	801410c <HAL_GetTick>
 8016a62:	4602      	mov	r2, r0
 8016a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a66:	1ad3      	subs	r3, r2, r3
 8016a68:	2b02      	cmp	r3, #2
 8016a6a:	d901      	bls.n	8016a70 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8016a6c:	2303      	movs	r3, #3
 8016a6e:	e012      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d1ef      	bne.n	8016a5e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8016a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016a82:	68da      	ldr	r2, [r3, #12]
 8016a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016a88:	4b05      	ldr	r3, [pc, #20]	@ (8016aa0 <HAL_RCC_OscConfig+0x6e4>)
 8016a8a:	4013      	ands	r3, r2
 8016a8c:	60cb      	str	r3, [r1, #12]
 8016a8e:	e001      	b.n	8016a94 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8016a90:	2301      	movs	r3, #1
 8016a92:	e000      	b.n	8016a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8016a94:	2300      	movs	r3, #0
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	3734      	adds	r7, #52	@ 0x34
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd90      	pop	{r4, r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	eefefffc 	.word	0xeefefffc

08016aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b084      	sub	sp, #16
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d101      	bne.n	8016ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	e12d      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016ab8:	4b98      	ldr	r3, [pc, #608]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f003 0307 	and.w	r3, r3, #7
 8016ac0:	683a      	ldr	r2, [r7, #0]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d91b      	bls.n	8016afe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016ac6:	4b95      	ldr	r3, [pc, #596]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	f023 0207 	bic.w	r2, r3, #7
 8016ace:	4993      	ldr	r1, [pc, #588]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	4313      	orrs	r3, r2
 8016ad4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016ad6:	f7fd fb19 	bl	801410c <HAL_GetTick>
 8016ada:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016adc:	e008      	b.n	8016af0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8016ade:	f7fd fb15 	bl	801410c <HAL_GetTick>
 8016ae2:	4602      	mov	r2, r0
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	1ad3      	subs	r3, r2, r3
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d901      	bls.n	8016af0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8016aec:	2303      	movs	r3, #3
 8016aee:	e111      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016af0:	4b8a      	ldr	r3, [pc, #552]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f003 0307 	and.w	r3, r3, #7
 8016af8:	683a      	ldr	r2, [r7, #0]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d1ef      	bne.n	8016ade <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	f003 0302 	and.w	r3, r3, #2
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d016      	beq.n	8016b38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	689b      	ldr	r3, [r3, #8]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7ff faef 	bl	80160f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016b14:	f7fd fafa 	bl	801410c <HAL_GetTick>
 8016b18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8016b1a:	e008      	b.n	8016b2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016b1c:	f7fd faf6 	bl	801410c <HAL_GetTick>
 8016b20:	4602      	mov	r2, r0
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	d901      	bls.n	8016b2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	e0f2      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8016b2e:	f7ff fbe9 	bl	8016304 <LL_RCC_IsActiveFlag_HPRE>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d0f1      	beq.n	8016b1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f003 0320 	and.w	r3, r3, #32
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d016      	beq.n	8016b72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	695b      	ldr	r3, [r3, #20]
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7ff fae6 	bl	801611a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016b4e:	f7fd fadd 	bl	801410c <HAL_GetTick>
 8016b52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8016b54:	e008      	b.n	8016b68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016b56:	f7fd fad9 	bl	801410c <HAL_GetTick>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	1ad3      	subs	r3, r2, r3
 8016b60:	2b02      	cmp	r3, #2
 8016b62:	d901      	bls.n	8016b68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8016b64:	2303      	movs	r3, #3
 8016b66:	e0d5      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8016b68:	f7ff fbde 	bl	8016328 <LL_RCC_IsActiveFlag_C2HPRE>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d0f1      	beq.n	8016b56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d016      	beq.n	8016bac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	699b      	ldr	r3, [r3, #24]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ff fadf 	bl	8016146 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016b88:	f7fd fac0 	bl	801410c <HAL_GetTick>
 8016b8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8016b8e:	e008      	b.n	8016ba2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016b90:	f7fd fabc 	bl	801410c <HAL_GetTick>
 8016b94:	4602      	mov	r2, r0
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	1ad3      	subs	r3, r2, r3
 8016b9a:	2b02      	cmp	r3, #2
 8016b9c:	d901      	bls.n	8016ba2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8016b9e:	2303      	movs	r3, #3
 8016ba0:	e0b8      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8016ba2:	f7ff fbd4 	bl	801634e <LL_RCC_IsActiveFlag_SHDHPRE>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d0f1      	beq.n	8016b90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	f003 0304 	and.w	r3, r3, #4
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d016      	beq.n	8016be6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7ff fad9 	bl	8016174 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016bc2:	f7fd faa3 	bl	801410c <HAL_GetTick>
 8016bc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8016bc8:	e008      	b.n	8016bdc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016bca:	f7fd fa9f 	bl	801410c <HAL_GetTick>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	2b02      	cmp	r3, #2
 8016bd6:	d901      	bls.n	8016bdc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8016bd8:	2303      	movs	r3, #3
 8016bda:	e09b      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8016bdc:	f7ff fbca 	bl	8016374 <LL_RCC_IsActiveFlag_PPRE1>
 8016be0:	4603      	mov	r3, r0
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d0f1      	beq.n	8016bca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	f003 0308 	and.w	r3, r3, #8
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d017      	beq.n	8016c22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	691b      	ldr	r3, [r3, #16]
 8016bf6:	00db      	lsls	r3, r3, #3
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7ff facf 	bl	801619c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8016bfe:	f7fd fa85 	bl	801410c <HAL_GetTick>
 8016c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8016c04:	e008      	b.n	8016c18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8016c06:	f7fd fa81 	bl	801410c <HAL_GetTick>
 8016c0a:	4602      	mov	r2, r0
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	1ad3      	subs	r3, r2, r3
 8016c10:	2b02      	cmp	r3, #2
 8016c12:	d901      	bls.n	8016c18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8016c14:	2303      	movs	r3, #3
 8016c16:	e07d      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8016c18:	f7ff fbbe 	bl	8016398 <LL_RCC_IsActiveFlag_PPRE2>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d0f1      	beq.n	8016c06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f003 0301 	and.w	r3, r3, #1
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d043      	beq.n	8016cb6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	2b02      	cmp	r3, #2
 8016c34:	d106      	bne.n	8016c44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8016c36:	f7ff f86f 	bl	8015d18 <LL_RCC_HSE_IsReady>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d11e      	bne.n	8016c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016c40:	2301      	movs	r3, #1
 8016c42:	e067      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	2b03      	cmp	r3, #3
 8016c4a:	d106      	bne.n	8016c5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8016c4c:	f7ff fb17 	bl	801627e <LL_RCC_PLL_IsReady>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d113      	bne.n	8016c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016c56:	2301      	movs	r3, #1
 8016c58:	e05c      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d106      	bne.n	8016c70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8016c62:	f7ff f9d7 	bl	8016014 <LL_RCC_MSI_IsReady>
 8016c66:	4603      	mov	r3, r0
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d108      	bne.n	8016c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	e051      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8016c70:	f7ff f882 	bl	8015d78 <LL_RCC_HSI_IsReady>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d101      	bne.n	8016c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	e04a      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	685b      	ldr	r3, [r3, #4]
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7ff fa15 	bl	80160b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016c88:	f7fd fa40 	bl	801410c <HAL_GetTick>
 8016c8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016c8e:	e00a      	b.n	8016ca6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016c90:	f7fd fa3c 	bl	801410c <HAL_GetTick>
 8016c94:	4602      	mov	r2, r0
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	d901      	bls.n	8016ca6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8016ca2:	2303      	movs	r3, #3
 8016ca4:	e036      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016ca6:	f7ff fa18 	bl	80160da <LL_RCC_GetSysClkSource>
 8016caa:	4602      	mov	r2, r0
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d1ec      	bne.n	8016c90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016cb6:	4b19      	ldr	r3, [pc, #100]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	f003 0307 	and.w	r3, r3, #7
 8016cbe:	683a      	ldr	r2, [r7, #0]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d21b      	bcs.n	8016cfc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016cc4:	4b15      	ldr	r3, [pc, #84]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	f023 0207 	bic.w	r2, r3, #7
 8016ccc:	4913      	ldr	r1, [pc, #76]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	4313      	orrs	r3, r2
 8016cd2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016cd4:	f7fd fa1a 	bl	801410c <HAL_GetTick>
 8016cd8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016cda:	e008      	b.n	8016cee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8016cdc:	f7fd fa16 	bl	801410c <HAL_GetTick>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	1ad3      	subs	r3, r2, r3
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	d901      	bls.n	8016cee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8016cea:	2303      	movs	r3, #3
 8016cec:	e012      	b.n	8016d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016cee:	4b0b      	ldr	r3, [pc, #44]	@ (8016d1c <HAL_RCC_ClockConfig+0x278>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f003 0307 	and.w	r3, r3, #7
 8016cf6:	683a      	ldr	r2, [r7, #0]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d1ef      	bne.n	8016cdc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016cfc:	f000 f87e 	bl	8016dfc <HAL_RCC_GetHCLKFreq>
 8016d00:	4603      	mov	r3, r0
 8016d02:	4a07      	ldr	r2, [pc, #28]	@ (8016d20 <HAL_RCC_ClockConfig+0x27c>)
 8016d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8016d06:	f7fd fa0d 	bl	8014124 <HAL_GetTickPrio>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7ea f9af 	bl	8001070 <HAL_InitTick>
 8016d12:	4603      	mov	r3, r0
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	3710      	adds	r7, #16
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}
 8016d1c:	58004000 	.word	0x58004000
 8016d20:	20000008 	.word	0x20000008

08016d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016d24:	b590      	push	{r4, r7, lr}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016d2a:	f7ff f9d6 	bl	80160da <LL_RCC_GetSysClkSource>
 8016d2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d10a      	bne.n	8016d4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8016d36:	f7ff f992 	bl	801605e <LL_RCC_MSI_GetRange>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	091b      	lsrs	r3, r3, #4
 8016d3e:	f003 030f 	and.w	r3, r3, #15
 8016d42:	4a2b      	ldr	r2, [pc, #172]	@ (8016df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8016d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d48:	60fb      	str	r3, [r7, #12]
 8016d4a:	e04b      	b.n	8016de4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b04      	cmp	r3, #4
 8016d50:	d102      	bne.n	8016d58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8016d52:	4b28      	ldr	r3, [pc, #160]	@ (8016df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d54:	60fb      	str	r3, [r7, #12]
 8016d56:	e045      	b.n	8016de4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2b08      	cmp	r3, #8
 8016d5c:	d10a      	bne.n	8016d74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8016d5e:	f7fe ffab 	bl	8015cb8 <LL_RCC_HSE_IsEnabledDiv2>
 8016d62:	4603      	mov	r3, r0
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	d102      	bne.n	8016d6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8016d68:	4b22      	ldr	r3, [pc, #136]	@ (8016df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d6a:	60fb      	str	r3, [r7, #12]
 8016d6c:	e03a      	b.n	8016de4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8016d6e:	4b22      	ldr	r3, [pc, #136]	@ (8016df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8016d70:	60fb      	str	r3, [r7, #12]
 8016d72:	e037      	b.n	8016de4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8016d74:	f7ff faba 	bl	80162ec <LL_RCC_PLL_GetMainSource>
 8016d78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	2b02      	cmp	r3, #2
 8016d7e:	d003      	beq.n	8016d88 <HAL_RCC_GetSysClockFreq+0x64>
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	2b03      	cmp	r3, #3
 8016d84:	d003      	beq.n	8016d8e <HAL_RCC_GetSysClockFreq+0x6a>
 8016d86:	e00d      	b.n	8016da4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8016d88:	4b1a      	ldr	r3, [pc, #104]	@ (8016df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d8a:	60bb      	str	r3, [r7, #8]
        break;
 8016d8c:	e015      	b.n	8016dba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8016d8e:	f7fe ff93 	bl	8015cb8 <LL_RCC_HSE_IsEnabledDiv2>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	d102      	bne.n	8016d9e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8016d98:	4b16      	ldr	r3, [pc, #88]	@ (8016df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d9a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8016d9c:	e00d      	b.n	8016dba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8016d9e:	4b16      	ldr	r3, [pc, #88]	@ (8016df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8016da0:	60bb      	str	r3, [r7, #8]
        break;
 8016da2:	e00a      	b.n	8016dba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8016da4:	f7ff f95b 	bl	801605e <LL_RCC_MSI_GetRange>
 8016da8:	4603      	mov	r3, r0
 8016daa:	091b      	lsrs	r3, r3, #4
 8016dac:	f003 030f 	and.w	r3, r3, #15
 8016db0:	4a0f      	ldr	r2, [pc, #60]	@ (8016df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8016db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016db6:	60bb      	str	r3, [r7, #8]
        break;
 8016db8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8016dba:	f7ff fa72 	bl	80162a2 <LL_RCC_PLL_GetN>
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	fb03 f402 	mul.w	r4, r3, r2
 8016dc6:	f7ff fa85 	bl	80162d4 <LL_RCC_PLL_GetDivider>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	091b      	lsrs	r3, r3, #4
 8016dce:	3301      	adds	r3, #1
 8016dd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8016dd4:	f7ff fa72 	bl	80162bc <LL_RCC_PLL_GetR>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	0f5b      	lsrs	r3, r3, #29
 8016ddc:	3301      	adds	r3, #1
 8016dde:	fbb4 f3f3 	udiv	r3, r4, r3
 8016de2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8016de4:	68fb      	ldr	r3, [r7, #12]
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3714      	adds	r7, #20
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd90      	pop	{r4, r7, pc}
 8016dee:	bf00      	nop
 8016df0:	0801eccc 	.word	0x0801eccc
 8016df4:	00f42400 	.word	0x00f42400
 8016df8:	01e84800 	.word	0x01e84800

08016dfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016dfc:	b598      	push	{r3, r4, r7, lr}
 8016dfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8016e00:	f7ff ff90 	bl	8016d24 <HAL_RCC_GetSysClockFreq>
 8016e04:	4604      	mov	r4, r0
 8016e06:	f7ff f9dd 	bl	80161c4 <LL_RCC_GetAHBPrescaler>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	091b      	lsrs	r3, r3, #4
 8016e0e:	f003 030f 	and.w	r3, r3, #15
 8016e12:	4a03      	ldr	r2, [pc, #12]	@ (8016e20 <HAL_RCC_GetHCLKFreq+0x24>)
 8016e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	bd98      	pop	{r3, r4, r7, pc}
 8016e20:	0801ec6c 	.word	0x0801ec6c

08016e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016e24:	b598      	push	{r3, r4, r7, lr}
 8016e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8016e28:	f7ff ffe8 	bl	8016dfc <HAL_RCC_GetHCLKFreq>
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	f7ff f9f0 	bl	8016212 <LL_RCC_GetAPB1Prescaler>
 8016e32:	4603      	mov	r3, r0
 8016e34:	0a1b      	lsrs	r3, r3, #8
 8016e36:	f003 0307 	and.w	r3, r3, #7
 8016e3a:	4a04      	ldr	r2, [pc, #16]	@ (8016e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8016e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e40:	f003 031f 	and.w	r3, r3, #31
 8016e44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	bd98      	pop	{r3, r4, r7, pc}
 8016e4c:	0801ecac 	.word	0x0801ecac

08016e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016e50:	b598      	push	{r3, r4, r7, lr}
 8016e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8016e54:	f7ff ffd2 	bl	8016dfc <HAL_RCC_GetHCLKFreq>
 8016e58:	4604      	mov	r4, r0
 8016e5a:	f7ff f9e6 	bl	801622a <LL_RCC_GetAPB2Prescaler>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	0adb      	lsrs	r3, r3, #11
 8016e62:	f003 0307 	and.w	r3, r3, #7
 8016e66:	4a04      	ldr	r2, [pc, #16]	@ (8016e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8016e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e6c:	f003 031f 	and.w	r3, r3, #31
 8016e70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	bd98      	pop	{r3, r4, r7, pc}
 8016e78:	0801ecac 	.word	0x0801ecac

08016e7c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	226f      	movs	r2, #111	@ 0x6f
 8016e8a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8016e8c:	f7ff f925 	bl	80160da <LL_RCC_GetSysClkSource>
 8016e90:	4602      	mov	r2, r0
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8016e96:	f7ff f995 	bl	80161c4 <LL_RCC_GetAHBPrescaler>
 8016e9a:	4602      	mov	r2, r0
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8016ea0:	f7ff f9b7 	bl	8016212 <LL_RCC_GetAPB1Prescaler>
 8016ea4:	4602      	mov	r2, r0
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8016eaa:	f7ff f9be 	bl	801622a <LL_RCC_GetAPB2Prescaler>
 8016eae:	4602      	mov	r2, r0
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8016eb4:	f7ff f992 	bl	80161dc <LL_C2_RCC_GetAHBPrescaler>
 8016eb8:	4602      	mov	r2, r0
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8016ebe:	f7ff f99a 	bl	80161f6 <LL_RCC_GetAHB4Prescaler>
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8016ec8:	4b04      	ldr	r3, [pc, #16]	@ (8016edc <HAL_RCC_GetClockConfig+0x60>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	f003 0207 	and.w	r2, r3, #7
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	601a      	str	r2, [r3, #0]
}
 8016ed4:	bf00      	nop
 8016ed6:	3708      	adds	r7, #8
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	58004000 	.word	0x58004000

08016ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8016ee0:	b590      	push	{r4, r7, lr}
 8016ee2:	b085      	sub	sp, #20
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2bb0      	cmp	r3, #176	@ 0xb0
 8016eec:	d903      	bls.n	8016ef6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8016eee:	4b15      	ldr	r3, [pc, #84]	@ (8016f44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8016ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ef2:	60fb      	str	r3, [r7, #12]
 8016ef4:	e007      	b.n	8016f06 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	091b      	lsrs	r3, r3, #4
 8016efa:	f003 030f 	and.w	r3, r3, #15
 8016efe:	4a11      	ldr	r2, [pc, #68]	@ (8016f44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8016f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f04:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8016f06:	f7ff f976 	bl	80161f6 <LL_RCC_GetAHB4Prescaler>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	091b      	lsrs	r3, r3, #4
 8016f0e:	f003 030f 	and.w	r3, r3, #15
 8016f12:	4a0d      	ldr	r2, [pc, #52]	@ (8016f48 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8016f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f18:	68fa      	ldr	r2, [r7, #12]
 8016f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f1e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	4a0a      	ldr	r2, [pc, #40]	@ (8016f4c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8016f24:	fba2 2303 	umull	r2, r3, r2, r3
 8016f28:	0c9c      	lsrs	r4, r3, #18
 8016f2a:	f7fe feb7 	bl	8015c9c <HAL_PWREx_GetVoltageRange>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	4619      	mov	r1, r3
 8016f32:	4620      	mov	r0, r4
 8016f34:	f000 f80c 	bl	8016f50 <RCC_SetFlashLatency>
 8016f38:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3714      	adds	r7, #20
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd90      	pop	{r4, r7, pc}
 8016f42:	bf00      	nop
 8016f44:	0801eccc 	.word	0x0801eccc
 8016f48:	0801ec6c 	.word	0x0801ec6c
 8016f4c:	431bde83 	.word	0x431bde83

08016f50 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8016f50:	b590      	push	{r4, r7, lr}
 8016f52:	b093      	sub	sp, #76	@ 0x4c
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8016f5a:	4b37      	ldr	r3, [pc, #220]	@ (8017038 <RCC_SetFlashLatency+0xe8>)
 8016f5c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8016f60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8016f66:	4a35      	ldr	r2, [pc, #212]	@ (801703c <RCC_SetFlashLatency+0xec>)
 8016f68:	f107 031c 	add.w	r3, r7, #28
 8016f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8016f72:	4b33      	ldr	r3, [pc, #204]	@ (8017040 <RCC_SetFlashLatency+0xf0>)
 8016f74:	f107 040c 	add.w	r4, r7, #12
 8016f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8016f7e:	2300      	movs	r3, #0
 8016f80:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f88:	d11a      	bne.n	8016fc0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8016f8e:	e013      	b.n	8016fb8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8016f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	3348      	adds	r3, #72	@ 0x48
 8016f96:	443b      	add	r3, r7
 8016f98:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d807      	bhi.n	8016fb2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8016fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fa4:	009b      	lsls	r3, r3, #2
 8016fa6:	3348      	adds	r3, #72	@ 0x48
 8016fa8:	443b      	add	r3, r7
 8016faa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8016fae:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8016fb0:	e020      	b.n	8016ff4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8016fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fb4:	3301      	adds	r3, #1
 8016fb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8016fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fba:	2b03      	cmp	r3, #3
 8016fbc:	d9e8      	bls.n	8016f90 <RCC_SetFlashLatency+0x40>
 8016fbe:	e019      	b.n	8016ff4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fc4:	e013      	b.n	8016fee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8016fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fc8:	009b      	lsls	r3, r3, #2
 8016fca:	3348      	adds	r3, #72	@ 0x48
 8016fcc:	443b      	add	r3, r7
 8016fce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d807      	bhi.n	8016fe8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8016fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	3348      	adds	r3, #72	@ 0x48
 8016fde:	443b      	add	r3, r7
 8016fe0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8016fe4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8016fe6:	e005      	b.n	8016ff4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8016fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fea:	3301      	adds	r3, #1
 8016fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ff0:	2b02      	cmp	r3, #2
 8016ff2:	d9e8      	bls.n	8016fc6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8016ff4:	4b13      	ldr	r3, [pc, #76]	@ (8017044 <RCC_SetFlashLatency+0xf4>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f023 0207 	bic.w	r2, r3, #7
 8016ffc:	4911      	ldr	r1, [pc, #68]	@ (8017044 <RCC_SetFlashLatency+0xf4>)
 8016ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017000:	4313      	orrs	r3, r2
 8017002:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017004:	f7fd f882 	bl	801410c <HAL_GetTick>
 8017008:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801700a:	e008      	b.n	801701e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801700c:	f7fd f87e 	bl	801410c <HAL_GetTick>
 8017010:	4602      	mov	r2, r0
 8017012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017014:	1ad3      	subs	r3, r2, r3
 8017016:	2b02      	cmp	r3, #2
 8017018:	d901      	bls.n	801701e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801701a:	2303      	movs	r3, #3
 801701c:	e007      	b.n	801702e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801701e:	4b09      	ldr	r3, [pc, #36]	@ (8017044 <RCC_SetFlashLatency+0xf4>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f003 0307 	and.w	r3, r3, #7
 8017026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017028:	429a      	cmp	r2, r3
 801702a:	d1ef      	bne.n	801700c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801702c:	2300      	movs	r3, #0
}
 801702e:	4618      	mov	r0, r3
 8017030:	374c      	adds	r7, #76	@ 0x4c
 8017032:	46bd      	mov	sp, r7
 8017034:	bd90      	pop	{r4, r7, pc}
 8017036:	bf00      	nop
 8017038:	0801e9e8 	.word	0x0801e9e8
 801703c:	0801e9f8 	.word	0x0801e9f8
 8017040:	0801ea04 	.word	0x0801ea04
 8017044:	58004000 	.word	0x58004000

08017048 <LL_RCC_LSE_IsEnabled>:
{
 8017048:	b480      	push	{r7}
 801704a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801704c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017054:	f003 0301 	and.w	r3, r3, #1
 8017058:	2b01      	cmp	r3, #1
 801705a:	d101      	bne.n	8017060 <LL_RCC_LSE_IsEnabled+0x18>
 801705c:	2301      	movs	r3, #1
 801705e:	e000      	b.n	8017062 <LL_RCC_LSE_IsEnabled+0x1a>
 8017060:	2300      	movs	r3, #0
}
 8017062:	4618      	mov	r0, r3
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <LL_RCC_LSE_IsReady>:
{
 801706c:	b480      	push	{r7}
 801706e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017078:	f003 0302 	and.w	r3, r3, #2
 801707c:	2b02      	cmp	r3, #2
 801707e:	d101      	bne.n	8017084 <LL_RCC_LSE_IsReady+0x18>
 8017080:	2301      	movs	r3, #1
 8017082:	e000      	b.n	8017086 <LL_RCC_LSE_IsReady+0x1a>
 8017084:	2300      	movs	r3, #0
}
 8017086:	4618      	mov	r0, r3
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <LL_RCC_MSI_EnablePLLMode>:
{
 8017090:	b480      	push	{r7}
 8017092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801709e:	f043 0304 	orr.w	r3, r3, #4
 80170a2:	6013      	str	r3, [r2, #0]
}
 80170a4:	bf00      	nop
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr

080170ae <LL_RCC_SetRFWKPClockSource>:
{
 80170ae:	b480      	push	{r7}
 80170b0:	b083      	sub	sp, #12
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80170b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80170ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80170be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80170c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	4313      	orrs	r3, r2
 80170ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80170ce:	bf00      	nop
 80170d0:	370c      	adds	r7, #12
 80170d2:	46bd      	mov	sp, r7
 80170d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d8:	4770      	bx	lr

080170da <LL_RCC_SetSMPSClockSource>:
{
 80170da:	b480      	push	{r7}
 80170dc:	b083      	sub	sp, #12
 80170de:	af00      	add	r7, sp, #0
 80170e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80170e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80170e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170e8:	f023 0203 	bic.w	r2, r3, #3
 80170ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4313      	orrs	r3, r2
 80170f4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80170f6:	bf00      	nop
 80170f8:	370c      	adds	r7, #12
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr

08017102 <LL_RCC_SetSMPSPrescaler>:
{
 8017102:	b480      	push	{r7}
 8017104:	b083      	sub	sp, #12
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801710a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017110:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8017114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	4313      	orrs	r3, r2
 801711c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 801711e:	bf00      	nop
 8017120:	370c      	adds	r7, #12
 8017122:	46bd      	mov	sp, r7
 8017124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017128:	4770      	bx	lr

0801712a <LL_RCC_SetUSARTClockSource>:
{
 801712a:	b480      	push	{r7}
 801712c:	b083      	sub	sp, #12
 801712e:	af00      	add	r7, sp, #0
 8017130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801713a:	f023 0203 	bic.w	r2, r3, #3
 801713e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4313      	orrs	r3, r2
 8017146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801714a:	bf00      	nop
 801714c:	370c      	adds	r7, #12
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr

08017156 <LL_RCC_SetLPUARTClockSource>:
{
 8017156:	b480      	push	{r7}
 8017158:	b083      	sub	sp, #12
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801715e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017166:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801716a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	4313      	orrs	r3, r2
 8017172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8017176:	bf00      	nop
 8017178:	370c      	adds	r7, #12
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr

08017182 <LL_RCC_SetI2CClockSource>:
{
 8017182:	b480      	push	{r7}
 8017184:	b083      	sub	sp, #12
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801718a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801718e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	091b      	lsrs	r3, r3, #4
 8017196:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 801719a:	43db      	mvns	r3, r3
 801719c:	401a      	ands	r2, r3
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	011b      	lsls	r3, r3, #4
 80171a2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80171a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80171aa:	4313      	orrs	r3, r2
 80171ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80171b0:	bf00      	nop
 80171b2:	370c      	adds	r7, #12
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr

080171bc <LL_RCC_SetLPTIMClockSource>:
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80171c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80171c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	0c1b      	lsrs	r3, r3, #16
 80171d0:	041b      	lsls	r3, r3, #16
 80171d2:	43db      	mvns	r3, r3
 80171d4:	401a      	ands	r2, r3
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	041b      	lsls	r3, r3, #16
 80171da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80171de:	4313      	orrs	r3, r2
 80171e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80171e4:	bf00      	nop
 80171e6:	370c      	adds	r7, #12
 80171e8:	46bd      	mov	sp, r7
 80171ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ee:	4770      	bx	lr

080171f0 <LL_RCC_SetSAIClockSource>:
{
 80171f0:	b480      	push	{r7}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80171f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80171fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017200:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8017204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	4313      	orrs	r3, r2
 801720c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8017210:	bf00      	nop
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <LL_RCC_SetRNGClockSource>:
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801722c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8017230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	4313      	orrs	r3, r2
 8017238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801723c:	bf00      	nop
 801723e:	370c      	adds	r7, #12
 8017240:	46bd      	mov	sp, r7
 8017242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017246:	4770      	bx	lr

08017248 <LL_RCC_SetCLK48ClockSource>:
{
 8017248:	b480      	push	{r7}
 801724a:	b083      	sub	sp, #12
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801725c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	4313      	orrs	r3, r2
 8017264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8017268:	bf00      	nop
 801726a:	370c      	adds	r7, #12
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr

08017274 <LL_RCC_SetUSBClockSource>:
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b082      	sub	sp, #8
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7ff ffe3 	bl	8017248 <LL_RCC_SetCLK48ClockSource>
}
 8017282:	bf00      	nop
 8017284:	3708      	adds	r7, #8
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}

0801728a <LL_RCC_SetADCClockSource>:
{
 801728a:	b480      	push	{r7}
 801728c:	b083      	sub	sp, #12
 801728e:	af00      	add	r7, sp, #0
 8017290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801729a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801729e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	4313      	orrs	r3, r2
 80172a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80172aa:	bf00      	nop
 80172ac:	370c      	adds	r7, #12
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <LL_RCC_SetRTCClockSource>:
{
 80172b6:	b480      	push	{r7}
 80172b8:	b083      	sub	sp, #12
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80172be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80172c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80172c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80172ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4313      	orrs	r3, r2
 80172d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80172d6:	bf00      	nop
 80172d8:	370c      	adds	r7, #12
 80172da:	46bd      	mov	sp, r7
 80172dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e0:	4770      	bx	lr

080172e2 <LL_RCC_GetRTCClockSource>:
{
 80172e2:	b480      	push	{r7}
 80172e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80172e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80172ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80172ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr

080172fc <LL_RCC_ForceBackupDomainReset>:
{
 80172fc:	b480      	push	{r7}
 80172fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801730c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8017314:	bf00      	nop
 8017316:	46bd      	mov	sp, r7
 8017318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731c:	4770      	bx	lr

0801731e <LL_RCC_ReleaseBackupDomainReset>:
{
 801731e:	b480      	push	{r7}
 8017320:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801732a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801732e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8017336:	bf00      	nop
 8017338:	46bd      	mov	sp, r7
 801733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733e:	4770      	bx	lr

08017340 <LL_RCC_PLLSAI1_Enable>:
{
 8017340:	b480      	push	{r7}
 8017342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801734e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017352:	6013      	str	r3, [r2, #0]
}
 8017354:	bf00      	nop
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr

0801735e <LL_RCC_PLLSAI1_Disable>:
{
 801735e:	b480      	push	{r7}
 8017360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801736c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017370:	6013      	str	r3, [r2, #0]
}
 8017372:	bf00      	nop
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr

0801737c <LL_RCC_PLLSAI1_IsReady>:
{
 801737c:	b480      	push	{r7}
 801737e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8017380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801738a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801738e:	d101      	bne.n	8017394 <LL_RCC_PLLSAI1_IsReady+0x18>
 8017390:	2301      	movs	r3, #1
 8017392:	e000      	b.n	8017396 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8017394:	2300      	movs	r3, #0
}
 8017396:	4618      	mov	r0, r3
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr

080173a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b088      	sub	sp, #32
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80173a8:	2300      	movs	r3, #0
 80173aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80173ac:	2300      	movs	r3, #0
 80173ae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d034      	beq.n	8017426 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80173c4:	d021      	beq.n	801740a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80173c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80173ca:	d81b      	bhi.n	8017404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80173cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80173d0:	d01d      	beq.n	801740e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80173d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80173d6:	d815      	bhi.n	8017404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d00b      	beq.n	80173f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80173dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80173e0:	d110      	bne.n	8017404 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80173e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80173e6:	68db      	ldr	r3, [r3, #12]
 80173e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80173ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80173f0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80173f2:	e00d      	b.n	8017410 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	3304      	adds	r3, #4
 80173f8:	4618      	mov	r0, r3
 80173fa:	f000 f94d 	bl	8017698 <RCCEx_PLLSAI1_ConfigNP>
 80173fe:	4603      	mov	r3, r0
 8017400:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017402:	e005      	b.n	8017410 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8017404:	2301      	movs	r3, #1
 8017406:	77fb      	strb	r3, [r7, #31]
        break;
 8017408:	e002      	b.n	8017410 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801740a:	bf00      	nop
 801740c:	e000      	b.n	8017410 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801740e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017410:	7ffb      	ldrb	r3, [r7, #31]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d105      	bne.n	8017422 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801741a:	4618      	mov	r0, r3
 801741c:	f7ff fee8 	bl	80171f0 <LL_RCC_SetSAIClockSource>
 8017420:	e001      	b.n	8017426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017422:	7ffb      	ldrb	r3, [r7, #31]
 8017424:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801742e:	2b00      	cmp	r3, #0
 8017430:	d046      	beq.n	80174c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8017432:	f7ff ff56 	bl	80172e2 <LL_RCC_GetRTCClockSource>
 8017436:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801743c:	69ba      	ldr	r2, [r7, #24]
 801743e:	429a      	cmp	r2, r3
 8017440:	d03c      	beq.n	80174bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017442:	f7fe fc1b 	bl	8015c7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8017446:	69bb      	ldr	r3, [r7, #24]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d105      	bne.n	8017458 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017450:	4618      	mov	r0, r3
 8017452:	f7ff ff30 	bl	80172b6 <LL_RCC_SetRTCClockSource>
 8017456:	e02e      	b.n	80174b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8017458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017460:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8017462:	f7ff ff4b 	bl	80172fc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8017466:	f7ff ff5a 	bl	801731e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017474:	4313      	orrs	r3, r2
 8017476:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8017478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8017482:	f7ff fde1 	bl	8017048 <LL_RCC_LSE_IsEnabled>
 8017486:	4603      	mov	r3, r0
 8017488:	2b01      	cmp	r3, #1
 801748a:	d114      	bne.n	80174b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801748c:	f7fc fe3e 	bl	801410c <HAL_GetTick>
 8017490:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8017492:	e00b      	b.n	80174ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017494:	f7fc fe3a 	bl	801410c <HAL_GetTick>
 8017498:	4602      	mov	r2, r0
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	1ad3      	subs	r3, r2, r3
 801749e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80174a2:	4293      	cmp	r3, r2
 80174a4:	d902      	bls.n	80174ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80174a6:	2303      	movs	r3, #3
 80174a8:	77fb      	strb	r3, [r7, #31]
              break;
 80174aa:	e004      	b.n	80174b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80174ac:	f7ff fdde 	bl	801706c <LL_RCC_LSE_IsReady>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d1ee      	bne.n	8017494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80174b6:	7ffb      	ldrb	r3, [r7, #31]
 80174b8:	77bb      	strb	r3, [r7, #30]
 80174ba:	e001      	b.n	80174c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80174bc:	7ffb      	ldrb	r3, [r7, #31]
 80174be:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f003 0301 	and.w	r3, r3, #1
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d004      	beq.n	80174d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	699b      	ldr	r3, [r3, #24]
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7ff fe2a 	bl	801712a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	f003 0302 	and.w	r3, r3, #2
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d004      	beq.n	80174ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	69db      	ldr	r3, [r3, #28]
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7ff fe35 	bl	8017156 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	f003 0310 	and.w	r3, r3, #16
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d004      	beq.n	8017502 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7ff fe5d 	bl	80171bc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	f003 0320 	and.w	r3, r3, #32
 801750a:	2b00      	cmp	r3, #0
 801750c:	d004      	beq.n	8017518 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017512:	4618      	mov	r0, r3
 8017514:	f7ff fe52 	bl	80171bc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	f003 0304 	and.w	r3, r3, #4
 8017520:	2b00      	cmp	r3, #0
 8017522:	d004      	beq.n	801752e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6a1b      	ldr	r3, [r3, #32]
 8017528:	4618      	mov	r0, r3
 801752a:	f7ff fe2a 	bl	8017182 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	f003 0308 	and.w	r3, r3, #8
 8017536:	2b00      	cmp	r3, #0
 8017538:	d004      	beq.n	8017544 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801753e:	4618      	mov	r0, r3
 8017540:	f7ff fe1f 	bl	8017182 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801754c:	2b00      	cmp	r3, #0
 801754e:	d022      	beq.n	8017596 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017554:	4618      	mov	r0, r3
 8017556:	f7ff fe8d 	bl	8017274 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801755e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017562:	d107      	bne.n	8017574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8017564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801756e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017572:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801757c:	d10b      	bne.n	8017596 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	3304      	adds	r3, #4
 8017582:	4618      	mov	r0, r3
 8017584:	f000 f8e3 	bl	801774e <RCCEx_PLLSAI1_ConfigNQ>
 8017588:	4603      	mov	r3, r0
 801758a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801758c:	7ffb      	ldrb	r3, [r7, #31]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d001      	beq.n	8017596 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8017592:	7ffb      	ldrb	r3, [r7, #31]
 8017594:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d02b      	beq.n	80175fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80175aa:	d008      	beq.n	80175be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80175b4:	d003      	beq.n	80175be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d105      	bne.n	80175ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7ff fe2a 	bl	801721c <LL_RCC_SetRNGClockSource>
 80175c8:	e00a      	b.n	80175e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80175d2:	60fb      	str	r3, [r7, #12]
 80175d4:	2000      	movs	r0, #0
 80175d6:	f7ff fe21 	bl	801721c <LL_RCC_SetRNGClockSource>
 80175da:	68f8      	ldr	r0, [r7, #12]
 80175dc:	f7ff fe34 	bl	8017248 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175e4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80175e8:	d107      	bne.n	80175fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80175ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80175ee:	68db      	ldr	r3, [r3, #12]
 80175f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80175f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80175f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017602:	2b00      	cmp	r3, #0
 8017604:	d022      	beq.n	801764c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801760a:	4618      	mov	r0, r3
 801760c:	f7ff fe3d 	bl	801728a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017618:	d107      	bne.n	801762a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801761a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8017624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017628:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801762e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017632:	d10b      	bne.n	801764c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	3304      	adds	r3, #4
 8017638:	4618      	mov	r0, r3
 801763a:	f000 f8e3 	bl	8017804 <RCCEx_PLLSAI1_ConfigNR>
 801763e:	4603      	mov	r3, r0
 8017640:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017642:	7ffb      	ldrb	r3, [r7, #31]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d001      	beq.n	801764c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8017648:	7ffb      	ldrb	r3, [r7, #31]
 801764a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017654:	2b00      	cmp	r3, #0
 8017656:	d004      	beq.n	8017662 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801765c:	4618      	mov	r0, r3
 801765e:	f7ff fd26 	bl	80170ae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801766a:	2b00      	cmp	r3, #0
 801766c:	d009      	beq.n	8017682 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017672:	4618      	mov	r0, r3
 8017674:	f7ff fd45 	bl	8017102 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801767c:	4618      	mov	r0, r3
 801767e:	f7ff fd2c 	bl	80170da <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8017682:	7fbb      	ldrb	r3, [r7, #30]
}
 8017684:	4618      	mov	r0, r3
 8017686:	3720      	adds	r7, #32
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8017690:	f7ff fcfe 	bl	8017090 <LL_RCC_MSI_EnablePLLMode>
}
 8017694:	bf00      	nop
 8017696:	bd80      	pop	{r7, pc}

08017698 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b084      	sub	sp, #16
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80176a0:	2300      	movs	r3, #0
 80176a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80176a4:	f7ff fe5b 	bl	801735e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80176a8:	f7fc fd30 	bl	801410c <HAL_GetTick>
 80176ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80176ae:	e009      	b.n	80176c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80176b0:	f7fc fd2c 	bl	801410c <HAL_GetTick>
 80176b4:	4602      	mov	r2, r0
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	1ad3      	subs	r3, r2, r3
 80176ba:	2b02      	cmp	r3, #2
 80176bc:	d902      	bls.n	80176c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80176be:	2303      	movs	r3, #3
 80176c0:	73fb      	strb	r3, [r7, #15]
      break;
 80176c2:	e004      	b.n	80176ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80176c4:	f7ff fe5a 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 80176c8:	4603      	mov	r3, r0
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1f0      	bne.n	80176b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80176ce:	7bfb      	ldrb	r3, [r7, #15]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d137      	bne.n	8017744 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80176d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80176d8:	691b      	ldr	r3, [r3, #16]
 80176da:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	021b      	lsls	r3, r3, #8
 80176e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80176e8:	4313      	orrs	r3, r2
 80176ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80176ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80176f0:	691b      	ldr	r3, [r3, #16]
 80176f2:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80176fe:	4313      	orrs	r3, r2
 8017700:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8017702:	f7ff fe1d 	bl	8017340 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017706:	f7fc fd01 	bl	801410c <HAL_GetTick>
 801770a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801770c:	e009      	b.n	8017722 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801770e:	f7fc fcfd 	bl	801410c <HAL_GetTick>
 8017712:	4602      	mov	r2, r0
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	1ad3      	subs	r3, r2, r3
 8017718:	2b02      	cmp	r3, #2
 801771a:	d902      	bls.n	8017722 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801771c:	2303      	movs	r3, #3
 801771e:	73fb      	strb	r3, [r7, #15]
        break;
 8017720:	e004      	b.n	801772c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8017722:	f7ff fe2b 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 8017726:	4603      	mov	r3, r0
 8017728:	2b01      	cmp	r3, #1
 801772a:	d1f0      	bne.n	801770e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801772c:	7bfb      	ldrb	r3, [r7, #15]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d108      	bne.n	8017744 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8017732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017736:	691a      	ldr	r2, [r3, #16]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	691b      	ldr	r3, [r3, #16]
 801773c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017740:	4313      	orrs	r3, r2
 8017742:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8017744:	7bfb      	ldrb	r3, [r7, #15]
}
 8017746:	4618      	mov	r0, r3
 8017748:	3710      	adds	r7, #16
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}

0801774e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801774e:	b580      	push	{r7, lr}
 8017750:	b084      	sub	sp, #16
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017756:	2300      	movs	r3, #0
 8017758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801775a:	f7ff fe00 	bl	801735e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801775e:	f7fc fcd5 	bl	801410c <HAL_GetTick>
 8017762:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8017764:	e009      	b.n	801777a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8017766:	f7fc fcd1 	bl	801410c <HAL_GetTick>
 801776a:	4602      	mov	r2, r0
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	2b02      	cmp	r3, #2
 8017772:	d902      	bls.n	801777a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8017774:	2303      	movs	r3, #3
 8017776:	73fb      	strb	r3, [r7, #15]
      break;
 8017778:	e004      	b.n	8017784 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801777a:	f7ff fdff 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 801777e:	4603      	mov	r3, r0
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1f0      	bne.n	8017766 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8017784:	7bfb      	ldrb	r3, [r7, #15]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d137      	bne.n	80177fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801778a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801778e:	691b      	ldr	r3, [r3, #16]
 8017790:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	021b      	lsls	r3, r3, #8
 801779a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801779e:	4313      	orrs	r3, r2
 80177a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80177a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80177a6:	691b      	ldr	r3, [r3, #16]
 80177a8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	689b      	ldr	r3, [r3, #8]
 80177b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80177b4:	4313      	orrs	r3, r2
 80177b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80177b8:	f7ff fdc2 	bl	8017340 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80177bc:	f7fc fca6 	bl	801410c <HAL_GetTick>
 80177c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80177c2:	e009      	b.n	80177d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80177c4:	f7fc fca2 	bl	801410c <HAL_GetTick>
 80177c8:	4602      	mov	r2, r0
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	2b02      	cmp	r3, #2
 80177d0:	d902      	bls.n	80177d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80177d2:	2303      	movs	r3, #3
 80177d4:	73fb      	strb	r3, [r7, #15]
        break;
 80177d6:	e004      	b.n	80177e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80177d8:	f7ff fdd0 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 80177dc:	4603      	mov	r3, r0
 80177de:	2b01      	cmp	r3, #1
 80177e0:	d1f0      	bne.n	80177c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80177e2:	7bfb      	ldrb	r3, [r7, #15]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d108      	bne.n	80177fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80177e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80177ec:	691a      	ldr	r2, [r3, #16]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	691b      	ldr	r3, [r3, #16]
 80177f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80177f6:	4313      	orrs	r3, r2
 80177f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80177fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3710      	adds	r7, #16
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801780c:	2300      	movs	r3, #0
 801780e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8017810:	f7ff fda5 	bl	801735e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017814:	f7fc fc7a 	bl	801410c <HAL_GetTick>
 8017818:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801781a:	e009      	b.n	8017830 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801781c:	f7fc fc76 	bl	801410c <HAL_GetTick>
 8017820:	4602      	mov	r2, r0
 8017822:	68bb      	ldr	r3, [r7, #8]
 8017824:	1ad3      	subs	r3, r2, r3
 8017826:	2b02      	cmp	r3, #2
 8017828:	d902      	bls.n	8017830 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801782a:	2303      	movs	r3, #3
 801782c:	73fb      	strb	r3, [r7, #15]
      break;
 801782e:	e004      	b.n	801783a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8017830:	f7ff fda4 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 8017834:	4603      	mov	r3, r0
 8017836:	2b00      	cmp	r3, #0
 8017838:	d1f0      	bne.n	801781c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801783a:	7bfb      	ldrb	r3, [r7, #15]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d137      	bne.n	80178b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8017840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017844:	691b      	ldr	r3, [r3, #16]
 8017846:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	021b      	lsls	r3, r3, #8
 8017850:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017854:	4313      	orrs	r3, r2
 8017856:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8017858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801785c:	691b      	ldr	r3, [r3, #16]
 801785e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801786a:	4313      	orrs	r3, r2
 801786c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801786e:	f7ff fd67 	bl	8017340 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017872:	f7fc fc4b 	bl	801410c <HAL_GetTick>
 8017876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8017878:	e009      	b.n	801788e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801787a:	f7fc fc47 	bl	801410c <HAL_GetTick>
 801787e:	4602      	mov	r2, r0
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	1ad3      	subs	r3, r2, r3
 8017884:	2b02      	cmp	r3, #2
 8017886:	d902      	bls.n	801788e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8017888:	2303      	movs	r3, #3
 801788a:	73fb      	strb	r3, [r7, #15]
        break;
 801788c:	e004      	b.n	8017898 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801788e:	f7ff fd75 	bl	801737c <LL_RCC_PLLSAI1_IsReady>
 8017892:	4603      	mov	r3, r0
 8017894:	2b01      	cmp	r3, #1
 8017896:	d1f0      	bne.n	801787a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8017898:	7bfb      	ldrb	r3, [r7, #15]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d108      	bne.n	80178b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801789e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80178a2:	691a      	ldr	r2, [r3, #16]
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	691b      	ldr	r3, [r3, #16]
 80178a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80178ac:	4313      	orrs	r3, r2
 80178ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80178b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3710      	adds	r7, #16
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}

080178ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b082      	sub	sp, #8
 80178be:	af00      	add	r7, sp, #0
 80178c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d101      	bne.n	80178cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80178c8:	2301      	movs	r3, #1
 80178ca:	e049      	b.n	8017960 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d106      	bne.n	80178e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	2200      	movs	r2, #0
 80178dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7e9 fae3 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2202      	movs	r2, #2
 80178ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	3304      	adds	r3, #4
 80178f6:	4619      	mov	r1, r3
 80178f8:	4610      	mov	r0, r2
 80178fa:	f000 fa7b 	bl	8017df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	2201      	movs	r2, #1
 8017902:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2201      	movs	r2, #1
 801790a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	2201      	movs	r2, #1
 8017912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2201      	movs	r2, #1
 801791a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2201      	movs	r2, #1
 8017922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2201      	movs	r2, #1
 801792a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2201      	movs	r2, #1
 8017932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2201      	movs	r2, #1
 801793a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2201      	movs	r2, #1
 8017942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2201      	movs	r2, #1
 801794a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	2201      	movs	r2, #1
 8017952:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2201      	movs	r2, #1
 801795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801795e:	2300      	movs	r3, #0
}
 8017960:	4618      	mov	r0, r3
 8017962:	3708      	adds	r7, #8
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017968:	b480      	push	{r7}
 801796a:	b085      	sub	sp, #20
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017976:	b2db      	uxtb	r3, r3
 8017978:	2b01      	cmp	r3, #1
 801797a:	d001      	beq.n	8017980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801797c:	2301      	movs	r3, #1
 801797e:	e036      	b.n	80179ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2202      	movs	r2, #2
 8017984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	68da      	ldr	r2, [r3, #12]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	f042 0201 	orr.w	r2, r2, #1
 8017996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4a17      	ldr	r2, [pc, #92]	@ (80179fc <HAL_TIM_Base_Start_IT+0x94>)
 801799e:	4293      	cmp	r3, r2
 80179a0:	d004      	beq.n	80179ac <HAL_TIM_Base_Start_IT+0x44>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80179aa:	d115      	bne.n	80179d8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	689a      	ldr	r2, [r3, #8]
 80179b2:	4b13      	ldr	r3, [pc, #76]	@ (8017a00 <HAL_TIM_Base_Start_IT+0x98>)
 80179b4:	4013      	ands	r3, r2
 80179b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	2b06      	cmp	r3, #6
 80179bc:	d015      	beq.n	80179ea <HAL_TIM_Base_Start_IT+0x82>
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80179c4:	d011      	beq.n	80179ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	f042 0201 	orr.w	r2, r2, #1
 80179d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179d6:	e008      	b.n	80179ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f042 0201 	orr.w	r2, r2, #1
 80179e6:	601a      	str	r2, [r3, #0]
 80179e8:	e000      	b.n	80179ec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80179ec:	2300      	movs	r3, #0
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	40012c00 	.word	0x40012c00
 8017a00:	00010007 	.word	0x00010007

08017a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	691b      	ldr	r3, [r3, #16]
 8017a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	f003 0302 	and.w	r3, r3, #2
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d020      	beq.n	8017a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f003 0302 	and.w	r3, r3, #2
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d01b      	beq.n	8017a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f06f 0202 	mvn.w	r2, #2
 8017a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	699b      	ldr	r3, [r3, #24]
 8017a46:	f003 0303 	and.w	r3, r3, #3
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d003      	beq.n	8017a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f000 f9b2 	bl	8017db8 <HAL_TIM_IC_CaptureCallback>
 8017a54:	e005      	b.n	8017a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 f9a4 	bl	8017da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f000 f9b5 	bl	8017dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	2200      	movs	r2, #0
 8017a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	f003 0304 	and.w	r3, r3, #4
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d020      	beq.n	8017ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	f003 0304 	and.w	r3, r3, #4
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d01b      	beq.n	8017ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	f06f 0204 	mvn.w	r2, #4
 8017a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2202      	movs	r2, #2
 8017a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	699b      	ldr	r3, [r3, #24]
 8017a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d003      	beq.n	8017aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f000 f98c 	bl	8017db8 <HAL_TIM_IC_CaptureCallback>
 8017aa0:	e005      	b.n	8017aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f000 f97e 	bl	8017da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f000 f98f 	bl	8017dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017ab4:	68bb      	ldr	r3, [r7, #8]
 8017ab6:	f003 0308 	and.w	r3, r3, #8
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d020      	beq.n	8017b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	f003 0308 	and.w	r3, r3, #8
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d01b      	beq.n	8017b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	f06f 0208 	mvn.w	r2, #8
 8017ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2204      	movs	r2, #4
 8017ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	69db      	ldr	r3, [r3, #28]
 8017ade:	f003 0303 	and.w	r3, r3, #3
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d003      	beq.n	8017aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017ae6:	6878      	ldr	r0, [r7, #4]
 8017ae8:	f000 f966 	bl	8017db8 <HAL_TIM_IC_CaptureCallback>
 8017aec:	e005      	b.n	8017afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f000 f958 	bl	8017da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f000 f969 	bl	8017dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2200      	movs	r2, #0
 8017afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	f003 0310 	and.w	r3, r3, #16
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d020      	beq.n	8017b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	f003 0310 	and.w	r3, r3, #16
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d01b      	beq.n	8017b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	f06f 0210 	mvn.w	r2, #16
 8017b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2208      	movs	r2, #8
 8017b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	69db      	ldr	r3, [r3, #28]
 8017b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d003      	beq.n	8017b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	f000 f940 	bl	8017db8 <HAL_TIM_IC_CaptureCallback>
 8017b38:	e005      	b.n	8017b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017b3a:	6878      	ldr	r0, [r7, #4]
 8017b3c:	f000 f932 	bl	8017da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f000 f943 	bl	8017dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	f003 0301 	and.w	r3, r3, #1
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d00c      	beq.n	8017b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	f003 0301 	and.w	r3, r3, #1
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d007      	beq.n	8017b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	f06f 0201 	mvn.w	r2, #1
 8017b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017b6a:	6878      	ldr	r0, [r7, #4]
 8017b6c:	f7e9 f904 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d104      	bne.n	8017b84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d00c      	beq.n	8017b9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d007      	beq.n	8017b9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8017b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f000 faa1 	bl	80180e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8017b9e:	68bb      	ldr	r3, [r7, #8]
 8017ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d00c      	beq.n	8017bc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d007      	beq.n	8017bc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8017bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f000 fa99 	bl	80180f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017bc2:	68bb      	ldr	r3, [r7, #8]
 8017bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d00c      	beq.n	8017be6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d007      	beq.n	8017be6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f000 f8fd 	bl	8017de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	f003 0320 	and.w	r3, r3, #32
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d00c      	beq.n	8017c0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	f003 0320 	and.w	r3, r3, #32
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d007      	beq.n	8017c0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	f06f 0220 	mvn.w	r2, #32
 8017c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f000 fa61 	bl	80180cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017c0a:	bf00      	nop
 8017c0c:	3710      	adds	r7, #16
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}

08017c12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8017c12:	b580      	push	{r7, lr}
 8017c14:	b084      	sub	sp, #16
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
 8017c1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c26:	2b01      	cmp	r3, #1
 8017c28:	d101      	bne.n	8017c2e <HAL_TIM_ConfigClockSource+0x1c>
 8017c2a:	2302      	movs	r3, #2
 8017c2c:	e0b6      	b.n	8017d9c <HAL_TIM_ConfigClockSource+0x18a>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2201      	movs	r2, #1
 8017c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2202      	movs	r2, #2
 8017c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	689b      	ldr	r3, [r3, #8]
 8017c44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8017c4c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8017c50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017c58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	68ba      	ldr	r2, [r7, #8]
 8017c60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c6a:	d03e      	beq.n	8017cea <HAL_TIM_ConfigClockSource+0xd8>
 8017c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c70:	f200 8087 	bhi.w	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c78:	f000 8086 	beq.w	8017d88 <HAL_TIM_ConfigClockSource+0x176>
 8017c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c80:	d87f      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017c82:	2b70      	cmp	r3, #112	@ 0x70
 8017c84:	d01a      	beq.n	8017cbc <HAL_TIM_ConfigClockSource+0xaa>
 8017c86:	2b70      	cmp	r3, #112	@ 0x70
 8017c88:	d87b      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017c8a:	2b60      	cmp	r3, #96	@ 0x60
 8017c8c:	d050      	beq.n	8017d30 <HAL_TIM_ConfigClockSource+0x11e>
 8017c8e:	2b60      	cmp	r3, #96	@ 0x60
 8017c90:	d877      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017c92:	2b50      	cmp	r3, #80	@ 0x50
 8017c94:	d03c      	beq.n	8017d10 <HAL_TIM_ConfigClockSource+0xfe>
 8017c96:	2b50      	cmp	r3, #80	@ 0x50
 8017c98:	d873      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017c9a:	2b40      	cmp	r3, #64	@ 0x40
 8017c9c:	d058      	beq.n	8017d50 <HAL_TIM_ConfigClockSource+0x13e>
 8017c9e:	2b40      	cmp	r3, #64	@ 0x40
 8017ca0:	d86f      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017ca2:	2b30      	cmp	r3, #48	@ 0x30
 8017ca4:	d064      	beq.n	8017d70 <HAL_TIM_ConfigClockSource+0x15e>
 8017ca6:	2b30      	cmp	r3, #48	@ 0x30
 8017ca8:	d86b      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017caa:	2b20      	cmp	r3, #32
 8017cac:	d060      	beq.n	8017d70 <HAL_TIM_ConfigClockSource+0x15e>
 8017cae:	2b20      	cmp	r3, #32
 8017cb0:	d867      	bhi.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d05c      	beq.n	8017d70 <HAL_TIM_ConfigClockSource+0x15e>
 8017cb6:	2b10      	cmp	r3, #16
 8017cb8:	d05a      	beq.n	8017d70 <HAL_TIM_ConfigClockSource+0x15e>
 8017cba:	e062      	b.n	8017d82 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017ccc:	f000 f97e 	bl	8017fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	689b      	ldr	r3, [r3, #8]
 8017cd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8017cde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	68ba      	ldr	r2, [r7, #8]
 8017ce6:	609a      	str	r2, [r3, #8]
      break;
 8017ce8:	e04f      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017cfa:	f000 f967 	bl	8017fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	689a      	ldr	r2, [r3, #8]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017d0c:	609a      	str	r2, [r3, #8]
      break;
 8017d0e:	e03c      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	f000 f8d9 	bl	8017ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	2150      	movs	r1, #80	@ 0x50
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f000 f932 	bl	8017f92 <TIM_ITRx_SetConfig>
      break;
 8017d2e:	e02c      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017d38:	683b      	ldr	r3, [r7, #0]
 8017d3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	f000 f8f8 	bl	8017f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2160      	movs	r1, #96	@ 0x60
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f000 f922 	bl	8017f92 <TIM_ITRx_SetConfig>
      break;
 8017d4e:	e01c      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	f000 f8b9 	bl	8017ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	2140      	movs	r1, #64	@ 0x40
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f000 f912 	bl	8017f92 <TIM_ITRx_SetConfig>
      break;
 8017d6e:	e00c      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681a      	ldr	r2, [r3, #0]
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	4619      	mov	r1, r3
 8017d7a:	4610      	mov	r0, r2
 8017d7c:	f000 f909 	bl	8017f92 <TIM_ITRx_SetConfig>
      break;
 8017d80:	e003      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8017d82:	2301      	movs	r3, #1
 8017d84:	73fb      	strb	r3, [r7, #15]
      break;
 8017d86:	e000      	b.n	8017d8a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8017d88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2201      	movs	r2, #1
 8017d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	2200      	movs	r2, #0
 8017d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	3710      	adds	r7, #16
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017da4:	b480      	push	{r7}
 8017da6:	b083      	sub	sp, #12
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017dac:	bf00      	nop
 8017dae:	370c      	adds	r7, #12
 8017db0:	46bd      	mov	sp, r7
 8017db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db6:	4770      	bx	lr

08017db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017dc0:	bf00      	nop
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr

08017dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017dcc:	b480      	push	{r7}
 8017dce:	b083      	sub	sp, #12
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017dd4:	bf00      	nop
 8017dd6:	370c      	adds	r7, #12
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr

08017de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017de8:	bf00      	nop
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017df4:	b480      	push	{r7}
 8017df6:	b085      	sub	sp, #20
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
 8017dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	4a30      	ldr	r2, [pc, #192]	@ (8017ec8 <TIM_Base_SetConfig+0xd4>)
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	d003      	beq.n	8017e14 <TIM_Base_SetConfig+0x20>
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017e12:	d108      	bne.n	8017e26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	68fa      	ldr	r2, [r7, #12]
 8017e22:	4313      	orrs	r3, r2
 8017e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	4a27      	ldr	r2, [pc, #156]	@ (8017ec8 <TIM_Base_SetConfig+0xd4>)
 8017e2a:	4293      	cmp	r3, r2
 8017e2c:	d00b      	beq.n	8017e46 <TIM_Base_SetConfig+0x52>
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017e34:	d007      	beq.n	8017e46 <TIM_Base_SetConfig+0x52>
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	4a24      	ldr	r2, [pc, #144]	@ (8017ecc <TIM_Base_SetConfig+0xd8>)
 8017e3a:	4293      	cmp	r3, r2
 8017e3c:	d003      	beq.n	8017e46 <TIM_Base_SetConfig+0x52>
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	4a23      	ldr	r2, [pc, #140]	@ (8017ed0 <TIM_Base_SetConfig+0xdc>)
 8017e42:	4293      	cmp	r3, r2
 8017e44:	d108      	bne.n	8017e58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	68fa      	ldr	r2, [r7, #12]
 8017e54:	4313      	orrs	r3, r2
 8017e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	695b      	ldr	r3, [r3, #20]
 8017e62:	4313      	orrs	r3, r2
 8017e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	689a      	ldr	r2, [r3, #8]
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	4a12      	ldr	r2, [pc, #72]	@ (8017ec8 <TIM_Base_SetConfig+0xd4>)
 8017e80:	4293      	cmp	r3, r2
 8017e82:	d007      	beq.n	8017e94 <TIM_Base_SetConfig+0xa0>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	4a11      	ldr	r2, [pc, #68]	@ (8017ecc <TIM_Base_SetConfig+0xd8>)
 8017e88:	4293      	cmp	r3, r2
 8017e8a:	d003      	beq.n	8017e94 <TIM_Base_SetConfig+0xa0>
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	4a10      	ldr	r2, [pc, #64]	@ (8017ed0 <TIM_Base_SetConfig+0xdc>)
 8017e90:	4293      	cmp	r3, r2
 8017e92:	d103      	bne.n	8017e9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	691a      	ldr	r2, [r3, #16]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	f003 0301 	and.w	r3, r3, #1
 8017eaa:	2b01      	cmp	r3, #1
 8017eac:	d105      	bne.n	8017eba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	691b      	ldr	r3, [r3, #16]
 8017eb2:	f023 0201 	bic.w	r2, r3, #1
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	611a      	str	r2, [r3, #16]
  }
}
 8017eba:	bf00      	nop
 8017ebc:	3714      	adds	r7, #20
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop
 8017ec8:	40012c00 	.word	0x40012c00
 8017ecc:	40014400 	.word	0x40014400
 8017ed0:	40014800 	.word	0x40014800

08017ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017ed4:	b480      	push	{r7}
 8017ed6:	b087      	sub	sp, #28
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	6a1b      	ldr	r3, [r3, #32]
 8017ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	6a1b      	ldr	r3, [r3, #32]
 8017eea:	f023 0201 	bic.w	r2, r3, #1
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	699b      	ldr	r3, [r3, #24]
 8017ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	011b      	lsls	r3, r3, #4
 8017f04:	693a      	ldr	r2, [r7, #16]
 8017f06:	4313      	orrs	r3, r2
 8017f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	f023 030a 	bic.w	r3, r3, #10
 8017f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017f12:	697a      	ldr	r2, [r7, #20]
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	4313      	orrs	r3, r2
 8017f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	693a      	ldr	r2, [r7, #16]
 8017f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	697a      	ldr	r2, [r7, #20]
 8017f24:	621a      	str	r2, [r3, #32]
}
 8017f26:	bf00      	nop
 8017f28:	371c      	adds	r7, #28
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f30:	4770      	bx	lr

08017f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017f32:	b480      	push	{r7}
 8017f34:	b087      	sub	sp, #28
 8017f36:	af00      	add	r7, sp, #0
 8017f38:	60f8      	str	r0, [r7, #12]
 8017f3a:	60b9      	str	r1, [r7, #8]
 8017f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	6a1b      	ldr	r3, [r3, #32]
 8017f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	6a1b      	ldr	r3, [r3, #32]
 8017f48:	f023 0210 	bic.w	r2, r3, #16
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	699b      	ldr	r3, [r3, #24]
 8017f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	031b      	lsls	r3, r3, #12
 8017f62:	693a      	ldr	r2, [r7, #16]
 8017f64:	4313      	orrs	r3, r2
 8017f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017f70:	68bb      	ldr	r3, [r7, #8]
 8017f72:	011b      	lsls	r3, r3, #4
 8017f74:	697a      	ldr	r2, [r7, #20]
 8017f76:	4313      	orrs	r3, r2
 8017f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	693a      	ldr	r2, [r7, #16]
 8017f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	697a      	ldr	r2, [r7, #20]
 8017f84:	621a      	str	r2, [r3, #32]
}
 8017f86:	bf00      	nop
 8017f88:	371c      	adds	r7, #28
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f90:	4770      	bx	lr

08017f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017f92:	b480      	push	{r7}
 8017f94:	b085      	sub	sp, #20
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
 8017f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	689b      	ldr	r3, [r3, #8]
 8017fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8017fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	4313      	orrs	r3, r2
 8017fb4:	f043 0307 	orr.w	r3, r3, #7
 8017fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	68fa      	ldr	r2, [r7, #12]
 8017fbe:	609a      	str	r2, [r3, #8]
}
 8017fc0:	bf00      	nop
 8017fc2:	3714      	adds	r7, #20
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr

08017fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b087      	sub	sp, #28
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
 8017fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	689b      	ldr	r3, [r3, #8]
 8017fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017fe0:	697b      	ldr	r3, [r7, #20]
 8017fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	021a      	lsls	r2, r3, #8
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	431a      	orrs	r2, r3
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	4313      	orrs	r3, r2
 8017ff4:	697a      	ldr	r2, [r7, #20]
 8017ff6:	4313      	orrs	r3, r2
 8017ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	697a      	ldr	r2, [r7, #20]
 8017ffe:	609a      	str	r2, [r3, #8]
}
 8018000:	bf00      	nop
 8018002:	371c      	adds	r7, #28
 8018004:	46bd      	mov	sp, r7
 8018006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800a:	4770      	bx	lr

0801800c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801800c:	b480      	push	{r7}
 801800e:	b085      	sub	sp, #20
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801801c:	2b01      	cmp	r3, #1
 801801e:	d101      	bne.n	8018024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018020:	2302      	movs	r3, #2
 8018022:	e04a      	b.n	80180ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2201      	movs	r2, #1
 8018028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2202      	movs	r2, #2
 8018030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	685b      	ldr	r3, [r3, #4]
 801803a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	689b      	ldr	r3, [r3, #8]
 8018042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	4a1f      	ldr	r2, [pc, #124]	@ (80180c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801804a:	4293      	cmp	r3, r2
 801804c:	d108      	bne.n	8018060 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8018054:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	68fa      	ldr	r2, [r7, #12]
 801805c:	4313      	orrs	r3, r2
 801805e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	68fa      	ldr	r2, [r7, #12]
 801806e:	4313      	orrs	r3, r2
 8018070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	68fa      	ldr	r2, [r7, #12]
 8018078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	4a12      	ldr	r2, [pc, #72]	@ (80180c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8018080:	4293      	cmp	r3, r2
 8018082:	d004      	beq.n	801808e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801808c:	d10c      	bne.n	80180a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018096:	683b      	ldr	r3, [r7, #0]
 8018098:	689b      	ldr	r3, [r3, #8]
 801809a:	68ba      	ldr	r2, [r7, #8]
 801809c:	4313      	orrs	r3, r2
 801809e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	68ba      	ldr	r2, [r7, #8]
 80180a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2201      	movs	r2, #1
 80180ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80180b8:	2300      	movs	r3, #0
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3714      	adds	r7, #20
 80180be:	46bd      	mov	sp, r7
 80180c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c4:	4770      	bx	lr
 80180c6:	bf00      	nop
 80180c8:	40012c00 	.word	0x40012c00

080180cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80180cc:	b480      	push	{r7}
 80180ce:	b083      	sub	sp, #12
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80180d4:	bf00      	nop
 80180d6:	370c      	adds	r7, #12
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80180e0:	b480      	push	{r7}
 80180e2:	b083      	sub	sp, #12
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80180e8:	bf00      	nop
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr

080180f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80180f4:	b480      	push	{r7}
 80180f6:	b083      	sub	sp, #12
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80180fc:	bf00      	nop
 80180fe:	370c      	adds	r7, #12
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr

08018108 <LL_RCC_GetUSARTClockSource>:
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018114:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	4013      	ands	r3, r2
}
 801811c:	4618      	mov	r0, r3
 801811e:	370c      	adds	r7, #12
 8018120:	46bd      	mov	sp, r7
 8018122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018126:	4770      	bx	lr

08018128 <LL_RCC_GetLPUARTClockSource>:
{
 8018128:	b480      	push	{r7}
 801812a:	b083      	sub	sp, #12
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018134:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	4013      	ands	r3, r2
}
 801813c:	4618      	mov	r0, r3
 801813e:	370c      	adds	r7, #12
 8018140:	46bd      	mov	sp, r7
 8018142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018146:	4770      	bx	lr

08018148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d101      	bne.n	801815a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018156:	2301      	movs	r3, #1
 8018158:	e042      	b.n	80181e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018160:	2b00      	cmp	r3, #0
 8018162:	d106      	bne.n	8018172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	2200      	movs	r2, #0
 8018168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7e8 fec9 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2224      	movs	r2, #36	@ 0x24
 8018176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	f022 0201 	bic.w	r2, r2, #1
 8018188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801818e:	2b00      	cmp	r3, #0
 8018190:	d002      	beq.n	8018198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8018192:	6878      	ldr	r0, [r7, #4]
 8018194:	f000 fade 	bl	8018754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f000 f8b3 	bl	8018304 <UART_SetConfig>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d101      	bne.n	80181a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80181a4:	2301      	movs	r3, #1
 80181a6:	e01b      	b.n	80181e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	685a      	ldr	r2, [r3, #4]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80181b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	689a      	ldr	r2, [r3, #8]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80181c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	681a      	ldr	r2, [r3, #0]
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	f042 0201 	orr.w	r2, r2, #1
 80181d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f000 fb5d 	bl	8018898 <UART_CheckIdleState>
 80181de:	4603      	mov	r3, r0
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3708      	adds	r7, #8
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}

080181e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b08a      	sub	sp, #40	@ 0x28
 80181ec:	af02      	add	r7, sp, #8
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	603b      	str	r3, [r7, #0]
 80181f4:	4613      	mov	r3, r2
 80181f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80181fe:	2b20      	cmp	r3, #32
 8018200:	d17b      	bne.n	80182fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d002      	beq.n	801820e <HAL_UART_Transmit+0x26>
 8018208:	88fb      	ldrh	r3, [r7, #6]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d101      	bne.n	8018212 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801820e:	2301      	movs	r3, #1
 8018210:	e074      	b.n	80182fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2200      	movs	r2, #0
 8018216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	2221      	movs	r2, #33	@ 0x21
 801821e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018222:	f7fb ff73 	bl	801410c <HAL_GetTick>
 8018226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	88fa      	ldrh	r2, [r7, #6]
 801822c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	88fa      	ldrh	r2, [r7, #6]
 8018234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	689b      	ldr	r3, [r3, #8]
 801823c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018240:	d108      	bne.n	8018254 <HAL_UART_Transmit+0x6c>
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	691b      	ldr	r3, [r3, #16]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d104      	bne.n	8018254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801824a:	2300      	movs	r3, #0
 801824c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	61bb      	str	r3, [r7, #24]
 8018252:	e003      	b.n	801825c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018258:	2300      	movs	r3, #0
 801825a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801825c:	e030      	b.n	80182c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	9300      	str	r3, [sp, #0]
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	2200      	movs	r2, #0
 8018266:	2180      	movs	r1, #128	@ 0x80
 8018268:	68f8      	ldr	r0, [r7, #12]
 801826a:	f000 fbbf 	bl	80189ec <UART_WaitOnFlagUntilTimeout>
 801826e:	4603      	mov	r3, r0
 8018270:	2b00      	cmp	r3, #0
 8018272:	d005      	beq.n	8018280 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	2220      	movs	r2, #32
 8018278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801827c:	2303      	movs	r3, #3
 801827e:	e03d      	b.n	80182fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d10b      	bne.n	801829e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018286:	69bb      	ldr	r3, [r7, #24]
 8018288:	881b      	ldrh	r3, [r3, #0]
 801828a:	461a      	mov	r2, r3
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018294:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018296:	69bb      	ldr	r3, [r7, #24]
 8018298:	3302      	adds	r3, #2
 801829a:	61bb      	str	r3, [r7, #24]
 801829c:	e007      	b.n	80182ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801829e:	69fb      	ldr	r3, [r7, #28]
 80182a0:	781a      	ldrb	r2, [r3, #0]
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	3301      	adds	r3, #1
 80182ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80182b4:	b29b      	uxth	r3, r3
 80182b6:	3b01      	subs	r3, #1
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d1c8      	bne.n	801825e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	9300      	str	r3, [sp, #0]
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	2200      	movs	r2, #0
 80182d4:	2140      	movs	r1, #64	@ 0x40
 80182d6:	68f8      	ldr	r0, [r7, #12]
 80182d8:	f000 fb88 	bl	80189ec <UART_WaitOnFlagUntilTimeout>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d005      	beq.n	80182ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	2220      	movs	r2, #32
 80182e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80182ea:	2303      	movs	r3, #3
 80182ec:	e006      	b.n	80182fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	2220      	movs	r2, #32
 80182f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80182f6:	2300      	movs	r3, #0
 80182f8:	e000      	b.n	80182fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80182fa:	2302      	movs	r3, #2
  }
}
 80182fc:	4618      	mov	r0, r3
 80182fe:	3720      	adds	r7, #32
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}

08018304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018308:	b08c      	sub	sp, #48	@ 0x30
 801830a:	af00      	add	r7, sp, #0
 801830c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801830e:	2300      	movs	r3, #0
 8018310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	689a      	ldr	r2, [r3, #8]
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	691b      	ldr	r3, [r3, #16]
 801831c:	431a      	orrs	r2, r3
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	695b      	ldr	r3, [r3, #20]
 8018322:	431a      	orrs	r2, r3
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	69db      	ldr	r3, [r3, #28]
 8018328:	4313      	orrs	r3, r2
 801832a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	4baf      	ldr	r3, [pc, #700]	@ (80185f0 <UART_SetConfig+0x2ec>)
 8018334:	4013      	ands	r3, r2
 8018336:	697a      	ldr	r2, [r7, #20]
 8018338:	6812      	ldr	r2, [r2, #0]
 801833a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801833c:	430b      	orrs	r3, r1
 801833e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	685b      	ldr	r3, [r3, #4]
 8018346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801834a:	697b      	ldr	r3, [r7, #20]
 801834c:	68da      	ldr	r2, [r3, #12]
 801834e:	697b      	ldr	r3, [r7, #20]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	430a      	orrs	r2, r1
 8018354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	699b      	ldr	r3, [r3, #24]
 801835a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	4aa4      	ldr	r2, [pc, #656]	@ (80185f4 <UART_SetConfig+0x2f0>)
 8018362:	4293      	cmp	r3, r2
 8018364:	d004      	beq.n	8018370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018366:	697b      	ldr	r3, [r7, #20]
 8018368:	6a1b      	ldr	r3, [r3, #32]
 801836a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801836c:	4313      	orrs	r3, r2
 801836e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	689b      	ldr	r3, [r3, #8]
 8018376:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801837a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801837e:	697a      	ldr	r2, [r7, #20]
 8018380:	6812      	ldr	r2, [r2, #0]
 8018382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018384:	430b      	orrs	r3, r1
 8018386:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018388:	697b      	ldr	r3, [r7, #20]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801838e:	f023 010f 	bic.w	r1, r3, #15
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018396:	697b      	ldr	r3, [r7, #20]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	430a      	orrs	r2, r1
 801839c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	4a95      	ldr	r2, [pc, #596]	@ (80185f8 <UART_SetConfig+0x2f4>)
 80183a4:	4293      	cmp	r3, r2
 80183a6:	d125      	bne.n	80183f4 <UART_SetConfig+0xf0>
 80183a8:	2003      	movs	r0, #3
 80183aa:	f7ff fead 	bl	8018108 <LL_RCC_GetUSARTClockSource>
 80183ae:	4603      	mov	r3, r0
 80183b0:	2b03      	cmp	r3, #3
 80183b2:	d81b      	bhi.n	80183ec <UART_SetConfig+0xe8>
 80183b4:	a201      	add	r2, pc, #4	@ (adr r2, 80183bc <UART_SetConfig+0xb8>)
 80183b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183ba:	bf00      	nop
 80183bc:	080183cd 	.word	0x080183cd
 80183c0:	080183dd 	.word	0x080183dd
 80183c4:	080183d5 	.word	0x080183d5
 80183c8:	080183e5 	.word	0x080183e5
 80183cc:	2301      	movs	r3, #1
 80183ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80183d2:	e042      	b.n	801845a <UART_SetConfig+0x156>
 80183d4:	2302      	movs	r3, #2
 80183d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80183da:	e03e      	b.n	801845a <UART_SetConfig+0x156>
 80183dc:	2304      	movs	r3, #4
 80183de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80183e2:	e03a      	b.n	801845a <UART_SetConfig+0x156>
 80183e4:	2308      	movs	r3, #8
 80183e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80183ea:	e036      	b.n	801845a <UART_SetConfig+0x156>
 80183ec:	2310      	movs	r3, #16
 80183ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80183f2:	e032      	b.n	801845a <UART_SetConfig+0x156>
 80183f4:	697b      	ldr	r3, [r7, #20]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	4a7e      	ldr	r2, [pc, #504]	@ (80185f4 <UART_SetConfig+0x2f0>)
 80183fa:	4293      	cmp	r3, r2
 80183fc:	d12a      	bne.n	8018454 <UART_SetConfig+0x150>
 80183fe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8018402:	f7ff fe91 	bl	8018128 <LL_RCC_GetLPUARTClockSource>
 8018406:	4603      	mov	r3, r0
 8018408:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801840c:	d01a      	beq.n	8018444 <UART_SetConfig+0x140>
 801840e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8018412:	d81b      	bhi.n	801844c <UART_SetConfig+0x148>
 8018414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018418:	d00c      	beq.n	8018434 <UART_SetConfig+0x130>
 801841a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801841e:	d815      	bhi.n	801844c <UART_SetConfig+0x148>
 8018420:	2b00      	cmp	r3, #0
 8018422:	d003      	beq.n	801842c <UART_SetConfig+0x128>
 8018424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018428:	d008      	beq.n	801843c <UART_SetConfig+0x138>
 801842a:	e00f      	b.n	801844c <UART_SetConfig+0x148>
 801842c:	2300      	movs	r3, #0
 801842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8018432:	e012      	b.n	801845a <UART_SetConfig+0x156>
 8018434:	2302      	movs	r3, #2
 8018436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801843a:	e00e      	b.n	801845a <UART_SetConfig+0x156>
 801843c:	2304      	movs	r3, #4
 801843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8018442:	e00a      	b.n	801845a <UART_SetConfig+0x156>
 8018444:	2308      	movs	r3, #8
 8018446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801844a:	e006      	b.n	801845a <UART_SetConfig+0x156>
 801844c:	2310      	movs	r3, #16
 801844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8018452:	e002      	b.n	801845a <UART_SetConfig+0x156>
 8018454:	2310      	movs	r3, #16
 8018456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4a65      	ldr	r2, [pc, #404]	@ (80185f4 <UART_SetConfig+0x2f0>)
 8018460:	4293      	cmp	r3, r2
 8018462:	f040 8097 	bne.w	8018594 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018466:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801846a:	2b08      	cmp	r3, #8
 801846c:	d823      	bhi.n	80184b6 <UART_SetConfig+0x1b2>
 801846e:	a201      	add	r2, pc, #4	@ (adr r2, 8018474 <UART_SetConfig+0x170>)
 8018470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018474:	08018499 	.word	0x08018499
 8018478:	080184b7 	.word	0x080184b7
 801847c:	080184a1 	.word	0x080184a1
 8018480:	080184b7 	.word	0x080184b7
 8018484:	080184a7 	.word	0x080184a7
 8018488:	080184b7 	.word	0x080184b7
 801848c:	080184b7 	.word	0x080184b7
 8018490:	080184b7 	.word	0x080184b7
 8018494:	080184af 	.word	0x080184af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018498:	f7fe fcc4 	bl	8016e24 <HAL_RCC_GetPCLK1Freq>
 801849c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801849e:	e010      	b.n	80184c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80184a0:	4b56      	ldr	r3, [pc, #344]	@ (80185fc <UART_SetConfig+0x2f8>)
 80184a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80184a4:	e00d      	b.n	80184c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80184a6:	f7fe fc3d 	bl	8016d24 <HAL_RCC_GetSysClockFreq>
 80184aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80184ac:	e009      	b.n	80184c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80184ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80184b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80184b4:	e005      	b.n	80184c2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80184b6:	2300      	movs	r3, #0
 80184b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80184ba:	2301      	movs	r3, #1
 80184bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80184c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80184c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	f000 812b 	beq.w	8018720 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184ce:	4a4c      	ldr	r2, [pc, #304]	@ (8018600 <UART_SetConfig+0x2fc>)
 80184d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80184d4:	461a      	mov	r2, r3
 80184d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80184dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	685a      	ldr	r2, [r3, #4]
 80184e2:	4613      	mov	r3, r2
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4413      	add	r3, r2
 80184e8:	69ba      	ldr	r2, [r7, #24]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d305      	bcc.n	80184fa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	685b      	ldr	r3, [r3, #4]
 80184f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80184f4:	69ba      	ldr	r2, [r7, #24]
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d903      	bls.n	8018502 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80184fa:	2301      	movs	r3, #1
 80184fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8018500:	e10e      	b.n	8018720 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018504:	2200      	movs	r2, #0
 8018506:	60bb      	str	r3, [r7, #8]
 8018508:	60fa      	str	r2, [r7, #12]
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801850e:	4a3c      	ldr	r2, [pc, #240]	@ (8018600 <UART_SetConfig+0x2fc>)
 8018510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018514:	b29b      	uxth	r3, r3
 8018516:	2200      	movs	r2, #0
 8018518:	603b      	str	r3, [r7, #0]
 801851a:	607a      	str	r2, [r7, #4]
 801851c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018524:	f7e7 fed4 	bl	80002d0 <__aeabi_uldivmod>
 8018528:	4602      	mov	r2, r0
 801852a:	460b      	mov	r3, r1
 801852c:	4610      	mov	r0, r2
 801852e:	4619      	mov	r1, r3
 8018530:	f04f 0200 	mov.w	r2, #0
 8018534:	f04f 0300 	mov.w	r3, #0
 8018538:	020b      	lsls	r3, r1, #8
 801853a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801853e:	0202      	lsls	r2, r0, #8
 8018540:	6979      	ldr	r1, [r7, #20]
 8018542:	6849      	ldr	r1, [r1, #4]
 8018544:	0849      	lsrs	r1, r1, #1
 8018546:	2000      	movs	r0, #0
 8018548:	460c      	mov	r4, r1
 801854a:	4605      	mov	r5, r0
 801854c:	eb12 0804 	adds.w	r8, r2, r4
 8018550:	eb43 0905 	adc.w	r9, r3, r5
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	685b      	ldr	r3, [r3, #4]
 8018558:	2200      	movs	r2, #0
 801855a:	469a      	mov	sl, r3
 801855c:	4693      	mov	fp, r2
 801855e:	4652      	mov	r2, sl
 8018560:	465b      	mov	r3, fp
 8018562:	4640      	mov	r0, r8
 8018564:	4649      	mov	r1, r9
 8018566:	f7e7 feb3 	bl	80002d0 <__aeabi_uldivmod>
 801856a:	4602      	mov	r2, r0
 801856c:	460b      	mov	r3, r1
 801856e:	4613      	mov	r3, r2
 8018570:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018572:	6a3b      	ldr	r3, [r7, #32]
 8018574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018578:	d308      	bcc.n	801858c <UART_SetConfig+0x288>
 801857a:	6a3b      	ldr	r3, [r7, #32]
 801857c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018580:	d204      	bcs.n	801858c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018582:	697b      	ldr	r3, [r7, #20]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	6a3a      	ldr	r2, [r7, #32]
 8018588:	60da      	str	r2, [r3, #12]
 801858a:	e0c9      	b.n	8018720 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801858c:	2301      	movs	r3, #1
 801858e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8018592:	e0c5      	b.n	8018720 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	69db      	ldr	r3, [r3, #28]
 8018598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801859c:	d16d      	bne.n	801867a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801859e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80185a2:	3b01      	subs	r3, #1
 80185a4:	2b07      	cmp	r3, #7
 80185a6:	d82d      	bhi.n	8018604 <UART_SetConfig+0x300>
 80185a8:	a201      	add	r2, pc, #4	@ (adr r2, 80185b0 <UART_SetConfig+0x2ac>)
 80185aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ae:	bf00      	nop
 80185b0:	080185d1 	.word	0x080185d1
 80185b4:	080185d9 	.word	0x080185d9
 80185b8:	08018605 	.word	0x08018605
 80185bc:	080185df 	.word	0x080185df
 80185c0:	08018605 	.word	0x08018605
 80185c4:	08018605 	.word	0x08018605
 80185c8:	08018605 	.word	0x08018605
 80185cc:	080185e7 	.word	0x080185e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80185d0:	f7fe fc3e 	bl	8016e50 <HAL_RCC_GetPCLK2Freq>
 80185d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80185d6:	e01b      	b.n	8018610 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80185d8:	4b08      	ldr	r3, [pc, #32]	@ (80185fc <UART_SetConfig+0x2f8>)
 80185da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80185dc:	e018      	b.n	8018610 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80185de:	f7fe fba1 	bl	8016d24 <HAL_RCC_GetSysClockFreq>
 80185e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80185e4:	e014      	b.n	8018610 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80185e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80185ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80185ec:	e010      	b.n	8018610 <UART_SetConfig+0x30c>
 80185ee:	bf00      	nop
 80185f0:	cfff69f3 	.word	0xcfff69f3
 80185f4:	40008000 	.word	0x40008000
 80185f8:	40013800 	.word	0x40013800
 80185fc:	00f42400 	.word	0x00f42400
 8018600:	0801ed0c 	.word	0x0801ed0c
      default:
        pclk = 0U;
 8018604:	2300      	movs	r3, #0
 8018606:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8018608:	2301      	movs	r3, #1
 801860a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801860e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018612:	2b00      	cmp	r3, #0
 8018614:	f000 8084 	beq.w	8018720 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801861c:	4a4b      	ldr	r2, [pc, #300]	@ (801874c <UART_SetConfig+0x448>)
 801861e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018622:	461a      	mov	r2, r3
 8018624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018626:	fbb3 f3f2 	udiv	r3, r3, r2
 801862a:	005a      	lsls	r2, r3, #1
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	085b      	lsrs	r3, r3, #1
 8018632:	441a      	add	r2, r3
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	fbb2 f3f3 	udiv	r3, r2, r3
 801863c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801863e:	6a3b      	ldr	r3, [r7, #32]
 8018640:	2b0f      	cmp	r3, #15
 8018642:	d916      	bls.n	8018672 <UART_SetConfig+0x36e>
 8018644:	6a3b      	ldr	r3, [r7, #32]
 8018646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801864a:	d212      	bcs.n	8018672 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801864c:	6a3b      	ldr	r3, [r7, #32]
 801864e:	b29b      	uxth	r3, r3
 8018650:	f023 030f 	bic.w	r3, r3, #15
 8018654:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018656:	6a3b      	ldr	r3, [r7, #32]
 8018658:	085b      	lsrs	r3, r3, #1
 801865a:	b29b      	uxth	r3, r3
 801865c:	f003 0307 	and.w	r3, r3, #7
 8018660:	b29a      	uxth	r2, r3
 8018662:	8bfb      	ldrh	r3, [r7, #30]
 8018664:	4313      	orrs	r3, r2
 8018666:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	8bfa      	ldrh	r2, [r7, #30]
 801866e:	60da      	str	r2, [r3, #12]
 8018670:	e056      	b.n	8018720 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018672:	2301      	movs	r3, #1
 8018674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8018678:	e052      	b.n	8018720 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801867a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801867e:	3b01      	subs	r3, #1
 8018680:	2b07      	cmp	r3, #7
 8018682:	d822      	bhi.n	80186ca <UART_SetConfig+0x3c6>
 8018684:	a201      	add	r2, pc, #4	@ (adr r2, 801868c <UART_SetConfig+0x388>)
 8018686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801868a:	bf00      	nop
 801868c:	080186ad 	.word	0x080186ad
 8018690:	080186b5 	.word	0x080186b5
 8018694:	080186cb 	.word	0x080186cb
 8018698:	080186bb 	.word	0x080186bb
 801869c:	080186cb 	.word	0x080186cb
 80186a0:	080186cb 	.word	0x080186cb
 80186a4:	080186cb 	.word	0x080186cb
 80186a8:	080186c3 	.word	0x080186c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80186ac:	f7fe fbd0 	bl	8016e50 <HAL_RCC_GetPCLK2Freq>
 80186b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80186b2:	e010      	b.n	80186d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80186b4:	4b26      	ldr	r3, [pc, #152]	@ (8018750 <UART_SetConfig+0x44c>)
 80186b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80186b8:	e00d      	b.n	80186d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80186ba:	f7fe fb33 	bl	8016d24 <HAL_RCC_GetSysClockFreq>
 80186be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80186c0:	e009      	b.n	80186d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80186c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80186c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80186c8:	e005      	b.n	80186d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80186ca:	2300      	movs	r3, #0
 80186cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80186ce:	2301      	movs	r3, #1
 80186d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80186d4:	bf00      	nop
    }

    if (pclk != 0U)
 80186d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d021      	beq.n	8018720 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186e0:	4a1a      	ldr	r2, [pc, #104]	@ (801874c <UART_SetConfig+0x448>)
 80186e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80186e6:	461a      	mov	r2, r3
 80186e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	685b      	ldr	r3, [r3, #4]
 80186f2:	085b      	lsrs	r3, r3, #1
 80186f4:	441a      	add	r2, r3
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80186fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018700:	6a3b      	ldr	r3, [r7, #32]
 8018702:	2b0f      	cmp	r3, #15
 8018704:	d909      	bls.n	801871a <UART_SetConfig+0x416>
 8018706:	6a3b      	ldr	r3, [r7, #32]
 8018708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801870c:	d205      	bcs.n	801871a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801870e:	6a3b      	ldr	r3, [r7, #32]
 8018710:	b29a      	uxth	r2, r3
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	60da      	str	r2, [r3, #12]
 8018718:	e002      	b.n	8018720 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801871a:	2301      	movs	r3, #1
 801871c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	2201      	movs	r2, #1
 8018724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	2201      	movs	r2, #1
 801872c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018730:	697b      	ldr	r3, [r7, #20]
 8018732:	2200      	movs	r2, #0
 8018734:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018736:	697b      	ldr	r3, [r7, #20]
 8018738:	2200      	movs	r2, #0
 801873a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801873c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8018740:	4618      	mov	r0, r3
 8018742:	3730      	adds	r7, #48	@ 0x30
 8018744:	46bd      	mov	sp, r7
 8018746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801874a:	bf00      	nop
 801874c:	0801ed0c 	.word	0x0801ed0c
 8018750:	00f42400 	.word	0x00f42400

08018754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018754:	b480      	push	{r7}
 8018756:	b083      	sub	sp, #12
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018760:	f003 0308 	and.w	r3, r3, #8
 8018764:	2b00      	cmp	r3, #0
 8018766:	d00a      	beq.n	801877e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	685b      	ldr	r3, [r3, #4]
 801876e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	430a      	orrs	r2, r1
 801877c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	2b00      	cmp	r3, #0
 8018788:	d00a      	beq.n	80187a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	685b      	ldr	r3, [r3, #4]
 8018790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	430a      	orrs	r2, r1
 801879e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187a4:	f003 0302 	and.w	r3, r3, #2
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d00a      	beq.n	80187c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	685b      	ldr	r3, [r3, #4]
 80187b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	430a      	orrs	r2, r1
 80187c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187c6:	f003 0304 	and.w	r3, r3, #4
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d00a      	beq.n	80187e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	430a      	orrs	r2, r1
 80187e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187e8:	f003 0310 	and.w	r3, r3, #16
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d00a      	beq.n	8018806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	689b      	ldr	r3, [r3, #8]
 80187f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	430a      	orrs	r2, r1
 8018804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801880a:	f003 0320 	and.w	r3, r3, #32
 801880e:	2b00      	cmp	r3, #0
 8018810:	d00a      	beq.n	8018828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	689b      	ldr	r3, [r3, #8]
 8018818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	430a      	orrs	r2, r1
 8018826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801882c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018830:	2b00      	cmp	r3, #0
 8018832:	d01a      	beq.n	801886a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	430a      	orrs	r2, r1
 8018848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801884e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018852:	d10a      	bne.n	801886a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	685b      	ldr	r3, [r3, #4]
 801885a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	430a      	orrs	r2, r1
 8018868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801886e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018872:	2b00      	cmp	r3, #0
 8018874:	d00a      	beq.n	801888c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	685b      	ldr	r3, [r3, #4]
 801887c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	430a      	orrs	r2, r1
 801888a:	605a      	str	r2, [r3, #4]
  }
}
 801888c:	bf00      	nop
 801888e:	370c      	adds	r7, #12
 8018890:	46bd      	mov	sp, r7
 8018892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018896:	4770      	bx	lr

08018898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b098      	sub	sp, #96	@ 0x60
 801889c:	af02      	add	r7, sp, #8
 801889e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2200      	movs	r2, #0
 80188a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80188a8:	f7fb fc30 	bl	801410c <HAL_GetTick>
 80188ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f003 0308 	and.w	r3, r3, #8
 80188b8:	2b08      	cmp	r3, #8
 80188ba:	d12f      	bne.n	801891c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80188bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80188c0:	9300      	str	r3, [sp, #0]
 80188c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188c4:	2200      	movs	r2, #0
 80188c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f000 f88e 	bl	80189ec <UART_WaitOnFlagUntilTimeout>
 80188d0:	4603      	mov	r3, r0
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d022      	beq.n	801891c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188de:	e853 3f00 	ldrex	r3, [r3]
 80188e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80188e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80188ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	461a      	mov	r2, r3
 80188f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80188f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80188f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80188fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80188fc:	e841 2300 	strex	r3, r2, [r1]
 8018900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018904:	2b00      	cmp	r3, #0
 8018906:	d1e6      	bne.n	80188d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2220      	movs	r2, #32
 801890c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2200      	movs	r2, #0
 8018914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018918:	2303      	movs	r3, #3
 801891a:	e063      	b.n	80189e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	f003 0304 	and.w	r3, r3, #4
 8018926:	2b04      	cmp	r3, #4
 8018928:	d149      	bne.n	80189be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801892a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801892e:	9300      	str	r3, [sp, #0]
 8018930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018932:	2200      	movs	r2, #0
 8018934:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f000 f857 	bl	80189ec <UART_WaitOnFlagUntilTimeout>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d03c      	beq.n	80189be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801894c:	e853 3f00 	ldrex	r3, [r3]
 8018950:	623b      	str	r3, [r7, #32]
   return(result);
 8018952:	6a3b      	ldr	r3, [r7, #32]
 8018954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	461a      	mov	r2, r3
 8018960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018962:	633b      	str	r3, [r7, #48]	@ 0x30
 8018964:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801896a:	e841 2300 	strex	r3, r2, [r1]
 801896e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018972:	2b00      	cmp	r3, #0
 8018974:	d1e6      	bne.n	8018944 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	3308      	adds	r3, #8
 801897c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	e853 3f00 	ldrex	r3, [r3]
 8018984:	60fb      	str	r3, [r7, #12]
   return(result);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	f023 0301 	bic.w	r3, r3, #1
 801898c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	3308      	adds	r3, #8
 8018994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018996:	61fa      	str	r2, [r7, #28]
 8018998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801899a:	69b9      	ldr	r1, [r7, #24]
 801899c:	69fa      	ldr	r2, [r7, #28]
 801899e:	e841 2300 	strex	r3, r2, [r1]
 80189a2:	617b      	str	r3, [r7, #20]
   return(result);
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d1e5      	bne.n	8018976 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2220      	movs	r2, #32
 80189ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2200      	movs	r2, #0
 80189b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80189ba:	2303      	movs	r3, #3
 80189bc:	e012      	b.n	80189e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2220      	movs	r2, #32
 80189c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2220      	movs	r2, #32
 80189ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2200      	movs	r2, #0
 80189d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2200      	movs	r2, #0
 80189d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2200      	movs	r2, #0
 80189de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80189e2:	2300      	movs	r3, #0
}
 80189e4:	4618      	mov	r0, r3
 80189e6:	3758      	adds	r7, #88	@ 0x58
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	603b      	str	r3, [r7, #0]
 80189f8:	4613      	mov	r3, r2
 80189fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80189fc:	e04f      	b.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80189fe:	69bb      	ldr	r3, [r7, #24]
 8018a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a04:	d04b      	beq.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018a06:	f7fb fb81 	bl	801410c <HAL_GetTick>
 8018a0a:	4602      	mov	r2, r0
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	1ad3      	subs	r3, r2, r3
 8018a10:	69ba      	ldr	r2, [r7, #24]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d302      	bcc.n	8018a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8018a16:	69bb      	ldr	r3, [r7, #24]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d101      	bne.n	8018a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018a1c:	2303      	movs	r3, #3
 8018a1e:	e04e      	b.n	8018abe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	f003 0304 	and.w	r3, r3, #4
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d037      	beq.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	2b80      	cmp	r3, #128	@ 0x80
 8018a32:	d034      	beq.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	2b40      	cmp	r3, #64	@ 0x40
 8018a38:	d031      	beq.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	69db      	ldr	r3, [r3, #28]
 8018a40:	f003 0308 	and.w	r3, r3, #8
 8018a44:	2b08      	cmp	r3, #8
 8018a46:	d110      	bne.n	8018a6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2208      	movs	r2, #8
 8018a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018a50:	68f8      	ldr	r0, [r7, #12]
 8018a52:	f000 f838 	bl	8018ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	2208      	movs	r2, #8
 8018a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	2200      	movs	r2, #0
 8018a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8018a66:	2301      	movs	r3, #1
 8018a68:	e029      	b.n	8018abe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	69db      	ldr	r3, [r3, #28]
 8018a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018a78:	d111      	bne.n	8018a9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018a84:	68f8      	ldr	r0, [r7, #12]
 8018a86:	f000 f81e 	bl	8018ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	2220      	movs	r2, #32
 8018a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	2200      	movs	r2, #0
 8018a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8018a9a:	2303      	movs	r3, #3
 8018a9c:	e00f      	b.n	8018abe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	69da      	ldr	r2, [r3, #28]
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	4013      	ands	r3, r2
 8018aa8:	68ba      	ldr	r2, [r7, #8]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	bf0c      	ite	eq
 8018aae:	2301      	moveq	r3, #1
 8018ab0:	2300      	movne	r3, #0
 8018ab2:	b2db      	uxtb	r3, r3
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	79fb      	ldrb	r3, [r7, #7]
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d0a0      	beq.n	80189fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018abc:	2300      	movs	r3, #0
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	3710      	adds	r7, #16
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bd80      	pop	{r7, pc}

08018ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018ac6:	b480      	push	{r7}
 8018ac8:	b095      	sub	sp, #84	@ 0x54
 8018aca:	af00      	add	r7, sp, #0
 8018acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ad6:	e853 3f00 	ldrex	r3, [r3]
 8018ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8018adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	461a      	mov	r2, r3
 8018aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8018aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018af4:	e841 2300 	strex	r3, r2, [r1]
 8018af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d1e6      	bne.n	8018ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	3308      	adds	r3, #8
 8018b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b08:	6a3b      	ldr	r3, [r7, #32]
 8018b0a:	e853 3f00 	ldrex	r3, [r3]
 8018b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018b16:	f023 0301 	bic.w	r3, r3, #1
 8018b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	3308      	adds	r3, #8
 8018b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8018b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b2c:	e841 2300 	strex	r3, r2, [r1]
 8018b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d1e3      	bne.n	8018b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b3c:	2b01      	cmp	r3, #1
 8018b3e:	d118      	bne.n	8018b72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	e853 3f00 	ldrex	r3, [r3]
 8018b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	f023 0310 	bic.w	r3, r3, #16
 8018b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	461a      	mov	r2, r3
 8018b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b5e:	61bb      	str	r3, [r7, #24]
 8018b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b62:	6979      	ldr	r1, [r7, #20]
 8018b64:	69ba      	ldr	r2, [r7, #24]
 8018b66:	e841 2300 	strex	r3, r2, [r1]
 8018b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8018b6c:	693b      	ldr	r3, [r7, #16]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d1e6      	bne.n	8018b40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	2220      	movs	r2, #32
 8018b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2200      	movs	r2, #0
 8018b84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8018b86:	bf00      	nop
 8018b88:	3754      	adds	r7, #84	@ 0x54
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b90:	4770      	bx	lr

08018b92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018b92:	b480      	push	{r7}
 8018b94:	b085      	sub	sp, #20
 8018b96:	af00      	add	r7, sp, #0
 8018b98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018ba0:	2b01      	cmp	r3, #1
 8018ba2:	d101      	bne.n	8018ba8 <HAL_UARTEx_DisableFifoMode+0x16>
 8018ba4:	2302      	movs	r3, #2
 8018ba6:	e027      	b.n	8018bf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2201      	movs	r2, #1
 8018bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	2224      	movs	r2, #36	@ 0x24
 8018bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f022 0201 	bic.w	r2, r2, #1
 8018bce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8018bd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	68fa      	ldr	r2, [r7, #12]
 8018be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2220      	movs	r2, #32
 8018bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018bf6:	2300      	movs	r3, #0
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3714      	adds	r7, #20
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d101      	bne.n	8018c1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018c18:	2302      	movs	r3, #2
 8018c1a:	e02d      	b.n	8018c78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2224      	movs	r2, #36	@ 0x24
 8018c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f022 0201 	bic.w	r2, r2, #1
 8018c42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	689b      	ldr	r3, [r3, #8]
 8018c4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	683a      	ldr	r2, [r7, #0]
 8018c54:	430a      	orrs	r2, r1
 8018c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f000 f84f 	bl	8018cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	68fa      	ldr	r2, [r7, #12]
 8018c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2220      	movs	r2, #32
 8018c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2200      	movs	r2, #0
 8018c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018c76:	2300      	movs	r3, #0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3710      	adds	r7, #16
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b084      	sub	sp, #16
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d101      	bne.n	8018c98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018c94:	2302      	movs	r3, #2
 8018c96:	e02d      	b.n	8018cf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2224      	movs	r2, #36	@ 0x24
 8018ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	681a      	ldr	r2, [r3, #0]
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f022 0201 	bic.w	r2, r2, #1
 8018cbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	689b      	ldr	r3, [r3, #8]
 8018cc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	683a      	ldr	r2, [r7, #0]
 8018cd0:	430a      	orrs	r2, r1
 8018cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f000 f811 	bl	8018cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	68fa      	ldr	r2, [r7, #12]
 8018ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	2220      	movs	r2, #32
 8018ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	2200      	movs	r2, #0
 8018cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018cf2:	2300      	movs	r3, #0
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	3710      	adds	r7, #16
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}

08018cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018cfc:	b480      	push	{r7}
 8018cfe:	b085      	sub	sp, #20
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d108      	bne.n	8018d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2201      	movs	r2, #1
 8018d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2201      	movs	r2, #1
 8018d18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018d1c:	e031      	b.n	8018d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018d1e:	2308      	movs	r3, #8
 8018d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018d22:	2308      	movs	r3, #8
 8018d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	689b      	ldr	r3, [r3, #8]
 8018d2c:	0e5b      	lsrs	r3, r3, #25
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	f003 0307 	and.w	r3, r3, #7
 8018d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	689b      	ldr	r3, [r3, #8]
 8018d3c:	0f5b      	lsrs	r3, r3, #29
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	f003 0307 	and.w	r3, r3, #7
 8018d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018d46:	7bbb      	ldrb	r3, [r7, #14]
 8018d48:	7b3a      	ldrb	r2, [r7, #12]
 8018d4a:	4911      	ldr	r1, [pc, #68]	@ (8018d90 <UARTEx_SetNbDataToProcess+0x94>)
 8018d4c:	5c8a      	ldrb	r2, [r1, r2]
 8018d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018d52:	7b3a      	ldrb	r2, [r7, #12]
 8018d54:	490f      	ldr	r1, [pc, #60]	@ (8018d94 <UARTEx_SetNbDataToProcess+0x98>)
 8018d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8018d5c:	b29a      	uxth	r2, r3
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018d64:	7bfb      	ldrb	r3, [r7, #15]
 8018d66:	7b7a      	ldrb	r2, [r7, #13]
 8018d68:	4909      	ldr	r1, [pc, #36]	@ (8018d90 <UARTEx_SetNbDataToProcess+0x94>)
 8018d6a:	5c8a      	ldrb	r2, [r1, r2]
 8018d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018d70:	7b7a      	ldrb	r2, [r7, #13]
 8018d72:	4908      	ldr	r1, [pc, #32]	@ (8018d94 <UARTEx_SetNbDataToProcess+0x98>)
 8018d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8018d82:	bf00      	nop
 8018d84:	3714      	adds	r7, #20
 8018d86:	46bd      	mov	sp, r7
 8018d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8c:	4770      	bx	lr
 8018d8e:	bf00      	nop
 8018d90:	0801ed24 	.word	0x0801ed24
 8018d94:	0801ed2c 	.word	0x0801ed2c

08018d98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018d98:	b480      	push	{r7}
 8018d9a:	b085      	sub	sp, #20
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018da0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8018da4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8018dac:	b29a      	uxth	r2, r3
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	43db      	mvns	r3, r3
 8018db4:	b29b      	uxth	r3, r3
 8018db6:	4013      	ands	r3, r2
 8018db8:	b29a      	uxth	r2, r3
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8018dc0:	2300      	movs	r3, #0
}
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3714      	adds	r7, #20
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dcc:	4770      	bx	lr

08018dce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018dce:	b480      	push	{r7}
 8018dd0:	b085      	sub	sp, #20
 8018dd2:	af00      	add	r7, sp, #0
 8018dd4:	60f8      	str	r0, [r7, #12]
 8018dd6:	1d3b      	adds	r3, r7, #4
 8018dd8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	2201      	movs	r2, #1
 8018de0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	2200      	movs	r2, #0
 8018de8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	2200      	movs	r2, #0
 8018df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2200      	movs	r2, #0
 8018df8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8018dfc:	2300      	movs	r3, #0
}
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3714      	adds	r7, #20
 8018e02:	46bd      	mov	sp, r7
 8018e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e08:	4770      	bx	lr
	...

08018e0c <ToF_init>:
RANGING_SENSOR_Result_t Result;
int32_t status = 0;

static int32_t decimal_part(float_t x);

void ToF_init(void){
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
	  	printf("CTOS ToF Sensor \n");
 8018e12:	4838      	ldr	r0, [pc, #224]	@ (8018ef4 <ToF_init+0xe8>)
 8018e14:	f004 fc08 	bl	801d628 <puts>

	  	//initialisation du sensor
	  	status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L4CX);
 8018e18:	2000      	movs	r0, #0
 8018e1a:	f004 f96d 	bl	801d0f8 <CUSTOM_RANGING_SENSOR_Init>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	4a35      	ldr	r2, [pc, #212]	@ (8018ef8 <ToF_init+0xec>)
 8018e22:	6013      	str	r3, [r2, #0]
	  	/*if (status != BSP_ERROR_NONE)
	  	 {
	  	 printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
	  	 while (1);
	  	 }*/
	  	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8018e24:	4b35      	ldr	r3, [pc, #212]	@ (8018efc <ToF_init+0xf0>)
 8018e26:	2202      	movs	r2, #2
 8018e28:	601a      	str	r2, [r3, #0]
	  	Profile.TimingBudget = TIMING_BUDGET;
 8018e2a:	4b34      	ldr	r3, [pc, #208]	@ (8018efc <ToF_init+0xf0>)
 8018e2c:	221e      	movs	r2, #30
 8018e2e:	605a      	str	r2, [r3, #4]
	  	Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 8018e30:	4b32      	ldr	r3, [pc, #200]	@ (8018efc <ToF_init+0xf0>)
 8018e32:	2200      	movs	r2, #0
 8018e34:	609a      	str	r2, [r3, #8]
	  	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8018e36:	4b31      	ldr	r3, [pc, #196]	@ (8018efc <ToF_init+0xf0>)
 8018e38:	2201      	movs	r2, #1
 8018e3a:	60da      	str	r2, [r3, #12]
	  	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8018e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8018efc <ToF_init+0xf0>)
 8018e3e:	2201      	movs	r2, #1
 8018e40:	611a      	str	r2, [r3, #16]

	  	//Configuration of the sensor
	  	status = CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L4CX,&Profile);
 8018e42:	492e      	ldr	r1, [pc, #184]	@ (8018efc <ToF_init+0xf0>)
 8018e44:	2000      	movs	r0, #0
 8018e46:	f004 f97d 	bl	801d144 <CUSTOM_RANGING_SENSOR_ConfigProfile>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8018ef8 <ToF_init+0xec>)
 8018e4e:	6013      	str	r3, [r2, #0]

	  	if (status != BSP_ERROR_NONE) {
 8018e50:	4b29      	ldr	r3, [pc, #164]	@ (8018ef8 <ToF_init+0xec>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d008      	beq.n	8018e6a <ToF_init+0x5e>

	  		printf("VL53L4A2_RANGING_SENSOR_ConfigProfile failed with status %ld\n",status);
 8018e58:	4b27      	ldr	r3, [pc, #156]	@ (8018ef8 <ToF_init+0xec>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4828      	ldr	r0, [pc, #160]	@ (8018f00 <ToF_init+0xf4>)
 8018e60:	f004 fb72 	bl	801d548 <iprintf>
	  		Error_Handler();
 8018e64:	f7e7 ffc6 	bl	8000df4 <Error_Handler>
 8018e68:	e002      	b.n	8018e70 <ToF_init+0x64>

	  	} else {

	  		printf("VL53L4A2_RANGING_SENSOR_ConfigProfile succeeded\n");
 8018e6a:	4826      	ldr	r0, [pc, #152]	@ (8018f04 <ToF_init+0xf8>)
 8018e6c:	f004 fbdc 	bl	801d628 <puts>
	  	}

	  	//Start the ToF sensor on the central board in blocking continuous mode

	  	status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L4CX,RS_MODE_BLOCKING_CONTINUOUS);
 8018e70:	2101      	movs	r1, #1
 8018e72:	2000      	movs	r0, #0
 8018e74:	f004 f9ba 	bl	801d1ec <CUSTOM_RANGING_SENSOR_Start>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8018ef8 <ToF_init+0xec>)
 8018e7c:	6013      	str	r3, [r2, #0]

	  	if (status != BSP_ERROR_NONE) {
 8018e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8018ef8 <ToF_init+0xec>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d004      	beq.n	8018e90 <ToF_init+0x84>
	  		printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 8018e86:	4820      	ldr	r0, [pc, #128]	@ (8018f08 <ToF_init+0xfc>)
 8018e88:	f004 fbce 	bl	801d628 <puts>
	  		while (1)
 8018e8c:	bf00      	nop
 8018e8e:	e7fd      	b.n	8018e8c <ToF_init+0x80>
	  			;
	  	}

	  	//Data collection for Calibration of the sensor
	  	for (int i = 0; i < 10; i++) {
 8018e90:	2300      	movs	r3, #0
 8018e92:	607b      	str	r3, [r7, #4]
 8018e94:	e013      	b.n	8018ebe <ToF_init+0xb2>

	  		status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L4CX,
 8018e96:	491d      	ldr	r1, [pc, #116]	@ (8018f0c <ToF_init+0x100>)
 8018e98:	2000      	movs	r0, #0
 8018e9a:	f004 f97d 	bl	801d198 <CUSTOM_RANGING_SENSOR_GetDistance>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	4a15      	ldr	r2, [pc, #84]	@ (8018ef8 <ToF_init+0xec>)
 8018ea2:	6013      	str	r3, [r2, #0]
	  				&Result);

	  		if (status == BSP_ERROR_NONE) {
 8018ea4:	4b14      	ldr	r3, [pc, #80]	@ (8018ef8 <ToF_init+0xec>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d102      	bne.n	8018eb2 <ToF_init+0xa6>
	  			print_result(&Result);
 8018eac:	4817      	ldr	r0, [pc, #92]	@ (8018f0c <ToF_init+0x100>)
 8018eae:	f000 f849 	bl	8018f44 <print_result>
	  		}

	  		HAL_Delay(POLLING_PERIOD);
 8018eb2:	20fa      	movs	r0, #250	@ 0xfa
 8018eb4:	f7fb f942 	bl	801413c <HAL_Delay>
	  	for (int i = 0; i < 10; i++) {
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	3301      	adds	r3, #1
 8018ebc:	607b      	str	r3, [r7, #4]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2b09      	cmp	r3, #9
 8018ec2:	dde8      	ble.n	8018e96 <ToF_init+0x8a>
	  	}

	  	CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L4CX);
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	f004 f9bd 	bl	801d244 <CUSTOM_RANGING_SENSOR_Stop>


	  	//Start the ToF sensor on the central board in blocking continuous mode
	  	status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L4CX, RS_MODE_BLOCKING_CONTINUOUS);
 8018eca:	2101      	movs	r1, #1
 8018ecc:	2000      	movs	r0, #0
 8018ece:	f004 f98d 	bl	801d1ec <CUSTOM_RANGING_SENSOR_Start>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	4a08      	ldr	r2, [pc, #32]	@ (8018ef8 <ToF_init+0xec>)
 8018ed6:	6013      	str	r3, [r2, #0]


	  	//if error are detected a message is returned
	  	if (status != BSP_ERROR_NONE) {
 8018ed8:	4b07      	ldr	r3, [pc, #28]	@ (8018ef8 <ToF_init+0xec>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <ToF_init+0xde>
	  		printf("RANGING_SENSOR_Start failed\n");
 8018ee0:	480b      	ldr	r0, [pc, #44]	@ (8018f10 <ToF_init+0x104>)
 8018ee2:	f004 fba1 	bl	801d628 <puts>
	  		while (1)
 8018ee6:	bf00      	nop
 8018ee8:	e7fd      	b.n	8018ee6 <ToF_init+0xda>
	  			;
	  	}
}
 8018eea:	bf00      	nop
 8018eec:	3708      	adds	r7, #8
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	0801ea14 	.word	0x0801ea14
 8018ef8:	200011e0 	.word	0x200011e0
 8018efc:	20001184 	.word	0x20001184
 8018f00:	0801ea28 	.word	0x0801ea28
 8018f04:	0801ea68 	.word	0x0801ea68
 8018f08:	0801ea98 	.word	0x0801ea98
 8018f0c:	20001198 	.word	0x20001198
 8018f10:	0801eac0 	.word	0x0801eac0

08018f14 <ToF_acquire_data>:

void ToF_acquire_data(RANGING_SENSOR_Result_t* result) {
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b082      	sub	sp, #8
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]

	status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L4CX, result);
 8018f1c:	6879      	ldr	r1, [r7, #4]
 8018f1e:	2000      	movs	r0, #0
 8018f20:	f004 f93a 	bl	801d198 <CUSTOM_RANGING_SENSOR_GetDistance>
 8018f24:	4603      	mov	r3, r0
 8018f26:	4a06      	ldr	r2, [pc, #24]	@ (8018f40 <ToF_acquire_data+0x2c>)
 8018f28:	6013      	str	r3, [r2, #0]
	if(status != BSP_ERROR_NONE){
 8018f2a:	4b05      	ldr	r3, [pc, #20]	@ (8018f40 <ToF_acquire_data+0x2c>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d001      	beq.n	8018f36 <ToF_acquire_data+0x22>
		Error_Handler();
 8018f32:	f7e7 ff5f 	bl	8000df4 <Error_Handler>
	}
}
 8018f36:	bf00      	nop
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	200011e0 	.word	0x200011e0

08018f44 <print_result>:


void print_result(RANGING_SENSOR_Result_t *Result)
{
 8018f44:	b590      	push	{r4, r7, lr}
 8018f46:	ed2d 8b02 	vpush	{d8}
 8018f4a:	b085      	sub	sp, #20
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8018f50:	2300      	movs	r3, #0
 8018f52:	73fb      	strb	r3, [r7, #15]
 8018f54:	e096      	b.n	8019084 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8018f56:	7bfa      	ldrb	r2, [r7, #15]
 8018f58:	6879      	ldr	r1, [r7, #4]
 8018f5a:	4613      	mov	r3, r2
 8018f5c:	011b      	lsls	r3, r3, #4
 8018f5e:	4413      	add	r3, r2
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	440b      	add	r3, r1
 8018f64:	3304      	adds	r3, #4
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	4619      	mov	r1, r3
 8018f6a:	484d      	ldr	r0, [pc, #308]	@ (80190a0 <print_result+0x15c>)
 8018f6c:	f004 faec 	bl	801d548 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8018f70:	2300      	movs	r3, #0
 8018f72:	73bb      	strb	r3, [r7, #14]
 8018f74:	e076      	b.n	8019064 <print_result+0x120>
    {
      printf("\n |---> ");
 8018f76:	484b      	ldr	r0, [pc, #300]	@ (80190a4 <print_result+0x160>)
 8018f78:	f004 fae6 	bl	801d548 <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 8018f7c:	7bfa      	ldrb	r2, [r7, #15]
 8018f7e:	7bb8      	ldrb	r0, [r7, #14]
 8018f80:	6879      	ldr	r1, [r7, #4]
 8018f82:	4613      	mov	r3, r2
 8018f84:	011b      	lsls	r3, r3, #4
 8018f86:	4413      	add	r3, r2
 8018f88:	4403      	add	r3, r0
 8018f8a:	3304      	adds	r3, #4
 8018f8c:	009b      	lsls	r3, r3, #2
 8018f8e:	440b      	add	r3, r1
 8018f90:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8018f92:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 8018f94:	7bfa      	ldrb	r2, [r7, #15]
 8018f96:	7bb8      	ldrb	r0, [r7, #14]
 8018f98:	6879      	ldr	r1, [r7, #4]
 8018f9a:	4613      	mov	r3, r2
 8018f9c:	011b      	lsls	r3, r3, #4
 8018f9e:	4413      	add	r3, r2
 8018fa0:	4403      	add	r3, r0
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	440b      	add	r3, r1
 8018fa6:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8018fa8:	461a      	mov	r2, r3
 8018faa:	4621      	mov	r1, r4
 8018fac:	483e      	ldr	r0, [pc, #248]	@ (80190a8 <print_result+0x164>)
 8018fae:	f004 facb 	bl	801d548 <iprintf>

      if (Profile.EnableAmbient)
 8018fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80190ac <print_result+0x168>)
 8018fb4:	68db      	ldr	r3, [r3, #12]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d026      	beq.n	8019008 <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 8018fba:	7bfa      	ldrb	r2, [r7, #15]
 8018fbc:	7bb8      	ldrb	r0, [r7, #14]
 8018fbe:	6879      	ldr	r1, [r7, #4]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	011b      	lsls	r3, r3, #4
 8018fc4:	4413      	add	r3, r2
 8018fc6:	4403      	add	r3, r0
 8018fc8:	3308      	adds	r3, #8
 8018fca:	009b      	lsls	r3, r3, #2
 8018fcc:	440b      	add	r3, r1
 8018fce:	3308      	adds	r3, #8
 8018fd0:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 8018fd4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 8018fd8:	7bfa      	ldrb	r2, [r7, #15]
 8018fda:	7bb8      	ldrb	r0, [r7, #14]
 8018fdc:	6879      	ldr	r1, [r7, #4]
 8018fde:	4613      	mov	r3, r2
 8018fe0:	011b      	lsls	r3, r3, #4
 8018fe2:	4413      	add	r3, r2
 8018fe4:	4403      	add	r3, r0
 8018fe6:	3308      	adds	r3, #8
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	440b      	add	r3, r1
 8018fec:	3308      	adds	r3, #8
 8018fee:	edd3 7a00 	vldr	s15, [r3]
 8018ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8018ff6:	f000 f91b 	bl	8019230 <decimal_part>
 8018ffa:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 8018ffc:	461a      	mov	r2, r3
 8018ffe:	ee18 1a10 	vmov	r1, s16
 8019002:	482b      	ldr	r0, [pc, #172]	@ (80190b0 <print_result+0x16c>)
 8019004:	f004 faa0 	bl	801d548 <iprintf>

      if (Profile.EnableSignal)
 8019008:	4b28      	ldr	r3, [pc, #160]	@ (80190ac <print_result+0x168>)
 801900a:	691b      	ldr	r3, [r3, #16]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d026      	beq.n	801905e <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8019010:	7bfa      	ldrb	r2, [r7, #15]
 8019012:	7bb8      	ldrb	r0, [r7, #14]
 8019014:	6879      	ldr	r1, [r7, #4]
 8019016:	4613      	mov	r3, r2
 8019018:	011b      	lsls	r3, r3, #4
 801901a:	4413      	add	r3, r2
 801901c:	4403      	add	r3, r0
 801901e:	330c      	adds	r3, #12
 8019020:	009b      	lsls	r3, r3, #2
 8019022:	440b      	add	r3, r1
 8019024:	3308      	adds	r3, #8
 8019026:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 801902a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 801902e:	7bfa      	ldrb	r2, [r7, #15]
 8019030:	7bb8      	ldrb	r0, [r7, #14]
 8019032:	6879      	ldr	r1, [r7, #4]
 8019034:	4613      	mov	r3, r2
 8019036:	011b      	lsls	r3, r3, #4
 8019038:	4413      	add	r3, r2
 801903a:	4403      	add	r3, r0
 801903c:	330c      	adds	r3, #12
 801903e:	009b      	lsls	r3, r3, #2
 8019040:	440b      	add	r3, r1
 8019042:	3308      	adds	r3, #8
 8019044:	edd3 7a00 	vldr	s15, [r3]
 8019048:	eeb0 0a67 	vmov.f32	s0, s15
 801904c:	f000 f8f0 	bl	8019230 <decimal_part>
 8019050:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 8019052:	461a      	mov	r2, r3
 8019054:	ee18 1a10 	vmov	r1, s16
 8019058:	4816      	ldr	r0, [pc, #88]	@ (80190b4 <print_result+0x170>)
 801905a:	f004 fa75 	bl	801d548 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 801905e:	7bbb      	ldrb	r3, [r7, #14]
 8019060:	3301      	adds	r3, #1
 8019062:	73bb      	strb	r3, [r7, #14]
 8019064:	7bb9      	ldrb	r1, [r7, #14]
 8019066:	7bfa      	ldrb	r2, [r7, #15]
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	4613      	mov	r3, r2
 801906c:	011b      	lsls	r3, r3, #4
 801906e:	4413      	add	r3, r2
 8019070:	009b      	lsls	r3, r3, #2
 8019072:	4403      	add	r3, r0
 8019074:	3304      	adds	r3, #4
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	4299      	cmp	r1, r3
 801907a:	f4ff af7c 	bcc.w	8018f76 <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801907e:	7bfb      	ldrb	r3, [r7, #15]
 8019080:	3301      	adds	r3, #1
 8019082:	73fb      	strb	r3, [r7, #15]
 8019084:	7bfb      	ldrb	r3, [r7, #15]
 8019086:	2b00      	cmp	r3, #0
 8019088:	f43f af65 	beq.w	8018f56 <print_result+0x12>
    }
  }
  printf("\n");
 801908c:	200a      	movs	r0, #10
 801908e:	f004 fa6d 	bl	801d56c <putchar>
}
 8019092:	bf00      	nop
 8019094:	3714      	adds	r7, #20
 8019096:	46bd      	mov	sp, r7
 8019098:	ecbd 8b02 	vpop	{d8}
 801909c:	bd90      	pop	{r4, r7, pc}
 801909e:	bf00      	nop
 80190a0:	0801eadc 	.word	0x0801eadc
 80190a4:	0801eaec 	.word	0x0801eaec
 80190a8:	0801eaf8 	.word	0x0801eaf8
 80190ac:	20001184 	.word	0x20001184
 80190b0:	0801eb1c 	.word	0x0801eb1c
 80190b4:	0801eb3c 	.word	0x0801eb3c

080190b8 <logger_print_result>:

void logger_print_result(RANGING_SENSOR_Result_t *Result)
{
 80190b8:	b590      	push	{r4, r7, lr}
 80190ba:	ed2d 8b02 	vpush	{d8}
 80190be:	b085      	sub	sp, #20
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80190c4:	2300      	movs	r3, #0
 80190c6:	73fb      	strb	r3, [r7, #15]
 80190c8:	e096      	b.n	80191f8 <logger_print_result+0x140>
  {
    log_printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80190ca:	7bfa      	ldrb	r2, [r7, #15]
 80190cc:	6879      	ldr	r1, [r7, #4]
 80190ce:	4613      	mov	r3, r2
 80190d0:	011b      	lsls	r3, r3, #4
 80190d2:	4413      	add	r3, r2
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	440b      	add	r3, r1
 80190d8:	3304      	adds	r3, #4
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	4619      	mov	r1, r3
 80190de:	484d      	ldr	r0, [pc, #308]	@ (8019214 <logger_print_result+0x15c>)
 80190e0:	f7fa ff06 	bl	8013ef0 <log_printf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80190e4:	2300      	movs	r3, #0
 80190e6:	73bb      	strb	r3, [r7, #14]
 80190e8:	e076      	b.n	80191d8 <logger_print_result+0x120>
    {
      log_printf("\n |---> ");
 80190ea:	484b      	ldr	r0, [pc, #300]	@ (8019218 <logger_print_result+0x160>)
 80190ec:	f7fa ff00 	bl	8013ef0 <log_printf>

      log_printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 80190f0:	7bfa      	ldrb	r2, [r7, #15]
 80190f2:	7bb8      	ldrb	r0, [r7, #14]
 80190f4:	6879      	ldr	r1, [r7, #4]
 80190f6:	4613      	mov	r3, r2
 80190f8:	011b      	lsls	r3, r3, #4
 80190fa:	4413      	add	r3, r2
 80190fc:	4403      	add	r3, r0
 80190fe:	3304      	adds	r3, #4
 8019100:	009b      	lsls	r3, r3, #2
 8019102:	440b      	add	r3, r1
 8019104:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 8019106:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 8019108:	7bfa      	ldrb	r2, [r7, #15]
 801910a:	7bb8      	ldrb	r0, [r7, #14]
 801910c:	6879      	ldr	r1, [r7, #4]
 801910e:	4613      	mov	r3, r2
 8019110:	011b      	lsls	r3, r3, #4
 8019112:	4413      	add	r3, r2
 8019114:	4403      	add	r3, r0
 8019116:	009b      	lsls	r3, r3, #2
 8019118:	440b      	add	r3, r1
 801911a:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 801911c:	461a      	mov	r2, r3
 801911e:	4621      	mov	r1, r4
 8019120:	483e      	ldr	r0, [pc, #248]	@ (801921c <logger_print_result+0x164>)
 8019122:	f7fa fee5 	bl	8013ef0 <log_printf>

      if (Profile.EnableAmbient)
 8019126:	4b3e      	ldr	r3, [pc, #248]	@ (8019220 <logger_print_result+0x168>)
 8019128:	68db      	ldr	r3, [r3, #12]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d026      	beq.n	801917c <logger_print_result+0xc4>
        log_printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 801912e:	7bfa      	ldrb	r2, [r7, #15]
 8019130:	7bb8      	ldrb	r0, [r7, #14]
 8019132:	6879      	ldr	r1, [r7, #4]
 8019134:	4613      	mov	r3, r2
 8019136:	011b      	lsls	r3, r3, #4
 8019138:	4413      	add	r3, r2
 801913a:	4403      	add	r3, r0
 801913c:	3308      	adds	r3, #8
 801913e:	009b      	lsls	r3, r3, #2
 8019140:	440b      	add	r3, r1
 8019142:	3308      	adds	r3, #8
 8019144:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 8019148:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 801914c:	7bfa      	ldrb	r2, [r7, #15]
 801914e:	7bb8      	ldrb	r0, [r7, #14]
 8019150:	6879      	ldr	r1, [r7, #4]
 8019152:	4613      	mov	r3, r2
 8019154:	011b      	lsls	r3, r3, #4
 8019156:	4413      	add	r3, r2
 8019158:	4403      	add	r3, r0
 801915a:	3308      	adds	r3, #8
 801915c:	009b      	lsls	r3, r3, #2
 801915e:	440b      	add	r3, r1
 8019160:	3308      	adds	r3, #8
 8019162:	edd3 7a00 	vldr	s15, [r3]
 8019166:	eeb0 0a67 	vmov.f32	s0, s15
 801916a:	f000 f861 	bl	8019230 <decimal_part>
 801916e:	4603      	mov	r3, r0
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 8019170:	461a      	mov	r2, r3
 8019172:	ee18 1a10 	vmov	r1, s16
 8019176:	482b      	ldr	r0, [pc, #172]	@ (8019224 <logger_print_result+0x16c>)
 8019178:	f7fa feba 	bl	8013ef0 <log_printf>

      if (Profile.EnableSignal)
 801917c:	4b28      	ldr	r3, [pc, #160]	@ (8019220 <logger_print_result+0x168>)
 801917e:	691b      	ldr	r3, [r3, #16]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d026      	beq.n	80191d2 <logger_print_result+0x11a>
        log_printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8019184:	7bfa      	ldrb	r2, [r7, #15]
 8019186:	7bb8      	ldrb	r0, [r7, #14]
 8019188:	6879      	ldr	r1, [r7, #4]
 801918a:	4613      	mov	r3, r2
 801918c:	011b      	lsls	r3, r3, #4
 801918e:	4413      	add	r3, r2
 8019190:	4403      	add	r3, r0
 8019192:	330c      	adds	r3, #12
 8019194:	009b      	lsls	r3, r3, #2
 8019196:	440b      	add	r3, r1
 8019198:	3308      	adds	r3, #8
 801919a:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Signal = %ld.%02ld kcps/spad",
 801919e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 80191a2:	7bfa      	ldrb	r2, [r7, #15]
 80191a4:	7bb8      	ldrb	r0, [r7, #14]
 80191a6:	6879      	ldr	r1, [r7, #4]
 80191a8:	4613      	mov	r3, r2
 80191aa:	011b      	lsls	r3, r3, #4
 80191ac:	4413      	add	r3, r2
 80191ae:	4403      	add	r3, r0
 80191b0:	330c      	adds	r3, #12
 80191b2:	009b      	lsls	r3, r3, #2
 80191b4:	440b      	add	r3, r1
 80191b6:	3308      	adds	r3, #8
 80191b8:	edd3 7a00 	vldr	s15, [r3]
 80191bc:	eeb0 0a67 	vmov.f32	s0, s15
 80191c0:	f000 f836 	bl	8019230 <decimal_part>
 80191c4:	4603      	mov	r3, r0
        log_printf(", Signal = %ld.%02ld kcps/spad",
 80191c6:	461a      	mov	r2, r3
 80191c8:	ee18 1a10 	vmov	r1, s16
 80191cc:	4816      	ldr	r0, [pc, #88]	@ (8019228 <logger_print_result+0x170>)
 80191ce:	f7fa fe8f 	bl	8013ef0 <log_printf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80191d2:	7bbb      	ldrb	r3, [r7, #14]
 80191d4:	3301      	adds	r3, #1
 80191d6:	73bb      	strb	r3, [r7, #14]
 80191d8:	7bb9      	ldrb	r1, [r7, #14]
 80191da:	7bfa      	ldrb	r2, [r7, #15]
 80191dc:	6878      	ldr	r0, [r7, #4]
 80191de:	4613      	mov	r3, r2
 80191e0:	011b      	lsls	r3, r3, #4
 80191e2:	4413      	add	r3, r2
 80191e4:	009b      	lsls	r3, r3, #2
 80191e6:	4403      	add	r3, r0
 80191e8:	3304      	adds	r3, #4
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	4299      	cmp	r1, r3
 80191ee:	f4ff af7c 	bcc.w	80190ea <logger_print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80191f2:	7bfb      	ldrb	r3, [r7, #15]
 80191f4:	3301      	adds	r3, #1
 80191f6:	73fb      	strb	r3, [r7, #15]
 80191f8:	7bfb      	ldrb	r3, [r7, #15]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	f43f af65 	beq.w	80190ca <logger_print_result+0x12>
    }
  }
  log_printf("\n");
 8019200:	480a      	ldr	r0, [pc, #40]	@ (801922c <logger_print_result+0x174>)
 8019202:	f7fa fe75 	bl	8013ef0 <log_printf>
}
 8019206:	bf00      	nop
 8019208:	3714      	adds	r7, #20
 801920a:	46bd      	mov	sp, r7
 801920c:	ecbd 8b02 	vpop	{d8}
 8019210:	bd90      	pop	{r4, r7, pc}
 8019212:	bf00      	nop
 8019214:	0801eadc 	.word	0x0801eadc
 8019218:	0801eaec 	.word	0x0801eaec
 801921c:	0801eaf8 	.word	0x0801eaf8
 8019220:	20001184 	.word	0x20001184
 8019224:	0801eb1c 	.word	0x0801eb1c
 8019228:	0801eb3c 	.word	0x0801eb3c
 801922c:	0801eb5c 	.word	0x0801eb5c

08019230 <decimal_part>:

static int32_t decimal_part(float_t x)
{
 8019230:	b480      	push	{r7}
 8019232:	b085      	sub	sp, #20
 8019234:	af00      	add	r7, sp, #0
 8019236:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 801923a:	edd7 7a01 	vldr	s15, [r7, #4]
 801923e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019242:	ee17 3a90 	vmov	r3, s15
 8019246:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	ee07 3a90 	vmov	s15, r3
 801924e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019252:	ed97 7a01 	vldr	s14, [r7, #4]
 8019256:	ee77 7a67 	vsub.f32	s15, s14, s15
 801925a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8019278 <decimal_part+0x48>
 801925e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019266:	ee17 3a90 	vmov	r3, s15
}
 801926a:	4618      	mov	r0, r3
 801926c:	3714      	adds	r7, #20
 801926e:	46bd      	mov	sp, r7
 8019270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019274:	4770      	bx	lr
 8019276:	bf00      	nop
 8019278:	42c80000 	.word	0x42c80000

0801927c <__NVIC_SetPriority>:
{
 801927c:	b480      	push	{r7}
 801927e:	b083      	sub	sp, #12
 8019280:	af00      	add	r7, sp, #0
 8019282:	4603      	mov	r3, r0
 8019284:	6039      	str	r1, [r7, #0]
 8019286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801928c:	2b00      	cmp	r3, #0
 801928e:	db0a      	blt.n	80192a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	b2da      	uxtb	r2, r3
 8019294:	490c      	ldr	r1, [pc, #48]	@ (80192c8 <__NVIC_SetPriority+0x4c>)
 8019296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801929a:	0112      	lsls	r2, r2, #4
 801929c:	b2d2      	uxtb	r2, r2
 801929e:	440b      	add	r3, r1
 80192a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80192a4:	e00a      	b.n	80192bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	b2da      	uxtb	r2, r3
 80192aa:	4908      	ldr	r1, [pc, #32]	@ (80192cc <__NVIC_SetPriority+0x50>)
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	f003 030f 	and.w	r3, r3, #15
 80192b2:	3b04      	subs	r3, #4
 80192b4:	0112      	lsls	r2, r2, #4
 80192b6:	b2d2      	uxtb	r2, r2
 80192b8:	440b      	add	r3, r1
 80192ba:	761a      	strb	r2, [r3, #24]
}
 80192bc:	bf00      	nop
 80192be:	370c      	adds	r7, #12
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr
 80192c8:	e000e100 	.word	0xe000e100
 80192cc:	e000ed00 	.word	0xe000ed00

080192d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80192d0:	b580      	push	{r7, lr}
 80192d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80192d4:	4b05      	ldr	r3, [pc, #20]	@ (80192ec <SysTick_Handler+0x1c>)
 80192d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80192d8:	f002 fb88 	bl	801b9ec <xTaskGetSchedulerState>
 80192dc:	4603      	mov	r3, r0
 80192de:	2b01      	cmp	r3, #1
 80192e0:	d001      	beq.n	80192e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80192e2:	f003 fc89 	bl	801cbf8 <xPortSysTickHandler>
  }
}
 80192e6:	bf00      	nop
 80192e8:	bd80      	pop	{r7, pc}
 80192ea:	bf00      	nop
 80192ec:	e000e010 	.word	0xe000e010

080192f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80192f0:	b580      	push	{r7, lr}
 80192f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80192f4:	2100      	movs	r1, #0
 80192f6:	f06f 0004 	mvn.w	r0, #4
 80192fa:	f7ff ffbf 	bl	801927c <__NVIC_SetPriority>
#endif
}
 80192fe:	bf00      	nop
 8019300:	bd80      	pop	{r7, pc}
	...

08019304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019304:	b480      	push	{r7}
 8019306:	b083      	sub	sp, #12
 8019308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801930a:	f3ef 8305 	mrs	r3, IPSR
 801930e:	603b      	str	r3, [r7, #0]
  return(result);
 8019310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019312:	2b00      	cmp	r3, #0
 8019314:	d003      	beq.n	801931e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019316:	f06f 0305 	mvn.w	r3, #5
 801931a:	607b      	str	r3, [r7, #4]
 801931c:	e00c      	b.n	8019338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801931e:	4b0a      	ldr	r3, [pc, #40]	@ (8019348 <osKernelInitialize+0x44>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d105      	bne.n	8019332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019326:	4b08      	ldr	r3, [pc, #32]	@ (8019348 <osKernelInitialize+0x44>)
 8019328:	2201      	movs	r2, #1
 801932a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801932c:	2300      	movs	r3, #0
 801932e:	607b      	str	r3, [r7, #4]
 8019330:	e002      	b.n	8019338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8019332:	f04f 33ff 	mov.w	r3, #4294967295
 8019336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019338:	687b      	ldr	r3, [r7, #4]
}
 801933a:	4618      	mov	r0, r3
 801933c:	370c      	adds	r7, #12
 801933e:	46bd      	mov	sp, r7
 8019340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019344:	4770      	bx	lr
 8019346:	bf00      	nop
 8019348:	200011e4 	.word	0x200011e4

0801934c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801934c:	b580      	push	{r7, lr}
 801934e:	b082      	sub	sp, #8
 8019350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019352:	f3ef 8305 	mrs	r3, IPSR
 8019356:	603b      	str	r3, [r7, #0]
  return(result);
 8019358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801935a:	2b00      	cmp	r3, #0
 801935c:	d003      	beq.n	8019366 <osKernelStart+0x1a>
    stat = osErrorISR;
 801935e:	f06f 0305 	mvn.w	r3, #5
 8019362:	607b      	str	r3, [r7, #4]
 8019364:	e010      	b.n	8019388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8019366:	4b0b      	ldr	r3, [pc, #44]	@ (8019394 <osKernelStart+0x48>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	2b01      	cmp	r3, #1
 801936c:	d109      	bne.n	8019382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801936e:	f7ff ffbf 	bl	80192f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019372:	4b08      	ldr	r3, [pc, #32]	@ (8019394 <osKernelStart+0x48>)
 8019374:	2202      	movs	r2, #2
 8019376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019378:	f001 feb2 	bl	801b0e0 <vTaskStartScheduler>
      stat = osOK;
 801937c:	2300      	movs	r3, #0
 801937e:	607b      	str	r3, [r7, #4]
 8019380:	e002      	b.n	8019388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019382:	f04f 33ff 	mov.w	r3, #4294967295
 8019386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019388:	687b      	ldr	r3, [r7, #4]
}
 801938a:	4618      	mov	r0, r3
 801938c:	3708      	adds	r7, #8
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}
 8019392:	bf00      	nop
 8019394:	200011e4 	.word	0x200011e4

08019398 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801939e:	f3ef 8305 	mrs	r3, IPSR
 80193a2:	603b      	str	r3, [r7, #0]
  return(result);
 80193a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d003      	beq.n	80193b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80193aa:	f001 ffc5 	bl	801b338 <xTaskGetTickCountFromISR>
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	e002      	b.n	80193b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80193b2:	f001 ffb1 	bl	801b318 <xTaskGetTickCount>
 80193b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80193b8:	687b      	ldr	r3, [r7, #4]
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3708      	adds	r7, #8
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}

080193c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80193c2:	b580      	push	{r7, lr}
 80193c4:	b08e      	sub	sp, #56	@ 0x38
 80193c6:	af04      	add	r7, sp, #16
 80193c8:	60f8      	str	r0, [r7, #12]
 80193ca:	60b9      	str	r1, [r7, #8]
 80193cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80193ce:	2300      	movs	r3, #0
 80193d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80193d2:	f3ef 8305 	mrs	r3, IPSR
 80193d6:	617b      	str	r3, [r7, #20]
  return(result);
 80193d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d17e      	bne.n	80194dc <osThreadNew+0x11a>
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d07b      	beq.n	80194dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80193e4:	2380      	movs	r3, #128	@ 0x80
 80193e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80193e8:	2318      	movs	r3, #24
 80193ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80193ec:	2300      	movs	r3, #0
 80193ee:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80193f0:	f04f 33ff 	mov.w	r3, #4294967295
 80193f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d045      	beq.n	8019488 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d002      	beq.n	801940a <osThreadNew+0x48>
        name = attr->name;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	699b      	ldr	r3, [r3, #24]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d002      	beq.n	8019418 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	699b      	ldr	r3, [r3, #24]
 8019416:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d008      	beq.n	8019430 <osThreadNew+0x6e>
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	2b38      	cmp	r3, #56	@ 0x38
 8019422:	d805      	bhi.n	8019430 <osThreadNew+0x6e>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	f003 0301 	and.w	r3, r3, #1
 801942c:	2b00      	cmp	r3, #0
 801942e:	d001      	beq.n	8019434 <osThreadNew+0x72>
        return (NULL);
 8019430:	2300      	movs	r3, #0
 8019432:	e054      	b.n	80194de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	695b      	ldr	r3, [r3, #20]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d003      	beq.n	8019444 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	695b      	ldr	r3, [r3, #20]
 8019440:	089b      	lsrs	r3, r3, #2
 8019442:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	689b      	ldr	r3, [r3, #8]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d00e      	beq.n	801946a <osThreadNew+0xa8>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	68db      	ldr	r3, [r3, #12]
 8019450:	2ba7      	cmp	r3, #167	@ 0xa7
 8019452:	d90a      	bls.n	801946a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019458:	2b00      	cmp	r3, #0
 801945a:	d006      	beq.n	801946a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	695b      	ldr	r3, [r3, #20]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d002      	beq.n	801946a <osThreadNew+0xa8>
        mem = 1;
 8019464:	2301      	movs	r3, #1
 8019466:	61bb      	str	r3, [r7, #24]
 8019468:	e010      	b.n	801948c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	689b      	ldr	r3, [r3, #8]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d10c      	bne.n	801948c <osThreadNew+0xca>
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	68db      	ldr	r3, [r3, #12]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d108      	bne.n	801948c <osThreadNew+0xca>
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	691b      	ldr	r3, [r3, #16]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d104      	bne.n	801948c <osThreadNew+0xca>
          mem = 0;
 8019482:	2300      	movs	r3, #0
 8019484:	61bb      	str	r3, [r7, #24]
 8019486:	e001      	b.n	801948c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019488:	2300      	movs	r3, #0
 801948a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801948c:	69bb      	ldr	r3, [r7, #24]
 801948e:	2b01      	cmp	r3, #1
 8019490:	d110      	bne.n	80194b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019496:	687a      	ldr	r2, [r7, #4]
 8019498:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801949a:	9202      	str	r2, [sp, #8]
 801949c:	9301      	str	r3, [sp, #4]
 801949e:	69fb      	ldr	r3, [r7, #28]
 80194a0:	9300      	str	r3, [sp, #0]
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	6a3a      	ldr	r2, [r7, #32]
 80194a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80194a8:	68f8      	ldr	r0, [r7, #12]
 80194aa:	f001 fc25 	bl	801acf8 <xTaskCreateStatic>
 80194ae:	4603      	mov	r3, r0
 80194b0:	613b      	str	r3, [r7, #16]
 80194b2:	e013      	b.n	80194dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d110      	bne.n	80194dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80194ba:	6a3b      	ldr	r3, [r7, #32]
 80194bc:	b29a      	uxth	r2, r3
 80194be:	f107 0310 	add.w	r3, r7, #16
 80194c2:	9301      	str	r3, [sp, #4]
 80194c4:	69fb      	ldr	r3, [r7, #28]
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	f001 fc73 	bl	801adb8 <xTaskCreate>
 80194d2:	4603      	mov	r3, r0
 80194d4:	2b01      	cmp	r3, #1
 80194d6:	d001      	beq.n	80194dc <osThreadNew+0x11a>
            hTask = NULL;
 80194d8:	2300      	movs	r3, #0
 80194da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80194dc:	693b      	ldr	r3, [r7, #16]
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3728      	adds	r7, #40	@ 0x28
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
	...

080194e8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b088      	sub	sp, #32
 80194ec:	af02      	add	r7, sp, #8
 80194ee:	6078      	str	r0, [r7, #4]
 80194f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d002      	beq.n	8019502 <osThreadFlagsSet+0x1a>
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	da03      	bge.n	801950a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8019502:	f06f 0303 	mvn.w	r3, #3
 8019506:	60fb      	str	r3, [r7, #12]
 8019508:	e035      	b.n	8019576 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 801950a:	f04f 33ff 	mov.w	r3, #4294967295
 801950e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019510:	f3ef 8305 	mrs	r3, IPSR
 8019514:	613b      	str	r3, [r7, #16]
  return(result);
 8019516:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8019518:	2b00      	cmp	r3, #0
 801951a:	d01f      	beq.n	801955c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 801951c:	2300      	movs	r3, #0
 801951e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8019520:	f107 0308 	add.w	r3, r7, #8
 8019524:	9300      	str	r3, [sp, #0]
 8019526:	2300      	movs	r3, #0
 8019528:	2201      	movs	r2, #1
 801952a:	6839      	ldr	r1, [r7, #0]
 801952c:	6978      	ldr	r0, [r7, #20]
 801952e:	f002 fd0d 	bl	801bf4c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8019532:	f107 030c 	add.w	r3, r7, #12
 8019536:	2200      	movs	r2, #0
 8019538:	9200      	str	r2, [sp, #0]
 801953a:	2200      	movs	r2, #0
 801953c:	2100      	movs	r1, #0
 801953e:	6978      	ldr	r0, [r7, #20]
 8019540:	f002 fd04 	bl	801bf4c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8019544:	68bb      	ldr	r3, [r7, #8]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d015      	beq.n	8019576 <osThreadFlagsSet+0x8e>
 801954a:	4b0d      	ldr	r3, [pc, #52]	@ (8019580 <osThreadFlagsSet+0x98>)
 801954c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019550:	601a      	str	r2, [r3, #0]
 8019552:	f3bf 8f4f 	dsb	sy
 8019556:	f3bf 8f6f 	isb	sy
 801955a:	e00c      	b.n	8019576 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801955c:	2300      	movs	r3, #0
 801955e:	2201      	movs	r2, #1
 8019560:	6839      	ldr	r1, [r7, #0]
 8019562:	6978      	ldr	r0, [r7, #20]
 8019564:	f002 fc30 	bl	801bdc8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8019568:	f107 030c 	add.w	r3, r7, #12
 801956c:	2200      	movs	r2, #0
 801956e:	2100      	movs	r1, #0
 8019570:	6978      	ldr	r0, [r7, #20]
 8019572:	f002 fc29 	bl	801bdc8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8019576:	68fb      	ldr	r3, [r7, #12]
}
 8019578:	4618      	mov	r0, r3
 801957a:	3718      	adds	r7, #24
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}
 8019580:	e000ed04 	.word	0xe000ed04

08019584 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8019584:	b580      	push	{r7, lr}
 8019586:	b08c      	sub	sp, #48	@ 0x30
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019590:	f3ef 8305 	mrs	r3, IPSR
 8019594:	617b      	str	r3, [r7, #20]
  return(result);
 8019596:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8019598:	2b00      	cmp	r3, #0
 801959a:	d003      	beq.n	80195a4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 801959c:	f06f 0305 	mvn.w	r3, #5
 80195a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195a2:	e06b      	b.n	801967c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	da03      	bge.n	80195b2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80195aa:	f06f 0303 	mvn.w	r3, #3
 80195ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195b0:	e064      	b.n	801967c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	f003 0302 	and.w	r3, r3, #2
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d002      	beq.n	80195c2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80195bc:	2300      	movs	r3, #0
 80195be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195c0:	e001      	b.n	80195c6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80195c6:	2300      	movs	r3, #0
 80195c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80195ce:	f001 fea3 	bl	801b318 <xTaskGetTickCount>
 80195d2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80195d4:	f107 0210 	add.w	r2, r7, #16
 80195d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80195dc:	2000      	movs	r0, #0
 80195de:	f002 fb93 	bl	801bd08 <xTaskNotifyWait>
 80195e2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80195e4:	69fb      	ldr	r3, [r7, #28]
 80195e6:	2b01      	cmp	r3, #1
 80195e8:	d137      	bne.n	801965a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80195ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	4013      	ands	r3, r2
 80195f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195f6:	4313      	orrs	r3, r2
 80195f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	f003 0301 	and.w	r3, r3, #1
 8019600:	2b00      	cmp	r3, #0
 8019602:	d00c      	beq.n	801961e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8019604:	68fa      	ldr	r2, [r7, #12]
 8019606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019608:	4013      	ands	r3, r2
 801960a:	68fa      	ldr	r2, [r7, #12]
 801960c:	429a      	cmp	r2, r3
 801960e:	d032      	beq.n	8019676 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d10f      	bne.n	8019636 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8019616:	f06f 0302 	mvn.w	r3, #2
 801961a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 801961c:	e02e      	b.n	801967c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801961e:	68fa      	ldr	r2, [r7, #12]
 8019620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019622:	4013      	ands	r3, r2
 8019624:	2b00      	cmp	r3, #0
 8019626:	d128      	bne.n	801967a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d103      	bne.n	8019636 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 801962e:	f06f 0302 	mvn.w	r3, #2
 8019632:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8019634:	e022      	b.n	801967c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8019636:	f001 fe6f 	bl	801b318 <xTaskGetTickCount>
 801963a:	4602      	mov	r2, r0
 801963c:	6a3b      	ldr	r3, [r7, #32]
 801963e:	1ad3      	subs	r3, r2, r3
 8019640:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8019642:	69ba      	ldr	r2, [r7, #24]
 8019644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019646:	429a      	cmp	r2, r3
 8019648:	d902      	bls.n	8019650 <osThreadFlagsWait+0xcc>
          tout  = 0;
 801964a:	2300      	movs	r3, #0
 801964c:	627b      	str	r3, [r7, #36]	@ 0x24
 801964e:	e00e      	b.n	801966e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8019650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019652:	69bb      	ldr	r3, [r7, #24]
 8019654:	1ad3      	subs	r3, r2, r3
 8019656:	627b      	str	r3, [r7, #36]	@ 0x24
 8019658:	e009      	b.n	801966e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d103      	bne.n	8019668 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8019660:	f06f 0302 	mvn.w	r3, #2
 8019664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019666:	e002      	b.n	801966e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8019668:	f06f 0301 	mvn.w	r3, #1
 801966c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 801966e:	69fb      	ldr	r3, [r7, #28]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d1af      	bne.n	80195d4 <osThreadFlagsWait+0x50>
 8019674:	e002      	b.n	801967c <osThreadFlagsWait+0xf8>
            break;
 8019676:	bf00      	nop
 8019678:	e000      	b.n	801967c <osThreadFlagsWait+0xf8>
            break;
 801967a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 801967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801967e:	4618      	mov	r0, r3
 8019680:	3730      	adds	r7, #48	@ 0x30
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}

08019686 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019686:	b580      	push	{r7, lr}
 8019688:	b084      	sub	sp, #16
 801968a:	af00      	add	r7, sp, #0
 801968c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801968e:	f3ef 8305 	mrs	r3, IPSR
 8019692:	60bb      	str	r3, [r7, #8]
  return(result);
 8019694:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019696:	2b00      	cmp	r3, #0
 8019698:	d003      	beq.n	80196a2 <osDelay+0x1c>
    stat = osErrorISR;
 801969a:	f06f 0305 	mvn.w	r3, #5
 801969e:	60fb      	str	r3, [r7, #12]
 80196a0:	e007      	b.n	80196b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80196a2:	2300      	movs	r3, #0
 80196a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d002      	beq.n	80196b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f001 fce1 	bl	801b074 <vTaskDelay>
    }
  }

  return (stat);
 80196b2:	68fb      	ldr	r3, [r7, #12]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	3710      	adds	r7, #16
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bd80      	pop	{r7, pc}

080196bc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80196bc:	b580      	push	{r7, lr}
 80196be:	b088      	sub	sp, #32
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80196c4:	2300      	movs	r3, #0
 80196c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80196c8:	f3ef 8305 	mrs	r3, IPSR
 80196cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80196ce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d174      	bne.n	80197be <osMutexNew+0x102>
    if (attr != NULL) {
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d003      	beq.n	80196e2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	61bb      	str	r3, [r7, #24]
 80196e0:	e001      	b.n	80196e6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80196e2:	2300      	movs	r3, #0
 80196e4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80196e6:	69bb      	ldr	r3, [r7, #24]
 80196e8:	f003 0301 	and.w	r3, r3, #1
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d002      	beq.n	80196f6 <osMutexNew+0x3a>
      rmtx = 1U;
 80196f0:	2301      	movs	r3, #1
 80196f2:	617b      	str	r3, [r7, #20]
 80196f4:	e001      	b.n	80196fa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80196f6:	2300      	movs	r3, #0
 80196f8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80196fa:	69bb      	ldr	r3, [r7, #24]
 80196fc:	f003 0308 	and.w	r3, r3, #8
 8019700:	2b00      	cmp	r3, #0
 8019702:	d15c      	bne.n	80197be <osMutexNew+0x102>
      mem = -1;
 8019704:	f04f 33ff 	mov.w	r3, #4294967295
 8019708:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d015      	beq.n	801973c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	689b      	ldr	r3, [r3, #8]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d006      	beq.n	8019726 <osMutexNew+0x6a>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	2b4f      	cmp	r3, #79	@ 0x4f
 801971e:	d902      	bls.n	8019726 <osMutexNew+0x6a>
          mem = 1;
 8019720:	2301      	movs	r3, #1
 8019722:	613b      	str	r3, [r7, #16]
 8019724:	e00c      	b.n	8019740 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	689b      	ldr	r3, [r3, #8]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d108      	bne.n	8019740 <osMutexNew+0x84>
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	68db      	ldr	r3, [r3, #12]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d104      	bne.n	8019740 <osMutexNew+0x84>
            mem = 0;
 8019736:	2300      	movs	r3, #0
 8019738:	613b      	str	r3, [r7, #16]
 801973a:	e001      	b.n	8019740 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801973c:	2300      	movs	r3, #0
 801973e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	2b01      	cmp	r3, #1
 8019744:	d112      	bne.n	801976c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8019746:	697b      	ldr	r3, [r7, #20]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d007      	beq.n	801975c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	689b      	ldr	r3, [r3, #8]
 8019750:	4619      	mov	r1, r3
 8019752:	2004      	movs	r0, #4
 8019754:	f000 fc71 	bl	801a03a <xQueueCreateMutexStatic>
 8019758:	61f8      	str	r0, [r7, #28]
 801975a:	e016      	b.n	801978a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	689b      	ldr	r3, [r3, #8]
 8019760:	4619      	mov	r1, r3
 8019762:	2001      	movs	r0, #1
 8019764:	f000 fc69 	bl	801a03a <xQueueCreateMutexStatic>
 8019768:	61f8      	str	r0, [r7, #28]
 801976a:	e00e      	b.n	801978a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801976c:	693b      	ldr	r3, [r7, #16]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d10b      	bne.n	801978a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d004      	beq.n	8019782 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8019778:	2004      	movs	r0, #4
 801977a:	f000 fc46 	bl	801a00a <xQueueCreateMutex>
 801977e:	61f8      	str	r0, [r7, #28]
 8019780:	e003      	b.n	801978a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019782:	2001      	movs	r0, #1
 8019784:	f000 fc41 	bl	801a00a <xQueueCreateMutex>
 8019788:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801978a:	69fb      	ldr	r3, [r7, #28]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d00c      	beq.n	80197aa <osMutexNew+0xee>
        if (attr != NULL) {
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d003      	beq.n	801979e <osMutexNew+0xe2>
          name = attr->name;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	60fb      	str	r3, [r7, #12]
 801979c:	e001      	b.n	80197a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801979e:	2300      	movs	r3, #0
 80197a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80197a2:	68f9      	ldr	r1, [r7, #12]
 80197a4:	69f8      	ldr	r0, [r7, #28]
 80197a6:	f001 fa49 	bl	801ac3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80197aa:	69fb      	ldr	r3, [r7, #28]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d006      	beq.n	80197be <osMutexNew+0x102>
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d003      	beq.n	80197be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80197b6:	69fb      	ldr	r3, [r7, #28]
 80197b8:	f043 0301 	orr.w	r3, r3, #1
 80197bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80197be:	69fb      	ldr	r3, [r7, #28]
}
 80197c0:	4618      	mov	r0, r3
 80197c2:	3720      	adds	r7, #32
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b086      	sub	sp, #24
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f023 0301 	bic.w	r3, r3, #1
 80197d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80197e2:	2300      	movs	r3, #0
 80197e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80197e6:	f3ef 8305 	mrs	r3, IPSR
 80197ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80197ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d003      	beq.n	80197fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 80197f2:	f06f 0305 	mvn.w	r3, #5
 80197f6:	617b      	str	r3, [r7, #20]
 80197f8:	e02c      	b.n	8019854 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80197fa:	693b      	ldr	r3, [r7, #16]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d103      	bne.n	8019808 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019800:	f06f 0303 	mvn.w	r3, #3
 8019804:	617b      	str	r3, [r7, #20]
 8019806:	e025      	b.n	8019854 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d011      	beq.n	8019832 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801980e:	6839      	ldr	r1, [r7, #0]
 8019810:	6938      	ldr	r0, [r7, #16]
 8019812:	f000 fc62 	bl	801a0da <xQueueTakeMutexRecursive>
 8019816:	4603      	mov	r3, r0
 8019818:	2b01      	cmp	r3, #1
 801981a:	d01b      	beq.n	8019854 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d003      	beq.n	801982a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019822:	f06f 0301 	mvn.w	r3, #1
 8019826:	617b      	str	r3, [r7, #20]
 8019828:	e014      	b.n	8019854 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801982a:	f06f 0302 	mvn.w	r3, #2
 801982e:	617b      	str	r3, [r7, #20]
 8019830:	e010      	b.n	8019854 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019832:	6839      	ldr	r1, [r7, #0]
 8019834:	6938      	ldr	r0, [r7, #16]
 8019836:	f000 ff09 	bl	801a64c <xQueueSemaphoreTake>
 801983a:	4603      	mov	r3, r0
 801983c:	2b01      	cmp	r3, #1
 801983e:	d009      	beq.n	8019854 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d003      	beq.n	801984e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8019846:	f06f 0301 	mvn.w	r3, #1
 801984a:	617b      	str	r3, [r7, #20]
 801984c:	e002      	b.n	8019854 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801984e:	f06f 0302 	mvn.w	r3, #2
 8019852:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8019854:	697b      	ldr	r3, [r7, #20]
}
 8019856:	4618      	mov	r0, r3
 8019858:	3718      	adds	r7, #24
 801985a:	46bd      	mov	sp, r7
 801985c:	bd80      	pop	{r7, pc}

0801985e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801985e:	b580      	push	{r7, lr}
 8019860:	b086      	sub	sp, #24
 8019862:	af00      	add	r7, sp, #0
 8019864:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	f023 0301 	bic.w	r3, r3, #1
 801986c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	f003 0301 	and.w	r3, r3, #1
 8019874:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019876:	2300      	movs	r3, #0
 8019878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801987a:	f3ef 8305 	mrs	r3, IPSR
 801987e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019880:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019882:	2b00      	cmp	r3, #0
 8019884:	d003      	beq.n	801988e <osMutexRelease+0x30>
    stat = osErrorISR;
 8019886:	f06f 0305 	mvn.w	r3, #5
 801988a:	617b      	str	r3, [r7, #20]
 801988c:	e01f      	b.n	80198ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 801988e:	693b      	ldr	r3, [r7, #16]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d103      	bne.n	801989c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019894:	f06f 0303 	mvn.w	r3, #3
 8019898:	617b      	str	r3, [r7, #20]
 801989a:	e018      	b.n	80198ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d009      	beq.n	80198b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80198a2:	6938      	ldr	r0, [r7, #16]
 80198a4:	f000 fbe4 	bl	801a070 <xQueueGiveMutexRecursive>
 80198a8:	4603      	mov	r3, r0
 80198aa:	2b01      	cmp	r3, #1
 80198ac:	d00f      	beq.n	80198ce <osMutexRelease+0x70>
        stat = osErrorResource;
 80198ae:	f06f 0302 	mvn.w	r3, #2
 80198b2:	617b      	str	r3, [r7, #20]
 80198b4:	e00b      	b.n	80198ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80198b6:	2300      	movs	r3, #0
 80198b8:	2200      	movs	r2, #0
 80198ba:	2100      	movs	r1, #0
 80198bc:	6938      	ldr	r0, [r7, #16]
 80198be:	f000 fc43 	bl	801a148 <xQueueGenericSend>
 80198c2:	4603      	mov	r3, r0
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d002      	beq.n	80198ce <osMutexRelease+0x70>
        stat = osErrorResource;
 80198c8:	f06f 0302 	mvn.w	r3, #2
 80198cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80198ce:	697b      	ldr	r3, [r7, #20]
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	3718      	adds	r7, #24
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}

080198d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80198d8:	b580      	push	{r7, lr}
 80198da:	b08a      	sub	sp, #40	@ 0x28
 80198dc:	af02      	add	r7, sp, #8
 80198de:	60f8      	str	r0, [r7, #12]
 80198e0:	60b9      	str	r1, [r7, #8]
 80198e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80198e4:	2300      	movs	r3, #0
 80198e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80198e8:	f3ef 8305 	mrs	r3, IPSR
 80198ec:	613b      	str	r3, [r7, #16]
  return(result);
 80198ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d15f      	bne.n	80199b4 <osMessageQueueNew+0xdc>
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d05c      	beq.n	80199b4 <osMessageQueueNew+0xdc>
 80198fa:	68bb      	ldr	r3, [r7, #8]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d059      	beq.n	80199b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8019900:	f04f 33ff 	mov.w	r3, #4294967295
 8019904:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d029      	beq.n	8019960 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	689b      	ldr	r3, [r3, #8]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d012      	beq.n	801993a <osMessageQueueNew+0x62>
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	68db      	ldr	r3, [r3, #12]
 8019918:	2b4f      	cmp	r3, #79	@ 0x4f
 801991a:	d90e      	bls.n	801993a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019920:	2b00      	cmp	r3, #0
 8019922:	d00a      	beq.n	801993a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	695a      	ldr	r2, [r3, #20]
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	68b9      	ldr	r1, [r7, #8]
 801992c:	fb01 f303 	mul.w	r3, r1, r3
 8019930:	429a      	cmp	r2, r3
 8019932:	d302      	bcc.n	801993a <osMessageQueueNew+0x62>
        mem = 1;
 8019934:	2301      	movs	r3, #1
 8019936:	61bb      	str	r3, [r7, #24]
 8019938:	e014      	b.n	8019964 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	689b      	ldr	r3, [r3, #8]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d110      	bne.n	8019964 <osMessageQueueNew+0x8c>
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	68db      	ldr	r3, [r3, #12]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d10c      	bne.n	8019964 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801994e:	2b00      	cmp	r3, #0
 8019950:	d108      	bne.n	8019964 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	695b      	ldr	r3, [r3, #20]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d104      	bne.n	8019964 <osMessageQueueNew+0x8c>
          mem = 0;
 801995a:	2300      	movs	r3, #0
 801995c:	61bb      	str	r3, [r7, #24]
 801995e:	e001      	b.n	8019964 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8019960:	2300      	movs	r3, #0
 8019962:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019964:	69bb      	ldr	r3, [r7, #24]
 8019966:	2b01      	cmp	r3, #1
 8019968:	d10b      	bne.n	8019982 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	691a      	ldr	r2, [r3, #16]
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	689b      	ldr	r3, [r3, #8]
 8019972:	2100      	movs	r1, #0
 8019974:	9100      	str	r1, [sp, #0]
 8019976:	68b9      	ldr	r1, [r7, #8]
 8019978:	68f8      	ldr	r0, [r7, #12]
 801997a:	f000 fa51 	bl	8019e20 <xQueueGenericCreateStatic>
 801997e:	61f8      	str	r0, [r7, #28]
 8019980:	e008      	b.n	8019994 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8019982:	69bb      	ldr	r3, [r7, #24]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d105      	bne.n	8019994 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8019988:	2200      	movs	r2, #0
 801998a:	68b9      	ldr	r1, [r7, #8]
 801998c:	68f8      	ldr	r0, [r7, #12]
 801998e:	f000 fac4 	bl	8019f1a <xQueueGenericCreate>
 8019992:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d00c      	beq.n	80199b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d003      	beq.n	80199a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	617b      	str	r3, [r7, #20]
 80199a6:	e001      	b.n	80199ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80199a8:	2300      	movs	r3, #0
 80199aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80199ac:	6979      	ldr	r1, [r7, #20]
 80199ae:	69f8      	ldr	r0, [r7, #28]
 80199b0:	f001 f944 	bl	801ac3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80199b4:	69fb      	ldr	r3, [r7, #28]
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	3720      	adds	r7, #32
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bd80      	pop	{r7, pc}
	...

080199c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b088      	sub	sp, #32
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	60f8      	str	r0, [r7, #12]
 80199c8:	60b9      	str	r1, [r7, #8]
 80199ca:	603b      	str	r3, [r7, #0]
 80199cc:	4613      	mov	r3, r2
 80199ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80199d4:	2300      	movs	r3, #0
 80199d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80199d8:	f3ef 8305 	mrs	r3, IPSR
 80199dc:	617b      	str	r3, [r7, #20]
  return(result);
 80199de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d028      	beq.n	8019a36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80199e4:	69bb      	ldr	r3, [r7, #24]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d005      	beq.n	80199f6 <osMessageQueuePut+0x36>
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d002      	beq.n	80199f6 <osMessageQueuePut+0x36>
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d003      	beq.n	80199fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80199f6:	f06f 0303 	mvn.w	r3, #3
 80199fa:	61fb      	str	r3, [r7, #28]
 80199fc:	e038      	b.n	8019a70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80199fe:	2300      	movs	r3, #0
 8019a00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019a02:	f107 0210 	add.w	r2, r7, #16
 8019a06:	2300      	movs	r3, #0
 8019a08:	68b9      	ldr	r1, [r7, #8]
 8019a0a:	69b8      	ldr	r0, [r7, #24]
 8019a0c:	f000 fc9e 	bl	801a34c <xQueueGenericSendFromISR>
 8019a10:	4603      	mov	r3, r0
 8019a12:	2b01      	cmp	r3, #1
 8019a14:	d003      	beq.n	8019a1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8019a16:	f06f 0302 	mvn.w	r3, #2
 8019a1a:	61fb      	str	r3, [r7, #28]
 8019a1c:	e028      	b.n	8019a70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d025      	beq.n	8019a70 <osMessageQueuePut+0xb0>
 8019a24:	4b15      	ldr	r3, [pc, #84]	@ (8019a7c <osMessageQueuePut+0xbc>)
 8019a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a2a:	601a      	str	r2, [r3, #0]
 8019a2c:	f3bf 8f4f 	dsb	sy
 8019a30:	f3bf 8f6f 	isb	sy
 8019a34:	e01c      	b.n	8019a70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019a36:	69bb      	ldr	r3, [r7, #24]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d002      	beq.n	8019a42 <osMessageQueuePut+0x82>
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d103      	bne.n	8019a4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8019a42:	f06f 0303 	mvn.w	r3, #3
 8019a46:	61fb      	str	r3, [r7, #28]
 8019a48:	e012      	b.n	8019a70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	683a      	ldr	r2, [r7, #0]
 8019a4e:	68b9      	ldr	r1, [r7, #8]
 8019a50:	69b8      	ldr	r0, [r7, #24]
 8019a52:	f000 fb79 	bl	801a148 <xQueueGenericSend>
 8019a56:	4603      	mov	r3, r0
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d009      	beq.n	8019a70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d003      	beq.n	8019a6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8019a62:	f06f 0301 	mvn.w	r3, #1
 8019a66:	61fb      	str	r3, [r7, #28]
 8019a68:	e002      	b.n	8019a70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8019a6a:	f06f 0302 	mvn.w	r3, #2
 8019a6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019a70:	69fb      	ldr	r3, [r7, #28]
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	3720      	adds	r7, #32
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}
 8019a7a:	bf00      	nop
 8019a7c:	e000ed04 	.word	0xe000ed04

08019a80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b088      	sub	sp, #32
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	60f8      	str	r0, [r7, #12]
 8019a88:	60b9      	str	r1, [r7, #8]
 8019a8a:	607a      	str	r2, [r7, #4]
 8019a8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019a92:	2300      	movs	r3, #0
 8019a94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019a96:	f3ef 8305 	mrs	r3, IPSR
 8019a9a:	617b      	str	r3, [r7, #20]
  return(result);
 8019a9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d028      	beq.n	8019af4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019aa2:	69bb      	ldr	r3, [r7, #24]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d005      	beq.n	8019ab4 <osMessageQueueGet+0x34>
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d002      	beq.n	8019ab4 <osMessageQueueGet+0x34>
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d003      	beq.n	8019abc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8019ab4:	f06f 0303 	mvn.w	r3, #3
 8019ab8:	61fb      	str	r3, [r7, #28]
 8019aba:	e037      	b.n	8019b2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8019abc:	2300      	movs	r3, #0
 8019abe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019ac0:	f107 0310 	add.w	r3, r7, #16
 8019ac4:	461a      	mov	r2, r3
 8019ac6:	68b9      	ldr	r1, [r7, #8]
 8019ac8:	69b8      	ldr	r0, [r7, #24]
 8019aca:	f000 fecf 	bl	801a86c <xQueueReceiveFromISR>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	2b01      	cmp	r3, #1
 8019ad2:	d003      	beq.n	8019adc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8019ad4:	f06f 0302 	mvn.w	r3, #2
 8019ad8:	61fb      	str	r3, [r7, #28]
 8019ada:	e027      	b.n	8019b2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8019adc:	693b      	ldr	r3, [r7, #16]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d024      	beq.n	8019b2c <osMessageQueueGet+0xac>
 8019ae2:	4b15      	ldr	r3, [pc, #84]	@ (8019b38 <osMessageQueueGet+0xb8>)
 8019ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ae8:	601a      	str	r2, [r3, #0]
 8019aea:	f3bf 8f4f 	dsb	sy
 8019aee:	f3bf 8f6f 	isb	sy
 8019af2:	e01b      	b.n	8019b2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019af4:	69bb      	ldr	r3, [r7, #24]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d002      	beq.n	8019b00 <osMessageQueueGet+0x80>
 8019afa:	68bb      	ldr	r3, [r7, #8]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d103      	bne.n	8019b08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019b00:	f06f 0303 	mvn.w	r3, #3
 8019b04:	61fb      	str	r3, [r7, #28]
 8019b06:	e011      	b.n	8019b2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019b08:	683a      	ldr	r2, [r7, #0]
 8019b0a:	68b9      	ldr	r1, [r7, #8]
 8019b0c:	69b8      	ldr	r0, [r7, #24]
 8019b0e:	f000 fcbb 	bl	801a488 <xQueueReceive>
 8019b12:	4603      	mov	r3, r0
 8019b14:	2b01      	cmp	r3, #1
 8019b16:	d009      	beq.n	8019b2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8019b18:	683b      	ldr	r3, [r7, #0]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d003      	beq.n	8019b26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8019b1e:	f06f 0301 	mvn.w	r3, #1
 8019b22:	61fb      	str	r3, [r7, #28]
 8019b24:	e002      	b.n	8019b2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8019b26:	f06f 0302 	mvn.w	r3, #2
 8019b2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019b2c:	69fb      	ldr	r3, [r7, #28]
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3720      	adds	r7, #32
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}
 8019b36:	bf00      	nop
 8019b38:	e000ed04 	.word	0xe000ed04

08019b3c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b086      	sub	sp, #24
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d102      	bne.n	8019b54 <osMessageQueueGetCount+0x18>
    count = 0U;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	617b      	str	r3, [r7, #20]
 8019b52:	e00e      	b.n	8019b72 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019b54:	f3ef 8305 	mrs	r3, IPSR
 8019b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d004      	beq.n	8019b6a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8019b60:	6938      	ldr	r0, [r7, #16]
 8019b62:	f000 ff24 	bl	801a9ae <uxQueueMessagesWaitingFromISR>
 8019b66:	6178      	str	r0, [r7, #20]
 8019b68:	e003      	b.n	8019b72 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8019b6a:	6938      	ldr	r0, [r7, #16]
 8019b6c:	f000 ff00 	bl	801a970 <uxQueueMessagesWaiting>
 8019b70:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8019b72:	697b      	ldr	r3, [r7, #20]
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3718      	adds	r7, #24
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019b7c:	b480      	push	{r7}
 8019b7e:	b085      	sub	sp, #20
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	60f8      	str	r0, [r7, #12]
 8019b84:	60b9      	str	r1, [r7, #8]
 8019b86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	4a07      	ldr	r2, [pc, #28]	@ (8019ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8019b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	4a06      	ldr	r2, [pc, #24]	@ (8019bac <vApplicationGetIdleTaskMemory+0x30>)
 8019b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	2280      	movs	r2, #128	@ 0x80
 8019b98:	601a      	str	r2, [r3, #0]
}
 8019b9a:	bf00      	nop
 8019b9c:	3714      	adds	r7, #20
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop
 8019ba8:	200011e8 	.word	0x200011e8
 8019bac:	20001290 	.word	0x20001290

08019bb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019bb0:	b480      	push	{r7}
 8019bb2:	b085      	sub	sp, #20
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	60f8      	str	r0, [r7, #12]
 8019bb8:	60b9      	str	r1, [r7, #8]
 8019bba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	4a07      	ldr	r2, [pc, #28]	@ (8019bdc <vApplicationGetTimerTaskMemory+0x2c>)
 8019bc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	4a06      	ldr	r2, [pc, #24]	@ (8019be0 <vApplicationGetTimerTaskMemory+0x30>)
 8019bc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019bce:	601a      	str	r2, [r3, #0]
}
 8019bd0:	bf00      	nop
 8019bd2:	3714      	adds	r7, #20
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bda:	4770      	bx	lr
 8019bdc:	20001490 	.word	0x20001490
 8019be0:	20001538 	.word	0x20001538

08019be4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019be4:	b480      	push	{r7}
 8019be6:	b083      	sub	sp, #12
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	f103 0208 	add.w	r2, r3, #8
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8019bfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	f103 0208 	add.w	r2, r3, #8
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f103 0208 	add.w	r2, r3, #8
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2200      	movs	r2, #0
 8019c16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019c18:	bf00      	nop
 8019c1a:	370c      	adds	r7, #12
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr

08019c24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019c24:	b480      	push	{r7}
 8019c26:	b083      	sub	sp, #12
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	2200      	movs	r2, #0
 8019c30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019c32:	bf00      	nop
 8019c34:	370c      	adds	r7, #12
 8019c36:	46bd      	mov	sp, r7
 8019c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3c:	4770      	bx	lr

08019c3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019c3e:	b480      	push	{r7}
 8019c40:	b085      	sub	sp, #20
 8019c42:	af00      	add	r7, sp, #0
 8019c44:	6078      	str	r0, [r7, #4]
 8019c46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	685b      	ldr	r3, [r3, #4]
 8019c4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	68fa      	ldr	r2, [r7, #12]
 8019c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	689a      	ldr	r2, [r3, #8]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	689b      	ldr	r3, [r3, #8]
 8019c60:	683a      	ldr	r2, [r7, #0]
 8019c62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	683a      	ldr	r2, [r7, #0]
 8019c68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	1c5a      	adds	r2, r3, #1
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	601a      	str	r2, [r3, #0]
}
 8019c7a:	bf00      	nop
 8019c7c:	3714      	adds	r7, #20
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c84:	4770      	bx	lr

08019c86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019c86:	b480      	push	{r7}
 8019c88:	b085      	sub	sp, #20
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	6078      	str	r0, [r7, #4]
 8019c8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019c96:	68bb      	ldr	r3, [r7, #8]
 8019c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c9c:	d103      	bne.n	8019ca6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	691b      	ldr	r3, [r3, #16]
 8019ca2:	60fb      	str	r3, [r7, #12]
 8019ca4:	e00c      	b.n	8019cc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	3308      	adds	r3, #8
 8019caa:	60fb      	str	r3, [r7, #12]
 8019cac:	e002      	b.n	8019cb4 <vListInsert+0x2e>
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	60fb      	str	r3, [r7, #12]
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	68ba      	ldr	r2, [r7, #8]
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	d2f6      	bcs.n	8019cae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	685a      	ldr	r2, [r3, #4]
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	683a      	ldr	r2, [r7, #0]
 8019cce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019cd0:	683b      	ldr	r3, [r7, #0]
 8019cd2:	68fa      	ldr	r2, [r7, #12]
 8019cd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	683a      	ldr	r2, [r7, #0]
 8019cda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	687a      	ldr	r2, [r7, #4]
 8019ce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	1c5a      	adds	r2, r3, #1
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	601a      	str	r2, [r3, #0]
}
 8019cec:	bf00      	nop
 8019cee:	3714      	adds	r7, #20
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf6:	4770      	bx	lr

08019cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019cf8:	b480      	push	{r7}
 8019cfa:	b085      	sub	sp, #20
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	691b      	ldr	r3, [r3, #16]
 8019d04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	685b      	ldr	r3, [r3, #4]
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	6892      	ldr	r2, [r2, #8]
 8019d0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	689b      	ldr	r3, [r3, #8]
 8019d14:	687a      	ldr	r2, [r7, #4]
 8019d16:	6852      	ldr	r2, [r2, #4]
 8019d18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	687a      	ldr	r2, [r7, #4]
 8019d20:	429a      	cmp	r2, r3
 8019d22:	d103      	bne.n	8019d2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	689a      	ldr	r2, [r3, #8]
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2200      	movs	r2, #0
 8019d30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	1e5a      	subs	r2, r3, #1
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	681b      	ldr	r3, [r3, #0]
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3714      	adds	r7, #20
 8019d44:	46bd      	mov	sp, r7
 8019d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4a:	4770      	bx	lr

08019d4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
 8019d54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d10b      	bne.n	8019d78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d64:	f383 8811 	msr	BASEPRI, r3
 8019d68:	f3bf 8f6f 	isb	sy
 8019d6c:	f3bf 8f4f 	dsb	sy
 8019d70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019d72:	bf00      	nop
 8019d74:	bf00      	nop
 8019d76:	e7fd      	b.n	8019d74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019d78:	f002 feae 	bl	801cad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681a      	ldr	r2, [r3, #0]
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d84:	68f9      	ldr	r1, [r7, #12]
 8019d86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019d88:	fb01 f303 	mul.w	r3, r1, r3
 8019d8c:	441a      	add	r2, r3
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	2200      	movs	r2, #0
 8019d96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	681a      	ldr	r2, [r3, #0]
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019da8:	3b01      	subs	r3, #1
 8019daa:	68f9      	ldr	r1, [r7, #12]
 8019dac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019dae:	fb01 f303 	mul.w	r3, r1, r3
 8019db2:	441a      	add	r2, r3
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	22ff      	movs	r2, #255	@ 0xff
 8019dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	22ff      	movs	r2, #255	@ 0xff
 8019dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d114      	bne.n	8019df8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	691b      	ldr	r3, [r3, #16]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d01a      	beq.n	8019e0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	3310      	adds	r3, #16
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f001 fc30 	bl	801b640 <xTaskRemoveFromEventList>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d012      	beq.n	8019e0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019de6:	4b0d      	ldr	r3, [pc, #52]	@ (8019e1c <xQueueGenericReset+0xd0>)
 8019de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019dec:	601a      	str	r2, [r3, #0]
 8019dee:	f3bf 8f4f 	dsb	sy
 8019df2:	f3bf 8f6f 	isb	sy
 8019df6:	e009      	b.n	8019e0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	3310      	adds	r3, #16
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7ff fef1 	bl	8019be4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	3324      	adds	r3, #36	@ 0x24
 8019e06:	4618      	mov	r0, r3
 8019e08:	f7ff feec 	bl	8019be4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019e0c:	f002 fe96 	bl	801cb3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019e10:	2301      	movs	r3, #1
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	3710      	adds	r7, #16
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	e000ed04 	.word	0xe000ed04

08019e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b08e      	sub	sp, #56	@ 0x38
 8019e24:	af02      	add	r7, sp, #8
 8019e26:	60f8      	str	r0, [r7, #12]
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	607a      	str	r2, [r7, #4]
 8019e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d10b      	bne.n	8019e4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8019e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e38:	f383 8811 	msr	BASEPRI, r3
 8019e3c:	f3bf 8f6f 	isb	sy
 8019e40:	f3bf 8f4f 	dsb	sy
 8019e44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019e46:	bf00      	nop
 8019e48:	bf00      	nop
 8019e4a:	e7fd      	b.n	8019e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d10b      	bne.n	8019e6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8019e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e56:	f383 8811 	msr	BASEPRI, r3
 8019e5a:	f3bf 8f6f 	isb	sy
 8019e5e:	f3bf 8f4f 	dsb	sy
 8019e62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019e64:	bf00      	nop
 8019e66:	bf00      	nop
 8019e68:	e7fd      	b.n	8019e66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d002      	beq.n	8019e76 <xQueueGenericCreateStatic+0x56>
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d001      	beq.n	8019e7a <xQueueGenericCreateStatic+0x5a>
 8019e76:	2301      	movs	r3, #1
 8019e78:	e000      	b.n	8019e7c <xQueueGenericCreateStatic+0x5c>
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d10b      	bne.n	8019e98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e84:	f383 8811 	msr	BASEPRI, r3
 8019e88:	f3bf 8f6f 	isb	sy
 8019e8c:	f3bf 8f4f 	dsb	sy
 8019e90:	623b      	str	r3, [r7, #32]
}
 8019e92:	bf00      	nop
 8019e94:	bf00      	nop
 8019e96:	e7fd      	b.n	8019e94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d102      	bne.n	8019ea4 <xQueueGenericCreateStatic+0x84>
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d101      	bne.n	8019ea8 <xQueueGenericCreateStatic+0x88>
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e000      	b.n	8019eaa <xQueueGenericCreateStatic+0x8a>
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d10b      	bne.n	8019ec6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8019eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019eb2:	f383 8811 	msr	BASEPRI, r3
 8019eb6:	f3bf 8f6f 	isb	sy
 8019eba:	f3bf 8f4f 	dsb	sy
 8019ebe:	61fb      	str	r3, [r7, #28]
}
 8019ec0:	bf00      	nop
 8019ec2:	bf00      	nop
 8019ec4:	e7fd      	b.n	8019ec2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019ec6:	2350      	movs	r3, #80	@ 0x50
 8019ec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	2b50      	cmp	r3, #80	@ 0x50
 8019ece:	d00b      	beq.n	8019ee8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8019ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ed4:	f383 8811 	msr	BASEPRI, r3
 8019ed8:	f3bf 8f6f 	isb	sy
 8019edc:	f3bf 8f4f 	dsb	sy
 8019ee0:	61bb      	str	r3, [r7, #24]
}
 8019ee2:	bf00      	nop
 8019ee4:	bf00      	nop
 8019ee6:	e7fd      	b.n	8019ee4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019ee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8019eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d00d      	beq.n	8019f10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ef6:	2201      	movs	r2, #1
 8019ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019efc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f02:	9300      	str	r3, [sp, #0]
 8019f04:	4613      	mov	r3, r2
 8019f06:	687a      	ldr	r2, [r7, #4]
 8019f08:	68b9      	ldr	r1, [r7, #8]
 8019f0a:	68f8      	ldr	r0, [r7, #12]
 8019f0c:	f000 f840 	bl	8019f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8019f12:	4618      	mov	r0, r3
 8019f14:	3730      	adds	r7, #48	@ 0x30
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd80      	pop	{r7, pc}

08019f1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019f1a:	b580      	push	{r7, lr}
 8019f1c:	b08a      	sub	sp, #40	@ 0x28
 8019f1e:	af02      	add	r7, sp, #8
 8019f20:	60f8      	str	r0, [r7, #12]
 8019f22:	60b9      	str	r1, [r7, #8]
 8019f24:	4613      	mov	r3, r2
 8019f26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d10b      	bne.n	8019f46 <xQueueGenericCreate+0x2c>
	__asm volatile
 8019f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f32:	f383 8811 	msr	BASEPRI, r3
 8019f36:	f3bf 8f6f 	isb	sy
 8019f3a:	f3bf 8f4f 	dsb	sy
 8019f3e:	613b      	str	r3, [r7, #16]
}
 8019f40:	bf00      	nop
 8019f42:	bf00      	nop
 8019f44:	e7fd      	b.n	8019f42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	68ba      	ldr	r2, [r7, #8]
 8019f4a:	fb02 f303 	mul.w	r3, r2, r3
 8019f4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	3350      	adds	r3, #80	@ 0x50
 8019f54:	4618      	mov	r0, r3
 8019f56:	f002 fee1 	bl	801cd1c <pvPortMalloc>
 8019f5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d011      	beq.n	8019f86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019f62:	69bb      	ldr	r3, [r7, #24]
 8019f64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	3350      	adds	r3, #80	@ 0x50
 8019f6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019f6c:	69bb      	ldr	r3, [r7, #24]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019f74:	79fa      	ldrb	r2, [r7, #7]
 8019f76:	69bb      	ldr	r3, [r7, #24]
 8019f78:	9300      	str	r3, [sp, #0]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	697a      	ldr	r2, [r7, #20]
 8019f7e:	68b9      	ldr	r1, [r7, #8]
 8019f80:	68f8      	ldr	r0, [r7, #12]
 8019f82:	f000 f805 	bl	8019f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019f86:	69bb      	ldr	r3, [r7, #24]
	}
 8019f88:	4618      	mov	r0, r3
 8019f8a:	3720      	adds	r7, #32
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bd80      	pop	{r7, pc}

08019f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019f90:	b580      	push	{r7, lr}
 8019f92:	b084      	sub	sp, #16
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	60f8      	str	r0, [r7, #12]
 8019f98:	60b9      	str	r1, [r7, #8]
 8019f9a:	607a      	str	r2, [r7, #4]
 8019f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d103      	bne.n	8019fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019fa4:	69bb      	ldr	r3, [r7, #24]
 8019fa6:	69ba      	ldr	r2, [r7, #24]
 8019fa8:	601a      	str	r2, [r3, #0]
 8019faa:	e002      	b.n	8019fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019fac:	69bb      	ldr	r3, [r7, #24]
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019fb2:	69bb      	ldr	r3, [r7, #24]
 8019fb4:	68fa      	ldr	r2, [r7, #12]
 8019fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019fb8:	69bb      	ldr	r3, [r7, #24]
 8019fba:	68ba      	ldr	r2, [r7, #8]
 8019fbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019fbe:	2101      	movs	r1, #1
 8019fc0:	69b8      	ldr	r0, [r7, #24]
 8019fc2:	f7ff fec3 	bl	8019d4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019fc6:	69bb      	ldr	r3, [r7, #24]
 8019fc8:	78fa      	ldrb	r2, [r7, #3]
 8019fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019fce:	bf00      	nop
 8019fd0:	3710      	adds	r7, #16
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bd80      	pop	{r7, pc}

08019fd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019fd6:	b580      	push	{r7, lr}
 8019fd8:	b082      	sub	sp, #8
 8019fda:	af00      	add	r7, sp, #0
 8019fdc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d00e      	beq.n	801a002 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2200      	movs	r2, #0
 8019fee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	2100      	movs	r1, #0
 8019ffc:	6878      	ldr	r0, [r7, #4]
 8019ffe:	f000 f8a3 	bl	801a148 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801a002:	bf00      	nop
 801a004:	3708      	adds	r7, #8
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}

0801a00a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801a00a:	b580      	push	{r7, lr}
 801a00c:	b086      	sub	sp, #24
 801a00e:	af00      	add	r7, sp, #0
 801a010:	4603      	mov	r3, r0
 801a012:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a014:	2301      	movs	r3, #1
 801a016:	617b      	str	r3, [r7, #20]
 801a018:	2300      	movs	r3, #0
 801a01a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801a01c:	79fb      	ldrb	r3, [r7, #7]
 801a01e:	461a      	mov	r2, r3
 801a020:	6939      	ldr	r1, [r7, #16]
 801a022:	6978      	ldr	r0, [r7, #20]
 801a024:	f7ff ff79 	bl	8019f1a <xQueueGenericCreate>
 801a028:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a02a:	68f8      	ldr	r0, [r7, #12]
 801a02c:	f7ff ffd3 	bl	8019fd6 <prvInitialiseMutex>

		return xNewQueue;
 801a030:	68fb      	ldr	r3, [r7, #12]
	}
 801a032:	4618      	mov	r0, r3
 801a034:	3718      	adds	r7, #24
 801a036:	46bd      	mov	sp, r7
 801a038:	bd80      	pop	{r7, pc}

0801a03a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801a03a:	b580      	push	{r7, lr}
 801a03c:	b088      	sub	sp, #32
 801a03e:	af02      	add	r7, sp, #8
 801a040:	4603      	mov	r3, r0
 801a042:	6039      	str	r1, [r7, #0]
 801a044:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a046:	2301      	movs	r3, #1
 801a048:	617b      	str	r3, [r7, #20]
 801a04a:	2300      	movs	r3, #0
 801a04c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801a04e:	79fb      	ldrb	r3, [r7, #7]
 801a050:	9300      	str	r3, [sp, #0]
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	2200      	movs	r2, #0
 801a056:	6939      	ldr	r1, [r7, #16]
 801a058:	6978      	ldr	r0, [r7, #20]
 801a05a:	f7ff fee1 	bl	8019e20 <xQueueGenericCreateStatic>
 801a05e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a060:	68f8      	ldr	r0, [r7, #12]
 801a062:	f7ff ffb8 	bl	8019fd6 <prvInitialiseMutex>

		return xNewQueue;
 801a066:	68fb      	ldr	r3, [r7, #12]
	}
 801a068:	4618      	mov	r0, r3
 801a06a:	3718      	adds	r7, #24
 801a06c:	46bd      	mov	sp, r7
 801a06e:	bd80      	pop	{r7, pc}

0801a070 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801a070:	b590      	push	{r4, r7, lr}
 801a072:	b087      	sub	sp, #28
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a07c:	693b      	ldr	r3, [r7, #16]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d10b      	bne.n	801a09a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 801a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a086:	f383 8811 	msr	BASEPRI, r3
 801a08a:	f3bf 8f6f 	isb	sy
 801a08e:	f3bf 8f4f 	dsb	sy
 801a092:	60fb      	str	r3, [r7, #12]
}
 801a094:	bf00      	nop
 801a096:	bf00      	nop
 801a098:	e7fd      	b.n	801a096 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a09a:	693b      	ldr	r3, [r7, #16]
 801a09c:	689c      	ldr	r4, [r3, #8]
 801a09e:	f001 fc95 	bl	801b9cc <xTaskGetCurrentTaskHandle>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	429c      	cmp	r4, r3
 801a0a6:	d111      	bne.n	801a0cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801a0a8:	693b      	ldr	r3, [r7, #16]
 801a0aa:	68db      	ldr	r3, [r3, #12]
 801a0ac:	1e5a      	subs	r2, r3, #1
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	68db      	ldr	r3, [r3, #12]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d105      	bne.n	801a0c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	2200      	movs	r2, #0
 801a0be:	2100      	movs	r1, #0
 801a0c0:	6938      	ldr	r0, [r7, #16]
 801a0c2:	f000 f841 	bl	801a148 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	617b      	str	r3, [r7, #20]
 801a0ca:	e001      	b.n	801a0d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801a0d0:	697b      	ldr	r3, [r7, #20]
	}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	371c      	adds	r7, #28
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd90      	pop	{r4, r7, pc}

0801a0da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801a0da:	b590      	push	{r4, r7, lr}
 801a0dc:	b087      	sub	sp, #28
 801a0de:	af00      	add	r7, sp, #0
 801a0e0:	6078      	str	r0, [r7, #4]
 801a0e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d10b      	bne.n	801a106 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 801a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0f2:	f383 8811 	msr	BASEPRI, r3
 801a0f6:	f3bf 8f6f 	isb	sy
 801a0fa:	f3bf 8f4f 	dsb	sy
 801a0fe:	60fb      	str	r3, [r7, #12]
}
 801a100:	bf00      	nop
 801a102:	bf00      	nop
 801a104:	e7fd      	b.n	801a102 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a106:	693b      	ldr	r3, [r7, #16]
 801a108:	689c      	ldr	r4, [r3, #8]
 801a10a:	f001 fc5f 	bl	801b9cc <xTaskGetCurrentTaskHandle>
 801a10e:	4603      	mov	r3, r0
 801a110:	429c      	cmp	r4, r3
 801a112:	d107      	bne.n	801a124 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	68db      	ldr	r3, [r3, #12]
 801a118:	1c5a      	adds	r2, r3, #1
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801a11e:	2301      	movs	r3, #1
 801a120:	617b      	str	r3, [r7, #20]
 801a122:	e00c      	b.n	801a13e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a124:	6839      	ldr	r1, [r7, #0]
 801a126:	6938      	ldr	r0, [r7, #16]
 801a128:	f000 fa90 	bl	801a64c <xQueueSemaphoreTake>
 801a12c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d004      	beq.n	801a13e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	68db      	ldr	r3, [r3, #12]
 801a138:	1c5a      	adds	r2, r3, #1
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801a13e:	697b      	ldr	r3, [r7, #20]
	}
 801a140:	4618      	mov	r0, r3
 801a142:	371c      	adds	r7, #28
 801a144:	46bd      	mov	sp, r7
 801a146:	bd90      	pop	{r4, r7, pc}

0801a148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b08e      	sub	sp, #56	@ 0x38
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	60f8      	str	r0, [r7, #12]
 801a150:	60b9      	str	r1, [r7, #8]
 801a152:	607a      	str	r2, [r7, #4]
 801a154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a156:	2300      	movs	r3, #0
 801a158:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a160:	2b00      	cmp	r3, #0
 801a162:	d10b      	bne.n	801a17c <xQueueGenericSend+0x34>
	__asm volatile
 801a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a168:	f383 8811 	msr	BASEPRI, r3
 801a16c:	f3bf 8f6f 	isb	sy
 801a170:	f3bf 8f4f 	dsb	sy
 801a174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801a176:	bf00      	nop
 801a178:	bf00      	nop
 801a17a:	e7fd      	b.n	801a178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a17c:	68bb      	ldr	r3, [r7, #8]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d103      	bne.n	801a18a <xQueueGenericSend+0x42>
 801a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a186:	2b00      	cmp	r3, #0
 801a188:	d101      	bne.n	801a18e <xQueueGenericSend+0x46>
 801a18a:	2301      	movs	r3, #1
 801a18c:	e000      	b.n	801a190 <xQueueGenericSend+0x48>
 801a18e:	2300      	movs	r3, #0
 801a190:	2b00      	cmp	r3, #0
 801a192:	d10b      	bne.n	801a1ac <xQueueGenericSend+0x64>
	__asm volatile
 801a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a198:	f383 8811 	msr	BASEPRI, r3
 801a19c:	f3bf 8f6f 	isb	sy
 801a1a0:	f3bf 8f4f 	dsb	sy
 801a1a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a1a6:	bf00      	nop
 801a1a8:	bf00      	nop
 801a1aa:	e7fd      	b.n	801a1a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	2b02      	cmp	r3, #2
 801a1b0:	d103      	bne.n	801a1ba <xQueueGenericSend+0x72>
 801a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a1b6:	2b01      	cmp	r3, #1
 801a1b8:	d101      	bne.n	801a1be <xQueueGenericSend+0x76>
 801a1ba:	2301      	movs	r3, #1
 801a1bc:	e000      	b.n	801a1c0 <xQueueGenericSend+0x78>
 801a1be:	2300      	movs	r3, #0
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d10b      	bne.n	801a1dc <xQueueGenericSend+0x94>
	__asm volatile
 801a1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1c8:	f383 8811 	msr	BASEPRI, r3
 801a1cc:	f3bf 8f6f 	isb	sy
 801a1d0:	f3bf 8f4f 	dsb	sy
 801a1d4:	623b      	str	r3, [r7, #32]
}
 801a1d6:	bf00      	nop
 801a1d8:	bf00      	nop
 801a1da:	e7fd      	b.n	801a1d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a1dc:	f001 fc06 	bl	801b9ec <xTaskGetSchedulerState>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d102      	bne.n	801a1ec <xQueueGenericSend+0xa4>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d101      	bne.n	801a1f0 <xQueueGenericSend+0xa8>
 801a1ec:	2301      	movs	r3, #1
 801a1ee:	e000      	b.n	801a1f2 <xQueueGenericSend+0xaa>
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d10b      	bne.n	801a20e <xQueueGenericSend+0xc6>
	__asm volatile
 801a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1fa:	f383 8811 	msr	BASEPRI, r3
 801a1fe:	f3bf 8f6f 	isb	sy
 801a202:	f3bf 8f4f 	dsb	sy
 801a206:	61fb      	str	r3, [r7, #28]
}
 801a208:	bf00      	nop
 801a20a:	bf00      	nop
 801a20c:	e7fd      	b.n	801a20a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a20e:	f002 fc63 	bl	801cad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d302      	bcc.n	801a224 <xQueueGenericSend+0xdc>
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	2b02      	cmp	r3, #2
 801a222:	d129      	bne.n	801a278 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a224:	683a      	ldr	r2, [r7, #0]
 801a226:	68b9      	ldr	r1, [r7, #8]
 801a228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a22a:	f000 fbf7 	bl	801aa1c <prvCopyDataToQueue>
 801a22e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a234:	2b00      	cmp	r3, #0
 801a236:	d010      	beq.n	801a25a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a23a:	3324      	adds	r3, #36	@ 0x24
 801a23c:	4618      	mov	r0, r3
 801a23e:	f001 f9ff 	bl	801b640 <xTaskRemoveFromEventList>
 801a242:	4603      	mov	r3, r0
 801a244:	2b00      	cmp	r3, #0
 801a246:	d013      	beq.n	801a270 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a248:	4b3f      	ldr	r3, [pc, #252]	@ (801a348 <xQueueGenericSend+0x200>)
 801a24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a24e:	601a      	str	r2, [r3, #0]
 801a250:	f3bf 8f4f 	dsb	sy
 801a254:	f3bf 8f6f 	isb	sy
 801a258:	e00a      	b.n	801a270 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d007      	beq.n	801a270 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a260:	4b39      	ldr	r3, [pc, #228]	@ (801a348 <xQueueGenericSend+0x200>)
 801a262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a266:	601a      	str	r2, [r3, #0]
 801a268:	f3bf 8f4f 	dsb	sy
 801a26c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a270:	f002 fc64 	bl	801cb3c <vPortExitCritical>
				return pdPASS;
 801a274:	2301      	movs	r3, #1
 801a276:	e063      	b.n	801a340 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d103      	bne.n	801a286 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a27e:	f002 fc5d 	bl	801cb3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a282:	2300      	movs	r3, #0
 801a284:	e05c      	b.n	801a340 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d106      	bne.n	801a29a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a28c:	f107 0314 	add.w	r3, r7, #20
 801a290:	4618      	mov	r0, r3
 801a292:	f001 fa39 	bl	801b708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a296:	2301      	movs	r3, #1
 801a298:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a29a:	f002 fc4f 	bl	801cb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a29e:	f000 ff8f 	bl	801b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a2a2:	f002 fc19 	bl	801cad8 <vPortEnterCritical>
 801a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a2ac:	b25b      	sxtb	r3, r3
 801a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2b2:	d103      	bne.n	801a2bc <xQueueGenericSend+0x174>
 801a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a2c2:	b25b      	sxtb	r3, r3
 801a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2c8:	d103      	bne.n	801a2d2 <xQueueGenericSend+0x18a>
 801a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a2d2:	f002 fc33 	bl	801cb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a2d6:	1d3a      	adds	r2, r7, #4
 801a2d8:	f107 0314 	add.w	r3, r7, #20
 801a2dc:	4611      	mov	r1, r2
 801a2de:	4618      	mov	r0, r3
 801a2e0:	f001 fa28 	bl	801b734 <xTaskCheckForTimeOut>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d124      	bne.n	801a334 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a2ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a2ec:	f000 fc8e 	bl	801ac0c <prvIsQueueFull>
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d018      	beq.n	801a328 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2f8:	3310      	adds	r3, #16
 801a2fa:	687a      	ldr	r2, [r7, #4]
 801a2fc:	4611      	mov	r1, r2
 801a2fe:	4618      	mov	r0, r3
 801a300:	f001 f94c 	bl	801b59c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a306:	f000 fc19 	bl	801ab3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a30a:	f000 ff67 	bl	801b1dc <xTaskResumeAll>
 801a30e:	4603      	mov	r3, r0
 801a310:	2b00      	cmp	r3, #0
 801a312:	f47f af7c 	bne.w	801a20e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801a316:	4b0c      	ldr	r3, [pc, #48]	@ (801a348 <xQueueGenericSend+0x200>)
 801a318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a31c:	601a      	str	r2, [r3, #0]
 801a31e:	f3bf 8f4f 	dsb	sy
 801a322:	f3bf 8f6f 	isb	sy
 801a326:	e772      	b.n	801a20e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a32a:	f000 fc07 	bl	801ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a32e:	f000 ff55 	bl	801b1dc <xTaskResumeAll>
 801a332:	e76c      	b.n	801a20e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a336:	f000 fc01 	bl	801ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a33a:	f000 ff4f 	bl	801b1dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a33e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a340:	4618      	mov	r0, r3
 801a342:	3738      	adds	r7, #56	@ 0x38
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}
 801a348:	e000ed04 	.word	0xe000ed04

0801a34c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b090      	sub	sp, #64	@ 0x40
 801a350:	af00      	add	r7, sp, #0
 801a352:	60f8      	str	r0, [r7, #12]
 801a354:	60b9      	str	r1, [r7, #8]
 801a356:	607a      	str	r2, [r7, #4]
 801a358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a360:	2b00      	cmp	r3, #0
 801a362:	d10b      	bne.n	801a37c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801a364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a368:	f383 8811 	msr	BASEPRI, r3
 801a36c:	f3bf 8f6f 	isb	sy
 801a370:	f3bf 8f4f 	dsb	sy
 801a374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801a376:	bf00      	nop
 801a378:	bf00      	nop
 801a37a:	e7fd      	b.n	801a378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a37c:	68bb      	ldr	r3, [r7, #8]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d103      	bne.n	801a38a <xQueueGenericSendFromISR+0x3e>
 801a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a386:	2b00      	cmp	r3, #0
 801a388:	d101      	bne.n	801a38e <xQueueGenericSendFromISR+0x42>
 801a38a:	2301      	movs	r3, #1
 801a38c:	e000      	b.n	801a390 <xQueueGenericSendFromISR+0x44>
 801a38e:	2300      	movs	r3, #0
 801a390:	2b00      	cmp	r3, #0
 801a392:	d10b      	bne.n	801a3ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a398:	f383 8811 	msr	BASEPRI, r3
 801a39c:	f3bf 8f6f 	isb	sy
 801a3a0:	f3bf 8f4f 	dsb	sy
 801a3a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a3a6:	bf00      	nop
 801a3a8:	bf00      	nop
 801a3aa:	e7fd      	b.n	801a3a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	2b02      	cmp	r3, #2
 801a3b0:	d103      	bne.n	801a3ba <xQueueGenericSendFromISR+0x6e>
 801a3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a3b6:	2b01      	cmp	r3, #1
 801a3b8:	d101      	bne.n	801a3be <xQueueGenericSendFromISR+0x72>
 801a3ba:	2301      	movs	r3, #1
 801a3bc:	e000      	b.n	801a3c0 <xQueueGenericSendFromISR+0x74>
 801a3be:	2300      	movs	r3, #0
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d10b      	bne.n	801a3dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3c8:	f383 8811 	msr	BASEPRI, r3
 801a3cc:	f3bf 8f6f 	isb	sy
 801a3d0:	f3bf 8f4f 	dsb	sy
 801a3d4:	623b      	str	r3, [r7, #32]
}
 801a3d6:	bf00      	nop
 801a3d8:	bf00      	nop
 801a3da:	e7fd      	b.n	801a3d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a3dc:	f002 fc5c 	bl	801cc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a3e0:	f3ef 8211 	mrs	r2, BASEPRI
 801a3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3e8:	f383 8811 	msr	BASEPRI, r3
 801a3ec:	f3bf 8f6f 	isb	sy
 801a3f0:	f3bf 8f4f 	dsb	sy
 801a3f4:	61fa      	str	r2, [r7, #28]
 801a3f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a3f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a404:	429a      	cmp	r2, r3
 801a406:	d302      	bcc.n	801a40e <xQueueGenericSendFromISR+0xc2>
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	2b02      	cmp	r3, #2
 801a40c:	d12f      	bne.n	801a46e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a41e:	683a      	ldr	r2, [r7, #0]
 801a420:	68b9      	ldr	r1, [r7, #8]
 801a422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a424:	f000 fafa 	bl	801aa1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a428:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a430:	d112      	bne.n	801a458 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a436:	2b00      	cmp	r3, #0
 801a438:	d016      	beq.n	801a468 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a43c:	3324      	adds	r3, #36	@ 0x24
 801a43e:	4618      	mov	r0, r3
 801a440:	f001 f8fe 	bl	801b640 <xTaskRemoveFromEventList>
 801a444:	4603      	mov	r3, r0
 801a446:	2b00      	cmp	r3, #0
 801a448:	d00e      	beq.n	801a468 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d00b      	beq.n	801a468 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2201      	movs	r2, #1
 801a454:	601a      	str	r2, [r3, #0]
 801a456:	e007      	b.n	801a468 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a45c:	3301      	adds	r3, #1
 801a45e:	b2db      	uxtb	r3, r3
 801a460:	b25a      	sxtb	r2, r3
 801a462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801a468:	2301      	movs	r3, #1
 801a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801a46c:	e001      	b.n	801a472 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a46e:	2300      	movs	r3, #0
 801a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a474:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a476:	697b      	ldr	r3, [r7, #20]
 801a478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a47c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801a480:	4618      	mov	r0, r3
 801a482:	3740      	adds	r7, #64	@ 0x40
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}

0801a488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b08c      	sub	sp, #48	@ 0x30
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	60f8      	str	r0, [r7, #12]
 801a490:	60b9      	str	r1, [r7, #8]
 801a492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a494:	2300      	movs	r3, #0
 801a496:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d10b      	bne.n	801a4ba <xQueueReceive+0x32>
	__asm volatile
 801a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4a6:	f383 8811 	msr	BASEPRI, r3
 801a4aa:	f3bf 8f6f 	isb	sy
 801a4ae:	f3bf 8f4f 	dsb	sy
 801a4b2:	623b      	str	r3, [r7, #32]
}
 801a4b4:	bf00      	nop
 801a4b6:	bf00      	nop
 801a4b8:	e7fd      	b.n	801a4b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d103      	bne.n	801a4c8 <xQueueReceive+0x40>
 801a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d101      	bne.n	801a4cc <xQueueReceive+0x44>
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	e000      	b.n	801a4ce <xQueueReceive+0x46>
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d10b      	bne.n	801a4ea <xQueueReceive+0x62>
	__asm volatile
 801a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4d6:	f383 8811 	msr	BASEPRI, r3
 801a4da:	f3bf 8f6f 	isb	sy
 801a4de:	f3bf 8f4f 	dsb	sy
 801a4e2:	61fb      	str	r3, [r7, #28]
}
 801a4e4:	bf00      	nop
 801a4e6:	bf00      	nop
 801a4e8:	e7fd      	b.n	801a4e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a4ea:	f001 fa7f 	bl	801b9ec <xTaskGetSchedulerState>
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d102      	bne.n	801a4fa <xQueueReceive+0x72>
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d101      	bne.n	801a4fe <xQueueReceive+0x76>
 801a4fa:	2301      	movs	r3, #1
 801a4fc:	e000      	b.n	801a500 <xQueueReceive+0x78>
 801a4fe:	2300      	movs	r3, #0
 801a500:	2b00      	cmp	r3, #0
 801a502:	d10b      	bne.n	801a51c <xQueueReceive+0x94>
	__asm volatile
 801a504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a508:	f383 8811 	msr	BASEPRI, r3
 801a50c:	f3bf 8f6f 	isb	sy
 801a510:	f3bf 8f4f 	dsb	sy
 801a514:	61bb      	str	r3, [r7, #24]
}
 801a516:	bf00      	nop
 801a518:	bf00      	nop
 801a51a:	e7fd      	b.n	801a518 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a51c:	f002 fadc 	bl	801cad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a524:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d01f      	beq.n	801a56c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a52c:	68b9      	ldr	r1, [r7, #8]
 801a52e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a530:	f000 fade 	bl	801aaf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a536:	1e5a      	subs	r2, r3, #1
 801a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53e:	691b      	ldr	r3, [r3, #16]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d00f      	beq.n	801a564 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a546:	3310      	adds	r3, #16
 801a548:	4618      	mov	r0, r3
 801a54a:	f001 f879 	bl	801b640 <xTaskRemoveFromEventList>
 801a54e:	4603      	mov	r3, r0
 801a550:	2b00      	cmp	r3, #0
 801a552:	d007      	beq.n	801a564 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a554:	4b3c      	ldr	r3, [pc, #240]	@ (801a648 <xQueueReceive+0x1c0>)
 801a556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a55a:	601a      	str	r2, [r3, #0]
 801a55c:	f3bf 8f4f 	dsb	sy
 801a560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a564:	f002 faea 	bl	801cb3c <vPortExitCritical>
				return pdPASS;
 801a568:	2301      	movs	r3, #1
 801a56a:	e069      	b.n	801a640 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d103      	bne.n	801a57a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a572:	f002 fae3 	bl	801cb3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a576:	2300      	movs	r3, #0
 801a578:	e062      	b.n	801a640 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d106      	bne.n	801a58e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a580:	f107 0310 	add.w	r3, r7, #16
 801a584:	4618      	mov	r0, r3
 801a586:	f001 f8bf 	bl	801b708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a58a:	2301      	movs	r3, #1
 801a58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a58e:	f002 fad5 	bl	801cb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a592:	f000 fe15 	bl	801b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a596:	f002 fa9f 	bl	801cad8 <vPortEnterCritical>
 801a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a59c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a5a0:	b25b      	sxtb	r3, r3
 801a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5a6:	d103      	bne.n	801a5b0 <xQueueReceive+0x128>
 801a5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a5b6:	b25b      	sxtb	r3, r3
 801a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5bc:	d103      	bne.n	801a5c6 <xQueueReceive+0x13e>
 801a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a5c6:	f002 fab9 	bl	801cb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a5ca:	1d3a      	adds	r2, r7, #4
 801a5cc:	f107 0310 	add.w	r3, r7, #16
 801a5d0:	4611      	mov	r1, r2
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f001 f8ae 	bl	801b734 <xTaskCheckForTimeOut>
 801a5d8:	4603      	mov	r3, r0
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d123      	bne.n	801a626 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a5e0:	f000 fafe 	bl	801abe0 <prvIsQueueEmpty>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d017      	beq.n	801a61a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5ec:	3324      	adds	r3, #36	@ 0x24
 801a5ee:	687a      	ldr	r2, [r7, #4]
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f000 ffd2 	bl	801b59c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a5f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a5fa:	f000 fa9f 	bl	801ab3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a5fe:	f000 fded 	bl	801b1dc <xTaskResumeAll>
 801a602:	4603      	mov	r3, r0
 801a604:	2b00      	cmp	r3, #0
 801a606:	d189      	bne.n	801a51c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801a608:	4b0f      	ldr	r3, [pc, #60]	@ (801a648 <xQueueReceive+0x1c0>)
 801a60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a60e:	601a      	str	r2, [r3, #0]
 801a610:	f3bf 8f4f 	dsb	sy
 801a614:	f3bf 8f6f 	isb	sy
 801a618:	e780      	b.n	801a51c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a61c:	f000 fa8e 	bl	801ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a620:	f000 fddc 	bl	801b1dc <xTaskResumeAll>
 801a624:	e77a      	b.n	801a51c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a628:	f000 fa88 	bl	801ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a62c:	f000 fdd6 	bl	801b1dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a632:	f000 fad5 	bl	801abe0 <prvIsQueueEmpty>
 801a636:	4603      	mov	r3, r0
 801a638:	2b00      	cmp	r3, #0
 801a63a:	f43f af6f 	beq.w	801a51c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a63e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a640:	4618      	mov	r0, r3
 801a642:	3730      	adds	r7, #48	@ 0x30
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}
 801a648:	e000ed04 	.word	0xe000ed04

0801a64c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b08e      	sub	sp, #56	@ 0x38
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
 801a654:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a656:	2300      	movs	r3, #0
 801a658:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a65e:	2300      	movs	r3, #0
 801a660:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a664:	2b00      	cmp	r3, #0
 801a666:	d10b      	bne.n	801a680 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a66c:	f383 8811 	msr	BASEPRI, r3
 801a670:	f3bf 8f6f 	isb	sy
 801a674:	f3bf 8f4f 	dsb	sy
 801a678:	623b      	str	r3, [r7, #32]
}
 801a67a:	bf00      	nop
 801a67c:	bf00      	nop
 801a67e:	e7fd      	b.n	801a67c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a684:	2b00      	cmp	r3, #0
 801a686:	d00b      	beq.n	801a6a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a68c:	f383 8811 	msr	BASEPRI, r3
 801a690:	f3bf 8f6f 	isb	sy
 801a694:	f3bf 8f4f 	dsb	sy
 801a698:	61fb      	str	r3, [r7, #28]
}
 801a69a:	bf00      	nop
 801a69c:	bf00      	nop
 801a69e:	e7fd      	b.n	801a69c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a6a0:	f001 f9a4 	bl	801b9ec <xTaskGetSchedulerState>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d102      	bne.n	801a6b0 <xQueueSemaphoreTake+0x64>
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d101      	bne.n	801a6b4 <xQueueSemaphoreTake+0x68>
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e000      	b.n	801a6b6 <xQueueSemaphoreTake+0x6a>
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d10b      	bne.n	801a6d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801a6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6be:	f383 8811 	msr	BASEPRI, r3
 801a6c2:	f3bf 8f6f 	isb	sy
 801a6c6:	f3bf 8f4f 	dsb	sy
 801a6ca:	61bb      	str	r3, [r7, #24]
}
 801a6cc:	bf00      	nop
 801a6ce:	bf00      	nop
 801a6d0:	e7fd      	b.n	801a6ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a6d2:	f002 fa01 	bl	801cad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d024      	beq.n	801a72c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6e4:	1e5a      	subs	r2, r3, #1
 801a6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d104      	bne.n	801a6fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a6f2:	f001 faf5 	bl	801bce0 <pvTaskIncrementMutexHeldCount>
 801a6f6:	4602      	mov	r2, r0
 801a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6fe:	691b      	ldr	r3, [r3, #16]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00f      	beq.n	801a724 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a706:	3310      	adds	r3, #16
 801a708:	4618      	mov	r0, r3
 801a70a:	f000 ff99 	bl	801b640 <xTaskRemoveFromEventList>
 801a70e:	4603      	mov	r3, r0
 801a710:	2b00      	cmp	r3, #0
 801a712:	d007      	beq.n	801a724 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a714:	4b54      	ldr	r3, [pc, #336]	@ (801a868 <xQueueSemaphoreTake+0x21c>)
 801a716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a71a:	601a      	str	r2, [r3, #0]
 801a71c:	f3bf 8f4f 	dsb	sy
 801a720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a724:	f002 fa0a 	bl	801cb3c <vPortExitCritical>
				return pdPASS;
 801a728:	2301      	movs	r3, #1
 801a72a:	e098      	b.n	801a85e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d112      	bne.n	801a758 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a734:	2b00      	cmp	r3, #0
 801a736:	d00b      	beq.n	801a750 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a73c:	f383 8811 	msr	BASEPRI, r3
 801a740:	f3bf 8f6f 	isb	sy
 801a744:	f3bf 8f4f 	dsb	sy
 801a748:	617b      	str	r3, [r7, #20]
}
 801a74a:	bf00      	nop
 801a74c:	bf00      	nop
 801a74e:	e7fd      	b.n	801a74c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a750:	f002 f9f4 	bl	801cb3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a754:	2300      	movs	r3, #0
 801a756:	e082      	b.n	801a85e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d106      	bne.n	801a76c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a75e:	f107 030c 	add.w	r3, r7, #12
 801a762:	4618      	mov	r0, r3
 801a764:	f000 ffd0 	bl	801b708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a768:	2301      	movs	r3, #1
 801a76a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a76c:	f002 f9e6 	bl	801cb3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a770:	f000 fd26 	bl	801b1c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a774:	f002 f9b0 	bl	801cad8 <vPortEnterCritical>
 801a778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a77a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a77e:	b25b      	sxtb	r3, r3
 801a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a784:	d103      	bne.n	801a78e <xQueueSemaphoreTake+0x142>
 801a786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a788:	2200      	movs	r2, #0
 801a78a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a794:	b25b      	sxtb	r3, r3
 801a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a79a:	d103      	bne.n	801a7a4 <xQueueSemaphoreTake+0x158>
 801a79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a79e:	2200      	movs	r2, #0
 801a7a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a7a4:	f002 f9ca 	bl	801cb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a7a8:	463a      	mov	r2, r7
 801a7aa:	f107 030c 	add.w	r3, r7, #12
 801a7ae:	4611      	mov	r1, r2
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	f000 ffbf 	bl	801b734 <xTaskCheckForTimeOut>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d132      	bne.n	801a822 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a7bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a7be:	f000 fa0f 	bl	801abe0 <prvIsQueueEmpty>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d026      	beq.n	801a816 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d109      	bne.n	801a7e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801a7d0:	f002 f982 	bl	801cad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7d6:	689b      	ldr	r3, [r3, #8]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f001 f925 	bl	801ba28 <xTaskPriorityInherit>
 801a7de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801a7e0:	f002 f9ac 	bl	801cb3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7e6:	3324      	adds	r3, #36	@ 0x24
 801a7e8:	683a      	ldr	r2, [r7, #0]
 801a7ea:	4611      	mov	r1, r2
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f000 fed5 	bl	801b59c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a7f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a7f4:	f000 f9a2 	bl	801ab3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a7f8:	f000 fcf0 	bl	801b1dc <xTaskResumeAll>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	f47f af67 	bne.w	801a6d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801a804:	4b18      	ldr	r3, [pc, #96]	@ (801a868 <xQueueSemaphoreTake+0x21c>)
 801a806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a80a:	601a      	str	r2, [r3, #0]
 801a80c:	f3bf 8f4f 	dsb	sy
 801a810:	f3bf 8f6f 	isb	sy
 801a814:	e75d      	b.n	801a6d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a818:	f000 f990 	bl	801ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a81c:	f000 fcde 	bl	801b1dc <xTaskResumeAll>
 801a820:	e757      	b.n	801a6d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a824:	f000 f98a 	bl	801ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a828:	f000 fcd8 	bl	801b1dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a82c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a82e:	f000 f9d7 	bl	801abe0 <prvIsQueueEmpty>
 801a832:	4603      	mov	r3, r0
 801a834:	2b00      	cmp	r3, #0
 801a836:	f43f af4c 	beq.w	801a6d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d00d      	beq.n	801a85c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801a840:	f002 f94a 	bl	801cad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a846:	f000 f8d1 	bl	801a9ec <prvGetDisinheritPriorityAfterTimeout>
 801a84a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a84e:	689b      	ldr	r3, [r3, #8]
 801a850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a852:	4618      	mov	r0, r3
 801a854:	f001 f9c0 	bl	801bbd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a858:	f002 f970 	bl	801cb3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a85c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a85e:	4618      	mov	r0, r3
 801a860:	3738      	adds	r7, #56	@ 0x38
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}
 801a866:	bf00      	nop
 801a868:	e000ed04 	.word	0xe000ed04

0801a86c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b08e      	sub	sp, #56	@ 0x38
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	60b9      	str	r1, [r7, #8]
 801a876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d10b      	bne.n	801a89a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801a882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a886:	f383 8811 	msr	BASEPRI, r3
 801a88a:	f3bf 8f6f 	isb	sy
 801a88e:	f3bf 8f4f 	dsb	sy
 801a892:	623b      	str	r3, [r7, #32]
}
 801a894:	bf00      	nop
 801a896:	bf00      	nop
 801a898:	e7fd      	b.n	801a896 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d103      	bne.n	801a8a8 <xQueueReceiveFromISR+0x3c>
 801a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d101      	bne.n	801a8ac <xQueueReceiveFromISR+0x40>
 801a8a8:	2301      	movs	r3, #1
 801a8aa:	e000      	b.n	801a8ae <xQueueReceiveFromISR+0x42>
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d10b      	bne.n	801a8ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801a8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8b6:	f383 8811 	msr	BASEPRI, r3
 801a8ba:	f3bf 8f6f 	isb	sy
 801a8be:	f3bf 8f4f 	dsb	sy
 801a8c2:	61fb      	str	r3, [r7, #28]
}
 801a8c4:	bf00      	nop
 801a8c6:	bf00      	nop
 801a8c8:	e7fd      	b.n	801a8c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a8ca:	f002 f9e5 	bl	801cc98 <vPortValidateInterruptPriority>
	__asm volatile
 801a8ce:	f3ef 8211 	mrs	r2, BASEPRI
 801a8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8d6:	f383 8811 	msr	BASEPRI, r3
 801a8da:	f3bf 8f6f 	isb	sy
 801a8de:	f3bf 8f4f 	dsb	sy
 801a8e2:	61ba      	str	r2, [r7, #24]
 801a8e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a8e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d02f      	beq.n	801a956 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a8fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a900:	68b9      	ldr	r1, [r7, #8]
 801a902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a904:	f000 f8f4 	bl	801aaf0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a90a:	1e5a      	subs	r2, r3, #1
 801a90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a90e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a910:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a918:	d112      	bne.n	801a940 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a91c:	691b      	ldr	r3, [r3, #16]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d016      	beq.n	801a950 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a924:	3310      	adds	r3, #16
 801a926:	4618      	mov	r0, r3
 801a928:	f000 fe8a 	bl	801b640 <xTaskRemoveFromEventList>
 801a92c:	4603      	mov	r3, r0
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d00e      	beq.n	801a950 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d00b      	beq.n	801a950 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2201      	movs	r2, #1
 801a93c:	601a      	str	r2, [r3, #0]
 801a93e:	e007      	b.n	801a950 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a944:	3301      	adds	r3, #1
 801a946:	b2db      	uxtb	r3, r3
 801a948:	b25a      	sxtb	r2, r3
 801a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a94c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801a950:	2301      	movs	r3, #1
 801a952:	637b      	str	r3, [r7, #52]	@ 0x34
 801a954:	e001      	b.n	801a95a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801a956:	2300      	movs	r3, #0
 801a958:	637b      	str	r3, [r7, #52]	@ 0x34
 801a95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a95c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a95e:	693b      	ldr	r3, [r7, #16]
 801a960:	f383 8811 	msr	BASEPRI, r3
}
 801a964:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a968:	4618      	mov	r0, r3
 801a96a:	3738      	adds	r7, #56	@ 0x38
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}

0801a970 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b084      	sub	sp, #16
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d10b      	bne.n	801a996 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 801a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a982:	f383 8811 	msr	BASEPRI, r3
 801a986:	f3bf 8f6f 	isb	sy
 801a98a:	f3bf 8f4f 	dsb	sy
 801a98e:	60bb      	str	r3, [r7, #8]
}
 801a990:	bf00      	nop
 801a992:	bf00      	nop
 801a994:	e7fd      	b.n	801a992 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801a996:	f002 f89f 	bl	801cad8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a99e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801a9a0:	f002 f8cc 	bl	801cb3c <vPortExitCritical>

	return uxReturn;
 801a9a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	3710      	adds	r7, #16
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}

0801a9ae <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801a9ae:	b480      	push	{r7}
 801a9b0:	b087      	sub	sp, #28
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801a9ba:	697b      	ldr	r3, [r7, #20]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d10b      	bne.n	801a9d8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 801a9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9c4:	f383 8811 	msr	BASEPRI, r3
 801a9c8:	f3bf 8f6f 	isb	sy
 801a9cc:	f3bf 8f4f 	dsb	sy
 801a9d0:	60fb      	str	r3, [r7, #12]
}
 801a9d2:	bf00      	nop
 801a9d4:	bf00      	nop
 801a9d6:	e7fd      	b.n	801a9d4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a9dc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801a9de:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	371c      	adds	r7, #28
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ea:	4770      	bx	lr

0801a9ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a9ec:	b480      	push	{r7}
 801a9ee:	b085      	sub	sp, #20
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d006      	beq.n	801aa0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801aa06:	60fb      	str	r3, [r7, #12]
 801aa08:	e001      	b.n	801aa0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801aa0e:	68fb      	ldr	r3, [r7, #12]
	}
 801aa10:	4618      	mov	r0, r3
 801aa12:	3714      	adds	r7, #20
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr

0801aa1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b086      	sub	sp, #24
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	60f8      	str	r0, [r7, #12]
 801aa24:	60b9      	str	r1, [r7, #8]
 801aa26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aa30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d10d      	bne.n	801aa56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d14d      	bne.n	801aade <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	689b      	ldr	r3, [r3, #8]
 801aa46:	4618      	mov	r0, r3
 801aa48:	f001 f856 	bl	801baf8 <xTaskPriorityDisinherit>
 801aa4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	2200      	movs	r2, #0
 801aa52:	609a      	str	r2, [r3, #8]
 801aa54:	e043      	b.n	801aade <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d119      	bne.n	801aa90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	6858      	ldr	r0, [r3, #4]
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa64:	461a      	mov	r2, r3
 801aa66:	68b9      	ldr	r1, [r7, #8]
 801aa68:	f002 ffdb 	bl	801da22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	685a      	ldr	r2, [r3, #4]
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa74:	441a      	add	r2, r3
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	685a      	ldr	r2, [r3, #4]
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	689b      	ldr	r3, [r3, #8]
 801aa82:	429a      	cmp	r2, r3
 801aa84:	d32b      	bcc.n	801aade <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	681a      	ldr	r2, [r3, #0]
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	605a      	str	r2, [r3, #4]
 801aa8e:	e026      	b.n	801aade <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	68d8      	ldr	r0, [r3, #12]
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa98:	461a      	mov	r2, r3
 801aa9a:	68b9      	ldr	r1, [r7, #8]
 801aa9c:	f002 ffc1 	bl	801da22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	68da      	ldr	r2, [r3, #12]
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aaa8:	425b      	negs	r3, r3
 801aaaa:	441a      	add	r2, r3
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	68da      	ldr	r2, [r3, #12]
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d207      	bcs.n	801aacc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	689a      	ldr	r2, [r3, #8]
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aac4:	425b      	negs	r3, r3
 801aac6:	441a      	add	r2, r3
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	2b02      	cmp	r3, #2
 801aad0:	d105      	bne.n	801aade <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801aad2:	693b      	ldr	r3, [r7, #16]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d002      	beq.n	801aade <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801aad8:	693b      	ldr	r3, [r7, #16]
 801aada:	3b01      	subs	r3, #1
 801aadc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	1c5a      	adds	r2, r3, #1
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801aae6:	697b      	ldr	r3, [r7, #20]
}
 801aae8:	4618      	mov	r0, r3
 801aaea:	3718      	adds	r7, #24
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}

0801aaf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
 801aaf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d018      	beq.n	801ab34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	68da      	ldr	r2, [r3, #12]
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ab0a:	441a      	add	r2, r3
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	68da      	ldr	r2, [r3, #12]
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	689b      	ldr	r3, [r3, #8]
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d303      	bcc.n	801ab24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681a      	ldr	r2, [r3, #0]
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	68d9      	ldr	r1, [r3, #12]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ab2c:	461a      	mov	r2, r3
 801ab2e:	6838      	ldr	r0, [r7, #0]
 801ab30:	f002 ff77 	bl	801da22 <memcpy>
	}
}
 801ab34:	bf00      	nop
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}

0801ab3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	b084      	sub	sp, #16
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801ab44:	f001 ffc8 	bl	801cad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801ab4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ab50:	e011      	b.n	801ab76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d012      	beq.n	801ab80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	3324      	adds	r3, #36	@ 0x24
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f000 fd6e 	bl	801b640 <xTaskRemoveFromEventList>
 801ab64:	4603      	mov	r3, r0
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d001      	beq.n	801ab6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ab6a:	f000 fe47 	bl	801b7fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ab6e:	7bfb      	ldrb	r3, [r7, #15]
 801ab70:	3b01      	subs	r3, #1
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ab76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	dce9      	bgt.n	801ab52 <prvUnlockQueue+0x16>
 801ab7e:	e000      	b.n	801ab82 <prvUnlockQueue+0x46>
					break;
 801ab80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	22ff      	movs	r2, #255	@ 0xff
 801ab86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801ab8a:	f001 ffd7 	bl	801cb3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ab8e:	f001 ffa3 	bl	801cad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ab98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ab9a:	e011      	b.n	801abc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	691b      	ldr	r3, [r3, #16]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d012      	beq.n	801abca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	3310      	adds	r3, #16
 801aba8:	4618      	mov	r0, r3
 801abaa:	f000 fd49 	bl	801b640 <xTaskRemoveFromEventList>
 801abae:	4603      	mov	r3, r0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d001      	beq.n	801abb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801abb4:	f000 fe22 	bl	801b7fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801abb8:	7bbb      	ldrb	r3, [r7, #14]
 801abba:	3b01      	subs	r3, #1
 801abbc:	b2db      	uxtb	r3, r3
 801abbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801abc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	dce9      	bgt.n	801ab9c <prvUnlockQueue+0x60>
 801abc8:	e000      	b.n	801abcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801abca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	22ff      	movs	r2, #255	@ 0xff
 801abd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801abd4:	f001 ffb2 	bl	801cb3c <vPortExitCritical>
}
 801abd8:	bf00      	nop
 801abda:	3710      	adds	r7, #16
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801abe8:	f001 ff76 	bl	801cad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d102      	bne.n	801abfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801abf4:	2301      	movs	r3, #1
 801abf6:	60fb      	str	r3, [r7, #12]
 801abf8:	e001      	b.n	801abfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801abfa:	2300      	movs	r3, #0
 801abfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801abfe:	f001 ff9d 	bl	801cb3c <vPortExitCritical>

	return xReturn;
 801ac02:	68fb      	ldr	r3, [r7, #12]
}
 801ac04:	4618      	mov	r0, r3
 801ac06:	3710      	adds	r7, #16
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	bd80      	pop	{r7, pc}

0801ac0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b084      	sub	sp, #16
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ac14:	f001 ff60 	bl	801cad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac20:	429a      	cmp	r2, r3
 801ac22:	d102      	bne.n	801ac2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ac24:	2301      	movs	r3, #1
 801ac26:	60fb      	str	r3, [r7, #12]
 801ac28:	e001      	b.n	801ac2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ac2e:	f001 ff85 	bl	801cb3c <vPortExitCritical>

	return xReturn;
 801ac32:	68fb      	ldr	r3, [r7, #12]
}
 801ac34:	4618      	mov	r0, r3
 801ac36:	3710      	adds	r7, #16
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801ac3c:	b480      	push	{r7}
 801ac3e:	b085      	sub	sp, #20
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ac46:	2300      	movs	r3, #0
 801ac48:	60fb      	str	r3, [r7, #12]
 801ac4a:	e014      	b.n	801ac76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ac4c:	4a0f      	ldr	r2, [pc, #60]	@ (801ac8c <vQueueAddToRegistry+0x50>)
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d10b      	bne.n	801ac70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ac58:	490c      	ldr	r1, [pc, #48]	@ (801ac8c <vQueueAddToRegistry+0x50>)
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	683a      	ldr	r2, [r7, #0]
 801ac5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ac62:	4a0a      	ldr	r2, [pc, #40]	@ (801ac8c <vQueueAddToRegistry+0x50>)
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	00db      	lsls	r3, r3, #3
 801ac68:	4413      	add	r3, r2
 801ac6a:	687a      	ldr	r2, [r7, #4]
 801ac6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ac6e:	e006      	b.n	801ac7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	3301      	adds	r3, #1
 801ac74:	60fb      	str	r3, [r7, #12]
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	2b07      	cmp	r3, #7
 801ac7a:	d9e7      	bls.n	801ac4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ac7c:	bf00      	nop
 801ac7e:	bf00      	nop
 801ac80:	3714      	adds	r7, #20
 801ac82:	46bd      	mov	sp, r7
 801ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac88:	4770      	bx	lr
 801ac8a:	bf00      	nop
 801ac8c:	20001938 	.word	0x20001938

0801ac90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b086      	sub	sp, #24
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	60f8      	str	r0, [r7, #12]
 801ac98:	60b9      	str	r1, [r7, #8]
 801ac9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801aca0:	f001 ff1a 	bl	801cad8 <vPortEnterCritical>
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801acaa:	b25b      	sxtb	r3, r3
 801acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acb0:	d103      	bne.n	801acba <vQueueWaitForMessageRestricted+0x2a>
 801acb2:	697b      	ldr	r3, [r7, #20]
 801acb4:	2200      	movs	r2, #0
 801acb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801acba:	697b      	ldr	r3, [r7, #20]
 801acbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801acc0:	b25b      	sxtb	r3, r3
 801acc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acc6:	d103      	bne.n	801acd0 <vQueueWaitForMessageRestricted+0x40>
 801acc8:	697b      	ldr	r3, [r7, #20]
 801acca:	2200      	movs	r2, #0
 801accc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801acd0:	f001 ff34 	bl	801cb3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801acd4:	697b      	ldr	r3, [r7, #20]
 801acd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d106      	bne.n	801acea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801acdc:	697b      	ldr	r3, [r7, #20]
 801acde:	3324      	adds	r3, #36	@ 0x24
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	68b9      	ldr	r1, [r7, #8]
 801ace4:	4618      	mov	r0, r3
 801ace6:	f000 fc7f 	bl	801b5e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801acea:	6978      	ldr	r0, [r7, #20]
 801acec:	f7ff ff26 	bl	801ab3c <prvUnlockQueue>
	}
 801acf0:	bf00      	nop
 801acf2:	3718      	adds	r7, #24
 801acf4:	46bd      	mov	sp, r7
 801acf6:	bd80      	pop	{r7, pc}

0801acf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b08e      	sub	sp, #56	@ 0x38
 801acfc:	af04      	add	r7, sp, #16
 801acfe:	60f8      	str	r0, [r7, #12]
 801ad00:	60b9      	str	r1, [r7, #8]
 801ad02:	607a      	str	r2, [r7, #4]
 801ad04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ad06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d10b      	bne.n	801ad24 <xTaskCreateStatic+0x2c>
	__asm volatile
 801ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad10:	f383 8811 	msr	BASEPRI, r3
 801ad14:	f3bf 8f6f 	isb	sy
 801ad18:	f3bf 8f4f 	dsb	sy
 801ad1c:	623b      	str	r3, [r7, #32]
}
 801ad1e:	bf00      	nop
 801ad20:	bf00      	nop
 801ad22:	e7fd      	b.n	801ad20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d10b      	bne.n	801ad42 <xTaskCreateStatic+0x4a>
	__asm volatile
 801ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad2e:	f383 8811 	msr	BASEPRI, r3
 801ad32:	f3bf 8f6f 	isb	sy
 801ad36:	f3bf 8f4f 	dsb	sy
 801ad3a:	61fb      	str	r3, [r7, #28]
}
 801ad3c:	bf00      	nop
 801ad3e:	bf00      	nop
 801ad40:	e7fd      	b.n	801ad3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ad42:	23a8      	movs	r3, #168	@ 0xa8
 801ad44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ad46:	693b      	ldr	r3, [r7, #16]
 801ad48:	2ba8      	cmp	r3, #168	@ 0xa8
 801ad4a:	d00b      	beq.n	801ad64 <xTaskCreateStatic+0x6c>
	__asm volatile
 801ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad50:	f383 8811 	msr	BASEPRI, r3
 801ad54:	f3bf 8f6f 	isb	sy
 801ad58:	f3bf 8f4f 	dsb	sy
 801ad5c:	61bb      	str	r3, [r7, #24]
}
 801ad5e:	bf00      	nop
 801ad60:	bf00      	nop
 801ad62:	e7fd      	b.n	801ad60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ad64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d01e      	beq.n	801adaa <xTaskCreateStatic+0xb2>
 801ad6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d01b      	beq.n	801adaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ad72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ad7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad7e:	2202      	movs	r2, #2
 801ad80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ad84:	2300      	movs	r3, #0
 801ad86:	9303      	str	r3, [sp, #12]
 801ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad8a:	9302      	str	r3, [sp, #8]
 801ad8c:	f107 0314 	add.w	r3, r7, #20
 801ad90:	9301      	str	r3, [sp, #4]
 801ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad94:	9300      	str	r3, [sp, #0]
 801ad96:	683b      	ldr	r3, [r7, #0]
 801ad98:	687a      	ldr	r2, [r7, #4]
 801ad9a:	68b9      	ldr	r1, [r7, #8]
 801ad9c:	68f8      	ldr	r0, [r7, #12]
 801ad9e:	f000 f851 	bl	801ae44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ada2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ada4:	f000 f8f6 	bl	801af94 <prvAddNewTaskToReadyList>
 801ada8:	e001      	b.n	801adae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801adaa:	2300      	movs	r3, #0
 801adac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801adae:	697b      	ldr	r3, [r7, #20]
	}
 801adb0:	4618      	mov	r0, r3
 801adb2:	3728      	adds	r7, #40	@ 0x28
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}

0801adb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b08c      	sub	sp, #48	@ 0x30
 801adbc:	af04      	add	r7, sp, #16
 801adbe:	60f8      	str	r0, [r7, #12]
 801adc0:	60b9      	str	r1, [r7, #8]
 801adc2:	603b      	str	r3, [r7, #0]
 801adc4:	4613      	mov	r3, r2
 801adc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801adc8:	88fb      	ldrh	r3, [r7, #6]
 801adca:	009b      	lsls	r3, r3, #2
 801adcc:	4618      	mov	r0, r3
 801adce:	f001 ffa5 	bl	801cd1c <pvPortMalloc>
 801add2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d00e      	beq.n	801adf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801adda:	20a8      	movs	r0, #168	@ 0xa8
 801addc:	f001 ff9e 	bl	801cd1c <pvPortMalloc>
 801ade0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ade2:	69fb      	ldr	r3, [r7, #28]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d003      	beq.n	801adf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	697a      	ldr	r2, [r7, #20]
 801adec:	631a      	str	r2, [r3, #48]	@ 0x30
 801adee:	e005      	b.n	801adfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801adf0:	6978      	ldr	r0, [r7, #20]
 801adf2:	f002 f861 	bl	801ceb8 <vPortFree>
 801adf6:	e001      	b.n	801adfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801adf8:	2300      	movs	r3, #0
 801adfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801adfc:	69fb      	ldr	r3, [r7, #28]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d017      	beq.n	801ae32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ae02:	69fb      	ldr	r3, [r7, #28]
 801ae04:	2200      	movs	r2, #0
 801ae06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ae0a:	88fa      	ldrh	r2, [r7, #6]
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	9303      	str	r3, [sp, #12]
 801ae10:	69fb      	ldr	r3, [r7, #28]
 801ae12:	9302      	str	r3, [sp, #8]
 801ae14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae16:	9301      	str	r3, [sp, #4]
 801ae18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae1a:	9300      	str	r3, [sp, #0]
 801ae1c:	683b      	ldr	r3, [r7, #0]
 801ae1e:	68b9      	ldr	r1, [r7, #8]
 801ae20:	68f8      	ldr	r0, [r7, #12]
 801ae22:	f000 f80f 	bl	801ae44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ae26:	69f8      	ldr	r0, [r7, #28]
 801ae28:	f000 f8b4 	bl	801af94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ae2c:	2301      	movs	r3, #1
 801ae2e:	61bb      	str	r3, [r7, #24]
 801ae30:	e002      	b.n	801ae38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ae32:	f04f 33ff 	mov.w	r3, #4294967295
 801ae36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ae38:	69bb      	ldr	r3, [r7, #24]
	}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	3720      	adds	r7, #32
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}
	...

0801ae44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b088      	sub	sp, #32
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	60f8      	str	r0, [r7, #12]
 801ae4c:	60b9      	str	r1, [r7, #8]
 801ae4e:	607a      	str	r2, [r7, #4]
 801ae50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	009b      	lsls	r3, r3, #2
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	21a5      	movs	r1, #165	@ 0xa5
 801ae5e:	f002 fcfb 	bl	801d858 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ae6c:	3b01      	subs	r3, #1
 801ae6e:	009b      	lsls	r3, r3, #2
 801ae70:	4413      	add	r3, r2
 801ae72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ae74:	69bb      	ldr	r3, [r7, #24]
 801ae76:	f023 0307 	bic.w	r3, r3, #7
 801ae7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ae7c:	69bb      	ldr	r3, [r7, #24]
 801ae7e:	f003 0307 	and.w	r3, r3, #7
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d00b      	beq.n	801ae9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 801ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae8a:	f383 8811 	msr	BASEPRI, r3
 801ae8e:	f3bf 8f6f 	isb	sy
 801ae92:	f3bf 8f4f 	dsb	sy
 801ae96:	617b      	str	r3, [r7, #20]
}
 801ae98:	bf00      	nop
 801ae9a:	bf00      	nop
 801ae9c:	e7fd      	b.n	801ae9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d01f      	beq.n	801aee4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aea4:	2300      	movs	r3, #0
 801aea6:	61fb      	str	r3, [r7, #28]
 801aea8:	e012      	b.n	801aed0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801aeaa:	68ba      	ldr	r2, [r7, #8]
 801aeac:	69fb      	ldr	r3, [r7, #28]
 801aeae:	4413      	add	r3, r2
 801aeb0:	7819      	ldrb	r1, [r3, #0]
 801aeb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aeb4:	69fb      	ldr	r3, [r7, #28]
 801aeb6:	4413      	add	r3, r2
 801aeb8:	3334      	adds	r3, #52	@ 0x34
 801aeba:	460a      	mov	r2, r1
 801aebc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801aebe:	68ba      	ldr	r2, [r7, #8]
 801aec0:	69fb      	ldr	r3, [r7, #28]
 801aec2:	4413      	add	r3, r2
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d006      	beq.n	801aed8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aeca:	69fb      	ldr	r3, [r7, #28]
 801aecc:	3301      	adds	r3, #1
 801aece:	61fb      	str	r3, [r7, #28]
 801aed0:	69fb      	ldr	r3, [r7, #28]
 801aed2:	2b0f      	cmp	r3, #15
 801aed4:	d9e9      	bls.n	801aeaa <prvInitialiseNewTask+0x66>
 801aed6:	e000      	b.n	801aeda <prvInitialiseNewTask+0x96>
			{
				break;
 801aed8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801aeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aedc:	2200      	movs	r2, #0
 801aede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801aee2:	e003      	b.n	801aeec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aee6:	2200      	movs	r2, #0
 801aee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801aeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeee:	2b37      	cmp	r3, #55	@ 0x37
 801aef0:	d901      	bls.n	801aef6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801aef2:	2337      	movs	r3, #55	@ 0x37
 801aef4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aefa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aefe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801af00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af04:	2200      	movs	r2, #0
 801af06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af0a:	3304      	adds	r3, #4
 801af0c:	4618      	mov	r0, r3
 801af0e:	f7fe fe89 	bl	8019c24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af14:	3318      	adds	r3, #24
 801af16:	4618      	mov	r0, r3
 801af18:	f7fe fe84 	bl	8019c24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af34:	2200      	movs	r2, #0
 801af36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af3c:	2200      	movs	r2, #0
 801af3e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af44:	3354      	adds	r3, #84	@ 0x54
 801af46:	224c      	movs	r2, #76	@ 0x4c
 801af48:	2100      	movs	r1, #0
 801af4a:	4618      	mov	r0, r3
 801af4c:	f002 fc84 	bl	801d858 <memset>
 801af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af52:	4a0d      	ldr	r2, [pc, #52]	@ (801af88 <prvInitialiseNewTask+0x144>)
 801af54:	659a      	str	r2, [r3, #88]	@ 0x58
 801af56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af58:	4a0c      	ldr	r2, [pc, #48]	@ (801af8c <prvInitialiseNewTask+0x148>)
 801af5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af5e:	4a0c      	ldr	r2, [pc, #48]	@ (801af90 <prvInitialiseNewTask+0x14c>)
 801af60:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801af62:	683a      	ldr	r2, [r7, #0]
 801af64:	68f9      	ldr	r1, [r7, #12]
 801af66:	69b8      	ldr	r0, [r7, #24]
 801af68:	f001 fc84 	bl	801c874 <pxPortInitialiseStack>
 801af6c:	4602      	mov	r2, r0
 801af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801af72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af74:	2b00      	cmp	r3, #0
 801af76:	d002      	beq.n	801af7e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801af78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af7e:	bf00      	nop
 801af80:	3720      	adds	r7, #32
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
 801af86:	bf00      	nop
 801af88:	200074d8 	.word	0x200074d8
 801af8c:	20007540 	.word	0x20007540
 801af90:	200075a8 	.word	0x200075a8

0801af94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b082      	sub	sp, #8
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801af9c:	f001 fd9c 	bl	801cad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801afa0:	4b2d      	ldr	r3, [pc, #180]	@ (801b058 <prvAddNewTaskToReadyList+0xc4>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	3301      	adds	r3, #1
 801afa6:	4a2c      	ldr	r2, [pc, #176]	@ (801b058 <prvAddNewTaskToReadyList+0xc4>)
 801afa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801afaa:	4b2c      	ldr	r3, [pc, #176]	@ (801b05c <prvAddNewTaskToReadyList+0xc8>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d109      	bne.n	801afc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801afb2:	4a2a      	ldr	r2, [pc, #168]	@ (801b05c <prvAddNewTaskToReadyList+0xc8>)
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801afb8:	4b27      	ldr	r3, [pc, #156]	@ (801b058 <prvAddNewTaskToReadyList+0xc4>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	2b01      	cmp	r3, #1
 801afbe:	d110      	bne.n	801afe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801afc0:	f000 fc40 	bl	801b844 <prvInitialiseTaskLists>
 801afc4:	e00d      	b.n	801afe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801afc6:	4b26      	ldr	r3, [pc, #152]	@ (801b060 <prvAddNewTaskToReadyList+0xcc>)
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d109      	bne.n	801afe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801afce:	4b23      	ldr	r3, [pc, #140]	@ (801b05c <prvAddNewTaskToReadyList+0xc8>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afd8:	429a      	cmp	r2, r3
 801afda:	d802      	bhi.n	801afe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801afdc:	4a1f      	ldr	r2, [pc, #124]	@ (801b05c <prvAddNewTaskToReadyList+0xc8>)
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801afe2:	4b20      	ldr	r3, [pc, #128]	@ (801b064 <prvAddNewTaskToReadyList+0xd0>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	3301      	adds	r3, #1
 801afe8:	4a1e      	ldr	r2, [pc, #120]	@ (801b064 <prvAddNewTaskToReadyList+0xd0>)
 801afea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801afec:	4b1d      	ldr	r3, [pc, #116]	@ (801b064 <prvAddNewTaskToReadyList+0xd0>)
 801afee:	681a      	ldr	r2, [r3, #0]
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aff8:	4b1b      	ldr	r3, [pc, #108]	@ (801b068 <prvAddNewTaskToReadyList+0xd4>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	429a      	cmp	r2, r3
 801affe:	d903      	bls.n	801b008 <prvAddNewTaskToReadyList+0x74>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b004:	4a18      	ldr	r2, [pc, #96]	@ (801b068 <prvAddNewTaskToReadyList+0xd4>)
 801b006:	6013      	str	r3, [r2, #0]
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b00c:	4613      	mov	r3, r2
 801b00e:	009b      	lsls	r3, r3, #2
 801b010:	4413      	add	r3, r2
 801b012:	009b      	lsls	r3, r3, #2
 801b014:	4a15      	ldr	r2, [pc, #84]	@ (801b06c <prvAddNewTaskToReadyList+0xd8>)
 801b016:	441a      	add	r2, r3
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	3304      	adds	r3, #4
 801b01c:	4619      	mov	r1, r3
 801b01e:	4610      	mov	r0, r2
 801b020:	f7fe fe0d 	bl	8019c3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b024:	f001 fd8a 	bl	801cb3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b028:	4b0d      	ldr	r3, [pc, #52]	@ (801b060 <prvAddNewTaskToReadyList+0xcc>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d00e      	beq.n	801b04e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b030:	4b0a      	ldr	r3, [pc, #40]	@ (801b05c <prvAddNewTaskToReadyList+0xc8>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b03a:	429a      	cmp	r2, r3
 801b03c:	d207      	bcs.n	801b04e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b03e:	4b0c      	ldr	r3, [pc, #48]	@ (801b070 <prvAddNewTaskToReadyList+0xdc>)
 801b040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b044:	601a      	str	r2, [r3, #0]
 801b046:	f3bf 8f4f 	dsb	sy
 801b04a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b04e:	bf00      	nop
 801b050:	3708      	adds	r7, #8
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}
 801b056:	bf00      	nop
 801b058:	20001e4c 	.word	0x20001e4c
 801b05c:	20001978 	.word	0x20001978
 801b060:	20001e58 	.word	0x20001e58
 801b064:	20001e68 	.word	0x20001e68
 801b068:	20001e54 	.word	0x20001e54
 801b06c:	2000197c 	.word	0x2000197c
 801b070:	e000ed04 	.word	0xe000ed04

0801b074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b074:	b580      	push	{r7, lr}
 801b076:	b084      	sub	sp, #16
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b07c:	2300      	movs	r3, #0
 801b07e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d018      	beq.n	801b0b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b086:	4b14      	ldr	r3, [pc, #80]	@ (801b0d8 <vTaskDelay+0x64>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d00b      	beq.n	801b0a6 <vTaskDelay+0x32>
	__asm volatile
 801b08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b092:	f383 8811 	msr	BASEPRI, r3
 801b096:	f3bf 8f6f 	isb	sy
 801b09a:	f3bf 8f4f 	dsb	sy
 801b09e:	60bb      	str	r3, [r7, #8]
}
 801b0a0:	bf00      	nop
 801b0a2:	bf00      	nop
 801b0a4:	e7fd      	b.n	801b0a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b0a6:	f000 f88b 	bl	801b1c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	6878      	ldr	r0, [r7, #4]
 801b0ae:	f001 f833 	bl	801c118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b0b2:	f000 f893 	bl	801b1dc <xTaskResumeAll>
 801b0b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d107      	bne.n	801b0ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801b0be:	4b07      	ldr	r3, [pc, #28]	@ (801b0dc <vTaskDelay+0x68>)
 801b0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b0c4:	601a      	str	r2, [r3, #0]
 801b0c6:	f3bf 8f4f 	dsb	sy
 801b0ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b0ce:	bf00      	nop
 801b0d0:	3710      	adds	r7, #16
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	20001e74 	.word	0x20001e74
 801b0dc:	e000ed04 	.word	0xe000ed04

0801b0e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b08a      	sub	sp, #40	@ 0x28
 801b0e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b0ee:	463a      	mov	r2, r7
 801b0f0:	1d39      	adds	r1, r7, #4
 801b0f2:	f107 0308 	add.w	r3, r7, #8
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7fe fd40 	bl	8019b7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b0fc:	6839      	ldr	r1, [r7, #0]
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	68ba      	ldr	r2, [r7, #8]
 801b102:	9202      	str	r2, [sp, #8]
 801b104:	9301      	str	r3, [sp, #4]
 801b106:	2300      	movs	r3, #0
 801b108:	9300      	str	r3, [sp, #0]
 801b10a:	2300      	movs	r3, #0
 801b10c:	460a      	mov	r2, r1
 801b10e:	4924      	ldr	r1, [pc, #144]	@ (801b1a0 <vTaskStartScheduler+0xc0>)
 801b110:	4824      	ldr	r0, [pc, #144]	@ (801b1a4 <vTaskStartScheduler+0xc4>)
 801b112:	f7ff fdf1 	bl	801acf8 <xTaskCreateStatic>
 801b116:	4603      	mov	r3, r0
 801b118:	4a23      	ldr	r2, [pc, #140]	@ (801b1a8 <vTaskStartScheduler+0xc8>)
 801b11a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b11c:	4b22      	ldr	r3, [pc, #136]	@ (801b1a8 <vTaskStartScheduler+0xc8>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d002      	beq.n	801b12a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b124:	2301      	movs	r3, #1
 801b126:	617b      	str	r3, [r7, #20]
 801b128:	e001      	b.n	801b12e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b12a:	2300      	movs	r3, #0
 801b12c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	2b01      	cmp	r3, #1
 801b132:	d102      	bne.n	801b13a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b134:	f001 f844 	bl	801c1c0 <xTimerCreateTimerTask>
 801b138:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b13a:	697b      	ldr	r3, [r7, #20]
 801b13c:	2b01      	cmp	r3, #1
 801b13e:	d11b      	bne.n	801b178 <vTaskStartScheduler+0x98>
	__asm volatile
 801b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b144:	f383 8811 	msr	BASEPRI, r3
 801b148:	f3bf 8f6f 	isb	sy
 801b14c:	f3bf 8f4f 	dsb	sy
 801b150:	613b      	str	r3, [r7, #16]
}
 801b152:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b154:	4b15      	ldr	r3, [pc, #84]	@ (801b1ac <vTaskStartScheduler+0xcc>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	3354      	adds	r3, #84	@ 0x54
 801b15a:	4a15      	ldr	r2, [pc, #84]	@ (801b1b0 <vTaskStartScheduler+0xd0>)
 801b15c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b15e:	4b15      	ldr	r3, [pc, #84]	@ (801b1b4 <vTaskStartScheduler+0xd4>)
 801b160:	f04f 32ff 	mov.w	r2, #4294967295
 801b164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b166:	4b14      	ldr	r3, [pc, #80]	@ (801b1b8 <vTaskStartScheduler+0xd8>)
 801b168:	2201      	movs	r2, #1
 801b16a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b16c:	4b13      	ldr	r3, [pc, #76]	@ (801b1bc <vTaskStartScheduler+0xdc>)
 801b16e:	2200      	movs	r2, #0
 801b170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b172:	f001 fc0d 	bl	801c990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b176:	e00f      	b.n	801b198 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b178:	697b      	ldr	r3, [r7, #20]
 801b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b17e:	d10b      	bne.n	801b198 <vTaskStartScheduler+0xb8>
	__asm volatile
 801b180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b184:	f383 8811 	msr	BASEPRI, r3
 801b188:	f3bf 8f6f 	isb	sy
 801b18c:	f3bf 8f4f 	dsb	sy
 801b190:	60fb      	str	r3, [r7, #12]
}
 801b192:	bf00      	nop
 801b194:	bf00      	nop
 801b196:	e7fd      	b.n	801b194 <vTaskStartScheduler+0xb4>
}
 801b198:	bf00      	nop
 801b19a:	3718      	adds	r7, #24
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bd80      	pop	{r7, pc}
 801b1a0:	0801eb60 	.word	0x0801eb60
 801b1a4:	0801b815 	.word	0x0801b815
 801b1a8:	20001e70 	.word	0x20001e70
 801b1ac:	20001978 	.word	0x20001978
 801b1b0:	20000088 	.word	0x20000088
 801b1b4:	20001e6c 	.word	0x20001e6c
 801b1b8:	20001e58 	.word	0x20001e58
 801b1bc:	20001e50 	.word	0x20001e50

0801b1c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b1c0:	b480      	push	{r7}
 801b1c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b1c4:	4b04      	ldr	r3, [pc, #16]	@ (801b1d8 <vTaskSuspendAll+0x18>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	4a03      	ldr	r2, [pc, #12]	@ (801b1d8 <vTaskSuspendAll+0x18>)
 801b1cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b1ce:	bf00      	nop
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d6:	4770      	bx	lr
 801b1d8:	20001e74 	.word	0x20001e74

0801b1dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b084      	sub	sp, #16
 801b1e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b1ea:	4b42      	ldr	r3, [pc, #264]	@ (801b2f4 <xTaskResumeAll+0x118>)
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d10b      	bne.n	801b20a <xTaskResumeAll+0x2e>
	__asm volatile
 801b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1f6:	f383 8811 	msr	BASEPRI, r3
 801b1fa:	f3bf 8f6f 	isb	sy
 801b1fe:	f3bf 8f4f 	dsb	sy
 801b202:	603b      	str	r3, [r7, #0]
}
 801b204:	bf00      	nop
 801b206:	bf00      	nop
 801b208:	e7fd      	b.n	801b206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b20a:	f001 fc65 	bl	801cad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b20e:	4b39      	ldr	r3, [pc, #228]	@ (801b2f4 <xTaskResumeAll+0x118>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	3b01      	subs	r3, #1
 801b214:	4a37      	ldr	r2, [pc, #220]	@ (801b2f4 <xTaskResumeAll+0x118>)
 801b216:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b218:	4b36      	ldr	r3, [pc, #216]	@ (801b2f4 <xTaskResumeAll+0x118>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d162      	bne.n	801b2e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b220:	4b35      	ldr	r3, [pc, #212]	@ (801b2f8 <xTaskResumeAll+0x11c>)
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d05e      	beq.n	801b2e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b228:	e02f      	b.n	801b28a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b22a:	4b34      	ldr	r3, [pc, #208]	@ (801b2fc <xTaskResumeAll+0x120>)
 801b22c:	68db      	ldr	r3, [r3, #12]
 801b22e:	68db      	ldr	r3, [r3, #12]
 801b230:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	3318      	adds	r3, #24
 801b236:	4618      	mov	r0, r3
 801b238:	f7fe fd5e 	bl	8019cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	3304      	adds	r3, #4
 801b240:	4618      	mov	r0, r3
 801b242:	f7fe fd59 	bl	8019cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b24a:	4b2d      	ldr	r3, [pc, #180]	@ (801b300 <xTaskResumeAll+0x124>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	429a      	cmp	r2, r3
 801b250:	d903      	bls.n	801b25a <xTaskResumeAll+0x7e>
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b256:	4a2a      	ldr	r2, [pc, #168]	@ (801b300 <xTaskResumeAll+0x124>)
 801b258:	6013      	str	r3, [r2, #0]
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b25e:	4613      	mov	r3, r2
 801b260:	009b      	lsls	r3, r3, #2
 801b262:	4413      	add	r3, r2
 801b264:	009b      	lsls	r3, r3, #2
 801b266:	4a27      	ldr	r2, [pc, #156]	@ (801b304 <xTaskResumeAll+0x128>)
 801b268:	441a      	add	r2, r3
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	3304      	adds	r3, #4
 801b26e:	4619      	mov	r1, r3
 801b270:	4610      	mov	r0, r2
 801b272:	f7fe fce4 	bl	8019c3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b27a:	4b23      	ldr	r3, [pc, #140]	@ (801b308 <xTaskResumeAll+0x12c>)
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b280:	429a      	cmp	r2, r3
 801b282:	d302      	bcc.n	801b28a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801b284:	4b21      	ldr	r3, [pc, #132]	@ (801b30c <xTaskResumeAll+0x130>)
 801b286:	2201      	movs	r2, #1
 801b288:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b28a:	4b1c      	ldr	r3, [pc, #112]	@ (801b2fc <xTaskResumeAll+0x120>)
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d1cb      	bne.n	801b22a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d001      	beq.n	801b29c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b298:	f000 fb78 	bl	801b98c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b29c:	4b1c      	ldr	r3, [pc, #112]	@ (801b310 <xTaskResumeAll+0x134>)
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d010      	beq.n	801b2ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b2a8:	f000 f858 	bl	801b35c <xTaskIncrementTick>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d002      	beq.n	801b2b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801b2b2:	4b16      	ldr	r3, [pc, #88]	@ (801b30c <xTaskResumeAll+0x130>)
 801b2b4:	2201      	movs	r2, #1
 801b2b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d1f1      	bne.n	801b2a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801b2c4:	4b12      	ldr	r3, [pc, #72]	@ (801b310 <xTaskResumeAll+0x134>)
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b2ca:	4b10      	ldr	r3, [pc, #64]	@ (801b30c <xTaskResumeAll+0x130>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d009      	beq.n	801b2e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b2d6:	4b0f      	ldr	r3, [pc, #60]	@ (801b314 <xTaskResumeAll+0x138>)
 801b2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b2dc:	601a      	str	r2, [r3, #0]
 801b2de:	f3bf 8f4f 	dsb	sy
 801b2e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b2e6:	f001 fc29 	bl	801cb3c <vPortExitCritical>

	return xAlreadyYielded;
 801b2ea:	68bb      	ldr	r3, [r7, #8]
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3710      	adds	r7, #16
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	20001e74 	.word	0x20001e74
 801b2f8:	20001e4c 	.word	0x20001e4c
 801b2fc:	20001e0c 	.word	0x20001e0c
 801b300:	20001e54 	.word	0x20001e54
 801b304:	2000197c 	.word	0x2000197c
 801b308:	20001978 	.word	0x20001978
 801b30c:	20001e60 	.word	0x20001e60
 801b310:	20001e5c 	.word	0x20001e5c
 801b314:	e000ed04 	.word	0xe000ed04

0801b318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b318:	b480      	push	{r7}
 801b31a:	b083      	sub	sp, #12
 801b31c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b31e:	4b05      	ldr	r3, [pc, #20]	@ (801b334 <xTaskGetTickCount+0x1c>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b324:	687b      	ldr	r3, [r7, #4]
}
 801b326:	4618      	mov	r0, r3
 801b328:	370c      	adds	r7, #12
 801b32a:	46bd      	mov	sp, r7
 801b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b330:	4770      	bx	lr
 801b332:	bf00      	nop
 801b334:	20001e50 	.word	0x20001e50

0801b338 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b082      	sub	sp, #8
 801b33c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b33e:	f001 fcab 	bl	801cc98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801b342:	2300      	movs	r3, #0
 801b344:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801b346:	4b04      	ldr	r3, [pc, #16]	@ (801b358 <xTaskGetTickCountFromISR+0x20>)
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b34c:	683b      	ldr	r3, [r7, #0]
}
 801b34e:	4618      	mov	r0, r3
 801b350:	3708      	adds	r7, #8
 801b352:	46bd      	mov	sp, r7
 801b354:	bd80      	pop	{r7, pc}
 801b356:	bf00      	nop
 801b358:	20001e50 	.word	0x20001e50

0801b35c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b086      	sub	sp, #24
 801b360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b362:	2300      	movs	r3, #0
 801b364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b366:	4b4f      	ldr	r3, [pc, #316]	@ (801b4a4 <xTaskIncrementTick+0x148>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	f040 8090 	bne.w	801b490 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b370:	4b4d      	ldr	r3, [pc, #308]	@ (801b4a8 <xTaskIncrementTick+0x14c>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	3301      	adds	r3, #1
 801b376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b378:	4a4b      	ldr	r2, [pc, #300]	@ (801b4a8 <xTaskIncrementTick+0x14c>)
 801b37a:	693b      	ldr	r3, [r7, #16]
 801b37c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b37e:	693b      	ldr	r3, [r7, #16]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d121      	bne.n	801b3c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801b384:	4b49      	ldr	r3, [pc, #292]	@ (801b4ac <xTaskIncrementTick+0x150>)
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d00b      	beq.n	801b3a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 801b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b392:	f383 8811 	msr	BASEPRI, r3
 801b396:	f3bf 8f6f 	isb	sy
 801b39a:	f3bf 8f4f 	dsb	sy
 801b39e:	603b      	str	r3, [r7, #0]
}
 801b3a0:	bf00      	nop
 801b3a2:	bf00      	nop
 801b3a4:	e7fd      	b.n	801b3a2 <xTaskIncrementTick+0x46>
 801b3a6:	4b41      	ldr	r3, [pc, #260]	@ (801b4ac <xTaskIncrementTick+0x150>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	60fb      	str	r3, [r7, #12]
 801b3ac:	4b40      	ldr	r3, [pc, #256]	@ (801b4b0 <xTaskIncrementTick+0x154>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	4a3e      	ldr	r2, [pc, #248]	@ (801b4ac <xTaskIncrementTick+0x150>)
 801b3b2:	6013      	str	r3, [r2, #0]
 801b3b4:	4a3e      	ldr	r2, [pc, #248]	@ (801b4b0 <xTaskIncrementTick+0x154>)
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	6013      	str	r3, [r2, #0]
 801b3ba:	4b3e      	ldr	r3, [pc, #248]	@ (801b4b4 <xTaskIncrementTick+0x158>)
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	3301      	adds	r3, #1
 801b3c0:	4a3c      	ldr	r2, [pc, #240]	@ (801b4b4 <xTaskIncrementTick+0x158>)
 801b3c2:	6013      	str	r3, [r2, #0]
 801b3c4:	f000 fae2 	bl	801b98c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b3c8:	4b3b      	ldr	r3, [pc, #236]	@ (801b4b8 <xTaskIncrementTick+0x15c>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	693a      	ldr	r2, [r7, #16]
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d349      	bcc.n	801b466 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b3d2:	4b36      	ldr	r3, [pc, #216]	@ (801b4ac <xTaskIncrementTick+0x150>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d104      	bne.n	801b3e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b3dc:	4b36      	ldr	r3, [pc, #216]	@ (801b4b8 <xTaskIncrementTick+0x15c>)
 801b3de:	f04f 32ff 	mov.w	r2, #4294967295
 801b3e2:	601a      	str	r2, [r3, #0]
					break;
 801b3e4:	e03f      	b.n	801b466 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3e6:	4b31      	ldr	r3, [pc, #196]	@ (801b4ac <xTaskIncrementTick+0x150>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	68db      	ldr	r3, [r3, #12]
 801b3ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	685b      	ldr	r3, [r3, #4]
 801b3f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b3f6:	693a      	ldr	r2, [r7, #16]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	429a      	cmp	r2, r3
 801b3fc:	d203      	bcs.n	801b406 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b3fe:	4a2e      	ldr	r2, [pc, #184]	@ (801b4b8 <xTaskIncrementTick+0x15c>)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b404:	e02f      	b.n	801b466 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	3304      	adds	r3, #4
 801b40a:	4618      	mov	r0, r3
 801b40c:	f7fe fc74 	bl	8019cf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b410:	68bb      	ldr	r3, [r7, #8]
 801b412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b414:	2b00      	cmp	r3, #0
 801b416:	d004      	beq.n	801b422 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b418:	68bb      	ldr	r3, [r7, #8]
 801b41a:	3318      	adds	r3, #24
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7fe fc6b 	bl	8019cf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b422:	68bb      	ldr	r3, [r7, #8]
 801b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b426:	4b25      	ldr	r3, [pc, #148]	@ (801b4bc <xTaskIncrementTick+0x160>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	429a      	cmp	r2, r3
 801b42c:	d903      	bls.n	801b436 <xTaskIncrementTick+0xda>
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b432:	4a22      	ldr	r2, [pc, #136]	@ (801b4bc <xTaskIncrementTick+0x160>)
 801b434:	6013      	str	r3, [r2, #0]
 801b436:	68bb      	ldr	r3, [r7, #8]
 801b438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b43a:	4613      	mov	r3, r2
 801b43c:	009b      	lsls	r3, r3, #2
 801b43e:	4413      	add	r3, r2
 801b440:	009b      	lsls	r3, r3, #2
 801b442:	4a1f      	ldr	r2, [pc, #124]	@ (801b4c0 <xTaskIncrementTick+0x164>)
 801b444:	441a      	add	r2, r3
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	3304      	adds	r3, #4
 801b44a:	4619      	mov	r1, r3
 801b44c:	4610      	mov	r0, r2
 801b44e:	f7fe fbf6 	bl	8019c3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b456:	4b1b      	ldr	r3, [pc, #108]	@ (801b4c4 <xTaskIncrementTick+0x168>)
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b45c:	429a      	cmp	r2, r3
 801b45e:	d3b8      	bcc.n	801b3d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801b460:	2301      	movs	r3, #1
 801b462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b464:	e7b5      	b.n	801b3d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b466:	4b17      	ldr	r3, [pc, #92]	@ (801b4c4 <xTaskIncrementTick+0x168>)
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b46c:	4914      	ldr	r1, [pc, #80]	@ (801b4c0 <xTaskIncrementTick+0x164>)
 801b46e:	4613      	mov	r3, r2
 801b470:	009b      	lsls	r3, r3, #2
 801b472:	4413      	add	r3, r2
 801b474:	009b      	lsls	r3, r3, #2
 801b476:	440b      	add	r3, r1
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	d901      	bls.n	801b482 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801b47e:	2301      	movs	r3, #1
 801b480:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b482:	4b11      	ldr	r3, [pc, #68]	@ (801b4c8 <xTaskIncrementTick+0x16c>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d007      	beq.n	801b49a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801b48a:	2301      	movs	r3, #1
 801b48c:	617b      	str	r3, [r7, #20]
 801b48e:	e004      	b.n	801b49a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b490:	4b0e      	ldr	r3, [pc, #56]	@ (801b4cc <xTaskIncrementTick+0x170>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	3301      	adds	r3, #1
 801b496:	4a0d      	ldr	r2, [pc, #52]	@ (801b4cc <xTaskIncrementTick+0x170>)
 801b498:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b49a:	697b      	ldr	r3, [r7, #20]
}
 801b49c:	4618      	mov	r0, r3
 801b49e:	3718      	adds	r7, #24
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	20001e74 	.word	0x20001e74
 801b4a8:	20001e50 	.word	0x20001e50
 801b4ac:	20001e04 	.word	0x20001e04
 801b4b0:	20001e08 	.word	0x20001e08
 801b4b4:	20001e64 	.word	0x20001e64
 801b4b8:	20001e6c 	.word	0x20001e6c
 801b4bc:	20001e54 	.word	0x20001e54
 801b4c0:	2000197c 	.word	0x2000197c
 801b4c4:	20001978 	.word	0x20001978
 801b4c8:	20001e60 	.word	0x20001e60
 801b4cc:	20001e5c 	.word	0x20001e5c

0801b4d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b4d0:	b480      	push	{r7}
 801b4d2:	b085      	sub	sp, #20
 801b4d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b4d6:	4b2b      	ldr	r3, [pc, #172]	@ (801b584 <vTaskSwitchContext+0xb4>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d003      	beq.n	801b4e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b4de:	4b2a      	ldr	r3, [pc, #168]	@ (801b588 <vTaskSwitchContext+0xb8>)
 801b4e0:	2201      	movs	r2, #1
 801b4e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b4e4:	e047      	b.n	801b576 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801b4e6:	4b28      	ldr	r3, [pc, #160]	@ (801b588 <vTaskSwitchContext+0xb8>)
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b4ec:	4b27      	ldr	r3, [pc, #156]	@ (801b58c <vTaskSwitchContext+0xbc>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	60fb      	str	r3, [r7, #12]
 801b4f2:	e011      	b.n	801b518 <vTaskSwitchContext+0x48>
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d10b      	bne.n	801b512 <vTaskSwitchContext+0x42>
	__asm volatile
 801b4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b4fe:	f383 8811 	msr	BASEPRI, r3
 801b502:	f3bf 8f6f 	isb	sy
 801b506:	f3bf 8f4f 	dsb	sy
 801b50a:	607b      	str	r3, [r7, #4]
}
 801b50c:	bf00      	nop
 801b50e:	bf00      	nop
 801b510:	e7fd      	b.n	801b50e <vTaskSwitchContext+0x3e>
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	3b01      	subs	r3, #1
 801b516:	60fb      	str	r3, [r7, #12]
 801b518:	491d      	ldr	r1, [pc, #116]	@ (801b590 <vTaskSwitchContext+0xc0>)
 801b51a:	68fa      	ldr	r2, [r7, #12]
 801b51c:	4613      	mov	r3, r2
 801b51e:	009b      	lsls	r3, r3, #2
 801b520:	4413      	add	r3, r2
 801b522:	009b      	lsls	r3, r3, #2
 801b524:	440b      	add	r3, r1
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d0e3      	beq.n	801b4f4 <vTaskSwitchContext+0x24>
 801b52c:	68fa      	ldr	r2, [r7, #12]
 801b52e:	4613      	mov	r3, r2
 801b530:	009b      	lsls	r3, r3, #2
 801b532:	4413      	add	r3, r2
 801b534:	009b      	lsls	r3, r3, #2
 801b536:	4a16      	ldr	r2, [pc, #88]	@ (801b590 <vTaskSwitchContext+0xc0>)
 801b538:	4413      	add	r3, r2
 801b53a:	60bb      	str	r3, [r7, #8]
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	685b      	ldr	r3, [r3, #4]
 801b540:	685a      	ldr	r2, [r3, #4]
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	605a      	str	r2, [r3, #4]
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	685a      	ldr	r2, [r3, #4]
 801b54a:	68bb      	ldr	r3, [r7, #8]
 801b54c:	3308      	adds	r3, #8
 801b54e:	429a      	cmp	r2, r3
 801b550:	d104      	bne.n	801b55c <vTaskSwitchContext+0x8c>
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	685b      	ldr	r3, [r3, #4]
 801b556:	685a      	ldr	r2, [r3, #4]
 801b558:	68bb      	ldr	r3, [r7, #8]
 801b55a:	605a      	str	r2, [r3, #4]
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	685b      	ldr	r3, [r3, #4]
 801b560:	68db      	ldr	r3, [r3, #12]
 801b562:	4a0c      	ldr	r2, [pc, #48]	@ (801b594 <vTaskSwitchContext+0xc4>)
 801b564:	6013      	str	r3, [r2, #0]
 801b566:	4a09      	ldr	r2, [pc, #36]	@ (801b58c <vTaskSwitchContext+0xbc>)
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b56c:	4b09      	ldr	r3, [pc, #36]	@ (801b594 <vTaskSwitchContext+0xc4>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	3354      	adds	r3, #84	@ 0x54
 801b572:	4a09      	ldr	r2, [pc, #36]	@ (801b598 <vTaskSwitchContext+0xc8>)
 801b574:	6013      	str	r3, [r2, #0]
}
 801b576:	bf00      	nop
 801b578:	3714      	adds	r7, #20
 801b57a:	46bd      	mov	sp, r7
 801b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b580:	4770      	bx	lr
 801b582:	bf00      	nop
 801b584:	20001e74 	.word	0x20001e74
 801b588:	20001e60 	.word	0x20001e60
 801b58c:	20001e54 	.word	0x20001e54
 801b590:	2000197c 	.word	0x2000197c
 801b594:	20001978 	.word	0x20001978
 801b598:	20000088 	.word	0x20000088

0801b59c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b084      	sub	sp, #16
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
 801b5a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d10b      	bne.n	801b5c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5b0:	f383 8811 	msr	BASEPRI, r3
 801b5b4:	f3bf 8f6f 	isb	sy
 801b5b8:	f3bf 8f4f 	dsb	sy
 801b5bc:	60fb      	str	r3, [r7, #12]
}
 801b5be:	bf00      	nop
 801b5c0:	bf00      	nop
 801b5c2:	e7fd      	b.n	801b5c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b5c4:	4b07      	ldr	r3, [pc, #28]	@ (801b5e4 <vTaskPlaceOnEventList+0x48>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	3318      	adds	r3, #24
 801b5ca:	4619      	mov	r1, r3
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f7fe fb5a 	bl	8019c86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b5d2:	2101      	movs	r1, #1
 801b5d4:	6838      	ldr	r0, [r7, #0]
 801b5d6:	f000 fd9f 	bl	801c118 <prvAddCurrentTaskToDelayedList>
}
 801b5da:	bf00      	nop
 801b5dc:	3710      	adds	r7, #16
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	bd80      	pop	{r7, pc}
 801b5e2:	bf00      	nop
 801b5e4:	20001978 	.word	0x20001978

0801b5e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b086      	sub	sp, #24
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	60f8      	str	r0, [r7, #12]
 801b5f0:	60b9      	str	r1, [r7, #8]
 801b5f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d10b      	bne.n	801b612 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801b5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5fe:	f383 8811 	msr	BASEPRI, r3
 801b602:	f3bf 8f6f 	isb	sy
 801b606:	f3bf 8f4f 	dsb	sy
 801b60a:	617b      	str	r3, [r7, #20]
}
 801b60c:	bf00      	nop
 801b60e:	bf00      	nop
 801b610:	e7fd      	b.n	801b60e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b612:	4b0a      	ldr	r3, [pc, #40]	@ (801b63c <vTaskPlaceOnEventListRestricted+0x54>)
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	3318      	adds	r3, #24
 801b618:	4619      	mov	r1, r3
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f7fe fb0f 	bl	8019c3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d002      	beq.n	801b62c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801b626:	f04f 33ff 	mov.w	r3, #4294967295
 801b62a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b62c:	6879      	ldr	r1, [r7, #4]
 801b62e:	68b8      	ldr	r0, [r7, #8]
 801b630:	f000 fd72 	bl	801c118 <prvAddCurrentTaskToDelayedList>
	}
 801b634:	bf00      	nop
 801b636:	3718      	adds	r7, #24
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}
 801b63c:	20001978 	.word	0x20001978

0801b640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b086      	sub	sp, #24
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	68db      	ldr	r3, [r3, #12]
 801b64c:	68db      	ldr	r3, [r3, #12]
 801b64e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b650:	693b      	ldr	r3, [r7, #16]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d10b      	bne.n	801b66e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b65a:	f383 8811 	msr	BASEPRI, r3
 801b65e:	f3bf 8f6f 	isb	sy
 801b662:	f3bf 8f4f 	dsb	sy
 801b666:	60fb      	str	r3, [r7, #12]
}
 801b668:	bf00      	nop
 801b66a:	bf00      	nop
 801b66c:	e7fd      	b.n	801b66a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b66e:	693b      	ldr	r3, [r7, #16]
 801b670:	3318      	adds	r3, #24
 801b672:	4618      	mov	r0, r3
 801b674:	f7fe fb40 	bl	8019cf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b678:	4b1d      	ldr	r3, [pc, #116]	@ (801b6f0 <xTaskRemoveFromEventList+0xb0>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d11d      	bne.n	801b6bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b680:	693b      	ldr	r3, [r7, #16]
 801b682:	3304      	adds	r3, #4
 801b684:	4618      	mov	r0, r3
 801b686:	f7fe fb37 	bl	8019cf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b68a:	693b      	ldr	r3, [r7, #16]
 801b68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b68e:	4b19      	ldr	r3, [pc, #100]	@ (801b6f4 <xTaskRemoveFromEventList+0xb4>)
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	429a      	cmp	r2, r3
 801b694:	d903      	bls.n	801b69e <xTaskRemoveFromEventList+0x5e>
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b69a:	4a16      	ldr	r2, [pc, #88]	@ (801b6f4 <xTaskRemoveFromEventList+0xb4>)
 801b69c:	6013      	str	r3, [r2, #0]
 801b69e:	693b      	ldr	r3, [r7, #16]
 801b6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b6a2:	4613      	mov	r3, r2
 801b6a4:	009b      	lsls	r3, r3, #2
 801b6a6:	4413      	add	r3, r2
 801b6a8:	009b      	lsls	r3, r3, #2
 801b6aa:	4a13      	ldr	r2, [pc, #76]	@ (801b6f8 <xTaskRemoveFromEventList+0xb8>)
 801b6ac:	441a      	add	r2, r3
 801b6ae:	693b      	ldr	r3, [r7, #16]
 801b6b0:	3304      	adds	r3, #4
 801b6b2:	4619      	mov	r1, r3
 801b6b4:	4610      	mov	r0, r2
 801b6b6:	f7fe fac2 	bl	8019c3e <vListInsertEnd>
 801b6ba:	e005      	b.n	801b6c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	3318      	adds	r3, #24
 801b6c0:	4619      	mov	r1, r3
 801b6c2:	480e      	ldr	r0, [pc, #56]	@ (801b6fc <xTaskRemoveFromEventList+0xbc>)
 801b6c4:	f7fe fabb 	bl	8019c3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b6c8:	693b      	ldr	r3, [r7, #16]
 801b6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b6cc:	4b0c      	ldr	r3, [pc, #48]	@ (801b700 <xTaskRemoveFromEventList+0xc0>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6d2:	429a      	cmp	r2, r3
 801b6d4:	d905      	bls.n	801b6e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b6d6:	2301      	movs	r3, #1
 801b6d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b6da:	4b0a      	ldr	r3, [pc, #40]	@ (801b704 <xTaskRemoveFromEventList+0xc4>)
 801b6dc:	2201      	movs	r2, #1
 801b6de:	601a      	str	r2, [r3, #0]
 801b6e0:	e001      	b.n	801b6e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b6e6:	697b      	ldr	r3, [r7, #20]
}
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	3718      	adds	r7, #24
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	bd80      	pop	{r7, pc}
 801b6f0:	20001e74 	.word	0x20001e74
 801b6f4:	20001e54 	.word	0x20001e54
 801b6f8:	2000197c 	.word	0x2000197c
 801b6fc:	20001e0c 	.word	0x20001e0c
 801b700:	20001978 	.word	0x20001978
 801b704:	20001e60 	.word	0x20001e60

0801b708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b708:	b480      	push	{r7}
 801b70a:	b083      	sub	sp, #12
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b710:	4b06      	ldr	r3, [pc, #24]	@ (801b72c <vTaskInternalSetTimeOutState+0x24>)
 801b712:	681a      	ldr	r2, [r3, #0]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b718:	4b05      	ldr	r3, [pc, #20]	@ (801b730 <vTaskInternalSetTimeOutState+0x28>)
 801b71a:	681a      	ldr	r2, [r3, #0]
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	605a      	str	r2, [r3, #4]
}
 801b720:	bf00      	nop
 801b722:	370c      	adds	r7, #12
 801b724:	46bd      	mov	sp, r7
 801b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72a:	4770      	bx	lr
 801b72c:	20001e64 	.word	0x20001e64
 801b730:	20001e50 	.word	0x20001e50

0801b734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b734:	b580      	push	{r7, lr}
 801b736:	b088      	sub	sp, #32
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d10b      	bne.n	801b75c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b748:	f383 8811 	msr	BASEPRI, r3
 801b74c:	f3bf 8f6f 	isb	sy
 801b750:	f3bf 8f4f 	dsb	sy
 801b754:	613b      	str	r3, [r7, #16]
}
 801b756:	bf00      	nop
 801b758:	bf00      	nop
 801b75a:	e7fd      	b.n	801b758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b75c:	683b      	ldr	r3, [r7, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d10b      	bne.n	801b77a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b766:	f383 8811 	msr	BASEPRI, r3
 801b76a:	f3bf 8f6f 	isb	sy
 801b76e:	f3bf 8f4f 	dsb	sy
 801b772:	60fb      	str	r3, [r7, #12]
}
 801b774:	bf00      	nop
 801b776:	bf00      	nop
 801b778:	e7fd      	b.n	801b776 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b77a:	f001 f9ad 	bl	801cad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b77e:	4b1d      	ldr	r3, [pc, #116]	@ (801b7f4 <xTaskCheckForTimeOut+0xc0>)
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	685b      	ldr	r3, [r3, #4]
 801b788:	69ba      	ldr	r2, [r7, #24]
 801b78a:	1ad3      	subs	r3, r2, r3
 801b78c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b796:	d102      	bne.n	801b79e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b798:	2300      	movs	r3, #0
 801b79a:	61fb      	str	r3, [r7, #28]
 801b79c:	e023      	b.n	801b7e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681a      	ldr	r2, [r3, #0]
 801b7a2:	4b15      	ldr	r3, [pc, #84]	@ (801b7f8 <xTaskCheckForTimeOut+0xc4>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d007      	beq.n	801b7ba <xTaskCheckForTimeOut+0x86>
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	69ba      	ldr	r2, [r7, #24]
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d302      	bcc.n	801b7ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b7b4:	2301      	movs	r3, #1
 801b7b6:	61fb      	str	r3, [r7, #28]
 801b7b8:	e015      	b.n	801b7e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	697a      	ldr	r2, [r7, #20]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d20b      	bcs.n	801b7dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b7c4:	683b      	ldr	r3, [r7, #0]
 801b7c6:	681a      	ldr	r2, [r3, #0]
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	1ad2      	subs	r2, r2, r3
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	f7ff ff99 	bl	801b708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	61fb      	str	r3, [r7, #28]
 801b7da:	e004      	b.n	801b7e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	2200      	movs	r2, #0
 801b7e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b7e6:	f001 f9a9 	bl	801cb3c <vPortExitCritical>

	return xReturn;
 801b7ea:	69fb      	ldr	r3, [r7, #28]
}
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	3720      	adds	r7, #32
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	bd80      	pop	{r7, pc}
 801b7f4:	20001e50 	.word	0x20001e50
 801b7f8:	20001e64 	.word	0x20001e64

0801b7fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b7fc:	b480      	push	{r7}
 801b7fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b800:	4b03      	ldr	r3, [pc, #12]	@ (801b810 <vTaskMissedYield+0x14>)
 801b802:	2201      	movs	r2, #1
 801b804:	601a      	str	r2, [r3, #0]
}
 801b806:	bf00      	nop
 801b808:	46bd      	mov	sp, r7
 801b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80e:	4770      	bx	lr
 801b810:	20001e60 	.word	0x20001e60

0801b814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b082      	sub	sp, #8
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b81c:	f000 f852 	bl	801b8c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b820:	4b06      	ldr	r3, [pc, #24]	@ (801b83c <prvIdleTask+0x28>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	2b01      	cmp	r3, #1
 801b826:	d9f9      	bls.n	801b81c <prvIdleTask+0x8>
			{
				taskYIELD();
 801b828:	4b05      	ldr	r3, [pc, #20]	@ (801b840 <prvIdleTask+0x2c>)
 801b82a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b82e:	601a      	str	r2, [r3, #0]
 801b830:	f3bf 8f4f 	dsb	sy
 801b834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b838:	e7f0      	b.n	801b81c <prvIdleTask+0x8>
 801b83a:	bf00      	nop
 801b83c:	2000197c 	.word	0x2000197c
 801b840:	e000ed04 	.word	0xe000ed04

0801b844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b082      	sub	sp, #8
 801b848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b84a:	2300      	movs	r3, #0
 801b84c:	607b      	str	r3, [r7, #4]
 801b84e:	e00c      	b.n	801b86a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	4613      	mov	r3, r2
 801b854:	009b      	lsls	r3, r3, #2
 801b856:	4413      	add	r3, r2
 801b858:	009b      	lsls	r3, r3, #2
 801b85a:	4a12      	ldr	r2, [pc, #72]	@ (801b8a4 <prvInitialiseTaskLists+0x60>)
 801b85c:	4413      	add	r3, r2
 801b85e:	4618      	mov	r0, r3
 801b860:	f7fe f9c0 	bl	8019be4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	3301      	adds	r3, #1
 801b868:	607b      	str	r3, [r7, #4]
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	2b37      	cmp	r3, #55	@ 0x37
 801b86e:	d9ef      	bls.n	801b850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b870:	480d      	ldr	r0, [pc, #52]	@ (801b8a8 <prvInitialiseTaskLists+0x64>)
 801b872:	f7fe f9b7 	bl	8019be4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b876:	480d      	ldr	r0, [pc, #52]	@ (801b8ac <prvInitialiseTaskLists+0x68>)
 801b878:	f7fe f9b4 	bl	8019be4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b87c:	480c      	ldr	r0, [pc, #48]	@ (801b8b0 <prvInitialiseTaskLists+0x6c>)
 801b87e:	f7fe f9b1 	bl	8019be4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b882:	480c      	ldr	r0, [pc, #48]	@ (801b8b4 <prvInitialiseTaskLists+0x70>)
 801b884:	f7fe f9ae 	bl	8019be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b888:	480b      	ldr	r0, [pc, #44]	@ (801b8b8 <prvInitialiseTaskLists+0x74>)
 801b88a:	f7fe f9ab 	bl	8019be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b88e:	4b0b      	ldr	r3, [pc, #44]	@ (801b8bc <prvInitialiseTaskLists+0x78>)
 801b890:	4a05      	ldr	r2, [pc, #20]	@ (801b8a8 <prvInitialiseTaskLists+0x64>)
 801b892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b894:	4b0a      	ldr	r3, [pc, #40]	@ (801b8c0 <prvInitialiseTaskLists+0x7c>)
 801b896:	4a05      	ldr	r2, [pc, #20]	@ (801b8ac <prvInitialiseTaskLists+0x68>)
 801b898:	601a      	str	r2, [r3, #0]
}
 801b89a:	bf00      	nop
 801b89c:	3708      	adds	r7, #8
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	bd80      	pop	{r7, pc}
 801b8a2:	bf00      	nop
 801b8a4:	2000197c 	.word	0x2000197c
 801b8a8:	20001ddc 	.word	0x20001ddc
 801b8ac:	20001df0 	.word	0x20001df0
 801b8b0:	20001e0c 	.word	0x20001e0c
 801b8b4:	20001e20 	.word	0x20001e20
 801b8b8:	20001e38 	.word	0x20001e38
 801b8bc:	20001e04 	.word	0x20001e04
 801b8c0:	20001e08 	.word	0x20001e08

0801b8c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b082      	sub	sp, #8
 801b8c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b8ca:	e019      	b.n	801b900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b8cc:	f001 f904 	bl	801cad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b8d0:	4b10      	ldr	r3, [pc, #64]	@ (801b914 <prvCheckTasksWaitingTermination+0x50>)
 801b8d2:	68db      	ldr	r3, [r3, #12]
 801b8d4:	68db      	ldr	r3, [r3, #12]
 801b8d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	3304      	adds	r3, #4
 801b8dc:	4618      	mov	r0, r3
 801b8de:	f7fe fa0b 	bl	8019cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b8e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b918 <prvCheckTasksWaitingTermination+0x54>)
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	3b01      	subs	r3, #1
 801b8e8:	4a0b      	ldr	r2, [pc, #44]	@ (801b918 <prvCheckTasksWaitingTermination+0x54>)
 801b8ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b8ec:	4b0b      	ldr	r3, [pc, #44]	@ (801b91c <prvCheckTasksWaitingTermination+0x58>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	3b01      	subs	r3, #1
 801b8f2:	4a0a      	ldr	r2, [pc, #40]	@ (801b91c <prvCheckTasksWaitingTermination+0x58>)
 801b8f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b8f6:	f001 f921 	bl	801cb3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b8fa:	6878      	ldr	r0, [r7, #4]
 801b8fc:	f000 f810 	bl	801b920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b900:	4b06      	ldr	r3, [pc, #24]	@ (801b91c <prvCheckTasksWaitingTermination+0x58>)
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d1e1      	bne.n	801b8cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b908:	bf00      	nop
 801b90a:	bf00      	nop
 801b90c:	3708      	adds	r7, #8
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd80      	pop	{r7, pc}
 801b912:	bf00      	nop
 801b914:	20001e20 	.word	0x20001e20
 801b918:	20001e4c 	.word	0x20001e4c
 801b91c:	20001e34 	.word	0x20001e34

0801b920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	3354      	adds	r3, #84	@ 0x54
 801b92c:	4618      	mov	r0, r3
 801b92e:	f001 ffbf 	bl	801d8b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d108      	bne.n	801b94e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b940:	4618      	mov	r0, r3
 801b942:	f001 fab9 	bl	801ceb8 <vPortFree>
				vPortFree( pxTCB );
 801b946:	6878      	ldr	r0, [r7, #4]
 801b948:	f001 fab6 	bl	801ceb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b94c:	e019      	b.n	801b982 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b954:	2b01      	cmp	r3, #1
 801b956:	d103      	bne.n	801b960 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f001 faad 	bl	801ceb8 <vPortFree>
	}
 801b95e:	e010      	b.n	801b982 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b966:	2b02      	cmp	r3, #2
 801b968:	d00b      	beq.n	801b982 <prvDeleteTCB+0x62>
	__asm volatile
 801b96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b96e:	f383 8811 	msr	BASEPRI, r3
 801b972:	f3bf 8f6f 	isb	sy
 801b976:	f3bf 8f4f 	dsb	sy
 801b97a:	60fb      	str	r3, [r7, #12]
}
 801b97c:	bf00      	nop
 801b97e:	bf00      	nop
 801b980:	e7fd      	b.n	801b97e <prvDeleteTCB+0x5e>
	}
 801b982:	bf00      	nop
 801b984:	3710      	adds	r7, #16
 801b986:	46bd      	mov	sp, r7
 801b988:	bd80      	pop	{r7, pc}
	...

0801b98c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b98c:	b480      	push	{r7}
 801b98e:	b083      	sub	sp, #12
 801b990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b992:	4b0c      	ldr	r3, [pc, #48]	@ (801b9c4 <prvResetNextTaskUnblockTime+0x38>)
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d104      	bne.n	801b9a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b99c:	4b0a      	ldr	r3, [pc, #40]	@ (801b9c8 <prvResetNextTaskUnblockTime+0x3c>)
 801b99e:	f04f 32ff 	mov.w	r2, #4294967295
 801b9a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b9a4:	e008      	b.n	801b9b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b9a6:	4b07      	ldr	r3, [pc, #28]	@ (801b9c4 <prvResetNextTaskUnblockTime+0x38>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	68db      	ldr	r3, [r3, #12]
 801b9ac:	68db      	ldr	r3, [r3, #12]
 801b9ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	4a04      	ldr	r2, [pc, #16]	@ (801b9c8 <prvResetNextTaskUnblockTime+0x3c>)
 801b9b6:	6013      	str	r3, [r2, #0]
}
 801b9b8:	bf00      	nop
 801b9ba:	370c      	adds	r7, #12
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c2:	4770      	bx	lr
 801b9c4:	20001e04 	.word	0x20001e04
 801b9c8:	20001e6c 	.word	0x20001e6c

0801b9cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801b9cc:	b480      	push	{r7}
 801b9ce:	b083      	sub	sp, #12
 801b9d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801b9d2:	4b05      	ldr	r3, [pc, #20]	@ (801b9e8 <xTaskGetCurrentTaskHandle+0x1c>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 801b9d8:	687b      	ldr	r3, [r7, #4]
	}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	370c      	adds	r7, #12
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e4:	4770      	bx	lr
 801b9e6:	bf00      	nop
 801b9e8:	20001978 	.word	0x20001978

0801b9ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b9ec:	b480      	push	{r7}
 801b9ee:	b083      	sub	sp, #12
 801b9f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b9f2:	4b0b      	ldr	r3, [pc, #44]	@ (801ba20 <xTaskGetSchedulerState+0x34>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d102      	bne.n	801ba00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	607b      	str	r3, [r7, #4]
 801b9fe:	e008      	b.n	801ba12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ba00:	4b08      	ldr	r3, [pc, #32]	@ (801ba24 <xTaskGetSchedulerState+0x38>)
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d102      	bne.n	801ba0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801ba08:	2302      	movs	r3, #2
 801ba0a:	607b      	str	r3, [r7, #4]
 801ba0c:	e001      	b.n	801ba12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801ba0e:	2300      	movs	r3, #0
 801ba10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801ba12:	687b      	ldr	r3, [r7, #4]
	}
 801ba14:	4618      	mov	r0, r3
 801ba16:	370c      	adds	r7, #12
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba1e:	4770      	bx	lr
 801ba20:	20001e58 	.word	0x20001e58
 801ba24:	20001e74 	.word	0x20001e74

0801ba28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	b084      	sub	sp, #16
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801ba34:	2300      	movs	r3, #0
 801ba36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d051      	beq.n	801bae2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba42:	4b2a      	ldr	r3, [pc, #168]	@ (801baec <xTaskPriorityInherit+0xc4>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d241      	bcs.n	801bad0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ba4c:	68bb      	ldr	r3, [r7, #8]
 801ba4e:	699b      	ldr	r3, [r3, #24]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	db06      	blt.n	801ba62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba54:	4b25      	ldr	r3, [pc, #148]	@ (801baec <xTaskPriorityInherit+0xc4>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	6959      	ldr	r1, [r3, #20]
 801ba66:	68bb      	ldr	r3, [r7, #8]
 801ba68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba6a:	4613      	mov	r3, r2
 801ba6c:	009b      	lsls	r3, r3, #2
 801ba6e:	4413      	add	r3, r2
 801ba70:	009b      	lsls	r3, r3, #2
 801ba72:	4a1f      	ldr	r2, [pc, #124]	@ (801baf0 <xTaskPriorityInherit+0xc8>)
 801ba74:	4413      	add	r3, r2
 801ba76:	4299      	cmp	r1, r3
 801ba78:	d122      	bne.n	801bac0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ba7a:	68bb      	ldr	r3, [r7, #8]
 801ba7c:	3304      	adds	r3, #4
 801ba7e:	4618      	mov	r0, r3
 801ba80:	f7fe f93a 	bl	8019cf8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ba84:	4b19      	ldr	r3, [pc, #100]	@ (801baec <xTaskPriorityInherit+0xc4>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ba8e:	68bb      	ldr	r3, [r7, #8]
 801ba90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba92:	4b18      	ldr	r3, [pc, #96]	@ (801baf4 <xTaskPriorityInherit+0xcc>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d903      	bls.n	801baa2 <xTaskPriorityInherit+0x7a>
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba9e:	4a15      	ldr	r2, [pc, #84]	@ (801baf4 <xTaskPriorityInherit+0xcc>)
 801baa0:	6013      	str	r3, [r2, #0]
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801baa6:	4613      	mov	r3, r2
 801baa8:	009b      	lsls	r3, r3, #2
 801baaa:	4413      	add	r3, r2
 801baac:	009b      	lsls	r3, r3, #2
 801baae:	4a10      	ldr	r2, [pc, #64]	@ (801baf0 <xTaskPriorityInherit+0xc8>)
 801bab0:	441a      	add	r2, r3
 801bab2:	68bb      	ldr	r3, [r7, #8]
 801bab4:	3304      	adds	r3, #4
 801bab6:	4619      	mov	r1, r3
 801bab8:	4610      	mov	r0, r2
 801baba:	f7fe f8c0 	bl	8019c3e <vListInsertEnd>
 801babe:	e004      	b.n	801baca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bac0:	4b0a      	ldr	r3, [pc, #40]	@ (801baec <xTaskPriorityInherit+0xc4>)
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801baca:	2301      	movs	r3, #1
 801bacc:	60fb      	str	r3, [r7, #12]
 801bace:	e008      	b.n	801bae2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bad0:	68bb      	ldr	r3, [r7, #8]
 801bad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801bad4:	4b05      	ldr	r3, [pc, #20]	@ (801baec <xTaskPriorityInherit+0xc4>)
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bada:	429a      	cmp	r2, r3
 801badc:	d201      	bcs.n	801bae2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bade:	2301      	movs	r3, #1
 801bae0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bae2:	68fb      	ldr	r3, [r7, #12]
	}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3710      	adds	r7, #16
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}
 801baec:	20001978 	.word	0x20001978
 801baf0:	2000197c 	.word	0x2000197c
 801baf4:	20001e54 	.word	0x20001e54

0801baf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b086      	sub	sp, #24
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bb04:	2300      	movs	r3, #0
 801bb06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d058      	beq.n	801bbc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bb0e:	4b2f      	ldr	r3, [pc, #188]	@ (801bbcc <xTaskPriorityDisinherit+0xd4>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	693a      	ldr	r2, [r7, #16]
 801bb14:	429a      	cmp	r2, r3
 801bb16:	d00b      	beq.n	801bb30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801bb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb1c:	f383 8811 	msr	BASEPRI, r3
 801bb20:	f3bf 8f6f 	isb	sy
 801bb24:	f3bf 8f4f 	dsb	sy
 801bb28:	60fb      	str	r3, [r7, #12]
}
 801bb2a:	bf00      	nop
 801bb2c:	bf00      	nop
 801bb2e:	e7fd      	b.n	801bb2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d10b      	bne.n	801bb50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801bb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb3c:	f383 8811 	msr	BASEPRI, r3
 801bb40:	f3bf 8f6f 	isb	sy
 801bb44:	f3bf 8f4f 	dsb	sy
 801bb48:	60bb      	str	r3, [r7, #8]
}
 801bb4a:	bf00      	nop
 801bb4c:	bf00      	nop
 801bb4e:	e7fd      	b.n	801bb4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb54:	1e5a      	subs	r2, r3, #1
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb62:	429a      	cmp	r2, r3
 801bb64:	d02c      	beq.n	801bbc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bb66:	693b      	ldr	r3, [r7, #16]
 801bb68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d128      	bne.n	801bbc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bb6e:	693b      	ldr	r3, [r7, #16]
 801bb70:	3304      	adds	r3, #4
 801bb72:	4618      	mov	r0, r3
 801bb74:	f7fe f8c0 	bl	8019cf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bb80:	693b      	ldr	r3, [r7, #16]
 801bb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801bb88:	693b      	ldr	r3, [r7, #16]
 801bb8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb90:	4b0f      	ldr	r3, [pc, #60]	@ (801bbd0 <xTaskPriorityDisinherit+0xd8>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	429a      	cmp	r2, r3
 801bb96:	d903      	bls.n	801bba0 <xTaskPriorityDisinherit+0xa8>
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb9c:	4a0c      	ldr	r2, [pc, #48]	@ (801bbd0 <xTaskPriorityDisinherit+0xd8>)
 801bb9e:	6013      	str	r3, [r2, #0]
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bba4:	4613      	mov	r3, r2
 801bba6:	009b      	lsls	r3, r3, #2
 801bba8:	4413      	add	r3, r2
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	4a09      	ldr	r2, [pc, #36]	@ (801bbd4 <xTaskPriorityDisinherit+0xdc>)
 801bbae:	441a      	add	r2, r3
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	3304      	adds	r3, #4
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	4610      	mov	r0, r2
 801bbb8:	f7fe f841 	bl	8019c3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bbc0:	697b      	ldr	r3, [r7, #20]
	}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3718      	adds	r7, #24
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	20001978 	.word	0x20001978
 801bbd0:	20001e54 	.word	0x20001e54
 801bbd4:	2000197c 	.word	0x2000197c

0801bbd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b088      	sub	sp, #32
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
 801bbe0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d06c      	beq.n	801bcca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bbf0:	69bb      	ldr	r3, [r7, #24]
 801bbf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d10b      	bne.n	801bc10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801bbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbfc:	f383 8811 	msr	BASEPRI, r3
 801bc00:	f3bf 8f6f 	isb	sy
 801bc04:	f3bf 8f4f 	dsb	sy
 801bc08:	60fb      	str	r3, [r7, #12]
}
 801bc0a:	bf00      	nop
 801bc0c:	bf00      	nop
 801bc0e:	e7fd      	b.n	801bc0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bc10:	69bb      	ldr	r3, [r7, #24]
 801bc12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bc14:	683a      	ldr	r2, [r7, #0]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d902      	bls.n	801bc20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bc1a:	683b      	ldr	r3, [r7, #0]
 801bc1c:	61fb      	str	r3, [r7, #28]
 801bc1e:	e002      	b.n	801bc26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bc20:	69bb      	ldr	r3, [r7, #24]
 801bc22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bc24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801bc26:	69bb      	ldr	r3, [r7, #24]
 801bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc2a:	69fa      	ldr	r2, [r7, #28]
 801bc2c:	429a      	cmp	r2, r3
 801bc2e:	d04c      	beq.n	801bcca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801bc30:	69bb      	ldr	r3, [r7, #24]
 801bc32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bc34:	697a      	ldr	r2, [r7, #20]
 801bc36:	429a      	cmp	r2, r3
 801bc38:	d147      	bne.n	801bcca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801bc3a:	4b26      	ldr	r3, [pc, #152]	@ (801bcd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	69ba      	ldr	r2, [r7, #24]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d10b      	bne.n	801bc5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801bc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc48:	f383 8811 	msr	BASEPRI, r3
 801bc4c:	f3bf 8f6f 	isb	sy
 801bc50:	f3bf 8f4f 	dsb	sy
 801bc54:	60bb      	str	r3, [r7, #8]
}
 801bc56:	bf00      	nop
 801bc58:	bf00      	nop
 801bc5a:	e7fd      	b.n	801bc58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801bc5c:	69bb      	ldr	r3, [r7, #24]
 801bc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801bc62:	69bb      	ldr	r3, [r7, #24]
 801bc64:	69fa      	ldr	r2, [r7, #28]
 801bc66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bc68:	69bb      	ldr	r3, [r7, #24]
 801bc6a:	699b      	ldr	r3, [r3, #24]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	db04      	blt.n	801bc7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bc70:	69fb      	ldr	r3, [r7, #28]
 801bc72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801bc76:	69bb      	ldr	r3, [r7, #24]
 801bc78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	6959      	ldr	r1, [r3, #20]
 801bc7e:	693a      	ldr	r2, [r7, #16]
 801bc80:	4613      	mov	r3, r2
 801bc82:	009b      	lsls	r3, r3, #2
 801bc84:	4413      	add	r3, r2
 801bc86:	009b      	lsls	r3, r3, #2
 801bc88:	4a13      	ldr	r2, [pc, #76]	@ (801bcd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bc8a:	4413      	add	r3, r2
 801bc8c:	4299      	cmp	r1, r3
 801bc8e:	d11c      	bne.n	801bcca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc90:	69bb      	ldr	r3, [r7, #24]
 801bc92:	3304      	adds	r3, #4
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7fe f82f 	bl	8019cf8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801bc9a:	69bb      	ldr	r3, [r7, #24]
 801bc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bc9e:	4b0f      	ldr	r3, [pc, #60]	@ (801bcdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	429a      	cmp	r2, r3
 801bca4:	d903      	bls.n	801bcae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801bca6:	69bb      	ldr	r3, [r7, #24]
 801bca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcaa:	4a0c      	ldr	r2, [pc, #48]	@ (801bcdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801bcac:	6013      	str	r3, [r2, #0]
 801bcae:	69bb      	ldr	r3, [r7, #24]
 801bcb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bcb2:	4613      	mov	r3, r2
 801bcb4:	009b      	lsls	r3, r3, #2
 801bcb6:	4413      	add	r3, r2
 801bcb8:	009b      	lsls	r3, r3, #2
 801bcba:	4a07      	ldr	r2, [pc, #28]	@ (801bcd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bcbc:	441a      	add	r2, r3
 801bcbe:	69bb      	ldr	r3, [r7, #24]
 801bcc0:	3304      	adds	r3, #4
 801bcc2:	4619      	mov	r1, r3
 801bcc4:	4610      	mov	r0, r2
 801bcc6:	f7fd ffba 	bl	8019c3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bcca:	bf00      	nop
 801bccc:	3720      	adds	r7, #32
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}
 801bcd2:	bf00      	nop
 801bcd4:	20001978 	.word	0x20001978
 801bcd8:	2000197c 	.word	0x2000197c
 801bcdc:	20001e54 	.word	0x20001e54

0801bce0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bce0:	b480      	push	{r7}
 801bce2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bce4:	4b07      	ldr	r3, [pc, #28]	@ (801bd04 <pvTaskIncrementMutexHeldCount+0x24>)
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d004      	beq.n	801bcf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bcec:	4b05      	ldr	r3, [pc, #20]	@ (801bd04 <pvTaskIncrementMutexHeldCount+0x24>)
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bcf2:	3201      	adds	r2, #1
 801bcf4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801bcf6:	4b03      	ldr	r3, [pc, #12]	@ (801bd04 <pvTaskIncrementMutexHeldCount+0x24>)
 801bcf8:	681b      	ldr	r3, [r3, #0]
	}
 801bcfa:	4618      	mov	r0, r3
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd02:	4770      	bx	lr
 801bd04:	20001978 	.word	0x20001978

0801bd08 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b086      	sub	sp, #24
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	60f8      	str	r0, [r7, #12]
 801bd10:	60b9      	str	r1, [r7, #8]
 801bd12:	607a      	str	r2, [r7, #4]
 801bd14:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801bd16:	f000 fedf 	bl	801cad8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801bd1a:	4b29      	ldr	r3, [pc, #164]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	2b02      	cmp	r3, #2
 801bd26:	d01c      	beq.n	801bd62 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801bd28:	4b25      	ldr	r3, [pc, #148]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801bd30:	68fa      	ldr	r2, [r7, #12]
 801bd32:	43d2      	mvns	r2, r2
 801bd34:	400a      	ands	r2, r1
 801bd36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801bd3a:	4b21      	ldr	r3, [pc, #132]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	2201      	movs	r2, #1
 801bd40:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801bd44:	683b      	ldr	r3, [r7, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d00b      	beq.n	801bd62 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801bd4a:	2101      	movs	r1, #1
 801bd4c:	6838      	ldr	r0, [r7, #0]
 801bd4e:	f000 f9e3 	bl	801c118 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801bd52:	4b1c      	ldr	r3, [pc, #112]	@ (801bdc4 <xTaskNotifyWait+0xbc>)
 801bd54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bd58:	601a      	str	r2, [r3, #0]
 801bd5a:	f3bf 8f4f 	dsb	sy
 801bd5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801bd62:	f000 feeb 	bl	801cb3c <vPortExitCritical>

		taskENTER_CRITICAL();
 801bd66:	f000 feb7 	bl	801cad8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d005      	beq.n	801bd7c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801bd70:	4b13      	ldr	r3, [pc, #76]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801bd7c:	4b10      	ldr	r3, [pc, #64]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801bd84:	b2db      	uxtb	r3, r3
 801bd86:	2b02      	cmp	r3, #2
 801bd88:	d002      	beq.n	801bd90 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	617b      	str	r3, [r7, #20]
 801bd8e:	e00a      	b.n	801bda6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801bd90:	4b0b      	ldr	r3, [pc, #44]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801bd98:	68ba      	ldr	r2, [r7, #8]
 801bd9a:	43d2      	mvns	r2, r2
 801bd9c:	400a      	ands	r2, r1
 801bd9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 801bda2:	2301      	movs	r3, #1
 801bda4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801bda6:	4b06      	ldr	r3, [pc, #24]	@ (801bdc0 <xTaskNotifyWait+0xb8>)
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	2200      	movs	r2, #0
 801bdac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801bdb0:	f000 fec4 	bl	801cb3c <vPortExitCritical>

		return xReturn;
 801bdb4:	697b      	ldr	r3, [r7, #20]
	}
 801bdb6:	4618      	mov	r0, r3
 801bdb8:	3718      	adds	r7, #24
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	bd80      	pop	{r7, pc}
 801bdbe:	bf00      	nop
 801bdc0:	20001978 	.word	0x20001978
 801bdc4:	e000ed04 	.word	0xe000ed04

0801bdc8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b08a      	sub	sp, #40	@ 0x28
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	60f8      	str	r0, [r7, #12]
 801bdd0:	60b9      	str	r1, [r7, #8]
 801bdd2:	603b      	str	r3, [r7, #0]
 801bdd4:	4613      	mov	r3, r2
 801bdd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801bdd8:	2301      	movs	r3, #1
 801bdda:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d10b      	bne.n	801bdfa <xTaskGenericNotify+0x32>
	__asm volatile
 801bde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bde6:	f383 8811 	msr	BASEPRI, r3
 801bdea:	f3bf 8f6f 	isb	sy
 801bdee:	f3bf 8f4f 	dsb	sy
 801bdf2:	61bb      	str	r3, [r7, #24]
}
 801bdf4:	bf00      	nop
 801bdf6:	bf00      	nop
 801bdf8:	e7fd      	b.n	801bdf6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801bdfe:	f000 fe6b 	bl	801cad8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d004      	beq.n	801be12 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801be08:	6a3b      	ldr	r3, [r7, #32]
 801be0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801be0e:	683b      	ldr	r3, [r7, #0]
 801be10:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801be12:	6a3b      	ldr	r3, [r7, #32]
 801be14:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801be18:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801be1a:	6a3b      	ldr	r3, [r7, #32]
 801be1c:	2202      	movs	r2, #2
 801be1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801be22:	79fb      	ldrb	r3, [r7, #7]
 801be24:	2b04      	cmp	r3, #4
 801be26:	d82e      	bhi.n	801be86 <xTaskGenericNotify+0xbe>
 801be28:	a201      	add	r2, pc, #4	@ (adr r2, 801be30 <xTaskGenericNotify+0x68>)
 801be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be2e:	bf00      	nop
 801be30:	0801beab 	.word	0x0801beab
 801be34:	0801be45 	.word	0x0801be45
 801be38:	0801be57 	.word	0x0801be57
 801be3c:	0801be67 	.word	0x0801be67
 801be40:	0801be71 	.word	0x0801be71
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801be44:	6a3b      	ldr	r3, [r7, #32]
 801be46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	431a      	orrs	r2, r3
 801be4e:	6a3b      	ldr	r3, [r7, #32]
 801be50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801be54:	e02c      	b.n	801beb0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801be56:	6a3b      	ldr	r3, [r7, #32]
 801be58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801be5c:	1c5a      	adds	r2, r3, #1
 801be5e:	6a3b      	ldr	r3, [r7, #32]
 801be60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801be64:	e024      	b.n	801beb0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801be66:	6a3b      	ldr	r3, [r7, #32]
 801be68:	68ba      	ldr	r2, [r7, #8]
 801be6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801be6e:	e01f      	b.n	801beb0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801be70:	7ffb      	ldrb	r3, [r7, #31]
 801be72:	2b02      	cmp	r3, #2
 801be74:	d004      	beq.n	801be80 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801be76:	6a3b      	ldr	r3, [r7, #32]
 801be78:	68ba      	ldr	r2, [r7, #8]
 801be7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801be7e:	e017      	b.n	801beb0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 801be80:	2300      	movs	r3, #0
 801be82:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801be84:	e014      	b.n	801beb0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801be86:	6a3b      	ldr	r3, [r7, #32]
 801be88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801be8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be90:	d00d      	beq.n	801beae <xTaskGenericNotify+0xe6>
	__asm volatile
 801be92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be96:	f383 8811 	msr	BASEPRI, r3
 801be9a:	f3bf 8f6f 	isb	sy
 801be9e:	f3bf 8f4f 	dsb	sy
 801bea2:	617b      	str	r3, [r7, #20]
}
 801bea4:	bf00      	nop
 801bea6:	bf00      	nop
 801bea8:	e7fd      	b.n	801bea6 <xTaskGenericNotify+0xde>
					break;
 801beaa:	bf00      	nop
 801beac:	e000      	b.n	801beb0 <xTaskGenericNotify+0xe8>

					break;
 801beae:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801beb0:	7ffb      	ldrb	r3, [r7, #31]
 801beb2:	2b01      	cmp	r3, #1
 801beb4:	d13b      	bne.n	801bf2e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801beb6:	6a3b      	ldr	r3, [r7, #32]
 801beb8:	3304      	adds	r3, #4
 801beba:	4618      	mov	r0, r3
 801bebc:	f7fd ff1c 	bl	8019cf8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801bec0:	6a3b      	ldr	r3, [r7, #32]
 801bec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bec4:	4b1d      	ldr	r3, [pc, #116]	@ (801bf3c <xTaskGenericNotify+0x174>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	429a      	cmp	r2, r3
 801beca:	d903      	bls.n	801bed4 <xTaskGenericNotify+0x10c>
 801becc:	6a3b      	ldr	r3, [r7, #32]
 801bece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bed0:	4a1a      	ldr	r2, [pc, #104]	@ (801bf3c <xTaskGenericNotify+0x174>)
 801bed2:	6013      	str	r3, [r2, #0]
 801bed4:	6a3b      	ldr	r3, [r7, #32]
 801bed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bed8:	4613      	mov	r3, r2
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	4413      	add	r3, r2
 801bede:	009b      	lsls	r3, r3, #2
 801bee0:	4a17      	ldr	r2, [pc, #92]	@ (801bf40 <xTaskGenericNotify+0x178>)
 801bee2:	441a      	add	r2, r3
 801bee4:	6a3b      	ldr	r3, [r7, #32]
 801bee6:	3304      	adds	r3, #4
 801bee8:	4619      	mov	r1, r3
 801beea:	4610      	mov	r0, r2
 801beec:	f7fd fea7 	bl	8019c3e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801bef0:	6a3b      	ldr	r3, [r7, #32]
 801bef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d00b      	beq.n	801bf10 <xTaskGenericNotify+0x148>
	__asm volatile
 801bef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801befc:	f383 8811 	msr	BASEPRI, r3
 801bf00:	f3bf 8f6f 	isb	sy
 801bf04:	f3bf 8f4f 	dsb	sy
 801bf08:	613b      	str	r3, [r7, #16]
}
 801bf0a:	bf00      	nop
 801bf0c:	bf00      	nop
 801bf0e:	e7fd      	b.n	801bf0c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bf10:	6a3b      	ldr	r3, [r7, #32]
 801bf12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bf14:	4b0b      	ldr	r3, [pc, #44]	@ (801bf44 <xTaskGenericNotify+0x17c>)
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d907      	bls.n	801bf2e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801bf1e:	4b0a      	ldr	r3, [pc, #40]	@ (801bf48 <xTaskGenericNotify+0x180>)
 801bf20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bf24:	601a      	str	r2, [r3, #0]
 801bf26:	f3bf 8f4f 	dsb	sy
 801bf2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801bf2e:	f000 fe05 	bl	801cb3c <vPortExitCritical>

		return xReturn;
 801bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801bf34:	4618      	mov	r0, r3
 801bf36:	3728      	adds	r7, #40	@ 0x28
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bd80      	pop	{r7, pc}
 801bf3c:	20001e54 	.word	0x20001e54
 801bf40:	2000197c 	.word	0x2000197c
 801bf44:	20001978 	.word	0x20001978
 801bf48:	e000ed04 	.word	0xe000ed04

0801bf4c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b08e      	sub	sp, #56	@ 0x38
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	603b      	str	r3, [r7, #0]
 801bf58:	4613      	mov	r3, r2
 801bf5a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801bf5c:	2301      	movs	r3, #1
 801bf5e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d10b      	bne.n	801bf7e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801bf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf6a:	f383 8811 	msr	BASEPRI, r3
 801bf6e:	f3bf 8f6f 	isb	sy
 801bf72:	f3bf 8f4f 	dsb	sy
 801bf76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801bf78:	bf00      	nop
 801bf7a:	bf00      	nop
 801bf7c:	e7fd      	b.n	801bf7a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801bf7e:	f000 fe8b 	bl	801cc98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801bf86:	f3ef 8211 	mrs	r2, BASEPRI
 801bf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf8e:	f383 8811 	msr	BASEPRI, r3
 801bf92:	f3bf 8f6f 	isb	sy
 801bf96:	f3bf 8f4f 	dsb	sy
 801bf9a:	623a      	str	r2, [r7, #32]
 801bf9c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801bf9e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801bfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d004      	beq.n	801bfb2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801bfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfaa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfb4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801bfb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfbe:	2202      	movs	r2, #2
 801bfc0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801bfc4:	79fb      	ldrb	r3, [r7, #7]
 801bfc6:	2b04      	cmp	r3, #4
 801bfc8:	d82e      	bhi.n	801c028 <xTaskGenericNotifyFromISR+0xdc>
 801bfca:	a201      	add	r2, pc, #4	@ (adr r2, 801bfd0 <xTaskGenericNotifyFromISR+0x84>)
 801bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfd0:	0801c04d 	.word	0x0801c04d
 801bfd4:	0801bfe5 	.word	0x0801bfe5
 801bfd8:	0801bff7 	.word	0x0801bff7
 801bfdc:	0801c007 	.word	0x0801c007
 801bfe0:	0801c011 	.word	0x0801c011
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801bfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfe6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801bfea:	68bb      	ldr	r3, [r7, #8]
 801bfec:	431a      	orrs	r2, r3
 801bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bff0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801bff4:	e02d      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801bffc:	1c5a      	adds	r2, r3, #1
 801bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c000:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801c004:	e025      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c008:	68ba      	ldr	r2, [r7, #8]
 801c00a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801c00e:	e020      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801c010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801c014:	2b02      	cmp	r3, #2
 801c016:	d004      	beq.n	801c022 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801c018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c01a:	68ba      	ldr	r2, [r7, #8]
 801c01c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801c020:	e017      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801c022:	2300      	movs	r3, #0
 801c024:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801c026:	e014      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801c028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c02a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c032:	d00d      	beq.n	801c050 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c038:	f383 8811 	msr	BASEPRI, r3
 801c03c:	f3bf 8f6f 	isb	sy
 801c040:	f3bf 8f4f 	dsb	sy
 801c044:	61bb      	str	r3, [r7, #24]
}
 801c046:	bf00      	nop
 801c048:	bf00      	nop
 801c04a:	e7fd      	b.n	801c048 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801c04c:	bf00      	nop
 801c04e:	e000      	b.n	801c052 <xTaskGenericNotifyFromISR+0x106>
					break;
 801c050:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801c052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801c056:	2b01      	cmp	r3, #1
 801c058:	d147      	bne.n	801c0ea <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d00b      	beq.n	801c07a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c066:	f383 8811 	msr	BASEPRI, r3
 801c06a:	f3bf 8f6f 	isb	sy
 801c06e:	f3bf 8f4f 	dsb	sy
 801c072:	617b      	str	r3, [r7, #20]
}
 801c074:	bf00      	nop
 801c076:	bf00      	nop
 801c078:	e7fd      	b.n	801c076 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c07a:	4b21      	ldr	r3, [pc, #132]	@ (801c100 <xTaskGenericNotifyFromISR+0x1b4>)
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d11d      	bne.n	801c0be <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c084:	3304      	adds	r3, #4
 801c086:	4618      	mov	r0, r3
 801c088:	f7fd fe36 	bl	8019cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801c08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c090:	4b1c      	ldr	r3, [pc, #112]	@ (801c104 <xTaskGenericNotifyFromISR+0x1b8>)
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	429a      	cmp	r2, r3
 801c096:	d903      	bls.n	801c0a0 <xTaskGenericNotifyFromISR+0x154>
 801c098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c09c:	4a19      	ldr	r2, [pc, #100]	@ (801c104 <xTaskGenericNotifyFromISR+0x1b8>)
 801c09e:	6013      	str	r3, [r2, #0]
 801c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c0a4:	4613      	mov	r3, r2
 801c0a6:	009b      	lsls	r3, r3, #2
 801c0a8:	4413      	add	r3, r2
 801c0aa:	009b      	lsls	r3, r3, #2
 801c0ac:	4a16      	ldr	r2, [pc, #88]	@ (801c108 <xTaskGenericNotifyFromISR+0x1bc>)
 801c0ae:	441a      	add	r2, r3
 801c0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0b2:	3304      	adds	r3, #4
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	4610      	mov	r0, r2
 801c0b8:	f7fd fdc1 	bl	8019c3e <vListInsertEnd>
 801c0bc:	e005      	b.n	801c0ca <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0c0:	3318      	adds	r3, #24
 801c0c2:	4619      	mov	r1, r3
 801c0c4:	4811      	ldr	r0, [pc, #68]	@ (801c10c <xTaskGenericNotifyFromISR+0x1c0>)
 801c0c6:	f7fd fdba 	bl	8019c3e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c0ce:	4b10      	ldr	r3, [pc, #64]	@ (801c110 <xTaskGenericNotifyFromISR+0x1c4>)
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0d4:	429a      	cmp	r2, r3
 801c0d6:	d908      	bls.n	801c0ea <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801c0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d002      	beq.n	801c0e4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801c0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c0e0:	2201      	movs	r2, #1
 801c0e2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801c0e4:	4b0b      	ldr	r3, [pc, #44]	@ (801c114 <xTaskGenericNotifyFromISR+0x1c8>)
 801c0e6:	2201      	movs	r2, #1
 801c0e8:	601a      	str	r2, [r3, #0]
 801c0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 801c0ee:	693b      	ldr	r3, [r7, #16]
 801c0f0:	f383 8811 	msr	BASEPRI, r3
}
 801c0f4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801c0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	3738      	adds	r7, #56	@ 0x38
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	bd80      	pop	{r7, pc}
 801c100:	20001e74 	.word	0x20001e74
 801c104:	20001e54 	.word	0x20001e54
 801c108:	2000197c 	.word	0x2000197c
 801c10c:	20001e0c 	.word	0x20001e0c
 801c110:	20001978 	.word	0x20001978
 801c114:	20001e60 	.word	0x20001e60

0801c118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b084      	sub	sp, #16
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
 801c120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c122:	4b21      	ldr	r3, [pc, #132]	@ (801c1a8 <prvAddCurrentTaskToDelayedList+0x90>)
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c128:	4b20      	ldr	r3, [pc, #128]	@ (801c1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	3304      	adds	r3, #4
 801c12e:	4618      	mov	r0, r3
 801c130:	f7fd fde2 	bl	8019cf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c13a:	d10a      	bne.n	801c152 <prvAddCurrentTaskToDelayedList+0x3a>
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d007      	beq.n	801c152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c142:	4b1a      	ldr	r3, [pc, #104]	@ (801c1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	3304      	adds	r3, #4
 801c148:	4619      	mov	r1, r3
 801c14a:	4819      	ldr	r0, [pc, #100]	@ (801c1b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801c14c:	f7fd fd77 	bl	8019c3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c150:	e026      	b.n	801c1a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c152:	68fa      	ldr	r2, [r7, #12]
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	4413      	add	r3, r2
 801c158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c15a:	4b14      	ldr	r3, [pc, #80]	@ (801c1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	68ba      	ldr	r2, [r7, #8]
 801c160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c162:	68ba      	ldr	r2, [r7, #8]
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	429a      	cmp	r2, r3
 801c168:	d209      	bcs.n	801c17e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c16a:	4b12      	ldr	r3, [pc, #72]	@ (801c1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801c16c:	681a      	ldr	r2, [r3, #0]
 801c16e:	4b0f      	ldr	r3, [pc, #60]	@ (801c1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	3304      	adds	r3, #4
 801c174:	4619      	mov	r1, r3
 801c176:	4610      	mov	r0, r2
 801c178:	f7fd fd85 	bl	8019c86 <vListInsert>
}
 801c17c:	e010      	b.n	801c1a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c17e:	4b0e      	ldr	r3, [pc, #56]	@ (801c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 801c180:	681a      	ldr	r2, [r3, #0]
 801c182:	4b0a      	ldr	r3, [pc, #40]	@ (801c1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	3304      	adds	r3, #4
 801c188:	4619      	mov	r1, r3
 801c18a:	4610      	mov	r0, r2
 801c18c:	f7fd fd7b 	bl	8019c86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c190:	4b0a      	ldr	r3, [pc, #40]	@ (801c1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	68ba      	ldr	r2, [r7, #8]
 801c196:	429a      	cmp	r2, r3
 801c198:	d202      	bcs.n	801c1a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801c19a:	4a08      	ldr	r2, [pc, #32]	@ (801c1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801c19c:	68bb      	ldr	r3, [r7, #8]
 801c19e:	6013      	str	r3, [r2, #0]
}
 801c1a0:	bf00      	nop
 801c1a2:	3710      	adds	r7, #16
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	bd80      	pop	{r7, pc}
 801c1a8:	20001e50 	.word	0x20001e50
 801c1ac:	20001978 	.word	0x20001978
 801c1b0:	20001e38 	.word	0x20001e38
 801c1b4:	20001e08 	.word	0x20001e08
 801c1b8:	20001e04 	.word	0x20001e04
 801c1bc:	20001e6c 	.word	0x20001e6c

0801c1c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b08a      	sub	sp, #40	@ 0x28
 801c1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c1ca:	f000 fb13 	bl	801c7f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c1ce:	4b1d      	ldr	r3, [pc, #116]	@ (801c244 <xTimerCreateTimerTask+0x84>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d021      	beq.n	801c21a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c1da:	2300      	movs	r3, #0
 801c1dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c1de:	1d3a      	adds	r2, r7, #4
 801c1e0:	f107 0108 	add.w	r1, r7, #8
 801c1e4:	f107 030c 	add.w	r3, r7, #12
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	f7fd fce1 	bl	8019bb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c1ee:	6879      	ldr	r1, [r7, #4]
 801c1f0:	68bb      	ldr	r3, [r7, #8]
 801c1f2:	68fa      	ldr	r2, [r7, #12]
 801c1f4:	9202      	str	r2, [sp, #8]
 801c1f6:	9301      	str	r3, [sp, #4]
 801c1f8:	2302      	movs	r3, #2
 801c1fa:	9300      	str	r3, [sp, #0]
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	460a      	mov	r2, r1
 801c200:	4911      	ldr	r1, [pc, #68]	@ (801c248 <xTimerCreateTimerTask+0x88>)
 801c202:	4812      	ldr	r0, [pc, #72]	@ (801c24c <xTimerCreateTimerTask+0x8c>)
 801c204:	f7fe fd78 	bl	801acf8 <xTaskCreateStatic>
 801c208:	4603      	mov	r3, r0
 801c20a:	4a11      	ldr	r2, [pc, #68]	@ (801c250 <xTimerCreateTimerTask+0x90>)
 801c20c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c20e:	4b10      	ldr	r3, [pc, #64]	@ (801c250 <xTimerCreateTimerTask+0x90>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d001      	beq.n	801c21a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c216:	2301      	movs	r3, #1
 801c218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c21a:	697b      	ldr	r3, [r7, #20]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d10b      	bne.n	801c238 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c224:	f383 8811 	msr	BASEPRI, r3
 801c228:	f3bf 8f6f 	isb	sy
 801c22c:	f3bf 8f4f 	dsb	sy
 801c230:	613b      	str	r3, [r7, #16]
}
 801c232:	bf00      	nop
 801c234:	bf00      	nop
 801c236:	e7fd      	b.n	801c234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c238:	697b      	ldr	r3, [r7, #20]
}
 801c23a:	4618      	mov	r0, r3
 801c23c:	3718      	adds	r7, #24
 801c23e:	46bd      	mov	sp, r7
 801c240:	bd80      	pop	{r7, pc}
 801c242:	bf00      	nop
 801c244:	20001ea8 	.word	0x20001ea8
 801c248:	0801eb68 	.word	0x0801eb68
 801c24c:	0801c38d 	.word	0x0801c38d
 801c250:	20001eac 	.word	0x20001eac

0801c254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c254:	b580      	push	{r7, lr}
 801c256:	b08a      	sub	sp, #40	@ 0x28
 801c258:	af00      	add	r7, sp, #0
 801c25a:	60f8      	str	r0, [r7, #12]
 801c25c:	60b9      	str	r1, [r7, #8]
 801c25e:	607a      	str	r2, [r7, #4]
 801c260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c262:	2300      	movs	r3, #0
 801c264:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d10b      	bne.n	801c284 <xTimerGenericCommand+0x30>
	__asm volatile
 801c26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c270:	f383 8811 	msr	BASEPRI, r3
 801c274:	f3bf 8f6f 	isb	sy
 801c278:	f3bf 8f4f 	dsb	sy
 801c27c:	623b      	str	r3, [r7, #32]
}
 801c27e:	bf00      	nop
 801c280:	bf00      	nop
 801c282:	e7fd      	b.n	801c280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c284:	4b19      	ldr	r3, [pc, #100]	@ (801c2ec <xTimerGenericCommand+0x98>)
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d02a      	beq.n	801c2e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c28c:	68bb      	ldr	r3, [r7, #8]
 801c28e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	2b05      	cmp	r3, #5
 801c29c:	dc18      	bgt.n	801c2d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c29e:	f7ff fba5 	bl	801b9ec <xTaskGetSchedulerState>
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	2b02      	cmp	r3, #2
 801c2a6:	d109      	bne.n	801c2bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c2a8:	4b10      	ldr	r3, [pc, #64]	@ (801c2ec <xTimerGenericCommand+0x98>)
 801c2aa:	6818      	ldr	r0, [r3, #0]
 801c2ac:	f107 0110 	add.w	r1, r7, #16
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c2b4:	f7fd ff48 	bl	801a148 <xQueueGenericSend>
 801c2b8:	6278      	str	r0, [r7, #36]	@ 0x24
 801c2ba:	e012      	b.n	801c2e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c2bc:	4b0b      	ldr	r3, [pc, #44]	@ (801c2ec <xTimerGenericCommand+0x98>)
 801c2be:	6818      	ldr	r0, [r3, #0]
 801c2c0:	f107 0110 	add.w	r1, r7, #16
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	f7fd ff3e 	bl	801a148 <xQueueGenericSend>
 801c2cc:	6278      	str	r0, [r7, #36]	@ 0x24
 801c2ce:	e008      	b.n	801c2e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c2d0:	4b06      	ldr	r3, [pc, #24]	@ (801c2ec <xTimerGenericCommand+0x98>)
 801c2d2:	6818      	ldr	r0, [r3, #0]
 801c2d4:	f107 0110 	add.w	r1, r7, #16
 801c2d8:	2300      	movs	r3, #0
 801c2da:	683a      	ldr	r2, [r7, #0]
 801c2dc:	f7fe f836 	bl	801a34c <xQueueGenericSendFromISR>
 801c2e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	3728      	adds	r7, #40	@ 0x28
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	20001ea8 	.word	0x20001ea8

0801c2f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b088      	sub	sp, #32
 801c2f4:	af02      	add	r7, sp, #8
 801c2f6:	6078      	str	r0, [r7, #4]
 801c2f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c2fa:	4b23      	ldr	r3, [pc, #140]	@ (801c388 <prvProcessExpiredTimer+0x98>)
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	68db      	ldr	r3, [r3, #12]
 801c300:	68db      	ldr	r3, [r3, #12]
 801c302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c304:	697b      	ldr	r3, [r7, #20]
 801c306:	3304      	adds	r3, #4
 801c308:	4618      	mov	r0, r3
 801c30a:	f7fd fcf5 	bl	8019cf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c30e:	697b      	ldr	r3, [r7, #20]
 801c310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c314:	f003 0304 	and.w	r3, r3, #4
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d023      	beq.n	801c364 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	699a      	ldr	r2, [r3, #24]
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	18d1      	adds	r1, r2, r3
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	683a      	ldr	r2, [r7, #0]
 801c328:	6978      	ldr	r0, [r7, #20]
 801c32a:	f000 f8d5 	bl	801c4d8 <prvInsertTimerInActiveList>
 801c32e:	4603      	mov	r3, r0
 801c330:	2b00      	cmp	r3, #0
 801c332:	d020      	beq.n	801c376 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c334:	2300      	movs	r3, #0
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	2300      	movs	r3, #0
 801c33a:	687a      	ldr	r2, [r7, #4]
 801c33c:	2100      	movs	r1, #0
 801c33e:	6978      	ldr	r0, [r7, #20]
 801c340:	f7ff ff88 	bl	801c254 <xTimerGenericCommand>
 801c344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d114      	bne.n	801c376 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801c34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c350:	f383 8811 	msr	BASEPRI, r3
 801c354:	f3bf 8f6f 	isb	sy
 801c358:	f3bf 8f4f 	dsb	sy
 801c35c:	60fb      	str	r3, [r7, #12]
}
 801c35e:	bf00      	nop
 801c360:	bf00      	nop
 801c362:	e7fd      	b.n	801c360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c364:	697b      	ldr	r3, [r7, #20]
 801c366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c36a:	f023 0301 	bic.w	r3, r3, #1
 801c36e:	b2da      	uxtb	r2, r3
 801c370:	697b      	ldr	r3, [r7, #20]
 801c372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c376:	697b      	ldr	r3, [r7, #20]
 801c378:	6a1b      	ldr	r3, [r3, #32]
 801c37a:	6978      	ldr	r0, [r7, #20]
 801c37c:	4798      	blx	r3
}
 801c37e:	bf00      	nop
 801c380:	3718      	adds	r7, #24
 801c382:	46bd      	mov	sp, r7
 801c384:	bd80      	pop	{r7, pc}
 801c386:	bf00      	nop
 801c388:	20001ea0 	.word	0x20001ea0

0801c38c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b084      	sub	sp, #16
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c394:	f107 0308 	add.w	r3, r7, #8
 801c398:	4618      	mov	r0, r3
 801c39a:	f000 f859 	bl	801c450 <prvGetNextExpireTime>
 801c39e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c3a0:	68bb      	ldr	r3, [r7, #8]
 801c3a2:	4619      	mov	r1, r3
 801c3a4:	68f8      	ldr	r0, [r7, #12]
 801c3a6:	f000 f805 	bl	801c3b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c3aa:	f000 f8d7 	bl	801c55c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c3ae:	bf00      	nop
 801c3b0:	e7f0      	b.n	801c394 <prvTimerTask+0x8>
	...

0801c3b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b084      	sub	sp, #16
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c3be:	f7fe feff 	bl	801b1c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c3c2:	f107 0308 	add.w	r3, r7, #8
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f000 f866 	bl	801c498 <prvSampleTimeNow>
 801c3cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d130      	bne.n	801c436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c3d4:	683b      	ldr	r3, [r7, #0]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d10a      	bne.n	801c3f0 <prvProcessTimerOrBlockTask+0x3c>
 801c3da:	687a      	ldr	r2, [r7, #4]
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d806      	bhi.n	801c3f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c3e2:	f7fe fefb 	bl	801b1dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c3e6:	68f9      	ldr	r1, [r7, #12]
 801c3e8:	6878      	ldr	r0, [r7, #4]
 801c3ea:	f7ff ff81 	bl	801c2f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c3ee:	e024      	b.n	801c43a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c3f0:	683b      	ldr	r3, [r7, #0]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d008      	beq.n	801c408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c3f6:	4b13      	ldr	r3, [pc, #76]	@ (801c444 <prvProcessTimerOrBlockTask+0x90>)
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d101      	bne.n	801c404 <prvProcessTimerOrBlockTask+0x50>
 801c400:	2301      	movs	r3, #1
 801c402:	e000      	b.n	801c406 <prvProcessTimerOrBlockTask+0x52>
 801c404:	2300      	movs	r3, #0
 801c406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c408:	4b0f      	ldr	r3, [pc, #60]	@ (801c448 <prvProcessTimerOrBlockTask+0x94>)
 801c40a:	6818      	ldr	r0, [r3, #0]
 801c40c:	687a      	ldr	r2, [r7, #4]
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	1ad3      	subs	r3, r2, r3
 801c412:	683a      	ldr	r2, [r7, #0]
 801c414:	4619      	mov	r1, r3
 801c416:	f7fe fc3b 	bl	801ac90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c41a:	f7fe fedf 	bl	801b1dc <xTaskResumeAll>
 801c41e:	4603      	mov	r3, r0
 801c420:	2b00      	cmp	r3, #0
 801c422:	d10a      	bne.n	801c43a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c424:	4b09      	ldr	r3, [pc, #36]	@ (801c44c <prvProcessTimerOrBlockTask+0x98>)
 801c426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c42a:	601a      	str	r2, [r3, #0]
 801c42c:	f3bf 8f4f 	dsb	sy
 801c430:	f3bf 8f6f 	isb	sy
}
 801c434:	e001      	b.n	801c43a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c436:	f7fe fed1 	bl	801b1dc <xTaskResumeAll>
}
 801c43a:	bf00      	nop
 801c43c:	3710      	adds	r7, #16
 801c43e:	46bd      	mov	sp, r7
 801c440:	bd80      	pop	{r7, pc}
 801c442:	bf00      	nop
 801c444:	20001ea4 	.word	0x20001ea4
 801c448:	20001ea8 	.word	0x20001ea8
 801c44c:	e000ed04 	.word	0xe000ed04

0801c450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c450:	b480      	push	{r7}
 801c452:	b085      	sub	sp, #20
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c458:	4b0e      	ldr	r3, [pc, #56]	@ (801c494 <prvGetNextExpireTime+0x44>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d101      	bne.n	801c466 <prvGetNextExpireTime+0x16>
 801c462:	2201      	movs	r2, #1
 801c464:	e000      	b.n	801c468 <prvGetNextExpireTime+0x18>
 801c466:	2200      	movs	r2, #0
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d105      	bne.n	801c480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c474:	4b07      	ldr	r3, [pc, #28]	@ (801c494 <prvGetNextExpireTime+0x44>)
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	68db      	ldr	r3, [r3, #12]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	60fb      	str	r3, [r7, #12]
 801c47e:	e001      	b.n	801c484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c480:	2300      	movs	r3, #0
 801c482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c484:	68fb      	ldr	r3, [r7, #12]
}
 801c486:	4618      	mov	r0, r3
 801c488:	3714      	adds	r7, #20
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr
 801c492:	bf00      	nop
 801c494:	20001ea0 	.word	0x20001ea0

0801c498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c4a0:	f7fe ff3a 	bl	801b318 <xTaskGetTickCount>
 801c4a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c4a6:	4b0b      	ldr	r3, [pc, #44]	@ (801c4d4 <prvSampleTimeNow+0x3c>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	68fa      	ldr	r2, [r7, #12]
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	d205      	bcs.n	801c4bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c4b0:	f000 f93a 	bl	801c728 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2201      	movs	r2, #1
 801c4b8:	601a      	str	r2, [r3, #0]
 801c4ba:	e002      	b.n	801c4c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c4c2:	4a04      	ldr	r2, [pc, #16]	@ (801c4d4 <prvSampleTimeNow+0x3c>)
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c4c8:	68fb      	ldr	r3, [r7, #12]
}
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	3710      	adds	r7, #16
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bd80      	pop	{r7, pc}
 801c4d2:	bf00      	nop
 801c4d4:	20001eb0 	.word	0x20001eb0

0801c4d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b086      	sub	sp, #24
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	60f8      	str	r0, [r7, #12]
 801c4e0:	60b9      	str	r1, [r7, #8]
 801c4e2:	607a      	str	r2, [r7, #4]
 801c4e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	68ba      	ldr	r2, [r7, #8]
 801c4ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	68fa      	ldr	r2, [r7, #12]
 801c4f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c4f6:	68ba      	ldr	r2, [r7, #8]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	429a      	cmp	r2, r3
 801c4fc:	d812      	bhi.n	801c524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c4fe:	687a      	ldr	r2, [r7, #4]
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	1ad2      	subs	r2, r2, r3
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	699b      	ldr	r3, [r3, #24]
 801c508:	429a      	cmp	r2, r3
 801c50a:	d302      	bcc.n	801c512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c50c:	2301      	movs	r3, #1
 801c50e:	617b      	str	r3, [r7, #20]
 801c510:	e01b      	b.n	801c54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c512:	4b10      	ldr	r3, [pc, #64]	@ (801c554 <prvInsertTimerInActiveList+0x7c>)
 801c514:	681a      	ldr	r2, [r3, #0]
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	3304      	adds	r3, #4
 801c51a:	4619      	mov	r1, r3
 801c51c:	4610      	mov	r0, r2
 801c51e:	f7fd fbb2 	bl	8019c86 <vListInsert>
 801c522:	e012      	b.n	801c54a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c524:	687a      	ldr	r2, [r7, #4]
 801c526:	683b      	ldr	r3, [r7, #0]
 801c528:	429a      	cmp	r2, r3
 801c52a:	d206      	bcs.n	801c53a <prvInsertTimerInActiveList+0x62>
 801c52c:	68ba      	ldr	r2, [r7, #8]
 801c52e:	683b      	ldr	r3, [r7, #0]
 801c530:	429a      	cmp	r2, r3
 801c532:	d302      	bcc.n	801c53a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c534:	2301      	movs	r3, #1
 801c536:	617b      	str	r3, [r7, #20]
 801c538:	e007      	b.n	801c54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c53a:	4b07      	ldr	r3, [pc, #28]	@ (801c558 <prvInsertTimerInActiveList+0x80>)
 801c53c:	681a      	ldr	r2, [r3, #0]
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	3304      	adds	r3, #4
 801c542:	4619      	mov	r1, r3
 801c544:	4610      	mov	r0, r2
 801c546:	f7fd fb9e 	bl	8019c86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c54a:	697b      	ldr	r3, [r7, #20]
}
 801c54c:	4618      	mov	r0, r3
 801c54e:	3718      	adds	r7, #24
 801c550:	46bd      	mov	sp, r7
 801c552:	bd80      	pop	{r7, pc}
 801c554:	20001ea4 	.word	0x20001ea4
 801c558:	20001ea0 	.word	0x20001ea0

0801c55c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b08e      	sub	sp, #56	@ 0x38
 801c560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c562:	e0ce      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	2b00      	cmp	r3, #0
 801c568:	da19      	bge.n	801c59e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c56a:	1d3b      	adds	r3, r7, #4
 801c56c:	3304      	adds	r3, #4
 801c56e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c572:	2b00      	cmp	r3, #0
 801c574:	d10b      	bne.n	801c58e <prvProcessReceivedCommands+0x32>
	__asm volatile
 801c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c57a:	f383 8811 	msr	BASEPRI, r3
 801c57e:	f3bf 8f6f 	isb	sy
 801c582:	f3bf 8f4f 	dsb	sy
 801c586:	61fb      	str	r3, [r7, #28]
}
 801c588:	bf00      	nop
 801c58a:	bf00      	nop
 801c58c:	e7fd      	b.n	801c58a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c594:	6850      	ldr	r0, [r2, #4]
 801c596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c598:	6892      	ldr	r2, [r2, #8]
 801c59a:	4611      	mov	r1, r2
 801c59c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	f2c0 80ae 	blt.w	801c702 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5ac:	695b      	ldr	r3, [r3, #20]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d004      	beq.n	801c5bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5b4:	3304      	adds	r3, #4
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7fd fb9e 	bl	8019cf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c5bc:	463b      	mov	r3, r7
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7ff ff6a 	bl	801c498 <prvSampleTimeNow>
 801c5c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	2b09      	cmp	r3, #9
 801c5ca:	f200 8097 	bhi.w	801c6fc <prvProcessReceivedCommands+0x1a0>
 801c5ce:	a201      	add	r2, pc, #4	@ (adr r2, 801c5d4 <prvProcessReceivedCommands+0x78>)
 801c5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5d4:	0801c5fd 	.word	0x0801c5fd
 801c5d8:	0801c5fd 	.word	0x0801c5fd
 801c5dc:	0801c5fd 	.word	0x0801c5fd
 801c5e0:	0801c673 	.word	0x0801c673
 801c5e4:	0801c687 	.word	0x0801c687
 801c5e8:	0801c6d3 	.word	0x0801c6d3
 801c5ec:	0801c5fd 	.word	0x0801c5fd
 801c5f0:	0801c5fd 	.word	0x0801c5fd
 801c5f4:	0801c673 	.word	0x0801c673
 801c5f8:	0801c687 	.word	0x0801c687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c602:	f043 0301 	orr.w	r3, r3, #1
 801c606:	b2da      	uxtb	r2, r3
 801c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c60a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c60e:	68ba      	ldr	r2, [r7, #8]
 801c610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c612:	699b      	ldr	r3, [r3, #24]
 801c614:	18d1      	adds	r1, r2, r3
 801c616:	68bb      	ldr	r3, [r7, #8]
 801c618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c61c:	f7ff ff5c 	bl	801c4d8 <prvInsertTimerInActiveList>
 801c620:	4603      	mov	r3, r0
 801c622:	2b00      	cmp	r3, #0
 801c624:	d06c      	beq.n	801c700 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c628:	6a1b      	ldr	r3, [r3, #32]
 801c62a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c62c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c634:	f003 0304 	and.w	r3, r3, #4
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d061      	beq.n	801c700 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c63c:	68ba      	ldr	r2, [r7, #8]
 801c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c640:	699b      	ldr	r3, [r3, #24]
 801c642:	441a      	add	r2, r3
 801c644:	2300      	movs	r3, #0
 801c646:	9300      	str	r3, [sp, #0]
 801c648:	2300      	movs	r3, #0
 801c64a:	2100      	movs	r1, #0
 801c64c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c64e:	f7ff fe01 	bl	801c254 <xTimerGenericCommand>
 801c652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c654:	6a3b      	ldr	r3, [r7, #32]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d152      	bne.n	801c700 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801c65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c65e:	f383 8811 	msr	BASEPRI, r3
 801c662:	f3bf 8f6f 	isb	sy
 801c666:	f3bf 8f4f 	dsb	sy
 801c66a:	61bb      	str	r3, [r7, #24]
}
 801c66c:	bf00      	nop
 801c66e:	bf00      	nop
 801c670:	e7fd      	b.n	801c66e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c678:	f023 0301 	bic.w	r3, r3, #1
 801c67c:	b2da      	uxtb	r2, r3
 801c67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c684:	e03d      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c68c:	f043 0301 	orr.w	r3, r3, #1
 801c690:	b2da      	uxtb	r2, r3
 801c692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c698:	68ba      	ldr	r2, [r7, #8]
 801c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c69c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6a0:	699b      	ldr	r3, [r3, #24]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d10b      	bne.n	801c6be <prvProcessReceivedCommands+0x162>
	__asm volatile
 801c6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6aa:	f383 8811 	msr	BASEPRI, r3
 801c6ae:	f3bf 8f6f 	isb	sy
 801c6b2:	f3bf 8f4f 	dsb	sy
 801c6b6:	617b      	str	r3, [r7, #20]
}
 801c6b8:	bf00      	nop
 801c6ba:	bf00      	nop
 801c6bc:	e7fd      	b.n	801c6ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6c0:	699a      	ldr	r2, [r3, #24]
 801c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c4:	18d1      	adds	r1, r2, r3
 801c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6cc:	f7ff ff04 	bl	801c4d8 <prvInsertTimerInActiveList>
					break;
 801c6d0:	e017      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c6d8:	f003 0302 	and.w	r3, r3, #2
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d103      	bne.n	801c6e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801c6e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6e2:	f000 fbe9 	bl	801ceb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c6e6:	e00c      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c6ee:	f023 0301 	bic.w	r3, r3, #1
 801c6f2:	b2da      	uxtb	r2, r3
 801c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c6fa:	e002      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801c6fc:	bf00      	nop
 801c6fe:	e000      	b.n	801c702 <prvProcessReceivedCommands+0x1a6>
					break;
 801c700:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c702:	4b08      	ldr	r3, [pc, #32]	@ (801c724 <prvProcessReceivedCommands+0x1c8>)
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	1d39      	adds	r1, r7, #4
 801c708:	2200      	movs	r2, #0
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7fd febc 	bl	801a488 <xQueueReceive>
 801c710:	4603      	mov	r3, r0
 801c712:	2b00      	cmp	r3, #0
 801c714:	f47f af26 	bne.w	801c564 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c718:	bf00      	nop
 801c71a:	bf00      	nop
 801c71c:	3730      	adds	r7, #48	@ 0x30
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}
 801c722:	bf00      	nop
 801c724:	20001ea8 	.word	0x20001ea8

0801c728 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c728:	b580      	push	{r7, lr}
 801c72a:	b088      	sub	sp, #32
 801c72c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c72e:	e049      	b.n	801c7c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c730:	4b2e      	ldr	r3, [pc, #184]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	68db      	ldr	r3, [r3, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c73a:	4b2c      	ldr	r3, [pc, #176]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	68db      	ldr	r3, [r3, #12]
 801c740:	68db      	ldr	r3, [r3, #12]
 801c742:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	3304      	adds	r3, #4
 801c748:	4618      	mov	r0, r3
 801c74a:	f7fd fad5 	bl	8019cf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	6a1b      	ldr	r3, [r3, #32]
 801c752:	68f8      	ldr	r0, [r7, #12]
 801c754:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c75c:	f003 0304 	and.w	r3, r3, #4
 801c760:	2b00      	cmp	r3, #0
 801c762:	d02f      	beq.n	801c7c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	699b      	ldr	r3, [r3, #24]
 801c768:	693a      	ldr	r2, [r7, #16]
 801c76a:	4413      	add	r3, r2
 801c76c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c76e:	68ba      	ldr	r2, [r7, #8]
 801c770:	693b      	ldr	r3, [r7, #16]
 801c772:	429a      	cmp	r2, r3
 801c774:	d90e      	bls.n	801c794 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	68ba      	ldr	r2, [r7, #8]
 801c77a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	68fa      	ldr	r2, [r7, #12]
 801c780:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c782:	4b1a      	ldr	r3, [pc, #104]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c784:	681a      	ldr	r2, [r3, #0]
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	3304      	adds	r3, #4
 801c78a:	4619      	mov	r1, r3
 801c78c:	4610      	mov	r0, r2
 801c78e:	f7fd fa7a 	bl	8019c86 <vListInsert>
 801c792:	e017      	b.n	801c7c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c794:	2300      	movs	r3, #0
 801c796:	9300      	str	r3, [sp, #0]
 801c798:	2300      	movs	r3, #0
 801c79a:	693a      	ldr	r2, [r7, #16]
 801c79c:	2100      	movs	r1, #0
 801c79e:	68f8      	ldr	r0, [r7, #12]
 801c7a0:	f7ff fd58 	bl	801c254 <xTimerGenericCommand>
 801c7a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d10b      	bne.n	801c7c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7b0:	f383 8811 	msr	BASEPRI, r3
 801c7b4:	f3bf 8f6f 	isb	sy
 801c7b8:	f3bf 8f4f 	dsb	sy
 801c7bc:	603b      	str	r3, [r7, #0]
}
 801c7be:	bf00      	nop
 801c7c0:	bf00      	nop
 801c7c2:	e7fd      	b.n	801c7c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c7c4:	4b09      	ldr	r3, [pc, #36]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d1b0      	bne.n	801c730 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c7ce:	4b07      	ldr	r3, [pc, #28]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c7d4:	4b06      	ldr	r3, [pc, #24]	@ (801c7f0 <prvSwitchTimerLists+0xc8>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	4a04      	ldr	r2, [pc, #16]	@ (801c7ec <prvSwitchTimerLists+0xc4>)
 801c7da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c7dc:	4a04      	ldr	r2, [pc, #16]	@ (801c7f0 <prvSwitchTimerLists+0xc8>)
 801c7de:	697b      	ldr	r3, [r7, #20]
 801c7e0:	6013      	str	r3, [r2, #0]
}
 801c7e2:	bf00      	nop
 801c7e4:	3718      	adds	r7, #24
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}
 801c7ea:	bf00      	nop
 801c7ec:	20001ea0 	.word	0x20001ea0
 801c7f0:	20001ea4 	.word	0x20001ea4

0801c7f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b082      	sub	sp, #8
 801c7f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c7fa:	f000 f96d 	bl	801cad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c7fe:	4b15      	ldr	r3, [pc, #84]	@ (801c854 <prvCheckForValidListAndQueue+0x60>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d120      	bne.n	801c848 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c806:	4814      	ldr	r0, [pc, #80]	@ (801c858 <prvCheckForValidListAndQueue+0x64>)
 801c808:	f7fd f9ec 	bl	8019be4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c80c:	4813      	ldr	r0, [pc, #76]	@ (801c85c <prvCheckForValidListAndQueue+0x68>)
 801c80e:	f7fd f9e9 	bl	8019be4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c812:	4b13      	ldr	r3, [pc, #76]	@ (801c860 <prvCheckForValidListAndQueue+0x6c>)
 801c814:	4a10      	ldr	r2, [pc, #64]	@ (801c858 <prvCheckForValidListAndQueue+0x64>)
 801c816:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c818:	4b12      	ldr	r3, [pc, #72]	@ (801c864 <prvCheckForValidListAndQueue+0x70>)
 801c81a:	4a10      	ldr	r2, [pc, #64]	@ (801c85c <prvCheckForValidListAndQueue+0x68>)
 801c81c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c81e:	2300      	movs	r3, #0
 801c820:	9300      	str	r3, [sp, #0]
 801c822:	4b11      	ldr	r3, [pc, #68]	@ (801c868 <prvCheckForValidListAndQueue+0x74>)
 801c824:	4a11      	ldr	r2, [pc, #68]	@ (801c86c <prvCheckForValidListAndQueue+0x78>)
 801c826:	2110      	movs	r1, #16
 801c828:	200a      	movs	r0, #10
 801c82a:	f7fd faf9 	bl	8019e20 <xQueueGenericCreateStatic>
 801c82e:	4603      	mov	r3, r0
 801c830:	4a08      	ldr	r2, [pc, #32]	@ (801c854 <prvCheckForValidListAndQueue+0x60>)
 801c832:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c834:	4b07      	ldr	r3, [pc, #28]	@ (801c854 <prvCheckForValidListAndQueue+0x60>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d005      	beq.n	801c848 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c83c:	4b05      	ldr	r3, [pc, #20]	@ (801c854 <prvCheckForValidListAndQueue+0x60>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	490b      	ldr	r1, [pc, #44]	@ (801c870 <prvCheckForValidListAndQueue+0x7c>)
 801c842:	4618      	mov	r0, r3
 801c844:	f7fe f9fa 	bl	801ac3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c848:	f000 f978 	bl	801cb3c <vPortExitCritical>
}
 801c84c:	bf00      	nop
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd80      	pop	{r7, pc}
 801c852:	bf00      	nop
 801c854:	20001ea8 	.word	0x20001ea8
 801c858:	20001e78 	.word	0x20001e78
 801c85c:	20001e8c 	.word	0x20001e8c
 801c860:	20001ea0 	.word	0x20001ea0
 801c864:	20001ea4 	.word	0x20001ea4
 801c868:	20001f54 	.word	0x20001f54
 801c86c:	20001eb4 	.word	0x20001eb4
 801c870:	0801eb70 	.word	0x0801eb70

0801c874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c874:	b480      	push	{r7}
 801c876:	b085      	sub	sp, #20
 801c878:	af00      	add	r7, sp, #0
 801c87a:	60f8      	str	r0, [r7, #12]
 801c87c:	60b9      	str	r1, [r7, #8]
 801c87e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	3b04      	subs	r3, #4
 801c884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c88c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	3b04      	subs	r3, #4
 801c892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c894:	68bb      	ldr	r3, [r7, #8]
 801c896:	f023 0201 	bic.w	r2, r3, #1
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	3b04      	subs	r3, #4
 801c8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c8a4:	4a0c      	ldr	r2, [pc, #48]	@ (801c8d8 <pxPortInitialiseStack+0x64>)
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	3b14      	subs	r3, #20
 801c8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c8b0:	687a      	ldr	r2, [r7, #4]
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	3b04      	subs	r3, #4
 801c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	f06f 0202 	mvn.w	r2, #2
 801c8c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	3b20      	subs	r3, #32
 801c8c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
}
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	3714      	adds	r7, #20
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d6:	4770      	bx	lr
 801c8d8:	0801c8dd 	.word	0x0801c8dd

0801c8dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c8dc:	b480      	push	{r7}
 801c8de:	b085      	sub	sp, #20
 801c8e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c8e6:	4b13      	ldr	r3, [pc, #76]	@ (801c934 <prvTaskExitError+0x58>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8ee:	d00b      	beq.n	801c908 <prvTaskExitError+0x2c>
	__asm volatile
 801c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c8f4:	f383 8811 	msr	BASEPRI, r3
 801c8f8:	f3bf 8f6f 	isb	sy
 801c8fc:	f3bf 8f4f 	dsb	sy
 801c900:	60fb      	str	r3, [r7, #12]
}
 801c902:	bf00      	nop
 801c904:	bf00      	nop
 801c906:	e7fd      	b.n	801c904 <prvTaskExitError+0x28>
	__asm volatile
 801c908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c90c:	f383 8811 	msr	BASEPRI, r3
 801c910:	f3bf 8f6f 	isb	sy
 801c914:	f3bf 8f4f 	dsb	sy
 801c918:	60bb      	str	r3, [r7, #8]
}
 801c91a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c91c:	bf00      	nop
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d0fc      	beq.n	801c91e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c924:	bf00      	nop
 801c926:	bf00      	nop
 801c928:	3714      	adds	r7, #20
 801c92a:	46bd      	mov	sp, r7
 801c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c930:	4770      	bx	lr
 801c932:	bf00      	nop
 801c934:	20000078 	.word	0x20000078
	...

0801c940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c940:	4b07      	ldr	r3, [pc, #28]	@ (801c960 <pxCurrentTCBConst2>)
 801c942:	6819      	ldr	r1, [r3, #0]
 801c944:	6808      	ldr	r0, [r1, #0]
 801c946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c94a:	f380 8809 	msr	PSP, r0
 801c94e:	f3bf 8f6f 	isb	sy
 801c952:	f04f 0000 	mov.w	r0, #0
 801c956:	f380 8811 	msr	BASEPRI, r0
 801c95a:	4770      	bx	lr
 801c95c:	f3af 8000 	nop.w

0801c960 <pxCurrentTCBConst2>:
 801c960:	20001978 	.word	0x20001978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c964:	bf00      	nop
 801c966:	bf00      	nop

0801c968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c968:	4808      	ldr	r0, [pc, #32]	@ (801c98c <prvPortStartFirstTask+0x24>)
 801c96a:	6800      	ldr	r0, [r0, #0]
 801c96c:	6800      	ldr	r0, [r0, #0]
 801c96e:	f380 8808 	msr	MSP, r0
 801c972:	f04f 0000 	mov.w	r0, #0
 801c976:	f380 8814 	msr	CONTROL, r0
 801c97a:	b662      	cpsie	i
 801c97c:	b661      	cpsie	f
 801c97e:	f3bf 8f4f 	dsb	sy
 801c982:	f3bf 8f6f 	isb	sy
 801c986:	df00      	svc	0
 801c988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c98a:	bf00      	nop
 801c98c:	e000ed08 	.word	0xe000ed08

0801c990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b086      	sub	sp, #24
 801c994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c996:	4b47      	ldr	r3, [pc, #284]	@ (801cab4 <xPortStartScheduler+0x124>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	4a47      	ldr	r2, [pc, #284]	@ (801cab8 <xPortStartScheduler+0x128>)
 801c99c:	4293      	cmp	r3, r2
 801c99e:	d10b      	bne.n	801c9b8 <xPortStartScheduler+0x28>
	__asm volatile
 801c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c9a4:	f383 8811 	msr	BASEPRI, r3
 801c9a8:	f3bf 8f6f 	isb	sy
 801c9ac:	f3bf 8f4f 	dsb	sy
 801c9b0:	613b      	str	r3, [r7, #16]
}
 801c9b2:	bf00      	nop
 801c9b4:	bf00      	nop
 801c9b6:	e7fd      	b.n	801c9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c9b8:	4b3e      	ldr	r3, [pc, #248]	@ (801cab4 <xPortStartScheduler+0x124>)
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	4a3f      	ldr	r2, [pc, #252]	@ (801cabc <xPortStartScheduler+0x12c>)
 801c9be:	4293      	cmp	r3, r2
 801c9c0:	d10b      	bne.n	801c9da <xPortStartScheduler+0x4a>
	__asm volatile
 801c9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c9c6:	f383 8811 	msr	BASEPRI, r3
 801c9ca:	f3bf 8f6f 	isb	sy
 801c9ce:	f3bf 8f4f 	dsb	sy
 801c9d2:	60fb      	str	r3, [r7, #12]
}
 801c9d4:	bf00      	nop
 801c9d6:	bf00      	nop
 801c9d8:	e7fd      	b.n	801c9d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c9da:	4b39      	ldr	r3, [pc, #228]	@ (801cac0 <xPortStartScheduler+0x130>)
 801c9dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c9de:	697b      	ldr	r3, [r7, #20]
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c9e6:	697b      	ldr	r3, [r7, #20]
 801c9e8:	22ff      	movs	r2, #255	@ 0xff
 801c9ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	b2db      	uxtb	r3, r3
 801c9f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c9f4:	78fb      	ldrb	r3, [r7, #3]
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c9fc:	b2da      	uxtb	r2, r3
 801c9fe:	4b31      	ldr	r3, [pc, #196]	@ (801cac4 <xPortStartScheduler+0x134>)
 801ca00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ca02:	4b31      	ldr	r3, [pc, #196]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca04:	2207      	movs	r2, #7
 801ca06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ca08:	e009      	b.n	801ca1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801ca0a:	4b2f      	ldr	r3, [pc, #188]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	3b01      	subs	r3, #1
 801ca10:	4a2d      	ldr	r2, [pc, #180]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ca14:	78fb      	ldrb	r3, [r7, #3]
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	005b      	lsls	r3, r3, #1
 801ca1a:	b2db      	uxtb	r3, r3
 801ca1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ca1e:	78fb      	ldrb	r3, [r7, #3]
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ca26:	2b80      	cmp	r3, #128	@ 0x80
 801ca28:	d0ef      	beq.n	801ca0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ca2a:	4b27      	ldr	r3, [pc, #156]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	f1c3 0307 	rsb	r3, r3, #7
 801ca32:	2b04      	cmp	r3, #4
 801ca34:	d00b      	beq.n	801ca4e <xPortStartScheduler+0xbe>
	__asm volatile
 801ca36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca3a:	f383 8811 	msr	BASEPRI, r3
 801ca3e:	f3bf 8f6f 	isb	sy
 801ca42:	f3bf 8f4f 	dsb	sy
 801ca46:	60bb      	str	r3, [r7, #8]
}
 801ca48:	bf00      	nop
 801ca4a:	bf00      	nop
 801ca4c:	e7fd      	b.n	801ca4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ca4e:	4b1e      	ldr	r3, [pc, #120]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	021b      	lsls	r3, r3, #8
 801ca54:	4a1c      	ldr	r2, [pc, #112]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ca58:	4b1b      	ldr	r3, [pc, #108]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ca60:	4a19      	ldr	r2, [pc, #100]	@ (801cac8 <xPortStartScheduler+0x138>)
 801ca62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	b2da      	uxtb	r2, r3
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ca6c:	4b17      	ldr	r3, [pc, #92]	@ (801cacc <xPortStartScheduler+0x13c>)
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	4a16      	ldr	r2, [pc, #88]	@ (801cacc <xPortStartScheduler+0x13c>)
 801ca72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801ca76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ca78:	4b14      	ldr	r3, [pc, #80]	@ (801cacc <xPortStartScheduler+0x13c>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	4a13      	ldr	r2, [pc, #76]	@ (801cacc <xPortStartScheduler+0x13c>)
 801ca7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801ca82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801ca84:	f000 f8da 	bl	801cc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801ca88:	4b11      	ldr	r3, [pc, #68]	@ (801cad0 <xPortStartScheduler+0x140>)
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801ca8e:	f000 f8f9 	bl	801cc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ca92:	4b10      	ldr	r3, [pc, #64]	@ (801cad4 <xPortStartScheduler+0x144>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	4a0f      	ldr	r2, [pc, #60]	@ (801cad4 <xPortStartScheduler+0x144>)
 801ca98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801ca9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801ca9e:	f7ff ff63 	bl	801c968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801caa2:	f7fe fd15 	bl	801b4d0 <vTaskSwitchContext>
	prvTaskExitError();
 801caa6:	f7ff ff19 	bl	801c8dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801caaa:	2300      	movs	r3, #0
}
 801caac:	4618      	mov	r0, r3
 801caae:	3718      	adds	r7, #24
 801cab0:	46bd      	mov	sp, r7
 801cab2:	bd80      	pop	{r7, pc}
 801cab4:	e000ed00 	.word	0xe000ed00
 801cab8:	410fc271 	.word	0x410fc271
 801cabc:	410fc270 	.word	0x410fc270
 801cac0:	e000e400 	.word	0xe000e400
 801cac4:	20001fa4 	.word	0x20001fa4
 801cac8:	20001fa8 	.word	0x20001fa8
 801cacc:	e000ed20 	.word	0xe000ed20
 801cad0:	20000078 	.word	0x20000078
 801cad4:	e000ef34 	.word	0xe000ef34

0801cad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801cad8:	b480      	push	{r7}
 801cada:	b083      	sub	sp, #12
 801cadc:	af00      	add	r7, sp, #0
	__asm volatile
 801cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cae2:	f383 8811 	msr	BASEPRI, r3
 801cae6:	f3bf 8f6f 	isb	sy
 801caea:	f3bf 8f4f 	dsb	sy
 801caee:	607b      	str	r3, [r7, #4]
}
 801caf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801caf2:	4b10      	ldr	r3, [pc, #64]	@ (801cb34 <vPortEnterCritical+0x5c>)
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	3301      	adds	r3, #1
 801caf8:	4a0e      	ldr	r2, [pc, #56]	@ (801cb34 <vPortEnterCritical+0x5c>)
 801cafa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801cafc:	4b0d      	ldr	r3, [pc, #52]	@ (801cb34 <vPortEnterCritical+0x5c>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	2b01      	cmp	r3, #1
 801cb02:	d110      	bne.n	801cb26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801cb04:	4b0c      	ldr	r3, [pc, #48]	@ (801cb38 <vPortEnterCritical+0x60>)
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	b2db      	uxtb	r3, r3
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d00b      	beq.n	801cb26 <vPortEnterCritical+0x4e>
	__asm volatile
 801cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cb12:	f383 8811 	msr	BASEPRI, r3
 801cb16:	f3bf 8f6f 	isb	sy
 801cb1a:	f3bf 8f4f 	dsb	sy
 801cb1e:	603b      	str	r3, [r7, #0]
}
 801cb20:	bf00      	nop
 801cb22:	bf00      	nop
 801cb24:	e7fd      	b.n	801cb22 <vPortEnterCritical+0x4a>
	}
}
 801cb26:	bf00      	nop
 801cb28:	370c      	adds	r7, #12
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb30:	4770      	bx	lr
 801cb32:	bf00      	nop
 801cb34:	20000078 	.word	0x20000078
 801cb38:	e000ed04 	.word	0xe000ed04

0801cb3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801cb3c:	b480      	push	{r7}
 801cb3e:	b083      	sub	sp, #12
 801cb40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801cb42:	4b12      	ldr	r3, [pc, #72]	@ (801cb8c <vPortExitCritical+0x50>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d10b      	bne.n	801cb62 <vPortExitCritical+0x26>
	__asm volatile
 801cb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cb4e:	f383 8811 	msr	BASEPRI, r3
 801cb52:	f3bf 8f6f 	isb	sy
 801cb56:	f3bf 8f4f 	dsb	sy
 801cb5a:	607b      	str	r3, [r7, #4]
}
 801cb5c:	bf00      	nop
 801cb5e:	bf00      	nop
 801cb60:	e7fd      	b.n	801cb5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801cb62:	4b0a      	ldr	r3, [pc, #40]	@ (801cb8c <vPortExitCritical+0x50>)
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	3b01      	subs	r3, #1
 801cb68:	4a08      	ldr	r2, [pc, #32]	@ (801cb8c <vPortExitCritical+0x50>)
 801cb6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801cb6c:	4b07      	ldr	r3, [pc, #28]	@ (801cb8c <vPortExitCritical+0x50>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d105      	bne.n	801cb80 <vPortExitCritical+0x44>
 801cb74:	2300      	movs	r3, #0
 801cb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cb78:	683b      	ldr	r3, [r7, #0]
 801cb7a:	f383 8811 	msr	BASEPRI, r3
}
 801cb7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801cb80:	bf00      	nop
 801cb82:	370c      	adds	r7, #12
 801cb84:	46bd      	mov	sp, r7
 801cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8a:	4770      	bx	lr
 801cb8c:	20000078 	.word	0x20000078

0801cb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801cb90:	f3ef 8009 	mrs	r0, PSP
 801cb94:	f3bf 8f6f 	isb	sy
 801cb98:	4b15      	ldr	r3, [pc, #84]	@ (801cbf0 <pxCurrentTCBConst>)
 801cb9a:	681a      	ldr	r2, [r3, #0]
 801cb9c:	f01e 0f10 	tst.w	lr, #16
 801cba0:	bf08      	it	eq
 801cba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801cba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbaa:	6010      	str	r0, [r2, #0]
 801cbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 801cbb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801cbb4:	f380 8811 	msr	BASEPRI, r0
 801cbb8:	f3bf 8f4f 	dsb	sy
 801cbbc:	f3bf 8f6f 	isb	sy
 801cbc0:	f7fe fc86 	bl	801b4d0 <vTaskSwitchContext>
 801cbc4:	f04f 0000 	mov.w	r0, #0
 801cbc8:	f380 8811 	msr	BASEPRI, r0
 801cbcc:	bc09      	pop	{r0, r3}
 801cbce:	6819      	ldr	r1, [r3, #0]
 801cbd0:	6808      	ldr	r0, [r1, #0]
 801cbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbd6:	f01e 0f10 	tst.w	lr, #16
 801cbda:	bf08      	it	eq
 801cbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801cbe0:	f380 8809 	msr	PSP, r0
 801cbe4:	f3bf 8f6f 	isb	sy
 801cbe8:	4770      	bx	lr
 801cbea:	bf00      	nop
 801cbec:	f3af 8000 	nop.w

0801cbf0 <pxCurrentTCBConst>:
 801cbf0:	20001978 	.word	0x20001978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801cbf4:	bf00      	nop
 801cbf6:	bf00      	nop

0801cbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801cbf8:	b580      	push	{r7, lr}
 801cbfa:	b082      	sub	sp, #8
 801cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 801cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cc02:	f383 8811 	msr	BASEPRI, r3
 801cc06:	f3bf 8f6f 	isb	sy
 801cc0a:	f3bf 8f4f 	dsb	sy
 801cc0e:	607b      	str	r3, [r7, #4]
}
 801cc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801cc12:	f7fe fba3 	bl	801b35c <xTaskIncrementTick>
 801cc16:	4603      	mov	r3, r0
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d003      	beq.n	801cc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801cc1c:	4b06      	ldr	r3, [pc, #24]	@ (801cc38 <xPortSysTickHandler+0x40>)
 801cc1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cc22:	601a      	str	r2, [r3, #0]
 801cc24:	2300      	movs	r3, #0
 801cc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cc28:	683b      	ldr	r3, [r7, #0]
 801cc2a:	f383 8811 	msr	BASEPRI, r3
}
 801cc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801cc30:	bf00      	nop
 801cc32:	3708      	adds	r7, #8
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	e000ed04 	.word	0xe000ed04

0801cc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801cc3c:	b480      	push	{r7}
 801cc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801cc40:	4b0b      	ldr	r3, [pc, #44]	@ (801cc70 <vPortSetupTimerInterrupt+0x34>)
 801cc42:	2200      	movs	r2, #0
 801cc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801cc46:	4b0b      	ldr	r3, [pc, #44]	@ (801cc74 <vPortSetupTimerInterrupt+0x38>)
 801cc48:	2200      	movs	r2, #0
 801cc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801cc4c:	4b0a      	ldr	r3, [pc, #40]	@ (801cc78 <vPortSetupTimerInterrupt+0x3c>)
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	4a0a      	ldr	r2, [pc, #40]	@ (801cc7c <vPortSetupTimerInterrupt+0x40>)
 801cc52:	fba2 2303 	umull	r2, r3, r2, r3
 801cc56:	099b      	lsrs	r3, r3, #6
 801cc58:	4a09      	ldr	r2, [pc, #36]	@ (801cc80 <vPortSetupTimerInterrupt+0x44>)
 801cc5a:	3b01      	subs	r3, #1
 801cc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801cc5e:	4b04      	ldr	r3, [pc, #16]	@ (801cc70 <vPortSetupTimerInterrupt+0x34>)
 801cc60:	2207      	movs	r2, #7
 801cc62:	601a      	str	r2, [r3, #0]
}
 801cc64:	bf00      	nop
 801cc66:	46bd      	mov	sp, r7
 801cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc6c:	4770      	bx	lr
 801cc6e:	bf00      	nop
 801cc70:	e000e010 	.word	0xe000e010
 801cc74:	e000e018 	.word	0xe000e018
 801cc78:	20000008 	.word	0x20000008
 801cc7c:	10624dd3 	.word	0x10624dd3
 801cc80:	e000e014 	.word	0xe000e014

0801cc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801cc84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801cc94 <vPortEnableVFP+0x10>
 801cc88:	6801      	ldr	r1, [r0, #0]
 801cc8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801cc8e:	6001      	str	r1, [r0, #0]
 801cc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801cc92:	bf00      	nop
 801cc94:	e000ed88 	.word	0xe000ed88

0801cc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801cc98:	b480      	push	{r7}
 801cc9a:	b085      	sub	sp, #20
 801cc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801cc9e:	f3ef 8305 	mrs	r3, IPSR
 801cca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	2b0f      	cmp	r3, #15
 801cca8:	d915      	bls.n	801ccd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ccaa:	4a18      	ldr	r2, [pc, #96]	@ (801cd0c <vPortValidateInterruptPriority+0x74>)
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	4413      	add	r3, r2
 801ccb0:	781b      	ldrb	r3, [r3, #0]
 801ccb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ccb4:	4b16      	ldr	r3, [pc, #88]	@ (801cd10 <vPortValidateInterruptPriority+0x78>)
 801ccb6:	781b      	ldrb	r3, [r3, #0]
 801ccb8:	7afa      	ldrb	r2, [r7, #11]
 801ccba:	429a      	cmp	r2, r3
 801ccbc:	d20b      	bcs.n	801ccd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ccc2:	f383 8811 	msr	BASEPRI, r3
 801ccc6:	f3bf 8f6f 	isb	sy
 801ccca:	f3bf 8f4f 	dsb	sy
 801ccce:	607b      	str	r3, [r7, #4]
}
 801ccd0:	bf00      	nop
 801ccd2:	bf00      	nop
 801ccd4:	e7fd      	b.n	801ccd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ccd6:	4b0f      	ldr	r3, [pc, #60]	@ (801cd14 <vPortValidateInterruptPriority+0x7c>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801ccde:	4b0e      	ldr	r3, [pc, #56]	@ (801cd18 <vPortValidateInterruptPriority+0x80>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	429a      	cmp	r2, r3
 801cce4:	d90b      	bls.n	801ccfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ccea:	f383 8811 	msr	BASEPRI, r3
 801ccee:	f3bf 8f6f 	isb	sy
 801ccf2:	f3bf 8f4f 	dsb	sy
 801ccf6:	603b      	str	r3, [r7, #0]
}
 801ccf8:	bf00      	nop
 801ccfa:	bf00      	nop
 801ccfc:	e7fd      	b.n	801ccfa <vPortValidateInterruptPriority+0x62>
	}
 801ccfe:	bf00      	nop
 801cd00:	3714      	adds	r7, #20
 801cd02:	46bd      	mov	sp, r7
 801cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd08:	4770      	bx	lr
 801cd0a:	bf00      	nop
 801cd0c:	e000e3f0 	.word	0xe000e3f0
 801cd10:	20001fa4 	.word	0x20001fa4
 801cd14:	e000ed0c 	.word	0xe000ed0c
 801cd18:	20001fa8 	.word	0x20001fa8

0801cd1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b08a      	sub	sp, #40	@ 0x28
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801cd24:	2300      	movs	r3, #0
 801cd26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801cd28:	f7fe fa4a 	bl	801b1c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801cd2c:	4b5c      	ldr	r3, [pc, #368]	@ (801cea0 <pvPortMalloc+0x184>)
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d101      	bne.n	801cd38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801cd34:	f000 f924 	bl	801cf80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801cd38:	4b5a      	ldr	r3, [pc, #360]	@ (801cea4 <pvPortMalloc+0x188>)
 801cd3a:	681a      	ldr	r2, [r3, #0]
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	4013      	ands	r3, r2
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f040 8095 	bne.w	801ce70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d01e      	beq.n	801cd8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801cd4c:	2208      	movs	r2, #8
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	4413      	add	r3, r2
 801cd52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	f003 0307 	and.w	r3, r3, #7
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d015      	beq.n	801cd8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	f023 0307 	bic.w	r3, r3, #7
 801cd64:	3308      	adds	r3, #8
 801cd66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f003 0307 	and.w	r3, r3, #7
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d00b      	beq.n	801cd8a <pvPortMalloc+0x6e>
	__asm volatile
 801cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cd76:	f383 8811 	msr	BASEPRI, r3
 801cd7a:	f3bf 8f6f 	isb	sy
 801cd7e:	f3bf 8f4f 	dsb	sy
 801cd82:	617b      	str	r3, [r7, #20]
}
 801cd84:	bf00      	nop
 801cd86:	bf00      	nop
 801cd88:	e7fd      	b.n	801cd86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d06f      	beq.n	801ce70 <pvPortMalloc+0x154>
 801cd90:	4b45      	ldr	r3, [pc, #276]	@ (801cea8 <pvPortMalloc+0x18c>)
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	687a      	ldr	r2, [r7, #4]
 801cd96:	429a      	cmp	r2, r3
 801cd98:	d86a      	bhi.n	801ce70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801cd9a:	4b44      	ldr	r3, [pc, #272]	@ (801ceac <pvPortMalloc+0x190>)
 801cd9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801cd9e:	4b43      	ldr	r3, [pc, #268]	@ (801ceac <pvPortMalloc+0x190>)
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cda4:	e004      	b.n	801cdb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cda8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdb2:	685b      	ldr	r3, [r3, #4]
 801cdb4:	687a      	ldr	r2, [r7, #4]
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	d903      	bls.n	801cdc2 <pvPortMalloc+0xa6>
 801cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d1f1      	bne.n	801cda6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801cdc2:	4b37      	ldr	r3, [pc, #220]	@ (801cea0 <pvPortMalloc+0x184>)
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cdc8:	429a      	cmp	r2, r3
 801cdca:	d051      	beq.n	801ce70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801cdcc:	6a3b      	ldr	r3, [r7, #32]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	2208      	movs	r2, #8
 801cdd2:	4413      	add	r3, r2
 801cdd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdd8:	681a      	ldr	r2, [r3, #0]
 801cdda:	6a3b      	ldr	r3, [r7, #32]
 801cddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cde0:	685a      	ldr	r2, [r3, #4]
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	1ad2      	subs	r2, r2, r3
 801cde6:	2308      	movs	r3, #8
 801cde8:	005b      	lsls	r3, r3, #1
 801cdea:	429a      	cmp	r2, r3
 801cdec:	d920      	bls.n	801ce30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801cdee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	4413      	add	r3, r2
 801cdf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cdf6:	69bb      	ldr	r3, [r7, #24]
 801cdf8:	f003 0307 	and.w	r3, r3, #7
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d00b      	beq.n	801ce18 <pvPortMalloc+0xfc>
	__asm volatile
 801ce00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ce04:	f383 8811 	msr	BASEPRI, r3
 801ce08:	f3bf 8f6f 	isb	sy
 801ce0c:	f3bf 8f4f 	dsb	sy
 801ce10:	613b      	str	r3, [r7, #16]
}
 801ce12:	bf00      	nop
 801ce14:	bf00      	nop
 801ce16:	e7fd      	b.n	801ce14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce1a:	685a      	ldr	r2, [r3, #4]
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	1ad2      	subs	r2, r2, r3
 801ce20:	69bb      	ldr	r3, [r7, #24]
 801ce22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce26:	687a      	ldr	r2, [r7, #4]
 801ce28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ce2a:	69b8      	ldr	r0, [r7, #24]
 801ce2c:	f000 f90a 	bl	801d044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ce30:	4b1d      	ldr	r3, [pc, #116]	@ (801cea8 <pvPortMalloc+0x18c>)
 801ce32:	681a      	ldr	r2, [r3, #0]
 801ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce36:	685b      	ldr	r3, [r3, #4]
 801ce38:	1ad3      	subs	r3, r2, r3
 801ce3a:	4a1b      	ldr	r2, [pc, #108]	@ (801cea8 <pvPortMalloc+0x18c>)
 801ce3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ce3e:	4b1a      	ldr	r3, [pc, #104]	@ (801cea8 <pvPortMalloc+0x18c>)
 801ce40:	681a      	ldr	r2, [r3, #0]
 801ce42:	4b1b      	ldr	r3, [pc, #108]	@ (801ceb0 <pvPortMalloc+0x194>)
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	429a      	cmp	r2, r3
 801ce48:	d203      	bcs.n	801ce52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ce4a:	4b17      	ldr	r3, [pc, #92]	@ (801cea8 <pvPortMalloc+0x18c>)
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	4a18      	ldr	r2, [pc, #96]	@ (801ceb0 <pvPortMalloc+0x194>)
 801ce50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce54:	685a      	ldr	r2, [r3, #4]
 801ce56:	4b13      	ldr	r3, [pc, #76]	@ (801cea4 <pvPortMalloc+0x188>)
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	431a      	orrs	r2, r3
 801ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce62:	2200      	movs	r2, #0
 801ce64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ce66:	4b13      	ldr	r3, [pc, #76]	@ (801ceb4 <pvPortMalloc+0x198>)
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	3301      	adds	r3, #1
 801ce6c:	4a11      	ldr	r2, [pc, #68]	@ (801ceb4 <pvPortMalloc+0x198>)
 801ce6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ce70:	f7fe f9b4 	bl	801b1dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ce74:	69fb      	ldr	r3, [r7, #28]
 801ce76:	f003 0307 	and.w	r3, r3, #7
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d00b      	beq.n	801ce96 <pvPortMalloc+0x17a>
	__asm volatile
 801ce7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ce82:	f383 8811 	msr	BASEPRI, r3
 801ce86:	f3bf 8f6f 	isb	sy
 801ce8a:	f3bf 8f4f 	dsb	sy
 801ce8e:	60fb      	str	r3, [r7, #12]
}
 801ce90:	bf00      	nop
 801ce92:	bf00      	nop
 801ce94:	e7fd      	b.n	801ce92 <pvPortMalloc+0x176>
	return pvReturn;
 801ce96:	69fb      	ldr	r3, [r7, #28]
}
 801ce98:	4618      	mov	r0, r3
 801ce9a:	3728      	adds	r7, #40	@ 0x28
 801ce9c:	46bd      	mov	sp, r7
 801ce9e:	bd80      	pop	{r7, pc}
 801cea0:	20004fb4 	.word	0x20004fb4
 801cea4:	20004fc8 	.word	0x20004fc8
 801cea8:	20004fb8 	.word	0x20004fb8
 801ceac:	20004fac 	.word	0x20004fac
 801ceb0:	20004fbc 	.word	0x20004fbc
 801ceb4:	20004fc0 	.word	0x20004fc0

0801ceb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b086      	sub	sp, #24
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d04f      	beq.n	801cf6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ceca:	2308      	movs	r3, #8
 801cecc:	425b      	negs	r3, r3
 801cece:	697a      	ldr	r2, [r7, #20]
 801ced0:	4413      	add	r3, r2
 801ced2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ced4:	697b      	ldr	r3, [r7, #20]
 801ced6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ced8:	693b      	ldr	r3, [r7, #16]
 801ceda:	685a      	ldr	r2, [r3, #4]
 801cedc:	4b25      	ldr	r3, [pc, #148]	@ (801cf74 <vPortFree+0xbc>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	4013      	ands	r3, r2
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d10b      	bne.n	801cefe <vPortFree+0x46>
	__asm volatile
 801cee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ceea:	f383 8811 	msr	BASEPRI, r3
 801ceee:	f3bf 8f6f 	isb	sy
 801cef2:	f3bf 8f4f 	dsb	sy
 801cef6:	60fb      	str	r3, [r7, #12]
}
 801cef8:	bf00      	nop
 801cefa:	bf00      	nop
 801cefc:	e7fd      	b.n	801cefa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cefe:	693b      	ldr	r3, [r7, #16]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d00b      	beq.n	801cf1e <vPortFree+0x66>
	__asm volatile
 801cf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801cf0a:	f383 8811 	msr	BASEPRI, r3
 801cf0e:	f3bf 8f6f 	isb	sy
 801cf12:	f3bf 8f4f 	dsb	sy
 801cf16:	60bb      	str	r3, [r7, #8]
}
 801cf18:	bf00      	nop
 801cf1a:	bf00      	nop
 801cf1c:	e7fd      	b.n	801cf1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801cf1e:	693b      	ldr	r3, [r7, #16]
 801cf20:	685a      	ldr	r2, [r3, #4]
 801cf22:	4b14      	ldr	r3, [pc, #80]	@ (801cf74 <vPortFree+0xbc>)
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	4013      	ands	r3, r2
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d01e      	beq.n	801cf6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801cf2c:	693b      	ldr	r3, [r7, #16]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d11a      	bne.n	801cf6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801cf34:	693b      	ldr	r3, [r7, #16]
 801cf36:	685a      	ldr	r2, [r3, #4]
 801cf38:	4b0e      	ldr	r3, [pc, #56]	@ (801cf74 <vPortFree+0xbc>)
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	43db      	mvns	r3, r3
 801cf3e:	401a      	ands	r2, r3
 801cf40:	693b      	ldr	r3, [r7, #16]
 801cf42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cf44:	f7fe f93c 	bl	801b1c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801cf48:	693b      	ldr	r3, [r7, #16]
 801cf4a:	685a      	ldr	r2, [r3, #4]
 801cf4c:	4b0a      	ldr	r3, [pc, #40]	@ (801cf78 <vPortFree+0xc0>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	4413      	add	r3, r2
 801cf52:	4a09      	ldr	r2, [pc, #36]	@ (801cf78 <vPortFree+0xc0>)
 801cf54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801cf56:	6938      	ldr	r0, [r7, #16]
 801cf58:	f000 f874 	bl	801d044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cf5c:	4b07      	ldr	r3, [pc, #28]	@ (801cf7c <vPortFree+0xc4>)
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	3301      	adds	r3, #1
 801cf62:	4a06      	ldr	r2, [pc, #24]	@ (801cf7c <vPortFree+0xc4>)
 801cf64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cf66:	f7fe f939 	bl	801b1dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cf6a:	bf00      	nop
 801cf6c:	3718      	adds	r7, #24
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	bd80      	pop	{r7, pc}
 801cf72:	bf00      	nop
 801cf74:	20004fc8 	.word	0x20004fc8
 801cf78:	20004fb8 	.word	0x20004fb8
 801cf7c:	20004fc4 	.word	0x20004fc4

0801cf80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cf80:	b480      	push	{r7}
 801cf82:	b085      	sub	sp, #20
 801cf84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cf86:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 801cf8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cf8c:	4b27      	ldr	r3, [pc, #156]	@ (801d02c <prvHeapInit+0xac>)
 801cf8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	f003 0307 	and.w	r3, r3, #7
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d00c      	beq.n	801cfb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	3307      	adds	r3, #7
 801cf9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	f023 0307 	bic.w	r3, r3, #7
 801cfa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cfa8:	68ba      	ldr	r2, [r7, #8]
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	1ad3      	subs	r3, r2, r3
 801cfae:	4a1f      	ldr	r2, [pc, #124]	@ (801d02c <prvHeapInit+0xac>)
 801cfb0:	4413      	add	r3, r2
 801cfb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801cfb8:	4a1d      	ldr	r2, [pc, #116]	@ (801d030 <prvHeapInit+0xb0>)
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801cfbe:	4b1c      	ldr	r3, [pc, #112]	@ (801d030 <prvHeapInit+0xb0>)
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	68ba      	ldr	r2, [r7, #8]
 801cfc8:	4413      	add	r3, r2
 801cfca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cfcc:	2208      	movs	r2, #8
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	1a9b      	subs	r3, r3, r2
 801cfd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	f023 0307 	bic.w	r3, r3, #7
 801cfda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	4a15      	ldr	r2, [pc, #84]	@ (801d034 <prvHeapInit+0xb4>)
 801cfe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cfe2:	4b14      	ldr	r3, [pc, #80]	@ (801d034 <prvHeapInit+0xb4>)
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	2200      	movs	r2, #0
 801cfe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cfea:	4b12      	ldr	r3, [pc, #72]	@ (801d034 <prvHeapInit+0xb4>)
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	2200      	movs	r2, #0
 801cff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	68fa      	ldr	r2, [r7, #12]
 801cffa:	1ad2      	subs	r2, r2, r3
 801cffc:	683b      	ldr	r3, [r7, #0]
 801cffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801d000:	4b0c      	ldr	r3, [pc, #48]	@ (801d034 <prvHeapInit+0xb4>)
 801d002:	681a      	ldr	r2, [r3, #0]
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d008:	683b      	ldr	r3, [r7, #0]
 801d00a:	685b      	ldr	r3, [r3, #4]
 801d00c:	4a0a      	ldr	r2, [pc, #40]	@ (801d038 <prvHeapInit+0xb8>)
 801d00e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d010:	683b      	ldr	r3, [r7, #0]
 801d012:	685b      	ldr	r3, [r3, #4]
 801d014:	4a09      	ldr	r2, [pc, #36]	@ (801d03c <prvHeapInit+0xbc>)
 801d016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801d018:	4b09      	ldr	r3, [pc, #36]	@ (801d040 <prvHeapInit+0xc0>)
 801d01a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801d01e:	601a      	str	r2, [r3, #0]
}
 801d020:	bf00      	nop
 801d022:	3714      	adds	r7, #20
 801d024:	46bd      	mov	sp, r7
 801d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02a:	4770      	bx	lr
 801d02c:	20001fac 	.word	0x20001fac
 801d030:	20004fac 	.word	0x20004fac
 801d034:	20004fb4 	.word	0x20004fb4
 801d038:	20004fbc 	.word	0x20004fbc
 801d03c:	20004fb8 	.word	0x20004fb8
 801d040:	20004fc8 	.word	0x20004fc8

0801d044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801d044:	b480      	push	{r7}
 801d046:	b085      	sub	sp, #20
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801d04c:	4b28      	ldr	r3, [pc, #160]	@ (801d0f0 <prvInsertBlockIntoFreeList+0xac>)
 801d04e:	60fb      	str	r3, [r7, #12]
 801d050:	e002      	b.n	801d058 <prvInsertBlockIntoFreeList+0x14>
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	60fb      	str	r3, [r7, #12]
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	687a      	ldr	r2, [r7, #4]
 801d05e:	429a      	cmp	r2, r3
 801d060:	d8f7      	bhi.n	801d052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	68ba      	ldr	r2, [r7, #8]
 801d06c:	4413      	add	r3, r2
 801d06e:	687a      	ldr	r2, [r7, #4]
 801d070:	429a      	cmp	r2, r3
 801d072:	d108      	bne.n	801d086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	685a      	ldr	r2, [r3, #4]
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	685b      	ldr	r3, [r3, #4]
 801d07c:	441a      	add	r2, r3
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	685b      	ldr	r3, [r3, #4]
 801d08e:	68ba      	ldr	r2, [r7, #8]
 801d090:	441a      	add	r2, r3
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	429a      	cmp	r2, r3
 801d098:	d118      	bne.n	801d0cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	681a      	ldr	r2, [r3, #0]
 801d09e:	4b15      	ldr	r3, [pc, #84]	@ (801d0f4 <prvInsertBlockIntoFreeList+0xb0>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	429a      	cmp	r2, r3
 801d0a4:	d00d      	beq.n	801d0c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	685a      	ldr	r2, [r3, #4]
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	685b      	ldr	r3, [r3, #4]
 801d0b0:	441a      	add	r2, r3
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	681a      	ldr	r2, [r3, #0]
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	601a      	str	r2, [r3, #0]
 801d0c0:	e008      	b.n	801d0d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801d0c2:	4b0c      	ldr	r3, [pc, #48]	@ (801d0f4 <prvInsertBlockIntoFreeList+0xb0>)
 801d0c4:	681a      	ldr	r2, [r3, #0]
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	601a      	str	r2, [r3, #0]
 801d0ca:	e003      	b.n	801d0d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	681a      	ldr	r2, [r3, #0]
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801d0d4:	68fa      	ldr	r2, [r7, #12]
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d002      	beq.n	801d0e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	687a      	ldr	r2, [r7, #4]
 801d0e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d0e2:	bf00      	nop
 801d0e4:	3714      	adds	r7, #20
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ec:	4770      	bx	lr
 801d0ee:	bf00      	nop
 801d0f0:	20004fac 	.word	0x20004fac
 801d0f4:	20004fb4 	.word	0x20004fb4

0801d0f8 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b084      	sub	sp, #16
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d003      	beq.n	801d10e <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d106:	f06f 0301 	mvn.w	r3, #1
 801d10a:	60fb      	str	r3, [r7, #12]
 801d10c:	e015      	b.n	801d13a <CUSTOM_RANGING_SENSOR_Init+0x42>
  }
  else
  {
    reset_device();
 801d10e:	f000 f941 	bl	801d394 <reset_device>

    switch (Instance)
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d10c      	bne.n	801d132 <CUSTOM_RANGING_SENSOR_Init+0x3a>
    {
#if (USE_CUSTOM_RANGING_VL53L4CX == 1U)
      case CUSTOM_VL53L4CX:
        if (VL53L4CX_Probe(Instance) != BSP_ERROR_NONE)
 801d118:	6878      	ldr	r0, [r7, #4]
 801d11a:	f000 f8bb 	bl	801d294 <VL53L4CX_Probe>
 801d11e:	4603      	mov	r3, r0
 801d120:	2b00      	cmp	r3, #0
 801d122:	d003      	beq.n	801d12c <CUSTOM_RANGING_SENSOR_Init+0x34>
        {
          ret = BSP_ERROR_NO_INIT;
 801d124:	f04f 33ff 	mov.w	r3, #4294967295
 801d128:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          ret = BSP_ERROR_NONE;
        }
        break;
 801d12a:	e006      	b.n	801d13a <CUSTOM_RANGING_SENSOR_Init+0x42>
          ret = BSP_ERROR_NONE;
 801d12c:	2300      	movs	r3, #0
 801d12e:	60fb      	str	r3, [r7, #12]
        break;
 801d130:	e003      	b.n	801d13a <CUSTOM_RANGING_SENSOR_Init+0x42>
#endif /* Use custom ranging */
      default:
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801d132:	f06f 0306 	mvn.w	r3, #6
 801d136:	60fb      	str	r3, [r7, #12]
        break;
 801d138:	bf00      	nop
    }
  }

  return ret;
 801d13a:	68fb      	ldr	r3, [r7, #12]
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3710      	adds	r7, #16
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}

0801d144 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b084      	sub	sp, #16
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
 801d14c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d003      	beq.n	801d15c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d154:	f06f 0301 	mvn.w	r3, #1
 801d158:	60fb      	str	r3, [r7, #12]
 801d15a:	e014      	b.n	801d186 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 801d15c:	4a0c      	ldr	r2, [pc, #48]	@ (801d190 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d164:	691b      	ldr	r3, [r3, #16]
 801d166:	490b      	ldr	r1, [pc, #44]	@ (801d194 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 801d168:	687a      	ldr	r2, [r7, #4]
 801d16a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d16e:	6839      	ldr	r1, [r7, #0]
 801d170:	4610      	mov	r0, r2
 801d172:	4798      	blx	r3
 801d174:	4603      	mov	r3, r0
 801d176:	2b00      	cmp	r3, #0
 801d178:	da03      	bge.n	801d182 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d17a:	f06f 0304 	mvn.w	r3, #4
 801d17e:	60fb      	str	r3, [r7, #12]
 801d180:	e001      	b.n	801d186 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 801d182:	2300      	movs	r3, #0
 801d184:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801d186:	68fb      	ldr	r3, [r7, #12]
}
 801d188:	4618      	mov	r0, r3
 801d18a:	3710      	adds	r7, #16
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bd80      	pop	{r7, pc}
 801d190:	20004fd0 	.word	0x20004fd0
 801d194:	20004fcc 	.word	0x20004fcc

0801d198 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 801d198:	b580      	push	{r7, lr}
 801d19a:	b084      	sub	sp, #16
 801d19c:	af00      	add	r7, sp, #0
 801d19e:	6078      	str	r0, [r7, #4]
 801d1a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d003      	beq.n	801d1b0 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d1a8:	f06f 0301 	mvn.w	r3, #1
 801d1ac:	60fb      	str	r3, [r7, #12]
 801d1ae:	e014      	b.n	801d1da <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 801d1b0:	4a0c      	ldr	r2, [pc, #48]	@ (801d1e4 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d1b8:	69db      	ldr	r3, [r3, #28]
 801d1ba:	490b      	ldr	r1, [pc, #44]	@ (801d1e8 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 801d1bc:	687a      	ldr	r2, [r7, #4]
 801d1be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d1c2:	6839      	ldr	r1, [r7, #0]
 801d1c4:	4610      	mov	r0, r2
 801d1c6:	4798      	blx	r3
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	da03      	bge.n	801d1d6 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d1ce:	f06f 0304 	mvn.w	r3, #4
 801d1d2:	60fb      	str	r3, [r7, #12]
 801d1d4:	e001      	b.n	801d1da <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 801d1d6:	2300      	movs	r3, #0
 801d1d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801d1da:	68fb      	ldr	r3, [r7, #12]
}
 801d1dc:	4618      	mov	r0, r3
 801d1de:	3710      	adds	r7, #16
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}
 801d1e4:	20004fd0 	.word	0x20004fd0
 801d1e8:	20004fcc 	.word	0x20004fcc

0801d1ec <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b084      	sub	sp, #16
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
 801d1f4:	460b      	mov	r3, r1
 801d1f6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d003      	beq.n	801d206 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d1fe:	f06f 0301 	mvn.w	r3, #1
 801d202:	60fb      	str	r3, [r7, #12]
 801d204:	e014      	b.n	801d230 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 801d206:	4a0d      	ldr	r2, [pc, #52]	@ (801d23c <CUSTOM_RANGING_SENSOR_Start+0x50>)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d20e:	6a1b      	ldr	r3, [r3, #32]
 801d210:	490b      	ldr	r1, [pc, #44]	@ (801d240 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 801d212:	687a      	ldr	r2, [r7, #4]
 801d214:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d218:	78f9      	ldrb	r1, [r7, #3]
 801d21a:	4610      	mov	r0, r2
 801d21c:	4798      	blx	r3
 801d21e:	4603      	mov	r3, r0
 801d220:	2b00      	cmp	r3, #0
 801d222:	da03      	bge.n	801d22c <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d224:	f06f 0304 	mvn.w	r3, #4
 801d228:	60fb      	str	r3, [r7, #12]
 801d22a:	e001      	b.n	801d230 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 801d22c:	2300      	movs	r3, #0
 801d22e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801d230:	68fb      	ldr	r3, [r7, #12]
}
 801d232:	4618      	mov	r0, r3
 801d234:	3710      	adds	r7, #16
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}
 801d23a:	bf00      	nop
 801d23c:	20004fd0 	.word	0x20004fd0
 801d240:	20004fcc 	.word	0x20004fcc

0801d244 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b084      	sub	sp, #16
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d003      	beq.n	801d25a <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d252:	f06f 0301 	mvn.w	r3, #1
 801d256:	60fb      	str	r3, [r7, #12]
 801d258:	e013      	b.n	801d282 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 801d25a:	4a0c      	ldr	r2, [pc, #48]	@ (801d28c <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d264:	490a      	ldr	r1, [pc, #40]	@ (801d290 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 801d266:	687a      	ldr	r2, [r7, #4]
 801d268:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d26c:	4610      	mov	r0, r2
 801d26e:	4798      	blx	r3
 801d270:	4603      	mov	r3, r0
 801d272:	2b00      	cmp	r3, #0
 801d274:	da03      	bge.n	801d27e <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d276:	f06f 0304 	mvn.w	r3, #4
 801d27a:	60fb      	str	r3, [r7, #12]
 801d27c:	e001      	b.n	801d282 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 801d27e:	2300      	movs	r3, #0
 801d280:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801d282:	68fb      	ldr	r3, [r7, #12]
}
 801d284:	4618      	mov	r0, r3
 801d286:	3710      	adds	r7, #16
 801d288:	46bd      	mov	sp, r7
 801d28a:	bd80      	pop	{r7, pc}
 801d28c:	20004fd0 	.word	0x20004fd0
 801d290:	20004fcc 	.word	0x20004fcc

0801d294 <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b08a      	sub	sp, #40	@ 0x28
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 801d29c:	2352      	movs	r3, #82	@ 0x52
 801d29e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L4CX_I2C_INIT;
 801d2a0:	4b32      	ldr	r3, [pc, #200]	@ (801d36c <VL53L4CX_Probe+0xd8>)
 801d2a2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L4CX_I2C_DEINIT;
 801d2a4:	4b32      	ldr	r3, [pc, #200]	@ (801d370 <VL53L4CX_Probe+0xdc>)
 801d2a6:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L4CX_I2C_WRITEREG;
 801d2a8:	4b32      	ldr	r3, [pc, #200]	@ (801d374 <VL53L4CX_Probe+0xe0>)
 801d2aa:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L4CX_I2C_READREG;
 801d2ac:	4b32      	ldr	r3, [pc, #200]	@ (801d378 <VL53L4CX_Probe+0xe4>)
 801d2ae:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 801d2b0:	4b32      	ldr	r3, [pc, #200]	@ (801d37c <VL53L4CX_Probe+0xe8>)
 801d2b2:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&VL53L4CXObj, &IOCtx) != VL53L4CX_OK)
 801d2b4:	f107 030c 	add.w	r3, r7, #12
 801d2b8:	4619      	mov	r1, r3
 801d2ba:	4831      	ldr	r0, [pc, #196]	@ (801d380 <VL53L4CX_Probe+0xec>)
 801d2bc:	f7f6 f9bf 	bl	801363e <VL53L4CX_RegisterBusIO>
 801d2c0:	4603      	mov	r3, r0
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d003      	beq.n	801d2ce <VL53L4CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d2c6:	f06f 0304 	mvn.w	r3, #4
 801d2ca:	627b      	str	r3, [r7, #36]	@ 0x24
 801d2cc:	e049      	b.n	801d362 <VL53L4CX_Probe+0xce>
  }
  else if (VL53L4CX_ReadID(&VL53L4CXObj, &id) != VL53L4CX_OK)
 801d2ce:	f107 0308 	add.w	r3, r7, #8
 801d2d2:	4619      	mov	r1, r3
 801d2d4:	482a      	ldr	r0, [pc, #168]	@ (801d380 <VL53L4CX_Probe+0xec>)
 801d2d6:	f7f6 fa64 	bl	80137a2 <VL53L4CX_ReadID>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d003      	beq.n	801d2e8 <VL53L4CX_Probe+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801d2e0:	f06f 0304 	mvn.w	r3, #4
 801d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801d2e6:	e03c      	b.n	801d362 <VL53L4CX_Probe+0xce>
  }
  else
  {
    if (id != VL53L4CX_ID)
 801d2e8:	68bb      	ldr	r3, [r7, #8]
 801d2ea:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 801d2ee:	4293      	cmp	r3, r2
 801d2f0:	d003      	beq.n	801d2fa <VL53L4CX_Probe+0x66>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801d2f2:	f06f 0306 	mvn.w	r3, #6
 801d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d2f8:	e033      	b.n	801d362 <VL53L4CX_Probe+0xce>
    }
    else
    {
      CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 801d2fa:	4a22      	ldr	r2, [pc, #136]	@ (801d384 <VL53L4CX_Probe+0xf0>)
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	4922      	ldr	r1, [pc, #136]	@ (801d388 <VL53L4CX_Probe+0xf4>)
 801d300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      CUSTOM_RANGING_CompObj[Instance] = &VL53L4CXObj;
 801d304:	4a21      	ldr	r2, [pc, #132]	@ (801d38c <VL53L4CX_Probe+0xf8>)
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	491d      	ldr	r1, [pc, #116]	@ (801d380 <VL53L4CX_Probe+0xec>)
 801d30a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L4CX_OK)
 801d30e:	4a1d      	ldr	r2, [pc, #116]	@ (801d384 <VL53L4CX_Probe+0xf0>)
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	491c      	ldr	r1, [pc, #112]	@ (801d38c <VL53L4CX_Probe+0xf8>)
 801d31a:	687a      	ldr	r2, [r7, #4]
 801d31c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d320:	4610      	mov	r0, r2
 801d322:	4798      	blx	r3
 801d324:	4603      	mov	r3, r0
 801d326:	2b00      	cmp	r3, #0
 801d328:	d003      	beq.n	801d332 <VL53L4CX_Probe+0x9e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801d32a:	f06f 0304 	mvn.w	r3, #4
 801d32e:	627b      	str	r3, [r7, #36]	@ 0x24
 801d330:	e017      	b.n	801d362 <VL53L4CX_Probe+0xce>
      }
      else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 801d332:	4a14      	ldr	r2, [pc, #80]	@ (801d384 <VL53L4CX_Probe+0xf0>)
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d33a:	68db      	ldr	r3, [r3, #12]
 801d33c:	4913      	ldr	r1, [pc, #76]	@ (801d38c <VL53L4CX_Probe+0xf8>)
 801d33e:	687a      	ldr	r2, [r7, #4]
 801d340:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
                                                             &RANGING_SENSOR_Cap[Instance]) != VL53L4CX_OK)
 801d344:	687a      	ldr	r2, [r7, #4]
 801d346:	0112      	lsls	r2, r2, #4
 801d348:	4911      	ldr	r1, [pc, #68]	@ (801d390 <VL53L4CX_Probe+0xfc>)
 801d34a:	440a      	add	r2, r1
      else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 801d34c:	4611      	mov	r1, r2
 801d34e:	4798      	blx	r3
 801d350:	4603      	mov	r3, r0
 801d352:	2b00      	cmp	r3, #0
 801d354:	d003      	beq.n	801d35e <VL53L4CX_Probe+0xca>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801d356:	f06f 0304 	mvn.w	r3, #4
 801d35a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d35c:	e001      	b.n	801d362 <VL53L4CX_Probe+0xce>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 801d35e:	2300      	movs	r3, #0
 801d360:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ret;
 801d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801d364:	4618      	mov	r0, r3
 801d366:	3728      	adds	r7, #40	@ 0x28
 801d368:	46bd      	mov	sp, r7
 801d36a:	bd80      	pop	{r7, pc}
 801d36c:	08001269 	.word	0x08001269
 801d370:	080012e5 	.word	0x080012e5
 801d374:	080013fd 	.word	0x080013fd
 801d378:	08001451 	.word	0x08001451
 801d37c:	080014a5 	.word	0x080014a5
 801d380:	20004fe8 	.word	0x20004fe8
 801d384:	20004fd0 	.word	0x20004fd0
 801d388:	20000038 	.word	0x20000038
 801d38c:	20004fcc 	.word	0x20004fcc
 801d390:	20004fd4 	.word	0x20004fd4

0801d394 <reset_device>:
#endif /* Use custom ranging */

static void reset_device(void)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	af00      	add	r7, sp, #0
#if (USE_CUSTOM_RANGING_VL53L4CX == 1U)
  HAL_GPIO_WritePin(CUSTOM_VL53L4CX_XSHUT_PORT, CUSTOM_VL53L4CX_XSHUT_PIN, GPIO_PIN_RESET);
 801d398:	2200      	movs	r2, #0
 801d39a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801d39e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d3a2:	f7f7 fa1d 	bl	80147e0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 801d3a6:	2002      	movs	r0, #2
 801d3a8:	f7f6 fec8 	bl	801413c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L4CX_XSHUT_PORT, CUSTOM_VL53L4CX_XSHUT_PIN, GPIO_PIN_SET);
 801d3ac:	2201      	movs	r2, #1
 801d3ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801d3b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d3b6:	f7f7 fa13 	bl	80147e0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 801d3ba:	2002      	movs	r0, #2
 801d3bc:	f7f6 febe 	bl	801413c <HAL_Delay>
#endif /* Use custom ranging */
}
 801d3c0:	bf00      	nop
 801d3c2:	bd80      	pop	{r7, pc}

0801d3c4 <std>:
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	b510      	push	{r4, lr}
 801d3c8:	4604      	mov	r4, r0
 801d3ca:	e9c0 3300 	strd	r3, r3, [r0]
 801d3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d3d2:	6083      	str	r3, [r0, #8]
 801d3d4:	8181      	strh	r1, [r0, #12]
 801d3d6:	6643      	str	r3, [r0, #100]	@ 0x64
 801d3d8:	81c2      	strh	r2, [r0, #14]
 801d3da:	6183      	str	r3, [r0, #24]
 801d3dc:	4619      	mov	r1, r3
 801d3de:	2208      	movs	r2, #8
 801d3e0:	305c      	adds	r0, #92	@ 0x5c
 801d3e2:	f000 fa39 	bl	801d858 <memset>
 801d3e6:	4b0d      	ldr	r3, [pc, #52]	@ (801d41c <std+0x58>)
 801d3e8:	6263      	str	r3, [r4, #36]	@ 0x24
 801d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (801d420 <std+0x5c>)
 801d3ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d3ee:	4b0d      	ldr	r3, [pc, #52]	@ (801d424 <std+0x60>)
 801d3f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d3f2:	4b0d      	ldr	r3, [pc, #52]	@ (801d428 <std+0x64>)
 801d3f4:	6323      	str	r3, [r4, #48]	@ 0x30
 801d3f6:	4b0d      	ldr	r3, [pc, #52]	@ (801d42c <std+0x68>)
 801d3f8:	6224      	str	r4, [r4, #32]
 801d3fa:	429c      	cmp	r4, r3
 801d3fc:	d006      	beq.n	801d40c <std+0x48>
 801d3fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d402:	4294      	cmp	r4, r2
 801d404:	d002      	beq.n	801d40c <std+0x48>
 801d406:	33d0      	adds	r3, #208	@ 0xd0
 801d408:	429c      	cmp	r4, r3
 801d40a:	d105      	bne.n	801d418 <std+0x54>
 801d40c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d414:	f000 bb02 	b.w	801da1c <__retarget_lock_init_recursive>
 801d418:	bd10      	pop	{r4, pc}
 801d41a:	bf00      	nop
 801d41c:	0801d639 	.word	0x0801d639
 801d420:	0801d65b 	.word	0x0801d65b
 801d424:	0801d693 	.word	0x0801d693
 801d428:	0801d6b7 	.word	0x0801d6b7
 801d42c:	200074d8 	.word	0x200074d8

0801d430 <stdio_exit_handler>:
 801d430:	4a02      	ldr	r2, [pc, #8]	@ (801d43c <stdio_exit_handler+0xc>)
 801d432:	4903      	ldr	r1, [pc, #12]	@ (801d440 <stdio_exit_handler+0x10>)
 801d434:	4803      	ldr	r0, [pc, #12]	@ (801d444 <stdio_exit_handler+0x14>)
 801d436:	f000 b869 	b.w	801d50c <_fwalk_sglue>
 801d43a:	bf00      	nop
 801d43c:	2000007c 	.word	0x2000007c
 801d440:	0801e589 	.word	0x0801e589
 801d444:	2000008c 	.word	0x2000008c

0801d448 <cleanup_stdio>:
 801d448:	6841      	ldr	r1, [r0, #4]
 801d44a:	4b0c      	ldr	r3, [pc, #48]	@ (801d47c <cleanup_stdio+0x34>)
 801d44c:	4299      	cmp	r1, r3
 801d44e:	b510      	push	{r4, lr}
 801d450:	4604      	mov	r4, r0
 801d452:	d001      	beq.n	801d458 <cleanup_stdio+0x10>
 801d454:	f001 f898 	bl	801e588 <_fflush_r>
 801d458:	68a1      	ldr	r1, [r4, #8]
 801d45a:	4b09      	ldr	r3, [pc, #36]	@ (801d480 <cleanup_stdio+0x38>)
 801d45c:	4299      	cmp	r1, r3
 801d45e:	d002      	beq.n	801d466 <cleanup_stdio+0x1e>
 801d460:	4620      	mov	r0, r4
 801d462:	f001 f891 	bl	801e588 <_fflush_r>
 801d466:	68e1      	ldr	r1, [r4, #12]
 801d468:	4b06      	ldr	r3, [pc, #24]	@ (801d484 <cleanup_stdio+0x3c>)
 801d46a:	4299      	cmp	r1, r3
 801d46c:	d004      	beq.n	801d478 <cleanup_stdio+0x30>
 801d46e:	4620      	mov	r0, r4
 801d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d474:	f001 b888 	b.w	801e588 <_fflush_r>
 801d478:	bd10      	pop	{r4, pc}
 801d47a:	bf00      	nop
 801d47c:	200074d8 	.word	0x200074d8
 801d480:	20007540 	.word	0x20007540
 801d484:	200075a8 	.word	0x200075a8

0801d488 <global_stdio_init.part.0>:
 801d488:	b510      	push	{r4, lr}
 801d48a:	4b0b      	ldr	r3, [pc, #44]	@ (801d4b8 <global_stdio_init.part.0+0x30>)
 801d48c:	4c0b      	ldr	r4, [pc, #44]	@ (801d4bc <global_stdio_init.part.0+0x34>)
 801d48e:	4a0c      	ldr	r2, [pc, #48]	@ (801d4c0 <global_stdio_init.part.0+0x38>)
 801d490:	601a      	str	r2, [r3, #0]
 801d492:	4620      	mov	r0, r4
 801d494:	2200      	movs	r2, #0
 801d496:	2104      	movs	r1, #4
 801d498:	f7ff ff94 	bl	801d3c4 <std>
 801d49c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d4a0:	2201      	movs	r2, #1
 801d4a2:	2109      	movs	r1, #9
 801d4a4:	f7ff ff8e 	bl	801d3c4 <std>
 801d4a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d4ac:	2202      	movs	r2, #2
 801d4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4b2:	2112      	movs	r1, #18
 801d4b4:	f7ff bf86 	b.w	801d3c4 <std>
 801d4b8:	20007610 	.word	0x20007610
 801d4bc:	200074d8 	.word	0x200074d8
 801d4c0:	0801d431 	.word	0x0801d431

0801d4c4 <__sfp_lock_acquire>:
 801d4c4:	4801      	ldr	r0, [pc, #4]	@ (801d4cc <__sfp_lock_acquire+0x8>)
 801d4c6:	f000 baaa 	b.w	801da1e <__retarget_lock_acquire_recursive>
 801d4ca:	bf00      	nop
 801d4cc:	20007619 	.word	0x20007619

0801d4d0 <__sfp_lock_release>:
 801d4d0:	4801      	ldr	r0, [pc, #4]	@ (801d4d8 <__sfp_lock_release+0x8>)
 801d4d2:	f000 baa5 	b.w	801da20 <__retarget_lock_release_recursive>
 801d4d6:	bf00      	nop
 801d4d8:	20007619 	.word	0x20007619

0801d4dc <__sinit>:
 801d4dc:	b510      	push	{r4, lr}
 801d4de:	4604      	mov	r4, r0
 801d4e0:	f7ff fff0 	bl	801d4c4 <__sfp_lock_acquire>
 801d4e4:	6a23      	ldr	r3, [r4, #32]
 801d4e6:	b11b      	cbz	r3, 801d4f0 <__sinit+0x14>
 801d4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4ec:	f7ff bff0 	b.w	801d4d0 <__sfp_lock_release>
 801d4f0:	4b04      	ldr	r3, [pc, #16]	@ (801d504 <__sinit+0x28>)
 801d4f2:	6223      	str	r3, [r4, #32]
 801d4f4:	4b04      	ldr	r3, [pc, #16]	@ (801d508 <__sinit+0x2c>)
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d1f5      	bne.n	801d4e8 <__sinit+0xc>
 801d4fc:	f7ff ffc4 	bl	801d488 <global_stdio_init.part.0>
 801d500:	e7f2      	b.n	801d4e8 <__sinit+0xc>
 801d502:	bf00      	nop
 801d504:	0801d449 	.word	0x0801d449
 801d508:	20007610 	.word	0x20007610

0801d50c <_fwalk_sglue>:
 801d50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d510:	4607      	mov	r7, r0
 801d512:	4688      	mov	r8, r1
 801d514:	4614      	mov	r4, r2
 801d516:	2600      	movs	r6, #0
 801d518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d51c:	f1b9 0901 	subs.w	r9, r9, #1
 801d520:	d505      	bpl.n	801d52e <_fwalk_sglue+0x22>
 801d522:	6824      	ldr	r4, [r4, #0]
 801d524:	2c00      	cmp	r4, #0
 801d526:	d1f7      	bne.n	801d518 <_fwalk_sglue+0xc>
 801d528:	4630      	mov	r0, r6
 801d52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d52e:	89ab      	ldrh	r3, [r5, #12]
 801d530:	2b01      	cmp	r3, #1
 801d532:	d907      	bls.n	801d544 <_fwalk_sglue+0x38>
 801d534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d538:	3301      	adds	r3, #1
 801d53a:	d003      	beq.n	801d544 <_fwalk_sglue+0x38>
 801d53c:	4629      	mov	r1, r5
 801d53e:	4638      	mov	r0, r7
 801d540:	47c0      	blx	r8
 801d542:	4306      	orrs	r6, r0
 801d544:	3568      	adds	r5, #104	@ 0x68
 801d546:	e7e9      	b.n	801d51c <_fwalk_sglue+0x10>

0801d548 <iprintf>:
 801d548:	b40f      	push	{r0, r1, r2, r3}
 801d54a:	b507      	push	{r0, r1, r2, lr}
 801d54c:	4906      	ldr	r1, [pc, #24]	@ (801d568 <iprintf+0x20>)
 801d54e:	ab04      	add	r3, sp, #16
 801d550:	6808      	ldr	r0, [r1, #0]
 801d552:	f853 2b04 	ldr.w	r2, [r3], #4
 801d556:	6881      	ldr	r1, [r0, #8]
 801d558:	9301      	str	r3, [sp, #4]
 801d55a:	f000 fceb 	bl	801df34 <_vfiprintf_r>
 801d55e:	b003      	add	sp, #12
 801d560:	f85d eb04 	ldr.w	lr, [sp], #4
 801d564:	b004      	add	sp, #16
 801d566:	4770      	bx	lr
 801d568:	20000088 	.word	0x20000088

0801d56c <putchar>:
 801d56c:	4b02      	ldr	r3, [pc, #8]	@ (801d578 <putchar+0xc>)
 801d56e:	4601      	mov	r1, r0
 801d570:	6818      	ldr	r0, [r3, #0]
 801d572:	6882      	ldr	r2, [r0, #8]
 801d574:	f001 b892 	b.w	801e69c <_putc_r>
 801d578:	20000088 	.word	0x20000088

0801d57c <_puts_r>:
 801d57c:	6a03      	ldr	r3, [r0, #32]
 801d57e:	b570      	push	{r4, r5, r6, lr}
 801d580:	6884      	ldr	r4, [r0, #8]
 801d582:	4605      	mov	r5, r0
 801d584:	460e      	mov	r6, r1
 801d586:	b90b      	cbnz	r3, 801d58c <_puts_r+0x10>
 801d588:	f7ff ffa8 	bl	801d4dc <__sinit>
 801d58c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d58e:	07db      	lsls	r3, r3, #31
 801d590:	d405      	bmi.n	801d59e <_puts_r+0x22>
 801d592:	89a3      	ldrh	r3, [r4, #12]
 801d594:	0598      	lsls	r0, r3, #22
 801d596:	d402      	bmi.n	801d59e <_puts_r+0x22>
 801d598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d59a:	f000 fa40 	bl	801da1e <__retarget_lock_acquire_recursive>
 801d59e:	89a3      	ldrh	r3, [r4, #12]
 801d5a0:	0719      	lsls	r1, r3, #28
 801d5a2:	d502      	bpl.n	801d5aa <_puts_r+0x2e>
 801d5a4:	6923      	ldr	r3, [r4, #16]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d135      	bne.n	801d616 <_puts_r+0x9a>
 801d5aa:	4621      	mov	r1, r4
 801d5ac:	4628      	mov	r0, r5
 801d5ae:	f000 f8fd 	bl	801d7ac <__swsetup_r>
 801d5b2:	b380      	cbz	r0, 801d616 <_puts_r+0x9a>
 801d5b4:	f04f 35ff 	mov.w	r5, #4294967295
 801d5b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d5ba:	07da      	lsls	r2, r3, #31
 801d5bc:	d405      	bmi.n	801d5ca <_puts_r+0x4e>
 801d5be:	89a3      	ldrh	r3, [r4, #12]
 801d5c0:	059b      	lsls	r3, r3, #22
 801d5c2:	d402      	bmi.n	801d5ca <_puts_r+0x4e>
 801d5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d5c6:	f000 fa2b 	bl	801da20 <__retarget_lock_release_recursive>
 801d5ca:	4628      	mov	r0, r5
 801d5cc:	bd70      	pop	{r4, r5, r6, pc}
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	da04      	bge.n	801d5dc <_puts_r+0x60>
 801d5d2:	69a2      	ldr	r2, [r4, #24]
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	dc17      	bgt.n	801d608 <_puts_r+0x8c>
 801d5d8:	290a      	cmp	r1, #10
 801d5da:	d015      	beq.n	801d608 <_puts_r+0x8c>
 801d5dc:	6823      	ldr	r3, [r4, #0]
 801d5de:	1c5a      	adds	r2, r3, #1
 801d5e0:	6022      	str	r2, [r4, #0]
 801d5e2:	7019      	strb	r1, [r3, #0]
 801d5e4:	68a3      	ldr	r3, [r4, #8]
 801d5e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d5ea:	3b01      	subs	r3, #1
 801d5ec:	60a3      	str	r3, [r4, #8]
 801d5ee:	2900      	cmp	r1, #0
 801d5f0:	d1ed      	bne.n	801d5ce <_puts_r+0x52>
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	da11      	bge.n	801d61a <_puts_r+0x9e>
 801d5f6:	4622      	mov	r2, r4
 801d5f8:	210a      	movs	r1, #10
 801d5fa:	4628      	mov	r0, r5
 801d5fc:	f000 f898 	bl	801d730 <__swbuf_r>
 801d600:	3001      	adds	r0, #1
 801d602:	d0d7      	beq.n	801d5b4 <_puts_r+0x38>
 801d604:	250a      	movs	r5, #10
 801d606:	e7d7      	b.n	801d5b8 <_puts_r+0x3c>
 801d608:	4622      	mov	r2, r4
 801d60a:	4628      	mov	r0, r5
 801d60c:	f000 f890 	bl	801d730 <__swbuf_r>
 801d610:	3001      	adds	r0, #1
 801d612:	d1e7      	bne.n	801d5e4 <_puts_r+0x68>
 801d614:	e7ce      	b.n	801d5b4 <_puts_r+0x38>
 801d616:	3e01      	subs	r6, #1
 801d618:	e7e4      	b.n	801d5e4 <_puts_r+0x68>
 801d61a:	6823      	ldr	r3, [r4, #0]
 801d61c:	1c5a      	adds	r2, r3, #1
 801d61e:	6022      	str	r2, [r4, #0]
 801d620:	220a      	movs	r2, #10
 801d622:	701a      	strb	r2, [r3, #0]
 801d624:	e7ee      	b.n	801d604 <_puts_r+0x88>
	...

0801d628 <puts>:
 801d628:	4b02      	ldr	r3, [pc, #8]	@ (801d634 <puts+0xc>)
 801d62a:	4601      	mov	r1, r0
 801d62c:	6818      	ldr	r0, [r3, #0]
 801d62e:	f7ff bfa5 	b.w	801d57c <_puts_r>
 801d632:	bf00      	nop
 801d634:	20000088 	.word	0x20000088

0801d638 <__sread>:
 801d638:	b510      	push	{r4, lr}
 801d63a:	460c      	mov	r4, r1
 801d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d640:	f000 f99e 	bl	801d980 <_read_r>
 801d644:	2800      	cmp	r0, #0
 801d646:	bfab      	itete	ge
 801d648:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d64a:	89a3      	ldrhlt	r3, [r4, #12]
 801d64c:	181b      	addge	r3, r3, r0
 801d64e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d652:	bfac      	ite	ge
 801d654:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d656:	81a3      	strhlt	r3, [r4, #12]
 801d658:	bd10      	pop	{r4, pc}

0801d65a <__swrite>:
 801d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d65e:	461f      	mov	r7, r3
 801d660:	898b      	ldrh	r3, [r1, #12]
 801d662:	05db      	lsls	r3, r3, #23
 801d664:	4605      	mov	r5, r0
 801d666:	460c      	mov	r4, r1
 801d668:	4616      	mov	r6, r2
 801d66a:	d505      	bpl.n	801d678 <__swrite+0x1e>
 801d66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d670:	2302      	movs	r3, #2
 801d672:	2200      	movs	r2, #0
 801d674:	f000 f972 	bl	801d95c <_lseek_r>
 801d678:	89a3      	ldrh	r3, [r4, #12]
 801d67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d67e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d682:	81a3      	strh	r3, [r4, #12]
 801d684:	4632      	mov	r2, r6
 801d686:	463b      	mov	r3, r7
 801d688:	4628      	mov	r0, r5
 801d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d68e:	f000 b989 	b.w	801d9a4 <_write_r>

0801d692 <__sseek>:
 801d692:	b510      	push	{r4, lr}
 801d694:	460c      	mov	r4, r1
 801d696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d69a:	f000 f95f 	bl	801d95c <_lseek_r>
 801d69e:	1c43      	adds	r3, r0, #1
 801d6a0:	89a3      	ldrh	r3, [r4, #12]
 801d6a2:	bf15      	itete	ne
 801d6a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d6a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d6aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d6ae:	81a3      	strheq	r3, [r4, #12]
 801d6b0:	bf18      	it	ne
 801d6b2:	81a3      	strhne	r3, [r4, #12]
 801d6b4:	bd10      	pop	{r4, pc}

0801d6b6 <__sclose>:
 801d6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6ba:	f000 b8e9 	b.w	801d890 <_close_r>

0801d6be <_vsniprintf_r>:
 801d6be:	b530      	push	{r4, r5, lr}
 801d6c0:	4614      	mov	r4, r2
 801d6c2:	2c00      	cmp	r4, #0
 801d6c4:	b09b      	sub	sp, #108	@ 0x6c
 801d6c6:	4605      	mov	r5, r0
 801d6c8:	461a      	mov	r2, r3
 801d6ca:	da05      	bge.n	801d6d8 <_vsniprintf_r+0x1a>
 801d6cc:	238b      	movs	r3, #139	@ 0x8b
 801d6ce:	6003      	str	r3, [r0, #0]
 801d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d6d4:	b01b      	add	sp, #108	@ 0x6c
 801d6d6:	bd30      	pop	{r4, r5, pc}
 801d6d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d6dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d6e0:	bf14      	ite	ne
 801d6e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d6e6:	4623      	moveq	r3, r4
 801d6e8:	9302      	str	r3, [sp, #8]
 801d6ea:	9305      	str	r3, [sp, #20]
 801d6ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d6f0:	9100      	str	r1, [sp, #0]
 801d6f2:	9104      	str	r1, [sp, #16]
 801d6f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d6f8:	4669      	mov	r1, sp
 801d6fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d6fc:	f000 faf4 	bl	801dce8 <_svfiprintf_r>
 801d700:	1c43      	adds	r3, r0, #1
 801d702:	bfbc      	itt	lt
 801d704:	238b      	movlt	r3, #139	@ 0x8b
 801d706:	602b      	strlt	r3, [r5, #0]
 801d708:	2c00      	cmp	r4, #0
 801d70a:	d0e3      	beq.n	801d6d4 <_vsniprintf_r+0x16>
 801d70c:	9b00      	ldr	r3, [sp, #0]
 801d70e:	2200      	movs	r2, #0
 801d710:	701a      	strb	r2, [r3, #0]
 801d712:	e7df      	b.n	801d6d4 <_vsniprintf_r+0x16>

0801d714 <vsniprintf>:
 801d714:	b507      	push	{r0, r1, r2, lr}
 801d716:	9300      	str	r3, [sp, #0]
 801d718:	4613      	mov	r3, r2
 801d71a:	460a      	mov	r2, r1
 801d71c:	4601      	mov	r1, r0
 801d71e:	4803      	ldr	r0, [pc, #12]	@ (801d72c <vsniprintf+0x18>)
 801d720:	6800      	ldr	r0, [r0, #0]
 801d722:	f7ff ffcc 	bl	801d6be <_vsniprintf_r>
 801d726:	b003      	add	sp, #12
 801d728:	f85d fb04 	ldr.w	pc, [sp], #4
 801d72c:	20000088 	.word	0x20000088

0801d730 <__swbuf_r>:
 801d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d732:	460e      	mov	r6, r1
 801d734:	4614      	mov	r4, r2
 801d736:	4605      	mov	r5, r0
 801d738:	b118      	cbz	r0, 801d742 <__swbuf_r+0x12>
 801d73a:	6a03      	ldr	r3, [r0, #32]
 801d73c:	b90b      	cbnz	r3, 801d742 <__swbuf_r+0x12>
 801d73e:	f7ff fecd 	bl	801d4dc <__sinit>
 801d742:	69a3      	ldr	r3, [r4, #24]
 801d744:	60a3      	str	r3, [r4, #8]
 801d746:	89a3      	ldrh	r3, [r4, #12]
 801d748:	071a      	lsls	r2, r3, #28
 801d74a:	d501      	bpl.n	801d750 <__swbuf_r+0x20>
 801d74c:	6923      	ldr	r3, [r4, #16]
 801d74e:	b943      	cbnz	r3, 801d762 <__swbuf_r+0x32>
 801d750:	4621      	mov	r1, r4
 801d752:	4628      	mov	r0, r5
 801d754:	f000 f82a 	bl	801d7ac <__swsetup_r>
 801d758:	b118      	cbz	r0, 801d762 <__swbuf_r+0x32>
 801d75a:	f04f 37ff 	mov.w	r7, #4294967295
 801d75e:	4638      	mov	r0, r7
 801d760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d762:	6823      	ldr	r3, [r4, #0]
 801d764:	6922      	ldr	r2, [r4, #16]
 801d766:	1a98      	subs	r0, r3, r2
 801d768:	6963      	ldr	r3, [r4, #20]
 801d76a:	b2f6      	uxtb	r6, r6
 801d76c:	4283      	cmp	r3, r0
 801d76e:	4637      	mov	r7, r6
 801d770:	dc05      	bgt.n	801d77e <__swbuf_r+0x4e>
 801d772:	4621      	mov	r1, r4
 801d774:	4628      	mov	r0, r5
 801d776:	f000 ff07 	bl	801e588 <_fflush_r>
 801d77a:	2800      	cmp	r0, #0
 801d77c:	d1ed      	bne.n	801d75a <__swbuf_r+0x2a>
 801d77e:	68a3      	ldr	r3, [r4, #8]
 801d780:	3b01      	subs	r3, #1
 801d782:	60a3      	str	r3, [r4, #8]
 801d784:	6823      	ldr	r3, [r4, #0]
 801d786:	1c5a      	adds	r2, r3, #1
 801d788:	6022      	str	r2, [r4, #0]
 801d78a:	701e      	strb	r6, [r3, #0]
 801d78c:	6962      	ldr	r2, [r4, #20]
 801d78e:	1c43      	adds	r3, r0, #1
 801d790:	429a      	cmp	r2, r3
 801d792:	d004      	beq.n	801d79e <__swbuf_r+0x6e>
 801d794:	89a3      	ldrh	r3, [r4, #12]
 801d796:	07db      	lsls	r3, r3, #31
 801d798:	d5e1      	bpl.n	801d75e <__swbuf_r+0x2e>
 801d79a:	2e0a      	cmp	r6, #10
 801d79c:	d1df      	bne.n	801d75e <__swbuf_r+0x2e>
 801d79e:	4621      	mov	r1, r4
 801d7a0:	4628      	mov	r0, r5
 801d7a2:	f000 fef1 	bl	801e588 <_fflush_r>
 801d7a6:	2800      	cmp	r0, #0
 801d7a8:	d0d9      	beq.n	801d75e <__swbuf_r+0x2e>
 801d7aa:	e7d6      	b.n	801d75a <__swbuf_r+0x2a>

0801d7ac <__swsetup_r>:
 801d7ac:	b538      	push	{r3, r4, r5, lr}
 801d7ae:	4b29      	ldr	r3, [pc, #164]	@ (801d854 <__swsetup_r+0xa8>)
 801d7b0:	4605      	mov	r5, r0
 801d7b2:	6818      	ldr	r0, [r3, #0]
 801d7b4:	460c      	mov	r4, r1
 801d7b6:	b118      	cbz	r0, 801d7c0 <__swsetup_r+0x14>
 801d7b8:	6a03      	ldr	r3, [r0, #32]
 801d7ba:	b90b      	cbnz	r3, 801d7c0 <__swsetup_r+0x14>
 801d7bc:	f7ff fe8e 	bl	801d4dc <__sinit>
 801d7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d7c4:	0719      	lsls	r1, r3, #28
 801d7c6:	d422      	bmi.n	801d80e <__swsetup_r+0x62>
 801d7c8:	06da      	lsls	r2, r3, #27
 801d7ca:	d407      	bmi.n	801d7dc <__swsetup_r+0x30>
 801d7cc:	2209      	movs	r2, #9
 801d7ce:	602a      	str	r2, [r5, #0]
 801d7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d7d4:	81a3      	strh	r3, [r4, #12]
 801d7d6:	f04f 30ff 	mov.w	r0, #4294967295
 801d7da:	e033      	b.n	801d844 <__swsetup_r+0x98>
 801d7dc:	0758      	lsls	r0, r3, #29
 801d7de:	d512      	bpl.n	801d806 <__swsetup_r+0x5a>
 801d7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d7e2:	b141      	cbz	r1, 801d7f6 <__swsetup_r+0x4a>
 801d7e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d7e8:	4299      	cmp	r1, r3
 801d7ea:	d002      	beq.n	801d7f2 <__swsetup_r+0x46>
 801d7ec:	4628      	mov	r0, r5
 801d7ee:	f000 f927 	bl	801da40 <_free_r>
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d7f6:	89a3      	ldrh	r3, [r4, #12]
 801d7f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d7fc:	81a3      	strh	r3, [r4, #12]
 801d7fe:	2300      	movs	r3, #0
 801d800:	6063      	str	r3, [r4, #4]
 801d802:	6923      	ldr	r3, [r4, #16]
 801d804:	6023      	str	r3, [r4, #0]
 801d806:	89a3      	ldrh	r3, [r4, #12]
 801d808:	f043 0308 	orr.w	r3, r3, #8
 801d80c:	81a3      	strh	r3, [r4, #12]
 801d80e:	6923      	ldr	r3, [r4, #16]
 801d810:	b94b      	cbnz	r3, 801d826 <__swsetup_r+0x7a>
 801d812:	89a3      	ldrh	r3, [r4, #12]
 801d814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d81c:	d003      	beq.n	801d826 <__swsetup_r+0x7a>
 801d81e:	4621      	mov	r1, r4
 801d820:	4628      	mov	r0, r5
 801d822:	f000 feff 	bl	801e624 <__smakebuf_r>
 801d826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d82a:	f013 0201 	ands.w	r2, r3, #1
 801d82e:	d00a      	beq.n	801d846 <__swsetup_r+0x9a>
 801d830:	2200      	movs	r2, #0
 801d832:	60a2      	str	r2, [r4, #8]
 801d834:	6962      	ldr	r2, [r4, #20]
 801d836:	4252      	negs	r2, r2
 801d838:	61a2      	str	r2, [r4, #24]
 801d83a:	6922      	ldr	r2, [r4, #16]
 801d83c:	b942      	cbnz	r2, 801d850 <__swsetup_r+0xa4>
 801d83e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d842:	d1c5      	bne.n	801d7d0 <__swsetup_r+0x24>
 801d844:	bd38      	pop	{r3, r4, r5, pc}
 801d846:	0799      	lsls	r1, r3, #30
 801d848:	bf58      	it	pl
 801d84a:	6962      	ldrpl	r2, [r4, #20]
 801d84c:	60a2      	str	r2, [r4, #8]
 801d84e:	e7f4      	b.n	801d83a <__swsetup_r+0x8e>
 801d850:	2000      	movs	r0, #0
 801d852:	e7f7      	b.n	801d844 <__swsetup_r+0x98>
 801d854:	20000088 	.word	0x20000088

0801d858 <memset>:
 801d858:	4402      	add	r2, r0
 801d85a:	4603      	mov	r3, r0
 801d85c:	4293      	cmp	r3, r2
 801d85e:	d100      	bne.n	801d862 <memset+0xa>
 801d860:	4770      	bx	lr
 801d862:	f803 1b01 	strb.w	r1, [r3], #1
 801d866:	e7f9      	b.n	801d85c <memset+0x4>

0801d868 <strncpy>:
 801d868:	b510      	push	{r4, lr}
 801d86a:	3901      	subs	r1, #1
 801d86c:	4603      	mov	r3, r0
 801d86e:	b132      	cbz	r2, 801d87e <strncpy+0x16>
 801d870:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d874:	f803 4b01 	strb.w	r4, [r3], #1
 801d878:	3a01      	subs	r2, #1
 801d87a:	2c00      	cmp	r4, #0
 801d87c:	d1f7      	bne.n	801d86e <strncpy+0x6>
 801d87e:	441a      	add	r2, r3
 801d880:	2100      	movs	r1, #0
 801d882:	4293      	cmp	r3, r2
 801d884:	d100      	bne.n	801d888 <strncpy+0x20>
 801d886:	bd10      	pop	{r4, pc}
 801d888:	f803 1b01 	strb.w	r1, [r3], #1
 801d88c:	e7f9      	b.n	801d882 <strncpy+0x1a>
	...

0801d890 <_close_r>:
 801d890:	b538      	push	{r3, r4, r5, lr}
 801d892:	4d06      	ldr	r5, [pc, #24]	@ (801d8ac <_close_r+0x1c>)
 801d894:	2300      	movs	r3, #0
 801d896:	4604      	mov	r4, r0
 801d898:	4608      	mov	r0, r1
 801d89a:	602b      	str	r3, [r5, #0]
 801d89c:	f7e3 fec7 	bl	800162e <_close>
 801d8a0:	1c43      	adds	r3, r0, #1
 801d8a2:	d102      	bne.n	801d8aa <_close_r+0x1a>
 801d8a4:	682b      	ldr	r3, [r5, #0]
 801d8a6:	b103      	cbz	r3, 801d8aa <_close_r+0x1a>
 801d8a8:	6023      	str	r3, [r4, #0]
 801d8aa:	bd38      	pop	{r3, r4, r5, pc}
 801d8ac:	20007614 	.word	0x20007614

0801d8b0 <_reclaim_reent>:
 801d8b0:	4b29      	ldr	r3, [pc, #164]	@ (801d958 <_reclaim_reent+0xa8>)
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	4283      	cmp	r3, r0
 801d8b6:	b570      	push	{r4, r5, r6, lr}
 801d8b8:	4604      	mov	r4, r0
 801d8ba:	d04b      	beq.n	801d954 <_reclaim_reent+0xa4>
 801d8bc:	69c3      	ldr	r3, [r0, #28]
 801d8be:	b1ab      	cbz	r3, 801d8ec <_reclaim_reent+0x3c>
 801d8c0:	68db      	ldr	r3, [r3, #12]
 801d8c2:	b16b      	cbz	r3, 801d8e0 <_reclaim_reent+0x30>
 801d8c4:	2500      	movs	r5, #0
 801d8c6:	69e3      	ldr	r3, [r4, #28]
 801d8c8:	68db      	ldr	r3, [r3, #12]
 801d8ca:	5959      	ldr	r1, [r3, r5]
 801d8cc:	2900      	cmp	r1, #0
 801d8ce:	d13b      	bne.n	801d948 <_reclaim_reent+0x98>
 801d8d0:	3504      	adds	r5, #4
 801d8d2:	2d80      	cmp	r5, #128	@ 0x80
 801d8d4:	d1f7      	bne.n	801d8c6 <_reclaim_reent+0x16>
 801d8d6:	69e3      	ldr	r3, [r4, #28]
 801d8d8:	4620      	mov	r0, r4
 801d8da:	68d9      	ldr	r1, [r3, #12]
 801d8dc:	f000 f8b0 	bl	801da40 <_free_r>
 801d8e0:	69e3      	ldr	r3, [r4, #28]
 801d8e2:	6819      	ldr	r1, [r3, #0]
 801d8e4:	b111      	cbz	r1, 801d8ec <_reclaim_reent+0x3c>
 801d8e6:	4620      	mov	r0, r4
 801d8e8:	f000 f8aa 	bl	801da40 <_free_r>
 801d8ec:	6961      	ldr	r1, [r4, #20]
 801d8ee:	b111      	cbz	r1, 801d8f6 <_reclaim_reent+0x46>
 801d8f0:	4620      	mov	r0, r4
 801d8f2:	f000 f8a5 	bl	801da40 <_free_r>
 801d8f6:	69e1      	ldr	r1, [r4, #28]
 801d8f8:	b111      	cbz	r1, 801d900 <_reclaim_reent+0x50>
 801d8fa:	4620      	mov	r0, r4
 801d8fc:	f000 f8a0 	bl	801da40 <_free_r>
 801d900:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d902:	b111      	cbz	r1, 801d90a <_reclaim_reent+0x5a>
 801d904:	4620      	mov	r0, r4
 801d906:	f000 f89b 	bl	801da40 <_free_r>
 801d90a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d90c:	b111      	cbz	r1, 801d914 <_reclaim_reent+0x64>
 801d90e:	4620      	mov	r0, r4
 801d910:	f000 f896 	bl	801da40 <_free_r>
 801d914:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d916:	b111      	cbz	r1, 801d91e <_reclaim_reent+0x6e>
 801d918:	4620      	mov	r0, r4
 801d91a:	f000 f891 	bl	801da40 <_free_r>
 801d91e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d920:	b111      	cbz	r1, 801d928 <_reclaim_reent+0x78>
 801d922:	4620      	mov	r0, r4
 801d924:	f000 f88c 	bl	801da40 <_free_r>
 801d928:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d92a:	b111      	cbz	r1, 801d932 <_reclaim_reent+0x82>
 801d92c:	4620      	mov	r0, r4
 801d92e:	f000 f887 	bl	801da40 <_free_r>
 801d932:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d934:	b111      	cbz	r1, 801d93c <_reclaim_reent+0x8c>
 801d936:	4620      	mov	r0, r4
 801d938:	f000 f882 	bl	801da40 <_free_r>
 801d93c:	6a23      	ldr	r3, [r4, #32]
 801d93e:	b14b      	cbz	r3, 801d954 <_reclaim_reent+0xa4>
 801d940:	4620      	mov	r0, r4
 801d942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d946:	4718      	bx	r3
 801d948:	680e      	ldr	r6, [r1, #0]
 801d94a:	4620      	mov	r0, r4
 801d94c:	f000 f878 	bl	801da40 <_free_r>
 801d950:	4631      	mov	r1, r6
 801d952:	e7bb      	b.n	801d8cc <_reclaim_reent+0x1c>
 801d954:	bd70      	pop	{r4, r5, r6, pc}
 801d956:	bf00      	nop
 801d958:	20000088 	.word	0x20000088

0801d95c <_lseek_r>:
 801d95c:	b538      	push	{r3, r4, r5, lr}
 801d95e:	4d07      	ldr	r5, [pc, #28]	@ (801d97c <_lseek_r+0x20>)
 801d960:	4604      	mov	r4, r0
 801d962:	4608      	mov	r0, r1
 801d964:	4611      	mov	r1, r2
 801d966:	2200      	movs	r2, #0
 801d968:	602a      	str	r2, [r5, #0]
 801d96a:	461a      	mov	r2, r3
 801d96c:	f7e3 fe86 	bl	800167c <_lseek>
 801d970:	1c43      	adds	r3, r0, #1
 801d972:	d102      	bne.n	801d97a <_lseek_r+0x1e>
 801d974:	682b      	ldr	r3, [r5, #0]
 801d976:	b103      	cbz	r3, 801d97a <_lseek_r+0x1e>
 801d978:	6023      	str	r3, [r4, #0]
 801d97a:	bd38      	pop	{r3, r4, r5, pc}
 801d97c:	20007614 	.word	0x20007614

0801d980 <_read_r>:
 801d980:	b538      	push	{r3, r4, r5, lr}
 801d982:	4d07      	ldr	r5, [pc, #28]	@ (801d9a0 <_read_r+0x20>)
 801d984:	4604      	mov	r4, r0
 801d986:	4608      	mov	r0, r1
 801d988:	4611      	mov	r1, r2
 801d98a:	2200      	movs	r2, #0
 801d98c:	602a      	str	r2, [r5, #0]
 801d98e:	461a      	mov	r2, r3
 801d990:	f7e3 fe30 	bl	80015f4 <_read>
 801d994:	1c43      	adds	r3, r0, #1
 801d996:	d102      	bne.n	801d99e <_read_r+0x1e>
 801d998:	682b      	ldr	r3, [r5, #0]
 801d99a:	b103      	cbz	r3, 801d99e <_read_r+0x1e>
 801d99c:	6023      	str	r3, [r4, #0]
 801d99e:	bd38      	pop	{r3, r4, r5, pc}
 801d9a0:	20007614 	.word	0x20007614

0801d9a4 <_write_r>:
 801d9a4:	b538      	push	{r3, r4, r5, lr}
 801d9a6:	4d07      	ldr	r5, [pc, #28]	@ (801d9c4 <_write_r+0x20>)
 801d9a8:	4604      	mov	r4, r0
 801d9aa:	4608      	mov	r0, r1
 801d9ac:	4611      	mov	r1, r2
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	602a      	str	r2, [r5, #0]
 801d9b2:	461a      	mov	r2, r3
 801d9b4:	f7e2 fe5a 	bl	800066c <_write>
 801d9b8:	1c43      	adds	r3, r0, #1
 801d9ba:	d102      	bne.n	801d9c2 <_write_r+0x1e>
 801d9bc:	682b      	ldr	r3, [r5, #0]
 801d9be:	b103      	cbz	r3, 801d9c2 <_write_r+0x1e>
 801d9c0:	6023      	str	r3, [r4, #0]
 801d9c2:	bd38      	pop	{r3, r4, r5, pc}
 801d9c4:	20007614 	.word	0x20007614

0801d9c8 <__errno>:
 801d9c8:	4b01      	ldr	r3, [pc, #4]	@ (801d9d0 <__errno+0x8>)
 801d9ca:	6818      	ldr	r0, [r3, #0]
 801d9cc:	4770      	bx	lr
 801d9ce:	bf00      	nop
 801d9d0:	20000088 	.word	0x20000088

0801d9d4 <__libc_init_array>:
 801d9d4:	b570      	push	{r4, r5, r6, lr}
 801d9d6:	4d0d      	ldr	r5, [pc, #52]	@ (801da0c <__libc_init_array+0x38>)
 801d9d8:	4c0d      	ldr	r4, [pc, #52]	@ (801da10 <__libc_init_array+0x3c>)
 801d9da:	1b64      	subs	r4, r4, r5
 801d9dc:	10a4      	asrs	r4, r4, #2
 801d9de:	2600      	movs	r6, #0
 801d9e0:	42a6      	cmp	r6, r4
 801d9e2:	d109      	bne.n	801d9f8 <__libc_init_array+0x24>
 801d9e4:	4d0b      	ldr	r5, [pc, #44]	@ (801da14 <__libc_init_array+0x40>)
 801d9e6:	4c0c      	ldr	r4, [pc, #48]	@ (801da18 <__libc_init_array+0x44>)
 801d9e8:	f000 ff0e 	bl	801e808 <_init>
 801d9ec:	1b64      	subs	r4, r4, r5
 801d9ee:	10a4      	asrs	r4, r4, #2
 801d9f0:	2600      	movs	r6, #0
 801d9f2:	42a6      	cmp	r6, r4
 801d9f4:	d105      	bne.n	801da02 <__libc_init_array+0x2e>
 801d9f6:	bd70      	pop	{r4, r5, r6, pc}
 801d9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d9fc:	4798      	blx	r3
 801d9fe:	3601      	adds	r6, #1
 801da00:	e7ee      	b.n	801d9e0 <__libc_init_array+0xc>
 801da02:	f855 3b04 	ldr.w	r3, [r5], #4
 801da06:	4798      	blx	r3
 801da08:	3601      	adds	r6, #1
 801da0a:	e7f2      	b.n	801d9f2 <__libc_init_array+0x1e>
 801da0c:	0801ed70 	.word	0x0801ed70
 801da10:	0801ed70 	.word	0x0801ed70
 801da14:	0801ed70 	.word	0x0801ed70
 801da18:	0801ed74 	.word	0x0801ed74

0801da1c <__retarget_lock_init_recursive>:
 801da1c:	4770      	bx	lr

0801da1e <__retarget_lock_acquire_recursive>:
 801da1e:	4770      	bx	lr

0801da20 <__retarget_lock_release_recursive>:
 801da20:	4770      	bx	lr

0801da22 <memcpy>:
 801da22:	440a      	add	r2, r1
 801da24:	4291      	cmp	r1, r2
 801da26:	f100 33ff 	add.w	r3, r0, #4294967295
 801da2a:	d100      	bne.n	801da2e <memcpy+0xc>
 801da2c:	4770      	bx	lr
 801da2e:	b510      	push	{r4, lr}
 801da30:	f811 4b01 	ldrb.w	r4, [r1], #1
 801da34:	f803 4f01 	strb.w	r4, [r3, #1]!
 801da38:	4291      	cmp	r1, r2
 801da3a:	d1f9      	bne.n	801da30 <memcpy+0xe>
 801da3c:	bd10      	pop	{r4, pc}
	...

0801da40 <_free_r>:
 801da40:	b538      	push	{r3, r4, r5, lr}
 801da42:	4605      	mov	r5, r0
 801da44:	2900      	cmp	r1, #0
 801da46:	d041      	beq.n	801dacc <_free_r+0x8c>
 801da48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da4c:	1f0c      	subs	r4, r1, #4
 801da4e:	2b00      	cmp	r3, #0
 801da50:	bfb8      	it	lt
 801da52:	18e4      	addlt	r4, r4, r3
 801da54:	f000 f8e0 	bl	801dc18 <__malloc_lock>
 801da58:	4a1d      	ldr	r2, [pc, #116]	@ (801dad0 <_free_r+0x90>)
 801da5a:	6813      	ldr	r3, [r2, #0]
 801da5c:	b933      	cbnz	r3, 801da6c <_free_r+0x2c>
 801da5e:	6063      	str	r3, [r4, #4]
 801da60:	6014      	str	r4, [r2, #0]
 801da62:	4628      	mov	r0, r5
 801da64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da68:	f000 b8dc 	b.w	801dc24 <__malloc_unlock>
 801da6c:	42a3      	cmp	r3, r4
 801da6e:	d908      	bls.n	801da82 <_free_r+0x42>
 801da70:	6820      	ldr	r0, [r4, #0]
 801da72:	1821      	adds	r1, r4, r0
 801da74:	428b      	cmp	r3, r1
 801da76:	bf01      	itttt	eq
 801da78:	6819      	ldreq	r1, [r3, #0]
 801da7a:	685b      	ldreq	r3, [r3, #4]
 801da7c:	1809      	addeq	r1, r1, r0
 801da7e:	6021      	streq	r1, [r4, #0]
 801da80:	e7ed      	b.n	801da5e <_free_r+0x1e>
 801da82:	461a      	mov	r2, r3
 801da84:	685b      	ldr	r3, [r3, #4]
 801da86:	b10b      	cbz	r3, 801da8c <_free_r+0x4c>
 801da88:	42a3      	cmp	r3, r4
 801da8a:	d9fa      	bls.n	801da82 <_free_r+0x42>
 801da8c:	6811      	ldr	r1, [r2, #0]
 801da8e:	1850      	adds	r0, r2, r1
 801da90:	42a0      	cmp	r0, r4
 801da92:	d10b      	bne.n	801daac <_free_r+0x6c>
 801da94:	6820      	ldr	r0, [r4, #0]
 801da96:	4401      	add	r1, r0
 801da98:	1850      	adds	r0, r2, r1
 801da9a:	4283      	cmp	r3, r0
 801da9c:	6011      	str	r1, [r2, #0]
 801da9e:	d1e0      	bne.n	801da62 <_free_r+0x22>
 801daa0:	6818      	ldr	r0, [r3, #0]
 801daa2:	685b      	ldr	r3, [r3, #4]
 801daa4:	6053      	str	r3, [r2, #4]
 801daa6:	4408      	add	r0, r1
 801daa8:	6010      	str	r0, [r2, #0]
 801daaa:	e7da      	b.n	801da62 <_free_r+0x22>
 801daac:	d902      	bls.n	801dab4 <_free_r+0x74>
 801daae:	230c      	movs	r3, #12
 801dab0:	602b      	str	r3, [r5, #0]
 801dab2:	e7d6      	b.n	801da62 <_free_r+0x22>
 801dab4:	6820      	ldr	r0, [r4, #0]
 801dab6:	1821      	adds	r1, r4, r0
 801dab8:	428b      	cmp	r3, r1
 801daba:	bf04      	itt	eq
 801dabc:	6819      	ldreq	r1, [r3, #0]
 801dabe:	685b      	ldreq	r3, [r3, #4]
 801dac0:	6063      	str	r3, [r4, #4]
 801dac2:	bf04      	itt	eq
 801dac4:	1809      	addeq	r1, r1, r0
 801dac6:	6021      	streq	r1, [r4, #0]
 801dac8:	6054      	str	r4, [r2, #4]
 801daca:	e7ca      	b.n	801da62 <_free_r+0x22>
 801dacc:	bd38      	pop	{r3, r4, r5, pc}
 801dace:	bf00      	nop
 801dad0:	20007620 	.word	0x20007620

0801dad4 <sbrk_aligned>:
 801dad4:	b570      	push	{r4, r5, r6, lr}
 801dad6:	4e0f      	ldr	r6, [pc, #60]	@ (801db14 <sbrk_aligned+0x40>)
 801dad8:	460c      	mov	r4, r1
 801dada:	6831      	ldr	r1, [r6, #0]
 801dadc:	4605      	mov	r5, r0
 801dade:	b911      	cbnz	r1, 801dae6 <sbrk_aligned+0x12>
 801dae0:	f000 fe4c 	bl	801e77c <_sbrk_r>
 801dae4:	6030      	str	r0, [r6, #0]
 801dae6:	4621      	mov	r1, r4
 801dae8:	4628      	mov	r0, r5
 801daea:	f000 fe47 	bl	801e77c <_sbrk_r>
 801daee:	1c43      	adds	r3, r0, #1
 801daf0:	d103      	bne.n	801dafa <sbrk_aligned+0x26>
 801daf2:	f04f 34ff 	mov.w	r4, #4294967295
 801daf6:	4620      	mov	r0, r4
 801daf8:	bd70      	pop	{r4, r5, r6, pc}
 801dafa:	1cc4      	adds	r4, r0, #3
 801dafc:	f024 0403 	bic.w	r4, r4, #3
 801db00:	42a0      	cmp	r0, r4
 801db02:	d0f8      	beq.n	801daf6 <sbrk_aligned+0x22>
 801db04:	1a21      	subs	r1, r4, r0
 801db06:	4628      	mov	r0, r5
 801db08:	f000 fe38 	bl	801e77c <_sbrk_r>
 801db0c:	3001      	adds	r0, #1
 801db0e:	d1f2      	bne.n	801daf6 <sbrk_aligned+0x22>
 801db10:	e7ef      	b.n	801daf2 <sbrk_aligned+0x1e>
 801db12:	bf00      	nop
 801db14:	2000761c 	.word	0x2000761c

0801db18 <_malloc_r>:
 801db18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db1c:	1ccd      	adds	r5, r1, #3
 801db1e:	f025 0503 	bic.w	r5, r5, #3
 801db22:	3508      	adds	r5, #8
 801db24:	2d0c      	cmp	r5, #12
 801db26:	bf38      	it	cc
 801db28:	250c      	movcc	r5, #12
 801db2a:	2d00      	cmp	r5, #0
 801db2c:	4606      	mov	r6, r0
 801db2e:	db01      	blt.n	801db34 <_malloc_r+0x1c>
 801db30:	42a9      	cmp	r1, r5
 801db32:	d904      	bls.n	801db3e <_malloc_r+0x26>
 801db34:	230c      	movs	r3, #12
 801db36:	6033      	str	r3, [r6, #0]
 801db38:	2000      	movs	r0, #0
 801db3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dc14 <_malloc_r+0xfc>
 801db42:	f000 f869 	bl	801dc18 <__malloc_lock>
 801db46:	f8d8 3000 	ldr.w	r3, [r8]
 801db4a:	461c      	mov	r4, r3
 801db4c:	bb44      	cbnz	r4, 801dba0 <_malloc_r+0x88>
 801db4e:	4629      	mov	r1, r5
 801db50:	4630      	mov	r0, r6
 801db52:	f7ff ffbf 	bl	801dad4 <sbrk_aligned>
 801db56:	1c43      	adds	r3, r0, #1
 801db58:	4604      	mov	r4, r0
 801db5a:	d158      	bne.n	801dc0e <_malloc_r+0xf6>
 801db5c:	f8d8 4000 	ldr.w	r4, [r8]
 801db60:	4627      	mov	r7, r4
 801db62:	2f00      	cmp	r7, #0
 801db64:	d143      	bne.n	801dbee <_malloc_r+0xd6>
 801db66:	2c00      	cmp	r4, #0
 801db68:	d04b      	beq.n	801dc02 <_malloc_r+0xea>
 801db6a:	6823      	ldr	r3, [r4, #0]
 801db6c:	4639      	mov	r1, r7
 801db6e:	4630      	mov	r0, r6
 801db70:	eb04 0903 	add.w	r9, r4, r3
 801db74:	f000 fe02 	bl	801e77c <_sbrk_r>
 801db78:	4581      	cmp	r9, r0
 801db7a:	d142      	bne.n	801dc02 <_malloc_r+0xea>
 801db7c:	6821      	ldr	r1, [r4, #0]
 801db7e:	1a6d      	subs	r5, r5, r1
 801db80:	4629      	mov	r1, r5
 801db82:	4630      	mov	r0, r6
 801db84:	f7ff ffa6 	bl	801dad4 <sbrk_aligned>
 801db88:	3001      	adds	r0, #1
 801db8a:	d03a      	beq.n	801dc02 <_malloc_r+0xea>
 801db8c:	6823      	ldr	r3, [r4, #0]
 801db8e:	442b      	add	r3, r5
 801db90:	6023      	str	r3, [r4, #0]
 801db92:	f8d8 3000 	ldr.w	r3, [r8]
 801db96:	685a      	ldr	r2, [r3, #4]
 801db98:	bb62      	cbnz	r2, 801dbf4 <_malloc_r+0xdc>
 801db9a:	f8c8 7000 	str.w	r7, [r8]
 801db9e:	e00f      	b.n	801dbc0 <_malloc_r+0xa8>
 801dba0:	6822      	ldr	r2, [r4, #0]
 801dba2:	1b52      	subs	r2, r2, r5
 801dba4:	d420      	bmi.n	801dbe8 <_malloc_r+0xd0>
 801dba6:	2a0b      	cmp	r2, #11
 801dba8:	d917      	bls.n	801dbda <_malloc_r+0xc2>
 801dbaa:	1961      	adds	r1, r4, r5
 801dbac:	42a3      	cmp	r3, r4
 801dbae:	6025      	str	r5, [r4, #0]
 801dbb0:	bf18      	it	ne
 801dbb2:	6059      	strne	r1, [r3, #4]
 801dbb4:	6863      	ldr	r3, [r4, #4]
 801dbb6:	bf08      	it	eq
 801dbb8:	f8c8 1000 	streq.w	r1, [r8]
 801dbbc:	5162      	str	r2, [r4, r5]
 801dbbe:	604b      	str	r3, [r1, #4]
 801dbc0:	4630      	mov	r0, r6
 801dbc2:	f000 f82f 	bl	801dc24 <__malloc_unlock>
 801dbc6:	f104 000b 	add.w	r0, r4, #11
 801dbca:	1d23      	adds	r3, r4, #4
 801dbcc:	f020 0007 	bic.w	r0, r0, #7
 801dbd0:	1ac2      	subs	r2, r0, r3
 801dbd2:	bf1c      	itt	ne
 801dbd4:	1a1b      	subne	r3, r3, r0
 801dbd6:	50a3      	strne	r3, [r4, r2]
 801dbd8:	e7af      	b.n	801db3a <_malloc_r+0x22>
 801dbda:	6862      	ldr	r2, [r4, #4]
 801dbdc:	42a3      	cmp	r3, r4
 801dbde:	bf0c      	ite	eq
 801dbe0:	f8c8 2000 	streq.w	r2, [r8]
 801dbe4:	605a      	strne	r2, [r3, #4]
 801dbe6:	e7eb      	b.n	801dbc0 <_malloc_r+0xa8>
 801dbe8:	4623      	mov	r3, r4
 801dbea:	6864      	ldr	r4, [r4, #4]
 801dbec:	e7ae      	b.n	801db4c <_malloc_r+0x34>
 801dbee:	463c      	mov	r4, r7
 801dbf0:	687f      	ldr	r7, [r7, #4]
 801dbf2:	e7b6      	b.n	801db62 <_malloc_r+0x4a>
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	685b      	ldr	r3, [r3, #4]
 801dbf8:	42a3      	cmp	r3, r4
 801dbfa:	d1fb      	bne.n	801dbf4 <_malloc_r+0xdc>
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	6053      	str	r3, [r2, #4]
 801dc00:	e7de      	b.n	801dbc0 <_malloc_r+0xa8>
 801dc02:	230c      	movs	r3, #12
 801dc04:	6033      	str	r3, [r6, #0]
 801dc06:	4630      	mov	r0, r6
 801dc08:	f000 f80c 	bl	801dc24 <__malloc_unlock>
 801dc0c:	e794      	b.n	801db38 <_malloc_r+0x20>
 801dc0e:	6005      	str	r5, [r0, #0]
 801dc10:	e7d6      	b.n	801dbc0 <_malloc_r+0xa8>
 801dc12:	bf00      	nop
 801dc14:	20007620 	.word	0x20007620

0801dc18 <__malloc_lock>:
 801dc18:	4801      	ldr	r0, [pc, #4]	@ (801dc20 <__malloc_lock+0x8>)
 801dc1a:	f7ff bf00 	b.w	801da1e <__retarget_lock_acquire_recursive>
 801dc1e:	bf00      	nop
 801dc20:	20007618 	.word	0x20007618

0801dc24 <__malloc_unlock>:
 801dc24:	4801      	ldr	r0, [pc, #4]	@ (801dc2c <__malloc_unlock+0x8>)
 801dc26:	f7ff befb 	b.w	801da20 <__retarget_lock_release_recursive>
 801dc2a:	bf00      	nop
 801dc2c:	20007618 	.word	0x20007618

0801dc30 <__ssputs_r>:
 801dc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc34:	688e      	ldr	r6, [r1, #8]
 801dc36:	461f      	mov	r7, r3
 801dc38:	42be      	cmp	r6, r7
 801dc3a:	680b      	ldr	r3, [r1, #0]
 801dc3c:	4682      	mov	sl, r0
 801dc3e:	460c      	mov	r4, r1
 801dc40:	4690      	mov	r8, r2
 801dc42:	d82d      	bhi.n	801dca0 <__ssputs_r+0x70>
 801dc44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dc4c:	d026      	beq.n	801dc9c <__ssputs_r+0x6c>
 801dc4e:	6965      	ldr	r5, [r4, #20]
 801dc50:	6909      	ldr	r1, [r1, #16]
 801dc52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc56:	eba3 0901 	sub.w	r9, r3, r1
 801dc5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dc5e:	1c7b      	adds	r3, r7, #1
 801dc60:	444b      	add	r3, r9
 801dc62:	106d      	asrs	r5, r5, #1
 801dc64:	429d      	cmp	r5, r3
 801dc66:	bf38      	it	cc
 801dc68:	461d      	movcc	r5, r3
 801dc6a:	0553      	lsls	r3, r2, #21
 801dc6c:	d527      	bpl.n	801dcbe <__ssputs_r+0x8e>
 801dc6e:	4629      	mov	r1, r5
 801dc70:	f7ff ff52 	bl	801db18 <_malloc_r>
 801dc74:	4606      	mov	r6, r0
 801dc76:	b360      	cbz	r0, 801dcd2 <__ssputs_r+0xa2>
 801dc78:	6921      	ldr	r1, [r4, #16]
 801dc7a:	464a      	mov	r2, r9
 801dc7c:	f7ff fed1 	bl	801da22 <memcpy>
 801dc80:	89a3      	ldrh	r3, [r4, #12]
 801dc82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dc86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dc8a:	81a3      	strh	r3, [r4, #12]
 801dc8c:	6126      	str	r6, [r4, #16]
 801dc8e:	6165      	str	r5, [r4, #20]
 801dc90:	444e      	add	r6, r9
 801dc92:	eba5 0509 	sub.w	r5, r5, r9
 801dc96:	6026      	str	r6, [r4, #0]
 801dc98:	60a5      	str	r5, [r4, #8]
 801dc9a:	463e      	mov	r6, r7
 801dc9c:	42be      	cmp	r6, r7
 801dc9e:	d900      	bls.n	801dca2 <__ssputs_r+0x72>
 801dca0:	463e      	mov	r6, r7
 801dca2:	6820      	ldr	r0, [r4, #0]
 801dca4:	4632      	mov	r2, r6
 801dca6:	4641      	mov	r1, r8
 801dca8:	f000 fd2c 	bl	801e704 <memmove>
 801dcac:	68a3      	ldr	r3, [r4, #8]
 801dcae:	1b9b      	subs	r3, r3, r6
 801dcb0:	60a3      	str	r3, [r4, #8]
 801dcb2:	6823      	ldr	r3, [r4, #0]
 801dcb4:	4433      	add	r3, r6
 801dcb6:	6023      	str	r3, [r4, #0]
 801dcb8:	2000      	movs	r0, #0
 801dcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcbe:	462a      	mov	r2, r5
 801dcc0:	f000 fd6c 	bl	801e79c <_realloc_r>
 801dcc4:	4606      	mov	r6, r0
 801dcc6:	2800      	cmp	r0, #0
 801dcc8:	d1e0      	bne.n	801dc8c <__ssputs_r+0x5c>
 801dcca:	6921      	ldr	r1, [r4, #16]
 801dccc:	4650      	mov	r0, sl
 801dcce:	f7ff feb7 	bl	801da40 <_free_r>
 801dcd2:	230c      	movs	r3, #12
 801dcd4:	f8ca 3000 	str.w	r3, [sl]
 801dcd8:	89a3      	ldrh	r3, [r4, #12]
 801dcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcde:	81a3      	strh	r3, [r4, #12]
 801dce0:	f04f 30ff 	mov.w	r0, #4294967295
 801dce4:	e7e9      	b.n	801dcba <__ssputs_r+0x8a>
	...

0801dce8 <_svfiprintf_r>:
 801dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcec:	4698      	mov	r8, r3
 801dcee:	898b      	ldrh	r3, [r1, #12]
 801dcf0:	061b      	lsls	r3, r3, #24
 801dcf2:	b09d      	sub	sp, #116	@ 0x74
 801dcf4:	4607      	mov	r7, r0
 801dcf6:	460d      	mov	r5, r1
 801dcf8:	4614      	mov	r4, r2
 801dcfa:	d510      	bpl.n	801dd1e <_svfiprintf_r+0x36>
 801dcfc:	690b      	ldr	r3, [r1, #16]
 801dcfe:	b973      	cbnz	r3, 801dd1e <_svfiprintf_r+0x36>
 801dd00:	2140      	movs	r1, #64	@ 0x40
 801dd02:	f7ff ff09 	bl	801db18 <_malloc_r>
 801dd06:	6028      	str	r0, [r5, #0]
 801dd08:	6128      	str	r0, [r5, #16]
 801dd0a:	b930      	cbnz	r0, 801dd1a <_svfiprintf_r+0x32>
 801dd0c:	230c      	movs	r3, #12
 801dd0e:	603b      	str	r3, [r7, #0]
 801dd10:	f04f 30ff 	mov.w	r0, #4294967295
 801dd14:	b01d      	add	sp, #116	@ 0x74
 801dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1a:	2340      	movs	r3, #64	@ 0x40
 801dd1c:	616b      	str	r3, [r5, #20]
 801dd1e:	2300      	movs	r3, #0
 801dd20:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd22:	2320      	movs	r3, #32
 801dd24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dd28:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd2c:	2330      	movs	r3, #48	@ 0x30
 801dd2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801decc <_svfiprintf_r+0x1e4>
 801dd32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dd36:	f04f 0901 	mov.w	r9, #1
 801dd3a:	4623      	mov	r3, r4
 801dd3c:	469a      	mov	sl, r3
 801dd3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd42:	b10a      	cbz	r2, 801dd48 <_svfiprintf_r+0x60>
 801dd44:	2a25      	cmp	r2, #37	@ 0x25
 801dd46:	d1f9      	bne.n	801dd3c <_svfiprintf_r+0x54>
 801dd48:	ebba 0b04 	subs.w	fp, sl, r4
 801dd4c:	d00b      	beq.n	801dd66 <_svfiprintf_r+0x7e>
 801dd4e:	465b      	mov	r3, fp
 801dd50:	4622      	mov	r2, r4
 801dd52:	4629      	mov	r1, r5
 801dd54:	4638      	mov	r0, r7
 801dd56:	f7ff ff6b 	bl	801dc30 <__ssputs_r>
 801dd5a:	3001      	adds	r0, #1
 801dd5c:	f000 80a7 	beq.w	801deae <_svfiprintf_r+0x1c6>
 801dd60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd62:	445a      	add	r2, fp
 801dd64:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd66:	f89a 3000 	ldrb.w	r3, [sl]
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	f000 809f 	beq.w	801deae <_svfiprintf_r+0x1c6>
 801dd70:	2300      	movs	r3, #0
 801dd72:	f04f 32ff 	mov.w	r2, #4294967295
 801dd76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd7a:	f10a 0a01 	add.w	sl, sl, #1
 801dd7e:	9304      	str	r3, [sp, #16]
 801dd80:	9307      	str	r3, [sp, #28]
 801dd82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dd86:	931a      	str	r3, [sp, #104]	@ 0x68
 801dd88:	4654      	mov	r4, sl
 801dd8a:	2205      	movs	r2, #5
 801dd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd90:	484e      	ldr	r0, [pc, #312]	@ (801decc <_svfiprintf_r+0x1e4>)
 801dd92:	f7e2 f9fd 	bl	8000190 <memchr>
 801dd96:	9a04      	ldr	r2, [sp, #16]
 801dd98:	b9d8      	cbnz	r0, 801ddd2 <_svfiprintf_r+0xea>
 801dd9a:	06d0      	lsls	r0, r2, #27
 801dd9c:	bf44      	itt	mi
 801dd9e:	2320      	movmi	r3, #32
 801dda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dda4:	0711      	lsls	r1, r2, #28
 801dda6:	bf44      	itt	mi
 801dda8:	232b      	movmi	r3, #43	@ 0x2b
 801ddaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ddae:	f89a 3000 	ldrb.w	r3, [sl]
 801ddb2:	2b2a      	cmp	r3, #42	@ 0x2a
 801ddb4:	d015      	beq.n	801dde2 <_svfiprintf_r+0xfa>
 801ddb6:	9a07      	ldr	r2, [sp, #28]
 801ddb8:	4654      	mov	r4, sl
 801ddba:	2000      	movs	r0, #0
 801ddbc:	f04f 0c0a 	mov.w	ip, #10
 801ddc0:	4621      	mov	r1, r4
 801ddc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddc6:	3b30      	subs	r3, #48	@ 0x30
 801ddc8:	2b09      	cmp	r3, #9
 801ddca:	d94b      	bls.n	801de64 <_svfiprintf_r+0x17c>
 801ddcc:	b1b0      	cbz	r0, 801ddfc <_svfiprintf_r+0x114>
 801ddce:	9207      	str	r2, [sp, #28]
 801ddd0:	e014      	b.n	801ddfc <_svfiprintf_r+0x114>
 801ddd2:	eba0 0308 	sub.w	r3, r0, r8
 801ddd6:	fa09 f303 	lsl.w	r3, r9, r3
 801ddda:	4313      	orrs	r3, r2
 801dddc:	9304      	str	r3, [sp, #16]
 801ddde:	46a2      	mov	sl, r4
 801dde0:	e7d2      	b.n	801dd88 <_svfiprintf_r+0xa0>
 801dde2:	9b03      	ldr	r3, [sp, #12]
 801dde4:	1d19      	adds	r1, r3, #4
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	9103      	str	r1, [sp, #12]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	bfbb      	ittet	lt
 801ddee:	425b      	neglt	r3, r3
 801ddf0:	f042 0202 	orrlt.w	r2, r2, #2
 801ddf4:	9307      	strge	r3, [sp, #28]
 801ddf6:	9307      	strlt	r3, [sp, #28]
 801ddf8:	bfb8      	it	lt
 801ddfa:	9204      	strlt	r2, [sp, #16]
 801ddfc:	7823      	ldrb	r3, [r4, #0]
 801ddfe:	2b2e      	cmp	r3, #46	@ 0x2e
 801de00:	d10a      	bne.n	801de18 <_svfiprintf_r+0x130>
 801de02:	7863      	ldrb	r3, [r4, #1]
 801de04:	2b2a      	cmp	r3, #42	@ 0x2a
 801de06:	d132      	bne.n	801de6e <_svfiprintf_r+0x186>
 801de08:	9b03      	ldr	r3, [sp, #12]
 801de0a:	1d1a      	adds	r2, r3, #4
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	9203      	str	r2, [sp, #12]
 801de10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801de14:	3402      	adds	r4, #2
 801de16:	9305      	str	r3, [sp, #20]
 801de18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dedc <_svfiprintf_r+0x1f4>
 801de1c:	7821      	ldrb	r1, [r4, #0]
 801de1e:	2203      	movs	r2, #3
 801de20:	4650      	mov	r0, sl
 801de22:	f7e2 f9b5 	bl	8000190 <memchr>
 801de26:	b138      	cbz	r0, 801de38 <_svfiprintf_r+0x150>
 801de28:	9b04      	ldr	r3, [sp, #16]
 801de2a:	eba0 000a 	sub.w	r0, r0, sl
 801de2e:	2240      	movs	r2, #64	@ 0x40
 801de30:	4082      	lsls	r2, r0
 801de32:	4313      	orrs	r3, r2
 801de34:	3401      	adds	r4, #1
 801de36:	9304      	str	r3, [sp, #16]
 801de38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de3c:	4824      	ldr	r0, [pc, #144]	@ (801ded0 <_svfiprintf_r+0x1e8>)
 801de3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801de42:	2206      	movs	r2, #6
 801de44:	f7e2 f9a4 	bl	8000190 <memchr>
 801de48:	2800      	cmp	r0, #0
 801de4a:	d036      	beq.n	801deba <_svfiprintf_r+0x1d2>
 801de4c:	4b21      	ldr	r3, [pc, #132]	@ (801ded4 <_svfiprintf_r+0x1ec>)
 801de4e:	bb1b      	cbnz	r3, 801de98 <_svfiprintf_r+0x1b0>
 801de50:	9b03      	ldr	r3, [sp, #12]
 801de52:	3307      	adds	r3, #7
 801de54:	f023 0307 	bic.w	r3, r3, #7
 801de58:	3308      	adds	r3, #8
 801de5a:	9303      	str	r3, [sp, #12]
 801de5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de5e:	4433      	add	r3, r6
 801de60:	9309      	str	r3, [sp, #36]	@ 0x24
 801de62:	e76a      	b.n	801dd3a <_svfiprintf_r+0x52>
 801de64:	fb0c 3202 	mla	r2, ip, r2, r3
 801de68:	460c      	mov	r4, r1
 801de6a:	2001      	movs	r0, #1
 801de6c:	e7a8      	b.n	801ddc0 <_svfiprintf_r+0xd8>
 801de6e:	2300      	movs	r3, #0
 801de70:	3401      	adds	r4, #1
 801de72:	9305      	str	r3, [sp, #20]
 801de74:	4619      	mov	r1, r3
 801de76:	f04f 0c0a 	mov.w	ip, #10
 801de7a:	4620      	mov	r0, r4
 801de7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de80:	3a30      	subs	r2, #48	@ 0x30
 801de82:	2a09      	cmp	r2, #9
 801de84:	d903      	bls.n	801de8e <_svfiprintf_r+0x1a6>
 801de86:	2b00      	cmp	r3, #0
 801de88:	d0c6      	beq.n	801de18 <_svfiprintf_r+0x130>
 801de8a:	9105      	str	r1, [sp, #20]
 801de8c:	e7c4      	b.n	801de18 <_svfiprintf_r+0x130>
 801de8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801de92:	4604      	mov	r4, r0
 801de94:	2301      	movs	r3, #1
 801de96:	e7f0      	b.n	801de7a <_svfiprintf_r+0x192>
 801de98:	ab03      	add	r3, sp, #12
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	462a      	mov	r2, r5
 801de9e:	4b0e      	ldr	r3, [pc, #56]	@ (801ded8 <_svfiprintf_r+0x1f0>)
 801dea0:	a904      	add	r1, sp, #16
 801dea2:	4638      	mov	r0, r7
 801dea4:	f3af 8000 	nop.w
 801dea8:	1c42      	adds	r2, r0, #1
 801deaa:	4606      	mov	r6, r0
 801deac:	d1d6      	bne.n	801de5c <_svfiprintf_r+0x174>
 801deae:	89ab      	ldrh	r3, [r5, #12]
 801deb0:	065b      	lsls	r3, r3, #25
 801deb2:	f53f af2d 	bmi.w	801dd10 <_svfiprintf_r+0x28>
 801deb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801deb8:	e72c      	b.n	801dd14 <_svfiprintf_r+0x2c>
 801deba:	ab03      	add	r3, sp, #12
 801debc:	9300      	str	r3, [sp, #0]
 801debe:	462a      	mov	r2, r5
 801dec0:	4b05      	ldr	r3, [pc, #20]	@ (801ded8 <_svfiprintf_r+0x1f0>)
 801dec2:	a904      	add	r1, sp, #16
 801dec4:	4638      	mov	r0, r7
 801dec6:	f000 f9bb 	bl	801e240 <_printf_i>
 801deca:	e7ed      	b.n	801dea8 <_svfiprintf_r+0x1c0>
 801decc:	0801ed34 	.word	0x0801ed34
 801ded0:	0801ed3e 	.word	0x0801ed3e
 801ded4:	00000000 	.word	0x00000000
 801ded8:	0801dc31 	.word	0x0801dc31
 801dedc:	0801ed3a 	.word	0x0801ed3a

0801dee0 <__sfputc_r>:
 801dee0:	6893      	ldr	r3, [r2, #8]
 801dee2:	3b01      	subs	r3, #1
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	b410      	push	{r4}
 801dee8:	6093      	str	r3, [r2, #8]
 801deea:	da08      	bge.n	801defe <__sfputc_r+0x1e>
 801deec:	6994      	ldr	r4, [r2, #24]
 801deee:	42a3      	cmp	r3, r4
 801def0:	db01      	blt.n	801def6 <__sfputc_r+0x16>
 801def2:	290a      	cmp	r1, #10
 801def4:	d103      	bne.n	801defe <__sfputc_r+0x1e>
 801def6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801defa:	f7ff bc19 	b.w	801d730 <__swbuf_r>
 801defe:	6813      	ldr	r3, [r2, #0]
 801df00:	1c58      	adds	r0, r3, #1
 801df02:	6010      	str	r0, [r2, #0]
 801df04:	7019      	strb	r1, [r3, #0]
 801df06:	4608      	mov	r0, r1
 801df08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df0c:	4770      	bx	lr

0801df0e <__sfputs_r>:
 801df0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df10:	4606      	mov	r6, r0
 801df12:	460f      	mov	r7, r1
 801df14:	4614      	mov	r4, r2
 801df16:	18d5      	adds	r5, r2, r3
 801df18:	42ac      	cmp	r4, r5
 801df1a:	d101      	bne.n	801df20 <__sfputs_r+0x12>
 801df1c:	2000      	movs	r0, #0
 801df1e:	e007      	b.n	801df30 <__sfputs_r+0x22>
 801df20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df24:	463a      	mov	r2, r7
 801df26:	4630      	mov	r0, r6
 801df28:	f7ff ffda 	bl	801dee0 <__sfputc_r>
 801df2c:	1c43      	adds	r3, r0, #1
 801df2e:	d1f3      	bne.n	801df18 <__sfputs_r+0xa>
 801df30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801df34 <_vfiprintf_r>:
 801df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df38:	460d      	mov	r5, r1
 801df3a:	b09d      	sub	sp, #116	@ 0x74
 801df3c:	4614      	mov	r4, r2
 801df3e:	4698      	mov	r8, r3
 801df40:	4606      	mov	r6, r0
 801df42:	b118      	cbz	r0, 801df4c <_vfiprintf_r+0x18>
 801df44:	6a03      	ldr	r3, [r0, #32]
 801df46:	b90b      	cbnz	r3, 801df4c <_vfiprintf_r+0x18>
 801df48:	f7ff fac8 	bl	801d4dc <__sinit>
 801df4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df4e:	07d9      	lsls	r1, r3, #31
 801df50:	d405      	bmi.n	801df5e <_vfiprintf_r+0x2a>
 801df52:	89ab      	ldrh	r3, [r5, #12]
 801df54:	059a      	lsls	r2, r3, #22
 801df56:	d402      	bmi.n	801df5e <_vfiprintf_r+0x2a>
 801df58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df5a:	f7ff fd60 	bl	801da1e <__retarget_lock_acquire_recursive>
 801df5e:	89ab      	ldrh	r3, [r5, #12]
 801df60:	071b      	lsls	r3, r3, #28
 801df62:	d501      	bpl.n	801df68 <_vfiprintf_r+0x34>
 801df64:	692b      	ldr	r3, [r5, #16]
 801df66:	b99b      	cbnz	r3, 801df90 <_vfiprintf_r+0x5c>
 801df68:	4629      	mov	r1, r5
 801df6a:	4630      	mov	r0, r6
 801df6c:	f7ff fc1e 	bl	801d7ac <__swsetup_r>
 801df70:	b170      	cbz	r0, 801df90 <_vfiprintf_r+0x5c>
 801df72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df74:	07dc      	lsls	r4, r3, #31
 801df76:	d504      	bpl.n	801df82 <_vfiprintf_r+0x4e>
 801df78:	f04f 30ff 	mov.w	r0, #4294967295
 801df7c:	b01d      	add	sp, #116	@ 0x74
 801df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df82:	89ab      	ldrh	r3, [r5, #12]
 801df84:	0598      	lsls	r0, r3, #22
 801df86:	d4f7      	bmi.n	801df78 <_vfiprintf_r+0x44>
 801df88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df8a:	f7ff fd49 	bl	801da20 <__retarget_lock_release_recursive>
 801df8e:	e7f3      	b.n	801df78 <_vfiprintf_r+0x44>
 801df90:	2300      	movs	r3, #0
 801df92:	9309      	str	r3, [sp, #36]	@ 0x24
 801df94:	2320      	movs	r3, #32
 801df96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801df9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801df9e:	2330      	movs	r3, #48	@ 0x30
 801dfa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e150 <_vfiprintf_r+0x21c>
 801dfa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dfa8:	f04f 0901 	mov.w	r9, #1
 801dfac:	4623      	mov	r3, r4
 801dfae:	469a      	mov	sl, r3
 801dfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dfb4:	b10a      	cbz	r2, 801dfba <_vfiprintf_r+0x86>
 801dfb6:	2a25      	cmp	r2, #37	@ 0x25
 801dfb8:	d1f9      	bne.n	801dfae <_vfiprintf_r+0x7a>
 801dfba:	ebba 0b04 	subs.w	fp, sl, r4
 801dfbe:	d00b      	beq.n	801dfd8 <_vfiprintf_r+0xa4>
 801dfc0:	465b      	mov	r3, fp
 801dfc2:	4622      	mov	r2, r4
 801dfc4:	4629      	mov	r1, r5
 801dfc6:	4630      	mov	r0, r6
 801dfc8:	f7ff ffa1 	bl	801df0e <__sfputs_r>
 801dfcc:	3001      	adds	r0, #1
 801dfce:	f000 80a7 	beq.w	801e120 <_vfiprintf_r+0x1ec>
 801dfd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfd4:	445a      	add	r2, fp
 801dfd6:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfd8:	f89a 3000 	ldrb.w	r3, [sl]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	f000 809f 	beq.w	801e120 <_vfiprintf_r+0x1ec>
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	f04f 32ff 	mov.w	r2, #4294967295
 801dfe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dfec:	f10a 0a01 	add.w	sl, sl, #1
 801dff0:	9304      	str	r3, [sp, #16]
 801dff2:	9307      	str	r3, [sp, #28]
 801dff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dff8:	931a      	str	r3, [sp, #104]	@ 0x68
 801dffa:	4654      	mov	r4, sl
 801dffc:	2205      	movs	r2, #5
 801dffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e002:	4853      	ldr	r0, [pc, #332]	@ (801e150 <_vfiprintf_r+0x21c>)
 801e004:	f7e2 f8c4 	bl	8000190 <memchr>
 801e008:	9a04      	ldr	r2, [sp, #16]
 801e00a:	b9d8      	cbnz	r0, 801e044 <_vfiprintf_r+0x110>
 801e00c:	06d1      	lsls	r1, r2, #27
 801e00e:	bf44      	itt	mi
 801e010:	2320      	movmi	r3, #32
 801e012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e016:	0713      	lsls	r3, r2, #28
 801e018:	bf44      	itt	mi
 801e01a:	232b      	movmi	r3, #43	@ 0x2b
 801e01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e020:	f89a 3000 	ldrb.w	r3, [sl]
 801e024:	2b2a      	cmp	r3, #42	@ 0x2a
 801e026:	d015      	beq.n	801e054 <_vfiprintf_r+0x120>
 801e028:	9a07      	ldr	r2, [sp, #28]
 801e02a:	4654      	mov	r4, sl
 801e02c:	2000      	movs	r0, #0
 801e02e:	f04f 0c0a 	mov.w	ip, #10
 801e032:	4621      	mov	r1, r4
 801e034:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e038:	3b30      	subs	r3, #48	@ 0x30
 801e03a:	2b09      	cmp	r3, #9
 801e03c:	d94b      	bls.n	801e0d6 <_vfiprintf_r+0x1a2>
 801e03e:	b1b0      	cbz	r0, 801e06e <_vfiprintf_r+0x13a>
 801e040:	9207      	str	r2, [sp, #28]
 801e042:	e014      	b.n	801e06e <_vfiprintf_r+0x13a>
 801e044:	eba0 0308 	sub.w	r3, r0, r8
 801e048:	fa09 f303 	lsl.w	r3, r9, r3
 801e04c:	4313      	orrs	r3, r2
 801e04e:	9304      	str	r3, [sp, #16]
 801e050:	46a2      	mov	sl, r4
 801e052:	e7d2      	b.n	801dffa <_vfiprintf_r+0xc6>
 801e054:	9b03      	ldr	r3, [sp, #12]
 801e056:	1d19      	adds	r1, r3, #4
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	9103      	str	r1, [sp, #12]
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	bfbb      	ittet	lt
 801e060:	425b      	neglt	r3, r3
 801e062:	f042 0202 	orrlt.w	r2, r2, #2
 801e066:	9307      	strge	r3, [sp, #28]
 801e068:	9307      	strlt	r3, [sp, #28]
 801e06a:	bfb8      	it	lt
 801e06c:	9204      	strlt	r2, [sp, #16]
 801e06e:	7823      	ldrb	r3, [r4, #0]
 801e070:	2b2e      	cmp	r3, #46	@ 0x2e
 801e072:	d10a      	bne.n	801e08a <_vfiprintf_r+0x156>
 801e074:	7863      	ldrb	r3, [r4, #1]
 801e076:	2b2a      	cmp	r3, #42	@ 0x2a
 801e078:	d132      	bne.n	801e0e0 <_vfiprintf_r+0x1ac>
 801e07a:	9b03      	ldr	r3, [sp, #12]
 801e07c:	1d1a      	adds	r2, r3, #4
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	9203      	str	r2, [sp, #12]
 801e082:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e086:	3402      	adds	r4, #2
 801e088:	9305      	str	r3, [sp, #20]
 801e08a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e160 <_vfiprintf_r+0x22c>
 801e08e:	7821      	ldrb	r1, [r4, #0]
 801e090:	2203      	movs	r2, #3
 801e092:	4650      	mov	r0, sl
 801e094:	f7e2 f87c 	bl	8000190 <memchr>
 801e098:	b138      	cbz	r0, 801e0aa <_vfiprintf_r+0x176>
 801e09a:	9b04      	ldr	r3, [sp, #16]
 801e09c:	eba0 000a 	sub.w	r0, r0, sl
 801e0a0:	2240      	movs	r2, #64	@ 0x40
 801e0a2:	4082      	lsls	r2, r0
 801e0a4:	4313      	orrs	r3, r2
 801e0a6:	3401      	adds	r4, #1
 801e0a8:	9304      	str	r3, [sp, #16]
 801e0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ae:	4829      	ldr	r0, [pc, #164]	@ (801e154 <_vfiprintf_r+0x220>)
 801e0b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e0b4:	2206      	movs	r2, #6
 801e0b6:	f7e2 f86b 	bl	8000190 <memchr>
 801e0ba:	2800      	cmp	r0, #0
 801e0bc:	d03f      	beq.n	801e13e <_vfiprintf_r+0x20a>
 801e0be:	4b26      	ldr	r3, [pc, #152]	@ (801e158 <_vfiprintf_r+0x224>)
 801e0c0:	bb1b      	cbnz	r3, 801e10a <_vfiprintf_r+0x1d6>
 801e0c2:	9b03      	ldr	r3, [sp, #12]
 801e0c4:	3307      	adds	r3, #7
 801e0c6:	f023 0307 	bic.w	r3, r3, #7
 801e0ca:	3308      	adds	r3, #8
 801e0cc:	9303      	str	r3, [sp, #12]
 801e0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0d0:	443b      	add	r3, r7
 801e0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0d4:	e76a      	b.n	801dfac <_vfiprintf_r+0x78>
 801e0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e0da:	460c      	mov	r4, r1
 801e0dc:	2001      	movs	r0, #1
 801e0de:	e7a8      	b.n	801e032 <_vfiprintf_r+0xfe>
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	3401      	adds	r4, #1
 801e0e4:	9305      	str	r3, [sp, #20]
 801e0e6:	4619      	mov	r1, r3
 801e0e8:	f04f 0c0a 	mov.w	ip, #10
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0f2:	3a30      	subs	r2, #48	@ 0x30
 801e0f4:	2a09      	cmp	r2, #9
 801e0f6:	d903      	bls.n	801e100 <_vfiprintf_r+0x1cc>
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d0c6      	beq.n	801e08a <_vfiprintf_r+0x156>
 801e0fc:	9105      	str	r1, [sp, #20]
 801e0fe:	e7c4      	b.n	801e08a <_vfiprintf_r+0x156>
 801e100:	fb0c 2101 	mla	r1, ip, r1, r2
 801e104:	4604      	mov	r4, r0
 801e106:	2301      	movs	r3, #1
 801e108:	e7f0      	b.n	801e0ec <_vfiprintf_r+0x1b8>
 801e10a:	ab03      	add	r3, sp, #12
 801e10c:	9300      	str	r3, [sp, #0]
 801e10e:	462a      	mov	r2, r5
 801e110:	4b12      	ldr	r3, [pc, #72]	@ (801e15c <_vfiprintf_r+0x228>)
 801e112:	a904      	add	r1, sp, #16
 801e114:	4630      	mov	r0, r6
 801e116:	f3af 8000 	nop.w
 801e11a:	4607      	mov	r7, r0
 801e11c:	1c78      	adds	r0, r7, #1
 801e11e:	d1d6      	bne.n	801e0ce <_vfiprintf_r+0x19a>
 801e120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e122:	07d9      	lsls	r1, r3, #31
 801e124:	d405      	bmi.n	801e132 <_vfiprintf_r+0x1fe>
 801e126:	89ab      	ldrh	r3, [r5, #12]
 801e128:	059a      	lsls	r2, r3, #22
 801e12a:	d402      	bmi.n	801e132 <_vfiprintf_r+0x1fe>
 801e12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e12e:	f7ff fc77 	bl	801da20 <__retarget_lock_release_recursive>
 801e132:	89ab      	ldrh	r3, [r5, #12]
 801e134:	065b      	lsls	r3, r3, #25
 801e136:	f53f af1f 	bmi.w	801df78 <_vfiprintf_r+0x44>
 801e13a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e13c:	e71e      	b.n	801df7c <_vfiprintf_r+0x48>
 801e13e:	ab03      	add	r3, sp, #12
 801e140:	9300      	str	r3, [sp, #0]
 801e142:	462a      	mov	r2, r5
 801e144:	4b05      	ldr	r3, [pc, #20]	@ (801e15c <_vfiprintf_r+0x228>)
 801e146:	a904      	add	r1, sp, #16
 801e148:	4630      	mov	r0, r6
 801e14a:	f000 f879 	bl	801e240 <_printf_i>
 801e14e:	e7e4      	b.n	801e11a <_vfiprintf_r+0x1e6>
 801e150:	0801ed34 	.word	0x0801ed34
 801e154:	0801ed3e 	.word	0x0801ed3e
 801e158:	00000000 	.word	0x00000000
 801e15c:	0801df0f 	.word	0x0801df0f
 801e160:	0801ed3a 	.word	0x0801ed3a

0801e164 <_printf_common>:
 801e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e168:	4616      	mov	r6, r2
 801e16a:	4698      	mov	r8, r3
 801e16c:	688a      	ldr	r2, [r1, #8]
 801e16e:	690b      	ldr	r3, [r1, #16]
 801e170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e174:	4293      	cmp	r3, r2
 801e176:	bfb8      	it	lt
 801e178:	4613      	movlt	r3, r2
 801e17a:	6033      	str	r3, [r6, #0]
 801e17c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e180:	4607      	mov	r7, r0
 801e182:	460c      	mov	r4, r1
 801e184:	b10a      	cbz	r2, 801e18a <_printf_common+0x26>
 801e186:	3301      	adds	r3, #1
 801e188:	6033      	str	r3, [r6, #0]
 801e18a:	6823      	ldr	r3, [r4, #0]
 801e18c:	0699      	lsls	r1, r3, #26
 801e18e:	bf42      	ittt	mi
 801e190:	6833      	ldrmi	r3, [r6, #0]
 801e192:	3302      	addmi	r3, #2
 801e194:	6033      	strmi	r3, [r6, #0]
 801e196:	6825      	ldr	r5, [r4, #0]
 801e198:	f015 0506 	ands.w	r5, r5, #6
 801e19c:	d106      	bne.n	801e1ac <_printf_common+0x48>
 801e19e:	f104 0a19 	add.w	sl, r4, #25
 801e1a2:	68e3      	ldr	r3, [r4, #12]
 801e1a4:	6832      	ldr	r2, [r6, #0]
 801e1a6:	1a9b      	subs	r3, r3, r2
 801e1a8:	42ab      	cmp	r3, r5
 801e1aa:	dc26      	bgt.n	801e1fa <_printf_common+0x96>
 801e1ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e1b0:	6822      	ldr	r2, [r4, #0]
 801e1b2:	3b00      	subs	r3, #0
 801e1b4:	bf18      	it	ne
 801e1b6:	2301      	movne	r3, #1
 801e1b8:	0692      	lsls	r2, r2, #26
 801e1ba:	d42b      	bmi.n	801e214 <_printf_common+0xb0>
 801e1bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e1c0:	4641      	mov	r1, r8
 801e1c2:	4638      	mov	r0, r7
 801e1c4:	47c8      	blx	r9
 801e1c6:	3001      	adds	r0, #1
 801e1c8:	d01e      	beq.n	801e208 <_printf_common+0xa4>
 801e1ca:	6823      	ldr	r3, [r4, #0]
 801e1cc:	6922      	ldr	r2, [r4, #16]
 801e1ce:	f003 0306 	and.w	r3, r3, #6
 801e1d2:	2b04      	cmp	r3, #4
 801e1d4:	bf02      	ittt	eq
 801e1d6:	68e5      	ldreq	r5, [r4, #12]
 801e1d8:	6833      	ldreq	r3, [r6, #0]
 801e1da:	1aed      	subeq	r5, r5, r3
 801e1dc:	68a3      	ldr	r3, [r4, #8]
 801e1de:	bf0c      	ite	eq
 801e1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e1e4:	2500      	movne	r5, #0
 801e1e6:	4293      	cmp	r3, r2
 801e1e8:	bfc4      	itt	gt
 801e1ea:	1a9b      	subgt	r3, r3, r2
 801e1ec:	18ed      	addgt	r5, r5, r3
 801e1ee:	2600      	movs	r6, #0
 801e1f0:	341a      	adds	r4, #26
 801e1f2:	42b5      	cmp	r5, r6
 801e1f4:	d11a      	bne.n	801e22c <_printf_common+0xc8>
 801e1f6:	2000      	movs	r0, #0
 801e1f8:	e008      	b.n	801e20c <_printf_common+0xa8>
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	4652      	mov	r2, sl
 801e1fe:	4641      	mov	r1, r8
 801e200:	4638      	mov	r0, r7
 801e202:	47c8      	blx	r9
 801e204:	3001      	adds	r0, #1
 801e206:	d103      	bne.n	801e210 <_printf_common+0xac>
 801e208:	f04f 30ff 	mov.w	r0, #4294967295
 801e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e210:	3501      	adds	r5, #1
 801e212:	e7c6      	b.n	801e1a2 <_printf_common+0x3e>
 801e214:	18e1      	adds	r1, r4, r3
 801e216:	1c5a      	adds	r2, r3, #1
 801e218:	2030      	movs	r0, #48	@ 0x30
 801e21a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e21e:	4422      	add	r2, r4
 801e220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e228:	3302      	adds	r3, #2
 801e22a:	e7c7      	b.n	801e1bc <_printf_common+0x58>
 801e22c:	2301      	movs	r3, #1
 801e22e:	4622      	mov	r2, r4
 801e230:	4641      	mov	r1, r8
 801e232:	4638      	mov	r0, r7
 801e234:	47c8      	blx	r9
 801e236:	3001      	adds	r0, #1
 801e238:	d0e6      	beq.n	801e208 <_printf_common+0xa4>
 801e23a:	3601      	adds	r6, #1
 801e23c:	e7d9      	b.n	801e1f2 <_printf_common+0x8e>
	...

0801e240 <_printf_i>:
 801e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e244:	7e0f      	ldrb	r7, [r1, #24]
 801e246:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e248:	2f78      	cmp	r7, #120	@ 0x78
 801e24a:	4691      	mov	r9, r2
 801e24c:	4680      	mov	r8, r0
 801e24e:	460c      	mov	r4, r1
 801e250:	469a      	mov	sl, r3
 801e252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e256:	d807      	bhi.n	801e268 <_printf_i+0x28>
 801e258:	2f62      	cmp	r7, #98	@ 0x62
 801e25a:	d80a      	bhi.n	801e272 <_printf_i+0x32>
 801e25c:	2f00      	cmp	r7, #0
 801e25e:	f000 80d2 	beq.w	801e406 <_printf_i+0x1c6>
 801e262:	2f58      	cmp	r7, #88	@ 0x58
 801e264:	f000 80b9 	beq.w	801e3da <_printf_i+0x19a>
 801e268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e26c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e270:	e03a      	b.n	801e2e8 <_printf_i+0xa8>
 801e272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e276:	2b15      	cmp	r3, #21
 801e278:	d8f6      	bhi.n	801e268 <_printf_i+0x28>
 801e27a:	a101      	add	r1, pc, #4	@ (adr r1, 801e280 <_printf_i+0x40>)
 801e27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e280:	0801e2d9 	.word	0x0801e2d9
 801e284:	0801e2ed 	.word	0x0801e2ed
 801e288:	0801e269 	.word	0x0801e269
 801e28c:	0801e269 	.word	0x0801e269
 801e290:	0801e269 	.word	0x0801e269
 801e294:	0801e269 	.word	0x0801e269
 801e298:	0801e2ed 	.word	0x0801e2ed
 801e29c:	0801e269 	.word	0x0801e269
 801e2a0:	0801e269 	.word	0x0801e269
 801e2a4:	0801e269 	.word	0x0801e269
 801e2a8:	0801e269 	.word	0x0801e269
 801e2ac:	0801e3ed 	.word	0x0801e3ed
 801e2b0:	0801e317 	.word	0x0801e317
 801e2b4:	0801e3a7 	.word	0x0801e3a7
 801e2b8:	0801e269 	.word	0x0801e269
 801e2bc:	0801e269 	.word	0x0801e269
 801e2c0:	0801e40f 	.word	0x0801e40f
 801e2c4:	0801e269 	.word	0x0801e269
 801e2c8:	0801e317 	.word	0x0801e317
 801e2cc:	0801e269 	.word	0x0801e269
 801e2d0:	0801e269 	.word	0x0801e269
 801e2d4:	0801e3af 	.word	0x0801e3af
 801e2d8:	6833      	ldr	r3, [r6, #0]
 801e2da:	1d1a      	adds	r2, r3, #4
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	6032      	str	r2, [r6, #0]
 801e2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e2e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e2e8:	2301      	movs	r3, #1
 801e2ea:	e09d      	b.n	801e428 <_printf_i+0x1e8>
 801e2ec:	6833      	ldr	r3, [r6, #0]
 801e2ee:	6820      	ldr	r0, [r4, #0]
 801e2f0:	1d19      	adds	r1, r3, #4
 801e2f2:	6031      	str	r1, [r6, #0]
 801e2f4:	0606      	lsls	r6, r0, #24
 801e2f6:	d501      	bpl.n	801e2fc <_printf_i+0xbc>
 801e2f8:	681d      	ldr	r5, [r3, #0]
 801e2fa:	e003      	b.n	801e304 <_printf_i+0xc4>
 801e2fc:	0645      	lsls	r5, r0, #25
 801e2fe:	d5fb      	bpl.n	801e2f8 <_printf_i+0xb8>
 801e300:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e304:	2d00      	cmp	r5, #0
 801e306:	da03      	bge.n	801e310 <_printf_i+0xd0>
 801e308:	232d      	movs	r3, #45	@ 0x2d
 801e30a:	426d      	negs	r5, r5
 801e30c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e310:	4859      	ldr	r0, [pc, #356]	@ (801e478 <_printf_i+0x238>)
 801e312:	230a      	movs	r3, #10
 801e314:	e011      	b.n	801e33a <_printf_i+0xfa>
 801e316:	6821      	ldr	r1, [r4, #0]
 801e318:	6833      	ldr	r3, [r6, #0]
 801e31a:	0608      	lsls	r0, r1, #24
 801e31c:	f853 5b04 	ldr.w	r5, [r3], #4
 801e320:	d402      	bmi.n	801e328 <_printf_i+0xe8>
 801e322:	0649      	lsls	r1, r1, #25
 801e324:	bf48      	it	mi
 801e326:	b2ad      	uxthmi	r5, r5
 801e328:	2f6f      	cmp	r7, #111	@ 0x6f
 801e32a:	4853      	ldr	r0, [pc, #332]	@ (801e478 <_printf_i+0x238>)
 801e32c:	6033      	str	r3, [r6, #0]
 801e32e:	bf14      	ite	ne
 801e330:	230a      	movne	r3, #10
 801e332:	2308      	moveq	r3, #8
 801e334:	2100      	movs	r1, #0
 801e336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e33a:	6866      	ldr	r6, [r4, #4]
 801e33c:	60a6      	str	r6, [r4, #8]
 801e33e:	2e00      	cmp	r6, #0
 801e340:	bfa2      	ittt	ge
 801e342:	6821      	ldrge	r1, [r4, #0]
 801e344:	f021 0104 	bicge.w	r1, r1, #4
 801e348:	6021      	strge	r1, [r4, #0]
 801e34a:	b90d      	cbnz	r5, 801e350 <_printf_i+0x110>
 801e34c:	2e00      	cmp	r6, #0
 801e34e:	d04b      	beq.n	801e3e8 <_printf_i+0x1a8>
 801e350:	4616      	mov	r6, r2
 801e352:	fbb5 f1f3 	udiv	r1, r5, r3
 801e356:	fb03 5711 	mls	r7, r3, r1, r5
 801e35a:	5dc7      	ldrb	r7, [r0, r7]
 801e35c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e360:	462f      	mov	r7, r5
 801e362:	42bb      	cmp	r3, r7
 801e364:	460d      	mov	r5, r1
 801e366:	d9f4      	bls.n	801e352 <_printf_i+0x112>
 801e368:	2b08      	cmp	r3, #8
 801e36a:	d10b      	bne.n	801e384 <_printf_i+0x144>
 801e36c:	6823      	ldr	r3, [r4, #0]
 801e36e:	07df      	lsls	r7, r3, #31
 801e370:	d508      	bpl.n	801e384 <_printf_i+0x144>
 801e372:	6923      	ldr	r3, [r4, #16]
 801e374:	6861      	ldr	r1, [r4, #4]
 801e376:	4299      	cmp	r1, r3
 801e378:	bfde      	ittt	le
 801e37a:	2330      	movle	r3, #48	@ 0x30
 801e37c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e380:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e384:	1b92      	subs	r2, r2, r6
 801e386:	6122      	str	r2, [r4, #16]
 801e388:	f8cd a000 	str.w	sl, [sp]
 801e38c:	464b      	mov	r3, r9
 801e38e:	aa03      	add	r2, sp, #12
 801e390:	4621      	mov	r1, r4
 801e392:	4640      	mov	r0, r8
 801e394:	f7ff fee6 	bl	801e164 <_printf_common>
 801e398:	3001      	adds	r0, #1
 801e39a:	d14a      	bne.n	801e432 <_printf_i+0x1f2>
 801e39c:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a0:	b004      	add	sp, #16
 801e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3a6:	6823      	ldr	r3, [r4, #0]
 801e3a8:	f043 0320 	orr.w	r3, r3, #32
 801e3ac:	6023      	str	r3, [r4, #0]
 801e3ae:	4833      	ldr	r0, [pc, #204]	@ (801e47c <_printf_i+0x23c>)
 801e3b0:	2778      	movs	r7, #120	@ 0x78
 801e3b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e3b6:	6823      	ldr	r3, [r4, #0]
 801e3b8:	6831      	ldr	r1, [r6, #0]
 801e3ba:	061f      	lsls	r7, r3, #24
 801e3bc:	f851 5b04 	ldr.w	r5, [r1], #4
 801e3c0:	d402      	bmi.n	801e3c8 <_printf_i+0x188>
 801e3c2:	065f      	lsls	r7, r3, #25
 801e3c4:	bf48      	it	mi
 801e3c6:	b2ad      	uxthmi	r5, r5
 801e3c8:	6031      	str	r1, [r6, #0]
 801e3ca:	07d9      	lsls	r1, r3, #31
 801e3cc:	bf44      	itt	mi
 801e3ce:	f043 0320 	orrmi.w	r3, r3, #32
 801e3d2:	6023      	strmi	r3, [r4, #0]
 801e3d4:	b11d      	cbz	r5, 801e3de <_printf_i+0x19e>
 801e3d6:	2310      	movs	r3, #16
 801e3d8:	e7ac      	b.n	801e334 <_printf_i+0xf4>
 801e3da:	4827      	ldr	r0, [pc, #156]	@ (801e478 <_printf_i+0x238>)
 801e3dc:	e7e9      	b.n	801e3b2 <_printf_i+0x172>
 801e3de:	6823      	ldr	r3, [r4, #0]
 801e3e0:	f023 0320 	bic.w	r3, r3, #32
 801e3e4:	6023      	str	r3, [r4, #0]
 801e3e6:	e7f6      	b.n	801e3d6 <_printf_i+0x196>
 801e3e8:	4616      	mov	r6, r2
 801e3ea:	e7bd      	b.n	801e368 <_printf_i+0x128>
 801e3ec:	6833      	ldr	r3, [r6, #0]
 801e3ee:	6825      	ldr	r5, [r4, #0]
 801e3f0:	6961      	ldr	r1, [r4, #20]
 801e3f2:	1d18      	adds	r0, r3, #4
 801e3f4:	6030      	str	r0, [r6, #0]
 801e3f6:	062e      	lsls	r6, r5, #24
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	d501      	bpl.n	801e400 <_printf_i+0x1c0>
 801e3fc:	6019      	str	r1, [r3, #0]
 801e3fe:	e002      	b.n	801e406 <_printf_i+0x1c6>
 801e400:	0668      	lsls	r0, r5, #25
 801e402:	d5fb      	bpl.n	801e3fc <_printf_i+0x1bc>
 801e404:	8019      	strh	r1, [r3, #0]
 801e406:	2300      	movs	r3, #0
 801e408:	6123      	str	r3, [r4, #16]
 801e40a:	4616      	mov	r6, r2
 801e40c:	e7bc      	b.n	801e388 <_printf_i+0x148>
 801e40e:	6833      	ldr	r3, [r6, #0]
 801e410:	1d1a      	adds	r2, r3, #4
 801e412:	6032      	str	r2, [r6, #0]
 801e414:	681e      	ldr	r6, [r3, #0]
 801e416:	6862      	ldr	r2, [r4, #4]
 801e418:	2100      	movs	r1, #0
 801e41a:	4630      	mov	r0, r6
 801e41c:	f7e1 feb8 	bl	8000190 <memchr>
 801e420:	b108      	cbz	r0, 801e426 <_printf_i+0x1e6>
 801e422:	1b80      	subs	r0, r0, r6
 801e424:	6060      	str	r0, [r4, #4]
 801e426:	6863      	ldr	r3, [r4, #4]
 801e428:	6123      	str	r3, [r4, #16]
 801e42a:	2300      	movs	r3, #0
 801e42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e430:	e7aa      	b.n	801e388 <_printf_i+0x148>
 801e432:	6923      	ldr	r3, [r4, #16]
 801e434:	4632      	mov	r2, r6
 801e436:	4649      	mov	r1, r9
 801e438:	4640      	mov	r0, r8
 801e43a:	47d0      	blx	sl
 801e43c:	3001      	adds	r0, #1
 801e43e:	d0ad      	beq.n	801e39c <_printf_i+0x15c>
 801e440:	6823      	ldr	r3, [r4, #0]
 801e442:	079b      	lsls	r3, r3, #30
 801e444:	d413      	bmi.n	801e46e <_printf_i+0x22e>
 801e446:	68e0      	ldr	r0, [r4, #12]
 801e448:	9b03      	ldr	r3, [sp, #12]
 801e44a:	4298      	cmp	r0, r3
 801e44c:	bfb8      	it	lt
 801e44e:	4618      	movlt	r0, r3
 801e450:	e7a6      	b.n	801e3a0 <_printf_i+0x160>
 801e452:	2301      	movs	r3, #1
 801e454:	4632      	mov	r2, r6
 801e456:	4649      	mov	r1, r9
 801e458:	4640      	mov	r0, r8
 801e45a:	47d0      	blx	sl
 801e45c:	3001      	adds	r0, #1
 801e45e:	d09d      	beq.n	801e39c <_printf_i+0x15c>
 801e460:	3501      	adds	r5, #1
 801e462:	68e3      	ldr	r3, [r4, #12]
 801e464:	9903      	ldr	r1, [sp, #12]
 801e466:	1a5b      	subs	r3, r3, r1
 801e468:	42ab      	cmp	r3, r5
 801e46a:	dcf2      	bgt.n	801e452 <_printf_i+0x212>
 801e46c:	e7eb      	b.n	801e446 <_printf_i+0x206>
 801e46e:	2500      	movs	r5, #0
 801e470:	f104 0619 	add.w	r6, r4, #25
 801e474:	e7f5      	b.n	801e462 <_printf_i+0x222>
 801e476:	bf00      	nop
 801e478:	0801ed45 	.word	0x0801ed45
 801e47c:	0801ed56 	.word	0x0801ed56

0801e480 <__sflush_r>:
 801e480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e488:	0716      	lsls	r6, r2, #28
 801e48a:	4605      	mov	r5, r0
 801e48c:	460c      	mov	r4, r1
 801e48e:	d454      	bmi.n	801e53a <__sflush_r+0xba>
 801e490:	684b      	ldr	r3, [r1, #4]
 801e492:	2b00      	cmp	r3, #0
 801e494:	dc02      	bgt.n	801e49c <__sflush_r+0x1c>
 801e496:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e498:	2b00      	cmp	r3, #0
 801e49a:	dd48      	ble.n	801e52e <__sflush_r+0xae>
 801e49c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e49e:	2e00      	cmp	r6, #0
 801e4a0:	d045      	beq.n	801e52e <__sflush_r+0xae>
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e4a8:	682f      	ldr	r7, [r5, #0]
 801e4aa:	6a21      	ldr	r1, [r4, #32]
 801e4ac:	602b      	str	r3, [r5, #0]
 801e4ae:	d030      	beq.n	801e512 <__sflush_r+0x92>
 801e4b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e4b2:	89a3      	ldrh	r3, [r4, #12]
 801e4b4:	0759      	lsls	r1, r3, #29
 801e4b6:	d505      	bpl.n	801e4c4 <__sflush_r+0x44>
 801e4b8:	6863      	ldr	r3, [r4, #4]
 801e4ba:	1ad2      	subs	r2, r2, r3
 801e4bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e4be:	b10b      	cbz	r3, 801e4c4 <__sflush_r+0x44>
 801e4c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e4c2:	1ad2      	subs	r2, r2, r3
 801e4c4:	2300      	movs	r3, #0
 801e4c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e4c8:	6a21      	ldr	r1, [r4, #32]
 801e4ca:	4628      	mov	r0, r5
 801e4cc:	47b0      	blx	r6
 801e4ce:	1c43      	adds	r3, r0, #1
 801e4d0:	89a3      	ldrh	r3, [r4, #12]
 801e4d2:	d106      	bne.n	801e4e2 <__sflush_r+0x62>
 801e4d4:	6829      	ldr	r1, [r5, #0]
 801e4d6:	291d      	cmp	r1, #29
 801e4d8:	d82b      	bhi.n	801e532 <__sflush_r+0xb2>
 801e4da:	4a2a      	ldr	r2, [pc, #168]	@ (801e584 <__sflush_r+0x104>)
 801e4dc:	410a      	asrs	r2, r1
 801e4de:	07d6      	lsls	r6, r2, #31
 801e4e0:	d427      	bmi.n	801e532 <__sflush_r+0xb2>
 801e4e2:	2200      	movs	r2, #0
 801e4e4:	6062      	str	r2, [r4, #4]
 801e4e6:	04d9      	lsls	r1, r3, #19
 801e4e8:	6922      	ldr	r2, [r4, #16]
 801e4ea:	6022      	str	r2, [r4, #0]
 801e4ec:	d504      	bpl.n	801e4f8 <__sflush_r+0x78>
 801e4ee:	1c42      	adds	r2, r0, #1
 801e4f0:	d101      	bne.n	801e4f6 <__sflush_r+0x76>
 801e4f2:	682b      	ldr	r3, [r5, #0]
 801e4f4:	b903      	cbnz	r3, 801e4f8 <__sflush_r+0x78>
 801e4f6:	6560      	str	r0, [r4, #84]	@ 0x54
 801e4f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e4fa:	602f      	str	r7, [r5, #0]
 801e4fc:	b1b9      	cbz	r1, 801e52e <__sflush_r+0xae>
 801e4fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e502:	4299      	cmp	r1, r3
 801e504:	d002      	beq.n	801e50c <__sflush_r+0x8c>
 801e506:	4628      	mov	r0, r5
 801e508:	f7ff fa9a 	bl	801da40 <_free_r>
 801e50c:	2300      	movs	r3, #0
 801e50e:	6363      	str	r3, [r4, #52]	@ 0x34
 801e510:	e00d      	b.n	801e52e <__sflush_r+0xae>
 801e512:	2301      	movs	r3, #1
 801e514:	4628      	mov	r0, r5
 801e516:	47b0      	blx	r6
 801e518:	4602      	mov	r2, r0
 801e51a:	1c50      	adds	r0, r2, #1
 801e51c:	d1c9      	bne.n	801e4b2 <__sflush_r+0x32>
 801e51e:	682b      	ldr	r3, [r5, #0]
 801e520:	2b00      	cmp	r3, #0
 801e522:	d0c6      	beq.n	801e4b2 <__sflush_r+0x32>
 801e524:	2b1d      	cmp	r3, #29
 801e526:	d001      	beq.n	801e52c <__sflush_r+0xac>
 801e528:	2b16      	cmp	r3, #22
 801e52a:	d11e      	bne.n	801e56a <__sflush_r+0xea>
 801e52c:	602f      	str	r7, [r5, #0]
 801e52e:	2000      	movs	r0, #0
 801e530:	e022      	b.n	801e578 <__sflush_r+0xf8>
 801e532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e536:	b21b      	sxth	r3, r3
 801e538:	e01b      	b.n	801e572 <__sflush_r+0xf2>
 801e53a:	690f      	ldr	r7, [r1, #16]
 801e53c:	2f00      	cmp	r7, #0
 801e53e:	d0f6      	beq.n	801e52e <__sflush_r+0xae>
 801e540:	0793      	lsls	r3, r2, #30
 801e542:	680e      	ldr	r6, [r1, #0]
 801e544:	bf08      	it	eq
 801e546:	694b      	ldreq	r3, [r1, #20]
 801e548:	600f      	str	r7, [r1, #0]
 801e54a:	bf18      	it	ne
 801e54c:	2300      	movne	r3, #0
 801e54e:	eba6 0807 	sub.w	r8, r6, r7
 801e552:	608b      	str	r3, [r1, #8]
 801e554:	f1b8 0f00 	cmp.w	r8, #0
 801e558:	dde9      	ble.n	801e52e <__sflush_r+0xae>
 801e55a:	6a21      	ldr	r1, [r4, #32]
 801e55c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e55e:	4643      	mov	r3, r8
 801e560:	463a      	mov	r2, r7
 801e562:	4628      	mov	r0, r5
 801e564:	47b0      	blx	r6
 801e566:	2800      	cmp	r0, #0
 801e568:	dc08      	bgt.n	801e57c <__sflush_r+0xfc>
 801e56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e572:	81a3      	strh	r3, [r4, #12]
 801e574:	f04f 30ff 	mov.w	r0, #4294967295
 801e578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e57c:	4407      	add	r7, r0
 801e57e:	eba8 0800 	sub.w	r8, r8, r0
 801e582:	e7e7      	b.n	801e554 <__sflush_r+0xd4>
 801e584:	dfbffffe 	.word	0xdfbffffe

0801e588 <_fflush_r>:
 801e588:	b538      	push	{r3, r4, r5, lr}
 801e58a:	690b      	ldr	r3, [r1, #16]
 801e58c:	4605      	mov	r5, r0
 801e58e:	460c      	mov	r4, r1
 801e590:	b913      	cbnz	r3, 801e598 <_fflush_r+0x10>
 801e592:	2500      	movs	r5, #0
 801e594:	4628      	mov	r0, r5
 801e596:	bd38      	pop	{r3, r4, r5, pc}
 801e598:	b118      	cbz	r0, 801e5a2 <_fflush_r+0x1a>
 801e59a:	6a03      	ldr	r3, [r0, #32]
 801e59c:	b90b      	cbnz	r3, 801e5a2 <_fflush_r+0x1a>
 801e59e:	f7fe ff9d 	bl	801d4dc <__sinit>
 801e5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d0f3      	beq.n	801e592 <_fflush_r+0xa>
 801e5aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e5ac:	07d0      	lsls	r0, r2, #31
 801e5ae:	d404      	bmi.n	801e5ba <_fflush_r+0x32>
 801e5b0:	0599      	lsls	r1, r3, #22
 801e5b2:	d402      	bmi.n	801e5ba <_fflush_r+0x32>
 801e5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e5b6:	f7ff fa32 	bl	801da1e <__retarget_lock_acquire_recursive>
 801e5ba:	4628      	mov	r0, r5
 801e5bc:	4621      	mov	r1, r4
 801e5be:	f7ff ff5f 	bl	801e480 <__sflush_r>
 801e5c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e5c4:	07da      	lsls	r2, r3, #31
 801e5c6:	4605      	mov	r5, r0
 801e5c8:	d4e4      	bmi.n	801e594 <_fflush_r+0xc>
 801e5ca:	89a3      	ldrh	r3, [r4, #12]
 801e5cc:	059b      	lsls	r3, r3, #22
 801e5ce:	d4e1      	bmi.n	801e594 <_fflush_r+0xc>
 801e5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e5d2:	f7ff fa25 	bl	801da20 <__retarget_lock_release_recursive>
 801e5d6:	e7dd      	b.n	801e594 <_fflush_r+0xc>

0801e5d8 <__swhatbuf_r>:
 801e5d8:	b570      	push	{r4, r5, r6, lr}
 801e5da:	460c      	mov	r4, r1
 801e5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5e0:	2900      	cmp	r1, #0
 801e5e2:	b096      	sub	sp, #88	@ 0x58
 801e5e4:	4615      	mov	r5, r2
 801e5e6:	461e      	mov	r6, r3
 801e5e8:	da0d      	bge.n	801e606 <__swhatbuf_r+0x2e>
 801e5ea:	89a3      	ldrh	r3, [r4, #12]
 801e5ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e5f0:	f04f 0100 	mov.w	r1, #0
 801e5f4:	bf14      	ite	ne
 801e5f6:	2340      	movne	r3, #64	@ 0x40
 801e5f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e5fc:	2000      	movs	r0, #0
 801e5fe:	6031      	str	r1, [r6, #0]
 801e600:	602b      	str	r3, [r5, #0]
 801e602:	b016      	add	sp, #88	@ 0x58
 801e604:	bd70      	pop	{r4, r5, r6, pc}
 801e606:	466a      	mov	r2, sp
 801e608:	f000 f896 	bl	801e738 <_fstat_r>
 801e60c:	2800      	cmp	r0, #0
 801e60e:	dbec      	blt.n	801e5ea <__swhatbuf_r+0x12>
 801e610:	9901      	ldr	r1, [sp, #4]
 801e612:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e616:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e61a:	4259      	negs	r1, r3
 801e61c:	4159      	adcs	r1, r3
 801e61e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e622:	e7eb      	b.n	801e5fc <__swhatbuf_r+0x24>

0801e624 <__smakebuf_r>:
 801e624:	898b      	ldrh	r3, [r1, #12]
 801e626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e628:	079d      	lsls	r5, r3, #30
 801e62a:	4606      	mov	r6, r0
 801e62c:	460c      	mov	r4, r1
 801e62e:	d507      	bpl.n	801e640 <__smakebuf_r+0x1c>
 801e630:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e634:	6023      	str	r3, [r4, #0]
 801e636:	6123      	str	r3, [r4, #16]
 801e638:	2301      	movs	r3, #1
 801e63a:	6163      	str	r3, [r4, #20]
 801e63c:	b003      	add	sp, #12
 801e63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e640:	ab01      	add	r3, sp, #4
 801e642:	466a      	mov	r2, sp
 801e644:	f7ff ffc8 	bl	801e5d8 <__swhatbuf_r>
 801e648:	9f00      	ldr	r7, [sp, #0]
 801e64a:	4605      	mov	r5, r0
 801e64c:	4639      	mov	r1, r7
 801e64e:	4630      	mov	r0, r6
 801e650:	f7ff fa62 	bl	801db18 <_malloc_r>
 801e654:	b948      	cbnz	r0, 801e66a <__smakebuf_r+0x46>
 801e656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e65a:	059a      	lsls	r2, r3, #22
 801e65c:	d4ee      	bmi.n	801e63c <__smakebuf_r+0x18>
 801e65e:	f023 0303 	bic.w	r3, r3, #3
 801e662:	f043 0302 	orr.w	r3, r3, #2
 801e666:	81a3      	strh	r3, [r4, #12]
 801e668:	e7e2      	b.n	801e630 <__smakebuf_r+0xc>
 801e66a:	89a3      	ldrh	r3, [r4, #12]
 801e66c:	6020      	str	r0, [r4, #0]
 801e66e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e672:	81a3      	strh	r3, [r4, #12]
 801e674:	9b01      	ldr	r3, [sp, #4]
 801e676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e67a:	b15b      	cbz	r3, 801e694 <__smakebuf_r+0x70>
 801e67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e680:	4630      	mov	r0, r6
 801e682:	f000 f86b 	bl	801e75c <_isatty_r>
 801e686:	b128      	cbz	r0, 801e694 <__smakebuf_r+0x70>
 801e688:	89a3      	ldrh	r3, [r4, #12]
 801e68a:	f023 0303 	bic.w	r3, r3, #3
 801e68e:	f043 0301 	orr.w	r3, r3, #1
 801e692:	81a3      	strh	r3, [r4, #12]
 801e694:	89a3      	ldrh	r3, [r4, #12]
 801e696:	431d      	orrs	r5, r3
 801e698:	81a5      	strh	r5, [r4, #12]
 801e69a:	e7cf      	b.n	801e63c <__smakebuf_r+0x18>

0801e69c <_putc_r>:
 801e69c:	b570      	push	{r4, r5, r6, lr}
 801e69e:	460d      	mov	r5, r1
 801e6a0:	4614      	mov	r4, r2
 801e6a2:	4606      	mov	r6, r0
 801e6a4:	b118      	cbz	r0, 801e6ae <_putc_r+0x12>
 801e6a6:	6a03      	ldr	r3, [r0, #32]
 801e6a8:	b90b      	cbnz	r3, 801e6ae <_putc_r+0x12>
 801e6aa:	f7fe ff17 	bl	801d4dc <__sinit>
 801e6ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e6b0:	07d8      	lsls	r0, r3, #31
 801e6b2:	d405      	bmi.n	801e6c0 <_putc_r+0x24>
 801e6b4:	89a3      	ldrh	r3, [r4, #12]
 801e6b6:	0599      	lsls	r1, r3, #22
 801e6b8:	d402      	bmi.n	801e6c0 <_putc_r+0x24>
 801e6ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e6bc:	f7ff f9af 	bl	801da1e <__retarget_lock_acquire_recursive>
 801e6c0:	68a3      	ldr	r3, [r4, #8]
 801e6c2:	3b01      	subs	r3, #1
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	60a3      	str	r3, [r4, #8]
 801e6c8:	da05      	bge.n	801e6d6 <_putc_r+0x3a>
 801e6ca:	69a2      	ldr	r2, [r4, #24]
 801e6cc:	4293      	cmp	r3, r2
 801e6ce:	db12      	blt.n	801e6f6 <_putc_r+0x5a>
 801e6d0:	b2eb      	uxtb	r3, r5
 801e6d2:	2b0a      	cmp	r3, #10
 801e6d4:	d00f      	beq.n	801e6f6 <_putc_r+0x5a>
 801e6d6:	6823      	ldr	r3, [r4, #0]
 801e6d8:	1c5a      	adds	r2, r3, #1
 801e6da:	6022      	str	r2, [r4, #0]
 801e6dc:	701d      	strb	r5, [r3, #0]
 801e6de:	b2ed      	uxtb	r5, r5
 801e6e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e6e2:	07da      	lsls	r2, r3, #31
 801e6e4:	d405      	bmi.n	801e6f2 <_putc_r+0x56>
 801e6e6:	89a3      	ldrh	r3, [r4, #12]
 801e6e8:	059b      	lsls	r3, r3, #22
 801e6ea:	d402      	bmi.n	801e6f2 <_putc_r+0x56>
 801e6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e6ee:	f7ff f997 	bl	801da20 <__retarget_lock_release_recursive>
 801e6f2:	4628      	mov	r0, r5
 801e6f4:	bd70      	pop	{r4, r5, r6, pc}
 801e6f6:	4629      	mov	r1, r5
 801e6f8:	4622      	mov	r2, r4
 801e6fa:	4630      	mov	r0, r6
 801e6fc:	f7ff f818 	bl	801d730 <__swbuf_r>
 801e700:	4605      	mov	r5, r0
 801e702:	e7ed      	b.n	801e6e0 <_putc_r+0x44>

0801e704 <memmove>:
 801e704:	4288      	cmp	r0, r1
 801e706:	b510      	push	{r4, lr}
 801e708:	eb01 0402 	add.w	r4, r1, r2
 801e70c:	d902      	bls.n	801e714 <memmove+0x10>
 801e70e:	4284      	cmp	r4, r0
 801e710:	4623      	mov	r3, r4
 801e712:	d807      	bhi.n	801e724 <memmove+0x20>
 801e714:	1e43      	subs	r3, r0, #1
 801e716:	42a1      	cmp	r1, r4
 801e718:	d008      	beq.n	801e72c <memmove+0x28>
 801e71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e722:	e7f8      	b.n	801e716 <memmove+0x12>
 801e724:	4402      	add	r2, r0
 801e726:	4601      	mov	r1, r0
 801e728:	428a      	cmp	r2, r1
 801e72a:	d100      	bne.n	801e72e <memmove+0x2a>
 801e72c:	bd10      	pop	{r4, pc}
 801e72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e736:	e7f7      	b.n	801e728 <memmove+0x24>

0801e738 <_fstat_r>:
 801e738:	b538      	push	{r3, r4, r5, lr}
 801e73a:	4d07      	ldr	r5, [pc, #28]	@ (801e758 <_fstat_r+0x20>)
 801e73c:	2300      	movs	r3, #0
 801e73e:	4604      	mov	r4, r0
 801e740:	4608      	mov	r0, r1
 801e742:	4611      	mov	r1, r2
 801e744:	602b      	str	r3, [r5, #0]
 801e746:	f7e2 ff7e 	bl	8001646 <_fstat>
 801e74a:	1c43      	adds	r3, r0, #1
 801e74c:	d102      	bne.n	801e754 <_fstat_r+0x1c>
 801e74e:	682b      	ldr	r3, [r5, #0]
 801e750:	b103      	cbz	r3, 801e754 <_fstat_r+0x1c>
 801e752:	6023      	str	r3, [r4, #0]
 801e754:	bd38      	pop	{r3, r4, r5, pc}
 801e756:	bf00      	nop
 801e758:	20007614 	.word	0x20007614

0801e75c <_isatty_r>:
 801e75c:	b538      	push	{r3, r4, r5, lr}
 801e75e:	4d06      	ldr	r5, [pc, #24]	@ (801e778 <_isatty_r+0x1c>)
 801e760:	2300      	movs	r3, #0
 801e762:	4604      	mov	r4, r0
 801e764:	4608      	mov	r0, r1
 801e766:	602b      	str	r3, [r5, #0]
 801e768:	f7e2 ff7d 	bl	8001666 <_isatty>
 801e76c:	1c43      	adds	r3, r0, #1
 801e76e:	d102      	bne.n	801e776 <_isatty_r+0x1a>
 801e770:	682b      	ldr	r3, [r5, #0]
 801e772:	b103      	cbz	r3, 801e776 <_isatty_r+0x1a>
 801e774:	6023      	str	r3, [r4, #0]
 801e776:	bd38      	pop	{r3, r4, r5, pc}
 801e778:	20007614 	.word	0x20007614

0801e77c <_sbrk_r>:
 801e77c:	b538      	push	{r3, r4, r5, lr}
 801e77e:	4d06      	ldr	r5, [pc, #24]	@ (801e798 <_sbrk_r+0x1c>)
 801e780:	2300      	movs	r3, #0
 801e782:	4604      	mov	r4, r0
 801e784:	4608      	mov	r0, r1
 801e786:	602b      	str	r3, [r5, #0]
 801e788:	f7e2 ff86 	bl	8001698 <_sbrk>
 801e78c:	1c43      	adds	r3, r0, #1
 801e78e:	d102      	bne.n	801e796 <_sbrk_r+0x1a>
 801e790:	682b      	ldr	r3, [r5, #0]
 801e792:	b103      	cbz	r3, 801e796 <_sbrk_r+0x1a>
 801e794:	6023      	str	r3, [r4, #0]
 801e796:	bd38      	pop	{r3, r4, r5, pc}
 801e798:	20007614 	.word	0x20007614

0801e79c <_realloc_r>:
 801e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7a0:	4680      	mov	r8, r0
 801e7a2:	4615      	mov	r5, r2
 801e7a4:	460c      	mov	r4, r1
 801e7a6:	b921      	cbnz	r1, 801e7b2 <_realloc_r+0x16>
 801e7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ac:	4611      	mov	r1, r2
 801e7ae:	f7ff b9b3 	b.w	801db18 <_malloc_r>
 801e7b2:	b92a      	cbnz	r2, 801e7c0 <_realloc_r+0x24>
 801e7b4:	f7ff f944 	bl	801da40 <_free_r>
 801e7b8:	2400      	movs	r4, #0
 801e7ba:	4620      	mov	r0, r4
 801e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7c0:	f000 f81a 	bl	801e7f8 <_malloc_usable_size_r>
 801e7c4:	4285      	cmp	r5, r0
 801e7c6:	4606      	mov	r6, r0
 801e7c8:	d802      	bhi.n	801e7d0 <_realloc_r+0x34>
 801e7ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e7ce:	d8f4      	bhi.n	801e7ba <_realloc_r+0x1e>
 801e7d0:	4629      	mov	r1, r5
 801e7d2:	4640      	mov	r0, r8
 801e7d4:	f7ff f9a0 	bl	801db18 <_malloc_r>
 801e7d8:	4607      	mov	r7, r0
 801e7da:	2800      	cmp	r0, #0
 801e7dc:	d0ec      	beq.n	801e7b8 <_realloc_r+0x1c>
 801e7de:	42b5      	cmp	r5, r6
 801e7e0:	462a      	mov	r2, r5
 801e7e2:	4621      	mov	r1, r4
 801e7e4:	bf28      	it	cs
 801e7e6:	4632      	movcs	r2, r6
 801e7e8:	f7ff f91b 	bl	801da22 <memcpy>
 801e7ec:	4621      	mov	r1, r4
 801e7ee:	4640      	mov	r0, r8
 801e7f0:	f7ff f926 	bl	801da40 <_free_r>
 801e7f4:	463c      	mov	r4, r7
 801e7f6:	e7e0      	b.n	801e7ba <_realloc_r+0x1e>

0801e7f8 <_malloc_usable_size_r>:
 801e7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e7fc:	1f18      	subs	r0, r3, #4
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	bfbc      	itt	lt
 801e802:	580b      	ldrlt	r3, [r1, r0]
 801e804:	18c0      	addlt	r0, r0, r3
 801e806:	4770      	bx	lr

0801e808 <_init>:
 801e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e80a:	bf00      	nop
 801e80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e80e:	bc08      	pop	{r3}
 801e810:	469e      	mov	lr, r3
 801e812:	4770      	bx	lr

0801e814 <_fini>:
 801e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e816:	bf00      	nop
 801e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e81a:	bc08      	pop	{r3}
 801e81c:	469e      	mov	lr, r3
 801e81e:	4770      	bx	lr
