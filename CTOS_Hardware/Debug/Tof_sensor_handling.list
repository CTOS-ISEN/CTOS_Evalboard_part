
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001455c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0801469c  0801469c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d7c  08014d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d84  08014d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d88  08014d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000008  08014d8c  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f28  20000170  08014ef4  00016170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005098  08014ef4  00017098  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00016170  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005097c  00000000  00000000  000161a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007b4d  00000000  00000000  00066b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004370  00000000  00000000  0006e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00003412  00000000  00000000  000729e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c974  00000000  00000000  00075df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a4e6  00000000  00000000  00082766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001238bb  00000000  00000000  000ccc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0507  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012afc  00000000  00000000  001f054c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00203048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000170 	.word	0x20000170
 800015c:	00000000 	.word	0x00000000
 8000160:	08014684 	.word	0x08014684

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000174 	.word	0x20000174
 800017c:	08014684 	.word	0x08014684

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d013      	beq.n	8000560 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000538:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000540:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00b      	beq.n	8000560 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000548:	e000      	b.n	800054c <ITM_SendChar+0x2c>
    {
      __NOP();
 800054a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800054c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000556:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800057e:	f023 0218 	bic.w	r2, r3, #24
 8000582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e009      	b.n	80005f2 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9a 	bl	8000520 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	3301      	adds	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dbf1      	blt.n	80005de <_write+0x12>
}
return len;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f006 f9b4 	bl	8006978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f99e 	bl	8000950 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000614:	f000 fa12 	bl	8000a3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fb56 	bl	8000cc8 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800061c:	f000 fb2c 	bl	8000c78 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fade 	bl	8000be0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000624:	f000 fa66 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000628:	f000 fab2 	bl	8000b90 <MX_TIM16_Init>
  MX_SPI2_Init();
 800062c:	f000 fa24 	bl	8000a78 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000630:	f00b fc54 	bl	800bedc <MX_FATFS_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x3a>
    Error_Handler();
 800063a:	f000 fceb 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */

  log_init(&huart1);
 800063e:	489d      	ldr	r0, [pc, #628]	@ (80008b4 <main+0x2b0>)
 8000640:	f006 f828 	bl	8006694 <log_init>
  //ToF_init();
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 8000644:	2101      	movs	r1, #1
 8000646:	2000      	movs	r0, #0
 8000648:	f005 fc88 	bl	8005f5c <IKS01A3_MOTION_SENSOR_Init>
    IKS01A3_MOTION_SENSOR_Init(1, MOTION_ACCELERO);
 800064c:	2102      	movs	r1, #2
 800064e:	2001      	movs	r0, #1
 8000650:	f005 fc84 	bl	8005f5c <IKS01A3_MOTION_SENSOR_Init>

    IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 8000654:	2101      	movs	r1, #1
 8000656:	2000      	movs	r0, #0
 8000658:	f005 fd7c 	bl	8006154 <IKS01A3_MOTION_SENSOR_Enable>
    IKS01A3_MOTION_SENSOR_Enable(1, MOTION_ACCELERO);
 800065c:	2102      	movs	r1, #2
 800065e:	2001      	movs	r0, #1
 8000660:	f005 fd78 	bl	8006154 <IKS01A3_MOTION_SENSOR_Enable>

      //IKS01A3_LIS2DW12_0;
      CalibrationLSM6DSO();
 8000664:	f006 f85a 	bl	800671c <CalibrationLSM6DSO>
      HAL_TIM_Base_Start_IT(&htim16);
 8000668:	4893      	ldr	r0, [pc, #588]	@ (80008b8 <main+0x2b4>)
 800066a:	f00a f8eb 	bl	800a844 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim2);
 800066e:	4893      	ldr	r0, [pc, #588]	@ (80008bc <main+0x2b8>)
 8000670:	f00a f8e8 	bl	800a844 <HAL_TIM_Base_Start_IT>


      log_printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000674:	4892      	ldr	r0, [pc, #584]	@ (80008c0 <main+0x2bc>)
 8000676:	f006 f831 	bl	80066dc <log_printf>

        HAL_Delay(1000); //a short delay is important to let the SD card settle
 800067a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067e:	f006 f9c7 	bl	8006a10 <HAL_Delay>
        FATFS FatFs; 	//Fatfs handle
        FIL fil; 		//File handle
        FRESULT fres; //Result after operations

        //Open the file system
        fres = f_mount(&FatFs, "", 1); //1=mount now
 8000682:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8000686:	2201      	movs	r2, #1
 8000688:	498e      	ldr	r1, [pc, #568]	@ (80008c4 <main+0x2c0>)
 800068a:	4618      	mov	r0, r3
 800068c:	f00d fefc 	bl	800e488 <f_mount>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
        if (fres != FR_OK) {
 8000696:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800069a:	2b00      	cmp	r3, #0
 800069c:	d007      	beq.n	80006ae <main+0xaa>
        	log_printf("f_mount error (%i)\r\n", fres);
 800069e:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006a2:	4619      	mov	r1, r3
 80006a4:	4888      	ldr	r0, [pc, #544]	@ (80008c8 <main+0x2c4>)
 80006a6:	f006 f819 	bl	80066dc <log_printf>
      	while(1);
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0xa6>
        //Let's get some statistics from the SD card
        DWORD free_clusters, free_sectors, total_sectors;

        FATFS* getFreeFs;

        fres = f_getfree("", &free_clusters, &getFreeFs);
 80006ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80006b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4882      	ldr	r0, [pc, #520]	@ (80008c4 <main+0x2c0>)
 80006ba:	f00e fcd4 	bl	800f066 <f_getfree>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
        if (fres != FR_OK) {
 80006c4:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d007      	beq.n	80006dc <main+0xd8>
        	log_printf("f_getfree error (%i)\r\n", fres);
 80006cc:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006d0:	4619      	mov	r1, r3
 80006d2:	487e      	ldr	r0, [pc, #504]	@ (80008cc <main+0x2c8>)
 80006d4:	f006 f802 	bl	80066dc <log_printf>
      	while(1);
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <main+0xd4>
        }

        //Formula comes from ChaN's documentation
        total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006dc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006e0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	3b02      	subs	r3, #2
 80006ea:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80006ee:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	8952      	ldrh	r2, [r2, #10]
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
        free_sectors = free_clusters * getFreeFs->csize;
 80006fe:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000702:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	895b      	ldrh	r3, [r3, #10]
 800070a:	461a      	mov	r2, r3
 800070c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000710:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

        log_printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800071e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 8000722:	0859      	lsrs	r1, r3, #1
 8000724:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000728:	085b      	lsrs	r3, r3, #1
 800072a:	461a      	mov	r2, r3
 800072c:	4868      	ldr	r0, [pc, #416]	@ (80008d0 <main+0x2cc>)
 800072e:	f005 ffd5 	bl	80066dc <log_printf>

        //Now let's try to open file "test.txt"
        fres = f_open(&fil, "test.txt", FA_READ);
 8000732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000736:	2201      	movs	r2, #1
 8000738:	4966      	ldr	r1, [pc, #408]	@ (80008d4 <main+0x2d0>)
 800073a:	4618      	mov	r0, r3
 800073c:	f00d ff08 	bl	800e550 <f_open>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
        if (fres != FR_OK) {
 8000746:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <main+0x154>
        	log_printf("f_open error (%i)\r\n");
 800074e:	4862      	ldr	r0, [pc, #392]	@ (80008d8 <main+0x2d4>)
 8000750:	f005 ffc4 	bl	80066dc <log_printf>
      	while(1);
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <main+0x150>
        }
        log_printf("I was able to open 'test.txt' for reading!\r\n");
 8000758:	4860      	ldr	r0, [pc, #384]	@ (80008dc <main+0x2d8>)
 800075a:	f005 ffbf 	bl	80066dc <log_printf>
        //Read 30 bytes from "test.txt" on the SD card
        BYTE readBuf[30];

        //We can either use f_read OR f_gets to get data out of files
        //f_gets is a wrapper on f_read that does some string formatting for us
        TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800075e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	211e      	movs	r1, #30
 8000766:	4618      	mov	r0, r3
 8000768:	f00e fd39 	bl	800f1de <f_gets>
 800076c:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
        if(rres != 0) {
 8000770:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <main+0x180>
        	log_printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4858      	ldr	r0, [pc, #352]	@ (80008e0 <main+0x2dc>)
 800077e:	f005 ffad 	bl	80066dc <log_printf>
 8000782:	e005      	b.n	8000790 <main+0x18c>
        } else {
        	log_printf("f_gets error (%i)\r\n", fres);
 8000784:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000788:	4619      	mov	r1, r3
 800078a:	4856      	ldr	r0, [pc, #344]	@ (80008e4 <main+0x2e0>)
 800078c:	f005 ffa6 	bl	80066dc <log_printf>
        }

        //Be a tidy kiwi - don't forget to close your file!
        f_close(&fil);
 8000790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000794:	4618      	mov	r0, r3
 8000796:	f00e fc37 	bl	800f008 <f_close>

        //Now let's try and write a file "write.txt"
        fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800079a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079e:	221a      	movs	r2, #26
 80007a0:	4951      	ldr	r1, [pc, #324]	@ (80008e8 <main+0x2e4>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d fed4 	bl	800e550 <f_open>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
        if(fres == FR_OK) {
 80007ae:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <main+0x1ba>
        	log_printf("I was able to open 'write.txt' for writing\r\n");
 80007b6:	484d      	ldr	r0, [pc, #308]	@ (80008ec <main+0x2e8>)
 80007b8:	f005 ff90 	bl	80066dc <log_printf>
 80007bc:	e005      	b.n	80007ca <main+0x1c6>
        } else {
        	log_printf("f_open error (%i)\r\n", fres);
 80007be:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007c2:	4619      	mov	r1, r3
 80007c4:	4844      	ldr	r0, [pc, #272]	@ (80008d8 <main+0x2d4>)
 80007c6:	f005 ff89 	bl	80066dc <log_printf>
        }

        //Copy in a string
        strncpy((char*)readBuf, "a new file is made!", 19);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4a48      	ldr	r2, [pc, #288]	@ (80008f0 <main+0x2ec>)
 80007ce:	461c      	mov	r4, r3
 80007d0:	4615      	mov	r5, r2
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	682b      	ldr	r3, [r5, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	8022      	strh	r2, [r4, #0]
 80007dc:	3402      	adds	r4, #2
 80007de:	0c1b      	lsrs	r3, r3, #16
 80007e0:	7023      	strb	r3, [r4, #0]
        UINT bytesWrote;
        fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007e2:	463b      	mov	r3, r7
 80007e4:	1d39      	adds	r1, r7, #4
 80007e6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80007ea:	2213      	movs	r2, #19
 80007ec:	f00e f9df 	bl	800ebae <f_write>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
        if(fres == FR_OK) {
 80007f6:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d109      	bne.n	8000812 <main+0x20e>
        	log_printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007fe:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000802:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	483a      	ldr	r0, [pc, #232]	@ (80008f4 <main+0x2f0>)
 800080c:	f005 ff66 	bl	80066dc <log_printf>
 8000810:	e002      	b.n	8000818 <main+0x214>
        } else {
        	log_printf("f_write error (%i)\r\n");
 8000812:	4839      	ldr	r0, [pc, #228]	@ (80008f8 <main+0x2f4>)
 8000814:	f005 ff62 	bl	80066dc <log_printf>
        }

        //Be a tidy kiwi - don't forget to close your file!
        f_close(&fil);
 8000818:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081c:	4618      	mov	r0, r3
 800081e:	f00e fbf3 	bl	800f008 <f_close>

        //We're done, so de-mount the drive
        f_mount(NULL, "", 0);
 8000822:	2200      	movs	r2, #0
 8000824:	4927      	ldr	r1, [pc, #156]	@ (80008c4 <main+0x2c0>)
 8000826:	2000      	movs	r0, #0
 8000828:	f00d fe2e 	bl	800e488 <f_mount>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800082c:	f00e fdfc 	bl	800f428 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSend */
  MutexSendHandle = osMutexNew(&MutexSend_attributes);
 8000830:	4832      	ldr	r0, [pc, #200]	@ (80008fc <main+0x2f8>)
 8000832:	f00e ff86 	bl	800f742 <osMutexNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a31      	ldr	r2, [pc, #196]	@ (8000900 <main+0x2fc>)
 800083a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToFData_Queue */
  ToFData_QueueHandle = osMessageQueueNew (16, sizeof(RANGING_SENSOR_Result_t), &ToFData_Queue_attributes);
 800083c:	4a31      	ldr	r2, [pc, #196]	@ (8000904 <main+0x300>)
 800083e:	2148      	movs	r1, #72	@ 0x48
 8000840:	2010      	movs	r0, #16
 8000842:	f00f f9cf 	bl	800fbe4 <osMessageQueueNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a2f      	ldr	r2, [pc, #188]	@ (8000908 <main+0x304>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of LSM6DSOData_Queue */
  LSM6DSOData_QueueHandle = osMessageQueueNew (16, sizeof(LSM6DSO_data), &LSM6DSOData_Queue_attributes);
 800084c:	4a2f      	ldr	r2, [pc, #188]	@ (800090c <main+0x308>)
 800084e:	2118      	movs	r1, #24
 8000850:	2010      	movs	r0, #16
 8000852:	f00f f9c7 	bl	800fbe4 <osMessageQueueNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a2d      	ldr	r2, [pc, #180]	@ (8000910 <main+0x30c>)
 800085a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800085c:	4a2d      	ldr	r2, [pc, #180]	@ (8000914 <main+0x310>)
 800085e:	2100      	movs	r1, #0
 8000860:	482d      	ldr	r0, [pc, #180]	@ (8000918 <main+0x314>)
 8000862:	f00e fe40 	bl	800f4e6 <osThreadNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a2c      	ldr	r2, [pc, #176]	@ (800091c <main+0x318>)
 800086a:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 800086c:	4a2c      	ldr	r2, [pc, #176]	@ (8000920 <main+0x31c>)
 800086e:	2100      	movs	r1, #0
 8000870:	482c      	ldr	r0, [pc, #176]	@ (8000924 <main+0x320>)
 8000872:	f00e fe38 	bl	800f4e6 <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a2b      	ldr	r2, [pc, #172]	@ (8000928 <main+0x324>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 800087c:	4a2b      	ldr	r2, [pc, #172]	@ (800092c <main+0x328>)
 800087e:	2100      	movs	r1, #0
 8000880:	482b      	ldr	r0, [pc, #172]	@ (8000930 <main+0x32c>)
 8000882:	f00e fe30 	bl	800f4e6 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <main+0x330>)
 800088a:	6013      	str	r3, [r2, #0]

  /* creation of Ack_LSM6DSO_Dat */
  Ack_LSM6DSO_DatHandle = osThreadNew(StartAck_LSM6DSO_Data, NULL, &Ack_LSM6DSO_Dat_attributes);
 800088c:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <main+0x334>)
 800088e:	2100      	movs	r1, #0
 8000890:	482a      	ldr	r0, [pc, #168]	@ (800093c <main+0x338>)
 8000892:	f00e fe28 	bl	800f4e6 <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a29      	ldr	r2, [pc, #164]	@ (8000940 <main+0x33c>)
 800089a:	6013      	str	r3, [r2, #0]

  /* creation of SendDataLSM6 */
  SendDataLSM6Handle = osThreadNew(StartSendDataLSM6, NULL, &SendDataLSM6_attributes);
 800089c:	4a29      	ldr	r2, [pc, #164]	@ (8000944 <main+0x340>)
 800089e:	2100      	movs	r1, #0
 80008a0:	4829      	ldr	r0, [pc, #164]	@ (8000948 <main+0x344>)
 80008a2:	f00e fe20 	bl	800f4e6 <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a28      	ldr	r2, [pc, #160]	@ (800094c <main+0x348>)
 80008aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ac:	f00e fde0 	bl	800f470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <main+0x2ac>
 80008b4:	20000288 	.word	0x20000288
 80008b8:	2000023c 	.word	0x2000023c
 80008bc:	200001f0 	.word	0x200001f0
 80008c0:	08014714 	.word	0x08014714
 80008c4:	08014734 	.word	0x08014734
 80008c8:	08014738 	.word	0x08014738
 80008cc:	08014750 	.word	0x08014750
 80008d0:	08014768 	.word	0x08014768
 80008d4:	080147b0 	.word	0x080147b0
 80008d8:	080147bc 	.word	0x080147bc
 80008dc:	080147d0 	.word	0x080147d0
 80008e0:	08014800 	.word	0x08014800
 80008e4:	0801482c 	.word	0x0801482c
 80008e8:	08014840 	.word	0x08014840
 80008ec:	0801484c 	.word	0x0801484c
 80008f0:	0801487c 	.word	0x0801487c
 80008f4:	08014890 	.word	0x08014890
 80008f8:	080148b4 	.word	0x080148b4
 80008fc:	08014bf0 	.word	0x08014bf0
 8000900:	20000cb4 	.word	0x20000cb4
 8000904:	08014bc0 	.word	0x08014bc0
 8000908:	2000060c 	.word	0x2000060c
 800090c:	08014bd8 	.word	0x08014bd8
 8000910:	20000ae0 	.word	0x20000ae0
 8000914:	08014b0c 	.word	0x08014b0c
 8000918:	08000dbd 	.word	0x08000dbd
 800091c:	200005f8 	.word	0x200005f8
 8000920:	08014b30 	.word	0x08014b30
 8000924:	08000dcd 	.word	0x08000dcd
 8000928:	200005fc 	.word	0x200005fc
 800092c:	08014b54 	.word	0x08014b54
 8000930:	08000e09 	.word	0x08000e09
 8000934:	20000600 	.word	0x20000600
 8000938:	08014b78 	.word	0x08014b78
 800093c:	08000e71 	.word	0x08000e71
 8000940:	20000604 	.word	0x20000604
 8000944:	08014b9c 	.word	0x08014b9c
 8000948:	08000f21 	.word	0x08000f21
 800094c:	20000608 	.word	0x20000608

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09a      	sub	sp, #104	@ 0x68
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2248      	movs	r2, #72	@ 0x48
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f012 ff00 	bl	8013764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000984:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	f023 0303 	bic.w	r3, r3, #3
 8000990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800099a:	f007 fb3f 	bl	800801c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fde5 	bl	800056e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <SystemClock_Config+0xe8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <SystemClock_Config+0xe8>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <SystemClock_Config+0xe8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80009c0:	2327      	movs	r3, #39	@ 0x27
 80009c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009dc:	2300      	movs	r3, #0
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 feb5 	bl	800875c <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009f8:	f000 fb0c 	bl	8001014 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009fc:	236f      	movs	r3, #111	@ 0x6f
 80009fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a00:	2302      	movs	r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fa11 	bl	8008e44 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a28:	f000 faf4 	bl	8001014 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a2c:	f008 fffe 	bl	8009a2c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a30:	bf00      	nop
 8000a32:	3768      	adds	r7, #104	@ 0x68
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58000400 	.word	0x58000400

08000a3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2250      	movs	r2, #80	@ 0x50
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f012 fe8b 	bl	8013764 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f008 fe6e 	bl	8009740 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a6a:	f000 fad3 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a6e:	bf00      	nop
 8000a70:	3750      	adds	r7, #80	@ 0x50
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <MX_SPI2_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000a84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000a92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000aae:	2230      	movs	r2, #48	@ 0x30
 8000ab0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000ac6:	2207      	movs	r2, #7
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_SPI2_Init+0x74>)
 8000ad8:	f009 f8bf 	bl	8009c5a <HAL_SPI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 fa97 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000018c 	.word	0x2000018c
 8000af0:	40003800 	.word	0x40003800

08000af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b1c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b2a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b3e:	f009 fe29 	bl	800a794 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b48:	f000 fa64 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b5a:	f009 ffc8 	bl	800aaee <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b64:	f000 fa56 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_TIM2_Init+0x98>)
 8000b76:	f00a f9b7 	bl	800aee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b80:	f000 fa48 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001f0 	.word	0x200001f0

08000b90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b94:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000b96:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <MX_TIM16_Init+0x4c>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000b9c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000ba0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000baa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_TIM16_Init+0x48>)
 8000bc4:	f009 fde6 	bl	800a794 <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000bce:	f000 fa21 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000023c 	.word	0x2000023c
 8000bdc:	40014400 	.word	0x40014400

08000be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <MX_USART1_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c2a:	f00a f9fb 	bl	800b024 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f9ee 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c3c:	f00a ff50 	bl	800bae0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f9e5 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c4e:	f00a ff85 	bl	800bb5c <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f9dc 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f00a ff06 	bl	800ba6e <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f9d4 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000288 	.word	0x20000288
 8000c74:	40013800 	.word	0x40013800

08000c78 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c7e:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <MX_USB_PCD_Init+0x4c>)
 8000c80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_USB_PCD_Init+0x48>)
 8000cae:	f007 f8bc 	bl	8007e2a <HAL_PCD_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000cb8:	f000 f9ac 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000031c 	.word	0x2000031c
 8000cc4:	40006800 	.word	0x40006800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	2004      	movs	r0, #4
 8000cde:	f7ff fc5c 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f7ff fc59 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fc56 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	2008      	movs	r0, #8
 8000cf0:	f7ff fc53 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f006 f9da 	bl	80070b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2123      	movs	r1, #35	@ 0x23
 8000d04:	482a      	ldr	r0, [pc, #168]	@ (8000db0 <MX_GPIO_Init+0xe8>)
 8000d06:	f006 f9d5 	bl	80070b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d22:	f005 ff79 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	481e      	ldr	r0, [pc, #120]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d3a:	f005 ff6d 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000d3e:	2323      	movs	r3, #35	@ 0x23
 8000d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <MX_GPIO_Init+0xe8>)
 8000d54:	f005 ff60 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <MX_GPIO_Init+0xf0>)
 8000d6c:	f005 ff54 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000d70:	2302      	movs	r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_GPIO_Init+0xf0>)
 8000d82:	f005 ff49 	bl	8006c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f005 ff1c 	bl	8006bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d90:	2006      	movs	r0, #6
 8000d92:	f005 ff33 	bl	8006bfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2105      	movs	r1, #5
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f005 ff14 	bl	8006bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f005 ff2b 	bl	8006bfc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000c00 	.word	0x48000c00

08000dbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f00e fca1 	bl	800f70c <osDelay>
 8000dca:	e7fb      	b.n	8000dc4 <StartDefaultTask+0x8>

08000dcc <StartAck_ToF_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f00e fc15 	bl	800f60a <osThreadFlagsWait>
	  ToF_acquire_data(&result);
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <StartAck_ToF_Data+0x34>)
 8000de2:	f00a ff81 	bl	800bce8 <ToF_acquire_data>
	        osMessageQueuePut(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <StartAck_ToF_Data+0x38>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2201      	movs	r2, #1
 8000df0:	4903      	ldr	r1, [pc, #12]	@ (8000e00 <StartAck_ToF_Data+0x34>)
 8000df2:	f00e ff6b 	bl	800fccc <osMessageQueuePut>
	      osDelay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f00e fc88 	bl	800f70c <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dfc:	bf00      	nop
 8000dfe:	e7e9      	b.n	8000dd4 <StartAck_ToF_Data+0x8>
 8000e00:	20000cb8 	.word	0x20000cb8
 8000e04:	2000060c 	.word	0x2000060c

08000e08 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	2100      	movs	r1, #0
 8000e16:	2001      	movs	r0, #1
 8000e18:	f00e fbf7 	bl	800f60a <osThreadFlagsWait>
	  osMutexAcquire(MutexSendHandle, osWaitForever);
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <StartSendData+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fd12 	bl	800f84e <osMutexAcquire>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000e2a:	e00a      	b.n	8000e42 <StartSendData+0x3a>

			osMessageQueueGet(ToFData_QueueHandle, &result, (uint8_t*) 1,osWaitForever);
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <StartSendData+0x60>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2201      	movs	r2, #1
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <StartSendData+0x64>)
 8000e38:	f00e ffa8 	bl	800fd8c <osMessageQueueGet>
			//print_result(&result);

			logger_print_result(&result);
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <StartSendData+0x64>)
 8000e3e:	f00a ff6b 	bl	800bd18 <logger_print_result>
	  while(osMessageQueueGetCount(ToFData_QueueHandle)>0){
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <StartSendData+0x60>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00e fffe 	bl	800fe48 <osMessageQueueGetCount>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1ec      	bne.n	8000e2c <StartSendData+0x24>
		}
	  osMutexRelease(MutexSendHandle);
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <StartSendData+0x5c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00e fd44 	bl	800f8e4 <osMutexRelease>

    osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f00e fc55 	bl	800f70c <osDelay>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000e62:	e7d5      	b.n	8000e10 <StartSendData+0x8>
 8000e64:	20000cb4 	.word	0x20000cb4
 8000e68:	2000060c 	.word	0x2000060c
 8000e6c:	20000d00 	.word	0x20000d00

08000e70 <StartAck_LSM6DSO_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_LSM6DSO_Data */
void StartAck_LSM6DSO_Data(void *argument)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b092      	sub	sp, #72	@ 0x48
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartAck_LSM6DSO_Data */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f00e fbc3 	bl	800f60a <osThreadFlagsWait>
		LSM6DSO_data mov_data;
		mov_data = InitLSM6DSO_Struct(mov_data);
 8000e84:	463d      	mov	r5, r7
 8000e86:	466c      	mov	r4, sp
 8000e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f005 fd02 	bl	80068a4 <InitLSM6DSO_Struct>
 8000ea0:	f107 0420 	add.w	r4, r7, #32
 8000ea4:	463d      	mov	r5, r7
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eae:	e884 0003 	stmia.w	r4, {r0, r1}
		IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO,
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f005 f98c 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
				&mov_data.axes_gyro);
		IKS01A3_MOTION_SENSOR_GetAxes(1, MOTION_ACCELERO, &mov_data.axes_acce);
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	330c      	adds	r3, #12
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2102      	movs	r1, #2
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f005 f984 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
		mov_data = CalibratedGet(mov_data);
 8000ed0:	463d      	mov	r5, r7
 8000ed2:	466c      	mov	r4, sp
 8000ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f005 fd02 	bl	80068f0 <CalibratedGet>
 8000eec:	f107 0420 	add.w	r4, r7, #32
 8000ef0:	463d      	mov	r5, r7
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000efa:	e884 0003 	stmia.w	r4, {r0, r1}
				"Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
				mov_data.axes_gyro.x, mov_data.axes_gyro.y,
				mov_data.axes_gyro.z, mov_data.axes_acce.x,
				mov_data.axes_acce.y, mov_data.axes_acce.z);
		printf("Get at : %ld\n", osKernelGetTickCount());*/
		osMessageQueuePut(LSM6DSOData_QueueHandle, &mov_data, 1, osWaitForever);
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <StartAck_LSM6DSO_Data+0xac>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f107 0120 	add.w	r1, r7, #32
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f00e fede 	bl	800fccc <osMessageQueuePut>
		osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f00e fbfb 	bl	800f70c <osDelay>
  {
 8000f16:	bf00      	nop
 8000f18:	e7ae      	b.n	8000e78 <StartAck_LSM6DSO_Data+0x8>
 8000f1a:	bf00      	nop
 8000f1c:	20000ae0 	.word	0x20000ae0

08000f20 <StartSendDataLSM6>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataLSM6 */
void StartSendDataLSM6(void *argument)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b092      	sub	sp, #72	@ 0x48
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartSendDataLSM6 */
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f00e fb6b 	bl	800f60a <osThreadFlagsWait>
		osMutexAcquire(MutexSendHandle, osWaitForever);
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <StartSendDataLSM6+0xb4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00e fc86 	bl	800f84e <osMutexAcquire>
		LSM6DSO_data send_data;
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000f42:	e02e      	b.n	8000fa2 <StartSendDataLSM6+0x82>
			send_data = InitLSM6DSO_Struct(send_data);
 8000f44:	463d      	mov	r5, r7
 8000f46:	466c      	mov	r4, sp
 8000f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f005 fca2 	bl	80068a4 <InitLSM6DSO_Struct>
 8000f60:	f107 0420 	add.w	r4, r7, #32
 8000f64:	463d      	mov	r5, r7
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f6e:	e884 0003 	stmia.w	r4, {r0, r1}
			osMessageQueueGet(LSM6DSOData_QueueHandle, &send_data, (uint8_t*) 1,
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <StartSendDataLSM6+0xb8>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f107 0120 	add.w	r1, r7, #32
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f00e ff04 	bl	800fd8c <osMessageQueueGet>
					osWaitForever);
			log_printf(
 8000f84:	6a38      	ldr	r0, [r7, #32]
 8000f86:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8000f88:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8000f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000f90:	9102      	str	r1, [sp, #8]
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462b      	mov	r3, r5
 8000f98:	4622      	mov	r2, r4
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <StartSendDataLSM6+0xbc>)
 8000f9e:	f005 fb9d 	bl	80066dc <log_printf>
		while(osMessageQueueGetCount(LSM6DSOData_QueueHandle)>0) {
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <StartSendDataLSM6+0xb8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00e ff4e 	bl	800fe48 <osMessageQueueGetCount>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1c8      	bne.n	8000f44 <StartSendDataLSM6+0x24>
					"SEND : Xgyro: %ld | Ygyro: %ld | Zgyro: %ld | Xacc: %ld | Yacc: %ld | Zacc: %ld\n",
					send_data.axes_gyro.x, send_data.axes_gyro.y,
					send_data.axes_gyro.z, send_data.axes_acce.x,
					send_data.axes_acce.y, send_data.axes_acce.z);
		}
		printf("Send at : %ld\n", osKernelGetTickCount());
 8000fb2:	f00e fa83 	bl	800f4bc <osKernelGetTickCount>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <StartSendDataLSM6+0xc0>)
 8000fbc:	f012 fab0 	bl	8013520 <iprintf>
		osMutexRelease(MutexSendHandle);
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <StartSendDataLSM6+0xb4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00e fc8d 	bl	800f8e4 <osMutexRelease>
		osDelay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f00e fb9e 	bl	800f70c <osDelay>
  {
 8000fd0:	e7aa      	b.n	8000f28 <StartSendDataLSM6+0x8>
 8000fd2:	bf00      	nop
 8000fd4:	20000cb4 	.word	0x20000cb4
 8000fd8:	20000ae0 	.word	0x20000ae0
 8000fdc:	080148cc 	.word	0x080148cc
 8000fe0:	08014920 	.word	0x08014920

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM16) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ff2:	4293      	cmp	r3, r2
	}else if(htim->Instance == TIM2){
			//osThreadFlagsSet(SendDataLSM6Handle, 1);
			//osThreadFlagsSet(SendDataHandle, 1);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
 8000ffe:	f005 fcdb 	bl	80069b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40014400 	.word	0x40014400
 8001010:	40014800 	.word	0x40014800

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <LL_AHB2_GRP1_EnableClock>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800102e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001044:	68fb      	ldr	r3, [r7, #12]
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800105e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4313      	orrs	r3, r2
 8001068:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4013      	ands	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001090:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4313      	orrs	r3, r2
 800109a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	210f      	movs	r1, #15
 80010be:	f06f 0001 	mvn.w	r0, #1
 80010c2:	f005 fd81 	bl	8006bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_SPI_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80010f2:	f7ff ffae 	bl	8001052 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff ff92 	bl	8001020 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff8f 	bl	8001020 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001102:	230c      	movs	r3, #12
 8001104:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001112:	2305      	movs	r3, #5
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	480d      	ldr	r0, [pc, #52]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 800111e:	f005 fd7b 	bl	8006c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001134:	2305      	movs	r3, #5
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f005 fd69 	bl	8006c18 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40003800 	.word	0x40003800
 8001154:	48000800 	.word	0x48000800

08001158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001168:	d10b      	bne.n	8001182 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff ff71 	bl	8001052 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2105      	movs	r1, #5
 8001174:	201c      	movs	r0, #28
 8001176:	f005 fd27 	bl	8006bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117a:	201c      	movs	r0, #28
 800117c:	f005 fd3e 	bl	8006bfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001180:	e010      	b.n	80011a4 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <HAL_TIM_Base_MspInit+0x54>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d10b      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800118c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001190:	f7ff ff78 	bl	8001084 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2105      	movs	r1, #5
 8001198:	2019      	movs	r0, #25
 800119a:	f005 fd15 	bl	8006bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800119e:	2019      	movs	r0, #25
 80011a0:	f005 fd2c 	bl	8006bfc <HAL_NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40014400 	.word	0x40014400

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09c      	sub	sp, #112	@ 0x70
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2250      	movs	r2, #80	@ 0x50
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f012 fac7 	bl	8013764 <memset>
  if(huart->Instance==USART1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_UART_MspInit+0x84>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d124      	bne.n	800122a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4618      	mov	r0, r3
 80011ee:	f008 faa7 	bl	8009740 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f7ff ff0c 	bl	8001014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001200:	f7ff ff40 	bl	8001084 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff ff0b 	bl	8001020 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800120a:	23c0      	movs	r3, #192	@ 0xc0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800121a:	2307      	movs	r3, #7
 800121c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001222:	4619      	mov	r1, r3
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <HAL_UART_MspInit+0x88>)
 8001226:	f005 fcf7 	bl	8006c18 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	@ 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013800 	.word	0x40013800
 8001238:	48000400 	.word	0x48000400

0800123c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09c      	sub	sp, #112	@ 0x70
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2250      	movs	r2, #80	@ 0x50
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f012 fa81 	bl	8013764 <memset>
  if(hpcd->Instance==USB)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1f      	ldr	r2, [pc, #124]	@ (80012e4 <HAL_PCD_MspInit+0xa8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d136      	bne.n	80012da <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800126c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001270:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001272:	2318      	movs	r3, #24
 8001274:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001276:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800127a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800127c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001280:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001282:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001286:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800128c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800128e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fa51 	bl	8009740 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80012a4:	f7ff feb6 	bl	8001014 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff feb9 	bl	8001020 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80012c0:	230a      	movs	r3, #10
 80012c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f005 fca3 	bl	8006c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012d2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80012d6:	f7ff febc 	bl	8001052 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	3770      	adds	r7, #112	@ 0x70
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40006800 	.word	0x40006800

080012e8 <LL_APB2_GRP1_EnableClock>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001304:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001332:	2200      	movs	r2, #0
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	201a      	movs	r0, #26
 8001338:	f005 fc46 	bl	8006bc8 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800133c:	201a      	movs	r0, #26
 800133e:	f005 fc5d 	bl	8006bfc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001342:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001346:	f7ff ffcf 	bl	80012e8 <LL_APB2_GRP1_EnableClock>

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f007 ff61 	bl	800921c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800135a:	f007 ff49 	bl	80091f0 <HAL_RCC_GetPCLK2Freq>
 800135e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <HAL_InitTick+0xcc>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3b01      	subs	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <HAL_InitTick+0xd0>)
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <HAL_InitTick+0xd4>)
 8001372:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_InitTick+0xd0>)
 8001376:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800137a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_InitTick+0xd0>)
 800137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001380:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_InitTick+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <HAL_InitTick+0xd0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800138e:	4817      	ldr	r0, [pc, #92]	@ (80013ec <HAL_InitTick+0xd0>)
 8001390:	f009 fa00 	bl	800a794 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800139a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d11b      	bne.n	80013da <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80013a2:	4812      	ldr	r0, [pc, #72]	@ (80013ec <HAL_InitTick+0xd0>)
 80013a4:	f009 fa4e 	bl	800a844 <HAL_TIM_Base_Start_IT>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80013ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d111      	bne.n	80013da <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013b6:	201a      	movs	r0, #26
 80013b8:	f005 fc20 	bl	8006bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d808      	bhi.n	80013d4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80013c2:	2200      	movs	r2, #0
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	201a      	movs	r0, #26
 80013c8:	f005 fbfe 	bl	8006bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013cc:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <HAL_InitTick+0xd8>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e002      	b.n	80013da <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 80013da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3738      	adds	r7, #56	@ 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	20000d48 	.word	0x20000d48
 80013f0:	40014800 	.word	0x40014800
 80013f4:	200000f0 	.word	0x200000f0

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001432:	2001      	movs	r0, #1
 8001434:	f005 fe56 	bl	80070e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001440:	2010      	movs	r0, #16
 8001442:	f005 fe4f 	bl	80070e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001452:	f009 fa45 	bl	800a8e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000023c 	.word	0x2000023c

08001460 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001466:	f009 fa3b 	bl	800a8e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000d48 	.word	0x20000d48

08001474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <TIM2_IRQHandler+0x10>)
 800147a:	f009 fa31 	bl	800a8e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001f0 	.word	0x200001f0

08001488 <LL_AHB2_GRP1_EnableClock>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_APB1_GRP1_EnableClock>:
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_APB1_GRP1_DisableClock>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001502:	4013      	ands	r3, r2
 8001504:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <BSP_I2C1_Init+0x70>)
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <BSP_I2C1_Init+0x74>)
 8001522:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <BSP_I2C1_Init+0x78>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4918      	ldr	r1, [pc, #96]	@ (800158c <BSP_I2C1_Init+0x78>)
 800152c:	600a      	str	r2, [r1, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d122      	bne.n	8001578 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001532:	4814      	ldr	r0, [pc, #80]	@ (8001584 <BSP_I2C1_Init+0x70>)
 8001534:	f006 f906 	bl	8007744 <HAL_I2C_GetState>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11c      	bne.n	8001578 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800153e:	4811      	ldr	r0, [pc, #68]	@ (8001584 <BSP_I2C1_Init+0x70>)
 8001540:	f000 f8fe 	bl	8001740 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d116      	bne.n	8001578 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <BSP_I2C1_Init+0x70>)
 800154c:	f000 f8b4 	bl	80016b8 <MX_I2C1_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001556:	f06f 0307 	mvn.w	r3, #7
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e00c      	b.n	8001578 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155e:	2100      	movs	r1, #0
 8001560:	4808      	ldr	r0, [pc, #32]	@ (8001584 <BSP_I2C1_Init+0x70>)
 8001562:	f006 fbcb 	bl	8007cfc <HAL_I2CEx_ConfigAnalogFilter>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800156c:	f06f 0307 	mvn.w	r3, #7
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	e001      	b.n	8001578 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000d94 	.word	0x20000d94
 8001588:	40005400 	.word	0x40005400
 800158c:	20000de8 	.word	0x20000de8

08001590 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <BSP_I2C1_DeInit+0x48>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d014      	beq.n	80015cc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015a2:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <BSP_I2C1_DeInit+0x4c>)
 80015b6:	f000 f907 	bl	80017c8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80015ba:	4808      	ldr	r0, [pc, #32]	@ (80015dc <BSP_I2C1_DeInit+0x4c>)
 80015bc:	f005 fe50 	bl	8007260 <HAL_I2C_DeInit>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80015c6:	f06f 0307 	mvn.w	r3, #7
 80015ca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000de8 	.word	0x20000de8
 80015dc:	20000d94 	.word	0x20000d94

080015e0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af04      	add	r7, sp, #16
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	81fb      	strh	r3, [r7, #14]
 80015ee:	460b      	mov	r3, r1
 80015f0:	81bb      	strh	r3, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80015fa:	89ba      	ldrh	r2, [r7, #12]
 80015fc:	89f9      	ldrh	r1, [r7, #14]
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	480c      	ldr	r0, [pc, #48]	@ (8001640 <BSP_I2C1_WriteReg+0x60>)
 8001610:	f005 fe6a 	bl	80072e8 <HAL_I2C_Mem_Write>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00c      	beq.n	8001634 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <BSP_I2C1_WriteReg+0x60>)
 800161c:	f006 f8a0 	bl	8007760 <HAL_I2C_GetError>
 8001620:	4603      	mov	r3, r0
 8001622:	2b04      	cmp	r3, #4
 8001624:	d103      	bne.n	800162e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001626:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e002      	b.n	8001634 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800162e:	f06f 0303 	mvn.w	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001634:	697b      	ldr	r3, [r7, #20]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000d94 	.word	0x20000d94

08001644 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af04      	add	r7, sp, #16
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
 8001652:	460b      	mov	r3, r1
 8001654:	81bb      	strh	r3, [r7, #12]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800165e:	89ba      	ldrh	r2, [r7, #12]
 8001660:	89f9      	ldrh	r1, [r7, #14]
 8001662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <BSP_I2C1_ReadReg+0x60>)
 8001674:	f005 ff4c 	bl	8007510 <HAL_I2C_Mem_Read>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800167e:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <BSP_I2C1_ReadReg+0x60>)
 8001680:	f006 f86e 	bl	8007760 <HAL_I2C_GetError>
 8001684:	4603      	mov	r3, r0
 8001686:	2b04      	cmp	r3, #4
 8001688:	d103      	bne.n	8001692 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800168a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e002      	b.n	8001698 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001692:	f06f 0303 	mvn.w	r3, #3
 8001696:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001698:	697b      	ldr	r3, [r7, #20]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000d94 	.word	0x20000d94

080016a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016ac:	f005 f998 	bl	80069e0 <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001738 <MX_I2C1_Init+0x80>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <MX_I2C1_Init+0x84>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f005 fd15 	bl	800712a <HAL_I2C_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f006 faf5 	bl	8007cfc <HAL_I2CEx_ConfigAnalogFilter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f006 fb37 	bl	8007d92 <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40005400 	.word	0x40005400
 800173c:	00b07cb4 	.word	0x00b07cb4

08001740 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09c      	sub	sp, #112	@ 0x70
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2250      	movs	r2, #80	@ 0x50
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f012 f807 	bl	8013764 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001756:	2304      	movs	r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4618      	mov	r0, r3
 8001766:	f007 ffeb 	bl	8009740 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff fe8c 	bl	8001488 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001782:	2304      	movs	r3, #4
 8001784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001786:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800178a:	4619      	mov	r1, r3
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <I2C1_MspInit+0x84>)
 800178e:	f005 fa43 	bl	8006c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001796:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80017a4:	2304      	movs	r3, #4
 80017a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80017a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <I2C1_MspInit+0x84>)
 80017b0:	f005 fa32 	bl	8006c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017b8:	f7ff fe7f 	bl	80014ba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	3770      	adds	r7, #112	@ 0x70
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	48000400 	.word	0x48000400

080017c8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017d4:	f7ff fe8a 	bl	80014ec <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80017d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <I2C1_MspDeInit+0x2c>)
 80017de:	f005 fb8b 	bl	8006ef8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80017e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <I2C1_MspDeInit+0x2c>)
 80017e8:	f005 fb86 	bl	8006ef8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	48000400 	.word	0x48000400

080017f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
  }

  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800185a:	605a      	str	r2, [r3, #4]
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_isatty>:

int _isatty(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f011 ffee 	bl	80138ac <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20030000 	.word	0x20030000
 80018fc:	00000400 	.word	0x00000400
 8001900:	20000dec 	.word	0x20000dec
 8001904:	20005098 	.word	0x20005098

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <SystemInit+0x98>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <SystemInit+0x98>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001934:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <SystemInit+0x9c>)
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001952:	f023 0305 	bic.w	r3, r3, #5
 8001956:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <SystemInit+0xa0>)
 8001974:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197a:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <SystemInit+0xa0>)
 800197c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	faf6fefb 	.word	0xfaf6fefb
 80019a8:	22041000 	.word	0x22041000

080019ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b0:	3304      	adds	r3, #4

080019b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019b6:	d3f9      	bcc.n	80019ac <CopyDataInit>
  bx lr
 80019b8:	4770      	bx	lr

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019bc:	3004      	adds	r0, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>
  bx lr
 80019c2:	4770      	bx	lr

080019c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c8:	f7ff ff9e 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <LoopForever+0x6>)
 80019ce:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <LoopForever+0xa>)
 80019d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <LoopForever+0xe>)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f7ff ffed 	bl	80019b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <LoopForever+0x12>)
 80019da:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <LoopForever+0x16>)
 80019dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <LoopForever+0x1a>)
 80019de:	2300      	movs	r3, #0
 80019e0:	f7ff ffe7 	bl	80019b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <LoopForever+0x1e>)
 80019e6:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <LoopForever+0x22>)
 80019e8:	2300      	movs	r3, #0
 80019ea:	f7ff ffe8 	bl	80019be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ee:	f011 ff63 	bl	80138b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019f2:	f7fe fe07 	bl	8000604 <main>

080019f6 <LoopForever>:

LoopForever:
  b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   r0, =_estack
 80019f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000170 	.word	0x20000170
 8001a04:	08014d8c 	.word	0x08014d8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a08:	20030000 	.word	0x20030000
 8001a0c:	20030000 	.word	0x20030000
 8001a10:	08014ef4 	.word	0x08014ef4
  INIT_BSS _sbss, _ebss
 8001a14:	20000170 	.word	0x20000170
 8001a18:	20005098 	.word	0x20005098

08001a1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_IRQHandler>
	...

08001a20 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e051      	b.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	7b1a      	ldrb	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <LIS2DW12_RegisterBusIO+0xcc>)
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <LIS2DW12_RegisterBusIO+0xd0>)
 8001a7e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e020      	b.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4798      	blx	r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e016      	b.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d112      	bne.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	461a      	mov	r2, r3
 8001acc:	2121      	movs	r1, #33	@ 0x21
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fcc1 	bl	8002456 <LIS2DW12_Write_Reg>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	080027e9 	.word	0x080027e9
 8001af0:	0800281f 	.word	0x0800281f

08001af4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3320      	adds	r3, #32
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 f9cb 	bl	8002e9e <lis2dw12_auto_increment_set>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e04b      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3320      	adds	r3, #32
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 f8e2 	bl	8002ce4 <lis2dw12_block_data_update_set>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e03f      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3320      	adds	r3, #32
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f9d9 	bl	8002eea <lis2dw12_fifo_mode_set>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e033      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3320      	adds	r3, #32
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 feb2 	bl	80028b4 <lis2dw12_power_mode_set>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e027      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <LIS2DW12_Init+0xc0>)
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3320      	adds	r3, #32
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 ffa3 	bl	8002ac4 <lis2dw12_data_rate_set>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e010      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3320      	adds	r3, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 f8cd 	bl	8002d30 <lis2dw12_full_scale_set>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	e004      	b.n	8001bac <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	42c80000 	.word	0x42c80000

08001bb8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f888 	bl	8001cd6 <LIS2DW12_ACC_Disable>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e010      	b.n	8001bf4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3320      	adds	r3, #32
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 f935 	bl	8002e7c <lis2dw12_device_id_get>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	e000      	b.n	8001c20 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2210      	movs	r2, #16
 8001c54:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <LIS2DW12_GetCapabilities+0x58>)
 8001c68:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	44c80000 	.word	0x44c80000

08001c84 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e019      	b.n	8001cce <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001cac:	461a      	mov	r2, r3
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fbea 	bl	800248c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e004      	b.n	8001cce <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e010      	b.n	8001d0e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3320      	adds	r3, #32
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fee6 	bl	8002ac4 <lis2dw12_data_rate_set>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e004      	b.n	8001d0e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3320      	adds	r3, #32
 8001d2a:	f107 020b 	add.w	r2, r7, #11
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 f823 	bl	8002d7c <lis2dw12_full_scale_get>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e080      	b.n	8001e44 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3320      	adds	r3, #32
 8001d46:	f107 020a 	add.w	r2, r7, #10
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fdff 	bl	8002950 <lis2dw12_power_mode_get>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e072      	b.n	8001e44 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	2b1b      	cmp	r3, #27
 8001d62:	bf8c      	ite	hi
 8001d64:	2201      	movhi	r2, #1
 8001d66:	2200      	movls	r2, #0
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d162      	bne.n	8001e34 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8001d76:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12f      	bne.n	8001de8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8001d88:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04c      	beq.n	8001e34 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d81b      	bhi.n	8001dd8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8001da0:	a201      	add	r2, pc, #4	@ (adr r2, 8001da8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dc1 	.word	0x08001dc1
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001dd1 	.word	0x08001dd1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001dbc:	601a      	str	r2, [r3, #0]
          break;
 8001dbe:	e012      	b.n	8001de6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4a23      	ldr	r2, [pc, #140]	@ (8001e50 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001dc4:	601a      	str	r2, [r3, #0]
          break;
 8001dc6:	e00e      	b.n	8001de6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8001dcc:	601a      	str	r2, [r3, #0]
          break;
 8001dce:	e00a      	b.n	8001de6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8001dd4:	601a      	str	r2, [r3, #0]
          break;
 8001dd6:	e006      	b.n	8001de6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001ddc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	60fb      	str	r3, [r7, #12]
          break;
 8001de4:	bf00      	nop
      }
      break;
 8001de6:	e02c      	b.n	8001e42 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d81a      	bhi.n	8001e24 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e0d 	.word	0x08001e0d
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e1d 	.word	0x08001e1d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8001e08:	601a      	str	r2, [r3, #0]
          break;
 8001e0a:	e012      	b.n	8001e32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8001e10:	601a      	str	r2, [r3, #0]
          break;
 8001e12:	e00e      	b.n	8001e32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001e18:	601a      	str	r2, [r3, #0]
          break;
 8001e1a:	e00a      	b.n	8001e32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001e20:	601a      	str	r2, [r3, #0]
          break;
 8001e22:	e006      	b.n	8001e32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001e28:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	60fb      	str	r3, [r7, #12]
          break;
 8001e30:	bf00      	nop
      }
      break;
 8001e32:	e006      	b.n	8001e42 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001e38:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	60fb      	str	r3, [r7, #12]
      break;
 8001e40:	bf00      	nop
  }

  return ret;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	3f79db23 	.word	0x3f79db23
 8001e50:	3ff9db23 	.word	0x3ff9db23
 8001e54:	4079db23 	.word	0x4079db23
 8001e58:	40f9db23 	.word	0x40f9db23
 8001e5c:	bf800000 	.word	0xbf800000
 8001e60:	3e79db23 	.word	0x3e79db23
 8001e64:	3ef9db23 	.word	0x3ef9db23

08001e68 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3320      	adds	r3, #32
 8001e7a:	f107 020b 	add.w	r2, r7, #11
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fe65 	bl	8002b50 <lis2dw12_data_rate_get>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	e14f      	b.n	8002132 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3320      	adds	r3, #32
 8001e96:	f107 020a 	add.w	r2, r7, #10
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fd57 	bl	8002950 <lis2dw12_power_mode_get>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	e141      	b.n	8002132 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	2b32      	cmp	r3, #50	@ 0x32
 8001eb2:	f200 8136 	bhi.w	8002122 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f89 	.word	0x08001f89
 8001ec0:	08001f93 	.word	0x08001f93
 8001ec4:	08001fed 	.word	0x08001fed
 8001ec8:	08001ff5 	.word	0x08001ff5
 8001ecc:	08001ffd 	.word	0x08001ffd
 8001ed0:	08002005 	.word	0x08002005
 8001ed4:	0800200d 	.word	0x0800200d
 8001ed8:	08002015 	.word	0x08002015
 8001edc:	0800206f 	.word	0x0800206f
 8001ee0:	080020c9 	.word	0x080020c9
 8001ee4:	08002123 	.word	0x08002123
 8001ee8:	08002123 	.word	0x08002123
 8001eec:	08002123 	.word	0x08002123
 8001ef0:	08002123 	.word	0x08002123
 8001ef4:	08002123 	.word	0x08002123
 8001ef8:	08002123 	.word	0x08002123
 8001efc:	08002123 	.word	0x08002123
 8001f00:	08002123 	.word	0x08002123
 8001f04:	08001f89 	.word	0x08001f89
 8001f08:	08002123 	.word	0x08002123
 8001f0c:	08002123 	.word	0x08002123
 8001f10:	08002123 	.word	0x08002123
 8001f14:	08002123 	.word	0x08002123
 8001f18:	08002123 	.word	0x08002123
 8001f1c:	08002123 	.word	0x08002123
 8001f20:	08002123 	.word	0x08002123
 8001f24:	08002123 	.word	0x08002123
 8001f28:	08002123 	.word	0x08002123
 8001f2c:	08002123 	.word	0x08002123
 8001f30:	08002123 	.word	0x08002123
 8001f34:	08002123 	.word	0x08002123
 8001f38:	08002123 	.word	0x08002123
 8001f3c:	08002123 	.word	0x08002123
 8001f40:	08002123 	.word	0x08002123
 8001f44:	08002123 	.word	0x08002123
 8001f48:	08002123 	.word	0x08002123
 8001f4c:	08002123 	.word	0x08002123
 8001f50:	08002123 	.word	0x08002123
 8001f54:	08002123 	.word	0x08002123
 8001f58:	08002123 	.word	0x08002123
 8001f5c:	08002123 	.word	0x08002123
 8001f60:	08002123 	.word	0x08002123
 8001f64:	08002123 	.word	0x08002123
 8001f68:	08002123 	.word	0x08002123
 8001f6c:	08002123 	.word	0x08002123
 8001f70:	08002123 	.word	0x08002123
 8001f74:	08002123 	.word	0x08002123
 8001f78:	08002123 	.word	0x08002123
 8001f7c:	08002123 	.word	0x08002123
 8001f80:	08002123 	.word	0x08002123
 8001f84:	08001f89 	.word	0x08001f89
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
      break;
 8001f90:	e0ce      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001f92:	7abb      	ldrb	r3, [r7, #10]
 8001f94:	2b1b      	cmp	r3, #27
 8001f96:	bf8c      	ite	hi
 8001f98:	2201      	movhi	r2, #1
 8001f9a:	2200      	movls	r2, #0
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d11c      	bne.n	8001fdc <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2201      	movne	r2, #1
 8001fb2:	2200      	moveq	r2, #0
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d10c      	bne.n	8001fd4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8001fba:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4a5b      	ldr	r2, [pc, #364]	@ (800213c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8001fd0:	601a      	str	r2, [r3, #0]
          break;
 8001fd2:	e00a      	b.n	8001fea <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002140 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8001fd8:	601a      	str	r2, [r3, #0]
          break;
 8001fda:	e006      	b.n	8001fea <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8001fe0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	60fb      	str	r3, [r7, #12]
          break;
 8001fe8:	bf00      	nop
      }
      break;
 8001fea:	e0a1      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4a53      	ldr	r2, [pc, #332]	@ (800213c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8001ff0:	601a      	str	r2, [r3, #0]
      break;
 8001ff2:	e09d      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4a54      	ldr	r2, [pc, #336]	@ (8002148 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8001ff8:	601a      	str	r2, [r3, #0]
      break;
 8001ffa:	e099      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4a53      	ldr	r2, [pc, #332]	@ (800214c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8002000:	601a      	str	r2, [r3, #0]
      break;
 8002002:	e095      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8002008:	601a      	str	r2, [r3, #0]
      break;
 800200a:	e091      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4a51      	ldr	r2, [pc, #324]	@ (8002154 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002010:	601a      	str	r2, [r3, #0]
      break;
 8002012:	e08d      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002014:	7abb      	ldrb	r3, [r7, #10]
 8002016:	2b1b      	cmp	r3, #27
 8002018:	bf8c      	ite	hi
 800201a:	2201      	movhi	r2, #1
 800201c:	2200      	movls	r2, #0
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	2a00      	cmp	r2, #0
 8002022:	d11c      	bne.n	800205e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8002024:	2201      	movs	r2, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800202e:	2a00      	cmp	r2, #0
 8002030:	bf14      	ite	ne
 8002032:	2201      	movne	r2, #1
 8002034:	2200      	moveq	r2, #0
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	2a00      	cmp	r2, #0
 800203a:	d10c      	bne.n	8002056 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800203c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4a41      	ldr	r2, [pc, #260]	@ (8002158 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8002052:	601a      	str	r2, [r3, #0]
          break;
 8002054:	e00a      	b.n	800206c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4a3e      	ldr	r2, [pc, #248]	@ (8002154 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800205a:	601a      	str	r2, [r3, #0]
          break;
 800205c:	e006      	b.n	800206c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002062:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	60fb      	str	r3, [r7, #12]
          break;
 800206a:	bf00      	nop
      }
      break;
 800206c:	e060      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800206e:	7abb      	ldrb	r3, [r7, #10]
 8002070:	2b1b      	cmp	r3, #27
 8002072:	bf8c      	ite	hi
 8002074:	2201      	movhi	r2, #1
 8002076:	2200      	movls	r2, #0
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	2a00      	cmp	r2, #0
 800207c:	d11c      	bne.n	80020b8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002088:	2a00      	cmp	r2, #0
 800208a:	bf14      	ite	ne
 800208c:	2201      	movne	r2, #1
 800208e:	2200      	moveq	r2, #0
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	2a00      	cmp	r2, #0
 8002094:	d10c      	bne.n	80020b0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8002096:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80020ac:	601a      	str	r2, [r3, #0]
          break;
 80020ae:	e00a      	b.n	80020c6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4a28      	ldr	r2, [pc, #160]	@ (8002154 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80020b4:	601a      	str	r2, [r3, #0]
          break;
 80020b6:	e006      	b.n	80020c6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4a22      	ldr	r2, [pc, #136]	@ (8002144 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80020bc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	60fb      	str	r3, [r7, #12]
          break;
 80020c4:	bf00      	nop
      }
      break;
 80020c6:	e033      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80020c8:	7abb      	ldrb	r3, [r7, #10]
 80020ca:	2b1b      	cmp	r3, #27
 80020cc:	bf8c      	ite	hi
 80020ce:	2201      	movhi	r2, #1
 80020d0:	2200      	movls	r2, #0
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	2a00      	cmp	r2, #0
 80020d6:	d11c      	bne.n	8002112 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80020d8:	2201      	movs	r2, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2201      	movne	r2, #1
 80020e8:	2200      	moveq	r2, #0
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d10c      	bne.n	800210a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80020f0:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8002106:	601a      	str	r2, [r3, #0]
          break;
 8002108:	e00a      	b.n	8002120 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800210e:	601a      	str	r2, [r3, #0]
          break;
 8002110:	e006      	b.n	8002120 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002116:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	60fb      	str	r3, [r7, #12]
          break;
 800211e:	bf00      	nop
      }
      break;
 8002120:	e006      	b.n	8002130 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002126:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	60fb      	str	r3, [r7, #12]
      break;
 800212e:	bf00      	nop
  }

  return ret;
 8002130:	68fb      	ldr	r3, [r7, #12]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	41480000 	.word	0x41480000
 8002140:	3fcccccd 	.word	0x3fcccccd
 8002144:	bf800000 	.word	0xbf800000
 8002148:	41c80000 	.word	0x41c80000
 800214c:	42480000 	.word	0x42480000
 8002150:	42c80000 	.word	0x42c80000
 8002154:	43480000 	.word	0x43480000
 8002158:	43c80000 	.word	0x43c80000
 800215c:	44480000 	.word	0x44480000
 8002160:	44c80000 	.word	0x44c80000

08002164 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	ed97 0a00 	vldr	s0, [r7]
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f805 	bl	8002188 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	ed87 0a02 	vstr	s0, [r7, #8]
 8002194:	460b      	mov	r3, r1
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	4613      	mov	r3, r2
 800219a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d109      	bne.n	80021ba <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80021a6:	79ba      	ldrb	r2, [r7, #6]
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	4619      	mov	r1, r3
 80021ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f96b 	bl	800248c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	e008      	b.n	80021cc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80021ba:	79ba      	ldrb	r2, [r7, #6]
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4619      	mov	r1, r3
 80021c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fa7d 	bl	80026c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80021ca:	4603      	mov	r3, r0
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3320      	adds	r3, #32
 80021e6:	f107 020b 	add.w	r2, r7, #11
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fdc5 	bl	8002d7c <lis2dw12_full_scale_get>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	e027      	b.n	800224e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d81b      	bhi.n	800223c <LIS2DW12_ACC_GetFullScale+0x68>
 8002204:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <LIS2DW12_ACC_GetFullScale+0x38>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	08002225 	.word	0x08002225
 8002214:	0800222d 	.word	0x0800222d
 8002218:	08002235 	.word	0x08002235
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
      break;
 8002222:	e013      	b.n	800224c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2204      	movs	r2, #4
 8002228:	601a      	str	r2, [r3, #0]
      break;
 800222a:	e00f      	b.n	800224c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2208      	movs	r2, #8
 8002230:	601a      	str	r2, [r3, #0]
      break;
 8002232:	e00b      	b.n	800224c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	601a      	str	r2, [r3, #0]
      break;
 800223a:	e007      	b.n	800224c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	60fb      	str	r3, [r7, #12]
      break;
 800224a:	bf00      	nop
  }

  return ret;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b02      	cmp	r3, #2
 8002266:	dd0b      	ble.n	8002280 <LIS2DW12_ACC_SetFullScale+0x28>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	dd06      	ble.n	800227c <LIS2DW12_ACC_SetFullScale+0x24>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b08      	cmp	r3, #8
 8002272:	dc01      	bgt.n	8002278 <LIS2DW12_ACC_SetFullScale+0x20>
 8002274:	2302      	movs	r3, #2
 8002276:	e004      	b.n	8002282 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002278:	2303      	movs	r3, #3
 800227a:	e002      	b.n	8002282 <LIS2DW12_ACC_SetFullScale+0x2a>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002280:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002282:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3320      	adds	r3, #32
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fd4f 	bl	8002d30 <lis2dw12_full_scale_set>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
 800229c:	e000      	b.n	80022a0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3320      	adds	r3, #32
 80022ba:	f107 020b 	add.w	r2, r7, #11
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fb45 	bl	8002950 <lis2dw12_power_mode_get>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e068      	b.n	80023a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3320      	adds	r3, #32
 80022d6:	f107 020c 	add.w	r2, r7, #12
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fd85 	bl	8002dec <lis2dw12_acceleration_raw_get>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ec:	e05a      	b.n	80023a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	2b1b      	cmp	r3, #27
 80022f2:	bf8c      	ite	hi
 80022f4:	2201      	movhi	r2, #1
 80022f6:	2200      	movls	r2, #0
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d14d      	bne.n	800239a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80022fe:	2201      	movs	r2, #1
 8002300:	409a      	lsls	r2, r3
 8002302:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8002306:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d124      	bne.n	8002362 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8002318:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d037      	beq.n	800239a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800232a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da00      	bge.n	8002334 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8002332:	330f      	adds	r3, #15
 8002334:	111b      	asrs	r3, r3, #4
 8002336:	b21a      	sxth	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800233c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da00      	bge.n	8002346 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8002344:	330f      	adds	r3, #15
 8002346:	111b      	asrs	r3, r3, #4
 8002348:	b21a      	sxth	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800234e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da00      	bge.n	8002358 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8002356:	330f      	adds	r3, #15
 8002358:	111b      	asrs	r3, r3, #4
 800235a:	b21a      	sxth	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	809a      	strh	r2, [r3, #4]
      break;
 8002360:	e01f      	b.n	80023a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002362:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da00      	bge.n	800236c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800236a:	3303      	adds	r3, #3
 800236c:	109b      	asrs	r3, r3, #2
 800236e:	b21a      	sxth	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da00      	bge.n	800237e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800237c:	3303      	adds	r3, #3
 800237e:	109b      	asrs	r3, r3, #2
 8002380:	b21a      	sxth	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002386:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	da00      	bge.n	8002390 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800238e:	3303      	adds	r3, #3
 8002390:	109b      	asrs	r3, r3, #2
 8002392:	b21a      	sxth	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	809a      	strh	r2, [r3, #4]
      break;
 8002398:	e003      	b.n	80023a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	617b      	str	r3, [r7, #20]
      break;
 80023a0:	bf00      	nop
  }

  return ret;
 80023a2:	697b      	ldr	r3, [r7, #20]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4619      	mov	r1, r3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff70 	bl	80022a8 <LIS2DW12_ACC_GetAxesRaw>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e03c      	b.n	800244e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fc9c 	bl	8001d18 <LIS2DW12_ACC_GetSensitivity>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e030      	b.n	800244e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80023ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002404:	ee17 2a90 	vmov	r2, s15
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800240c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 2a90 	vmov	r2, s15
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800242c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002438:	edd7 7a03 	vldr	s15, [r7, #12]
 800243c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002444:	ee17 2a90 	vmov	r2, s15
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
 8002462:	4613      	mov	r3, r2
 8002464:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f103 0020 	add.w	r0, r3, #32
 800246c:	1cba      	adds	r2, r7, #2
 800246e:	78f9      	ldrb	r1, [r7, #3]
 8002470:	2301      	movs	r3, #1
 8002472:	f000 fa07 	bl	8002884 <lis2dw12_write_reg>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	e000      	b.n	8002484 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	ed87 0a02 	vstr	s0, [r7, #8]
 8002498:	460b      	mov	r3, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d80b      	bhi.n	80024c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80024a8:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024ed 	.word	0x080024ed
 80024b4:	08002519 	.word	0x08002519
 80024b8:	08002545 	.word	0x08002545
 80024bc:	08002571 	.word	0x08002571
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80024c6:	2304      	movs	r3, #4
 80024c8:	75fb      	strb	r3, [r7, #23]
          break;
 80024ca:	e002      	b.n	80024d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80024cc:	2314      	movs	r3, #20
 80024ce:	75fb      	strb	r3, [r7, #23]
          break;
 80024d0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80024d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80024da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	d400      	bmi.n	80024e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80024e4:	e05a      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80024e6:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80024e8:	60bb      	str	r3, [r7, #8]
      break;
 80024ea:	e057      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80024ec:	79bb      	ldrb	r3, [r7, #6]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d002      	beq.n	80024f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80024f2:	2303      	movs	r3, #3
 80024f4:	75fb      	strb	r3, [r7, #23]
          break;
 80024f6:	e002      	b.n	80024fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80024f8:	2313      	movs	r3, #19
 80024fa:	75fb      	strb	r3, [r7, #23]
          break;
 80024fc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80024fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002502:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80026a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	dc00      	bgt.n	8002512 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002510:	e044      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002512:	4b66      	ldr	r3, [pc, #408]	@ (80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002514:	60bb      	str	r3, [r7, #8]
      break;
 8002516:	e041      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d002      	beq.n	8002524 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800251e:	2302      	movs	r3, #2
 8002520:	75fb      	strb	r3, [r7, #23]
          break;
 8002522:	e002      	b.n	800252a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002524:	2312      	movs	r3, #18
 8002526:	75fb      	strb	r3, [r7, #23]
          break;
 8002528:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800252a:	edd7 7a02 	vldr	s15, [r7, #8]
 800252e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80026a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	dc00      	bgt.n	800253e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800253c:	e02e      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800253e:	4b5b      	ldr	r3, [pc, #364]	@ (80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e02b      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d002      	beq.n	8002550 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
          break;
 800254e:	e002      	b.n	8002556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002550:	2311      	movs	r3, #17
 8002552:	75fb      	strb	r3, [r7, #23]
          break;
 8002554:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002556:	edd7 7a02 	vldr	s15, [r7, #8]
 800255a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80026a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800255e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	dc00      	bgt.n	800256a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002568:	e018      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800256a:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800256c:	60bb      	str	r3, [r7, #8]
      break;
 800256e:	e015      	b.n	800259c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d002      	beq.n	800257c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
          break;
 800257a:	e002      	b.n	8002582 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800257c:	2310      	movs	r3, #16
 800257e:	75fb      	strb	r3, [r7, #23]
          break;
 8002580:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002582:	edd7 7a02 	vldr	s15, [r7, #8]
 8002586:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80026a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800258a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	dc00      	bgt.n	8002596 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002594:	e001      	b.n	800259a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002596:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002598:	60bb      	str	r3, [r7, #8]
      break;
 800259a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800259c:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80026b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80025a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d801      	bhi.n	80025b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e04d      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80025ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d801      	bhi.n	80025c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e042      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025cc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80025d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d801      	bhi.n	80025de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80025da:	2303      	movs	r3, #3
 80025dc:	e037      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025de:	edd7 7a02 	vldr	s15, [r7, #8]
 80025e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	d801      	bhi.n	80025f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e02c      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80026b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80025fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	d801      	bhi.n	800260a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002606:	2305      	movs	r3, #5
 8002608:	e021      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800260a:	edd7 7a02 	vldr	s15, [r7, #8]
 800260e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80026a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	d801      	bhi.n	8002620 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800261c:	2306      	movs	r3, #6
 800261e:	e016      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002620:	edd7 7a02 	vldr	s15, [r7, #8]
 8002624:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80026bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d801      	bhi.n	8002636 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002632:	2307      	movs	r3, #7
 8002634:	e00b      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002636:	edd7 7a02 	vldr	s15, [r7, #8]
 800263a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80026c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800263e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	d801      	bhi.n	800264c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002648:	2308      	movs	r3, #8
 800264a:	e000      	b.n	800264e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800264c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800264e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3320      	adds	r3, #32
 8002654:	7dba      	ldrb	r2, [r7, #22]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fa33 	bl	8002ac4 <lis2dw12_data_rate_set>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e018      	b.n	800269c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3320      	adds	r3, #32
 800266e:	7dfa      	ldrb	r2, [r7, #23]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f91e 	bl	80028b4 <lis2dw12_power_mode_set>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e00b      	b.n	800269c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	41480000 	.word	0x41480000
 80026a8:	43480000 	.word	0x43480000
 80026ac:	43480000 	.word	0x43480000
 80026b0:	3fcccccd 	.word	0x3fcccccd
 80026b4:	42480000 	.word	0x42480000
 80026b8:	42c80000 	.word	0x42c80000
 80026bc:	43c80000 	.word	0x43c80000
 80026c0:	44480000 	.word	0x44480000

080026c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80026d0:	460b      	mov	r3, r1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	79fa      	ldrb	r2, [r7, #7]
 80026dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	79ba      	ldrb	r2, [r7, #6]
 80026e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80026e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80027ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d801      	bhi.n	80026fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80026fa:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80026fc:	e04d      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80026fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002702:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d801      	bhi.n	8002714 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002712:	e042      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002714:	edd7 7a02 	vldr	s15, [r7, #8]
 8002718:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d801      	bhi.n	800272a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002728:	e037      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800272a:	edd7 7a02 	vldr	s15, [r7, #8]
 800272e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80027bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	d801      	bhi.n	8002740 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800273c:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800273e:	e02c      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002740:	edd7 7a02 	vldr	s15, [r7, #8]
 8002744:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80027c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	d801      	bhi.n	8002756 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002752:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002754:	e021      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002756:	edd7 7a02 	vldr	s15, [r7, #8]
 800275a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80027cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d801      	bhi.n	800276c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800276a:	e016      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 800276c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002770:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80027d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	d801      	bhi.n	8002782 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800277e:	4b16      	ldr	r3, [pc, #88]	@ (80027d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002780:	e00b      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80027dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d801      	bhi.n	8002798 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002794:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002796:	e000      	b.n	800279a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	3fcccccd 	.word	0x3fcccccd
 80027b0:	3fcccccd 	.word	0x3fcccccd
 80027b4:	41480000 	.word	0x41480000
 80027b8:	41c80000 	.word	0x41c80000
 80027bc:	42480000 	.word	0x42480000
 80027c0:	42480000 	.word	0x42480000
 80027c4:	42c80000 	.word	0x42c80000
 80027c8:	42c80000 	.word	0x42c80000
 80027cc:	43480000 	.word	0x43480000
 80027d0:	43480000 	.word	0x43480000
 80027d4:	43c80000 	.word	0x43c80000
 80027d8:	43c80000 	.word	0x43c80000
 80027dc:	44480000 	.word	0x44480000
 80027e0:	44480000 	.word	0x44480000
 80027e4:	44c80000 	.word	0x44c80000

080027e8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	72fb      	strb	r3, [r7, #11]
 80027f8:	4613      	mov	r3, r2
 80027fa:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	695c      	ldr	r4, [r3, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	7b1b      	ldrb	r3, [r3, #12]
 8002808:	4618      	mov	r0, r3
 800280a:	7afb      	ldrb	r3, [r7, #11]
 800280c:	b299      	uxth	r1, r3
 800280e:	893b      	ldrh	r3, [r7, #8]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	47a0      	blx	r4
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800281e:	b590      	push	{r4, r7, lr}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	461a      	mov	r2, r3
 800282a:	460b      	mov	r3, r1
 800282c:	72fb      	strb	r3, [r7, #11]
 800282e:	4613      	mov	r3, r2
 8002830:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	691c      	ldr	r4, [r3, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	7b1b      	ldrb	r3, [r3, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b299      	uxth	r1, r3
 8002844:	893b      	ldrh	r3, [r7, #8]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	47a0      	blx	r4
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}

08002854 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	72fb      	strb	r3, [r7, #11]
 8002864:	4613      	mov	r3, r2
 8002866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685c      	ldr	r4, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68d8      	ldr	r0, [r3, #12]
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	7af9      	ldrb	r1, [r7, #11]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	47a0      	blx	r4
 8002878:	6178      	str	r0, [r7, #20]

  return ret;
 800287a:	697b      	ldr	r3, [r7, #20]
}
 800287c:	4618      	mov	r0, r3
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}

08002884 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	72fb      	strb	r3, [r7, #11]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68d8      	ldr	r0, [r3, #12]
 80028a0:	893b      	ldrh	r3, [r7, #8]
 80028a2:	7af9      	ldrb	r1, [r7, #11]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	47a0      	blx	r4
 80028a8:	6178      	str	r0, [r7, #20]

  return ret;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}

080028b4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80028c0:	f107 0210 	add.w	r2, r7, #16
 80028c4:	2301      	movs	r3, #1
 80028c6:	2120      	movs	r1, #32
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ffc3 	bl	8002854 <lis2dw12_read_reg>
 80028ce:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	7c3b      	ldrb	r3, [r7, #16]
 80028e2:	f362 0383 	bfi	r3, r2, #2, #2
 80028e6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	7c3b      	ldrb	r3, [r7, #16]
 80028f2:	f362 0301 	bfi	r3, r2, #0, #2
 80028f6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80028f8:	f107 0210 	add.w	r2, r7, #16
 80028fc:	2301      	movs	r3, #1
 80028fe:	2120      	movs	r1, #32
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffbf 	bl	8002884 <lis2dw12_write_reg>
 8002906:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800290e:	f107 020c 	add.w	r2, r7, #12
 8002912:	2301      	movs	r3, #1
 8002914:	2125      	movs	r1, #37	@ 0x25
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff9c 	bl	8002854 <lis2dw12_read_reg>
 800291c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d110      	bne.n	8002946 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	7b3b      	ldrb	r3, [r7, #12]
 8002930:	f362 0382 	bfi	r3, r2, #2, #1
 8002934:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002936:	f107 020c 	add.w	r2, r7, #12
 800293a:	2301      	movs	r3, #1
 800293c:	2125      	movs	r1, #37	@ 0x25
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa0 	bl	8002884 <lis2dw12_write_reg>
 8002944:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002946:	697b      	ldr	r3, [r7, #20]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800295a:	f107 0210 	add.w	r2, r7, #16
 800295e:	2301      	movs	r3, #1
 8002960:	2120      	movs	r1, #32
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff76 	bl	8002854 <lis2dw12_read_reg>
 8002968:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 80a3 	bne.w	8002ab8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002972:	f107 020c 	add.w	r2, r7, #12
 8002976:	2301      	movs	r3, #1
 8002978:	2125      	movs	r1, #37	@ 0x25
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ff6a 	bl	8002854 <lis2dw12_read_reg>
 8002980:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002982:	7b3b      	ldrb	r3, [r7, #12]
 8002984:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	011a      	lsls	r2, r3, #4
 800298c:	7c3b      	ldrb	r3, [r7, #16]
 800298e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002998:	7c3a      	ldrb	r2, [r7, #16]
 800299a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800299e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80029a0:	4413      	add	r3, r2
 80029a2:	2b1b      	cmp	r3, #27
 80029a4:	f200 8084 	bhi.w	8002ab0 <lis2dw12_power_mode_get+0x160>
 80029a8:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <lis2dw12_power_mode_get+0x60>)
 80029aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ae:	bf00      	nop
 80029b0:	08002a41 	.word	0x08002a41
 80029b4:	08002a39 	.word	0x08002a39
 80029b8:	08002a31 	.word	0x08002a31
 80029bc:	08002a29 	.word	0x08002a29
 80029c0:	08002a21 	.word	0x08002a21
 80029c4:	08002ab1 	.word	0x08002ab1
 80029c8:	08002ab1 	.word	0x08002ab1
 80029cc:	08002ab1 	.word	0x08002ab1
 80029d0:	08002a61 	.word	0x08002a61
 80029d4:	08002a59 	.word	0x08002a59
 80029d8:	08002a51 	.word	0x08002a51
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002ab1 	.word	0x08002ab1
 80029e4:	08002ab1 	.word	0x08002ab1
 80029e8:	08002ab1 	.word	0x08002ab1
 80029ec:	08002ab1 	.word	0x08002ab1
 80029f0:	08002a89 	.word	0x08002a89
 80029f4:	08002a81 	.word	0x08002a81
 80029f8:	08002a79 	.word	0x08002a79
 80029fc:	08002a71 	.word	0x08002a71
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	08002ab1 	.word	0x08002ab1
 8002a08:	08002ab1 	.word	0x08002ab1
 8002a0c:	08002ab1 	.word	0x08002ab1
 8002a10:	08002aa9 	.word	0x08002aa9
 8002a14:	08002aa1 	.word	0x08002aa1
 8002a18:	08002a99 	.word	0x08002a99
 8002a1c:	08002a91 	.word	0x08002a91
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	701a      	strb	r2, [r3, #0]
        break;
 8002a26:	e047      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	701a      	strb	r2, [r3, #0]
        break;
 8002a2e:	e043      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
        break;
 8002a36:	e03f      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
        break;
 8002a3e:	e03b      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
        break;
 8002a46:	e037      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	220b      	movs	r2, #11
 8002a4c:	701a      	strb	r2, [r3, #0]
        break;
 8002a4e:	e033      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	220a      	movs	r2, #10
 8002a54:	701a      	strb	r2, [r3, #0]
        break;
 8002a56:	e02f      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2209      	movs	r2, #9
 8002a5c:	701a      	strb	r2, [r3, #0]
        break;
 8002a5e:	e02b      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2208      	movs	r2, #8
 8002a64:	701a      	strb	r2, [r3, #0]
        break;
 8002a66:	e027      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2214      	movs	r2, #20
 8002a6c:	701a      	strb	r2, [r3, #0]
        break;
 8002a6e:	e023      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2213      	movs	r2, #19
 8002a74:	701a      	strb	r2, [r3, #0]
        break;
 8002a76:	e01f      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2212      	movs	r2, #18
 8002a7c:	701a      	strb	r2, [r3, #0]
        break;
 8002a7e:	e01b      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2211      	movs	r2, #17
 8002a84:	701a      	strb	r2, [r3, #0]
        break;
 8002a86:	e017      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	701a      	strb	r2, [r3, #0]
        break;
 8002a8e:	e013      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	221b      	movs	r2, #27
 8002a94:	701a      	strb	r2, [r3, #0]
        break;
 8002a96:	e00f      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	221a      	movs	r2, #26
 8002a9c:	701a      	strb	r2, [r3, #0]
        break;
 8002a9e:	e00b      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2219      	movs	r2, #25
 8002aa4:	701a      	strb	r2, [r3, #0]
        break;
 8002aa6:	e007      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2218      	movs	r2, #24
 8002aac:	701a      	strb	r2, [r3, #0]
        break;
 8002aae:	e003      	b.n	8002ab8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	701a      	strb	r2, [r3, #0]
        break;
 8002ab6:	bf00      	nop
    }
  }

  return ret;
 8002ab8:	697b      	ldr	r3, [r7, #20]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop

08002ac4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002ad0:	f107 0210 	add.w	r2, r7, #16
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff febb 	bl	8002854 <lis2dw12_read_reg>
 8002ade:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	7c3b      	ldrb	r3, [r7, #16]
 8002af0:	f362 1307 	bfi	r3, r2, #4, #4
 8002af4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002af6:	f107 0210 	add.w	r2, r7, #16
 8002afa:	2301      	movs	r3, #1
 8002afc:	2120      	movs	r1, #32
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fec0 	bl	8002884 <lis2dw12_write_reg>
 8002b04:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002b0c:	f107 020c 	add.w	r2, r7, #12
 8002b10:	2301      	movs	r3, #1
 8002b12:	2122      	movs	r1, #34	@ 0x22
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fe9d 	bl	8002854 <lis2dw12_read_reg>
 8002b1a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d110      	bne.n	8002b44 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	f362 0301 	bfi	r3, r2, #0, #2
 8002b32:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002b34:	f107 020c 	add.w	r2, r7, #12
 8002b38:	2301      	movs	r3, #1
 8002b3a:	2122      	movs	r1, #34	@ 0x22
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fea1 	bl	8002884 <lis2dw12_write_reg>
 8002b42:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002b44:	697b      	ldr	r3, [r7, #20]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002b5a:	f107 0210 	add.w	r2, r7, #16
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2120      	movs	r1, #32
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fe76 	bl	8002854 <lis2dw12_read_reg>
 8002b68:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 80b3 	bne.w	8002cd8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002b72:	f107 020c 	add.w	r2, r7, #12
 8002b76:	2301      	movs	r3, #1
 8002b78:	2122      	movs	r1, #34	@ 0x22
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fe6a 	bl	8002854 <lis2dw12_read_reg>
 8002b80:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002b82:	7b3b      	ldrb	r3, [r7, #12]
 8002b84:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	7c3a      	ldrb	r2, [r7, #16]
 8002b8e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4413      	add	r3, r2
 8002b96:	2b32      	cmp	r3, #50	@ 0x32
 8002b98:	f200 809a 	bhi.w	8002cd0 <lis2dw12_data_rate_get+0x180>
 8002b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <lis2dw12_data_rate_get+0x54>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002c71 	.word	0x08002c71
 8002ba8:	08002c79 	.word	0x08002c79
 8002bac:	08002c81 	.word	0x08002c81
 8002bb0:	08002c89 	.word	0x08002c89
 8002bb4:	08002c91 	.word	0x08002c91
 8002bb8:	08002c99 	.word	0x08002c99
 8002bbc:	08002ca1 	.word	0x08002ca1
 8002bc0:	08002ca9 	.word	0x08002ca9
 8002bc4:	08002cb1 	.word	0x08002cb1
 8002bc8:	08002cb9 	.word	0x08002cb9
 8002bcc:	08002cd1 	.word	0x08002cd1
 8002bd0:	08002cd1 	.word	0x08002cd1
 8002bd4:	08002cd1 	.word	0x08002cd1
 8002bd8:	08002cd1 	.word	0x08002cd1
 8002bdc:	08002cd1 	.word	0x08002cd1
 8002be0:	08002cd1 	.word	0x08002cd1
 8002be4:	08002cd1 	.word	0x08002cd1
 8002be8:	08002cd1 	.word	0x08002cd1
 8002bec:	08002cc9 	.word	0x08002cc9
 8002bf0:	08002cd1 	.word	0x08002cd1
 8002bf4:	08002cd1 	.word	0x08002cd1
 8002bf8:	08002cd1 	.word	0x08002cd1
 8002bfc:	08002cd1 	.word	0x08002cd1
 8002c00:	08002cd1 	.word	0x08002cd1
 8002c04:	08002cd1 	.word	0x08002cd1
 8002c08:	08002cd1 	.word	0x08002cd1
 8002c0c:	08002cd1 	.word	0x08002cd1
 8002c10:	08002cd1 	.word	0x08002cd1
 8002c14:	08002cd1 	.word	0x08002cd1
 8002c18:	08002cd1 	.word	0x08002cd1
 8002c1c:	08002cd1 	.word	0x08002cd1
 8002c20:	08002cd1 	.word	0x08002cd1
 8002c24:	08002cd1 	.word	0x08002cd1
 8002c28:	08002cd1 	.word	0x08002cd1
 8002c2c:	08002cd1 	.word	0x08002cd1
 8002c30:	08002cd1 	.word	0x08002cd1
 8002c34:	08002cd1 	.word	0x08002cd1
 8002c38:	08002cd1 	.word	0x08002cd1
 8002c3c:	08002cd1 	.word	0x08002cd1
 8002c40:	08002cd1 	.word	0x08002cd1
 8002c44:	08002cd1 	.word	0x08002cd1
 8002c48:	08002cd1 	.word	0x08002cd1
 8002c4c:	08002cd1 	.word	0x08002cd1
 8002c50:	08002cd1 	.word	0x08002cd1
 8002c54:	08002cd1 	.word	0x08002cd1
 8002c58:	08002cd1 	.word	0x08002cd1
 8002c5c:	08002cd1 	.word	0x08002cd1
 8002c60:	08002cd1 	.word	0x08002cd1
 8002c64:	08002cd1 	.word	0x08002cd1
 8002c68:	08002cd1 	.word	0x08002cd1
 8002c6c:	08002cc1 	.word	0x08002cc1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e02f      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
        break;
 8002c7e:	e02b      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
        break;
 8002c86:	e027      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	701a      	strb	r2, [r3, #0]
        break;
 8002c8e:	e023      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	e01f      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	701a      	strb	r2, [r3, #0]
        break;
 8002c9e:	e01b      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2206      	movs	r2, #6
 8002ca4:	701a      	strb	r2, [r3, #0]
        break;
 8002ca6:	e017      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2207      	movs	r2, #7
 8002cac:	701a      	strb	r2, [r3, #0]
        break;
 8002cae:	e013      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	701a      	strb	r2, [r3, #0]
        break;
 8002cb6:	e00f      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2209      	movs	r2, #9
 8002cbc:	701a      	strb	r2, [r3, #0]
        break;
 8002cbe:	e00b      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2232      	movs	r2, #50	@ 0x32
 8002cc4:	701a      	strb	r2, [r3, #0]
        break;
 8002cc6:	e007      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2212      	movs	r2, #18
 8002ccc:	701a      	strb	r2, [r3, #0]
        break;
 8002cce:	e003      	b.n	8002cd8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
        break;
 8002cd6:	bf00      	nop
    }
  }

  return ret;
 8002cd8:	697b      	ldr	r3, [r7, #20]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002cf0:	f107 0208 	add.w	r2, r7, #8
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	2121      	movs	r1, #33	@ 0x21
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fdab 	bl	8002854 <lis2dw12_read_reg>
 8002cfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	7a3b      	ldrb	r3, [r7, #8]
 8002d10:	f362 03c3 	bfi	r3, r2, #3, #1
 8002d14:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2121      	movs	r1, #33	@ 0x21
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fdb0 	bl	8002884 <lis2dw12_write_reg>
 8002d24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	2301      	movs	r3, #1
 8002d42:	2125      	movs	r1, #37	@ 0x25
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fd85 	bl	8002854 <lis2dw12_read_reg>
 8002d4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	7a3b      	ldrb	r3, [r7, #8]
 8002d5c:	f362 1305 	bfi	r3, r2, #4, #2
 8002d60:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	2301      	movs	r3, #1
 8002d68:	2125      	movs	r1, #37	@ 0x25
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fd8a 	bl	8002884 <lis2dw12_write_reg>
 8002d70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002d86:	f107 0208 	add.w	r2, r7, #8
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	2125      	movs	r1, #37	@ 0x25
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fd60 	bl	8002854 <lis2dw12_read_reg>
 8002d94:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002d96:	7a3b      	ldrb	r3, [r7, #8]
 8002d98:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d81a      	bhi.n	8002dd8 <lis2dw12_full_scale_get+0x5c>
 8002da2:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <lis2dw12_full_scale_get+0x2c>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc1 	.word	0x08002dc1
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002dd1 	.word	0x08002dd1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
      break;
 8002dbe:	e00f      	b.n	8002de0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
      break;
 8002dc6:	e00b      	b.n	8002de0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
      break;
 8002dce:	e007      	b.n	8002de0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	701a      	strb	r2, [r3, #0]
      break;
 8002dd6:	e003      	b.n	8002de0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
      break;
 8002dde:	bf00      	nop
  }

  return ret;
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop

08002dec <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002df6:	f107 020c 	add.w	r2, r7, #12
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	2128      	movs	r1, #40	@ 0x28
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fd28 	bl	8002854 <lis2dw12_read_reg>
 8002e04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e06:	7b7b      	ldrb	r3, [r7, #13]
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	7b3a      	ldrb	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	b212      	sxth	r2, r2
 8002e2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	3302      	adds	r3, #2
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	7bba      	ldrb	r2, [r7, #14]
 8002e40:	4413      	add	r3, r2
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3302      	adds	r3, #2
 8002e48:	b212      	sxth	r2, r2
 8002e4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e4c:	7c7a      	ldrb	r2, [r7, #17]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	3304      	adds	r3, #4
 8002e52:	b212      	sxth	r2, r2
 8002e54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	7c3a      	ldrb	r2, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	b212      	sxth	r2, r2
 8002e70:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e72:	697b      	ldr	r3, [r7, #20]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002e86:	2301      	movs	r3, #1
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fce1 	bl	8002854 <lis2dw12_read_reg>
 8002e92:	60f8      	str	r0, [r7, #12]

  return ret;
 8002e94:	68fb      	ldr	r3, [r7, #12]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002eaa:	f107 0208 	add.w	r2, r7, #8
 8002eae:	2301      	movs	r3, #1
 8002eb0:	2121      	movs	r1, #33	@ 0x21
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fcce 	bl	8002854 <lis2dw12_read_reg>
 8002eb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10f      	bne.n	8002ee0 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	7a3b      	ldrb	r3, [r7, #8]
 8002eca:	f362 0382 	bfi	r3, r2, #2, #1
 8002ece:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002ed0:	f107 0208 	add.w	r2, r7, #8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	2121      	movs	r1, #33	@ 0x21
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fcd3 	bl	8002884 <lis2dw12_write_reg>
 8002ede:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	2301      	movs	r3, #1
 8002efc:	212e      	movs	r1, #46	@ 0x2e
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fca8 	bl	8002854 <lis2dw12_read_reg>
 8002f04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	7a3b      	ldrb	r3, [r7, #8]
 8002f16:	f362 1347 	bfi	r3, r2, #5, #3
 8002f1a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002f1c:	f107 0208 	add.w	r2, r7, #8
 8002f20:	2301      	movs	r3, #1
 8002f22:	212e      	movs	r1, #46	@ 0x2e
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff fcad 	bl	8002884 <lis2dw12_write_reg>
 8002f2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e067      	b.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7b1a      	ldrb	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <LIS2MDL_RegisterBusIO+0xf8>)
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <LIS2MDL_RegisterBusIO+0xfc>)
 8002f96:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e036      	b.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4798      	blx	r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e02c      	b.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d028      	beq.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d123      	bne.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10d      	bne.n	8003000 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002fe4:	2334      	movs	r3, #52	@ 0x34
 8002fe6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	461a      	mov	r2, r3
 8002fec:	2162      	movs	r1, #98	@ 0x62
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fb1b 	bl	800362a <LIS2MDL_Write_Reg>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d014      	beq.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e012      	b.n	8003026 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d101      	bne.n	800300c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	e00c      	b.n	8003026 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3320      	adds	r3, #32
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f000 ff6d 	bl	8003ef2 <lis2mdl_i2c_interface_set>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	e000      	b.n	8003026 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	08003681 	.word	0x08003681
 8003034:	08003703 	.word	0x08003703

08003038 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d144      	bne.n	80030d2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003048:	f107 0208 	add.w	r2, r7, #8
 800304c:	2301      	movs	r3, #1
 800304e:	2162      	movs	r1, #98	@ 0x62
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb97 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	e06c      	b.n	800313c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003062:	f107 020c 	add.w	r2, r7, #12
 8003066:	2301      	movs	r3, #1
 8003068:	2160      	movs	r1, #96	@ 0x60
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb8a 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e05f      	b.n	800313c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800307c:	7a3b      	ldrb	r3, [r7, #8]
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003084:	7a3b      	ldrb	r3, [r7, #8]
 8003086:	f36f 0341 	bfc	r3, #1, #1
 800308a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800308c:	7b3b      	ldrb	r3, [r7, #12]
 800308e:	2202      	movs	r2, #2
 8003090:	f362 0301 	bfi	r3, r2, #0, #2
 8003094:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003096:	7b3b      	ldrb	r3, [r7, #12]
 8003098:	f043 030c 	orr.w	r3, r3, #12
 800309c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800309e:	f107 0208 	add.w	r2, r7, #8
 80030a2:	2301      	movs	r3, #1
 80030a4:	2162      	movs	r1, #98	@ 0x62
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fcab 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e041      	b.n	800313c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80030b8:	f107 020c 	add.w	r2, r7, #12
 80030bc:	2301      	movs	r3, #1
 80030be:	2160      	movs	r1, #96	@ 0x60
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fc9e 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d032      	beq.n	8003132 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	e034      	b.n	800313c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3320      	adds	r3, #32
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fe65 	bl	8003da8 <lis2mdl_block_data_update_set>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	e028      	b.n	800313c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3320      	adds	r3, #32
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fdd4 	bl	8003c9e <lis2mdl_operating_mode_set>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e01c      	b.n	800313c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3320      	adds	r3, #32
 8003106:	2103      	movs	r1, #3
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fdee 	bl	8003cea <lis2mdl_data_rate_set>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295
 8003118:	e010      	b.n	800313c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3320      	adds	r3, #32
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fec0 	bl	8003ea6 <lis2mdl_self_test_set>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	e004      	b.n	800313c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8a5 	bl	800329c <LIS2MDL_MAG_Disable>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	e004      	b.n	8003168 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d10b      	bne.n	800319a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003182:	2301      	movs	r3, #1
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	214f      	movs	r1, #79	@ 0x4f
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fafb 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	e00c      	b.n	80031b4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3320      	adds	r3, #32
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fe6f 	bl	8003e84 <lis2mdl_device_id_get>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	e000      	b.n	80031b4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2232      	movs	r2, #50	@ 0x32
 80031ee:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <LIS2MDL_GetCapabilities+0x58>)
 8003204:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	42c80000 	.word	0x42c80000

08003218 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e032      	b.n	8003294 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d11d      	bne.n	8003272 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003236:	f107 020c 	add.w	r2, r7, #12
 800323a:	2301      	movs	r3, #1
 800323c:	2160      	movs	r1, #96	@ 0x60
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 faa0 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	e021      	b.n	8003294 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003250:	7b3b      	ldrb	r3, [r7, #12]
 8003252:	f36f 0301 	bfc	r3, #0, #2
 8003256:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003258:	f107 020c 	add.w	r2, r7, #12
 800325c:	2301      	movs	r3, #1
 800325e:	2160      	movs	r1, #96	@ 0x60
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fbce 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
 8003270:	e010      	b.n	8003294 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fd10 	bl	8003c9e <lis2mdl_operating_mode_set>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e004      	b.n	8003294 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e033      	b.n	800331a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d11e      	bne.n	80032f8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80032ba:	f107 020c 	add.w	r2, r7, #12
 80032be:	2301      	movs	r3, #1
 80032c0:	2160      	movs	r1, #96	@ 0x60
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa5e 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e022      	b.n	800331a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80032d4:	7b3b      	ldrb	r3, [r7, #12]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f362 0301 	bfi	r3, r2, #0, #2
 80032dc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80032de:	f107 020c 	add.w	r2, r7, #12
 80032e2:	2301      	movs	r3, #1
 80032e4:	2160      	movs	r1, #96	@ 0x60
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fb8b 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e010      	b.n	800331a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3320      	adds	r3, #32
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fccd 	bl	8003c9e <lis2mdl_operating_mode_set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e004      	b.n	800331a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003332:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3320      	adds	r3, #32
 8003356:	f107 020b 	add.w	r2, r7, #11
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fceb 	bl	8003d38 <lis2mdl_data_rate_get>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	e023      	b.n	80033b6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d81b      	bhi.n	80033ac <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	0800338d 	.word	0x0800338d
 8003380:	08003395 	.word	0x08003395
 8003384:	0800339d 	.word	0x0800339d
 8003388:	080033a5 	.word	0x080033a5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4a0c      	ldr	r2, [pc, #48]	@ (80033c0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003390:	601a      	str	r2, [r3, #0]
      break;
 8003392:	e00f      	b.n	80033b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003398:	601a      	str	r2, [r3, #0]
      break;
 800339a:	e00b      	b.n	80033b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80033a0:	601a      	str	r2, [r3, #0]
      break;
 80033a2:	e007      	b.n	80033b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80033a8:	601a      	str	r2, [r3, #0]
      break;
 80033aa:	e003      	b.n	80033b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
 80033b0:	60fb      	str	r3, [r7, #12]
      break;
 80033b2:	bf00      	nop
  }

  return ret;
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	41200000 	.word	0x41200000
 80033c4:	41a00000 	.word	0x41a00000
 80033c8:	42480000 	.word	0x42480000
 80033cc:	42c80000 	.word	0x42c80000

080033d0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80033dc:	edd7 7a00 	vldr	s15, [r7]
 80033e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80033e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	d801      	bhi.n	80033f2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80033ee:	2300      	movs	r3, #0
 80033f0:	e016      	b.n	8003420 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80033f2:	edd7 7a00 	vldr	s15, [r7]
 80033f6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d801      	bhi.n	8003408 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003404:	2301      	movs	r3, #1
 8003406:	e00b      	b.n	8003420 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003408:	edd7 7a00 	vldr	s15, [r7]
 800340c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003494 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	d801      	bhi.n	800341e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800341a:	2302      	movs	r3, #2
 800341c:	e000      	b.n	8003420 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800341e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003420:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d121      	bne.n	800346e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800342a:	f107 020c 	add.w	r2, r7, #12
 800342e:	2301      	movs	r3, #1
 8003430:	2160      	movs	r1, #96	@ 0x60
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9a6 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e022      	b.n	800348a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	7b3b      	ldrb	r3, [r7, #12]
 800344e:	f362 0383 	bfi	r3, r2, #2, #2
 8003452:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003454:	f107 020c 	add.w	r2, r7, #12
 8003458:	2301      	movs	r3, #1
 800345a:	2160      	movs	r1, #96	@ 0x60
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fad0 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00f      	beq.n	8003488 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
 800346c:	e00d      	b.n	800348a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3320      	adds	r3, #32
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fc37 	bl	8003cea <lis2mdl_data_rate_set>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e000      	b.n	800348a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	42480000 	.word	0x42480000

08003498 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2232      	movs	r2, #50	@ 0x32
 80034a6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3320      	adds	r3, #32
 80034dc:	f107 0208 	add.w	r2, r7, #8
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fc86 	bl	8003df4 <lis2mdl_magnetic_raw_get>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	e00c      	b.n	800350e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80034f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80034fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003504:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d134      	bne.n	8003598 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800352e:	f107 0218 	add.w	r2, r7, #24
 8003532:	2306      	movs	r3, #6
 8003534:	2168      	movs	r1, #104	@ 0x68
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f924 	bl	8003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e06c      	b.n	8003622 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003548:	7e7b      	ldrb	r3, [r7, #25]
 800354a:	b21b      	sxth	r3, r3
 800354c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800354e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003552:	b29b      	uxth	r3, r3
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	b29b      	uxth	r3, r3
 8003558:	7e3a      	ldrb	r2, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	b21b      	sxth	r3, r3
 8003560:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003562:	7efb      	ldrb	r3, [r7, #27]
 8003564:	b21b      	sxth	r3, r3
 8003566:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003568:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800356c:	b29b      	uxth	r3, r3
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	b29b      	uxth	r3, r3
 8003572:	7eba      	ldrb	r2, [r7, #26]
 8003574:	4413      	add	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	b21b      	sxth	r3, r3
 800357a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800357c:	7f7b      	ldrb	r3, [r7, #29]
 800357e:	b21b      	sxth	r3, r3
 8003580:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003586:	b29b      	uxth	r3, r3
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	b29b      	uxth	r3, r3
 800358c:	7f3a      	ldrb	r2, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	b21b      	sxth	r3, r3
 8003594:	82bb      	strh	r3, [r7, #20]
 8003596:	e00d      	b.n	80035b4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	f107 0210 	add.w	r2, r7, #16
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fc26 	bl	8003df4 <lis2mdl_magnetic_raw_get>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e036      	b.n	8003622 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff feb1 	bl	8003322 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80035c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d8:	ee17 2a90 	vmov	r2, s15
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f8:	ee17 2a90 	vmov	r2, s15
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800360c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003618:	ee17 2a90 	vmov	r2, s15
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
 8003636:	4613      	mov	r3, r2
 8003638:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d10b      	bne.n	800365a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003642:	1cba      	adds	r2, r7, #2
 8003644:	78f9      	ldrb	r1, [r7, #3]
 8003646:	2301      	movs	r3, #1
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9da 	bl	8003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	e00e      	b.n	8003678 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f103 0020 	add.w	r0, r3, #32
 8003660:	1cba      	adds	r2, r7, #2
 8003662:	78f9      	ldrb	r1, [r7, #3]
 8003664:	2301      	movs	r3, #1
 8003666:	f000 fb02 	bl	8003c6e <lis2mdl_write_reg>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	e000      	b.n	8003678 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	72fb      	strb	r3, [r7, #11]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10e      	bne.n	80036be <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	695c      	ldr	r4, [r3, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	7b1b      	ldrb	r3, [r3, #12]
 80036a8:	4618      	mov	r0, r3
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	893b      	ldrh	r3, [r7, #8]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	47a0      	blx	r4
 80036ba:	4603      	mov	r3, r0
 80036bc:	e01d      	b.n	80036fa <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d10b      	bne.n	80036de <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	695c      	ldr	r4, [r3, #20]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	7b1b      	ldrb	r3, [r3, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	b299      	uxth	r1, r3
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	47a0      	blx	r4
 80036da:	4603      	mov	r3, r0
 80036dc:	e00d      	b.n	80036fa <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	695c      	ldr	r4, [r3, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	7b1b      	ldrb	r3, [r3, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	7afb      	ldrb	r3, [r7, #11]
 80036ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4619      	mov	r1, r3
 80036f2:	893b      	ldrh	r3, [r7, #8]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	47a0      	blx	r4
 80036f8:	4603      	mov	r3, r0
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}

08003702 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003702:	b590      	push	{r4, r7, lr}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	461a      	mov	r2, r3
 800370e:	460b      	mov	r3, r1
 8003710:	72fb      	strb	r3, [r7, #11]
 8003712:	4613      	mov	r3, r2
 8003714:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10e      	bne.n	8003740 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	691c      	ldr	r4, [r3, #16]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	7b1b      	ldrb	r3, [r3, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	47a0      	blx	r4
 800373c:	4603      	mov	r3, r0
 800373e:	e01d      	b.n	800377c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d10b      	bne.n	8003760 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	691c      	ldr	r4, [r3, #16]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	7b1b      	ldrb	r3, [r3, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	7afb      	ldrb	r3, [r7, #11]
 8003754:	b299      	uxth	r1, r3
 8003756:	893b      	ldrh	r3, [r7, #8]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	47a0      	blx	r4
 800375c:	4603      	mov	r3, r0
 800375e:	e00d      	b.n	800377c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	691c      	ldr	r4, [r3, #16]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	7b1b      	ldrb	r3, [r3, #12]
 8003768:	4618      	mov	r0, r3
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4619      	mov	r1, r3
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	47a0      	blx	r4
 800377a:	4603      	mov	r3, r0
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}

08003784 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	461a      	mov	r2, r3
 8003790:	460b      	mov	r3, r1
 8003792:	72fb      	strb	r3, [r7, #11]
 8003794:	4613      	mov	r3, r2
 8003796:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800379e:	2340      	movs	r3, #64	@ 0x40
 80037a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80037aa:	233d      	movs	r3, #61	@ 0x3d
 80037ac:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80037ae:	2315      	movs	r3, #21
 80037b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80037b4:	2316      	movs	r3, #22
 80037b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80037ba:	2317      	movs	r3, #23
 80037bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80037c0:	2314      	movs	r3, #20
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80037c6:	2344      	movs	r3, #68	@ 0x44
 80037c8:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80037ca:	2302      	movs	r3, #2
 80037cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80037d0:	2339      	movs	r3, #57	@ 0x39
 80037d2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80037dc:	2329      	movs	r3, #41	@ 0x29
 80037de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80037e2:	231e      	movs	r3, #30
 80037e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80037ee:	893b      	ldrh	r3, [r7, #8]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003800:	2340      	movs	r3, #64	@ 0x40
 8003802:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f103 0020 	add.w	r0, r3, #32
 800380c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003810:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003814:	2301      	movs	r3, #1
 8003816:	f000 fa2a 	bl	8003c6e <lis2mdl_write_reg>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e0e9      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f103 0020 	add.w	r0, r3, #32
 800382c:	f107 021f 	add.w	r2, r7, #31
 8003830:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003834:	2301      	movs	r3, #1
 8003836:	f000 fa1a 	bl	8003c6e <lis2mdl_write_reg>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e0d9      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f103 0020 	add.w	r0, r3, #32
 800384c:	f107 020b 	add.w	r2, r7, #11
 8003850:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003854:	2301      	movs	r3, #1
 8003856:	f000 fa0a 	bl	8003c6e <lis2mdl_write_reg>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e0c9      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f103 0020 	add.w	r0, r3, #32
 800386c:	f107 021d 	add.w	r2, r7, #29
 8003870:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003874:	2301      	movs	r3, #1
 8003876:	f000 f9fa 	bl	8003c6e <lis2mdl_write_reg>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e0b9      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f103 0020 	add.w	r0, r3, #32
 800388c:	f107 021e 	add.w	r2, r7, #30
 8003890:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003894:	2301      	movs	r3, #1
 8003896:	f000 f9ea 	bl	8003c6e <lis2mdl_write_reg>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	e0a9      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f103 0020 	add.w	r0, r3, #32
 80038ac:	f107 0220 	add.w	r2, r7, #32
 80038b0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80038b4:	2301      	movs	r3, #1
 80038b6:	f000 f9da 	bl	8003c6e <lis2mdl_write_reg>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e099      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f103 0020 	add.w	r0, r3, #32
 80038cc:	f107 021c 	add.w	r2, r7, #28
 80038d0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80038d4:	2301      	movs	r3, #1
 80038d6:	f000 f9b2 	bl	8003c3e <lis2mdl_read_reg>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	e089      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80038e6:	7f3b      	ldrb	r3, [r7, #28]
 80038e8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d102      	bne.n	80038f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80038f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80038f4:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f103 0020 	add.w	r0, r3, #32
 80038fc:	f107 021c 	add.w	r2, r7, #28
 8003900:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003904:	2301      	movs	r3, #1
 8003906:	f000 f9b2 	bl	8003c6e <lis2mdl_write_reg>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	e071      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f103 0020 	add.w	r0, r3, #32
 800391c:	f107 0214 	add.w	r2, r7, #20
 8003920:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003924:	2306      	movs	r3, #6
 8003926:	f000 f98a 	bl	8003c3e <lis2mdl_read_reg>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	e061      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f103 0020 	add.w	r0, r3, #32
 800393c:	f107 021b 	add.w	r2, r7, #27
 8003940:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003944:	2301      	movs	r3, #1
 8003946:	f000 f97a 	bl	8003c3e <lis2mdl_read_reg>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e051      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003956:	7efa      	ldrb	r2, [r7, #27]
 8003958:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800395c:	4013      	ands	r3, r2
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003964:	429a      	cmp	r2, r3
 8003966:	d1e6      	bne.n	8003936 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f103 0020 	add.w	r0, r3, #32
 800396e:	f107 021b 	add.w	r2, r7, #27
 8003972:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8003976:	2301      	movs	r3, #1
 8003978:	f000 f961 	bl	8003c3e <lis2mdl_read_reg>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e038      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003988:	7efa      	ldrb	r2, [r7, #27]
 800398a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800398e:	4013      	ands	r3, r2
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003996:	429a      	cmp	r2, r3
 8003998:	d1e6      	bne.n	8003968 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f103 0020 	add.w	r0, r3, #32
 80039a0:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80039a4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80039a8:	2301      	movs	r3, #1
 80039aa:	f000 f960 	bl	8003c6e <lis2mdl_write_reg>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	e01f      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f103 0020 	add.w	r0, r3, #32
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	f000 f939 	bl	8003c3e <lis2mdl_read_reg>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e010      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f103 0020 	add.w	r0, r3, #32
 80039de:	f107 0220 	add.w	r2, r7, #32
 80039e2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80039e6:	2301      	movs	r3, #1
 80039e8:	f000 f941 	bl	8003c6e <lis2mdl_write_reg>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	e000      	b.n	80039fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3730      	adds	r7, #48	@ 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08c      	sub	sp, #48	@ 0x30
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	460b      	mov	r3, r1
 8003a10:	72fb      	strb	r3, [r7, #11]
 8003a12:	4613      	mov	r3, r2
 8003a14:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003a1c:	2340      	movs	r3, #64	@ 0x40
 8003a1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003a28:	233c      	movs	r3, #60	@ 0x3c
 8003a2a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003a2c:	2315      	movs	r3, #21
 8003a2e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003a32:	2316      	movs	r3, #22
 8003a34:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003a38:	2317      	movs	r3, #23
 8003a3a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003a42:	2314      	movs	r3, #20
 8003a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003a48:	2344      	movs	r3, #68	@ 0x44
 8003a4a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003a4c:	2339      	movs	r3, #57	@ 0x39
 8003a4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003a58:	2329      	movs	r3, #41	@ 0x29
 8003a5a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003a5e:	231e      	movs	r3, #30
 8003a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003a76:	2340      	movs	r3, #64	@ 0x40
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003a7c:	230e      	movs	r3, #14
 8003a7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f103 0020 	add.w	r0, r3, #32
 8003a88:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003a8c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003a90:	2301      	movs	r3, #1
 8003a92:	f000 f8ec 	bl	8003c6e <lis2mdl_write_reg>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e0c9      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f103 0020 	add.w	r0, r3, #32
 8003aa8:	f107 021f 	add.w	r2, r7, #31
 8003aac:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f000 f8dc 	bl	8003c6e <lis2mdl_write_reg>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	e0b9      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f103 0020 	add.w	r0, r3, #32
 8003ac8:	f107 020b 	add.w	r2, r7, #11
 8003acc:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f000 f8cc 	bl	8003c6e <lis2mdl_write_reg>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e0a9      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f103 0020 	add.w	r0, r3, #32
 8003ae8:	f107 021e 	add.w	r2, r7, #30
 8003aec:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003af0:	2301      	movs	r3, #1
 8003af2:	f000 f8bc 	bl	8003c6e <lis2mdl_write_reg>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	e099      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f103 0020 	add.w	r0, r3, #32
 8003b08:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	f000 f8ad 	bl	8003c6e <lis2mdl_write_reg>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e08a      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f103 0020 	add.w	r0, r3, #32
 8003b26:	f107 021d 	add.w	r2, r7, #29
 8003b2a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f000 f89d 	bl	8003c6e <lis2mdl_write_reg>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e07a      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f103 0020 	add.w	r0, r3, #32
 8003b46:	f107 0220 	add.w	r2, r7, #32
 8003b4a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f000 f88d 	bl	8003c6e <lis2mdl_write_reg>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e06a      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f103 0020 	add.w	r0, r3, #32
 8003b66:	f107 021c 	add.w	r2, r7, #28
 8003b6a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f000 f865 	bl	8003c3e <lis2mdl_read_reg>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	e05a      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003b80:	7f3b      	ldrb	r3, [r7, #28]
 8003b82:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d102      	bne.n	8003b90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b8e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f103 0020 	add.w	r0, r3, #32
 8003b96:	f107 021c 	add.w	r2, r7, #28
 8003b9a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 f865 	bl	8003c6e <lis2mdl_write_reg>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e042      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f103 0020 	add.w	r0, r3, #32
 8003bb6:	f107 0214 	add.w	r2, r7, #20
 8003bba:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	f000 f83d 	bl	8003c3e <lis2mdl_read_reg>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e032      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f103 0020 	add.w	r0, r3, #32
 8003bd6:	f107 021b 	add.w	r2, r7, #27
 8003bda:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003bde:	2301      	movs	r3, #1
 8003be0:	f000 f82d 	bl	8003c3e <lis2mdl_read_reg>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e022      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003bf0:	7efa      	ldrb	r2, [r7, #27]
 8003bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d1e6      	bne.n	8003bd0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f103 0020 	add.w	r0, r3, #32
 8003c08:	f107 021b 	add.w	r2, r7, #27
 8003c0c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003c10:	2301      	movs	r3, #1
 8003c12:	f000 f814 	bl	8003c3e <lis2mdl_read_reg>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c20:	e009      	b.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003c22:	7efa      	ldrb	r2, [r7, #27]
 8003c24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1e6      	bne.n	8003c02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3730      	adds	r7, #48	@ 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003c3e:	b590      	push	{r4, r7, lr}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	72fb      	strb	r3, [r7, #11]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685c      	ldr	r4, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68d8      	ldr	r0, [r3, #12]
 8003c5a:	893b      	ldrh	r3, [r7, #8]
 8003c5c:	7af9      	ldrb	r1, [r7, #11]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	47a0      	blx	r4
 8003c62:	6178      	str	r0, [r7, #20]

  return ret;
 8003c64:	697b      	ldr	r3, [r7, #20]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}

08003c6e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003c6e:	b590      	push	{r4, r7, lr}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	72fb      	strb	r3, [r7, #11]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681c      	ldr	r4, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68d8      	ldr	r0, [r3, #12]
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	7af9      	ldrb	r1, [r7, #11]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	47a0      	blx	r4
 8003c92:	6178      	str	r0, [r7, #20]

  return ret;
 8003c94:	697b      	ldr	r3, [r7, #20]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}

08003c9e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003caa:	f107 0208 	add.w	r2, r7, #8
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2160      	movs	r1, #96	@ 0x60
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffc3 	bl	8003c3e <lis2mdl_read_reg>
 8003cb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10f      	bne.n	8003ce0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	7a3b      	ldrb	r3, [r7, #8]
 8003cca:	f362 0301 	bfi	r3, r2, #0, #2
 8003cce:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003cd0:	f107 0208 	add.w	r2, r7, #8
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	2160      	movs	r1, #96	@ 0x60
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ffc8 	bl	8003c6e <lis2mdl_write_reg>
 8003cde:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003cf6:	f107 0208 	add.w	r2, r7, #8
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	2160      	movs	r1, #96	@ 0x60
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff9d 	bl	8003c3e <lis2mdl_read_reg>
 8003d04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	7a3b      	ldrb	r3, [r7, #8]
 8003d16:	f362 0383 	bfi	r3, r2, #2, #2
 8003d1a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003d1c:	f107 0208 	add.w	r2, r7, #8
 8003d20:	2301      	movs	r3, #1
 8003d22:	2160      	movs	r1, #96	@ 0x60
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ffa2 	bl	8003c6e <lis2mdl_write_reg>
 8003d2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003d42:	f107 0208 	add.w	r2, r7, #8
 8003d46:	2301      	movs	r3, #1
 8003d48:	2160      	movs	r1, #96	@ 0x60
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff77 	bl	8003c3e <lis2mdl_read_reg>
 8003d50:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003d52:	7a3b      	ldrb	r3, [r7, #8]
 8003d54:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d81a      	bhi.n	8003d94 <lis2mdl_data_rate_get+0x5c>
 8003d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <lis2mdl_data_rate_get+0x2c>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d7d 	.word	0x08003d7d
 8003d6c:	08003d85 	.word	0x08003d85
 8003d70:	08003d8d 	.word	0x08003d8d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
      break;
 8003d7a:	e00f      	b.n	8003d9c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
      break;
 8003d82:	e00b      	b.n	8003d9c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]
      break;
 8003d8a:	e007      	b.n	8003d9c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	701a      	strb	r2, [r3, #0]
      break;
 8003d92:	e003      	b.n	8003d9c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
      break;
 8003d9a:	bf00      	nop
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003db4:	f107 0208 	add.w	r2, r7, #8
 8003db8:	2301      	movs	r3, #1
 8003dba:	2162      	movs	r1, #98	@ 0x62
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff3e 	bl	8003c3e <lis2mdl_read_reg>
 8003dc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	7a3b      	ldrb	r3, [r7, #8]
 8003dd4:	f362 1304 	bfi	r3, r2, #4, #1
 8003dd8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003dda:	f107 0208 	add.w	r2, r7, #8
 8003dde:	2301      	movs	r3, #1
 8003de0:	2162      	movs	r1, #98	@ 0x62
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ff43 	bl	8003c6e <lis2mdl_write_reg>
 8003de8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003dfe:	f107 020c 	add.w	r2, r7, #12
 8003e02:	2306      	movs	r3, #6
 8003e04:	2168      	movs	r1, #104	@ 0x68
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff19 	bl	8003c3e <lis2mdl_read_reg>
 8003e0c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003e0e:	7b7b      	ldrb	r3, [r7, #13]
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	7b3a      	ldrb	r2, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	3302      	adds	r3, #2
 8003e34:	b212      	sxth	r2, r2
 8003e36:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	7bba      	ldrb	r2, [r7, #14]
 8003e48:	4413      	add	r3, r2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	3302      	adds	r3, #2
 8003e50:	b212      	sxth	r2, r2
 8003e52:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003e54:	7c7a      	ldrb	r2, [r7, #17]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	b212      	sxth	r2, r2
 8003e5c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	3304      	adds	r3, #4
 8003e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	7c3a      	ldrb	r2, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	b212      	sxth	r2, r2
 8003e78:	801a      	strh	r2, [r3, #0]

  return ret;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003e8e:	2301      	movs	r3, #1
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	214f      	movs	r1, #79	@ 0x4f
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fed2 	bl	8003c3e <lis2mdl_read_reg>
 8003e9a:	60f8      	str	r0, [r7, #12]

  return ret;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003eb2:	f107 0208 	add.w	r2, r7, #8
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2162      	movs	r1, #98	@ 0x62
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff febf 	bl	8003c3e <lis2mdl_read_reg>
 8003ec0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	7a3b      	ldrb	r3, [r7, #8]
 8003ed2:	f362 0341 	bfi	r3, r2, #1, #1
 8003ed6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003ed8:	f107 0208 	add.w	r2, r7, #8
 8003edc:	2301      	movs	r3, #1
 8003ede:	2162      	movs	r1, #98	@ 0x62
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fec4 	bl	8003c6e <lis2mdl_write_reg>
 8003ee6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003efe:	f107 0208 	add.w	r2, r7, #8
 8003f02:	2301      	movs	r3, #1
 8003f04:	2162      	movs	r1, #98	@ 0x62
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fe99 	bl	8003c3e <lis2mdl_read_reg>
 8003f0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	7a3b      	ldrb	r3, [r7, #8]
 8003f1e:	f362 1345 	bfi	r3, r2, #5, #1
 8003f22:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003f24:	f107 0208 	add.w	r2, r7, #8
 8003f28:	2301      	movs	r3, #1
 8003f2a:	2162      	movs	r1, #98	@ 0x62
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fe9e 	bl	8003c6e <lis2mdl_write_reg>
 8003f32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e051      	b.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	7b1a      	ldrb	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1d      	ldr	r2, [pc, #116]	@ (800400c <LSM6DSO_RegisterBusIO+0xcc>)
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <LSM6DSO_RegisterBusIO+0xd0>)
 8003f9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e020      	b.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4798      	blx	r3
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e016      	b.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d112      	bne.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	461a      	mov	r2, r3
 8003fec:	2112      	movs	r1, #18
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 ff6a 	bl	8004ec8 <LSM6DSO_Write_Reg>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004000:	68fb      	ldr	r3, [r7, #12]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	080053b9 	.word	0x080053b9
 8004010:	080053ef 	.word	0x080053ef

08004014 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d00b      	beq.n	800403c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3320      	adds	r3, #32
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	4618      	mov	r0, r3
 800402c:	f001 feb8 	bl	8005da0 <lsm6dso_i3c_disable_set>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e06a      	b.n	8004112 <LSM6DSO_Init+0xfe>
    }
  }

  /* Set main memory bank */
  if (LSM6DSO_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 800403c:	2100      	movs	r1, #0
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 ff5d 	bl	8004efe <LSM6DSO_Set_Mem_Bank>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <LSM6DSO_Init+0x3c>
  {
    return LSM6DSO_ERROR;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	e060      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3320      	adds	r3, #32
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fe7c 	bl	8005d54 <lsm6dso_auto_increment_set>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <LSM6DSO_Init+0x54>
  {
    return LSM6DSO_ERROR;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e054      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3320      	adds	r3, #32
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fd8c 	bl	8005b8c <lsm6dso_block_data_update_set>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <LSM6DSO_Init+0x6c>
  {
    return LSM6DSO_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e048      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fed2 	bl	8005e30 <lsm6dso_fifo_mode_set>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <LSM6DSO_Init+0x84>
  {
    return LSM6DSO_ERROR;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	e03c      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3320      	adds	r3, #32
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fa4a 	bl	8005540 <lsm6dso_xl_data_rate_set>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <LSM6DSO_Init+0xa4>
  {
    return LSM6DSO_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e02c      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3320      	adds	r3, #32
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f9e0 	bl	8005484 <lsm6dso_xl_full_scale_set>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <LSM6DSO_Init+0xbc>
  {
    return LSM6DSO_ERROR;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	e020      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2204      	movs	r2, #4
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3320      	adds	r3, #32
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fbf8 	bl	80058d4 <lsm6dso_gy_data_rate_set>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <LSM6DSO_Init+0xdc>
  {
    return LSM6DSO_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e010      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3320      	adds	r3, #32
 80040f4:	2106      	movs	r1, #6
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fb84 	bl	8005804 <lsm6dso_gy_full_scale_set>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <LSM6DSO_Init+0xf4>
  {
    return LSM6DSO_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	e004      	b.n	8004112 <LSM6DSO_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f888 	bl	8004238 <LSM6DSO_ACC_Disable>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	e015      	b.n	8004160 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fc2e 	bl	8004996 <LSM6DSO_GYRO_Disable>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295
 8004144:	e00c      	b.n	8004160 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3320      	adds	r3, #32
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fdda 	bl	8005d32 <lsm6dso_device_id_get>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
 8004188:	e000      	b.n	800418c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2201      	movs	r2, #1
 80041a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80041bc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4a07      	ldr	r2, [pc, #28]	@ (80041ec <LSM6DSO_GetCapabilities+0x58>)
 80041ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4a06      	ldr	r2, [pc, #24]	@ (80041ec <LSM6DSO_GetCapabilities+0x58>)
 80041d4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	45d02000 	.word	0x45d02000

080041f0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e014      	b.n	8004230 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 0220 	add.w	r2, r3, #32
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f001 f993 	bl	8005540 <lsm6dso_xl_data_rate_set>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	e004      	b.n	8004230 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e01f      	b.n	800428e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f103 0220 	add.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3333      	adds	r3, #51	@ 0x33
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f001 fa6a 	bl	8005734 <lsm6dso_xl_data_rate_get>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	e010      	b.n	800428e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3320      	adds	r3, #32
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f964 	bl	8005540 <lsm6dso_xl_data_rate_set>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e004      	b.n	800428e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3320      	adds	r3, #32
 80042aa:	f107 020b 	add.w	r2, r7, #11
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 f90d 	bl	80054d0 <lsm6dso_xl_full_scale_get>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295
 80042c0:	e023      	b.n	800430a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d81b      	bhi.n	8004300 <LSM6DSO_ACC_GetSensitivity+0x68>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f1 	.word	0x080042f1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80042e4:	601a      	str	r2, [r3, #0]
      break;
 80042e6:	e00f      	b.n	8004308 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004318 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80042ec:	601a      	str	r2, [r3, #0]
      break;
 80042ee:	e00b      	b.n	8004308 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <LSM6DSO_ACC_GetSensitivity+0x84>)
 80042f4:	601a      	str	r2, [r3, #0]
      break;
 80042f6:	e007      	b.n	8004308 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80042fc:	601a      	str	r2, [r3, #0]
      break;
 80042fe:	e003      	b.n	8004308 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
 8004304:	60fb      	str	r3, [r7, #12]
      break;
 8004306:	bf00      	nop
  }

  return ret;
 8004308:	68fb      	ldr	r3, [r7, #12]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	3d79db23 	.word	0x3d79db23
 8004318:	3df9db23 	.word	0x3df9db23
 800431c:	3e79db23 	.word	0x3e79db23
 8004320:	3ef9db23 	.word	0x3ef9db23

08004324 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3320      	adds	r3, #32
 8004336:	f107 020b 	add.w	r2, r7, #11
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f001 f9f9 	bl	8005734 <lsm6dso_xl_data_rate_get>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	e054      	b.n	80043f8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	2b0b      	cmp	r3, #11
 8004352:	d84c      	bhi.n	80043ee <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004354:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800438d 	.word	0x0800438d
 8004360:	0800439f 	.word	0x0800439f
 8004364:	080043a7 	.word	0x080043a7
 8004368:	080043af 	.word	0x080043af
 800436c:	080043b7 	.word	0x080043b7
 8004370:	080043bf 	.word	0x080043bf
 8004374:	080043c7 	.word	0x080043c7
 8004378:	080043cf 	.word	0x080043cf
 800437c:	080043d7 	.word	0x080043d7
 8004380:	080043df 	.word	0x080043df
 8004384:	080043e7 	.word	0x080043e7
 8004388:	08004397 	.word	0x08004397
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
      break;
 8004394:	e02f      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800439a:	601a      	str	r2, [r3, #0]
      break;
 800439c:	e02b      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	@ (8004404 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80043a2:	601a      	str	r2, [r3, #0]
      break;
 80043a4:	e027      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	@ (8004408 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80043aa:	601a      	str	r2, [r3, #0]
      break;
 80043ac:	e023      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4a16      	ldr	r2, [pc, #88]	@ (800440c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80043b2:	601a      	str	r2, [r3, #0]
      break;
 80043b4:	e01f      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80043ba:	601a      	str	r2, [r3, #0]
      break;
 80043bc:	e01b      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80043c2:	601a      	str	r2, [r3, #0]
      break;
 80043c4:	e017      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	4a13      	ldr	r2, [pc, #76]	@ (8004418 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80043ca:	601a      	str	r2, [r3, #0]
      break;
 80043cc:	e013      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4a12      	ldr	r2, [pc, #72]	@ (800441c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80043d2:	601a      	str	r2, [r3, #0]
      break;
 80043d4:	e00f      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4a11      	ldr	r2, [pc, #68]	@ (8004420 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80043da:	601a      	str	r2, [r3, #0]
      break;
 80043dc:	e00b      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80043e2:	601a      	str	r2, [r3, #0]
      break;
 80043e4:	e007      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004428 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80043ea:	601a      	str	r2, [r3, #0]
      break;
 80043ec:	e003      	b.n	80043f6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	60fb      	str	r3, [r7, #12]
      break;
 80043f4:	bf00      	nop
  }

  return ret;
 80043f6:	68fb      	ldr	r3, [r7, #12]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	3fcccccd 	.word	0x3fcccccd
 8004404:	41480000 	.word	0x41480000
 8004408:	41d00000 	.word	0x41d00000
 800440c:	42500000 	.word	0x42500000
 8004410:	42d00000 	.word	0x42d00000
 8004414:	43500000 	.word	0x43500000
 8004418:	43d08000 	.word	0x43d08000
 800441c:	44504000 	.word	0x44504000
 8004420:	44d06000 	.word	0x44d06000
 8004424:	45505000 	.word	0x45505000
 8004428:	45d05800 	.word	0x45d05800

0800442c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004438:	2100      	movs	r1, #0
 800443a:	ed97 0a00 	vldr	s0, [r7]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f806 	bl	8004450 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004444:	4603      	mov	r3, r0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	@ 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	ed87 0a02 	vstr	s0, [r7, #8]
 800445c:	460b      	mov	r3, r1
 800445e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b02      	cmp	r3, #2
 800446c:	f000 80ea 	beq.w	8004644 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004470:	2b02      	cmp	r3, #2
 8004472:	f300 8163 	bgt.w	800473c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800447a:	2b01      	cmp	r3, #1
 800447c:	d074      	beq.n	8004568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800447e:	e15d      	b.n	800473c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f103 0020 	add.w	r0, r3, #32
 8004486:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800448a:	2301      	movs	r3, #1
 800448c:	2114      	movs	r1, #20
 800448e:	f000 ffc9 	bl	8005424 <lsm6dso_read_reg>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	e16c      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800449e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d025      	beq.n	80044f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10b      	bne.n	80044ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3320      	adds	r3, #32
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f83f 	bl	8005540 <lsm6dso_xl_data_rate_set>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e154      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80044ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044d2:	f36f 13c7 	bfc	r3, #7, #1
 80044d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f103 0020 	add.w	r0, r3, #32
 80044e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80044e4:	2301      	movs	r3, #1
 80044e6:	2114      	movs	r1, #20
 80044e8:	f000 ffb4 	bl	8005454 <lsm6dso_write_reg>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e13f      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f103 0020 	add.w	r0, r3, #32
 80044fe:	f107 0220 	add.w	r2, r7, #32
 8004502:	2301      	movs	r3, #1
 8004504:	2115      	movs	r1, #21
 8004506:	f000 ff8d 	bl	8005424 <lsm6dso_read_reg>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	e130      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004516:	f897 3020 	ldrb.w	r3, [r7, #32]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d014      	beq.n	800454e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004528:	f36f 1304 	bfc	r3, #4, #1
 800452c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f103 0020 	add.w	r0, r3, #32
 8004536:	f107 0220 	add.w	r2, r7, #32
 800453a:	2301      	movs	r3, #1
 800453c:	2115      	movs	r1, #21
 800453e:	f000 ff89 	bl	8005454 <lsm6dso_write_reg>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e114      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800454e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004552:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	d400      	bmi.n	8004562 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004560:	e0f0      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004562:	4b87      	ldr	r3, [pc, #540]	@ (8004780 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004566:	e0ed      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f103 0020 	add.w	r0, r3, #32
 800456e:	f107 021c 	add.w	r2, r7, #28
 8004572:	2301      	movs	r3, #1
 8004574:	2114      	movs	r1, #20
 8004576:	f000 ff55 	bl	8005424 <lsm6dso_read_reg>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
 8004584:	e0f8      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004586:	7f3b      	ldrb	r3, [r7, #28]
 8004588:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d023      	beq.n	80045da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10b      	bne.n	80045b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3320      	adds	r3, #32
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ffcc 	bl	8005540 <lsm6dso_xl_data_rate_set>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e0e1      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80045b4:	7f3b      	ldrb	r3, [r7, #28]
 80045b6:	f36f 13c7 	bfc	r3, #7, #1
 80045ba:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f103 0020 	add.w	r0, r3, #32
 80045c2:	f107 021c 	add.w	r2, r7, #28
 80045c6:	2301      	movs	r3, #1
 80045c8:	2114      	movs	r1, #20
 80045ca:	f000 ff43 	bl	8005454 <lsm6dso_write_reg>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	e0ce      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f103 0020 	add.w	r0, r3, #32
 80045e0:	f107 0218 	add.w	r2, r7, #24
 80045e4:	2301      	movs	r3, #1
 80045e6:	2115      	movs	r1, #21
 80045e8:	f000 ff1c 	bl	8005424 <lsm6dso_read_reg>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e0bf      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80045f8:	7e3b      	ldrb	r3, [r7, #24]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d112      	bne.n	800462a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004604:	7e3b      	ldrb	r3, [r7, #24]
 8004606:	f043 0310 	orr.w	r3, r3, #16
 800460a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f103 0020 	add.w	r0, r3, #32
 8004612:	f107 0218 	add.w	r2, r7, #24
 8004616:	2301      	movs	r3, #1
 8004618:	2115      	movs	r1, #21
 800461a:	f000 ff1b 	bl	8005454 <lsm6dso_write_reg>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004624:	f04f 33ff 	mov.w	r3, #4294967295
 8004628:	e0a6      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800462a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800462e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004784 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	dc00      	bgt.n	800463e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 800463c:	e082      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800463e:	4b52      	ldr	r3, [pc, #328]	@ (8004788 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004642:	e07f      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f103 0020 	add.w	r0, r3, #32
 800464a:	f107 0210 	add.w	r2, r7, #16
 800464e:	2301      	movs	r3, #1
 8004650:	2115      	movs	r1, #21
 8004652:	f000 fee7 	bl	8005424 <lsm6dso_read_reg>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	e08a      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004662:	7c3b      	ldrb	r3, [r7, #16]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d012      	beq.n	8004694 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800466e:	7c3b      	ldrb	r3, [r7, #16]
 8004670:	f36f 1304 	bfc	r3, #4, #1
 8004674:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f103 0020 	add.w	r0, r3, #32
 800467c:	f107 0210 	add.w	r2, r7, #16
 8004680:	2301      	movs	r3, #1
 8004682:	2115      	movs	r1, #21
 8004684:	f000 fee6 	bl	8005454 <lsm6dso_write_reg>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e071      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f979 	bl	8004996 <LSM6DSO_GYRO_Disable>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e063      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f103 0020 	add.w	r0, r3, #32
 80046b6:	f107 0214 	add.w	r2, r7, #20
 80046ba:	2301      	movs	r3, #1
 80046bc:	2114      	movs	r1, #20
 80046be:	f000 feb1 	bl	8005424 <lsm6dso_read_reg>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	e054      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80046ce:	7d3b      	ldrb	r3, [r7, #20]
 80046d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d123      	bne.n	8004722 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10b      	bne.n	80046fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3320      	adds	r3, #32
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ff28 	bl	8005540 <lsm6dso_xl_data_rate_set>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	e03d      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80046fc:	7d3b      	ldrb	r3, [r7, #20]
 80046fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004702:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f103 0020 	add.w	r0, r3, #32
 800470a:	f107 0214 	add.w	r2, r7, #20
 800470e:	2301      	movs	r3, #1
 8004710:	2114      	movs	r1, #20
 8004712:	f000 fe9f 	bl	8005454 <lsm6dso_write_reg>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
 8004720:	e02a      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004722:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004726:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004784 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800472a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	dc00      	bgt.n	8004736 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004734:	e006      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004736:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473a:	e003      	b.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004742:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d102      	bne.n	8004752 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295
 8004750:	e012      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800475c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fbf3 	bl	8004f4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004766:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004768:	e005      	b.n	8004776 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800476a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fc84 	bl	800507c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004774:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004778:	4618      	mov	r0, r3
 800477a:	3730      	adds	r7, #48	@ 0x30
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	41480000 	.word	0x41480000
 8004784:	43500000 	.word	0x43500000
 8004788:	43500000 	.word	0x43500000

0800478c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3320      	adds	r3, #32
 800479e:	f107 020b 	add.w	r2, r7, #11
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fe93 	bl	80054d0 <lsm6dso_xl_full_scale_get>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295
 80047b4:	e023      	b.n	80047fe <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80047b6:	7afb      	ldrb	r3, [r7, #11]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d81b      	bhi.n	80047f4 <LSM6DSO_ACC_GetFullScale+0x68>
 80047bc:	a201      	add	r2, pc, #4	@ (adr r2, 80047c4 <LSM6DSO_ACC_GetFullScale+0x38>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047e5 	.word	0x080047e5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2202      	movs	r2, #2
 80047d8:	601a      	str	r2, [r3, #0]
      break;
 80047da:	e00f      	b.n	80047fc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	601a      	str	r2, [r3, #0]
      break;
 80047e2:	e00b      	b.n	80047fc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2208      	movs	r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
      break;
 80047ea:	e007      	b.n	80047fc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	601a      	str	r2, [r3, #0]
      break;
 80047f2:	e003      	b.n	80047fc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
 80047f8:	60fb      	str	r3, [r7, #12]
      break;
 80047fa:	bf00      	nop
  }

  return ret;
 80047fc:	68fb      	ldr	r3, [r7, #12]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b02      	cmp	r3, #2
 8004816:	dd0b      	ble.n	8004830 <LSM6DSO_ACC_SetFullScale+0x28>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	dd06      	ble.n	800482c <LSM6DSO_ACC_SetFullScale+0x24>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	dc01      	bgt.n	8004828 <LSM6DSO_ACC_SetFullScale+0x20>
 8004824:	2303      	movs	r3, #3
 8004826:	e004      	b.n	8004832 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004828:	2301      	movs	r3, #1
 800482a:	e002      	b.n	8004832 <LSM6DSO_ACC_SetFullScale+0x2a>
 800482c:	2302      	movs	r3, #2
 800482e:	e000      	b.n	8004832 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004830:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004832:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3320      	adds	r3, #32
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fe21 	bl	8005484 <lsm6dso_xl_full_scale_set>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	e000      	b.n	8004850 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3320      	adds	r3, #32
 8004866:	f107 0208 	add.w	r2, r7, #8
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f9fb 	bl	8005c68 <lsm6dso_acceleration_raw_get>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	e00c      	b.n	8004898 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800487e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004886:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800488e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3320      	adds	r3, #32
 80048b4:	f107 0210 	add.w	r2, r7, #16
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f9d4 	bl	8005c68 <lsm6dso_acceleration_raw_get>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	e03c      	b.n	8004946 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80048cc:	f107 030c 	add.w	r3, r7, #12
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fce0 	bl	8004298 <LSM6DSO_ACC_GetSensitivity>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e030      	b.n	8004946 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80048e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048fc:	ee17 2a90 	vmov	r2, s15
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004910:	edd7 7a03 	vldr	s15, [r7, #12]
 8004914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491c:	ee17 2a90 	vmov	r2, s15
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004924:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004930:	edd7 7a03 	vldr	s15, [r7, #12]
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493c:	ee17 2a90 	vmov	r2, s15
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e014      	b.n	800498e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 0220 	add.w	r2, r3, #32
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 ffae 	bl	80058d4 <lsm6dso_gy_data_rate_set>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	e004      	b.n	800498e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e01f      	b.n	80049ec <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f103 0220 	add.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3334      	adds	r3, #52	@ 0x34
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f001 f885 	bl	8005ac8 <lsm6dso_gy_data_rate_get>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e010      	b.n	80049ec <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3320      	adds	r3, #32
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 ff7f 	bl	80058d4 <lsm6dso_gy_data_rate_set>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	e004      	b.n	80049ec <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3320      	adds	r3, #32
 8004a06:	f107 020b 	add.w	r2, r7, #11
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ff1f 	bl	8005850 <lsm6dso_gy_full_scale_get>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	e02d      	b.n	8004a7a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d825      	bhi.n	8004a70 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a69 	.word	0x08004a69
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a84 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004a4c:	601a      	str	r2, [r3, #0]
      break;
 8004a4e:	e013      	b.n	8004a78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4a0d      	ldr	r2, [pc, #52]	@ (8004a88 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004a54:	601a      	str	r2, [r3, #0]
      break;
 8004a56:	e00f      	b.n	8004a78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a8c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004a5c:	601a      	str	r2, [r3, #0]
      break;
 8004a5e:	e00b      	b.n	8004a78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004a64:	601a      	str	r2, [r3, #0]
      break;
 8004a66:	e007      	b.n	8004a78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a94 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004a6c:	601a      	str	r2, [r3, #0]
      break;
 8004a6e:	e003      	b.n	8004a78 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	60fb      	str	r3, [r7, #12]
      break;
 8004a76:	bf00      	nop
  }

  return ret;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	408c0000 	.word	0x408c0000
 8004a88:	410c0000 	.word	0x410c0000
 8004a8c:	418c0000 	.word	0x418c0000
 8004a90:	420c0000 	.word	0x420c0000
 8004a94:	428c0000 	.word	0x428c0000

08004a98 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3320      	adds	r3, #32
 8004aaa:	f107 020b 	add.w	r2, r7, #11
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f809 	bl	8005ac8 <lsm6dso_gy_data_rate_get>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	e04e      	b.n	8004b60 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	2b0a      	cmp	r3, #10
 8004ac6:	d846      	bhi.n	8004b56 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b07 	.word	0x08004b07
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b17 	.word	0x08004b17
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b27 	.word	0x08004b27
 8004ae8:	08004b2f 	.word	0x08004b2f
 8004aec:	08004b37 	.word	0x08004b37
 8004af0:	08004b3f 	.word	0x08004b3f
 8004af4:	08004b47 	.word	0x08004b47
 8004af8:	08004b4f 	.word	0x08004b4f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
      break;
 8004b04:	e02b      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004b0a:	601a      	str	r2, [r3, #0]
      break;
 8004b0c:	e027      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004b12:	601a      	str	r2, [r3, #0]
      break;
 8004b14:	e023      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004b1a:	601a      	str	r2, [r3, #0]
      break;
 8004b1c:	e01f      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004b22:	601a      	str	r2, [r3, #0]
      break;
 8004b24:	e01b      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004b2a:	601a      	str	r2, [r3, #0]
      break;
 8004b2c:	e017      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004b32:	601a      	str	r2, [r3, #0]
      break;
 8004b34:	e013      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004b3a:	601a      	str	r2, [r3, #0]
      break;
 8004b3c:	e00f      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4a10      	ldr	r2, [pc, #64]	@ (8004b84 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004b42:	601a      	str	r2, [r3, #0]
      break;
 8004b44:	e00b      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	4a0f      	ldr	r2, [pc, #60]	@ (8004b88 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004b4a:	601a      	str	r2, [r3, #0]
      break;
 8004b4c:	e007      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004b52:	601a      	str	r2, [r3, #0]
      break;
 8004b54:	e003      	b.n	8004b5e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	60fb      	str	r3, [r7, #12]
      break;
 8004b5c:	bf00      	nop
  }

  return ret;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	41480000 	.word	0x41480000
 8004b6c:	41d00000 	.word	0x41d00000
 8004b70:	42500000 	.word	0x42500000
 8004b74:	42d00000 	.word	0x42d00000
 8004b78:	43500000 	.word	0x43500000
 8004b7c:	43d08000 	.word	0x43d08000
 8004b80:	44504000 	.word	0x44504000
 8004b84:	44d06000 	.word	0x44d06000
 8004b88:	45505000 	.word	0x45505000
 8004b8c:	45d05800 	.word	0x45d05800

08004b90 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	ed97 0a00 	vldr	s0, [r7]
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f806 	bl	8004bb4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004ba8:	4603      	mov	r3, r0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d028      	beq.n	8004c28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004bd6:	e05c      	b.n	8004c92 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f103 0020 	add.w	r0, r3, #32
 8004bde:	f107 0214 	add.w	r2, r7, #20
 8004be2:	2301      	movs	r3, #1
 8004be4:	2116      	movs	r1, #22
 8004be6:	f000 fc1d 	bl	8005424 <lsm6dso_read_reg>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	e06c      	b.n	8004cd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004bf6:	7d3b      	ldrb	r3, [r7, #20]
 8004bf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04b      	beq.n	8004c9a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004c02:	7d3b      	ldrb	r3, [r7, #20]
 8004c04:	f36f 13c7 	bfc	r3, #7, #1
 8004c08:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f103 0020 	add.w	r0, r3, #32
 8004c10:	f107 0214 	add.w	r2, r7, #20
 8004c14:	2301      	movs	r3, #1
 8004c16:	2116      	movs	r1, #22
 8004c18:	f000 fc1c 	bl	8005454 <lsm6dso_write_reg>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03b      	beq.n	8004c9a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	e053      	b.n	8004cd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f103 0020 	add.w	r0, r3, #32
 8004c2e:	f107 0210 	add.w	r2, r7, #16
 8004c32:	2301      	movs	r3, #1
 8004c34:	2116      	movs	r1, #22
 8004c36:	f000 fbf5 	bl	8005424 <lsm6dso_read_reg>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295
 8004c44:	e044      	b.n	8004cd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004c46:	7c3b      	ldrb	r3, [r7, #16]
 8004c48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d112      	bne.n	8004c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004c52:	7c3b      	ldrb	r3, [r7, #16]
 8004c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c58:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f103 0020 	add.w	r0, r3, #32
 8004c60:	f107 0210 	add.w	r2, r7, #16
 8004c64:	2301      	movs	r3, #1
 8004c66:	2116      	movs	r1, #22
 8004c68:	f000 fbf4 	bl	8005454 <lsm6dso_write_reg>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	e02b      	b.n	8004cd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c7c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004cd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	dc00      	bgt.n	8004c8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004c8a:	e007      	b.n	8004c9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	e004      	b.n	8004c9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	61fb      	str	r3, [r7, #28]
      break;
 8004c98:	e000      	b.n	8004c9c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004c9a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d102      	bne.n	8004caa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	e012      	b.n	8004cd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004cb4:	ed97 0a06 	vldr	s0, [r7, #24]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fa6f 	bl	800519c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004cbe:	61f8      	str	r0, [r7, #28]
 8004cc0:	e005      	b.n	8004cce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004cc2:	ed97 0a06 	vldr	s0, [r7, #24]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 faf4 	bl	80052b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004ccc:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004cce:	69fb      	ldr	r3, [r7, #28]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	43500000 	.word	0x43500000
 8004cdc:	43500000 	.word	0x43500000

08004ce0 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3320      	adds	r3, #32
 8004cf2:	f107 020b 	add.w	r2, r7, #11
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fda9 	bl	8005850 <lsm6dso_gy_full_scale_get>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
 8004d08:	e030      	b.n	8004d6c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	2b06      	cmp	r3, #6
 8004d0e:	d828      	bhi.n	8004d62 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004d10:	a201      	add	r2, pc, #4	@ (adr r2, 8004d18 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d63 	.word	0x08004d63
 8004d28:	08004d4f 	.word	0x08004d4f
 8004d2c:	08004d63 	.word	0x08004d63
 8004d30:	08004d59 	.word	0x08004d59
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	227d      	movs	r2, #125	@ 0x7d
 8004d38:	601a      	str	r2, [r3, #0]
      break;
 8004d3a:	e016      	b.n	8004d6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	22fa      	movs	r2, #250	@ 0xfa
 8004d40:	601a      	str	r2, [r3, #0]
      break;
 8004d42:	e012      	b.n	8004d6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004d4a:	601a      	str	r2, [r3, #0]
      break;
 8004d4c:	e00d      	b.n	8004d6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d54:	601a      	str	r2, [r3, #0]
      break;
 8004d56:	e008      	b.n	8004d6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d5e:	601a      	str	r2, [r3, #0]
      break;
 8004d60:	e003      	b.n	8004d6a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	60fb      	str	r3, [r7, #12]
      break;
 8004d68:	bf00      	nop
  }

  return ret;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b7d      	cmp	r3, #125	@ 0x7d
 8004d82:	dd12      	ble.n	8004daa <LSM6DSO_GYRO_SetFullScale+0x36>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2bfa      	cmp	r3, #250	@ 0xfa
 8004d88:	dd0d      	ble.n	8004da6 <LSM6DSO_GYRO_SetFullScale+0x32>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004d90:	dd07      	ble.n	8004da2 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d98:	dc01      	bgt.n	8004d9e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	e006      	b.n	8004dac <LSM6DSO_GYRO_SetFullScale+0x38>
 8004d9e:	2306      	movs	r3, #6
 8004da0:	e004      	b.n	8004dac <LSM6DSO_GYRO_SetFullScale+0x38>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e002      	b.n	8004dac <LSM6DSO_GYRO_SetFullScale+0x38>
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <LSM6DSO_GYRO_SetFullScale+0x38>
 8004daa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004dac:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3320      	adds	r3, #32
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fd24 	bl	8005804 <lsm6dso_gy_full_scale_set>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e000      	b.n	8004dca <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3320      	adds	r3, #32
 8004de0:	f107 0208 	add.w	r2, r7, #8
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fef6 	bl	8005bd8 <lsm6dso_angular_rate_raw_get>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	e00c      	b.n	8004e12 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004df8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004e00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004e08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	f107 0210 	add.w	r2, r7, #16
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fecf 	bl	8005bd8 <lsm6dso_angular_rate_raw_get>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <LSM6DSO_GYRO_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	e03c      	b.n	8004ec0 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fdd1 	bl	80049f4 <LSM6DSO_GYRO_GetSensitivity>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <LSM6DSO_GYRO_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e030      	b.n	8004ec0 <LSM6DSO_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004e5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e76:	ee17 2a90 	vmov	r2, s15
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e96:	ee17 2a90 	vmov	r2, s15
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004e9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb6:	ee17 2a90 	vmov	r2, s15
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f103 0020 	add.w	r0, r3, #32
 8004ede:	1cba      	adds	r2, r7, #2
 8004ee0:	78f9      	ldrb	r1, [r7, #3]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f000 fab6 	bl	8005454 <lsm6dso_write_reg>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	e000      	b.n	8004ef6 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <LSM6DSO_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO_USER_BANK, 1 - LSM6DSO_SENSOR_HUB_BANK, 2 - LSM6DSO_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Set_Mem_Bank(LSM6DSO_Object_t *pObj, uint8_t Val)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
  lsm6dso_reg_access_t reg;

  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
        : (Val == 2U) ? LSM6DSO_EMBEDDED_FUNC_BANK
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d006      	beq.n	8004f22 <LSM6DSO_Set_Mem_Bank+0x24>
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d101      	bne.n	8004f1e <LSM6DSO_Set_Mem_Bank+0x20>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e002      	b.n	8004f24 <LSM6DSO_Set_Mem_Bank+0x26>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <LSM6DSO_Set_Mem_Bank+0x26>
 8004f22:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
 8004f24:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO_USER_BANK;

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3320      	adds	r3, #32
 8004f2a:	7afa      	ldrb	r2, [r7, #11]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fee2 	bl	8005cf8 <lsm6dso_mem_bank_set>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <LSM6DSO_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO_ERROR;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004f58:	edd7 7a00 	vldr	s15, [r7]
 8004f5c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800505c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f68:	d801      	bhi.n	8004f6e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004f6a:	230b      	movs	r3, #11
 8004f6c:	e063      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004f6e:	edd7 7a00 	vldr	s15, [r7]
 8004f72:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7e:	d801      	bhi.n	8004f84 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e058      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004f84:	edd7 7a00 	vldr	s15, [r7]
 8004f88:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	d801      	bhi.n	8004f9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e04d      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004f9a:	edd7 7a00 	vldr	s15, [r7]
 8004f9e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005060 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	d801      	bhi.n	8004fb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004fac:	2303      	movs	r3, #3
 8004fae:	e042      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fb0:	edd7 7a00 	vldr	s15, [r7]
 8004fb4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005064 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc0:	d801      	bhi.n	8004fc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e037      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fc6:	edd7 7a00 	vldr	s15, [r7]
 8004fca:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005068 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd6:	d801      	bhi.n	8004fdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004fd8:	2305      	movs	r3, #5
 8004fda:	e02c      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004fdc:	edd7 7a00 	vldr	s15, [r7]
 8004fe0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800506c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	d801      	bhi.n	8004ff2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004fee:	2306      	movs	r3, #6
 8004ff0:	e021      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ff2:	edd7 7a00 	vldr	s15, [r7]
 8004ff6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005070 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d801      	bhi.n	8005008 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005004:	2307      	movs	r3, #7
 8005006:	e016      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005008:	edd7 7a00 	vldr	s15, [r7]
 800500c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005074 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005018:	d801      	bhi.n	800501e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800501a:	2308      	movs	r3, #8
 800501c:	e00b      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800501e:	edd7 7a00 	vldr	s15, [r7]
 8005022:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005078 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502e:	d801      	bhi.n	8005034 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005030:	2309      	movs	r3, #9
 8005032:	e000      	b.n	8005036 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005034:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005036:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3320      	adds	r3, #32
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fa7d 	bl	8005540 <lsm6dso_xl_data_rate_set>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800504c:	f04f 33ff 	mov.w	r3, #4294967295
 8005050:	e000      	b.n	8005054 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	3fcccccd 	.word	0x3fcccccd
 8005060:	42500000 	.word	0x42500000
 8005064:	42d00000 	.word	0x42d00000
 8005068:	43500000 	.word	0x43500000
 800506c:	43d08000 	.word	0x43d08000
 8005070:	44504000 	.word	0x44504000
 8005074:	44d06000 	.word	0x44d06000
 8005078:	45505000 	.word	0x45505000

0800507c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005088:	edd7 7a00 	vldr	s15, [r7]
 800508c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800517c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	d801      	bhi.n	800509e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800509a:	230b      	movs	r3, #11
 800509c:	e063      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800509e:	edd7 7a00 	vldr	s15, [r7]
 80050a2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80050a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d801      	bhi.n	80050b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e058      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80050b4:	edd7 7a00 	vldr	s15, [r7]
 80050b8:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80050bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d801      	bhi.n	80050ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e04d      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80050ca:	edd7 7a00 	vldr	s15, [r7]
 80050ce:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005180 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80050d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	d801      	bhi.n	80050e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80050dc:	2303      	movs	r3, #3
 80050de:	e042      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80050e0:	edd7 7a00 	vldr	s15, [r7]
 80050e4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005184 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80050e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f0:	d801      	bhi.n	80050f6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80050f2:	2304      	movs	r3, #4
 80050f4:	e037      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80050f6:	edd7 7a00 	vldr	s15, [r7]
 80050fa:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8005188 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80050fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005106:	d801      	bhi.n	800510c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005108:	2305      	movs	r3, #5
 800510a:	e02c      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800510c:	edd7 7a00 	vldr	s15, [r7]
 8005110:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800518c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d801      	bhi.n	8005122 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800511e:	2306      	movs	r3, #6
 8005120:	e021      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005122:	edd7 7a00 	vldr	s15, [r7]
 8005126:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005190 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800512a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005132:	d801      	bhi.n	8005138 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005134:	2307      	movs	r3, #7
 8005136:	e016      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005138:	edd7 7a00 	vldr	s15, [r7]
 800513c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005194 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005148:	d801      	bhi.n	800514e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800514a:	2308      	movs	r3, #8
 800514c:	e00b      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800514e:	edd7 7a00 	vldr	s15, [r7]
 8005152:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005198 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	d801      	bhi.n	8005164 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005160:	2309      	movs	r3, #9
 8005162:	e000      	b.n	8005166 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005164:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	3fcccccd 	.word	0x3fcccccd
 8005180:	42500000 	.word	0x42500000
 8005184:	42d00000 	.word	0x42d00000
 8005188:	43500000 	.word	0x43500000
 800518c:	43d08000 	.word	0x43d08000
 8005190:	44504000 	.word	0x44504000
 8005194:	44d06000 	.word	0x44d06000
 8005198:	45505000 	.word	0x45505000

0800519c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80051a8:	edd7 7a00 	vldr	s15, [r7]
 80051ac:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80051b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b8:	d801      	bhi.n	80051be <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e058      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051be:	edd7 7a00 	vldr	s15, [r7]
 80051c2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80051c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	d801      	bhi.n	80051d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e04d      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051d4:	edd7 7a00 	vldr	s15, [r7]
 80051d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005298 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80051dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e4:	d801      	bhi.n	80051ea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80051e6:	2303      	movs	r3, #3
 80051e8:	e042      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051ea:	edd7 7a00 	vldr	s15, [r7]
 80051ee:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800529c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80051f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	d801      	bhi.n	8005200 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80051fc:	2304      	movs	r3, #4
 80051fe:	e037      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005200:	edd7 7a00 	vldr	s15, [r7]
 8005204:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80052a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	d801      	bhi.n	8005216 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005212:	2305      	movs	r3, #5
 8005214:	e02c      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005216:	edd7 7a00 	vldr	s15, [r7]
 800521a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80052a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	d801      	bhi.n	800522c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005228:	2306      	movs	r3, #6
 800522a:	e021      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800522c:	edd7 7a00 	vldr	s15, [r7]
 8005230:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80052a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d801      	bhi.n	8005242 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800523e:	2307      	movs	r3, #7
 8005240:	e016      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005242:	edd7 7a00 	vldr	s15, [r7]
 8005246:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80052ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800524a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	d801      	bhi.n	8005258 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005254:	2308      	movs	r3, #8
 8005256:	e00b      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005258:	edd7 7a00 	vldr	s15, [r7]
 800525c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80052b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	d801      	bhi.n	800526e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800526a:	2309      	movs	r3, #9
 800526c:	e000      	b.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800526e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005270:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3320      	adds	r3, #32
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb2a 	bl	80058d4 <lsm6dso_gy_data_rate_set>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005286:	f04f 33ff 	mov.w	r3, #4294967295
 800528a:	e000      	b.n	800528e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	42500000 	.word	0x42500000
 800529c:	42d00000 	.word	0x42d00000
 80052a0:	43500000 	.word	0x43500000
 80052a4:	43d08000 	.word	0x43d08000
 80052a8:	44504000 	.word	0x44504000
 80052ac:	44d06000 	.word	0x44d06000
 80052b0:	45505000 	.word	0x45505000

080052b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80052c0:	edd7 7a00 	vldr	s15, [r7]
 80052c4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	d801      	bhi.n	80052d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e058      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052d6:	edd7 7a00 	vldr	s15, [r7]
 80052da:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80052de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d801      	bhi.n	80052ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e04d      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052ec:	edd7 7a00 	vldr	s15, [r7]
 80052f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800539c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80052f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	d801      	bhi.n	8005302 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80052fe:	2303      	movs	r3, #3
 8005300:	e042      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005302:	edd7 7a00 	vldr	s15, [r7]
 8005306:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80053a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800530a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005312:	d801      	bhi.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005314:	2304      	movs	r3, #4
 8005316:	e037      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005318:	edd7 7a00 	vldr	s15, [r7]
 800531c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80053a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005328:	d801      	bhi.n	800532e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800532a:	2305      	movs	r3, #5
 800532c:	e02c      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800532e:	edd7 7a00 	vldr	s15, [r7]
 8005332:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80053a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	d801      	bhi.n	8005344 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005340:	2306      	movs	r3, #6
 8005342:	e021      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005344:	edd7 7a00 	vldr	s15, [r7]
 8005348:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80053ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800534c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	d801      	bhi.n	800535a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005356:	2307      	movs	r3, #7
 8005358:	e016      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800535a:	edd7 7a00 	vldr	s15, [r7]
 800535e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80053b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d801      	bhi.n	8005370 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800536c:	2308      	movs	r3, #8
 800536e:	e00b      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005370:	edd7 7a00 	vldr	s15, [r7]
 8005374:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80053b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	d801      	bhi.n	8005386 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005382:	2309      	movs	r3, #9
 8005384:	e000      	b.n	8005388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005386:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	42500000 	.word	0x42500000
 80053a0:	42d00000 	.word	0x42d00000
 80053a4:	43500000 	.word	0x43500000
 80053a8:	43d08000 	.word	0x43d08000
 80053ac:	44504000 	.word	0x44504000
 80053b0:	44d06000 	.word	0x44d06000
 80053b4:	45505000 	.word	0x45505000

080053b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	460b      	mov	r3, r1
 80053c6:	72fb      	strb	r3, [r7, #11]
 80053c8:	4613      	mov	r3, r2
 80053ca:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	695c      	ldr	r4, [r3, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	7b1b      	ldrb	r3, [r3, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	b299      	uxth	r1, r3
 80053de:	893b      	ldrh	r3, [r7, #8]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	47a0      	blx	r4
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}

080053ee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053ee:	b590      	push	{r4, r7, lr}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	461a      	mov	r2, r3
 80053fa:	460b      	mov	r3, r1
 80053fc:	72fb      	strb	r3, [r7, #11]
 80053fe:	4613      	mov	r3, r2
 8005400:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	691c      	ldr	r4, [r3, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	7b1b      	ldrb	r3, [r3, #12]
 800540e:	4618      	mov	r0, r3
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	b299      	uxth	r1, r3
 8005414:	893b      	ldrh	r3, [r7, #8]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	47a0      	blx	r4
 800541a:	4603      	mov	r3, r0
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}

08005424 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	461a      	mov	r2, r3
 8005430:	460b      	mov	r3, r1
 8005432:	72fb      	strb	r3, [r7, #11]
 8005434:	4613      	mov	r3, r2
 8005436:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685c      	ldr	r4, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68d8      	ldr	r0, [r3, #12]
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	7af9      	ldrb	r1, [r7, #11]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	47a0      	blx	r4
 8005448:	6178      	str	r0, [r7, #20]

  return ret;
 800544a:	697b      	ldr	r3, [r7, #20]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}

08005454 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	460b      	mov	r3, r1
 8005462:	72fb      	strb	r3, [r7, #11]
 8005464:	4613      	mov	r3, r2
 8005466:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681c      	ldr	r4, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68d8      	ldr	r0, [r3, #12]
 8005470:	893b      	ldrh	r3, [r7, #8]
 8005472:	7af9      	ldrb	r1, [r7, #11]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	47a0      	blx	r4
 8005478:	6178      	str	r0, [r7, #20]

  return ret;
 800547a:	697b      	ldr	r3, [r7, #20]
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	bd90      	pop	{r4, r7, pc}

08005484 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005490:	f107 0208 	add.w	r2, r7, #8
 8005494:	2301      	movs	r3, #1
 8005496:	2110      	movs	r1, #16
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ffc3 	bl	8005424 <lsm6dso_read_reg>
 800549e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	7a3b      	ldrb	r3, [r7, #8]
 80054b0:	f362 0383 	bfi	r3, r2, #2, #2
 80054b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80054b6:	f107 0208 	add.w	r2, r7, #8
 80054ba:	2301      	movs	r3, #1
 80054bc:	2110      	movs	r1, #16
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ffc8 	bl	8005454 <lsm6dso_write_reg>
 80054c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80054da:	f107 0208 	add.w	r2, r7, #8
 80054de:	2301      	movs	r3, #1
 80054e0:	2110      	movs	r1, #16
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ff9e 	bl	8005424 <lsm6dso_read_reg>
 80054e8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80054ea:	7a3b      	ldrb	r3, [r7, #8]
 80054ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d81a      	bhi.n	800552c <lsm6dso_xl_full_scale_get+0x5c>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <lsm6dso_xl_full_scale_get+0x2c>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005515 	.word	0x08005515
 8005504:	0800551d 	.word	0x0800551d
 8005508:	08005525 	.word	0x08005525
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
      break;
 8005512:	e00f      	b.n	8005534 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
      break;
 800551a:	e00b      	b.n	8005534 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2202      	movs	r2, #2
 8005520:	701a      	strb	r2, [r3, #0]
      break;
 8005522:	e007      	b.n	8005534 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2203      	movs	r2, #3
 8005528:	701a      	strb	r2, [r3, #0]
      break;
 800552a:	e003      	b.n	8005534 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
      break;
 8005532:	bf00      	nop
  }

  return ret;
 8005534:	68fb      	ldr	r3, [r7, #12]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop

08005540 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fc90 	bl	8005e7c <lsm6dso_fsm_enable_get>
 800555c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <lsm6dso_xl_data_rate_set+0x28>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	e0e0      	b.n	800572a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005568:	7b3b      	ldrb	r3, [r7, #12]
 800556a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800556e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005570:	7b3b      	ldrb	r3, [r7, #12]
 8005572:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005576:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005578:	4313      	orrs	r3, r2
 800557a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800557c:	7b3b      	ldrb	r3, [r7, #12]
 800557e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005582:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005584:	4313      	orrs	r3, r2
 8005586:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005588:	7b3b      	ldrb	r3, [r7, #12]
 800558a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800558e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005590:	4313      	orrs	r3, r2
 8005592:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005594:	7b3b      	ldrb	r3, [r7, #12]
 8005596:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800559a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800559c:	4313      	orrs	r3, r2
 800559e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80055a0:	7b3b      	ldrb	r3, [r7, #12]
 80055a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80055ac:	7b3b      	ldrb	r3, [r7, #12]
 80055ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80055b8:	7b3b      	ldrb	r3, [r7, #12]
 80055ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80055c4:	7b7b      	ldrb	r3, [r7, #13]
 80055c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80055cc:	4313      	orrs	r3, r2
 80055ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80055d0:	7b7b      	ldrb	r3, [r7, #13]
 80055d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80055d8:	4313      	orrs	r3, r2
 80055da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80055dc:	7b7b      	ldrb	r3, [r7, #13]
 80055de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80055e8:	7b7b      	ldrb	r3, [r7, #13]
 80055ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80055f4:	7b7b      	ldrb	r3, [r7, #13]
 80055f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005600:	7b7b      	ldrb	r3, [r7, #13]
 8005602:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005606:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005608:	4313      	orrs	r3, r2
 800560a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800560c:	7b7b      	ldrb	r3, [r7, #13]
 800560e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005612:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005614:	4313      	orrs	r3, r2
 8005616:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005618:	7b7b      	ldrb	r3, [r7, #13]
 800561a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800561e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005620:	4313      	orrs	r3, r2
 8005622:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005624:	2b01      	cmp	r3, #1
 8005626:	d164      	bne.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005628:	f107 030b 	add.w	r3, r7, #11
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fc46 	bl	8005ec0 <lsm6dso_fsm_data_rate_get>
 8005634:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <lsm6dso_xl_data_rate_set+0x100>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	e074      	b.n	800572a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d852      	bhi.n	80056ec <lsm6dso_xl_data_rate_set+0x1ac>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <lsm6dso_xl_data_rate_set+0x10c>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566f 	.word	0x0800566f
 8005654:	0800568d 	.word	0x0800568d
 8005658:	080056b7 	.word	0x080056b7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005666:	e044      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	75fb      	strb	r3, [r7, #23]
        break;
 800566c:	e041      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005674:	2302      	movs	r3, #2
 8005676:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005678:	e03b      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d102      	bne.n	8005686 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005680:	2302      	movs	r3, #2
 8005682:	75fb      	strb	r3, [r7, #23]
        break;
 8005684:	e035      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	75fb      	strb	r3, [r7, #23]
        break;
 800568a:	e032      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005692:	2303      	movs	r3, #3
 8005694:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005696:	e02c      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d102      	bne.n	80056a4 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800569e:	2303      	movs	r3, #3
 80056a0:	75fb      	strb	r3, [r7, #23]
        break;
 80056a2:	e026      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d102      	bne.n	80056b0 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
        break;
 80056ae:	e020      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	75fb      	strb	r3, [r7, #23]
        break;
 80056b4:	e01d      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80056bc:	2304      	movs	r3, #4
 80056be:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80056c0:	e017      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d102      	bne.n	80056ce <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80056c8:	2304      	movs	r3, #4
 80056ca:	75fb      	strb	r3, [r7, #23]
        break;
 80056cc:	e011      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d102      	bne.n	80056da <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80056d4:	2304      	movs	r3, #4
 80056d6:	75fb      	strb	r3, [r7, #23]
        break;
 80056d8:	e00b      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d102      	bne.n	80056e6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80056e0:	2304      	movs	r3, #4
 80056e2:	75fb      	strb	r3, [r7, #23]
        break;
 80056e4:	e005      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	75fb      	strb	r3, [r7, #23]
        break;
 80056ea:	e002      	b.n	80056f2 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	75fb      	strb	r3, [r7, #23]
        break;
 80056f0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80056f2:	f107 0208 	add.w	r2, r7, #8
 80056f6:	2301      	movs	r3, #1
 80056f8:	2110      	movs	r1, #16
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fe92 	bl	8005424 <lsm6dso_read_reg>
 8005700:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	b2da      	uxtb	r2, r3
 800570a:	7a3b      	ldrb	r3, [r7, #8]
 800570c:	f362 1307 	bfi	r3, r2, #4, #4
 8005710:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005712:	f107 0208 	add.w	r2, r7, #8
 8005716:	2301      	movs	r3, #1
 8005718:	2110      	movs	r1, #16
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fe9a 	bl	8005454 <lsm6dso_write_reg>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	613b      	str	r3, [r7, #16]

  return ret;
 8005728:	693b      	ldr	r3, [r7, #16]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop

08005734 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800573e:	f107 0208 	add.w	r2, r7, #8
 8005742:	2301      	movs	r3, #1
 8005744:	2110      	movs	r1, #16
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fe6c 	bl	8005424 <lsm6dso_read_reg>
 800574c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800574e:	7a3b      	ldrb	r3, [r7, #8]
 8005750:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b0b      	cmp	r3, #11
 8005758:	d84a      	bhi.n	80057f0 <lsm6dso_xl_data_rate_get+0xbc>
 800575a:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <lsm6dso_xl_data_rate_get+0x2c>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005791 	.word	0x08005791
 8005764:	08005799 	.word	0x08005799
 8005768:	080057a1 	.word	0x080057a1
 800576c:	080057a9 	.word	0x080057a9
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057d9 	.word	0x080057d9
 8005788:	080057e1 	.word	0x080057e1
 800578c:	080057e9 	.word	0x080057e9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
      break;
 8005796:	e02f      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
      break;
 800579e:	e02b      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2202      	movs	r2, #2
 80057a4:	701a      	strb	r2, [r3, #0]
      break;
 80057a6:	e027      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2203      	movs	r2, #3
 80057ac:	701a      	strb	r2, [r3, #0]
      break;
 80057ae:	e023      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2204      	movs	r2, #4
 80057b4:	701a      	strb	r2, [r3, #0]
      break;
 80057b6:	e01f      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2205      	movs	r2, #5
 80057bc:	701a      	strb	r2, [r3, #0]
      break;
 80057be:	e01b      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2206      	movs	r2, #6
 80057c4:	701a      	strb	r2, [r3, #0]
      break;
 80057c6:	e017      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2207      	movs	r2, #7
 80057cc:	701a      	strb	r2, [r3, #0]
      break;
 80057ce:	e013      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2208      	movs	r2, #8
 80057d4:	701a      	strb	r2, [r3, #0]
      break;
 80057d6:	e00f      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2209      	movs	r2, #9
 80057dc:	701a      	strb	r2, [r3, #0]
      break;
 80057de:	e00b      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	220a      	movs	r2, #10
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	e007      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	220b      	movs	r2, #11
 80057ec:	701a      	strb	r2, [r3, #0]
      break;
 80057ee:	e003      	b.n	80057f8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	bf00      	nop
  }

  return ret;
 80057f8:	68fb      	ldr	r3, [r7, #12]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005810:	f107 0208 	add.w	r2, r7, #8
 8005814:	2301      	movs	r3, #1
 8005816:	2111      	movs	r1, #17
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe03 	bl	8005424 <lsm6dso_read_reg>
 800581e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	b2da      	uxtb	r2, r3
 800582e:	7a3b      	ldrb	r3, [r7, #8]
 8005830:	f362 0343 	bfi	r3, r2, #1, #3
 8005834:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005836:	f107 0208 	add.w	r2, r7, #8
 800583a:	2301      	movs	r3, #1
 800583c:	2111      	movs	r1, #17
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fe08 	bl	8005454 <lsm6dso_write_reg>
 8005844:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800585a:	f107 0208 	add.w	r2, r7, #8
 800585e:	2301      	movs	r3, #1
 8005860:	2111      	movs	r1, #17
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fdde 	bl	8005424 <lsm6dso_read_reg>
 8005868:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800586a:	7a3b      	ldrb	r3, [r7, #8]
 800586c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b06      	cmp	r3, #6
 8005874:	d824      	bhi.n	80058c0 <lsm6dso_gy_full_scale_get+0x70>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <lsm6dso_gy_full_scale_get+0x2c>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005899 	.word	0x08005899
 8005880:	080058a1 	.word	0x080058a1
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058c1 	.word	0x080058c1
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058c1 	.word	0x080058c1
 8005894:	080058b9 	.word	0x080058b9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
      break;
 800589e:	e013      	b.n	80058c8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
      break;
 80058a6:	e00f      	b.n	80058c8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2202      	movs	r2, #2
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e00b      	b.n	80058c8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2204      	movs	r2, #4
 80058b4:	701a      	strb	r2, [r3, #0]
      break;
 80058b6:	e007      	b.n	80058c8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2206      	movs	r2, #6
 80058bc:	701a      	strb	r2, [r3, #0]
      break;
 80058be:	e003      	b.n	80058c8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
      break;
 80058c6:	bf00      	nop
  }

  return ret;
 80058c8:	68fb      	ldr	r3, [r7, #12]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop

080058d4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80058e4:	f107 030c 	add.w	r3, r7, #12
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fac6 	bl	8005e7c <lsm6dso_fsm_enable_get>
 80058f0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <lsm6dso_gy_data_rate_set+0x28>
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	e0e0      	b.n	8005abe <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80058fc:	7b3b      	ldrb	r3, [r7, #12]
 80058fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005902:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005904:	7b3b      	ldrb	r3, [r7, #12]
 8005906:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800590a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800590c:	4313      	orrs	r3, r2
 800590e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005910:	7b3b      	ldrb	r3, [r7, #12]
 8005912:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005916:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005918:	4313      	orrs	r3, r2
 800591a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800591c:	7b3b      	ldrb	r3, [r7, #12]
 800591e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005922:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005924:	4313      	orrs	r3, r2
 8005926:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005928:	7b3b      	ldrb	r3, [r7, #12]
 800592a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800592e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005930:	4313      	orrs	r3, r2
 8005932:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005934:	7b3b      	ldrb	r3, [r7, #12]
 8005936:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800593a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800593c:	4313      	orrs	r3, r2
 800593e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005940:	7b3b      	ldrb	r3, [r7, #12]
 8005942:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005946:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005948:	4313      	orrs	r3, r2
 800594a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800594c:	7b3b      	ldrb	r3, [r7, #12]
 800594e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005952:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005954:	4313      	orrs	r3, r2
 8005956:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005958:	7b7b      	ldrb	r3, [r7, #13]
 800595a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800595e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005960:	4313      	orrs	r3, r2
 8005962:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005964:	7b7b      	ldrb	r3, [r7, #13]
 8005966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800596a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800596c:	4313      	orrs	r3, r2
 800596e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005970:	7b7b      	ldrb	r3, [r7, #13]
 8005972:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005976:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005978:	4313      	orrs	r3, r2
 800597a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800597c:	7b7b      	ldrb	r3, [r7, #13]
 800597e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005982:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005984:	4313      	orrs	r3, r2
 8005986:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800598e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005990:	4313      	orrs	r3, r2
 8005992:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005994:	7b7b      	ldrb	r3, [r7, #13]
 8005996:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800599a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800599c:	4313      	orrs	r3, r2
 800599e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80059a0:	7b7b      	ldrb	r3, [r7, #13]
 80059a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80059ac:	7b7b      	ldrb	r3, [r7, #13]
 80059ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d164      	bne.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80059bc:	f107 030b 	add.w	r3, r7, #11
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa7c 	bl	8005ec0 <lsm6dso_fsm_data_rate_get>
 80059c8:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <lsm6dso_gy_data_rate_set+0x100>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	e074      	b.n	8005abe <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d852      	bhi.n	8005a80 <lsm6dso_gy_data_rate_set+0x1ac>
 80059da:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <lsm6dso_gy_data_rate_set+0x10c>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a03 	.word	0x08005a03
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a4b 	.word	0x08005a4b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80059fa:	e044      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	75fb      	strb	r3, [r7, #23]
        break;
 8005a00:	e041      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a0c:	e03b      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005a14:	2302      	movs	r3, #2
 8005a16:	75fb      	strb	r3, [r7, #23]
        break;
 8005a18:	e035      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	75fb      	strb	r3, [r7, #23]
        break;
 8005a1e:	e032      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a26:	2303      	movs	r3, #3
 8005a28:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a2a:	e02c      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d102      	bne.n	8005a38 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a32:	2303      	movs	r3, #3
 8005a34:	75fb      	strb	r3, [r7, #23]
        break;
 8005a36:	e026      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d102      	bne.n	8005a44 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	75fb      	strb	r3, [r7, #23]
        break;
 8005a42:	e020      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	75fb      	strb	r3, [r7, #23]
        break;
 8005a48:	e01d      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005a50:	2304      	movs	r3, #4
 8005a52:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005a54:	e017      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d102      	bne.n	8005a62 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	75fb      	strb	r3, [r7, #23]
        break;
 8005a60:	e011      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d102      	bne.n	8005a6e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005a68:	2304      	movs	r3, #4
 8005a6a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a6c:	e00b      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d102      	bne.n	8005a7a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005a74:	2304      	movs	r3, #4
 8005a76:	75fb      	strb	r3, [r7, #23]
        break;
 8005a78:	e005      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	75fb      	strb	r3, [r7, #23]
        break;
 8005a7e:	e002      	b.n	8005a86 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	75fb      	strb	r3, [r7, #23]
        break;
 8005a84:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005a86:	f107 0208 	add.w	r2, r7, #8
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	2111      	movs	r1, #17
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fcc8 	bl	8005424 <lsm6dso_read_reg>
 8005a94:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	7a3b      	ldrb	r3, [r7, #8]
 8005aa0:	f362 1307 	bfi	r3, r2, #4, #4
 8005aa4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005aa6:	f107 0208 	add.w	r2, r7, #8
 8005aaa:	2301      	movs	r3, #1
 8005aac:	2111      	movs	r1, #17
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fcd0 	bl	8005454 <lsm6dso_write_reg>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4413      	add	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  return ret;
 8005abc:	693b      	ldr	r3, [r7, #16]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop

08005ac8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005ad2:	f107 0208 	add.w	r2, r7, #8
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	2111      	movs	r1, #17
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fca2 	bl	8005424 <lsm6dso_read_reg>
 8005ae0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005ae2:	7a3b      	ldrb	r3, [r7, #8]
 8005ae4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b0a      	cmp	r3, #10
 8005aec:	d844      	bhi.n	8005b78 <lsm6dso_gy_data_rate_get+0xb0>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <lsm6dso_gy_data_rate_get+0x2c>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b29 	.word	0x08005b29
 8005afc:	08005b31 	.word	0x08005b31
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b59 	.word	0x08005b59
 8005b14:	08005b61 	.word	0x08005b61
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b71 	.word	0x08005b71
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e02b      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	e027      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	e023      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	701a      	strb	r2, [r3, #0]
      break;
 8005b3e:	e01f      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2204      	movs	r2, #4
 8005b44:	701a      	strb	r2, [r3, #0]
      break;
 8005b46:	e01b      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2205      	movs	r2, #5
 8005b4c:	701a      	strb	r2, [r3, #0]
      break;
 8005b4e:	e017      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2206      	movs	r2, #6
 8005b54:	701a      	strb	r2, [r3, #0]
      break;
 8005b56:	e013      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e00f      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2208      	movs	r2, #8
 8005b64:	701a      	strb	r2, [r3, #0]
      break;
 8005b66:	e00b      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2209      	movs	r2, #9
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e007      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	220a      	movs	r2, #10
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	e003      	b.n	8005b80 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
      break;
 8005b7e:	bf00      	nop
  }

  return ret;
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop

08005b8c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005b98:	f107 0208 	add.w	r2, r7, #8
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	2112      	movs	r1, #18
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fc3f 	bl	8005424 <lsm6dso_read_reg>
 8005ba6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10f      	bne.n	8005bce <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	7a3b      	ldrb	r3, [r7, #8]
 8005bb8:	f362 1386 	bfi	r3, r2, #6, #1
 8005bbc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005bbe:	f107 0208 	add.w	r2, r7, #8
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	2112      	movs	r1, #18
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fc44 	bl	8005454 <lsm6dso_write_reg>
 8005bcc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005be2:	f107 020c 	add.w	r2, r7, #12
 8005be6:	2306      	movs	r3, #6
 8005be8:	2122      	movs	r1, #34	@ 0x22
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fc1a 	bl	8005424 <lsm6dso_read_reg>
 8005bf0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005bf2:	7b7b      	ldrb	r3, [r7, #13]
 8005bf4:	b21a      	sxth	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	7b3a      	ldrb	r2, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b21a      	sxth	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	3302      	adds	r3, #2
 8005c18:	b212      	sxth	r2, r2
 8005c1a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	3302      	adds	r3, #2
 8005c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	7bba      	ldrb	r2, [r7, #14]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3302      	adds	r3, #2
 8005c34:	b212      	sxth	r2, r2
 8005c36:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c38:	7c7a      	ldrb	r2, [r7, #17]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	b212      	sxth	r2, r2
 8005c40:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	3304      	adds	r3, #4
 8005c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	7c3a      	ldrb	r2, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	b212      	sxth	r2, r2
 8005c5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005c72:	f107 020c 	add.w	r2, r7, #12
 8005c76:	2306      	movs	r3, #6
 8005c78:	2128      	movs	r1, #40	@ 0x28
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fbd2 	bl	8005424 <lsm6dso_read_reg>
 8005c80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c82:	7b7b      	ldrb	r3, [r7, #13]
 8005c84:	b21a      	sxth	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	7b3a      	ldrb	r2, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	b21a      	sxth	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ca2:	7bfa      	ldrb	r2, [r7, #15]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	b212      	sxth	r2, r2
 8005caa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	7bba      	ldrb	r2, [r7, #14]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	b212      	sxth	r2, r2
 8005cc6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005cc8:	7c7a      	ldrb	r2, [r7, #17]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	b212      	sxth	r2, r2
 8005cd0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	7c3a      	ldrb	r2, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	b212      	sxth	r2, r2
 8005cec:	801a      	strh	r2, [r3, #0]

  return ret;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005d04:	2300      	movs	r3, #0
 8005d06:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	7a3b      	ldrb	r3, [r7, #8]
 8005d12:	f362 1387 	bfi	r3, r2, #6, #2
 8005d16:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005d18:	f107 0208 	add.w	r2, r7, #8
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	2101      	movs	r1, #1
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fb97 	bl	8005454 <lsm6dso_write_reg>
 8005d26:	60f8      	str	r0, [r7, #12]

  return ret;
 8005d28:	68fb      	ldr	r3, [r7, #12]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	210f      	movs	r1, #15
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fb6e 	bl	8005424 <lsm6dso_read_reg>
 8005d48:	60f8      	str	r0, [r7, #12]

  return ret;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005d60:	f107 0208 	add.w	r2, r7, #8
 8005d64:	2301      	movs	r3, #1
 8005d66:	2112      	movs	r1, #18
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fb5b 	bl	8005424 <lsm6dso_read_reg>
 8005d6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	7a3b      	ldrb	r3, [r7, #8]
 8005d80:	f362 0382 	bfi	r3, r2, #2, #1
 8005d84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005d86:	f107 0208 	add.w	r2, r7, #8
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	2112      	movs	r1, #18
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fb60 	bl	8005454 <lsm6dso_write_reg>
 8005d94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005dac:	f107 020c 	add.w	r2, r7, #12
 8005db0:	2301      	movs	r3, #1
 8005db2:	2118      	movs	r1, #24
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fb35 	bl	8005424 <lsm6dso_read_reg>
 8005dba:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	09db      	lsrs	r3, r3, #7
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	7b3b      	ldrb	r3, [r7, #12]
 8005dca:	f362 0341 	bfi	r3, r2, #1, #1
 8005dce:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005dd0:	f107 020c 	add.w	r2, r7, #12
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	2118      	movs	r1, #24
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fb3b 	bl	8005454 <lsm6dso_write_reg>
 8005dde:	4602      	mov	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <lsm6dso_i3c_disable_set+0x50>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	e01b      	b.n	8005e28 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005df0:	f107 0210 	add.w	r2, r7, #16
 8005df4:	2301      	movs	r3, #1
 8005df6:	2162      	movs	r1, #98	@ 0x62
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fb13 	bl	8005424 <lsm6dso_read_reg>
 8005dfe:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	7c3b      	ldrb	r3, [r7, #16]
 8005e0a:	f362 03c4 	bfi	r3, r2, #3, #2
 8005e0e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005e10:	f107 0210 	add.w	r2, r7, #16
 8005e14:	2301      	movs	r3, #1
 8005e16:	2162      	movs	r1, #98	@ 0x62
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fb1b 	bl	8005454 <lsm6dso_write_reg>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  return ret;
 8005e26:	697b      	ldr	r3, [r7, #20]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005e3c:	f107 0208 	add.w	r2, r7, #8
 8005e40:	2301      	movs	r3, #1
 8005e42:	210a      	movs	r1, #10
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff faed 	bl	8005424 <lsm6dso_read_reg>
 8005e4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10f      	bne.n	8005e72 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	7a3b      	ldrb	r3, [r7, #8]
 8005e5c:	f362 0302 	bfi	r3, r2, #0, #3
 8005e60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005e62:	f107 0208 	add.w	r2, r7, #8
 8005e66:	2301      	movs	r3, #1
 8005e68:	210a      	movs	r1, #10
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff faf2 	bl	8005454 <lsm6dso_write_reg>
 8005e70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e72:	68fb      	ldr	r3, [r7, #12]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005e86:	2102      	movs	r1, #2
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff ff35 	bl	8005cf8 <lsm6dso_mem_bank_set>
 8005e8e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005e90:	2302      	movs	r3, #2
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	2146      	movs	r1, #70	@ 0x46
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fac4 	bl	8005424 <lsm6dso_read_reg>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ff26 	bl	8005cf8 <lsm6dso_mem_bank_set>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  return ret;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005eca:	2102      	movs	r1, #2
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ff13 	bl	8005cf8 <lsm6dso_mem_bank_set>
 8005ed2:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <lsm6dso_fsm_data_rate_get+0x1e>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	e03a      	b.n	8005f54 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8005ede:	f107 0208 	add.w	r2, r7, #8
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	215f      	movs	r1, #95	@ 0x5f
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fa9c 	bl	8005424 <lsm6dso_read_reg>
 8005eec:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d125      	bne.n	8005f40 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005ef4:	7a3b      	ldrb	r3, [r7, #8]
 8005ef6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d81b      	bhi.n	8005f38 <lsm6dso_fsm_data_rate_get+0x78>
 8005f00:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <lsm6dso_fsm_data_rate_get+0x48>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f21 	.word	0x08005f21
 8005f10:	08005f29 	.word	0x08005f29
 8005f14:	08005f31 	.word	0x08005f31
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
      break;
 8005f1e:	e010      	b.n	8005f42 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e00c      	b.n	8005f42 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	701a      	strb	r2, [r3, #0]
      break;
 8005f2e:	e008      	b.n	8005f42 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2203      	movs	r2, #3
 8005f34:	701a      	strb	r2, [r3, #0]
      break;
 8005f36:	e004      	b.n	8005f42 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
      break;
 8005f3e:	e000      	b.n	8005f42 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005f40:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fed7 	bl	8005cf8 <lsm6dso_mem_bank_set>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  return ret;
 8005f52:	68fb      	ldr	r3, [r7, #12]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08e      	sub	sp, #56	@ 0x38
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d06e      	beq.n	8006056 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	f200 809d 	bhi.w	80060ba <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d032      	beq.n	8005ff2 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005f8c:	e095      	b.n	80060ba <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f000 f966 	bl	8006260 <LSM6DSO_0_Probe>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	e0cc      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005fa0:	4a68      	ldr	r2, [pc, #416]	@ (8006144 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4967      	ldr	r1, [pc, #412]	@ (8006148 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005fb2:	f107 010c 	add.w	r1, r7, #12
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4798      	blx	r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005fc0:	f06f 0306 	mvn.w	r3, #6
 8005fc4:	e0b9      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005fc6:	7b3b      	ldrb	r3, [r7, #12]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d103      	bne.n	8005fd4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	f043 0302 	orr.w	r3, r3, #2
 8005fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8005fd4:	7b7b      	ldrb	r3, [r7, #13]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d103      	bne.n	8005fe2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d16c      	bne.n	80060c2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	f043 0304 	orr.w	r3, r3, #4
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8005ff0:	e067      	b.n	80060c2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f000 f9fe 	bl	80063f4 <LIS2DW12_0_Probe>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	e09a      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006004:	4a4f      	ldr	r2, [pc, #316]	@ (8006144 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	494e      	ldr	r1, [pc, #312]	@ (8006148 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006016:	f107 010c 	add.w	r1, r7, #12
 800601a:	4610      	mov	r0, r2
 800601c:	4798      	blx	r3
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006024:	f06f 0306 	mvn.w	r3, #6
 8006028:	e087      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800602a:	7b3b      	ldrb	r3, [r7, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d103      	bne.n	8006038 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8006038:	7b7b      	ldrb	r3, [r7, #13]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d103      	bne.n	8006046 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d13c      	bne.n	80060c6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8006054:	e037      	b.n	80060c6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8006056:	6838      	ldr	r0, [r7, #0]
 8006058:	f000 fa74 	bl	8006544 <LIS2MDL_0_Probe>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
 8006066:	e068      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006068:	4a36      	ldr	r2, [pc, #216]	@ (8006144 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4935      	ldr	r1, [pc, #212]	@ (8006148 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800607a:	f107 010c 	add.w	r1, r7, #12
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006088:	f06f 0306 	mvn.w	r3, #6
 800608c:	e055      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800608e:	7b3b      	ldrb	r3, [r7, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d103      	bne.n	800609c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	f043 0302 	orr.w	r3, r3, #2
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800609c:	7b7b      	ldrb	r3, [r7, #13]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d103      	bne.n	80060aa <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10c      	bne.n	80060ca <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	f043 0304 	orr.w	r3, r3, #4
 80060b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80060b8:	e007      	b.n	80060ca <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80060ba:	f06f 0301 	mvn.w	r3, #1
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80060c0:	e004      	b.n	80060cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80060c2:	bf00      	nop
 80060c4:	e002      	b.n	80060cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80060c6:	bf00      	nop
 80060c8:	e000      	b.n	80060cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80060ca:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	e031      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80060d6:	2300      	movs	r3, #0
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060da:	e02a      	b.n	8006132 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	4013      	ands	r3, r2
 80060e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d11e      	bne.n	8006126 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80060e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	4013      	ands	r3, r2
 80060ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d118      	bne.n	8006126 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80060f4:	4a15      	ldr	r2, [pc, #84]	@ (800614c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060fc:	4814      	ldr	r0, [pc, #80]	@ (8006150 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4413      	add	r3, r2
 8006106:	440b      	add	r3, r1
 8006108:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	490e      	ldr	r1, [pc, #56]	@ (8006148 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006116:	4610      	mov	r0, r2
 8006118:	4798      	blx	r3
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006120:	f06f 0304 	mvn.w	r3, #4
 8006124:	e009      	b.n	800613a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	3301      	adds	r3, #1
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	2b02      	cmp	r3, #2
 8006136:	d9d1      	bls.n	80060dc <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800613a:	4618      	mov	r0, r3
 800613c:	3738      	adds	r7, #56	@ 0x38
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000e20 	.word	0x20000e20
 8006148:	20000df0 	.word	0x20000df0
 800614c:	200000cc 	.word	0x200000cc
 8006150:	20000dfc 	.word	0x20000dfc

08006154 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d903      	bls.n	800616c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006164:	f06f 0301 	mvn.w	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e028      	b.n	80061be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800616c:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	4013      	ands	r3, r2
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d11c      	bne.n	80061b8 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800617e:	4a13      	ldr	r2, [pc, #76]	@ (80061cc <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006186:	4812      	ldr	r0, [pc, #72]	@ (80061d0 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	4413      	add	r3, r2
 8006190:	440b      	add	r3, r1
 8006192:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	490e      	ldr	r1, [pc, #56]	@ (80061d4 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061aa:	f06f 0304 	mvn.w	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e005      	b.n	80061be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e002      	b.n	80061be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80061b8:	f06f 0301 	mvn.w	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20000e2c 	.word	0x20000e2c
 80061cc:	200000cc 	.word	0x200000cc
 80061d0:	20000dfc 	.word	0x20000dfc
 80061d4:	20000df0 	.word	0x20000df0

080061d8 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d903      	bls.n	80061f2 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061ea:	f06f 0301 	mvn.w	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e029      	b.n	8006246 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d11d      	bne.n	8006240 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006204:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800620c:	4812      	ldr	r0, [pc, #72]	@ (8006258 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	440b      	add	r3, r1
 8006218:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	490f      	ldr	r1, [pc, #60]	@ (800625c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006232:	f06f 0304 	mvn.w	r3, #4
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e005      	b.n	8006246 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e002      	b.n	8006246 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006240:	f06f 0301 	mvn.w	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006246:	697b      	ldr	r3, [r7, #20]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000e2c 	.word	0x20000e2c
 8006254:	200000cc 	.word	0x200000cc
 8006258:	20000dfc 	.word	0x20000dfc
 800625c:	20000df0 	.word	0x20000df0

08006260 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b094      	sub	sp, #80	@ 0x50
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006268:	2300      	movs	r3, #0
 800626a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800626c:	2300      	movs	r3, #0
 800626e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006270:	23d7      	movs	r3, #215	@ 0xd7
 8006272:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 8006276:	4b50      	ldr	r3, [pc, #320]	@ (80063b8 <LSM6DSO_0_Probe+0x158>)
 8006278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 800627a:	4b50      	ldr	r3, [pc, #320]	@ (80063bc <LSM6DSO_0_Probe+0x15c>)
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 800627e:	4b50      	ldr	r3, [pc, #320]	@ (80063c0 <LSM6DSO_0_Probe+0x160>)
 8006280:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8006282:	4b50      	ldr	r3, [pc, #320]	@ (80063c4 <LSM6DSO_0_Probe+0x164>)
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 8006286:	4b50      	ldr	r3, [pc, #320]	@ (80063c8 <LSM6DSO_0_Probe+0x168>)
 8006288:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 800628a:	4b50      	ldr	r3, [pc, #320]	@ (80063cc <LSM6DSO_0_Probe+0x16c>)
 800628c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800628e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006292:	4619      	mov	r1, r3
 8006294:	484e      	ldr	r0, [pc, #312]	@ (80063d0 <LSM6DSO_0_Probe+0x170>)
 8006296:	f7fd fe53 	bl	8003f40 <LSM6DSO_RegisterBusIO>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062a0:	f06f 0306 	mvn.w	r3, #6
 80062a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a6:	e082      	b.n	80063ae <LSM6DSO_0_Probe+0x14e>
  }
  else if (LSM6DSO_Set_Mem_Bank(&lsm6dso_obj_0, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 80062a8:	2100      	movs	r1, #0
 80062aa:	4849      	ldr	r0, [pc, #292]	@ (80063d0 <LSM6DSO_0_Probe+0x170>)
 80062ac:	f7fe fe27 	bl	8004efe <LSM6DSO_Set_Mem_Bank>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062b6:	f06f 0306 	mvn.w	r3, #6
 80062ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062bc:	e077      	b.n	80063ae <LSM6DSO_0_Probe+0x14e>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80062be:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80062c2:	4619      	mov	r1, r3
 80062c4:	4842      	ldr	r0, [pc, #264]	@ (80063d0 <LSM6DSO_0_Probe+0x170>)
 80062c6:	f7fd ff4f 	bl	8004168 <LSM6DSO_ReadID>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <LSM6DSO_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062d0:	f06f 0306 	mvn.w	r3, #6
 80062d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d6:	e06a      	b.n	80063ae <LSM6DSO_0_Probe+0x14e>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 80062d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062dc:	2b6c      	cmp	r3, #108	@ 0x6c
 80062de:	d003      	beq.n	80062e8 <LSM6DSO_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062e0:	f06f 0306 	mvn.w	r3, #6
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e6:	e062      	b.n	80063ae <LSM6DSO_0_Probe+0x14e>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	4619      	mov	r1, r3
 80062ee:	4838      	ldr	r0, [pc, #224]	@ (80063d0 <LSM6DSO_0_Probe+0x170>)
 80062f0:	f7fd ff50 	bl	8004194 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80062f4:	7b7b      	ldrb	r3, [r7, #13]
 80062f6:	461a      	mov	r2, r3
 80062f8:	7b3b      	ldrb	r3, [r7, #12]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4313      	orrs	r3, r2
 8006304:	4a33      	ldr	r2, [pc, #204]	@ (80063d4 <LSM6DSO_0_Probe+0x174>)
 8006306:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006308:	4b33      	ldr	r3, [pc, #204]	@ (80063d8 <LSM6DSO_0_Probe+0x178>)
 800630a:	4a31      	ldr	r2, [pc, #196]	@ (80063d0 <LSM6DSO_0_Probe+0x170>)
 800630c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800630e:	4b33      	ldr	r3, [pc, #204]	@ (80063dc <LSM6DSO_0_Probe+0x17c>)
 8006310:	4a33      	ldr	r2, [pc, #204]	@ (80063e0 <LSM6DSO_0_Probe+0x180>)
 8006312:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11d      	bne.n	8006356 <LSM6DSO_0_Probe+0xf6>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d018      	beq.n	8006356 <LSM6DSO_0_Probe+0xf6>
 8006324:	7b7b      	ldrb	r3, [r7, #13]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d115      	bne.n	8006356 <LSM6DSO_0_Probe+0xf6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800632a:	4b2e      	ldr	r3, [pc, #184]	@ (80063e4 <LSM6DSO_0_Probe+0x184>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4a2e      	ldr	r2, [pc, #184]	@ (80063e8 <LSM6DSO_0_Probe+0x188>)
 8006330:	492e      	ldr	r1, [pc, #184]	@ (80063ec <LSM6DSO_0_Probe+0x18c>)
 8006332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006336:	4b29      	ldr	r3, [pc, #164]	@ (80063dc <LSM6DSO_0_Probe+0x17c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <LSM6DSO_0_Probe+0x178>)
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <LSM6DSO_0_Probe+0xf2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800634a:	f06f 0304 	mvn.w	r3, #4
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006350:	e001      	b.n	8006356 <LSM6DSO_0_Probe+0xf6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
 8006354:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11d      	bne.n	8006398 <LSM6DSO_0_Probe+0x138>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d018      	beq.n	8006398 <LSM6DSO_0_Probe+0x138>
 8006366:	7b3b      	ldrb	r3, [r7, #12]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d115      	bne.n	8006398 <LSM6DSO_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800636c:	4b1d      	ldr	r3, [pc, #116]	@ (80063e4 <LSM6DSO_0_Probe+0x184>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <LSM6DSO_0_Probe+0x188>)
 8006372:	491f      	ldr	r1, [pc, #124]	@ (80063f0 <LSM6DSO_0_Probe+0x190>)
 8006374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006378:	4b18      	ldr	r3, [pc, #96]	@ (80063dc <LSM6DSO_0_Probe+0x17c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <LSM6DSO_0_Probe+0x178>)
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	4610      	mov	r0, r2
 8006384:	4798      	blx	r3
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <LSM6DSO_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800638c:	f06f 0304 	mvn.w	r3, #4
 8006390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006392:	e001      	b.n	8006398 <LSM6DSO_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006394:	2300      	movs	r3, #0
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <LSM6DSO_0_Probe+0x14e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <LSM6DSO_0_Probe+0x14e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063a8:	f06f 0304 	mvn.w	r3, #4
 80063ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80063ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3750      	adds	r7, #80	@ 0x50
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	08001515 	.word	0x08001515
 80063bc:	08001591 	.word	0x08001591
 80063c0:	08001645 	.word	0x08001645
 80063c4:	080015e1 	.word	0x080015e1
 80063c8:	080016a9 	.word	0x080016a9
 80063cc:	08006a11 	.word	0x08006a11
 80063d0:	20000e38 	.word	0x20000e38
 80063d4:	20000e2c 	.word	0x20000e2c
 80063d8:	20000df0 	.word	0x20000df0
 80063dc:	20000e20 	.word	0x20000e20
 80063e0:	20000074 	.word	0x20000074
 80063e4:	200000cc 	.word	0x200000cc
 80063e8:	20000dfc 	.word	0x20000dfc
 80063ec:	200000a8 	.word	0x200000a8
 80063f0:	20000084 	.word	0x20000084

080063f4 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b094      	sub	sp, #80	@ 0x50
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006400:	2300      	movs	r3, #0
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006404:	2333      	movs	r3, #51	@ 0x33
 8006406:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 800640a:	4b40      	ldr	r3, [pc, #256]	@ (800650c <LIS2DW12_0_Probe+0x118>)
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 800640e:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <LIS2DW12_0_Probe+0x11c>)
 8006410:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8006412:	4b40      	ldr	r3, [pc, #256]	@ (8006514 <LIS2DW12_0_Probe+0x120>)
 8006414:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8006416:	4b40      	ldr	r3, [pc, #256]	@ (8006518 <LIS2DW12_0_Probe+0x124>)
 8006418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 800641a:	4b40      	ldr	r3, [pc, #256]	@ (800651c <LIS2DW12_0_Probe+0x128>)
 800641c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 800641e:	4b40      	ldr	r3, [pc, #256]	@ (8006520 <LIS2DW12_0_Probe+0x12c>)
 8006420:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006426:	4619      	mov	r1, r3
 8006428:	483e      	ldr	r0, [pc, #248]	@ (8006524 <LIS2DW12_0_Probe+0x130>)
 800642a:	f7fb faf9 	bl	8001a20 <LIS2DW12_RegisterBusIO>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006434:	f06f 0306 	mvn.w	r3, #6
 8006438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800643a:	e062      	b.n	8006502 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800643c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8006440:	4619      	mov	r1, r3
 8006442:	4838      	ldr	r0, [pc, #224]	@ (8006524 <LIS2DW12_0_Probe+0x130>)
 8006444:	f7fb fbda 	bl	8001bfc <LIS2DW12_ReadID>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800644e:	f06f 0306 	mvn.w	r3, #6
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006454:	e055      	b.n	8006502 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8006456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800645a:	2b44      	cmp	r3, #68	@ 0x44
 800645c:	d003      	beq.n	8006466 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800645e:	f06f 0306 	mvn.w	r3, #6
 8006462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006464:	e04d      	b.n	8006502 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4619      	mov	r1, r3
 800646c:	482d      	ldr	r0, [pc, #180]	@ (8006524 <LIS2DW12_0_Probe+0x130>)
 800646e:	f7fb fbdb 	bl	8001c28 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006472:	7b7b      	ldrb	r3, [r7, #13]
 8006474:	461a      	mov	r2, r3
 8006476:	7b3b      	ldrb	r3, [r7, #12]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	431a      	orrs	r2, r3
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4313      	orrs	r3, r2
 8006482:	4a29      	ldr	r2, [pc, #164]	@ (8006528 <LIS2DW12_0_Probe+0x134>)
 8006484:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006486:	4b29      	ldr	r3, [pc, #164]	@ (800652c <LIS2DW12_0_Probe+0x138>)
 8006488:	4a26      	ldr	r2, [pc, #152]	@ (8006524 <LIS2DW12_0_Probe+0x130>)
 800648a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800648c:	4b28      	ldr	r3, [pc, #160]	@ (8006530 <LIS2DW12_0_Probe+0x13c>)
 800648e:	4a29      	ldr	r2, [pc, #164]	@ (8006534 <LIS2DW12_0_Probe+0x140>)
 8006490:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11e      	bne.n	80064d6 <LIS2DW12_0_Probe+0xe2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <LIS2DW12_0_Probe+0xe2>
 80064a2:	7b3b      	ldrb	r3, [r7, #12]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d116      	bne.n	80064d6 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80064a8:	4b23      	ldr	r3, [pc, #140]	@ (8006538 <LIS2DW12_0_Probe+0x144>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4a23      	ldr	r2, [pc, #140]	@ (800653c <LIS2DW12_0_Probe+0x148>)
 80064ae:	3303      	adds	r3, #3
 80064b0:	4923      	ldr	r1, [pc, #140]	@ (8006540 <LIS2DW12_0_Probe+0x14c>)
 80064b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80064b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006530 <LIS2DW12_0_Probe+0x13c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	@ (800652c <LIS2DW12_0_Probe+0x138>)
 80064be:	6852      	ldr	r2, [r2, #4]
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064ca:	f06f 0304 	mvn.w	r3, #4
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d0:	e001      	b.n	80064d6 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80064d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <LIS2DW12_0_Probe+0xf8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064e6:	f06f 0304 	mvn.w	r3, #4
 80064ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80064ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <LIS2DW12_0_Probe+0x10e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064fc:	f06f 0304 	mvn.w	r3, #4
 8006500:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8006502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8006504:	4618      	mov	r0, r3
 8006506:	3750      	adds	r7, #80	@ 0x50
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08001515 	.word	0x08001515
 8006510:	08001591 	.word	0x08001591
 8006514:	08001645 	.word	0x08001645
 8006518:	080015e1 	.word	0x080015e1
 800651c:	080016a9 	.word	0x080016a9
 8006520:	08006a11 	.word	0x08006a11
 8006524:	20000e70 	.word	0x20000e70
 8006528:	20000e2c 	.word	0x20000e2c
 800652c:	20000df0 	.word	0x20000df0
 8006530:	20000e20 	.word	0x20000e20
 8006534:	2000000c 	.word	0x2000000c
 8006538:	200000cc 	.word	0x200000cc
 800653c:	20000dfc 	.word	0x20000dfc
 8006540:	2000001c 	.word	0x2000001c

08006544 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b094      	sub	sp, #80	@ 0x50
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006550:	2300      	movs	r3, #0
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006554:	233d      	movs	r3, #61	@ 0x3d
 8006556:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 800655a:	4b40      	ldr	r3, [pc, #256]	@ (800665c <LIS2MDL_0_Probe+0x118>)
 800655c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 800655e:	4b40      	ldr	r3, [pc, #256]	@ (8006660 <LIS2MDL_0_Probe+0x11c>)
 8006560:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8006562:	4b40      	ldr	r3, [pc, #256]	@ (8006664 <LIS2MDL_0_Probe+0x120>)
 8006564:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8006566:	4b40      	ldr	r3, [pc, #256]	@ (8006668 <LIS2MDL_0_Probe+0x124>)
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 800656a:	4b40      	ldr	r3, [pc, #256]	@ (800666c <LIS2MDL_0_Probe+0x128>)
 800656c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 800656e:	4b40      	ldr	r3, [pc, #256]	@ (8006670 <LIS2MDL_0_Probe+0x12c>)
 8006570:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006572:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006576:	4619      	mov	r1, r3
 8006578:	483e      	ldr	r0, [pc, #248]	@ (8006674 <LIS2MDL_0_Probe+0x130>)
 800657a:	f7fc fcdd 	bl	8002f38 <LIS2MDL_RegisterBusIO>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006584:	f06f 0306 	mvn.w	r3, #6
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	e062      	b.n	8006652 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800658c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8006590:	4619      	mov	r1, r3
 8006592:	4838      	ldr	r0, [pc, #224]	@ (8006674 <LIS2MDL_0_Probe+0x130>)
 8006594:	f7fc fdec 	bl	8003170 <LIS2MDL_ReadID>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800659e:	f06f 0306 	mvn.w	r3, #6
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	e055      	b.n	8006652 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80065a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065aa:	2b40      	cmp	r3, #64	@ 0x40
 80065ac:	d003      	beq.n	80065b6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80065ae:	f06f 0306 	mvn.w	r3, #6
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b4:	e04d      	b.n	8006652 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	4619      	mov	r1, r3
 80065bc:	482d      	ldr	r0, [pc, #180]	@ (8006674 <LIS2MDL_0_Probe+0x130>)
 80065be:	f7fc fdfd 	bl	80031bc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80065c2:	7b7b      	ldrb	r3, [r7, #13]
 80065c4:	461a      	mov	r2, r3
 80065c6:	7b3b      	ldrb	r3, [r7, #12]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	431a      	orrs	r2, r3
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4313      	orrs	r3, r2
 80065d2:	4a29      	ldr	r2, [pc, #164]	@ (8006678 <LIS2MDL_0_Probe+0x134>)
 80065d4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80065d6:	4b29      	ldr	r3, [pc, #164]	@ (800667c <LIS2MDL_0_Probe+0x138>)
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <LIS2MDL_0_Probe+0x130>)
 80065da:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80065dc:	4b28      	ldr	r3, [pc, #160]	@ (8006680 <LIS2MDL_0_Probe+0x13c>)
 80065de:	4a29      	ldr	r2, [pc, #164]	@ (8006684 <LIS2MDL_0_Probe+0x140>)
 80065e0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80065e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11e      	bne.n	8006626 <LIS2MDL_0_Probe+0xe2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d019      	beq.n	8006626 <LIS2MDL_0_Probe+0xe2>
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d116      	bne.n	8006626 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80065f8:	4b23      	ldr	r3, [pc, #140]	@ (8006688 <LIS2MDL_0_Probe+0x144>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4a23      	ldr	r2, [pc, #140]	@ (800668c <LIS2MDL_0_Probe+0x148>)
 80065fe:	3306      	adds	r3, #6
 8006600:	4923      	ldr	r1, [pc, #140]	@ (8006690 <LIS2MDL_0_Probe+0x14c>)
 8006602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006606:	4b1e      	ldr	r3, [pc, #120]	@ (8006680 <LIS2MDL_0_Probe+0x13c>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1b      	ldr	r2, [pc, #108]	@ (800667c <LIS2MDL_0_Probe+0x138>)
 800660e:	6892      	ldr	r2, [r2, #8]
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800661a:	f06f 0304 	mvn.w	r3, #4
 800661e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006620:	e001      	b.n	8006626 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006622:	2300      	movs	r3, #0
 8006624:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <LIS2MDL_0_Probe+0xf8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006636:	f06f 0304 	mvn.w	r3, #4
 800663a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800663c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d107      	bne.n	8006652 <LIS2MDL_0_Probe+0x10e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800664c:	f06f 0304 	mvn.w	r3, #4
 8006650:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8006652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8006654:	4618      	mov	r0, r3
 8006656:	3750      	adds	r7, #80	@ 0x50
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	08001515 	.word	0x08001515
 8006660:	08001591 	.word	0x08001591
 8006664:	08001645 	.word	0x08001645
 8006668:	080015e1 	.word	0x080015e1
 800666c:	080016a9 	.word	0x080016a9
 8006670:	08006a11 	.word	0x08006a11
 8006674:	20000eac 	.word	0x20000eac
 8006678:	20000e2c 	.word	0x20000e2c
 800667c:	20000df0 	.word	0x20000df0
 8006680:	20000e20 	.word	0x20000e20
 8006684:	20000040 	.word	0x20000040
 8006688:	200000cc 	.word	0x200000cc
 800668c:	20000dfc 	.word	0x20000dfc
 8006690:	20000050 	.word	0x20000050

08006694 <log_init>:

UART_HandleTypeDef *log_huart;

static char log_buffer[LOG_BUFFER_SIZE];

void log_init(void *huart) {
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	log_huart = (UART_HandleTypeDef*) huart;
 800669c:	4a04      	ldr	r2, [pc, #16]	@ (80066b0 <log_init+0x1c>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000ee0 	.word	0x20000ee0

080066b4 <log_transmit>:

void log_transmit(uint8_t *data, uint16_t data_len) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(log_huart, data, data_len, LOG_UART_TIMEOUT);
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <log_transmit+0x24>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	887a      	ldrh	r2, [r7, #2]
 80066c6:	2364      	movs	r3, #100	@ 0x64
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	f004 fcfb 	bl	800b0c4 <HAL_UART_Transmit>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000ee0 	.word	0x20000ee0

080066dc <log_printf>:

void log_printf(const char *format, ...) {
 80066dc:	b40f      	push	{r0, r1, r2, r3}
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	607b      	str	r3, [r7, #4]
	vsnprintf(log_buffer, LOG_BUFFER_SIZE, format, argptr);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066f2:	4809      	ldr	r0, [pc, #36]	@ (8006718 <log_printf+0x3c>)
 80066f4:	f00c ff94 	bl	8013620 <vsniprintf>
	va_end(argptr);
	log_transmit((uint8_t*) log_buffer, strlen(log_buffer));
 80066f8:	4807      	ldr	r0, [pc, #28]	@ (8006718 <log_printf+0x3c>)
 80066fa:	f7f9 fd41 	bl	8000180 <strlen>
 80066fe:	4603      	mov	r3, r0
 8006700:	b29b      	uxth	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	4804      	ldr	r0, [pc, #16]	@ (8006718 <log_printf+0x3c>)
 8006706:	f7ff ffd5 	bl	80066b4 <log_transmit>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	20000ee4 	.word	0x20000ee4

0800671c <CalibrationLSM6DSO>:

#include "MEMS_library.h"

int32_t gyrxcalib = 0, gyrycalib = 0, gyrzcalib = 0, accxcalib = 0, accycalib = 0, acczcalib = 0;

void CalibrationLSM6DSO(){
 800671c:	b5b0      	push	{r4, r5, r7, lr}
 800671e:	b092      	sub	sp, #72	@ 0x48
 8006720:	af04      	add	r7, sp, #16
	LSM6DSO_data calib_data;
	calib_data = InitLSM6DSO_Struct(calib_data);
 8006722:	463d      	mov	r5, r7
 8006724:	466c      	mov	r4, sp
 8006726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800672a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800672e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006732:	f107 0318 	add.w	r3, r7, #24
 8006736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006738:	4628      	mov	r0, r5
 800673a:	f000 f8b3 	bl	80068a4 <InitLSM6DSO_Struct>
 800673e:	f107 0418 	add.w	r4, r7, #24
 8006742:	463d      	mov	r5, r7
 8006744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006748:	e895 0003 	ldmia.w	r5, {r0, r1}
 800674c:	e884 0003 	stmia.w	r4, {r0, r1}


	for(int i = 0; i<50; i++){
 8006750:	2300      	movs	r3, #0
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
 8006754:	e011      	b.n	800677a <CalibrationLSM6DSO+0x5e>
		IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &calib_data.axes_gyro);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	461a      	mov	r2, r3
 800675c:	2101      	movs	r1, #1
 800675e:	2000      	movs	r0, #0
 8006760:	f7ff fd3a 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
		IKS01A3_MOTION_SENSOR_GetAxes(1, MOTION_ACCELERO, &calib_data.axes_acce);
 8006764:	f107 0318 	add.w	r3, r7, #24
 8006768:	330c      	adds	r3, #12
 800676a:	461a      	mov	r2, r3
 800676c:	2102      	movs	r1, #2
 800676e:	2001      	movs	r0, #1
 8006770:	f7ff fd32 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
	for(int i = 0; i<50; i++){
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	3301      	adds	r3, #1
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	2b31      	cmp	r3, #49	@ 0x31
 800677e:	ddea      	ble.n	8006756 <CalibrationLSM6DSO+0x3a>
	}


	for(int i = 0; i<100; i++){
 8006780:	2300      	movs	r3, #0
 8006782:	633b      	str	r3, [r7, #48]	@ 0x30
 8006784:	e035      	b.n	80067f2 <CalibrationLSM6DSO+0xd6>
		IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &calib_data.axes_gyro);
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	461a      	mov	r2, r3
 800678c:	2101      	movs	r1, #1
 800678e:	2000      	movs	r0, #0
 8006790:	f7ff fd22 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
		IKS01A3_MOTION_SENSOR_GetAxes(1, MOTION_ACCELERO, &calib_data.axes_acce);
 8006794:	f107 0318 	add.w	r3, r7, #24
 8006798:	330c      	adds	r3, #12
 800679a:	461a      	mov	r2, r3
 800679c:	2102      	movs	r1, #2
 800679e:	2001      	movs	r0, #1
 80067a0:	f7ff fd1a 	bl	80061d8 <IKS01A3_MOTION_SENSOR_GetAxes>
		gyrxcalib += calib_data.axes_gyro.x;
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <CalibrationLSM6DSO+0x168>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4413      	add	r3, r2
 80067ac:	4a35      	ldr	r2, [pc, #212]	@ (8006884 <CalibrationLSM6DSO+0x168>)
 80067ae:	6013      	str	r3, [r2, #0]
//		printf("%d : %ld\n", i, gyrxcalib);
		gyrycalib += calib_data.axes_gyro.y;
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <CalibrationLSM6DSO+0x16c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4413      	add	r3, r2
 80067b8:	4a33      	ldr	r2, [pc, #204]	@ (8006888 <CalibrationLSM6DSO+0x16c>)
 80067ba:	6013      	str	r3, [r2, #0]
		gyrzcalib += calib_data.axes_gyro.z;
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	4b33      	ldr	r3, [pc, #204]	@ (800688c <CalibrationLSM6DSO+0x170>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4413      	add	r3, r2
 80067c4:	4a31      	ldr	r2, [pc, #196]	@ (800688c <CalibrationLSM6DSO+0x170>)
 80067c6:	6013      	str	r3, [r2, #0]
		accxcalib += calib_data.axes_acce.x;
 80067c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ca:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <CalibrationLSM6DSO+0x174>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4413      	add	r3, r2
 80067d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006890 <CalibrationLSM6DSO+0x174>)
 80067d2:	6013      	str	r3, [r2, #0]
		accycalib += calib_data.axes_acce.y;
 80067d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006894 <CalibrationLSM6DSO+0x178>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006894 <CalibrationLSM6DSO+0x178>)
 80067de:	6013      	str	r3, [r2, #0]
		acczcalib += calib_data.axes_acce.z;
 80067e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006898 <CalibrationLSM6DSO+0x17c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4413      	add	r3, r2
 80067e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006898 <CalibrationLSM6DSO+0x17c>)
 80067ea:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<100; i++){
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	3301      	adds	r3, #1
 80067f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b63      	cmp	r3, #99	@ 0x63
 80067f6:	ddc6      	ble.n	8006786 <CalibrationLSM6DSO+0x6a>
	}

	gyrxcalib = gyrxcalib/100;
 80067f8:	4b22      	ldr	r3, [pc, #136]	@ (8006884 <CalibrationLSM6DSO+0x168>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a27      	ldr	r2, [pc, #156]	@ (800689c <CalibrationLSM6DSO+0x180>)
 80067fe:	fb82 1203 	smull	r1, r2, r2, r3
 8006802:	1152      	asrs	r2, r2, #5
 8006804:	17db      	asrs	r3, r3, #31
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <CalibrationLSM6DSO+0x168>)
 800680a:	6013      	str	r3, [r2, #0]
	gyrycalib = gyrycalib/100;
 800680c:	4b1e      	ldr	r3, [pc, #120]	@ (8006888 <CalibrationLSM6DSO+0x16c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a22      	ldr	r2, [pc, #136]	@ (800689c <CalibrationLSM6DSO+0x180>)
 8006812:	fb82 1203 	smull	r1, r2, r2, r3
 8006816:	1152      	asrs	r2, r2, #5
 8006818:	17db      	asrs	r3, r3, #31
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	4a1a      	ldr	r2, [pc, #104]	@ (8006888 <CalibrationLSM6DSO+0x16c>)
 800681e:	6013      	str	r3, [r2, #0]
	gyrzcalib = gyrzcalib/100;
 8006820:	4b1a      	ldr	r3, [pc, #104]	@ (800688c <CalibrationLSM6DSO+0x170>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <CalibrationLSM6DSO+0x180>)
 8006826:	fb82 1203 	smull	r1, r2, r2, r3
 800682a:	1152      	asrs	r2, r2, #5
 800682c:	17db      	asrs	r3, r3, #31
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	4a16      	ldr	r2, [pc, #88]	@ (800688c <CalibrationLSM6DSO+0x170>)
 8006832:	6013      	str	r3, [r2, #0]
	accxcalib = accxcalib/100;
 8006834:	4b16      	ldr	r3, [pc, #88]	@ (8006890 <CalibrationLSM6DSO+0x174>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a18      	ldr	r2, [pc, #96]	@ (800689c <CalibrationLSM6DSO+0x180>)
 800683a:	fb82 1203 	smull	r1, r2, r2, r3
 800683e:	1152      	asrs	r2, r2, #5
 8006840:	17db      	asrs	r3, r3, #31
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	4a12      	ldr	r2, [pc, #72]	@ (8006890 <CalibrationLSM6DSO+0x174>)
 8006846:	6013      	str	r3, [r2, #0]
	accycalib = accycalib/100;
 8006848:	4b12      	ldr	r3, [pc, #72]	@ (8006894 <CalibrationLSM6DSO+0x178>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a13      	ldr	r2, [pc, #76]	@ (800689c <CalibrationLSM6DSO+0x180>)
 800684e:	fb82 1203 	smull	r1, r2, r2, r3
 8006852:	1152      	asrs	r2, r2, #5
 8006854:	17db      	asrs	r3, r3, #31
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	4a0e      	ldr	r2, [pc, #56]	@ (8006894 <CalibrationLSM6DSO+0x178>)
 800685a:	6013      	str	r3, [r2, #0]
	acczcalib = acczcalib/100;
 800685c:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <CalibrationLSM6DSO+0x17c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0e      	ldr	r2, [pc, #56]	@ (800689c <CalibrationLSM6DSO+0x180>)
 8006862:	fb82 1203 	smull	r1, r2, r2, r3
 8006866:	1152      	asrs	r2, r2, #5
 8006868:	17db      	asrs	r3, r3, #31
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	4a0a      	ldr	r2, [pc, #40]	@ (8006898 <CalibrationLSM6DSO+0x17c>)
 800686e:	6013      	str	r3, [r2, #0]
	printf("%ld\n", gyrxcalib);
 8006870:	4b04      	ldr	r3, [pc, #16]	@ (8006884 <CalibrationLSM6DSO+0x168>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	480a      	ldr	r0, [pc, #40]	@ (80068a0 <CalibrationLSM6DSO+0x184>)
 8006878:	f00c fe52 	bl	8013520 <iprintf>
}
 800687c:	bf00      	nop
 800687e:	3738      	adds	r7, #56	@ 0x38
 8006880:	46bd      	mov	sp, r7
 8006882:	bdb0      	pop	{r4, r5, r7, pc}
 8006884:	200010e4 	.word	0x200010e4
 8006888:	200010e8 	.word	0x200010e8
 800688c:	200010ec 	.word	0x200010ec
 8006890:	200010f0 	.word	0x200010f0
 8006894:	200010f4 	.word	0x200010f4
 8006898:	200010f8 	.word	0x200010f8
 800689c:	51eb851f 	.word	0x51eb851f
 80068a0:	08014930 	.word	0x08014930

080068a4 <InitLSM6DSO_Struct>:

LSM6DSO_data InitLSM6DSO_Struct(LSM6DSO_data _struct){
 80068a4:	b084      	sub	sp, #16
 80068a6:	b4b0      	push	{r4, r5, r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	f107 001c 	add.w	r0, r7, #28
 80068b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	_struct.axes_acce.x = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	_struct.axes_acce.y = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	_struct.axes_acce.z = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30
	_struct.axes_gyro.x = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
	_struct.axes_gyro.y = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	623b      	str	r3, [r7, #32]
	_struct.axes_gyro.z = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
	return _struct;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	461d      	mov	r5, r3
 80068d2:	f107 041c 	add.w	r4, r7, #28
 80068d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068de:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bcb0      	pop	{r4, r5, r7}
 80068ea:	b004      	add	sp, #16
 80068ec:	4770      	bx	lr
	...

080068f0 <CalibratedGet>:

LSM6DSO_data CalibratedGet(LSM6DSO_data mov_data){
 80068f0:	b084      	sub	sp, #16
 80068f2:	b4b0      	push	{r4, r5, r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	f107 001c 	add.w	r0, r7, #28
 80068fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mov_data.axes_acce.x = mov_data.axes_acce.x - accxcalib;
 8006902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006904:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <CalibratedGet+0x70>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	62bb      	str	r3, [r7, #40]	@ 0x28
	mov_data.axes_acce.y = mov_data.axes_acce.y - accycalib;
 800690c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <CalibratedGet+0x74>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mov_data.axes_acce.z = mov_data.axes_acce.z - acczcalib;
 8006916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006918:	4b13      	ldr	r3, [pc, #76]	@ (8006968 <CalibratedGet+0x78>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30
	mov_data.axes_gyro.x = mov_data.axes_gyro.x - gyrxcalib;
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	4b12      	ldr	r3, [pc, #72]	@ (800696c <CalibratedGet+0x7c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	61fb      	str	r3, [r7, #28]
	mov_data.axes_gyro.y = mov_data.axes_gyro.y - gyrycalib;
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <CalibratedGet+0x80>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	623b      	str	r3, [r7, #32]
	mov_data.axes_gyro.z = mov_data.axes_gyro.z - gyrzcalib;
 8006934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <CalibratedGet+0x84>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
	return mov_data;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	461d      	mov	r5, r3
 8006942:	f107 041c 	add.w	r4, r7, #28
 8006946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800694a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800694e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	bcb0      	pop	{r4, r5, r7}
 800695a:	b004      	add	sp, #16
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	200010f0 	.word	0x200010f0
 8006964:	200010f4 	.word	0x200010f4
 8006968:	200010f8 	.word	0x200010f8
 800696c:	200010e4 	.word	0x200010e4
 8006970:	200010e8 	.word	0x200010e8
 8006974:	200010ec 	.word	0x200010ec

08006978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006982:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <HAL_Init+0x3c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a0b      	ldr	r2, [pc, #44]	@ (80069b4 <HAL_Init+0x3c>)
 8006988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800698e:	2003      	movs	r0, #3
 8006990:	f000 f90f 	bl	8006bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006994:	200f      	movs	r0, #15
 8006996:	f7fa fcc1 	bl	800131c <HAL_InitTick>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	71fb      	strb	r3, [r7, #7]
 80069a4:	e001      	b.n	80069aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80069a6:	f7fa fb86 	bl	80010b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80069aa:	79fb      	ldrb	r3, [r7, #7]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	58004000 	.word	0x58004000

080069b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <HAL_IncTick+0x20>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_IncTick+0x24>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4413      	add	r3, r2
 80069c8:	4a04      	ldr	r2, [pc, #16]	@ (80069dc <HAL_IncTick+0x24>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	200000f4 	.word	0x200000f4
 80069dc:	200010fc 	.word	0x200010fc

080069e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return uwTick;
 80069e4:	4b03      	ldr	r3, [pc, #12]	@ (80069f4 <HAL_GetTick+0x14>)
 80069e6:	681b      	ldr	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200010fc 	.word	0x200010fc

080069f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80069fc:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <HAL_GetTickPrio+0x14>)
 80069fe:	681b      	ldr	r3, [r3, #0]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	200000f0 	.word	0x200000f0

08006a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a18:	f7ff ffe2 	bl	80069e0 <HAL_GetTick>
 8006a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a28:	d005      	beq.n	8006a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <HAL_Delay+0x44>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a36:	bf00      	nop
 8006a38:	f7ff ffd2 	bl	80069e0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d8f7      	bhi.n	8006a38 <HAL_Delay+0x28>
  {
  }
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200000f4 	.word	0x200000f4

08006a58 <__NVIC_SetPriorityGrouping>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a68:	4b0c      	ldr	r3, [pc, #48]	@ (8006a9c <__NVIC_SetPriorityGrouping+0x44>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a74:	4013      	ands	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a8a:	4a04      	ldr	r2, [pc, #16]	@ (8006a9c <__NVIC_SetPriorityGrouping+0x44>)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	60d3      	str	r3, [r2, #12]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <__NVIC_GetPriorityGrouping>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aa4:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	0a1b      	lsrs	r3, r3, #8
 8006aaa:	f003 0307 	and.w	r3, r3, #7
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	e000ed00 	.word	0xe000ed00

08006abc <__NVIC_EnableIRQ>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	db0b      	blt.n	8006ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 021f 	and.w	r2, r3, #31
 8006ad4:	4907      	ldr	r1, [pc, #28]	@ (8006af4 <__NVIC_EnableIRQ+0x38>)
 8006ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2001      	movs	r0, #1
 8006ade:	fa00 f202 	lsl.w	r2, r0, r2
 8006ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	e000e100 	.word	0xe000e100

08006af8 <__NVIC_SetPriority>:
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db0a      	blt.n	8006b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	490c      	ldr	r1, [pc, #48]	@ (8006b44 <__NVIC_SetPriority+0x4c>)
 8006b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b16:	0112      	lsls	r2, r2, #4
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b20:	e00a      	b.n	8006b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	4908      	ldr	r1, [pc, #32]	@ (8006b48 <__NVIC_SetPriority+0x50>)
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	0112      	lsls	r2, r2, #4
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	440b      	add	r3, r1
 8006b36:	761a      	strb	r2, [r3, #24]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	e000e100 	.word	0xe000e100
 8006b48:	e000ed00 	.word	0xe000ed00

08006b4c <NVIC_EncodePriority>:
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b089      	sub	sp, #36	@ 0x24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f1c3 0307 	rsb	r3, r3, #7
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	bf28      	it	cs
 8006b6a:	2304      	movcs	r3, #4
 8006b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3304      	adds	r3, #4
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d902      	bls.n	8006b7c <NVIC_EncodePriority+0x30>
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3b03      	subs	r3, #3
 8006b7a:	e000      	b.n	8006b7e <NVIC_EncodePriority+0x32>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43da      	mvns	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	401a      	ands	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b94:	f04f 31ff 	mov.w	r1, #4294967295
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9e:	43d9      	mvns	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ba4:	4313      	orrs	r3, r2
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3724      	adds	r7, #36	@ 0x24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff ff4c 	bl	8006a58 <__NVIC_SetPriorityGrouping>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006bd6:	f7ff ff63 	bl	8006aa0 <__NVIC_GetPriorityGrouping>
 8006bda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	6978      	ldr	r0, [r7, #20]
 8006be2:	f7ff ffb3 	bl	8006b4c <NVIC_EncodePriority>
 8006be6:	4602      	mov	r2, r0
 8006be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff ff82 	bl	8006af8 <__NVIC_SetPriority>
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff ff56 	bl	8006abc <__NVIC_EnableIRQ>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c26:	e14c      	b.n	8006ec2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	4013      	ands	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 813e 	beq.w	8006ebc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d005      	beq.n	8006c58 <HAL_GPIO_Init+0x40>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d130      	bne.n	8006cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	2203      	movs	r2, #3
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c8e:	2201      	movs	r2, #1
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	091b      	lsrs	r3, r3, #4
 8006ca4:	f003 0201 	and.w	r2, r3, #1
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d017      	beq.n	8006cf6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d123      	bne.n	8006d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	08da      	lsrs	r2, r3, #3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3208      	adds	r2, #8
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	220f      	movs	r2, #15
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4013      	ands	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	08da      	lsrs	r2, r3, #3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3208      	adds	r2, #8
 8006d44:	6939      	ldr	r1, [r7, #16]
 8006d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	2203      	movs	r2, #3
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 0203 	and.w	r2, r3, #3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8098 	beq.w	8006ebc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006d8c:	4a54      	ldr	r2, [pc, #336]	@ (8006ee0 <HAL_GPIO_Init+0x2c8>)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	089b      	lsrs	r3, r3, #2
 8006d92:	3302      	adds	r3, #2
 8006d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	220f      	movs	r2, #15
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4013      	ands	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006db6:	d019      	beq.n	8006dec <HAL_GPIO_Init+0x1d4>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a4a      	ldr	r2, [pc, #296]	@ (8006ee4 <HAL_GPIO_Init+0x2cc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <HAL_GPIO_Init+0x1d0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a49      	ldr	r2, [pc, #292]	@ (8006ee8 <HAL_GPIO_Init+0x2d0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00d      	beq.n	8006de4 <HAL_GPIO_Init+0x1cc>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a48      	ldr	r2, [pc, #288]	@ (8006eec <HAL_GPIO_Init+0x2d4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <HAL_GPIO_Init+0x1c8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a47      	ldr	r2, [pc, #284]	@ (8006ef0 <HAL_GPIO_Init+0x2d8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d101      	bne.n	8006ddc <HAL_GPIO_Init+0x1c4>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	e008      	b.n	8006dee <HAL_GPIO_Init+0x1d6>
 8006ddc:	2307      	movs	r3, #7
 8006dde:	e006      	b.n	8006dee <HAL_GPIO_Init+0x1d6>
 8006de0:	2303      	movs	r3, #3
 8006de2:	e004      	b.n	8006dee <HAL_GPIO_Init+0x1d6>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e002      	b.n	8006dee <HAL_GPIO_Init+0x1d6>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <HAL_GPIO_Init+0x1d6>
 8006dec:	2300      	movs	r3, #0
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	f002 0203 	and.w	r2, r2, #3
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	4093      	lsls	r3, r2
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006dfe:	4938      	ldr	r1, [pc, #224]	@ (8006ee0 <HAL_GPIO_Init+0x2c8>)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	089b      	lsrs	r3, r3, #2
 8006e04:	3302      	adds	r3, #2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e0c:	4b39      	ldr	r3, [pc, #228]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e30:	4a30      	ldr	r2, [pc, #192]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e36:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4013      	ands	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e5a:	4a26      	ldr	r2, [pc, #152]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e60:	4b24      	ldr	r3, [pc, #144]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006e8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8006ef4 <HAL_GPIO_Init+0x2dc>)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f47f aeab 	bne.w	8006c28 <HAL_GPIO_Init+0x10>
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	48000400 	.word	0x48000400
 8006ee8:	48000800 	.word	0x48000800
 8006eec:	48000c00 	.word	0x48000c00
 8006ef0:	48001000 	.word	0x48001000
 8006ef4:	58000800 	.word	0x58000800

08006ef8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006f06:	e0bb      	b.n	8007080 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006f08:	2201      	movs	r2, #1
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	4013      	ands	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80ae 	beq.w	800707a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006f1e:	4a5f      	ldr	r2, [pc, #380]	@ (800709c <HAL_GPIO_DeInit+0x1a4>)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	3302      	adds	r3, #2
 8006f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	220f      	movs	r2, #15
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006f46:	d019      	beq.n	8006f7c <HAL_GPIO_DeInit+0x84>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a55      	ldr	r2, [pc, #340]	@ (80070a0 <HAL_GPIO_DeInit+0x1a8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <HAL_GPIO_DeInit+0x80>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a54      	ldr	r2, [pc, #336]	@ (80070a4 <HAL_GPIO_DeInit+0x1ac>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00d      	beq.n	8006f74 <HAL_GPIO_DeInit+0x7c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a53      	ldr	r2, [pc, #332]	@ (80070a8 <HAL_GPIO_DeInit+0x1b0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <HAL_GPIO_DeInit+0x78>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a52      	ldr	r2, [pc, #328]	@ (80070ac <HAL_GPIO_DeInit+0x1b4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <HAL_GPIO_DeInit+0x74>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	e008      	b.n	8006f7e <HAL_GPIO_DeInit+0x86>
 8006f6c:	2307      	movs	r3, #7
 8006f6e:	e006      	b.n	8006f7e <HAL_GPIO_DeInit+0x86>
 8006f70:	2303      	movs	r3, #3
 8006f72:	e004      	b.n	8006f7e <HAL_GPIO_DeInit+0x86>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e002      	b.n	8006f7e <HAL_GPIO_DeInit+0x86>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_GPIO_DeInit+0x86>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	f002 0203 	and.w	r2, r2, #3
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	4093      	lsls	r3, r2
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d136      	bne.n	8006ffc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006f8e:	4b48      	ldr	r3, [pc, #288]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006f90:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	43db      	mvns	r3, r3
 8006f98:	4945      	ldr	r1, [pc, #276]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006fa0:	4b43      	ldr	r3, [pc, #268]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	4941      	ldr	r1, [pc, #260]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	493d      	ldr	r1, [pc, #244]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	4939      	ldr	r1, [pc, #228]	@ (80070b0 <HAL_GPIO_DeInit+0x1b8>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	220f      	movs	r2, #15
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006fde:	4a2f      	ldr	r2, [pc, #188]	@ (800709c <HAL_GPIO_DeInit+0x1a4>)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	43da      	mvns	r2, r3
 8006fee:	482b      	ldr	r0, [pc, #172]	@ (800709c <HAL_GPIO_DeInit+0x1a4>)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	089b      	lsrs	r3, r3, #2
 8006ff4:	400a      	ands	r2, r1
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	2103      	movs	r1, #3
 8007006:	fa01 f303 	lsl.w	r3, r1, r3
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	08da      	lsrs	r2, r3, #3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3208      	adds	r2, #8
 8007018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	220f      	movs	r2, #15
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	43db      	mvns	r3, r3
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	08d2      	lsrs	r2, r2, #3
 8007030:	4019      	ands	r1, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3208      	adds	r2, #8
 8007036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	2103      	movs	r1, #3
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	2101      	movs	r1, #1
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	401a      	ands	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	2103      	movs	r1, #3
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	401a      	ands	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	609a      	str	r2, [r3, #8]
    }

    position++;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	3301      	adds	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	f47f af3d 	bne.w	8006f08 <HAL_GPIO_DeInit+0x10>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40010000 	.word	0x40010000
 80070a0:	48000400 	.word	0x48000400
 80070a4:	48000800 	.word	0x48000800
 80070a8:	48000c00 	.word	0x48000c00
 80070ac:	48001000 	.word	0x48001000
 80070b0:	58000800 	.word	0x58000800

080070b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	807b      	strh	r3, [r7, #2]
 80070c0:	4613      	mov	r3, r2
 80070c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070c4:	787b      	ldrb	r3, [r7, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070ca:	887a      	ldrh	r2, [r7, #2]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070d0:	e002      	b.n	80070d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80070ee:	4b08      	ldr	r3, [pc, #32]	@ (8007110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070fa:	4a05      	ldr	r2, [pc, #20]	@ (8007110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f806 	bl	8007114 <HAL_GPIO_EXTI_Callback>
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	58000800 	.word	0x58000800

08007114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e08d      	b.n	8007258 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f8b4 	bl	80072be <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2224      	movs	r2, #36	@ 0x24
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800717a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800718a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071a0:	609a      	str	r2, [r3, #8]
 80071a2:	e006      	b.n	80071b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80071b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d108      	bne.n	80071cc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	e007      	b.n	80071dc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69d9      	ldr	r1, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e021      	b.n	80072b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2224      	movs	r2, #36	@ 0x24
 8007276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0201 	bic.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f821 	bl	80072d2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	817b      	strh	r3, [r7, #10]
 80072fa:	460b      	mov	r3, r1
 80072fc:	813b      	strh	r3, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b20      	cmp	r3, #32
 800730c:	f040 80f9 	bne.w	8007502 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_I2C_Mem_Write+0x34>
 8007316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007322:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0ed      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_I2C_Mem_Write+0x4e>
 8007332:	2302      	movs	r3, #2
 8007334:	e0e6      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800733e:	f7ff fb4f 	bl	80069e0 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	2319      	movs	r3, #25
 800734a:	2201      	movs	r2, #1
 800734c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fadd 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e0d1      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2221      	movs	r2, #33	@ 0x21
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2240      	movs	r2, #64	@ 0x40
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007388:	88f8      	ldrh	r0, [r7, #6]
 800738a:	893a      	ldrh	r2, [r7, #8]
 800738c:	8979      	ldrh	r1, [r7, #10]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4603      	mov	r3, r0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f9ed 	bl	8007778 <I2C_RequestMemoryWrite>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e0a9      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2bff      	cmp	r3, #255	@ 0xff
 80073b8:	d90e      	bls.n	80073d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	@ 0xff
 80073be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	8979      	ldrh	r1, [r7, #10]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fc61 	bl	8007c98 <I2C_TransferConfig>
 80073d6:	e00f      	b.n	80073f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	8979      	ldrh	r1, [r7, #10]
 80073ea:	2300      	movs	r3, #0
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fc50 	bl	8007c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fae0 	bl	80079c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e07b      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d034      	beq.n	80074b0 <HAL_I2C_Mem_Write+0x1c8>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d130      	bne.n	80074b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	2200      	movs	r2, #0
 8007456:	2180      	movs	r1, #128	@ 0x80
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fa59 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e04d      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800746c:	b29b      	uxth	r3, r3
 800746e:	2bff      	cmp	r3, #255	@ 0xff
 8007470:	d90e      	bls.n	8007490 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	22ff      	movs	r2, #255	@ 0xff
 8007476:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747c:	b2da      	uxtb	r2, r3
 800747e:	8979      	ldrh	r1, [r7, #10]
 8007480:	2300      	movs	r3, #0
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fc05 	bl	8007c98 <I2C_TransferConfig>
 800748e:	e00f      	b.n	80074b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	8979      	ldrh	r1, [r7, #10]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fbf4 	bl	8007c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d19e      	bne.n	80073f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fac6 	bl	8007a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e01a      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2220      	movs	r2, #32
 80074d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6859      	ldr	r1, [r3, #4]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b0a      	ldr	r3, [pc, #40]	@ (800750c <HAL_I2C_Mem_Write+0x224>)
 80074e2:	400b      	ands	r3, r1
 80074e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	e000      	b.n	8007504 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	fe00e800 	.word	0xfe00e800

08007510 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4603      	mov	r3, r0
 8007520:	817b      	strh	r3, [r7, #10]
 8007522:	460b      	mov	r3, r1
 8007524:	813b      	strh	r3, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b20      	cmp	r3, #32
 8007534:	f040 80fd 	bne.w	8007732 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_I2C_Mem_Read+0x34>
 800753e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800754a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0f1      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_I2C_Mem_Read+0x4e>
 800755a:	2302      	movs	r3, #2
 800755c:	e0ea      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007566:	f7ff fa3b 	bl	80069e0 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2319      	movs	r3, #25
 8007572:	2201      	movs	r2, #1
 8007574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f9c9 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e0d5      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2222      	movs	r2, #34	@ 0x22
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2240      	movs	r2, #64	@ 0x40
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80075a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075b0:	88f8      	ldrh	r0, [r7, #6]
 80075b2:	893a      	ldrh	r2, [r7, #8]
 80075b4:	8979      	ldrh	r1, [r7, #10]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4603      	mov	r3, r0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f92d 	bl	8007820 <I2C_RequestMemoryRead>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0ad      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2bff      	cmp	r3, #255	@ 0xff
 80075e0:	d90e      	bls.n	8007600 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	22ff      	movs	r2, #255	@ 0xff
 80075e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	8979      	ldrh	r1, [r7, #10]
 80075f0:	4b52      	ldr	r3, [pc, #328]	@ (800773c <HAL_I2C_Mem_Read+0x22c>)
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fb4d 	bl	8007c98 <I2C_TransferConfig>
 80075fe:	e00f      	b.n	8007620 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	8979      	ldrh	r1, [r7, #10]
 8007612:	4b4a      	ldr	r3, [pc, #296]	@ (800773c <HAL_I2C_Mem_Read+0x22c>)
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fb3c 	bl	8007c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	2200      	movs	r2, #0
 8007628:	2104      	movs	r1, #4
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 f970 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e07c      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d034      	beq.n	80076e0 <HAL_I2C_Mem_Read+0x1d0>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767a:	2b00      	cmp	r3, #0
 800767c:	d130      	bne.n	80076e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f941 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e04d      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	2bff      	cmp	r3, #255	@ 0xff
 80076a0:	d90e      	bls.n	80076c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	22ff      	movs	r2, #255	@ 0xff
 80076a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	8979      	ldrh	r1, [r7, #10]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 faed 	bl	8007c98 <I2C_TransferConfig>
 80076be:	e00f      	b.n	80076e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	8979      	ldrh	r1, [r7, #10]
 80076d2:	2300      	movs	r3, #0
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fadc 	bl	8007c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d19a      	bne.n	8007620 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f9ae 	bl	8007a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e01a      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2220      	movs	r2, #32
 8007704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6859      	ldr	r1, [r3, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <HAL_I2C_Mem_Read+0x230>)
 8007712:	400b      	ands	r3, r1
 8007714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	e000      	b.n	8007734 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
  }
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	80002400 	.word	0x80002400
 8007740:	fe00e800 	.word	0xfe00e800

08007744 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007752:	b2db      	uxtb	r3, r3
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	4608      	mov	r0, r1
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	4603      	mov	r3, r0
 8007788:	817b      	strh	r3, [r7, #10]
 800778a:	460b      	mov	r3, r1
 800778c:	813b      	strh	r3, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	b2da      	uxtb	r2, r3
 8007796:	8979      	ldrh	r1, [r7, #10]
 8007798:	4b20      	ldr	r3, [pc, #128]	@ (800781c <I2C_RequestMemoryWrite+0xa4>)
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa79 	bl	8007c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	69b9      	ldr	r1, [r7, #24]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f909 	bl	80079c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e02c      	b.n	8007814 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d105      	bne.n	80077cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077c0:	893b      	ldrh	r3, [r7, #8]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80077ca:	e015      	b.n	80077f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f8ef 	bl	80079c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e012      	b.n	8007814 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077ee:	893b      	ldrh	r3, [r7, #8]
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2200      	movs	r2, #0
 8007800:	2180      	movs	r1, #128	@ 0x80
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f884 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	80002000 	.word	0x80002000

08007820 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	461a      	mov	r2, r3
 800782e:	4603      	mov	r3, r0
 8007830:	817b      	strh	r3, [r7, #10]
 8007832:	460b      	mov	r3, r1
 8007834:	813b      	strh	r3, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	8979      	ldrh	r1, [r7, #10]
 8007840:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <I2C_RequestMemoryRead+0xa4>)
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fa26 	bl	8007c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	69b9      	ldr	r1, [r7, #24]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f8b6 	bl	80079c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e02c      	b.n	80078ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d105      	bne.n	8007872 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007870:	e015      	b.n	800789e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	0a1b      	lsrs	r3, r3, #8
 8007876:	b29b      	uxth	r3, r3
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f89c 	bl	80079c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e012      	b.n	80078ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007894:	893b      	ldrh	r3, [r7, #8]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2140      	movs	r1, #64	@ 0x40
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f831 	bl	8007910 <I2C_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	80002000 	.word	0x80002000

080078c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d103      	bne.n	80078e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d007      	beq.n	8007904 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	619a      	str	r2, [r3, #24]
  }
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007920:	e03b      	b.n	800799a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f8d6 	bl	8007ad8 <I2C_IsErrorOccurred>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e041      	b.n	80079ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d02d      	beq.n	800799a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800793e:	f7ff f84f 	bl	80069e0 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d302      	bcc.n	8007954 <I2C_WaitOnFlagUntilTimeout+0x44>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d122      	bne.n	800799a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4013      	ands	r3, r2
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	429a      	cmp	r2, r3
 8007970:	d113      	bne.n	800799a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e00f      	b.n	80079ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4013      	ands	r3, r2
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d0b4      	beq.n	8007922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079ce:	e033      	b.n	8007a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f87f 	bl	8007ad8 <I2C_IsErrorOccurred>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e031      	b.n	8007a48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d025      	beq.n	8007a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ec:	f7fe fff8 	bl	80069e0 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11a      	bne.n	8007a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d013      	beq.n	8007a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e007      	b.n	8007a48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d1c4      	bne.n	80079d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a5c:	e02f      	b.n	8007abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f838 	bl	8007ad8 <I2C_IsErrorOccurred>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e02d      	b.n	8007ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fe ffb5 	bl	80069e0 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d013      	beq.n	8007abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e007      	b.n	8007ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d1c8      	bne.n	8007a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	@ 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d068      	beq.n	8007bd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2210      	movs	r2, #16
 8007b0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b0c:	e049      	b.n	8007ba2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d045      	beq.n	8007ba2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b16:	f7fe ff63 	bl	80069e0 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <I2C_IsErrorOccurred+0x54>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d13a      	bne.n	8007ba2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b4e:	d121      	bne.n	8007b94 <I2C_IsErrorOccurred+0xbc>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b56:	d01d      	beq.n	8007b94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b58:	7cfb      	ldrb	r3, [r7, #19]
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d01a      	beq.n	8007b94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b6e:	f7fe ff37 	bl	80069e0 <HAL_GetTick>
 8007b72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b74:	e00e      	b.n	8007b94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b76:	f7fe ff33 	bl	80069e0 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b19      	cmp	r3, #25
 8007b82:	d907      	bls.n	8007b94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	f043 0320 	orr.w	r3, r3, #32
 8007b8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007b92:	e006      	b.n	8007ba2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d1e9      	bne.n	8007b76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d003      	beq.n	8007bb8 <I2C_IsErrorOccurred+0xe0>
 8007bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0aa      	beq.n	8007b0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	f043 0304 	orr.w	r3, r3, #4
 8007bce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00b      	beq.n	8007c22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f043 0308 	orr.w	r3, r3, #8
 8007c10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01c      	beq.n	8007c86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fe3b 	bl	80078c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <I2C_IsErrorOccurred+0x1bc>)
 8007c5e:	400b      	ands	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3728      	adds	r7, #40	@ 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	fe00e800 	.word	0xfe00e800

08007c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	817b      	strh	r3, [r7, #10]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cb0:	7a7b      	ldrb	r3, [r7, #9]
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	0d5b      	lsrs	r3, r3, #21
 8007cd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007cd6:	4b08      	ldr	r3, [pc, #32]	@ (8007cf8 <I2C_TransferConfig+0x60>)
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	ea02 0103 	and.w	r1, r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	03ff63ff 	.word	0x03ff63ff

08007cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d138      	bne.n	8007d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e032      	b.n	8007d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	@ 0x24
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d139      	bne.n	8007e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e033      	b.n	8007e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2224      	movs	r2, #36	@ 0x24
 8007dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e1c:	2302      	movs	r3, #2
  }
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0c0      	b.n	8007fbe <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7f9 f9f3 	bl	800123c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f003 ff06 	bl	800bc74 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	e03e      	b.n	8007eec <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e6e:	7bfa      	ldrb	r2, [r7, #15]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	440b      	add	r3, r1
 8007e7c:	3311      	adds	r3, #17
 8007e7e:	2201      	movs	r2, #1
 8007e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e82:	7bfa      	ldrb	r2, [r7, #15]
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	440b      	add	r3, r1
 8007e90:	3310      	adds	r3, #16
 8007e92:	7bfa      	ldrb	r2, [r7, #15]
 8007e94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e96:	7bfa      	ldrb	r2, [r7, #15]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3313      	adds	r3, #19
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007eaa:	7bfa      	ldrb	r2, [r7, #15]
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3320      	adds	r3, #32
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ebe:	7bfa      	ldrb	r2, [r7, #15]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	440b      	add	r3, r1
 8007ecc:	3324      	adds	r3, #36	@ 0x24
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	440b      	add	r3, r1
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3bb      	bcc.n	8007e6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
 8007efa:	e044      	b.n	8007f86 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007efc:	7bfa      	ldrb	r2, [r7, #15]
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	440b      	add	r3, r1
 8007f0a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f12:	7bfa      	ldrb	r2, [r7, #15]
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	440b      	add	r3, r1
 8007f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f24:	7bfa      	ldrb	r2, [r7, #15]
 8007f26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f28:	7bfa      	ldrb	r2, [r7, #15]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	440b      	add	r3, r1
 8007f36:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f3e:	7bfa      	ldrb	r2, [r7, #15]
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	440b      	add	r3, r1
 8007f4c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f54:	7bfa      	ldrb	r2, [r7, #15]
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	440b      	add	r3, r1
 8007f62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f6a:	7bfa      	ldrb	r2, [r7, #15]
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	440b      	add	r3, r1
 8007f78:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	3301      	adds	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	7bfa      	ldrb	r2, [r7, #15]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3b5      	bcc.n	8007efc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007f9c:	f003 fe85 	bl	800bcaa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	7a9b      	ldrb	r3, [r3, #10]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d102      	bne.n	8007fbc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f805 	bl	8007fc6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f043 0301 	orr.w	r3, r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008020:	4b05      	ldr	r3, [pc, #20]	@ (8008038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a04      	ldr	r2, [pc, #16]	@ (8008038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800802a:	6013      	str	r3, [r2, #0]
}
 800802c:	bf00      	nop
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	58000400 	.word	0x58000400

0800803c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008040:	4b04      	ldr	r3, [pc, #16]	@ (8008054 <HAL_PWREx_GetVoltageRange+0x18>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8008048:	4618      	mov	r0, r3
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	58000400 	.word	0x58000400

08008058 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800805c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806a:	d101      	bne.n	8008070 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_RCC_HSE_Enable>:
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800808a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800808e:	6013      	str	r3, [r2, #0]
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <LL_RCC_HSE_Disable>:
{
 800809a:	b480      	push	{r7}
 800809c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ac:	6013      	str	r3, [r2, #0]
}
 80080ae:	bf00      	nop
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <LL_RCC_HSE_IsReady>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80080bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ca:	d101      	bne.n	80080d0 <LL_RCC_HSE_IsReady+0x18>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <LL_RCC_HSE_IsReady+0x1a>
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <LL_RCC_HSI_Enable>:
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80080e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ee:	6013      	str	r3, [r2, #0]
}
 80080f0:	bf00      	nop
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <LL_RCC_HSI_Disable>:
{
 80080fa:	b480      	push	{r7}
 80080fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80080fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <LL_RCC_HSI_IsReady>:
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800811c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800812a:	d101      	bne.n	8008130 <LL_RCC_HSI_IsReady+0x18>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <LL_RCC_HSI_IsReady+0x1a>
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <LL_RCC_HSI_SetCalibTrimming>:
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008156:	4313      	orrs	r3, r2
 8008158:	604b      	str	r3, [r1, #4]
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <LL_RCC_HSI48_Enable>:
{
 8008166:	b480      	push	{r7}
 8008168:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800816a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800816e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800817e:	bf00      	nop
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <LL_RCC_HSI48_Disable>:
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800818c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008190:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80081a0:	bf00      	nop
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <LL_RCC_HSI48_IsReady>:
{
 80081aa:	b480      	push	{r7}
 80081ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d101      	bne.n	80081c2 <LL_RCC_HSI48_IsReady+0x18>
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <LL_RCC_HSI48_IsReady+0x1a>
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <LL_RCC_LSE_Enable>:
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80081e6:	bf00      	nop
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <LL_RCC_LSE_Disable>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <LL_RCC_LSE_EnableBypass>:
{
 8008212:	b480      	push	{r7}
 8008214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008222:	f043 0304 	orr.w	r3, r3, #4
 8008226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800822a:	bf00      	nop
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <LL_RCC_LSE_DisableBypass>:
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008244:	f023 0304 	bic.w	r3, r3, #4
 8008248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008256:	b480      	push	{r7}
 8008258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800825a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b02      	cmp	r3, #2
 8008268:	d101      	bne.n	800826e <LL_RCC_LSE_IsReady+0x18>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <LL_RCC_LSE_IsReady+0x1a>
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800827a:	b480      	push	{r7}
 800827c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800827e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008286:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008292:	bf00      	nop
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80082a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80082b4:	bf00      	nop
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80082be:	b480      	push	{r7}
 80082c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80082c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d101      	bne.n	80082d6 <LL_RCC_LSI1_IsReady+0x18>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <LL_RCC_LSI1_IsReady+0x1a>
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80082e2:	b480      	push	{r7}
 80082e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80082e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082f2:	f043 0304 	orr.w	r3, r3, #4
 80082f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80082fa:	bf00      	nop
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008310:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800831c:	bf00      	nop
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800832a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800832e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b08      	cmp	r3, #8
 8008338:	d101      	bne.n	800833e <LL_RCC_LSI2_IsReady+0x18>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <LL_RCC_LSI2_IsReady+0x1a>
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800835a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800837c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	6013      	str	r3, [r2, #0]
}
 800838c:	bf00      	nop
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8008396:	b480      	push	{r7}
 8008398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	6013      	str	r3, [r2, #0]
}
 80083aa:	bf00      	nop
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80083b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d101      	bne.n	80083ca <LL_RCC_MSI_IsReady+0x16>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <LL_RCC_MSI_IsReady+0x18>
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80083de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800840e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2bb0      	cmp	r3, #176	@ 0xb0
 8008414:	d901      	bls.n	800841a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8008416:	23b0      	movs	r3, #176	@ 0xb0
 8008418:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800841a:	687b      	ldr	r3, [r7, #4]
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008442:	4313      	orrs	r3, r2
 8008444:	604b      	str	r3, [r1, #4]
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800845a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 0203 	bic.w	r2, r3, #3
 8008464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4313      	orrs	r3, r2
 800846c:	608b      	str	r3, [r1, #8]
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800847a:	b480      	push	{r7}
 800847c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800847e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 030c 	and.w	r3, r3, #12
}
 8008488:	4618      	mov	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800849a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	608b      	str	r3, [r1, #8]
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80084c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80084ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084f6:	f023 020f 	bic.w	r2, r3, #15
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	091b      	lsrs	r3, r3, #4
 80084fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800851c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4313      	orrs	r3, r2
 800852e:	608b      	str	r3, [r1, #8]
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800854e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4313      	orrs	r3, r2
 8008556:	608b      	str	r3, [r1, #8]
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008572:	4618      	mov	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8008580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008584:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800858c:	4618      	mov	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8008596:	b480      	push	{r7}
 8008598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800859a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800859e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80085b2:	b480      	push	{r7}
 80085b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80085b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80085ca:	b480      	push	{r7}
 80085cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80085ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80085d8:	4618      	mov	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80085e2:	b480      	push	{r7}
 80085e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80085e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800860e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008612:	6013      	str	r3, [r2, #0]
}
 8008614:	bf00      	nop
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800861e:	b480      	push	{r7}
 8008620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800862c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008630:	d101      	bne.n	8008636 <LL_RCC_PLL_IsReady+0x18>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <LL_RCC_PLL_IsReady+0x1a>
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008642:	b480      	push	{r7}
 8008644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	0a1b      	lsrs	r3, r3, #8
 800864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8008652:	4618      	mov	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800866a:	4618      	mov	r0, r3
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8008682:	4618      	mov	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f003 0303 	and.w	r3, r3, #3
}
 800869a:	4618      	mov	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80086a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b6:	d101      	bne.n	80086bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80086d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086dc:	d101      	bne.n	80086e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80086f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80086fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008702:	d101      	bne.n	8008708 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008726:	d101      	bne.n	800872c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800874a:	d101      	bne.n	8008750 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b08d      	sub	sp, #52	@ 0x34
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e363      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 808d 	beq.w	8008896 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877c:	f7ff fe7d 	bl	800847a <LL_RCC_GetSysClkSource>
 8008780:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008782:	f7ff ff83 	bl	800868c <LL_RCC_PLL_GetMainSource>
 8008786:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <HAL_RCC_OscConfig+0x3e>
 800878e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d147      	bne.n	8008824 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b01      	cmp	r3, #1
 8008798:	d144      	bne.n	8008824 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e347      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80087aa:	f7ff fe28 	bl	80083fe <LL_RCC_MSI_GetRange>
 80087ae:	4603      	mov	r3, r0
 80087b0:	429c      	cmp	r4, r3
 80087b2:	d914      	bls.n	80087de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fd61 	bl	8009280 <RCC_SetFlashLatencyFromMSIRange>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e336      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fe02 	bl	80083d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fe26 	bl	8008428 <LL_RCC_MSI_SetCalibTrimming>
 80087dc:	e013      	b.n	8008806 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fdf7 	bl	80083d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fe1b 	bl	8008428 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fd42 	bl	8009280 <RCC_SetFlashLatencyFromMSIRange>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e317      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008806:	f000 fcc9 	bl	800919c <HAL_RCC_GetHCLKFreq>
 800880a:	4603      	mov	r3, r0
 800880c:	4aa4      	ldr	r2, [pc, #656]	@ (8008aa0 <HAL_RCC_OscConfig+0x344>)
 800880e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008810:	4ba4      	ldr	r3, [pc, #656]	@ (8008aa4 <HAL_RCC_OscConfig+0x348>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7f8 fd81 	bl	800131c <HAL_InitTick>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d039      	beq.n	8008894 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e308      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01e      	beq.n	800886a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800882c:	f7ff fda4 	bl	8008378 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008830:	f7fe f8d6 	bl	80069e0 <HAL_GetTick>
 8008834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008838:	f7fe f8d2 	bl	80069e0 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e2f5      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800884a:	f7ff fdb3 	bl	80083b4 <LL_RCC_MSI_IsReady>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f1      	beq.n	8008838 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fdbc 	bl	80083d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fde0 	bl	8008428 <LL_RCC_MSI_SetCalibTrimming>
 8008868:	e015      	b.n	8008896 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800886a:	f7ff fd94 	bl	8008396 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800886e:	f7fe f8b7 	bl	80069e0 <HAL_GetTick>
 8008872:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008874:	e008      	b.n	8008888 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008876:	f7fe f8b3 	bl	80069e0 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e2d6      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008888:	f7ff fd94 	bl	80083b4 <LL_RCC_MSI_IsReady>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f1      	bne.n	8008876 <HAL_RCC_OscConfig+0x11a>
 8008892:	e000      	b.n	8008896 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008894:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d047      	beq.n	8008932 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088a2:	f7ff fdea 	bl	800847a <LL_RCC_GetSysClkSource>
 80088a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088a8:	f7ff fef0 	bl	800868c <LL_RCC_PLL_GetMainSource>
 80088ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d005      	beq.n	80088c0 <HAL_RCC_OscConfig+0x164>
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	2b0c      	cmp	r3, #12
 80088b8:	d108      	bne.n	80088cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d105      	bne.n	80088cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d134      	bne.n	8008932 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e2b4      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d4:	d102      	bne.n	80088dc <HAL_RCC_OscConfig+0x180>
 80088d6:	f7ff fbd1 	bl	800807c <LL_RCC_HSE_Enable>
 80088da:	e001      	b.n	80088e0 <HAL_RCC_OscConfig+0x184>
 80088dc:	f7ff fbdd 	bl	800809a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d012      	beq.n	800890e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fe f87a 	bl	80069e0 <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088f0:	f7fe f876 	bl	80069e0 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b64      	cmp	r3, #100	@ 0x64
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e299      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008902:	f7ff fbd9 	bl	80080b8 <LL_RCC_HSE_IsReady>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f1      	beq.n	80088f0 <HAL_RCC_OscConfig+0x194>
 800890c:	e011      	b.n	8008932 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890e:	f7fe f867 	bl	80069e0 <HAL_GetTick>
 8008912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008914:	e008      	b.n	8008928 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008916:	f7fe f863 	bl	80069e0 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b64      	cmp	r3, #100	@ 0x64
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e286      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008928:	f7ff fbc6 	bl	80080b8 <LL_RCC_HSE_IsReady>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f1      	bne.n	8008916 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d04c      	beq.n	80089d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800893e:	f7ff fd9c 	bl	800847a <LL_RCC_GetSysClkSource>
 8008942:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008944:	f7ff fea2 	bl	800868c <LL_RCC_PLL_GetMainSource>
 8008948:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d005      	beq.n	800895c <HAL_RCC_OscConfig+0x200>
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b0c      	cmp	r3, #12
 8008954:	d10e      	bne.n	8008974 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d10b      	bne.n	8008974 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e266      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff fbe5 	bl	800813c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008972:	e031      	b.n	80089d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d019      	beq.n	80089b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800897c:	f7ff fbae 	bl	80080dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008980:	f7fe f82e 	bl	80069e0 <HAL_GetTick>
 8008984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008988:	f7fe f82a 	bl	80069e0 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e24d      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800899a:	f7ff fbbd 	bl	8008118 <LL_RCC_HSI_IsReady>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0f1      	beq.n	8008988 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fbc7 	bl	800813c <LL_RCC_HSI_SetCalibTrimming>
 80089ae:	e013      	b.n	80089d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089b0:	f7ff fba3 	bl	80080fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b4:	f7fe f814 	bl	80069e0 <HAL_GetTick>
 80089b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089bc:	f7fe f810 	bl	80069e0 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e233      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80089ce:	f7ff fba3 	bl	8008118 <LL_RCC_HSI_IsReady>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f1      	bne.n	80089bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80a3 	beq.w	8008b38 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d076      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d046      	beq.n	8008a94 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008a06:	f7ff fc5a 	bl	80082be <LL_RCC_LSI1_IsReady>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d113      	bne.n	8008a38 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008a10:	f7ff fc33 	bl	800827a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a14:	f7fd ffe4 	bl	80069e0 <HAL_GetTick>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a1c:	f7fd ffe0 	bl	80069e0 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e203      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008a2e:	f7ff fc46 	bl	80082be <LL_RCC_LSI1_IsReady>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0f1      	beq.n	8008a1c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008a38:	f7ff fc53 	bl	80082e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3c:	f7fd ffd0 	bl	80069e0 <HAL_GetTick>
 8008a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008a44:	f7fd ffcc 	bl	80069e0 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e1ef      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008a56:	f7ff fc66 	bl	8008326 <LL_RCC_LSI2_IsReady>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0f1      	beq.n	8008a44 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fc70 	bl	800834a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008a6a:	f7ff fc17 	bl	800829c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6e:	f7fd ffb7 	bl	80069e0 <HAL_GetTick>
 8008a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008a74:	e008      	b.n	8008a88 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a76:	f7fd ffb3 	bl	80069e0 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e1d6      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008a88:	f7ff fc19 	bl	80082be <LL_RCC_LSI1_IsReady>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f1      	bne.n	8008a76 <HAL_RCC_OscConfig+0x31a>
 8008a92:	e051      	b.n	8008b38 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008a94:	f7ff fbf1 	bl	800827a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a98:	f7fd ffa2 	bl	80069e0 <HAL_GetTick>
 8008a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008a9e:	e00c      	b.n	8008aba <HAL_RCC_OscConfig+0x35e>
 8008aa0:	20000008 	.word	0x20000008
 8008aa4:	200000f0 	.word	0x200000f0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008aa8:	f7fd ff9a 	bl	80069e0 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e1bd      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008aba:	f7ff fc00 	bl	80082be <LL_RCC_LSI1_IsReady>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f1      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008ac4:	f7ff fc1e 	bl	8008304 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008ac8:	e008      	b.n	8008adc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008aca:	f7fd ff89 	bl	80069e0 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e1ac      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008adc:	f7ff fc23 	bl	8008326 <LL_RCC_LSI2_IsReady>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f1      	bne.n	8008aca <HAL_RCC_OscConfig+0x36e>
 8008ae6:	e027      	b.n	8008b38 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008ae8:	f7ff fc0c 	bl	8008304 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aec:	f7fd ff78 	bl	80069e0 <HAL_GetTick>
 8008af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008af4:	f7fd ff74 	bl	80069e0 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e197      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008b06:	f7ff fc0e 	bl	8008326 <LL_RCC_LSI2_IsReady>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f1      	bne.n	8008af4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008b10:	f7ff fbc4 	bl	800829c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b14:	f7fd ff64 	bl	80069e0 <HAL_GetTick>
 8008b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008b1c:	f7fd ff60 	bl	80069e0 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e183      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008b2e:	f7ff fbc6 	bl	80082be <LL_RCC_LSI1_IsReady>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f1      	bne.n	8008b1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d05b      	beq.n	8008bfc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b44:	4ba7      	ldr	r3, [pc, #668]	@ (8008de4 <HAL_RCC_OscConfig+0x688>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d114      	bne.n	8008b7a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008b50:	f7ff fa64 	bl	800801c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b54:	f7fd ff44 	bl	80069e0 <HAL_GetTick>
 8008b58:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5c:	f7fd ff40 	bl	80069e0 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e163      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008de4 <HAL_RCC_OscConfig+0x688>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f0      	beq.n	8008b5c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d102      	bne.n	8008b88 <HAL_RCC_OscConfig+0x42c>
 8008b82:	f7ff fb24 	bl	80081ce <LL_RCC_LSE_Enable>
 8008b86:	e00c      	b.n	8008ba2 <HAL_RCC_OscConfig+0x446>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d104      	bne.n	8008b9a <HAL_RCC_OscConfig+0x43e>
 8008b90:	f7ff fb3f 	bl	8008212 <LL_RCC_LSE_EnableBypass>
 8008b94:	f7ff fb1b 	bl	80081ce <LL_RCC_LSE_Enable>
 8008b98:	e003      	b.n	8008ba2 <HAL_RCC_OscConfig+0x446>
 8008b9a:	f7ff fb29 	bl	80081f0 <LL_RCC_LSE_Disable>
 8008b9e:	f7ff fb49 	bl	8008234 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d014      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008baa:	f7fd ff19 	bl	80069e0 <HAL_GetTick>
 8008bae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008bb0:	e00a      	b.n	8008bc8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bb2:	f7fd ff15 	bl	80069e0 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e136      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008bc8:	f7ff fb45 	bl	8008256 <LL_RCC_LSE_IsReady>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0ef      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x456>
 8008bd2:	e013      	b.n	8008bfc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd4:	f7fd ff04 	bl	80069e0 <HAL_GetTick>
 8008bd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008bda:	e00a      	b.n	8008bf2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bdc:	f7fd ff00 	bl	80069e0 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e121      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008bf2:	f7ff fb30 	bl	8008256 <LL_RCC_LSE_IsReady>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1ef      	bne.n	8008bdc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d02c      	beq.n	8008c62 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d014      	beq.n	8008c3a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c10:	f7ff faa9 	bl	8008166 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c14:	f7fd fee4 	bl	80069e0 <HAL_GetTick>
 8008c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c1c:	f7fd fee0 	bl	80069e0 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e103      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008c2e:	f7ff fabc 	bl	80081aa <LL_RCC_HSI48_IsReady>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0f1      	beq.n	8008c1c <HAL_RCC_OscConfig+0x4c0>
 8008c38:	e013      	b.n	8008c62 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c3a:	f7ff faa5 	bl	8008188 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3e:	f7fd fecf 	bl	80069e0 <HAL_GetTick>
 8008c42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c46:	f7fd fecb 	bl	80069e0 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e0ee      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008c58:	f7ff faa7 	bl	80081aa <LL_RCC_HSI48_IsReady>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f1      	bne.n	8008c46 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80e4 	beq.w	8008e34 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c6c:	f7ff fc05 	bl	800847a <LL_RCC_GetSysClkSource>
 8008c70:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f040 80b4 	bne.w	8008dec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f003 0203 	and.w	r2, r3, #3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d123      	bne.n	8008cda <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d11c      	bne.n	8008cda <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0a1b      	lsrs	r3, r3, #8
 8008ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d114      	bne.n	8008cda <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d10d      	bne.n	8008cda <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d106      	bne.n	8008cda <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d05d      	beq.n	8008d96 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d058      	beq.n	8008d92 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e0a1      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008cf2:	f7ff fc85 	bl	8008600 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cf6:	f7fd fe73 	bl	80069e0 <HAL_GetTick>
 8008cfa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cfc:	e008      	b.n	8008d10 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cfe:	f7fd fe6f 	bl	80069e0 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e092      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1ef      	bne.n	8008cfe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	4b30      	ldr	r3, [pc, #192]	@ (8008de8 <HAL_RCC_OscConfig+0x68c>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d30:	4311      	orrs	r1, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d36:	0212      	lsls	r2, r2, #8
 8008d38:	4311      	orrs	r1, r2
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d3e:	4311      	orrs	r1, r2
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008d44:	4311      	orrs	r1, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d54:	f7ff fc45 	bl	80085e2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d68:	f7fd fe3a 	bl	80069e0 <HAL_GetTick>
 8008d6c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d70:	f7fd fe36 	bl	80069e0 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e059      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0ef      	beq.n	8008d70 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d90:	e050      	b.n	8008e34 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e04f      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d147      	bne.n	8008e34 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008da4:	f7ff fc1d 	bl	80085e2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008db6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008db8:	f7fd fe12 	bl	80069e0 <HAL_GetTick>
 8008dbc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc0:	f7fd fe0e 	bl	80069e0 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e031      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0ef      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x664>
 8008de0:	e028      	b.n	8008e34 <HAL_RCC_OscConfig+0x6d8>
 8008de2:	bf00      	nop
 8008de4:	58000400 	.word	0x58000400
 8008de8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b0c      	cmp	r3, #12
 8008df0:	d01e      	beq.n	8008e30 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008df2:	f7ff fc05 	bl	8008600 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df6:	f7fd fdf3 	bl	80069e0 <HAL_GetTick>
 8008dfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dfc:	e008      	b.n	8008e10 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dfe:	f7fd fdef 	bl	80069e0 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d901      	bls.n	8008e10 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e012      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1ef      	bne.n	8008dfe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e28:	4b05      	ldr	r3, [pc, #20]	@ (8008e40 <HAL_RCC_OscConfig+0x6e4>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	60cb      	str	r3, [r1, #12]
 8008e2e:	e001      	b.n	8008e34 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3734      	adds	r7, #52	@ 0x34
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	eefefffc 	.word	0xeefefffc

08008e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e12d      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e58:	4b98      	ldr	r3, [pc, #608]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d91b      	bls.n	8008e9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b95      	ldr	r3, [pc, #596]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 0207 	bic.w	r2, r3, #7
 8008e6e:	4993      	ldr	r1, [pc, #588]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e76:	f7fd fdb3 	bl	80069e0 <HAL_GetTick>
 8008e7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e7e:	f7fd fdaf 	bl	80069e0 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e111      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e90:	4b8a      	ldr	r3, [pc, #552]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d1ef      	bne.n	8008e7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d016      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff faef 	bl	8008492 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008eb4:	f7fd fd94 	bl	80069e0 <HAL_GetTick>
 8008eb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ebc:	f7fd fd90 	bl	80069e0 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e0f2      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008ece:	f7ff fbe9 	bl	80086a4 <LL_RCC_IsActiveFlag_HPRE>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0f1      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d016      	beq.n	8008f12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fae6 	bl	80084ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008eee:	f7fd fd77 	bl	80069e0 <HAL_GetTick>
 8008ef2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ef6:	f7fd fd73 	bl	80069e0 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e0d5      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008f08:	f7ff fbde 	bl	80086c8 <LL_RCC_IsActiveFlag_C2HPRE>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f1      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d016      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fadf 	bl	80084e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f28:	f7fd fd5a 	bl	80069e0 <HAL_GetTick>
 8008f2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f30:	f7fd fd56 	bl	80069e0 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e0b8      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f42:	f7ff fbd4 	bl	80086ee <LL_RCC_IsActiveFlag_SHDHPRE>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f1      	beq.n	8008f30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d016      	beq.n	8008f86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fad9 	bl	8008514 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f62:	f7fd fd3d 	bl	80069e0 <HAL_GetTick>
 8008f66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f6a:	f7fd fd39 	bl	80069e0 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e09b      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008f7c:	f7ff fbca 	bl	8008714 <LL_RCC_IsActiveFlag_PPRE1>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f1      	beq.n	8008f6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d017      	beq.n	8008fc2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff facf 	bl	800853c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f9e:	f7fd fd1f 	bl	80069e0 <HAL_GetTick>
 8008fa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008fa6:	f7fd fd1b 	bl	80069e0 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e07d      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008fb8:	f7ff fbbe 	bl	8008738 <LL_RCC_IsActiveFlag_PPRE2>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0f1      	beq.n	8008fa6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d043      	beq.n	8009056 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d106      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008fd6:	f7ff f86f 	bl	80080b8 <LL_RCC_HSE_IsReady>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11e      	bne.n	800901e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e067      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d106      	bne.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008fec:	f7ff fb17 	bl	800861e <LL_RCC_PLL_IsReady>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d113      	bne.n	800901e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e05c      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009002:	f7ff f9d7 	bl	80083b4 <LL_RCC_MSI_IsReady>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d108      	bne.n	800901e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e051      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009010:	f7ff f882 	bl	8008118 <LL_RCC_HSI_IsReady>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e04a      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fa15 	bl	8008452 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009028:	f7fd fcda 	bl	80069e0 <HAL_GetTick>
 800902c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902e:	e00a      	b.n	8009046 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009030:	f7fd fcd6 	bl	80069e0 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e036      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009046:	f7ff fa18 	bl	800847a <LL_RCC_GetSysClkSource>
 800904a:	4602      	mov	r2, r0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	429a      	cmp	r2, r3
 8009054:	d1ec      	bne.n	8009030 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009056:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d21b      	bcs.n	800909c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009064:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f023 0207 	bic.w	r2, r3, #7
 800906c:	4913      	ldr	r1, [pc, #76]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009074:	f7fd fcb4 	bl	80069e0 <HAL_GetTick>
 8009078:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907a:	e008      	b.n	800908e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800907c:	f7fd fcb0 	bl	80069e0 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e012      	b.n	80090b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <HAL_RCC_ClockConfig+0x278>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d1ef      	bne.n	800907c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800909c:	f000 f87e 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80090a0:	4603      	mov	r3, r0
 80090a2:	4a07      	ldr	r2, [pc, #28]	@ (80090c0 <HAL_RCC_ClockConfig+0x27c>)
 80090a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80090a6:	f7fd fca7 	bl	80069f8 <HAL_GetTickPrio>
 80090aa:	4603      	mov	r3, r0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f8 f935 	bl	800131c <HAL_InitTick>
 80090b2:	4603      	mov	r3, r0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	58004000 	.word	0x58004000
 80090c0:	20000008 	.word	0x20000008

080090c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090ca:	f7ff f9d6 	bl	800847a <LL_RCC_GetSysClkSource>
 80090ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80090d6:	f7ff f992 	bl	80083fe <LL_RCC_MSI_GetRange>
 80090da:	4603      	mov	r3, r0
 80090dc:	091b      	lsrs	r3, r3, #4
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009190 <HAL_RCC_GetSysClockFreq+0xcc>)
 80090e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	e04b      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d102      	bne.n	80090f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090f2:	4b28      	ldr	r3, [pc, #160]	@ (8009194 <HAL_RCC_GetSysClockFreq+0xd0>)
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e045      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d10a      	bne.n	8009114 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80090fe:	f7fe ffab 	bl	8008058 <LL_RCC_HSE_IsEnabledDiv2>
 8009102:	4603      	mov	r3, r0
 8009104:	2b01      	cmp	r3, #1
 8009106:	d102      	bne.n	800910e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009108:	4b22      	ldr	r3, [pc, #136]	@ (8009194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e03a      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800910e:	4b22      	ldr	r3, [pc, #136]	@ (8009198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e037      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009114:	f7ff faba 	bl	800868c <LL_RCC_PLL_GetMainSource>
 8009118:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d003      	beq.n	8009128 <HAL_RCC_GetSysClockFreq+0x64>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d003      	beq.n	800912e <HAL_RCC_GetSysClockFreq+0x6a>
 8009126:	e00d      	b.n	8009144 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009128:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800912a:	60bb      	str	r3, [r7, #8]
        break;
 800912c:	e015      	b.n	800915a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800912e:	f7fe ff93 	bl	8008058 <LL_RCC_HSE_IsEnabledDiv2>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	d102      	bne.n	800913e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009138:	4b16      	ldr	r3, [pc, #88]	@ (8009194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800913a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800913c:	e00d      	b.n	800915a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800913e:	4b16      	ldr	r3, [pc, #88]	@ (8009198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009140:	60bb      	str	r3, [r7, #8]
        break;
 8009142:	e00a      	b.n	800915a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009144:	f7ff f95b 	bl	80083fe <LL_RCC_MSI_GetRange>
 8009148:	4603      	mov	r3, r0
 800914a:	091b      	lsrs	r3, r3, #4
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	4a0f      	ldr	r2, [pc, #60]	@ (8009190 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009156:	60bb      	str	r3, [r7, #8]
        break;
 8009158:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800915a:	f7ff fa72 	bl	8008642 <LL_RCC_PLL_GetN>
 800915e:	4602      	mov	r2, r0
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	fb03 f402 	mul.w	r4, r3, r2
 8009166:	f7ff fa85 	bl	8008674 <LL_RCC_PLL_GetDivider>
 800916a:	4603      	mov	r3, r0
 800916c:	091b      	lsrs	r3, r3, #4
 800916e:	3301      	adds	r3, #1
 8009170:	fbb4 f4f3 	udiv	r4, r4, r3
 8009174:	f7ff fa72 	bl	800865c <LL_RCC_PLL_GetR>
 8009178:	4603      	mov	r3, r0
 800917a:	0f5b      	lsrs	r3, r3, #29
 800917c:	3301      	adds	r3, #1
 800917e:	fbb4 f3f3 	udiv	r3, r4, r3
 8009182:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	bd90      	pop	{r4, r7, pc}
 800918e:	bf00      	nop
 8009190:	08014c60 	.word	0x08014c60
 8009194:	00f42400 	.word	0x00f42400
 8009198:	01e84800 	.word	0x01e84800

0800919c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b598      	push	{r3, r4, r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80091a0:	f7ff ff90 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 80091a4:	4604      	mov	r4, r0
 80091a6:	f7ff f9dd 	bl	8008564 <LL_RCC_GetAHBPrescaler>
 80091aa:	4603      	mov	r3, r0
 80091ac:	091b      	lsrs	r3, r3, #4
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	4a03      	ldr	r2, [pc, #12]	@ (80091c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80091b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80091bc:	4618      	mov	r0, r3
 80091be:	bd98      	pop	{r3, r4, r7, pc}
 80091c0:	08014c00 	.word	0x08014c00

080091c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091c4:	b598      	push	{r3, r4, r7, lr}
 80091c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80091c8:	f7ff ffe8 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091cc:	4604      	mov	r4, r0
 80091ce:	f7ff f9f0 	bl	80085b2 <LL_RCC_GetAPB1Prescaler>
 80091d2:	4603      	mov	r3, r0
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	4a04      	ldr	r2, [pc, #16]	@ (80091ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80091dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e0:	f003 031f 	and.w	r3, r3, #31
 80091e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	bd98      	pop	{r3, r4, r7, pc}
 80091ec:	08014c40 	.word	0x08014c40

080091f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091f0:	b598      	push	{r3, r4, r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80091f4:	f7ff ffd2 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091f8:	4604      	mov	r4, r0
 80091fa:	f7ff f9e6 	bl	80085ca <LL_RCC_GetAPB2Prescaler>
 80091fe:	4603      	mov	r3, r0
 8009200:	0adb      	lsrs	r3, r3, #11
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	4a04      	ldr	r2, [pc, #16]	@ (8009218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009214:	4618      	mov	r0, r3
 8009216:	bd98      	pop	{r3, r4, r7, pc}
 8009218:	08014c40 	.word	0x08014c40

0800921c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	226f      	movs	r2, #111	@ 0x6f
 800922a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800922c:	f7ff f925 	bl	800847a <LL_RCC_GetSysClkSource>
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009236:	f7ff f995 	bl	8008564 <LL_RCC_GetAHBPrescaler>
 800923a:	4602      	mov	r2, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8009240:	f7ff f9b7 	bl	80085b2 <LL_RCC_GetAPB1Prescaler>
 8009244:	4602      	mov	r2, r0
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800924a:	f7ff f9be 	bl	80085ca <LL_RCC_GetAPB2Prescaler>
 800924e:	4602      	mov	r2, r0
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8009254:	f7ff f992 	bl	800857c <LL_C2_RCC_GetAHBPrescaler>
 8009258:	4602      	mov	r2, r0
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800925e:	f7ff f99a 	bl	8008596 <LL_RCC_GetAHB4Prescaler>
 8009262:	4602      	mov	r2, r0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009268:	4b04      	ldr	r3, [pc, #16]	@ (800927c <HAL_RCC_GetClockConfig+0x60>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0207 	and.w	r2, r3, #7
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	58004000 	.word	0x58004000

08009280 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2bb0      	cmp	r3, #176	@ 0xb0
 800928c:	d903      	bls.n	8009296 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800928e:	4b15      	ldr	r3, [pc, #84]	@ (80092e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e007      	b.n	80092a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	091b      	lsrs	r3, r3, #4
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	4a11      	ldr	r2, [pc, #68]	@ (80092e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80092a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80092a6:	f7ff f976 	bl	8008596 <LL_RCC_GetAHB4Prescaler>
 80092aa:	4603      	mov	r3, r0
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	4a0d      	ldr	r2, [pc, #52]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80092be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4a0a      	ldr	r2, [pc, #40]	@ (80092ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80092c4:	fba2 2303 	umull	r2, r3, r2, r3
 80092c8:	0c9c      	lsrs	r4, r3, #18
 80092ca:	f7fe feb7 	bl	800803c <HAL_PWREx_GetVoltageRange>
 80092ce:	4603      	mov	r3, r0
 80092d0:	4619      	mov	r1, r3
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f80c 	bl	80092f0 <RCC_SetFlashLatency>
 80092d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08014c60 	.word	0x08014c60
 80092e8:	08014c00 	.word	0x08014c00
 80092ec:	431bde83 	.word	0x431bde83

080092f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80092f0:	b590      	push	{r4, r7, lr}
 80092f2:	b093      	sub	sp, #76	@ 0x4c
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80092fa:	4b37      	ldr	r3, [pc, #220]	@ (80093d8 <RCC_SetFlashLatency+0xe8>)
 80092fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8009300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009306:	4a35      	ldr	r2, [pc, #212]	@ (80093dc <RCC_SetFlashLatency+0xec>)
 8009308:	f107 031c 	add.w	r3, r7, #28
 800930c:	ca07      	ldmia	r2, {r0, r1, r2}
 800930e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009312:	4b33      	ldr	r3, [pc, #204]	@ (80093e0 <RCC_SetFlashLatency+0xf0>)
 8009314:	f107 040c 	add.w	r4, r7, #12
 8009318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800931a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800931e:	2300      	movs	r3, #0
 8009320:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009328:	d11a      	bne.n	8009360 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800932a:	2300      	movs	r3, #0
 800932c:	643b      	str	r3, [r7, #64]	@ 0x40
 800932e:	e013      	b.n	8009358 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	3348      	adds	r3, #72	@ 0x48
 8009336:	443b      	add	r3, r7
 8009338:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d807      	bhi.n	8009352 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	3348      	adds	r3, #72	@ 0x48
 8009348:	443b      	add	r3, r7
 800934a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800934e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009350:	e020      	b.n	8009394 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009354:	3301      	adds	r3, #1
 8009356:	643b      	str	r3, [r7, #64]	@ 0x40
 8009358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800935a:	2b03      	cmp	r3, #3
 800935c:	d9e8      	bls.n	8009330 <RCC_SetFlashLatency+0x40>
 800935e:	e019      	b.n	8009394 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009364:	e013      	b.n	800938e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	3348      	adds	r3, #72	@ 0x48
 800936c:	443b      	add	r3, r7
 800936e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d807      	bhi.n	8009388 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	3348      	adds	r3, #72	@ 0x48
 800937e:	443b      	add	r3, r7
 8009380:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009384:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009386:	e005      	b.n	8009394 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938a:	3301      	adds	r3, #1
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	2b02      	cmp	r3, #2
 8009392:	d9e8      	bls.n	8009366 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8009394:	4b13      	ldr	r3, [pc, #76]	@ (80093e4 <RCC_SetFlashLatency+0xf4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f023 0207 	bic.w	r2, r3, #7
 800939c:	4911      	ldr	r1, [pc, #68]	@ (80093e4 <RCC_SetFlashLatency+0xf4>)
 800939e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a0:	4313      	orrs	r3, r2
 80093a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093a4:	f7fd fb1c 	bl	80069e0 <HAL_GetTick>
 80093a8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80093aa:	e008      	b.n	80093be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80093ac:	f7fd fb18 	bl	80069e0 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e007      	b.n	80093ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80093be:	4b09      	ldr	r3, [pc, #36]	@ (80093e4 <RCC_SetFlashLatency+0xf4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d1ef      	bne.n	80093ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	374c      	adds	r7, #76	@ 0x4c
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd90      	pop	{r4, r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08014938 	.word	0x08014938
 80093dc:	08014948 	.word	0x08014948
 80093e0:	08014954 	.word	0x08014954
 80093e4:	58004000 	.word	0x58004000

080093e8 <LL_RCC_LSE_IsEnabled>:
{
 80093e8:	b480      	push	{r7}
 80093ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80093ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <LL_RCC_LSE_IsEnabled+0x18>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <LL_RCC_LSE_IsEnabled+0x1a>
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_RCC_LSE_IsReady>:
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b02      	cmp	r3, #2
 800941e:	d101      	bne.n	8009424 <LL_RCC_LSE_IsReady+0x18>
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <LL_RCC_LSE_IsReady+0x1a>
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <LL_RCC_MSI_EnablePLLMode>:
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8009434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800943e:	f043 0304 	orr.w	r3, r3, #4
 8009442:	6013      	str	r3, [r2, #0]
}
 8009444:	bf00      	nop
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <LL_RCC_SetRFWKPClockSource>:
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800945a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800945e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4313      	orrs	r3, r2
 800946a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <LL_RCC_SetSMPSClockSource>:
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	f023 0203 	bic.w	r2, r3, #3
 800948c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4313      	orrs	r3, r2
 8009494:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <LL_RCC_SetSMPSPrescaler>:
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80094aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80094b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <LL_RCC_SetUSARTClockSource>:
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80094d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094da:	f023 0203 	bic.w	r2, r3, #3
 80094de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <LL_RCC_SetLPUARTClockSource>:
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80094fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800950a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <LL_RCC_SetI2CClockSource>:
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800952a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800952e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	091b      	lsrs	r3, r3, #4
 8009536:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800953a:	43db      	mvns	r3, r3
 800953c:	401a      	ands	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	011b      	lsls	r3, r3, #4
 8009542:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <LL_RCC_SetLPTIMClockSource>:
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009568:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	0c1b      	lsrs	r3, r3, #16
 8009570:	041b      	lsls	r3, r3, #16
 8009572:	43db      	mvns	r3, r3
 8009574:	401a      	ands	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <LL_RCC_SetSAIClockSource>:
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_RCC_SetRNGClockSource>:
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80095c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095cc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80095d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <LL_RCC_SetCLK48ClockSource>:
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80095f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <LL_RCC_SetUSBClockSource>:
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff ffe3 	bl	80095e8 <LL_RCC_SetCLK48ClockSource>
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <LL_RCC_SetADCClockSource>:
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800963e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4313      	orrs	r3, r2
 8009646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <LL_RCC_SetRTCClockSource>:
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800965e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009666:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800966a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4313      	orrs	r3, r2
 8009672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LL_RCC_GetRTCClockSource>:
{
 8009682:	b480      	push	{r7}
 8009684:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800968a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8009692:	4618      	mov	r0, r3
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <LL_RCC_ForceBackupDomainReset>:
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80096a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <LL_RCC_ReleaseBackupDomainReset>:
{
 80096be:	b480      	push	{r7}
 80096c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80096c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80096d6:	bf00      	nop
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <LL_RCC_PLLSAI1_Enable>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80096e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096f2:	6013      	str	r3, [r2, #0]
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <LL_RCC_PLLSAI1_Disable>:
{
 80096fe:	b480      	push	{r7}
 8009700:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800970c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009710:	6013      	str	r3, [r2, #0]
}
 8009712:	bf00      	nop
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <LL_RCC_PLLSAI1_IsReady>:
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800972a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800972e:	d101      	bne.n	8009734 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009748:	2300      	movs	r3, #0
 800974a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800974c:	2300      	movs	r3, #0
 800974e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d034      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009764:	d021      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009766:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800976a:	d81b      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800976c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009770:	d01d      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009776:	d815      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800977c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009780:	d110      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800978c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009790:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009792:	e00d      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3304      	adds	r3, #4
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f94d 	bl	8009a38 <RCCEx_PLLSAI1_ConfigNP>
 800979e:	4603      	mov	r3, r0
 80097a0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80097a2:	e005      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	77fb      	strb	r3, [r7, #31]
        break;
 80097a8:	e002      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80097aa:	bf00      	nop
 80097ac:	e000      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80097ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b0:	7ffb      	ldrb	r3, [r7, #31]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fee8 	bl	8009590 <LL_RCC_SetSAIClockSource>
 80097c0:	e001      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c2:	7ffb      	ldrb	r3, [r7, #31]
 80097c4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d046      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80097d2:	f7ff ff56 	bl	8009682 <LL_RCC_GetRTCClockSource>
 80097d6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d03c      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80097e2:	f7fe fc1b 	bl	800801c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff ff30 	bl	8009656 <LL_RCC_SetRTCClockSource>
 80097f6:	e02e      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80097f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009802:	f7ff ff4b 	bl	800969c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009806:	f7ff ff5a 	bl	80096be <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009822:	f7ff fde1 	bl	80093e8 <LL_RCC_LSE_IsEnabled>
 8009826:	4603      	mov	r3, r0
 8009828:	2b01      	cmp	r3, #1
 800982a:	d114      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800982c:	f7fd f8d8 	bl	80069e0 <HAL_GetTick>
 8009830:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009832:	e00b      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009834:	f7fd f8d4 	bl	80069e0 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009842:	4293      	cmp	r3, r2
 8009844:	d902      	bls.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	77fb      	strb	r3, [r7, #31]
              break;
 800984a:	e004      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800984c:	f7ff fdde 	bl	800940c <LL_RCC_LSE_IsReady>
 8009850:	4603      	mov	r3, r0
 8009852:	2b01      	cmp	r3, #1
 8009854:	d1ee      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009856:	7ffb      	ldrb	r3, [r7, #31]
 8009858:	77bb      	strb	r3, [r7, #30]
 800985a:	e001      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	7ffb      	ldrb	r3, [r7, #31]
 800985e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fe2a 	bl	80094ca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d004      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff fe35 	bl	80094f6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0310 	and.w	r3, r3, #16
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fe5d 	bl	800955c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff fe52 	bl	800955c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff fe2a 	bl	8009522 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fe1f 	bl	8009522 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d022      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fe8d 	bl	8009614 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009902:	d107      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800990e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009912:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800991c:	d10b      	bne.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3304      	adds	r3, #4
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f8e3 	bl	8009aee <RCCEx_PLLSAI1_ConfigNQ>
 8009928:	4603      	mov	r3, r0
 800992a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800992c:	7ffb      	ldrb	r3, [r7, #31]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009932:	7ffb      	ldrb	r3, [r7, #31]
 8009934:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800993e:	2b00      	cmp	r3, #0
 8009940:	d02b      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994a:	d008      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009954:	d003      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995a:	2b00      	cmp	r3, #0
 800995c:	d105      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fe2a 	bl	80095bc <LL_RCC_SetRNGClockSource>
 8009968:	e00a      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	2000      	movs	r0, #0
 8009976:	f7ff fe21 	bl	80095bc <LL_RCC_SetRNGClockSource>
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fe34 	bl	80095e8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009984:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009988:	d107      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800998a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009994:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009998:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d022      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fe3d 	bl	800962a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b8:	d107      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80099c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099d2:	d10b      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 f8e3 	bl	8009ba4 <RCCEx_PLLSAI1_ConfigNR>
 80099de:	4603      	mov	r3, r0
 80099e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80099e2:	7ffb      	ldrb	r3, [r7, #31]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80099e8:	7ffb      	ldrb	r3, [r7, #31]
 80099ea:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fd26 	bl	800944e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fd45 	bl	80094a2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff fd2c 	bl	800947a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009a22:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009a30:	f7ff fcfe 	bl	8009430 <LL_RCC_MSI_EnablePLLMode>
}
 8009a34:	bf00      	nop
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009a44:	f7ff fe5b 	bl	80096fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a48:	f7fc ffca 	bl	80069e0 <HAL_GetTick>
 8009a4c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a4e:	e009      	b.n	8009a64 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a50:	f7fc ffc6 	bl	80069e0 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d902      	bls.n	8009a64 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	73fb      	strb	r3, [r7, #15]
      break;
 8009a62:	e004      	b.n	8009a6e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a64:	f7ff fe5a 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1f0      	bne.n	8009a50 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d137      	bne.n	8009ae4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009aa2:	f7ff fe1d 	bl	80096e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aa6:	f7fc ff9b 	bl	80069e0 <HAL_GetTick>
 8009aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009aac:	e009      	b.n	8009ac2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009aae:	f7fc ff97 	bl	80069e0 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d902      	bls.n	8009ac2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	73fb      	strb	r3, [r7, #15]
        break;
 8009ac0:	e004      	b.n	8009acc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009ac2:	f7ff fe2b 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d1f0      	bne.n	8009aae <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d108      	bne.n	8009ae4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ad6:	691a      	ldr	r2, [r3, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009afa:	f7ff fe00 	bl	80096fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009afe:	f7fc ff6f 	bl	80069e0 <HAL_GetTick>
 8009b02:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b04:	e009      	b.n	8009b1a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b06:	f7fc ff6b 	bl	80069e0 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d902      	bls.n	8009b1a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	73fb      	strb	r3, [r7, #15]
      break;
 8009b18:	e004      	b.n	8009b24 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b1a:	f7ff fdff 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1f0      	bne.n	8009b06 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d137      	bne.n	8009b9a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b54:	4313      	orrs	r3, r2
 8009b56:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009b58:	f7ff fdc2 	bl	80096e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b5c:	f7fc ff40 	bl	80069e0 <HAL_GetTick>
 8009b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b62:	e009      	b.n	8009b78 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b64:	f7fc ff3c 	bl	80069e0 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d902      	bls.n	8009b78 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	73fb      	strb	r3, [r7, #15]
        break;
 8009b76:	e004      	b.n	8009b82 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b78:	f7ff fdd0 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d1f0      	bne.n	8009b64 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d108      	bne.n	8009b9a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b96:	4313      	orrs	r3, r2
 8009b98:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009bb0:	f7ff fda5 	bl	80096fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bb4:	f7fc ff14 	bl	80069e0 <HAL_GetTick>
 8009bb8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009bba:	e009      	b.n	8009bd0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009bbc:	f7fc ff10 	bl	80069e0 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d902      	bls.n	8009bd0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bce:	e004      	b.n	8009bda <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009bd0:	f7ff fda4 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1f0      	bne.n	8009bbc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d137      	bne.n	8009c50 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009c0e:	f7ff fd67 	bl	80096e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c12:	f7fc fee5 	bl	80069e0 <HAL_GetTick>
 8009c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c18:	e009      	b.n	8009c2e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c1a:	f7fc fee1 	bl	80069e0 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d902      	bls.n	8009c2e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8009c2c:	e004      	b.n	8009c38 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c2e:	f7ff fd75 	bl	800971c <LL_RCC_PLLSAI1_IsReady>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d1f0      	bne.n	8009c1a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d108      	bne.n	8009c50 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c42:	691a      	ldr	r2, [r3, #16]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e095      	b.n	8009d98 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d108      	bne.n	8009c86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c7c:	d009      	beq.n	8009c92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	61da      	str	r2, [r3, #28]
 8009c84:	e005      	b.n	8009c92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7f7 fa0d 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cd2:	d902      	bls.n	8009cda <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	e002      	b.n	8009ce0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009ce8:	d007      	beq.n	8009cfa <HAL_SPI_Init+0xa0>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cf2:	d002      	beq.n	8009cfa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d32:	431a      	orrs	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d3c:	ea42 0103 	orr.w	r1, r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	0c1b      	lsrs	r3, r3, #16
 8009d56:	f003 0204 	and.w	r2, r3, #4
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	f003 0310 	and.w	r3, r3, #16
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009d76:	ea42 0103 	orr.w	r1, r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	4613      	mov	r3, r2
 8009dae:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009db0:	f7fc fe16 	bl	80069e0 <HAL_GetTick>
 8009db4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d001      	beq.n	8009dca <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e15c      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_SPI_Transmit+0x36>
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e154      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_SPI_Transmit+0x48>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e14d      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2203      	movs	r2, #3
 8009df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	88fa      	ldrh	r2, [r7, #6]
 8009e08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e3a:	d10f      	bne.n	8009e5c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e66:	2b40      	cmp	r3, #64	@ 0x40
 8009e68:	d007      	beq.n	8009e7a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e82:	d952      	bls.n	8009f2a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <HAL_SPI_Transmit+0xf2>
 8009e8c:	8b7b      	ldrh	r3, [r7, #26]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d145      	bne.n	8009f1e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e96:	881a      	ldrh	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	1c9a      	adds	r2, r3, #2
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009eb6:	e032      	b.n	8009f1e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d112      	bne.n	8009eec <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eca:	881a      	ldrh	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed6:	1c9a      	adds	r2, r3, #2
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009eea:	e018      	b.n	8009f1e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eec:	f7fc fd78 	bl	80069e0 <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d803      	bhi.n	8009f04 <HAL_SPI_Transmit+0x164>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f02:	d102      	bne.n	8009f0a <HAL_SPI_Transmit+0x16a>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e0b2      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1c7      	bne.n	8009eb8 <HAL_SPI_Transmit+0x118>
 8009f28:	e083      	b.n	800a032 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <HAL_SPI_Transmit+0x198>
 8009f32:	8b7b      	ldrh	r3, [r7, #26]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d177      	bne.n	800a028 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d912      	bls.n	8009f68 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f46:	881a      	ldrh	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f52:	1c9a      	adds	r2, r3, #2
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3b02      	subs	r3, #2
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f66:	e05f      	b.n	800a028 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	330c      	adds	r3, #12
 8009f72:	7812      	ldrb	r2, [r2, #0]
 8009f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f8e:	e04b      	b.n	800a028 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d12b      	bne.n	8009ff6 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d912      	bls.n	8009fce <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fac:	881a      	ldrh	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb8:	1c9a      	adds	r2, r3, #2
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b02      	subs	r3, #2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009fcc:	e02c      	b.n	800a028 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ff4:	e018      	b.n	800a028 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ff6:	f7fc fcf3 	bl	80069e0 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d803      	bhi.n	800a00e <HAL_SPI_Transmit+0x26e>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00c:	d102      	bne.n	800a014 <HAL_SPI_Transmit+0x274>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e02d      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1ae      	bne.n	8009f90 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 fb66 	bl	800a708 <SPI_EndRxTxTransaction>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a082:	2300      	movs	r3, #0
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	@ 0x28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a09a:	2301      	movs	r3, #1
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a09e:	f7fc fc9f 	bl	80069e0 <HAL_GetTick>
 800a0a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a0b2:	887b      	ldrh	r3, [r7, #2]
 800a0b4:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0ba:	7ffb      	ldrb	r3, [r7, #31]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d00c      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x4e>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c6:	d106      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x4a>
 800a0d0:	7ffb      	ldrb	r3, [r7, #31]
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d001      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e1f3      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <HAL_SPI_TransmitReceive+0x60>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <HAL_SPI_TransmitReceive+0x60>
 800a0e6:	887b      	ldrh	r3, [r7, #2]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e1e8      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d101      	bne.n	800a0fe <HAL_SPI_TransmitReceive+0x72>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	e1e1      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d003      	beq.n	800a11a <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2205      	movs	r2, #5
 800a116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	887a      	ldrh	r2, [r7, #2]
 800a12a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	887a      	ldrh	r2, [r7, #2]
 800a132:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	887a      	ldrh	r2, [r7, #2]
 800a140:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	887a      	ldrh	r2, [r7, #2]
 800a146:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a15c:	d802      	bhi.n	800a164 <HAL_SPI_TransmitReceive+0xd8>
 800a15e:	8abb      	ldrh	r3, [r7, #20]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d908      	bls.n	800a176 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a172:	605a      	str	r2, [r3, #4]
 800a174:	e007      	b.n	800a186 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a184:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a190:	2b40      	cmp	r3, #64	@ 0x40
 800a192:	d007      	beq.n	800a1a4 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a1ac:	f240 8083 	bls.w	800a2b6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_SPI_TransmitReceive+0x132>
 800a1b8:	8afb      	ldrh	r3, [r7, #22]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d16f      	bne.n	800a29e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c2:	881a      	ldrh	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ce:	1c9a      	adds	r2, r3, #2
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1e2:	e05c      	b.n	800a29e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d11b      	bne.n	800a22a <HAL_SPI_TransmitReceive+0x19e>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d016      	beq.n	800a22a <HAL_SPI_TransmitReceive+0x19e>
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d113      	bne.n	800a22a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a206:	881a      	ldrh	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	1c9a      	adds	r2, r3, #2
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	3b01      	subs	r3, #1
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b01      	cmp	r3, #1
 800a236:	d11c      	bne.n	800a272 <HAL_SPI_TransmitReceive+0x1e6>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a23e:	b29b      	uxth	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d016      	beq.n	800a272 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a24e:	b292      	uxth	r2, r2
 800a250:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a256:	1c9a      	adds	r2, r3, #2
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a262:	b29b      	uxth	r3, r3
 800a264:	3b01      	subs	r3, #1
 800a266:	b29a      	uxth	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a26e:	2301      	movs	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a272:	f7fc fbb5 	bl	80069e0 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27e:	429a      	cmp	r2, r3
 800a280:	d80d      	bhi.n	800a29e <HAL_SPI_TransmitReceive+0x212>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d009      	beq.n	800a29e <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e111      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d19d      	bne.n	800a1e4 <HAL_SPI_TransmitReceive+0x158>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d197      	bne.n	800a1e4 <HAL_SPI_TransmitReceive+0x158>
 800a2b4:	e0e5      	b.n	800a482 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_SPI_TransmitReceive+0x23a>
 800a2be:	8afb      	ldrh	r3, [r7, #22]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 80d1 	bne.w	800a468 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d912      	bls.n	800a2f6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d4:	881a      	ldrh	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	1c9a      	adds	r2, r3, #2
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	3b02      	subs	r3, #2
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2f4:	e0b8      	b.n	800a468 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	330c      	adds	r3, #12
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	b29a      	uxth	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a31c:	e0a4      	b.n	800a468 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d134      	bne.n	800a396 <HAL_SPI_TransmitReceive+0x30a>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a330:	b29b      	uxth	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d02f      	beq.n	800a396 <HAL_SPI_TransmitReceive+0x30a>
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d12c      	bne.n	800a396 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	d912      	bls.n	800a36c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34a:	881a      	ldrh	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a356:	1c9a      	adds	r2, r3, #2
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b02      	subs	r3, #2
 800a364:	b29a      	uxth	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a36a:	e012      	b.n	800a392 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	7812      	ldrb	r2, [r2, #0]
 800a378:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d148      	bne.n	800a436 <HAL_SPI_TransmitReceive+0x3aa>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d042      	beq.n	800a436 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d923      	bls.n	800a404 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ce:	1c9a      	adds	r2, r3, #2
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	3b02      	subs	r3, #2
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d81f      	bhi.n	800a432 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a400:	605a      	str	r2, [r3, #4]
 800a402:	e016      	b.n	800a432 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f103 020c 	add.w	r2, r3, #12
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a410:	7812      	ldrb	r2, [r2, #0]
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a432:	2301      	movs	r3, #1
 800a434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a436:	f7fc fad3 	bl	80069e0 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a442:	429a      	cmp	r2, r3
 800a444:	d803      	bhi.n	800a44e <HAL_SPI_TransmitReceive+0x3c2>
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44c:	d102      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x3c8>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	2b00      	cmp	r3, #0
 800a452:	d109      	bne.n	800a468 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e02c      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f47f af55 	bne.w	800a31e <HAL_SPI_TransmitReceive+0x292>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f47f af4e 	bne.w	800a31e <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a482:	6a3a      	ldr	r2, [r7, #32]
 800a484:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 f93e 	bl	800a708 <SPI_EndRxTxTransaction>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d008      	beq.n	800a4a4 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2220      	movs	r2, #32
 800a496:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e00e      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e000      	b.n	800a4c2 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
  }
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3728      	adds	r7, #40	@ 0x28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4dc:	f7fc fa80 	bl	80069e0 <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4ec:	f7fc fa78 	bl	80069e0 <HAL_GetTick>
 800a4f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4f2:	4b39      	ldr	r3, [pc, #228]	@ (800a5d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	015b      	lsls	r3, r3, #5
 800a4f8:	0d1b      	lsrs	r3, r3, #20
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
 800a500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a502:	e054      	b.n	800a5ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d050      	beq.n	800a5ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a50c:	f7fc fa68 	bl	80069e0 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d902      	bls.n	800a522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d13d      	bne.n	800a59e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a53a:	d111      	bne.n	800a560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a544:	d004      	beq.n	800a550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a54e:	d107      	bne.n	800a560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a55e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a568:	d10f      	bne.n	800a58a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e017      	b.n	800a5ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	bf0c      	ite	eq
 800a5be:	2301      	moveq	r3, #1
 800a5c0:	2300      	movne	r3, #0
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d19b      	bne.n	800a504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000008 	.word	0x20000008

0800a5dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	@ 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5ee:	f7fc f9f7 	bl	80069e0 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	1a9b      	subs	r3, r3, r2
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a5fe:	f7fc f9ef 	bl	80069e0 <HAL_GetTick>
 800a602:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	330c      	adds	r3, #12
 800a60a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a60c:	4b3d      	ldr	r3, [pc, #244]	@ (800a704 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	00da      	lsls	r2, r3, #3
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	0d1b      	lsrs	r3, r3, #20
 800a61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a61e:	fb02 f303 	mul.w	r3, r2, r3
 800a622:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a624:	e060      	b.n	800a6e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a62c:	d107      	bne.n	800a63e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d050      	beq.n	800a6e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a646:	f7fc f9cb 	bl	80069e0 <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a652:	429a      	cmp	r2, r3
 800a654:	d902      	bls.n	800a65c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d13d      	bne.n	800a6d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a66a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a674:	d111      	bne.n	800a69a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a67e:	d004      	beq.n	800a68a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a688:	d107      	bne.n	800a69a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a698:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6a2:	d10f      	bne.n	800a6c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e010      	b.n	800a6fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d196      	bne.n	800a626 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3728      	adds	r7, #40	@ 0x28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000008 	.word	0x20000008

0800a708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f7ff ff5b 	bl	800a5dc <SPI_WaitFifoStateUntilTimeout>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d007      	beq.n	800a73c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a730:	f043 0220 	orr.w	r2, r3, #32
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e027      	b.n	800a78c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	2180      	movs	r1, #128	@ 0x80
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fec0 	bl	800a4cc <SPI_WaitFlagStateUntilTimeout>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d007      	beq.n	800a762 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a756:	f043 0220 	orr.w	r2, r3, #32
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e014      	b.n	800a78c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2200      	movs	r2, #0
 800a76a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff ff34 	bl	800a5dc <SPI_WaitFifoStateUntilTimeout>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a77e:	f043 0220 	orr.w	r2, r3, #32
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e000      	b.n	800a78c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e049      	b.n	800a83a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7f6 fccc 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f000 fa7c 	bl	800acd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e036      	b.n	800a8ca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0201 	orr.w	r2, r2, #1
 800a872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a17      	ldr	r2, [pc, #92]	@ (800a8d8 <HAL_TIM_Base_Start_IT+0x94>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x44>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a886:	d115      	bne.n	800a8b4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	4b13      	ldr	r3, [pc, #76]	@ (800a8dc <HAL_TIM_Base_Start_IT+0x98>)
 800a890:	4013      	ands	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b06      	cmp	r3, #6
 800a898:	d015      	beq.n	800a8c6 <HAL_TIM_Base_Start_IT+0x82>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8a0:	d011      	beq.n	800a8c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f042 0201 	orr.w	r2, r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b2:	e008      	b.n	800a8c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0201 	orr.w	r2, r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	e000      	b.n	800a8c8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	40012c00 	.word	0x40012c00
 800a8dc:	00010007 	.word	0x00010007

0800a8e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d020      	beq.n	800a944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01b      	beq.n	800a944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f06f 0202 	mvn.w	r2, #2
 800a914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9b2 	bl	800ac94 <HAL_TIM_IC_CaptureCallback>
 800a930:	e005      	b.n	800a93e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9a4 	bl	800ac80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f9b5 	bl	800aca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d020      	beq.n	800a990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01b      	beq.n	800a990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0204 	mvn.w	r2, #4
 800a960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2202      	movs	r2, #2
 800a966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f98c 	bl	800ac94 <HAL_TIM_IC_CaptureCallback>
 800a97c:	e005      	b.n	800a98a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f97e 	bl	800ac80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f98f 	bl	800aca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d020      	beq.n	800a9dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01b      	beq.n	800a9dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0208 	mvn.w	r2, #8
 800a9ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f966 	bl	800ac94 <HAL_TIM_IC_CaptureCallback>
 800a9c8:	e005      	b.n	800a9d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f958 	bl	800ac80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f969 	bl	800aca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d020      	beq.n	800aa28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f003 0310 	and.w	r3, r3, #16
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01b      	beq.n	800aa28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f06f 0210 	mvn.w	r2, #16
 800a9f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2208      	movs	r2, #8
 800a9fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f940 	bl	800ac94 <HAL_TIM_IC_CaptureCallback>
 800aa14:	e005      	b.n	800aa22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f932 	bl	800ac80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f943 	bl	800aca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00c      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d007      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f06f 0201 	mvn.w	r2, #1
 800aa44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f6 facc 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d104      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00c      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 faa1 	bl	800afbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aa96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fa99 	bl	800afd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aaba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f8fd 	bl	800acbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0220 	mvn.w	r2, #32
 800aade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa61 	bl	800afa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d101      	bne.n	800ab0a <HAL_TIM_ConfigClockSource+0x1c>
 800ab06:	2302      	movs	r3, #2
 800ab08:	e0b6      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x18a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2202      	movs	r2, #2
 800ab16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ab28:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ab2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab46:	d03e      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0xd8>
 800ab48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab4c:	f200 8087 	bhi.w	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab54:	f000 8086 	beq.w	800ac64 <HAL_TIM_ConfigClockSource+0x176>
 800ab58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab5c:	d87f      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab5e:	2b70      	cmp	r3, #112	@ 0x70
 800ab60:	d01a      	beq.n	800ab98 <HAL_TIM_ConfigClockSource+0xaa>
 800ab62:	2b70      	cmp	r3, #112	@ 0x70
 800ab64:	d87b      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab66:	2b60      	cmp	r3, #96	@ 0x60
 800ab68:	d050      	beq.n	800ac0c <HAL_TIM_ConfigClockSource+0x11e>
 800ab6a:	2b60      	cmp	r3, #96	@ 0x60
 800ab6c:	d877      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab6e:	2b50      	cmp	r3, #80	@ 0x50
 800ab70:	d03c      	beq.n	800abec <HAL_TIM_ConfigClockSource+0xfe>
 800ab72:	2b50      	cmp	r3, #80	@ 0x50
 800ab74:	d873      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab76:	2b40      	cmp	r3, #64	@ 0x40
 800ab78:	d058      	beq.n	800ac2c <HAL_TIM_ConfigClockSource+0x13e>
 800ab7a:	2b40      	cmp	r3, #64	@ 0x40
 800ab7c:	d86f      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab7e:	2b30      	cmp	r3, #48	@ 0x30
 800ab80:	d064      	beq.n	800ac4c <HAL_TIM_ConfigClockSource+0x15e>
 800ab82:	2b30      	cmp	r3, #48	@ 0x30
 800ab84:	d86b      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d060      	beq.n	800ac4c <HAL_TIM_ConfigClockSource+0x15e>
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d867      	bhi.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d05c      	beq.n	800ac4c <HAL_TIM_ConfigClockSource+0x15e>
 800ab92:	2b10      	cmp	r3, #16
 800ab94:	d05a      	beq.n	800ac4c <HAL_TIM_ConfigClockSource+0x15e>
 800ab96:	e062      	b.n	800ac5e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aba8:	f000 f97e 	bl	800aea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800abba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	609a      	str	r2, [r3, #8]
      break;
 800abc4:	e04f      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abd6:	f000 f967 	bl	800aea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abe8:	609a      	str	r2, [r3, #8]
      break;
 800abea:	e03c      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf8:	461a      	mov	r2, r3
 800abfa:	f000 f8d9 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2150      	movs	r1, #80	@ 0x50
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 f932 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800ac0a:	e02c      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f000 f8f8 	bl	800ae0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2160      	movs	r1, #96	@ 0x60
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f922 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800ac2a:	e01c      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac38:	461a      	mov	r2, r3
 800ac3a:	f000 f8b9 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2140      	movs	r1, #64	@ 0x40
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 f912 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800ac4a:	e00c      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f000 f909 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800ac5c:	e003      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	73fb      	strb	r3, [r7, #15]
      break;
 800ac62:	e000      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ac64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a30      	ldr	r2, [pc, #192]	@ (800ada4 <TIM_Base_SetConfig+0xd4>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d003      	beq.n	800acf0 <TIM_Base_SetConfig+0x20>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acee:	d108      	bne.n	800ad02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a27      	ldr	r2, [pc, #156]	@ (800ada4 <TIM_Base_SetConfig+0xd4>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00b      	beq.n	800ad22 <TIM_Base_SetConfig+0x52>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad10:	d007      	beq.n	800ad22 <TIM_Base_SetConfig+0x52>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a24      	ldr	r2, [pc, #144]	@ (800ada8 <TIM_Base_SetConfig+0xd8>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d003      	beq.n	800ad22 <TIM_Base_SetConfig+0x52>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a23      	ldr	r2, [pc, #140]	@ (800adac <TIM_Base_SetConfig+0xdc>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d108      	bne.n	800ad34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a12      	ldr	r2, [pc, #72]	@ (800ada4 <TIM_Base_SetConfig+0xd4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d007      	beq.n	800ad70 <TIM_Base_SetConfig+0xa0>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a11      	ldr	r2, [pc, #68]	@ (800ada8 <TIM_Base_SetConfig+0xd8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d003      	beq.n	800ad70 <TIM_Base_SetConfig+0xa0>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a10      	ldr	r2, [pc, #64]	@ (800adac <TIM_Base_SetConfig+0xdc>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d103      	bne.n	800ad78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	691a      	ldr	r2, [r3, #16]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d105      	bne.n	800ad96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f023 0201 	bic.w	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	611a      	str	r2, [r3, #16]
  }
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	40012c00 	.word	0x40012c00
 800ada8:	40014400 	.word	0x40014400
 800adac:	40014800 	.word	0x40014800

0800adb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 030a 	bic.w	r3, r3, #10
 800adec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b087      	sub	sp, #28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f023 0210 	bic.w	r2, r3, #16
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	011b      	lsls	r3, r3, #4
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	621a      	str	r2, [r3, #32]
}
 800ae62:	bf00      	nop
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ae84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f043 0307 	orr.w	r3, r3, #7
 800ae94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	609a      	str	r2, [r3, #8]
}
 800ae9c:	bf00      	nop
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	021a      	lsls	r2, r3, #8
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	431a      	orrs	r2, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	4313      	orrs	r3, r2
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	609a      	str	r2, [r3, #8]
}
 800aedc:	bf00      	nop
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aefc:	2302      	movs	r3, #2
 800aefe:	e04a      	b.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a1f      	ldr	r2, [pc, #124]	@ (800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d108      	bne.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a12      	ldr	r2, [pc, #72]	@ (800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d004      	beq.n	800af6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af68:	d10c      	bne.n	800af84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	4313      	orrs	r3, r2
 800af7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	40012c00 	.word	0x40012c00

0800afa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <LL_RCC_GetUSARTClockSource>:
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800afec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aff0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4013      	ands	r3, r2
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <LL_RCC_GetLPUARTClockSource>:
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b00c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b010:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4013      	ands	r3, r2
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e042      	b.n	800b0bc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d106      	bne.n	800b04e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7f6 f8b1 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2224      	movs	r2, #36	@ 0x24
 800b052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 0201 	bic.w	r2, r2, #1
 800b064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fade 	bl	800b630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f8b3 	bl	800b1e0 <UART_SetConfig>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e01b      	b.n	800b0bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fb5d 	bl	800b774 <UART_CheckIdleState>
 800b0ba:	4603      	mov	r3, r0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	@ 0x28
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	603b      	str	r3, [r7, #0]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d17b      	bne.n	800b1d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_UART_Transmit+0x26>
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e074      	b.n	800b1d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2221      	movs	r2, #33	@ 0x21
 800b0fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0fe:	f7fb fc6f 	bl	80069e0 <HAL_GetTick>
 800b102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	88fa      	ldrh	r2, [r7, #6]
 800b108:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	88fa      	ldrh	r2, [r7, #6]
 800b110:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b11c:	d108      	bne.n	800b130 <HAL_UART_Transmit+0x6c>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	61bb      	str	r3, [r7, #24]
 800b12e:	e003      	b.n	800b138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b134:	2300      	movs	r3, #0
 800b136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b138:	e030      	b.n	800b19c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2200      	movs	r2, #0
 800b142:	2180      	movs	r1, #128	@ 0x80
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 fbbf 	bl	800b8c8 <UART_WaitOnFlagUntilTimeout>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e03d      	b.n	800b1d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10b      	bne.n	800b17a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b170:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	3302      	adds	r3, #2
 800b176:	61bb      	str	r3, [r7, #24]
 800b178:	e007      	b.n	800b18a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	3301      	adds	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b190:	b29b      	uxth	r3, r3
 800b192:	3b01      	subs	r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1c8      	bne.n	800b13a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2140      	movs	r1, #64	@ 0x40
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 fb88 	bl	800b8c8 <UART_WaitOnFlagUntilTimeout>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d005      	beq.n	800b1ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e006      	b.n	800b1d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e000      	b.n	800b1d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b1d6:	2302      	movs	r3, #2
  }
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3720      	adds	r7, #32
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e4:	b08c      	sub	sp, #48	@ 0x30
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	431a      	orrs	r2, r3
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	4313      	orrs	r3, r2
 800b206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4baf      	ldr	r3, [pc, #700]	@ (800b4cc <UART_SetConfig+0x2ec>)
 800b210:	4013      	ands	r3, r2
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b218:	430b      	orrs	r3, r1
 800b21a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4aa4      	ldr	r2, [pc, #656]	@ (800b4d0 <UART_SetConfig+0x2f0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d004      	beq.n	800b24c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b248:	4313      	orrs	r3, r2
 800b24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b256:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b260:	430b      	orrs	r3, r1
 800b262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26a:	f023 010f 	bic.w	r1, r3, #15
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a95      	ldr	r2, [pc, #596]	@ (800b4d4 <UART_SetConfig+0x2f4>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d125      	bne.n	800b2d0 <UART_SetConfig+0xf0>
 800b284:	2003      	movs	r0, #3
 800b286:	f7ff fead 	bl	800afe4 <LL_RCC_GetUSARTClockSource>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d81b      	bhi.n	800b2c8 <UART_SetConfig+0xe8>
 800b290:	a201      	add	r2, pc, #4	@ (adr r2, 800b298 <UART_SetConfig+0xb8>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2a9 	.word	0x0800b2a9
 800b29c:	0800b2b9 	.word	0x0800b2b9
 800b2a0:	0800b2b1 	.word	0x0800b2b1
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ae:	e042      	b.n	800b336 <UART_SetConfig+0x156>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b6:	e03e      	b.n	800b336 <UART_SetConfig+0x156>
 800b2b8:	2304      	movs	r3, #4
 800b2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2be:	e03a      	b.n	800b336 <UART_SetConfig+0x156>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c6:	e036      	b.n	800b336 <UART_SetConfig+0x156>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ce:	e032      	b.n	800b336 <UART_SetConfig+0x156>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a7e      	ldr	r2, [pc, #504]	@ (800b4d0 <UART_SetConfig+0x2f0>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d12a      	bne.n	800b330 <UART_SetConfig+0x150>
 800b2da:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800b2de:	f7ff fe91 	bl	800b004 <LL_RCC_GetLPUARTClockSource>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2e8:	d01a      	beq.n	800b320 <UART_SetConfig+0x140>
 800b2ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2ee:	d81b      	bhi.n	800b328 <UART_SetConfig+0x148>
 800b2f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2f4:	d00c      	beq.n	800b310 <UART_SetConfig+0x130>
 800b2f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2fa:	d815      	bhi.n	800b328 <UART_SetConfig+0x148>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <UART_SetConfig+0x128>
 800b300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b304:	d008      	beq.n	800b318 <UART_SetConfig+0x138>
 800b306:	e00f      	b.n	800b328 <UART_SetConfig+0x148>
 800b308:	2300      	movs	r3, #0
 800b30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b30e:	e012      	b.n	800b336 <UART_SetConfig+0x156>
 800b310:	2302      	movs	r3, #2
 800b312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b316:	e00e      	b.n	800b336 <UART_SetConfig+0x156>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31e:	e00a      	b.n	800b336 <UART_SetConfig+0x156>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b326:	e006      	b.n	800b336 <UART_SetConfig+0x156>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b32e:	e002      	b.n	800b336 <UART_SetConfig+0x156>
 800b330:	2310      	movs	r3, #16
 800b332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a65      	ldr	r2, [pc, #404]	@ (800b4d0 <UART_SetConfig+0x2f0>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	f040 8097 	bne.w	800b470 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b346:	2b08      	cmp	r3, #8
 800b348:	d823      	bhi.n	800b392 <UART_SetConfig+0x1b2>
 800b34a:	a201      	add	r2, pc, #4	@ (adr r2, 800b350 <UART_SetConfig+0x170>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b375 	.word	0x0800b375
 800b354:	0800b393 	.word	0x0800b393
 800b358:	0800b37d 	.word	0x0800b37d
 800b35c:	0800b393 	.word	0x0800b393
 800b360:	0800b383 	.word	0x0800b383
 800b364:	0800b393 	.word	0x0800b393
 800b368:	0800b393 	.word	0x0800b393
 800b36c:	0800b393 	.word	0x0800b393
 800b370:	0800b38b 	.word	0x0800b38b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b374:	f7fd ff26 	bl	80091c4 <HAL_RCC_GetPCLK1Freq>
 800b378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b37a:	e010      	b.n	800b39e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b37c:	4b56      	ldr	r3, [pc, #344]	@ (800b4d8 <UART_SetConfig+0x2f8>)
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b380:	e00d      	b.n	800b39e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b382:	f7fd fe9f 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 800b386:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b388:	e009      	b.n	800b39e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b38e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b390:	e005      	b.n	800b39e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b39c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 812b 	beq.w	800b5fc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3aa:	4a4c      	ldr	r2, [pc, #304]	@ (800b4dc <UART_SetConfig+0x2fc>)
 800b3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	4413      	add	r3, r2
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d305      	bcc.n	800b3d6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d903      	bls.n	800b3de <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3dc:	e10e      	b.n	800b5fc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	60bb      	str	r3, [r7, #8]
 800b3e4:	60fa      	str	r2, [r7, #12]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ea:	4a3c      	ldr	r2, [pc, #240]	@ (800b4dc <UART_SetConfig+0x2fc>)
 800b3ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	603b      	str	r3, [r7, #0]
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b400:	f7f4 ff16 	bl	8000230 <__aeabi_uldivmod>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4610      	mov	r0, r2
 800b40a:	4619      	mov	r1, r3
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	020b      	lsls	r3, r1, #8
 800b416:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b41a:	0202      	lsls	r2, r0, #8
 800b41c:	6979      	ldr	r1, [r7, #20]
 800b41e:	6849      	ldr	r1, [r1, #4]
 800b420:	0849      	lsrs	r1, r1, #1
 800b422:	2000      	movs	r0, #0
 800b424:	460c      	mov	r4, r1
 800b426:	4605      	mov	r5, r0
 800b428:	eb12 0804 	adds.w	r8, r2, r4
 800b42c:	eb43 0905 	adc.w	r9, r3, r5
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	469a      	mov	sl, r3
 800b438:	4693      	mov	fp, r2
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f4 fef5 	bl	8000230 <__aeabi_uldivmod>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4613      	mov	r3, r2
 800b44c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b454:	d308      	bcc.n	800b468 <UART_SetConfig+0x288>
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b45c:	d204      	bcs.n	800b468 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6a3a      	ldr	r2, [r7, #32]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	e0c9      	b.n	800b5fc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b46e:	e0c5      	b.n	800b5fc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b478:	d16d      	bne.n	800b556 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b47a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b47e:	3b01      	subs	r3, #1
 800b480:	2b07      	cmp	r3, #7
 800b482:	d82d      	bhi.n	800b4e0 <UART_SetConfig+0x300>
 800b484:	a201      	add	r2, pc, #4	@ (adr r2, 800b48c <UART_SetConfig+0x2ac>)
 800b486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48a:	bf00      	nop
 800b48c:	0800b4ad 	.word	0x0800b4ad
 800b490:	0800b4b5 	.word	0x0800b4b5
 800b494:	0800b4e1 	.word	0x0800b4e1
 800b498:	0800b4bb 	.word	0x0800b4bb
 800b49c:	0800b4e1 	.word	0x0800b4e1
 800b4a0:	0800b4e1 	.word	0x0800b4e1
 800b4a4:	0800b4e1 	.word	0x0800b4e1
 800b4a8:	0800b4c3 	.word	0x0800b4c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4ac:	f7fd fea0 	bl	80091f0 <HAL_RCC_GetPCLK2Freq>
 800b4b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4b2:	e01b      	b.n	800b4ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4b4:	4b08      	ldr	r3, [pc, #32]	@ (800b4d8 <UART_SetConfig+0x2f8>)
 800b4b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4b8:	e018      	b.n	800b4ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ba:	f7fd fe03 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 800b4be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4c0:	e014      	b.n	800b4ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4c8:	e010      	b.n	800b4ec <UART_SetConfig+0x30c>
 800b4ca:	bf00      	nop
 800b4cc:	cfff69f3 	.word	0xcfff69f3
 800b4d0:	40008000 	.word	0x40008000
 800b4d4:	40013800 	.word	0x40013800
 800b4d8:	00f42400 	.word	0x00f42400
 800b4dc:	08014ca0 	.word	0x08014ca0
      default:
        pclk = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 8084 	beq.w	800b5fc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f8:	4a4b      	ldr	r2, [pc, #300]	@ (800b628 <UART_SetConfig+0x448>)
 800b4fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fe:	461a      	mov	r2, r3
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	fbb3 f3f2 	udiv	r3, r3, r2
 800b506:	005a      	lsls	r2, r3, #1
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	085b      	lsrs	r3, r3, #1
 800b50e:	441a      	add	r2, r3
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	fbb2 f3f3 	udiv	r3, r2, r3
 800b518:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d916      	bls.n	800b54e <UART_SetConfig+0x36e>
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b526:	d212      	bcs.n	800b54e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f023 030f 	bic.w	r3, r3, #15
 800b530:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	b29b      	uxth	r3, r3
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	8bfb      	ldrh	r3, [r7, #30]
 800b540:	4313      	orrs	r3, r2
 800b542:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	8bfa      	ldrh	r2, [r7, #30]
 800b54a:	60da      	str	r2, [r3, #12]
 800b54c:	e056      	b.n	800b5fc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b554:	e052      	b.n	800b5fc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b55a:	3b01      	subs	r3, #1
 800b55c:	2b07      	cmp	r3, #7
 800b55e:	d822      	bhi.n	800b5a6 <UART_SetConfig+0x3c6>
 800b560:	a201      	add	r2, pc, #4	@ (adr r2, 800b568 <UART_SetConfig+0x388>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b589 	.word	0x0800b589
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b5a7 	.word	0x0800b5a7
 800b574:	0800b597 	.word	0x0800b597
 800b578:	0800b5a7 	.word	0x0800b5a7
 800b57c:	0800b5a7 	.word	0x0800b5a7
 800b580:	0800b5a7 	.word	0x0800b5a7
 800b584:	0800b59f 	.word	0x0800b59f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b588:	f7fd fe32 	bl	80091f0 <HAL_RCC_GetPCLK2Freq>
 800b58c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b58e:	e010      	b.n	800b5b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b590:	4b26      	ldr	r3, [pc, #152]	@ (800b62c <UART_SetConfig+0x44c>)
 800b592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b594:	e00d      	b.n	800b5b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b596:	f7fd fd95 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 800b59a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b59c:	e009      	b.n	800b5b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5a4:	e005      	b.n	800b5b2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5b0:	bf00      	nop
    }

    if (pclk != 0U)
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d021      	beq.n	800b5fc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b628 <UART_SetConfig+0x448>)
 800b5be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	441a      	add	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	2b0f      	cmp	r3, #15
 800b5e0:	d909      	bls.n	800b5f6 <UART_SetConfig+0x416>
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e8:	d205      	bcs.n	800b5f6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	60da      	str	r2, [r3, #12]
 800b5f4:	e002      	b.n	800b5fc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2201      	movs	r2, #1
 800b608:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	2200      	movs	r2, #0
 800b610:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2200      	movs	r2, #0
 800b616:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3730      	adds	r7, #48	@ 0x30
 800b620:	46bd      	mov	sp, r7
 800b622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b626:	bf00      	nop
 800b628:	08014ca0 	.word	0x08014ca0
 800b62c:	00f42400 	.word	0x00f42400

0800b630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	f003 0308 	and.w	r3, r3, #8
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00a      	beq.n	800b69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	f003 0310 	and.w	r3, r3, #16
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00a      	beq.n	800b6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01a      	beq.n	800b746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b72e:	d10a      	bne.n	800b746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	605a      	str	r2, [r3, #4]
  }
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b098      	sub	sp, #96	@ 0x60
 800b778:	af02      	add	r7, sp, #8
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b784:	f7fb f92c 	bl	80069e0 <HAL_GetTick>
 800b788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0308 	and.w	r3, r3, #8
 800b794:	2b08      	cmp	r3, #8
 800b796:	d12f      	bne.n	800b7f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f88e 	bl	800b8c8 <UART_WaitOnFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d022      	beq.n	800b7f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ba:	e853 3f00 	ldrex	r3, [r3]
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7d8:	e841 2300 	strex	r3, r2, [r1]
 800b7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e6      	bne.n	800b7b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2220      	movs	r2, #32
 800b7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e063      	b.n	800b8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b04      	cmp	r3, #4
 800b804:	d149      	bne.n	800b89a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b80e:	2200      	movs	r2, #0
 800b810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f857 	bl	800b8c8 <UART_WaitOnFlagUntilTimeout>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d03c      	beq.n	800b89a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b828:	e853 3f00 	ldrex	r3, [r3]
 800b82c:	623b      	str	r3, [r7, #32]
   return(result);
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b83e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e6      	bne.n	800b820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	60fb      	str	r3, [r7, #12]
   return(result);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3308      	adds	r3, #8
 800b870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b872:	61fa      	str	r2, [r7, #28]
 800b874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	69b9      	ldr	r1, [r7, #24]
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	617b      	str	r3, [r7, #20]
   return(result);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e5      	bne.n	800b852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e012      	b.n	800b8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2220      	movs	r2, #32
 800b89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3758      	adds	r7, #88	@ 0x58
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8d8:	e04f      	b.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d04b      	beq.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8e2:	f7fb f87d 	bl	80069e0 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	69ba      	ldr	r2, [r7, #24]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d302      	bcc.n	800b8f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e04e      	b.n	800b99a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0304 	and.w	r3, r3, #4
 800b906:	2b00      	cmp	r3, #0
 800b908:	d037      	beq.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b80      	cmp	r3, #128	@ 0x80
 800b90e:	d034      	beq.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b40      	cmp	r3, #64	@ 0x40
 800b914:	d031      	beq.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	f003 0308 	and.w	r3, r3, #8
 800b920:	2b08      	cmp	r3, #8
 800b922:	d110      	bne.n	800b946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2208      	movs	r2, #8
 800b92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 f838 	bl	800b9a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2208      	movs	r2, #8
 800b936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e029      	b.n	800b99a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b954:	d111      	bne.n	800b97a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 f81e 	bl	800b9a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b976:	2303      	movs	r3, #3
 800b978:	e00f      	b.n	800b99a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	69da      	ldr	r2, [r3, #28]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4013      	ands	r3, r2
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	429a      	cmp	r2, r3
 800b988:	bf0c      	ite	eq
 800b98a:	2301      	moveq	r3, #1
 800b98c:	2300      	movne	r3, #0
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	429a      	cmp	r2, r3
 800b996:	d0a0      	beq.n	800b8da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b095      	sub	sp, #84	@ 0x54
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e6      	bne.n	800b9aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9f2:	f023 0301 	bic.w	r3, r3, #1
 800b9f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e3      	bne.n	800b9dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d118      	bne.n	800ba4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f023 0310 	bic.w	r3, r3, #16
 800ba30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba3a:	61bb      	str	r3, [r7, #24]
 800ba3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	6979      	ldr	r1, [r7, #20]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	613b      	str	r3, [r7, #16]
   return(result);
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e6      	bne.n	800ba1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2220      	movs	r2, #32
 800ba52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba62:	bf00      	nop
 800ba64:	3754      	adds	r7, #84	@ 0x54
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e027      	b.n	800bad4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2224      	movs	r2, #36	@ 0x24
 800ba90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0201 	bic.w	r2, r2, #1
 800baaa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d101      	bne.n	800baf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800baf4:	2302      	movs	r3, #2
 800baf6:	e02d      	b.n	800bb54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2224      	movs	r2, #36	@ 0x24
 800bb04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0201 	bic.w	r2, r2, #1
 800bb1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f84f 	bl	800bbd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d101      	bne.n	800bb74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb70:	2302      	movs	r3, #2
 800bb72:	e02d      	b.n	800bbd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2224      	movs	r2, #36	@ 0x24
 800bb80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 0201 	bic.w	r2, r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	430a      	orrs	r2, r1
 800bbae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f811 	bl	800bbd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2220      	movs	r2, #32
 800bbc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d108      	bne.n	800bbfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbf8:	e031      	b.n	800bc5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbfe:	2308      	movs	r3, #8
 800bc00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	0e5b      	lsrs	r3, r3, #25
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	f003 0307 	and.w	r3, r3, #7
 800bc10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	0f5b      	lsrs	r3, r3, #29
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f003 0307 	and.w	r3, r3, #7
 800bc20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	7b3a      	ldrb	r2, [r7, #12]
 800bc26:	4911      	ldr	r1, [pc, #68]	@ (800bc6c <UARTEx_SetNbDataToProcess+0x94>)
 800bc28:	5c8a      	ldrb	r2, [r1, r2]
 800bc2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc2e:	7b3a      	ldrb	r2, [r7, #12]
 800bc30:	490f      	ldr	r1, [pc, #60]	@ (800bc70 <UARTEx_SetNbDataToProcess+0x98>)
 800bc32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc34:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	7b7a      	ldrb	r2, [r7, #13]
 800bc44:	4909      	ldr	r1, [pc, #36]	@ (800bc6c <UARTEx_SetNbDataToProcess+0x94>)
 800bc46:	5c8a      	ldrb	r2, [r1, r2]
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc4c:	7b7a      	ldrb	r2, [r7, #13]
 800bc4e:	4908      	ldr	r1, [pc, #32]	@ (800bc70 <UARTEx_SetNbDataToProcess+0x98>)
 800bc50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc52:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc5e:	bf00      	nop
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	08014cb8 	.word	0x08014cb8
 800bc70:	08014cc0 	.word	0x08014cc0

0800bc74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc7c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bc80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4013      	ands	r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	1d3b      	adds	r3, r7, #4
 800bcb4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <ToF_acquire_data>:
	  		while (1)
	  			;
	  	}
}

void ToF_acquire_data(RANGING_SENSOR_Result_t* result) {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]

	status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L4CX, result);
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f007 fb28 	bl	8013348 <CUSTOM_RANGING_SENSOR_GetDistance>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4a06      	ldr	r2, [pc, #24]	@ (800bd14 <ToF_acquire_data+0x2c>)
 800bcfc:	6013      	str	r3, [r2, #0]
	if(status != BSP_ERROR_NONE){
 800bcfe:	4b05      	ldr	r3, [pc, #20]	@ (800bd14 <ToF_acquire_data+0x2c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <ToF_acquire_data+0x22>
		Error_Handler();
 800bd06:	f7f5 f985 	bl	8001014 <Error_Handler>
	}
}
 800bd0a:	bf00      	nop
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20001114 	.word	0x20001114

0800bd18 <logger_print_result>:
  }
  printf("\n");
}

void logger_print_result(RANGING_SENSOR_Result_t *Result)
{
 800bd18:	b590      	push	{r4, r7, lr}
 800bd1a:	ed2d 8b02 	vpush	{d8}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
 800bd28:	e096      	b.n	800be58 <logger_print_result+0x140>
  {
    log_printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	3304      	adds	r3, #4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	484d      	ldr	r0, [pc, #308]	@ (800be74 <logger_print_result+0x15c>)
 800bd40:	f7fa fccc 	bl	80066dc <log_printf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800bd44:	2300      	movs	r3, #0
 800bd46:	73bb      	strb	r3, [r7, #14]
 800bd48:	e076      	b.n	800be38 <logger_print_result+0x120>
    {
      log_printf("\n |---> ");
 800bd4a:	484b      	ldr	r0, [pc, #300]	@ (800be78 <logger_print_result+0x160>)
 800bd4c:	f7fa fcc6 	bl	80066dc <log_printf>

      log_printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 800bd50:	7bfa      	ldrb	r2, [r7, #15]
 800bd52:	7bb8      	ldrb	r0, [r7, #14]
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	011b      	lsls	r3, r3, #4
 800bd5a:	4413      	add	r3, r2
 800bd5c:	4403      	add	r3, r0
 800bd5e:	3304      	adds	r3, #4
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	440b      	add	r3, r1
 800bd64:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 800bd66:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 800bd68:	7bfa      	ldrb	r2, [r7, #15]
 800bd6a:	7bb8      	ldrb	r0, [r7, #14]
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	011b      	lsls	r3, r3, #4
 800bd72:	4413      	add	r3, r2
 800bd74:	4403      	add	r3, r0
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	440b      	add	r3, r1
 800bd7a:	689b      	ldr	r3, [r3, #8]
      log_printf("Status = %ld, Distance = %5ld mm ",
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4621      	mov	r1, r4
 800bd80:	483e      	ldr	r0, [pc, #248]	@ (800be7c <logger_print_result+0x164>)
 800bd82:	f7fa fcab 	bl	80066dc <log_printf>

      if (Profile.EnableAmbient)
 800bd86:	4b3e      	ldr	r3, [pc, #248]	@ (800be80 <logger_print_result+0x168>)
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d026      	beq.n	800bddc <logger_print_result+0xc4>
        log_printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 800bd8e:	7bfa      	ldrb	r2, [r7, #15]
 800bd90:	7bb8      	ldrb	r0, [r7, #14]
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	4613      	mov	r3, r2
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	4413      	add	r3, r2
 800bd9a:	4403      	add	r3, r0
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	440b      	add	r3, r1
 800bda2:	3308      	adds	r3, #8
 800bda4:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 800bda8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 800bdac:	7bfa      	ldrb	r2, [r7, #15]
 800bdae:	7bb8      	ldrb	r0, [r7, #14]
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	4413      	add	r3, r2
 800bdb8:	4403      	add	r3, r0
 800bdba:	3308      	adds	r3, #8
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	440b      	add	r3, r1
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	edd3 7a00 	vldr	s15, [r3]
 800bdc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdca:	f000 f861 	bl	800be90 <decimal_part>
 800bdce:	4603      	mov	r3, r0
        log_printf(", Ambient = %ld.%02ld kcps/spad",
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	ee18 1a10 	vmov	r1, s16
 800bdd6:	482b      	ldr	r0, [pc, #172]	@ (800be84 <logger_print_result+0x16c>)
 800bdd8:	f7fa fc80 	bl	80066dc <log_printf>

      if (Profile.EnableSignal)
 800bddc:	4b28      	ldr	r3, [pc, #160]	@ (800be80 <logger_print_result+0x168>)
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d026      	beq.n	800be32 <logger_print_result+0x11a>
        log_printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 800bde4:	7bfa      	ldrb	r2, [r7, #15]
 800bde6:	7bb8      	ldrb	r0, [r7, #14]
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	011b      	lsls	r3, r3, #4
 800bdee:	4413      	add	r3, r2
 800bdf0:	4403      	add	r3, r0
 800bdf2:	330c      	adds	r3, #12
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	edd3 7a00 	vldr	s15, [r3]
        log_printf(", Signal = %ld.%02ld kcps/spad",
 800bdfe:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 800be02:	7bfa      	ldrb	r2, [r7, #15]
 800be04:	7bb8      	ldrb	r0, [r7, #14]
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	4613      	mov	r3, r2
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	4413      	add	r3, r2
 800be0e:	4403      	add	r3, r0
 800be10:	330c      	adds	r3, #12
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	3308      	adds	r3, #8
 800be18:	edd3 7a00 	vldr	s15, [r3]
 800be1c:	eeb0 0a67 	vmov.f32	s0, s15
 800be20:	f000 f836 	bl	800be90 <decimal_part>
 800be24:	4603      	mov	r3, r0
        log_printf(", Signal = %ld.%02ld kcps/spad",
 800be26:	461a      	mov	r2, r3
 800be28:	ee18 1a10 	vmov	r1, s16
 800be2c:	4816      	ldr	r0, [pc, #88]	@ (800be88 <logger_print_result+0x170>)
 800be2e:	f7fa fc55 	bl	80066dc <log_printf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	3301      	adds	r3, #1
 800be36:	73bb      	strb	r3, [r7, #14]
 800be38:	7bb9      	ldrb	r1, [r7, #14]
 800be3a:	7bfa      	ldrb	r2, [r7, #15]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	011b      	lsls	r3, r3, #4
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4403      	add	r3, r0
 800be48:	3304      	adds	r3, #4
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4299      	cmp	r1, r3
 800be4e:	f4ff af7c 	bcc.w	800bd4a <logger_print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	3301      	adds	r3, #1
 800be56:	73fb      	strb	r3, [r7, #15]
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f43f af65 	beq.w	800bd2a <logger_print_result+0x12>
    }
  }
  log_printf("\n");
 800be60:	480a      	ldr	r0, [pc, #40]	@ (800be8c <logger_print_result+0x174>)
 800be62:	f7fa fc3b 	bl	80066dc <log_printf>
}
 800be66:	bf00      	nop
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	ecbd 8b02 	vpop	{d8}
 800be70:	bd90      	pop	{r4, r7, pc}
 800be72:	bf00      	nop
 800be74:	08014a2c 	.word	0x08014a2c
 800be78:	08014a3c 	.word	0x08014a3c
 800be7c:	08014a48 	.word	0x08014a48
 800be80:	20001100 	.word	0x20001100
 800be84:	08014a6c 	.word	0x08014a6c
 800be88:	08014a8c 	.word	0x08014a8c
 800be8c:	08014aac 	.word	0x08014aac

0800be90 <decimal_part>:

static int32_t decimal_part(float_t x)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 800be9a:	edd7 7a01 	vldr	s15, [r7, #4]
 800be9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea2:	ee17 3a90 	vmov	r3, s15
 800bea6:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beb2:	ed97 7a01 	vldr	s14, [r7, #4]
 800beb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800bed8 <decimal_part+0x48>
 800bebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bec6:	ee17 3a90 	vmov	r3, s15
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	42c80000 	.word	0x42c80000

0800bedc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800bee0:	4907      	ldr	r1, [pc, #28]	@ (800bf00 <MX_FATFS_Init+0x24>)
 800bee2:	4808      	ldr	r0, [pc, #32]	@ (800bf04 <MX_FATFS_Init+0x28>)
 800bee4:	f003 fa06 	bl	800f2f4 <FATFS_LinkDriver>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800beee:	f04f 33ff 	mov.w	r3, #4294967295
 800bef2:	e003      	b.n	800befc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800bef4:	4b04      	ldr	r3, [pc, #16]	@ (800bf08 <MX_FATFS_Init+0x2c>)
 800bef6:	2201      	movs	r2, #1
 800bef8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800befa:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800befc:	4618      	mov	r0, r3
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	20001118 	.word	0x20001118
 800bf04:	200000f8 	.word	0x200000f8
 800bf08:	2000111c 	.word	0x2000111c

0800bf0c <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bf10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 f9d1 	bl	800c2d0 <USER_SPI_initialize>
 800bf2e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 faaf 	bl	800c4a8 <USER_SPI_status>
 800bf4a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
 800bf5e:	603b      	str	r3, [r7, #0]
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800bf64:	7bf8      	ldrb	r0, [r7, #15]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	f000 fab2 	bl	800c4d4 <USER_SPI_read>
 800bf70:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800bf8a:	7bf8      	ldrb	r0, [r7, #15]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	f000 fb05 	bl	800c5a0 <USER_SPI_write>
 800bf96:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	603a      	str	r2, [r7, #0]
 800bfaa:	71fb      	strb	r3, [r7, #7]
 800bfac:	460b      	mov	r3, r1
 800bfae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800bfb0:	79b9      	ldrb	r1, [r7, #6]
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fb6e 	bl	800c698 <USER_SPI_ioctl>
 800bfbc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800bfd0:	f7fa fd06 	bl	80069e0 <HAL_GetTick>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	4a04      	ldr	r2, [pc, #16]	@ (800bfe8 <SPI_Timer_On+0x20>)
 800bfd8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800bfda:	4a04      	ldr	r2, [pc, #16]	@ (800bfec <SPI_Timer_On+0x24>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6013      	str	r3, [r2, #0]
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20001120 	.word	0x20001120
 800bfec:	20001124 	.word	0x20001124

0800bff0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800bff4:	f7fa fcf4 	bl	80069e0 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	4b06      	ldr	r3, [pc, #24]	@ (800c014 <SPI_Timer_Status+0x24>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	4b05      	ldr	r3, [pc, #20]	@ (800c018 <SPI_Timer_Status+0x28>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	bf34      	ite	cc
 800c008:	2301      	movcc	r3, #1
 800c00a:	2300      	movcs	r3, #0
 800c00c:	b2db      	uxtb	r3, r3
}
 800c00e:	4618      	mov	r0, r3
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20001120 	.word	0x20001120
 800c018:	20001124 	.word	0x20001124

0800c01c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af02      	add	r7, sp, #8
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c026:	f107 020f 	add.w	r2, r7, #15
 800c02a:	1df9      	adds	r1, r7, #7
 800c02c:	2332      	movs	r3, #50	@ 0x32
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	2301      	movs	r3, #1
 800c032:	4804      	ldr	r0, [pc, #16]	@ (800c044 <xchg_spi+0x28>)
 800c034:	f7fe f82a 	bl	800a08c <HAL_SPI_TransmitReceive>
    return rxDat;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	2000018c 	.word	0x2000018c

0800c048 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e00a      	b.n	800c06e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	18d4      	adds	r4, r2, r3
 800c05e:	20ff      	movs	r0, #255	@ 0xff
 800c060:	f7ff ffdc 	bl	800c01c <xchg_spi>
 800c064:	4603      	mov	r3, r0
 800c066:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d3f0      	bcc.n	800c058 <rcvr_spi_multi+0x10>
	}
}
 800c076:	bf00      	nop
 800c078:	bf00      	nop
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd90      	pop	{r4, r7, pc}

0800c080 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	f04f 33ff 	mov.w	r3, #4294967295
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	4803      	ldr	r0, [pc, #12]	@ (800c0a4 <xmit_spi_multi+0x24>)
 800c096:	f7fd fe83 	bl	8009da0 <HAL_SPI_Transmit>
}
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000018c 	.word	0x2000018c

0800c0a8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c0b0:	f7fa fc96 	bl	80069e0 <HAL_GetTick>
 800c0b4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c0ba:	20ff      	movs	r0, #255	@ 0xff
 800c0bc:	f7ff ffae 	bl	800c01c <xchg_spi>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2bff      	cmp	r3, #255	@ 0xff
 800c0c8:	d007      	beq.n	800c0da <wait_ready+0x32>
 800c0ca:	f7fa fc89 	bl	80069e0 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d8ef      	bhi.n	800c0ba <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	2bff      	cmp	r3, #255	@ 0xff
 800c0de:	bf0c      	ite	eq
 800c0e0:	2301      	moveq	r3, #1
 800c0e2:	2300      	movne	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0fa:	f7fa ffdb 	bl	80070b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c0fe:	20ff      	movs	r0, #255	@ 0xff
 800c100:	f7ff ff8c 	bl	800c01c <xchg_spi>

}
 800c104:	bf00      	nop
 800c106:	bd80      	pop	{r7, pc}

0800c108 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c10c:	2200      	movs	r2, #0
 800c10e:	2101      	movs	r1, #1
 800c110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c114:	f7fa ffce 	bl	80070b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c118:	20ff      	movs	r0, #255	@ 0xff
 800c11a:	f7ff ff7f 	bl	800c01c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c11e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c122:	f7ff ffc1 	bl	800c0a8 <wait_ready>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <spiselect+0x28>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e002      	b.n	800c136 <spiselect+0x2e>

	despiselect();
 800c130:	f7ff ffdd 	bl	800c0ee <despiselect>
	return 0;	/* Timeout */
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	bd80      	pop	{r7, pc}

0800c13a <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c144:	20c8      	movs	r0, #200	@ 0xc8
 800c146:	f7ff ff3f 	bl	800bfc8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c14a:	20ff      	movs	r0, #255	@ 0xff
 800c14c:	f7ff ff66 	bl	800c01c <xchg_spi>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	2bff      	cmp	r3, #255	@ 0xff
 800c158:	d104      	bne.n	800c164 <rcvr_datablock+0x2a>
 800c15a:	f7ff ff49 	bl	800bff0 <SPI_Timer_Status>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f2      	bne.n	800c14a <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c164:	7bfb      	ldrb	r3, [r7, #15]
 800c166:	2bfe      	cmp	r3, #254	@ 0xfe
 800c168:	d001      	beq.n	800c16e <rcvr_datablock+0x34>
 800c16a:	2300      	movs	r3, #0
 800c16c:	e00a      	b.n	800c184 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff ff69 	bl	800c048 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c176:	20ff      	movs	r0, #255	@ 0xff
 800c178:	f7ff ff50 	bl	800c01c <xchg_spi>
 800c17c:	20ff      	movs	r0, #255	@ 0xff
 800c17e:	f7ff ff4d 	bl	800c01c <xchg_spi>

	return 1;						/* Function succeeded */
 800c182:	2301      	movs	r3, #1
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c198:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c19c:	f7ff ff84 	bl	800c0a8 <wait_ready>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <xmit_datablock+0x1e>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e01e      	b.n	800c1e8 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ff35 	bl	800c01c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	2bfd      	cmp	r3, #253	@ 0xfd
 800c1b6:	d016      	beq.n	800c1e6 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c1b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff ff5f 	bl	800c080 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c1c2:	20ff      	movs	r0, #255	@ 0xff
 800c1c4:	f7ff ff2a 	bl	800c01c <xchg_spi>
 800c1c8:	20ff      	movs	r0, #255	@ 0xff
 800c1ca:	f7ff ff27 	bl	800c01c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c1ce:	20ff      	movs	r0, #255	@ 0xff
 800c1d0:	f7ff ff24 	bl	800c01c <xchg_spi>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	f003 031f 	and.w	r3, r3, #31
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	d001      	beq.n	800c1e6 <xmit_datablock+0x5a>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e000      	b.n	800c1e8 <xmit_datablock+0x5c>
	}
	return 1;
 800c1e6:	2301      	movs	r3, #1
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c1fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c200:	2b00      	cmp	r3, #0
 800c202:	da0e      	bge.n	800c222 <send_cmd+0x32>
		cmd &= 0x7F;
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c20a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c20c:	2100      	movs	r1, #0
 800c20e:	2037      	movs	r0, #55	@ 0x37
 800c210:	f7ff ffee 	bl	800c1f0 <send_cmd>
 800c214:	4603      	mov	r3, r0
 800c216:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d901      	bls.n	800c222 <send_cmd+0x32>
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
 800c220:	e051      	b.n	800c2c6 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	2b0c      	cmp	r3, #12
 800c226:	d008      	beq.n	800c23a <send_cmd+0x4a>
		despiselect();
 800c228:	f7ff ff61 	bl	800c0ee <despiselect>
		if (!spiselect()) return 0xFF;
 800c22c:	f7ff ff6c 	bl	800c108 <spiselect>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <send_cmd+0x4a>
 800c236:	23ff      	movs	r3, #255	@ 0xff
 800c238:	e045      	b.n	800c2c6 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c240:	b2db      	uxtb	r3, r3
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff feea 	bl	800c01c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	0e1b      	lsrs	r3, r3, #24
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fee4 	bl	800c01c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	0c1b      	lsrs	r3, r3, #16
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff fede 	bl	800c01c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	0a1b      	lsrs	r3, r3, #8
 800c264:	b2db      	uxtb	r3, r3
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fed8 	bl	800c01c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fed3 	bl	800c01c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c276:	2301      	movs	r3, #1
 800c278:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <send_cmd+0x94>
 800c280:	2395      	movs	r3, #149	@ 0x95
 800c282:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	2b08      	cmp	r3, #8
 800c288:	d101      	bne.n	800c28e <send_cmd+0x9e>
 800c28a:	2387      	movs	r3, #135	@ 0x87
 800c28c:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fec3 	bl	800c01c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c296:	79fb      	ldrb	r3, [r7, #7]
 800c298:	2b0c      	cmp	r3, #12
 800c29a:	d102      	bne.n	800c2a2 <send_cmd+0xb2>
 800c29c:	20ff      	movs	r0, #255	@ 0xff
 800c29e:	f7ff febd 	bl	800c01c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c2a2:	230a      	movs	r3, #10
 800c2a4:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c2a6:	20ff      	movs	r0, #255	@ 0xff
 800c2a8:	f7ff feb8 	bl	800c01c <xchg_spi>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c2b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da05      	bge.n	800c2c4 <send_cmd+0xd4>
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	73fb      	strb	r3, [r7, #15]
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1f0      	bne.n	800c2a6 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c2da:	79fb      	ldrb	r3, [r7, #7]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <USER_SPI_initialize+0x14>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e0d6      	b.n	800c492 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c2e4:	4b6d      	ldr	r3, [pc, #436]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <USER_SPI_initialize+0x2a>
 800c2f2:	4b6a      	ldr	r3, [pc, #424]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	e0cb      	b.n	800c492 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800c2fa:	4b69      	ldr	r3, [pc, #420]	@ (800c4a0 <USER_SPI_initialize+0x1d0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800c304:	4b66      	ldr	r3, [pc, #408]	@ (800c4a0 <USER_SPI_initialize+0x1d0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800c30c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c30e:	230a      	movs	r3, #10
 800c310:	73fb      	strb	r3, [r7, #15]
 800c312:	e005      	b.n	800c320 <USER_SPI_initialize+0x50>
 800c314:	20ff      	movs	r0, #255	@ 0xff
 800c316:	f7ff fe81 	bl	800c01c <xchg_spi>
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1f6      	bne.n	800c314 <USER_SPI_initialize+0x44>

	ty = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c32a:	2100      	movs	r1, #0
 800c32c:	2000      	movs	r0, #0
 800c32e:	f7ff ff5f 	bl	800c1f0 <send_cmd>
 800c332:	4603      	mov	r3, r0
 800c334:	2b01      	cmp	r3, #1
 800c336:	f040 808b 	bne.w	800c450 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c33a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c33e:	f7ff fe43 	bl	800bfc8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c342:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800c346:	2008      	movs	r0, #8
 800c348:	f7ff ff52 	bl	800c1f0 <send_cmd>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d151      	bne.n	800c3f6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
 800c356:	e00d      	b.n	800c374 <USER_SPI_initialize+0xa4>
 800c358:	7bfc      	ldrb	r4, [r7, #15]
 800c35a:	20ff      	movs	r0, #255	@ 0xff
 800c35c:	f7ff fe5e 	bl	800c01c <xchg_spi>
 800c360:	4603      	mov	r3, r0
 800c362:	461a      	mov	r2, r3
 800c364:	f104 0310 	add.w	r3, r4, #16
 800c368:	443b      	add	r3, r7
 800c36a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	3301      	adds	r3, #1
 800c372:	73fb      	strb	r3, [r7, #15]
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	2b03      	cmp	r3, #3
 800c378:	d9ee      	bls.n	800c358 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c37a:	7abb      	ldrb	r3, [r7, #10]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d167      	bne.n	800c450 <USER_SPI_initialize+0x180>
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	2baa      	cmp	r3, #170	@ 0xaa
 800c384:	d164      	bne.n	800c450 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c386:	bf00      	nop
 800c388:	f7ff fe32 	bl	800bff0 <SPI_Timer_Status>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <USER_SPI_initialize+0xd2>
 800c392:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c396:	20a9      	movs	r0, #169	@ 0xa9
 800c398:	f7ff ff2a 	bl	800c1f0 <send_cmd>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1f2      	bne.n	800c388 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c3a2:	f7ff fe25 	bl	800bff0 <SPI_Timer_Status>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d051      	beq.n	800c450 <USER_SPI_initialize+0x180>
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	203a      	movs	r0, #58	@ 0x3a
 800c3b0:	f7ff ff1e 	bl	800c1f0 <send_cmd>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d14a      	bne.n	800c450 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
 800c3be:	e00d      	b.n	800c3dc <USER_SPI_initialize+0x10c>
 800c3c0:	7bfc      	ldrb	r4, [r7, #15]
 800c3c2:	20ff      	movs	r0, #255	@ 0xff
 800c3c4:	f7ff fe2a 	bl	800c01c <xchg_spi>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f104 0310 	add.w	r3, r4, #16
 800c3d0:	443b      	add	r3, r7
 800c3d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	73fb      	strb	r3, [r7, #15]
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d9ee      	bls.n	800c3c0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c3e2:	7a3b      	ldrb	r3, [r7, #8]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <USER_SPI_initialize+0x120>
 800c3ec:	230c      	movs	r3, #12
 800c3ee:	e000      	b.n	800c3f2 <USER_SPI_initialize+0x122>
 800c3f0:	2304      	movs	r3, #4
 800c3f2:	737b      	strb	r3, [r7, #13]
 800c3f4:	e02c      	b.n	800c450 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	20a9      	movs	r0, #169	@ 0xa9
 800c3fa:	f7ff fef9 	bl	800c1f0 <send_cmd>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b01      	cmp	r3, #1
 800c402:	d804      	bhi.n	800c40e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c404:	2302      	movs	r3, #2
 800c406:	737b      	strb	r3, [r7, #13]
 800c408:	23a9      	movs	r3, #169	@ 0xa9
 800c40a:	73bb      	strb	r3, [r7, #14]
 800c40c:	e003      	b.n	800c416 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c40e:	2301      	movs	r3, #1
 800c410:	737b      	strb	r3, [r7, #13]
 800c412:	2301      	movs	r3, #1
 800c414:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c416:	bf00      	nop
 800c418:	f7ff fdea 	bl	800bff0 <SPI_Timer_Status>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d007      	beq.n	800c432 <USER_SPI_initialize+0x162>
 800c422:	7bbb      	ldrb	r3, [r7, #14]
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fee2 	bl	800c1f0 <send_cmd>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1f2      	bne.n	800c418 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c432:	f7ff fddd 	bl	800bff0 <SPI_Timer_Status>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <USER_SPI_initialize+0x17c>
 800c43c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c440:	2010      	movs	r0, #16
 800c442:	f7ff fed5 	bl	800c1f0 <send_cmd>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <USER_SPI_initialize+0x180>
				ty = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c450:	4a14      	ldr	r2, [pc, #80]	@ (800c4a4 <USER_SPI_initialize+0x1d4>)
 800c452:	7b7b      	ldrb	r3, [r7, #13]
 800c454:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c456:	f7ff fe4a 	bl	800c0ee <despiselect>

	if (ty) {			/* OK */
 800c45a:	7b7b      	ldrb	r3, [r7, #13]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d012      	beq.n	800c486 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800c460:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <USER_SPI_initialize+0x1d0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <USER_SPI_initialize+0x1d0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0210 	orr.w	r2, r2, #16
 800c472:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c474:	4b09      	ldr	r3, [pc, #36]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f023 0301 	bic.w	r3, r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	4b06      	ldr	r3, [pc, #24]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e002      	b.n	800c48c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c486:	4b05      	ldr	r3, [pc, #20]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c488:	2201      	movs	r2, #1
 800c48a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c48c:	4b03      	ldr	r3, [pc, #12]	@ (800c49c <USER_SPI_initialize+0x1cc>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	b2db      	uxtb	r3, r3
}
 800c492:	4618      	mov	r0, r3
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	bd90      	pop	{r4, r7, pc}
 800c49a:	bf00      	nop
 800c49c:	2000010c 	.word	0x2000010c
 800c4a0:	2000018c 	.word	0x2000018c
 800c4a4:	2000111d 	.word	0x2000111d

0800c4a8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <USER_SPI_status+0x14>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e002      	b.n	800c4c2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c4bc:	4b04      	ldr	r3, [pc, #16]	@ (800c4d0 <USER_SPI_status+0x28>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	b2db      	uxtb	r3, r3
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	2000010c 	.word	0x2000010c

0800c4d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	607a      	str	r2, [r7, #4]
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <USER_SPI_read+0x1c>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <USER_SPI_read+0x20>
 800c4f0:	2304      	movs	r3, #4
 800c4f2:	e04d      	b.n	800c590 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c4f4:	4b28      	ldr	r3, [pc, #160]	@ (800c598 <USER_SPI_read+0xc4>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <USER_SPI_read+0x32>
 800c502:	2303      	movs	r3, #3
 800c504:	e044      	b.n	800c590 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c506:	4b25      	ldr	r3, [pc, #148]	@ (800c59c <USER_SPI_read+0xc8>)
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d102      	bne.n	800c518 <USER_SPI_read+0x44>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	025b      	lsls	r3, r3, #9
 800c516:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d111      	bne.n	800c542 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c51e:	6879      	ldr	r1, [r7, #4]
 800c520:	2011      	movs	r0, #17
 800c522:	f7ff fe65 	bl	800c1f0 <send_cmd>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d129      	bne.n	800c580 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c52c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c530:	68b8      	ldr	r0, [r7, #8]
 800c532:	f7ff fe02 	bl	800c13a <rcvr_datablock>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d021      	beq.n	800c580 <USER_SPI_read+0xac>
			count = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	e01e      	b.n	800c580 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	2012      	movs	r0, #18
 800c546:	f7ff fe53 	bl	800c1f0 <send_cmd>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d117      	bne.n	800c580 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c554:	68b8      	ldr	r0, [r7, #8]
 800c556:	f7ff fdf0 	bl	800c13a <rcvr_datablock>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00a      	beq.n	800c576 <USER_SPI_read+0xa2>
				buff += 512;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c566:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	603b      	str	r3, [r7, #0]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1ed      	bne.n	800c550 <USER_SPI_read+0x7c>
 800c574:	e000      	b.n	800c578 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c576:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c578:	2100      	movs	r1, #0
 800c57a:	200c      	movs	r0, #12
 800c57c:	f7ff fe38 	bl	800c1f0 <send_cmd>
		}
	}
	despiselect();
 800c580:	f7ff fdb5 	bl	800c0ee <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bf14      	ite	ne
 800c58a:	2301      	movne	r3, #1
 800c58c:	2300      	moveq	r3, #0
 800c58e:	b2db      	uxtb	r3, r3
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	2000010c 	.word	0x2000010c
 800c59c:	2000111d 	.word	0x2000111d

0800c5a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <USER_SPI_write+0x1c>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <USER_SPI_write+0x20>
 800c5bc:	2304      	movs	r3, #4
 800c5be:	e063      	b.n	800c688 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c5c0:	4b33      	ldr	r3, [pc, #204]	@ (800c690 <USER_SPI_write+0xf0>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <USER_SPI_write+0x32>
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e05a      	b.n	800c688 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c5d2:	4b2f      	ldr	r3, [pc, #188]	@ (800c690 <USER_SPI_write+0xf0>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <USER_SPI_write+0x44>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e051      	b.n	800c688 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c5e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c694 <USER_SPI_write+0xf4>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	f003 0308 	and.w	r3, r3, #8
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <USER_SPI_write+0x56>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	025b      	lsls	r3, r3, #9
 800c5f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d110      	bne.n	800c61e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	2018      	movs	r0, #24
 800c600:	f7ff fdf6 	bl	800c1f0 <send_cmd>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d136      	bne.n	800c678 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c60a:	21fe      	movs	r1, #254	@ 0xfe
 800c60c:	68b8      	ldr	r0, [r7, #8]
 800c60e:	f7ff fdbd 	bl	800c18c <xmit_datablock>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d02f      	beq.n	800c678 <USER_SPI_write+0xd8>
			count = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	e02c      	b.n	800c678 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c61e:	4b1d      	ldr	r3, [pc, #116]	@ (800c694 <USER_SPI_write+0xf4>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	f003 0306 	and.w	r3, r3, #6
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <USER_SPI_write+0x92>
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	2097      	movs	r0, #151	@ 0x97
 800c62e:	f7ff fddf 	bl	800c1f0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	2019      	movs	r0, #25
 800c636:	f7ff fddb 	bl	800c1f0 <send_cmd>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d11b      	bne.n	800c678 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c640:	21fc      	movs	r1, #252	@ 0xfc
 800c642:	68b8      	ldr	r0, [r7, #8]
 800c644:	f7ff fda2 	bl	800c18c <xmit_datablock>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <USER_SPI_write+0xc4>
				buff += 512;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c654:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3b01      	subs	r3, #1
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ee      	bne.n	800c640 <USER_SPI_write+0xa0>
 800c662:	e000      	b.n	800c666 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c664:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c666:	21fd      	movs	r1, #253	@ 0xfd
 800c668:	2000      	movs	r0, #0
 800c66a:	f7ff fd8f 	bl	800c18c <xmit_datablock>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <USER_SPI_write+0xd8>
 800c674:	2301      	movs	r3, #1
 800c676:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c678:	f7ff fd39 	bl	800c0ee <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	bf14      	ite	ne
 800c682:	2301      	movne	r3, #1
 800c684:	2300      	moveq	r3, #0
 800c686:	b2db      	uxtb	r3, r3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000010c 	.word	0x2000010c
 800c694:	2000111d 	.word	0x2000111d

0800c698 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08c      	sub	sp, #48	@ 0x30
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	603a      	str	r2, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <USER_SPI_ioctl+0x1a>
 800c6ae:	2304      	movs	r3, #4
 800c6b0:	e15a      	b.n	800c968 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c6b2:	4baf      	ldr	r3, [pc, #700]	@ (800c970 <USER_SPI_ioctl+0x2d8>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <USER_SPI_ioctl+0x2c>
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e151      	b.n	800c968 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800c6ca:	79bb      	ldrb	r3, [r7, #6]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	f200 8136 	bhi.w	800c93e <USER_SPI_ioctl+0x2a6>
 800c6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d8 <USER_SPI_ioctl+0x40>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c6ed 	.word	0x0800c6ed
 800c6dc:	0800c701 	.word	0x0800c701
 800c6e0:	0800c93f 	.word	0x0800c93f
 800c6e4:	0800c7ad 	.word	0x0800c7ad
 800c6e8:	0800c8a3 	.word	0x0800c8a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c6ec:	f7ff fd0c 	bl	800c108 <spiselect>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 8127 	beq.w	800c946 <USER_SPI_ioctl+0x2ae>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c6fe:	e122      	b.n	800c946 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c700:	2100      	movs	r1, #0
 800c702:	2009      	movs	r0, #9
 800c704:	f7ff fd74 	bl	800c1f0 <send_cmd>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f040 811d 	bne.w	800c94a <USER_SPI_ioctl+0x2b2>
 800c710:	f107 030c 	add.w	r3, r7, #12
 800c714:	2110      	movs	r1, #16
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff fd0f 	bl	800c13a <rcvr_datablock>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f000 8113 	beq.w	800c94a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c724:	7b3b      	ldrb	r3, [r7, #12]
 800c726:	099b      	lsrs	r3, r3, #6
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d111      	bne.n	800c752 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c72e:	7d7b      	ldrb	r3, [r7, #21]
 800c730:	461a      	mov	r2, r3
 800c732:	7d3b      	ldrb	r3, [r7, #20]
 800c734:	021b      	lsls	r3, r3, #8
 800c736:	4413      	add	r3, r2
 800c738:	461a      	mov	r2, r3
 800c73a:	7cfb      	ldrb	r3, [r7, #19]
 800c73c:	041b      	lsls	r3, r3, #16
 800c73e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800c742:	4413      	add	r3, r2
 800c744:	3301      	adds	r3, #1
 800c746:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	029a      	lsls	r2, r3, #10
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	e028      	b.n	800c7a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c752:	7c7b      	ldrb	r3, [r7, #17]
 800c754:	f003 030f 	and.w	r3, r3, #15
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	7dbb      	ldrb	r3, [r7, #22]
 800c75c:	09db      	lsrs	r3, r3, #7
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	4413      	add	r3, r2
 800c762:	b2da      	uxtb	r2, r3
 800c764:	7d7b      	ldrb	r3, [r7, #21]
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	f003 0306 	and.w	r3, r3, #6
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	4413      	add	r3, r2
 800c772:	b2db      	uxtb	r3, r3
 800c774:	3302      	adds	r3, #2
 800c776:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c77a:	7d3b      	ldrb	r3, [r7, #20]
 800c77c:	099b      	lsrs	r3, r3, #6
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	461a      	mov	r2, r3
 800c782:	7cfb      	ldrb	r3, [r7, #19]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	441a      	add	r2, r3
 800c788:	7cbb      	ldrb	r3, [r7, #18]
 800c78a:	029b      	lsls	r3, r3, #10
 800c78c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c790:	4413      	add	r3, r2
 800c792:	3301      	adds	r3, #1
 800c794:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c796:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c79a:	3b09      	subs	r3, #9
 800c79c:	69fa      	ldr	r2, [r7, #28]
 800c79e:	409a      	lsls	r2, r3
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c7aa:	e0ce      	b.n	800c94a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c7ac:	4b71      	ldr	r3, [pc, #452]	@ (800c974 <USER_SPI_ioctl+0x2dc>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d031      	beq.n	800c81c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	208d      	movs	r0, #141	@ 0x8d
 800c7bc:	f7ff fd18 	bl	800c1f0 <send_cmd>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f040 80c3 	bne.w	800c94e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c7c8:	20ff      	movs	r0, #255	@ 0xff
 800c7ca:	f7ff fc27 	bl	800c01c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	2110      	movs	r1, #16
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fcb0 	bl	800c13a <rcvr_datablock>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80b6 	beq.w	800c94e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c7e2:	2330      	movs	r3, #48	@ 0x30
 800c7e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c7e8:	e007      	b.n	800c7fa <USER_SPI_ioctl+0x162>
 800c7ea:	20ff      	movs	r0, #255	@ 0xff
 800c7ec:	f7ff fc16 	bl	800c01c <xchg_spi>
 800c7f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c7fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1f3      	bne.n	800c7ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c802:	7dbb      	ldrb	r3, [r7, #22]
 800c804:	091b      	lsrs	r3, r3, #4
 800c806:	b2db      	uxtb	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	2310      	movs	r3, #16
 800c80c:	fa03 f202 	lsl.w	r2, r3, r2
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c81a:	e098      	b.n	800c94e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c81c:	2100      	movs	r1, #0
 800c81e:	2009      	movs	r0, #9
 800c820:	f7ff fce6 	bl	800c1f0 <send_cmd>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	f040 8091 	bne.w	800c94e <USER_SPI_ioctl+0x2b6>
 800c82c:	f107 030c 	add.w	r3, r7, #12
 800c830:	2110      	movs	r1, #16
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fc81 	bl	800c13a <rcvr_datablock>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 8087 	beq.w	800c94e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c840:	4b4c      	ldr	r3, [pc, #304]	@ (800c974 <USER_SPI_ioctl+0x2dc>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0302 	and.w	r3, r3, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d012      	beq.n	800c872 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c84c:	7dbb      	ldrb	r3, [r7, #22]
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c854:	7dfa      	ldrb	r2, [r7, #23]
 800c856:	09d2      	lsrs	r2, r2, #7
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	4413      	add	r3, r2
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	7e7b      	ldrb	r3, [r7, #25]
 800c860:	099b      	lsrs	r3, r3, #6
 800c862:	b2db      	uxtb	r3, r3
 800c864:	3b01      	subs	r3, #1
 800c866:	fa02 f303 	lsl.w	r3, r2, r3
 800c86a:	461a      	mov	r2, r3
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	e013      	b.n	800c89a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c872:	7dbb      	ldrb	r3, [r7, #22]
 800c874:	109b      	asrs	r3, r3, #2
 800c876:	b29b      	uxth	r3, r3
 800c878:	f003 031f 	and.w	r3, r3, #31
 800c87c:	3301      	adds	r3, #1
 800c87e:	7dfa      	ldrb	r2, [r7, #23]
 800c880:	00d2      	lsls	r2, r2, #3
 800c882:	f002 0218 	and.w	r2, r2, #24
 800c886:	7df9      	ldrb	r1, [r7, #23]
 800c888:	0949      	lsrs	r1, r1, #5
 800c88a:	b2c9      	uxtb	r1, r1
 800c88c:	440a      	add	r2, r1
 800c88e:	3201      	adds	r2, #1
 800c890:	fb02 f303 	mul.w	r3, r2, r3
 800c894:	461a      	mov	r2, r3
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c8a0:	e055      	b.n	800c94e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c8a2:	4b34      	ldr	r3, [pc, #208]	@ (800c974 <USER_SPI_ioctl+0x2dc>)
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	f003 0306 	and.w	r3, r3, #6
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d051      	beq.n	800c952 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c8ae:	f107 020c 	add.w	r2, r7, #12
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	210b      	movs	r1, #11
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7ff feee 	bl	800c698 <USER_SPI_ioctl>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d149      	bne.n	800c956 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c8c2:	7b3b      	ldrb	r3, [r7, #12]
 800c8c4:	099b      	lsrs	r3, r3, #6
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d104      	bne.n	800c8d6 <USER_SPI_ioctl+0x23e>
 800c8cc:	7dbb      	ldrb	r3, [r7, #22]
 800c8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d041      	beq.n	800c95a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c8e6:	4b23      	ldr	r3, [pc, #140]	@ (800c974 <USER_SPI_ioctl+0x2dc>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	f003 0308 	and.w	r3, r3, #8
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f4:	025b      	lsls	r3, r3, #9
 800c8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	025b      	lsls	r3, r3, #9
 800c8fc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c8fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c900:	2020      	movs	r0, #32
 800c902:	f7ff fc75 	bl	800c1f0 <send_cmd>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d128      	bne.n	800c95e <USER_SPI_ioctl+0x2c6>
 800c90c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c90e:	2021      	movs	r0, #33	@ 0x21
 800c910:	f7ff fc6e 	bl	800c1f0 <send_cmd>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d121      	bne.n	800c95e <USER_SPI_ioctl+0x2c6>
 800c91a:	2100      	movs	r1, #0
 800c91c:	2026      	movs	r0, #38	@ 0x26
 800c91e:	f7ff fc67 	bl	800c1f0 <send_cmd>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11a      	bne.n	800c95e <USER_SPI_ioctl+0x2c6>
 800c928:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c92c:	f7ff fbbc 	bl	800c0a8 <wait_ready>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d013      	beq.n	800c95e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c936:	2300      	movs	r3, #0
 800c938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c93c:	e00f      	b.n	800c95e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c93e:	2304      	movs	r3, #4
 800c940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c944:	e00c      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		break;
 800c946:	bf00      	nop
 800c948:	e00a      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		break;
 800c94a:	bf00      	nop
 800c94c:	e008      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		break;
 800c94e:	bf00      	nop
 800c950:	e006      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c952:	bf00      	nop
 800c954:	e004      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c956:	bf00      	nop
 800c958:	e002      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c95a:	bf00      	nop
 800c95c:	e000      	b.n	800c960 <USER_SPI_ioctl+0x2c8>
		break;
 800c95e:	bf00      	nop
	}

	despiselect();
 800c960:	f7ff fbc5 	bl	800c0ee <despiselect>

	return res;
 800c964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3730      	adds	r7, #48	@ 0x30
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	2000010c 	.word	0x2000010c
 800c974:	2000111d 	.word	0x2000111d

0800c978 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	4a08      	ldr	r2, [pc, #32]	@ (800c9a8 <disk_status+0x30>)
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4413      	add	r3, r2
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	79fa      	ldrb	r2, [r7, #7]
 800c990:	4905      	ldr	r1, [pc, #20]	@ (800c9a8 <disk_status+0x30>)
 800c992:	440a      	add	r2, r1
 800c994:	7a12      	ldrb	r2, [r2, #8]
 800c996:	4610      	mov	r0, r2
 800c998:	4798      	blx	r3
 800c99a:	4603      	mov	r3, r0
 800c99c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20001150 	.word	0x20001150

0800c9ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	4a0e      	ldr	r2, [pc, #56]	@ (800c9f8 <disk_initialize+0x4c>)
 800c9be:	5cd3      	ldrb	r3, [r2, r3]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d114      	bne.n	800c9ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c9f8 <disk_initialize+0x4c>)
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	79fa      	ldrb	r2, [r7, #7]
 800c9d2:	4909      	ldr	r1, [pc, #36]	@ (800c9f8 <disk_initialize+0x4c>)
 800c9d4:	440a      	add	r2, r1
 800c9d6:	7a12      	ldrb	r2, [r2, #8]
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4798      	blx	r3
 800c9dc:	4603      	mov	r3, r0
 800c9de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d103      	bne.n	800c9ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	4a03      	ldr	r2, [pc, #12]	@ (800c9f8 <disk_initialize+0x4c>)
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20001150 	.word	0x20001150

0800c9fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c9fc:	b590      	push	{r4, r7, lr}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60b9      	str	r1, [r7, #8]
 800ca04:	607a      	str	r2, [r7, #4]
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	4a0a      	ldr	r2, [pc, #40]	@ (800ca38 <disk_read+0x3c>)
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	689c      	ldr	r4, [r3, #8]
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4a07      	ldr	r2, [pc, #28]	@ (800ca38 <disk_read+0x3c>)
 800ca1c:	4413      	add	r3, r2
 800ca1e:	7a18      	ldrb	r0, [r3, #8]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	47a0      	blx	r4
 800ca28:	4603      	mov	r3, r0
 800ca2a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd90      	pop	{r4, r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20001150 	.word	0x20001150

0800ca3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ca78 <disk_write+0x3c>)
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	68dc      	ldr	r4, [r3, #12]
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	4a07      	ldr	r2, [pc, #28]	@ (800ca78 <disk_write+0x3c>)
 800ca5c:	4413      	add	r3, r2
 800ca5e:	7a18      	ldrb	r0, [r3, #8]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	47a0      	blx	r4
 800ca68:	4603      	mov	r3, r0
 800ca6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	371c      	adds	r7, #28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd90      	pop	{r4, r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20001150 	.word	0x20001150

0800ca7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	603a      	str	r2, [r7, #0]
 800ca86:	71fb      	strb	r3, [r7, #7]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	4a09      	ldr	r2, [pc, #36]	@ (800cab4 <disk_ioctl+0x38>)
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	79fa      	ldrb	r2, [r7, #7]
 800ca9a:	4906      	ldr	r1, [pc, #24]	@ (800cab4 <disk_ioctl+0x38>)
 800ca9c:	440a      	add	r2, r1
 800ca9e:	7a10      	ldrb	r0, [r2, #8]
 800caa0:	79b9      	ldrb	r1, [r7, #6]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	4798      	blx	r3
 800caa6:	4603      	mov	r3, r0
 800caa8:	73fb      	strb	r3, [r7, #15]
  return res;
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	20001150 	.word	0x20001150

0800cab8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3301      	adds	r3, #1
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cac8:	89fb      	ldrh	r3, [r7, #14]
 800caca:	021b      	lsls	r3, r3, #8
 800cacc:	b21a      	sxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	b21b      	sxth	r3, r3
 800cad4:	4313      	orrs	r3, r2
 800cad6:	b21b      	sxth	r3, r3
 800cad8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cada:	89fb      	ldrh	r3, [r7, #14]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3303      	adds	r3, #3
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	3202      	adds	r2, #2
 800cb00:	7812      	ldrb	r2, [r2, #0]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	021b      	lsls	r3, r3, #8
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	3201      	adds	r2, #1
 800cb0e:	7812      	ldrb	r2, [r2, #0]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	021b      	lsls	r3, r3, #8
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
	return rv;
 800cb20:	68fb      	ldr	r3, [r7, #12]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	887a      	ldrh	r2, [r7, #2]
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	887b      	ldrh	r3, [r7, #2]
 800cb48:	0a1b      	lsrs	r3, r3, #8
 800cb4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	1c5a      	adds	r2, r3, #1
 800cb50:	607a      	str	r2, [r7, #4]
 800cb52:	887a      	ldrh	r2, [r7, #2]
 800cb54:	b2d2      	uxtb	r2, r2
 800cb56:	701a      	strb	r2, [r3, #0]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	b2d2      	uxtb	r2, r2
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	0a1b      	lsrs	r3, r3, #8
 800cb7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	607a      	str	r2, [r7, #4]
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	0a1b      	lsrs	r3, r3, #8
 800cb90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	0a1b      	lsrs	r3, r3, #8
 800cba2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	607a      	str	r2, [r7, #4]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	b2d2      	uxtb	r2, r2
 800cbae:	701a      	strb	r2, [r3, #0]
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cbbc:	b480      	push	{r7}
 800cbbe:	b087      	sub	sp, #28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00d      	beq.n	800cbf2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	1c53      	adds	r3, r2, #1
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	1c59      	adds	r1, r3, #1
 800cbe0:	6179      	str	r1, [r7, #20]
 800cbe2:	7812      	ldrb	r2, [r2, #0]
 800cbe4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	607b      	str	r3, [r7, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1f1      	bne.n	800cbd6 <mem_cpy+0x1a>
	}
}
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cbfe:	b480      	push	{r7}
 800cc00:	b087      	sub	sp, #28
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	617a      	str	r2, [r7, #20]
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	607b      	str	r3, [r7, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1f3      	bne.n	800cc0e <mem_set+0x10>
}
 800cc26:	bf00      	nop
 800cc28:	bf00      	nop
 800cc2a:	371c      	adds	r7, #28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cc34:	b480      	push	{r7}
 800cc36:	b089      	sub	sp, #36	@ 0x24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	61fa      	str	r2, [r7, #28]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	4619      	mov	r1, r3
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	61ba      	str	r2, [r7, #24]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	1acb      	subs	r3, r1, r3
 800cc60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	607b      	str	r3, [r7, #4]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d002      	beq.n	800cc74 <mem_cmp+0x40>
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0eb      	beq.n	800cc4c <mem_cmp+0x18>

	return r;
 800cc74:	697b      	ldr	r3, [r7, #20]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3724      	adds	r7, #36	@ 0x24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cc8c:	e002      	b.n	800cc94 <chk_chr+0x12>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3301      	adds	r3, #1
 800cc92:	607b      	str	r3, [r7, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d005      	beq.n	800cca8 <chk_chr+0x26>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d1f2      	bne.n	800cc8e <chk_chr+0xc>
	return *str;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <lock_fs+0x22>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f002 fb48 	bl	800f360 <ff_req_grant>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <lock_fs+0x22>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e000      	b.n	800ccdc <lock_fs+0x24>
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00d      	beq.n	800cd12 <unlock_fs+0x2e>
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	2b0c      	cmp	r3, #12
 800ccfa:	d00a      	beq.n	800cd12 <unlock_fs+0x2e>
 800ccfc:	78fb      	ldrb	r3, [r7, #3]
 800ccfe:	2b0b      	cmp	r3, #11
 800cd00:	d007      	beq.n	800cd12 <unlock_fs+0x2e>
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	2b0f      	cmp	r3, #15
 800cd06:	d004      	beq.n	800cd12 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f002 fb3c 	bl	800f38a <ff_rel_grant>
	}
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd26:	2300      	movs	r3, #0
 800cd28:	60bb      	str	r3, [r7, #8]
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	e029      	b.n	800cd84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cd30:	4a27      	ldr	r2, [pc, #156]	@ (800cdd0 <chk_lock+0xb4>)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	011b      	lsls	r3, r3, #4
 800cd36:	4413      	add	r3, r2
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d01d      	beq.n	800cd7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd3e:	4a24      	ldr	r2, [pc, #144]	@ (800cdd0 <chk_lock+0xb4>)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	4413      	add	r3, r2
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d116      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cd50:	4a1f      	ldr	r2, [pc, #124]	@ (800cdd0 <chk_lock+0xb4>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	4413      	add	r3, r2
 800cd58:	3304      	adds	r3, #4
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d10c      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd64:	4a1a      	ldr	r2, [pc, #104]	@ (800cdd0 <chk_lock+0xb4>)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d102      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd78:	e007      	b.n	800cd8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d9d2      	bls.n	800cd30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d109      	bne.n	800cda4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <chk_lock+0x80>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d101      	bne.n	800cda0 <chk_lock+0x84>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e010      	b.n	800cdc2 <chk_lock+0xa6>
 800cda0:	2312      	movs	r3, #18
 800cda2:	e00e      	b.n	800cdc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d108      	bne.n	800cdbc <chk_lock+0xa0>
 800cdaa:	4a09      	ldr	r2, [pc, #36]	@ (800cdd0 <chk_lock+0xb4>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	011b      	lsls	r3, r3, #4
 800cdb0:	4413      	add	r3, r2
 800cdb2:	330c      	adds	r3, #12
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdba:	d101      	bne.n	800cdc0 <chk_lock+0xa4>
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	e000      	b.n	800cdc2 <chk_lock+0xa6>
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3714      	adds	r7, #20
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	20001130 	.word	0x20001130

0800cdd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	e002      	b.n	800cde6 <enq_lock+0x12>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3301      	adds	r3, #1
 800cde4:	607b      	str	r3, [r7, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d806      	bhi.n	800cdfa <enq_lock+0x26>
 800cdec:	4a09      	ldr	r2, [pc, #36]	@ (800ce14 <enq_lock+0x40>)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	011b      	lsls	r3, r3, #4
 800cdf2:	4413      	add	r3, r2
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f2      	bne.n	800cde0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	bf14      	ite	ne
 800ce00:	2301      	movne	r3, #1
 800ce02:	2300      	moveq	r3, #0
 800ce04:	b2db      	uxtb	r3, r3
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20001130 	.word	0x20001130

0800ce18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	e01f      	b.n	800ce68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ce28:	4a41      	ldr	r2, [pc, #260]	@ (800cf30 <inc_lock+0x118>)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	4413      	add	r3, r2
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d113      	bne.n	800ce62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ce3a:	4a3d      	ldr	r2, [pc, #244]	@ (800cf30 <inc_lock+0x118>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	4413      	add	r3, r2
 800ce42:	3304      	adds	r3, #4
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d109      	bne.n	800ce62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ce4e:	4a38      	ldr	r2, [pc, #224]	@ (800cf30 <inc_lock+0x118>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4413      	add	r3, r2
 800ce56:	3308      	adds	r3, #8
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d006      	beq.n	800ce70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d9dc      	bls.n	800ce28 <inc_lock+0x10>
 800ce6e:	e000      	b.n	800ce72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ce70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d132      	bne.n	800cede <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	e002      	b.n	800ce84 <inc_lock+0x6c>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3301      	adds	r3, #1
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d806      	bhi.n	800ce98 <inc_lock+0x80>
 800ce8a:	4a29      	ldr	r2, [pc, #164]	@ (800cf30 <inc_lock+0x118>)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	4413      	add	r3, r2
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1f2      	bne.n	800ce7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d101      	bne.n	800cea2 <inc_lock+0x8a>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e040      	b.n	800cf24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	4922      	ldr	r1, [pc, #136]	@ (800cf30 <inc_lock+0x118>)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	011b      	lsls	r3, r3, #4
 800ceac:	440b      	add	r3, r1
 800ceae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	689a      	ldr	r2, [r3, #8]
 800ceb4:	491e      	ldr	r1, [pc, #120]	@ (800cf30 <inc_lock+0x118>)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	440b      	add	r3, r1
 800cebc:	3304      	adds	r3, #4
 800cebe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	695a      	ldr	r2, [r3, #20]
 800cec4:	491a      	ldr	r1, [pc, #104]	@ (800cf30 <inc_lock+0x118>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	440b      	add	r3, r1
 800cecc:	3308      	adds	r3, #8
 800cece:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ced0:	4a17      	ldr	r2, [pc, #92]	@ (800cf30 <inc_lock+0x118>)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	011b      	lsls	r3, r3, #4
 800ced6:	4413      	add	r3, r2
 800ced8:	330c      	adds	r3, #12
 800ceda:	2200      	movs	r2, #0
 800cedc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d009      	beq.n	800cef8 <inc_lock+0xe0>
 800cee4:	4a12      	ldr	r2, [pc, #72]	@ (800cf30 <inc_lock+0x118>)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	4413      	add	r3, r2
 800ceec:	330c      	adds	r3, #12
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <inc_lock+0xe0>
 800cef4:	2300      	movs	r3, #0
 800cef6:	e015      	b.n	800cf24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d108      	bne.n	800cf10 <inc_lock+0xf8>
 800cefe:	4a0c      	ldr	r2, [pc, #48]	@ (800cf30 <inc_lock+0x118>)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	4413      	add	r3, r2
 800cf06:	330c      	adds	r3, #12
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	e001      	b.n	800cf14 <inc_lock+0xfc>
 800cf10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf14:	4906      	ldr	r1, [pc, #24]	@ (800cf30 <inc_lock+0x118>)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	440b      	add	r3, r1
 800cf1c:	330c      	adds	r3, #12
 800cf1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	20001130 	.word	0x20001130

0800cf34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	607b      	str	r3, [r7, #4]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d825      	bhi.n	800cf94 <dec_lock+0x60>
		n = Files[i].ctr;
 800cf48:	4a17      	ldr	r2, [pc, #92]	@ (800cfa8 <dec_lock+0x74>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	4413      	add	r3, r2
 800cf50:	330c      	adds	r3, #12
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cf56:	89fb      	ldrh	r3, [r7, #14]
 800cf58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf5c:	d101      	bne.n	800cf62 <dec_lock+0x2e>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cf62:	89fb      	ldrh	r3, [r7, #14]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <dec_lock+0x3a>
 800cf68:	89fb      	ldrh	r3, [r7, #14]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cf6e:	4a0e      	ldr	r2, [pc, #56]	@ (800cfa8 <dec_lock+0x74>)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	4413      	add	r3, r2
 800cf76:	330c      	adds	r3, #12
 800cf78:	89fa      	ldrh	r2, [r7, #14]
 800cf7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <dec_lock+0x5a>
 800cf82:	4a09      	ldr	r2, [pc, #36]	@ (800cfa8 <dec_lock+0x74>)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	4413      	add	r3, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	737b      	strb	r3, [r7, #13]
 800cf92:	e001      	b.n	800cf98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cf94:	2302      	movs	r3, #2
 800cf96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cf98:	7b7b      	ldrb	r3, [r7, #13]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20001130 	.word	0x20001130

0800cfac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	e010      	b.n	800cfdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cfba:	4a0d      	ldr	r2, [pc, #52]	@ (800cff0 <clear_lock+0x44>)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	4413      	add	r3, r2
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d105      	bne.n	800cfd6 <clear_lock+0x2a>
 800cfca:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <clear_lock+0x44>)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d9eb      	bls.n	800cfba <clear_lock+0xe>
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	20001130 	.word	0x20001130

0800cff4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	78db      	ldrb	r3, [r3, #3]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d034      	beq.n	800d072 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d00c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d018:	2301      	movs	r3, #1
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	f7ff fd0e 	bl	800ca3c <disk_write>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d026:	2301      	movs	r3, #1
 800d028:	73fb      	strb	r3, [r7, #15]
 800d02a:	e022      	b.n	800d072 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	1ad2      	subs	r2, r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d217      	bcs.n	800d072 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	789b      	ldrb	r3, [r3, #2]
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	e010      	b.n	800d06c <sync_window+0x78>
					wsect += fs->fsize;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7858      	ldrb	r0, [r3, #1]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d05e:	2301      	movs	r3, #1
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	f7ff fceb 	bl	800ca3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	3b01      	subs	r3, #1
 800d06a:	613b      	str	r3, [r7, #16]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d8eb      	bhi.n	800d04a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	429a      	cmp	r2, r3
 800d092:	d01b      	beq.n	800d0cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff ffad 	bl	800cff4 <sync_window>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d113      	bne.n	800d0cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7858      	ldrb	r0, [r3, #1]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	f7ff fca3 	bl	800c9fc <disk_read>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ff87 	bl	800cff4 <sync_window>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d158      	bne.n	800d1a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d148      	bne.n	800d18a <sync_fs+0xb2>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	791b      	ldrb	r3, [r3, #4]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d144      	bne.n	800d18a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3334      	adds	r3, #52	@ 0x34
 800d104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d108:	2100      	movs	r1, #0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7ff fd77 	bl	800cbfe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3334      	adds	r3, #52	@ 0x34
 800d114:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d118:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff fd06 	bl	800cb2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3334      	adds	r3, #52	@ 0x34
 800d126:	4921      	ldr	r1, [pc, #132]	@ (800d1ac <sync_fs+0xd4>)
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fd1b 	bl	800cb64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	3334      	adds	r3, #52	@ 0x34
 800d132:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d136:	491e      	ldr	r1, [pc, #120]	@ (800d1b0 <sync_fs+0xd8>)
 800d138:	4618      	mov	r0, r3
 800d13a:	f7ff fd13 	bl	800cb64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3334      	adds	r3, #52	@ 0x34
 800d142:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7ff fd09 	bl	800cb64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3334      	adds	r3, #52	@ 0x34
 800d156:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7ff fcff 	bl	800cb64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7858      	ldrb	r0, [r3, #1]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d17e:	2301      	movs	r3, #1
 800d180:	f7ff fc5c 	bl	800ca3c <disk_write>
			fs->fsi_flag = 0;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	785b      	ldrb	r3, [r3, #1]
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fc72 	bl	800ca7c <disk_ioctl>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <sync_fs+0xca>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	41615252 	.word	0x41615252
 800d1b0:	61417272 	.word	0x61417272

0800d1b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	3b02      	subs	r3, #2
 800d1c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	3b02      	subs	r3, #2
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d301      	bcc.n	800d1d4 <clust2sect+0x20>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e008      	b.n	800d1e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	895b      	ldrh	r3, [r3, #10]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	fb03 f202 	mul.w	r2, r3, r2
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e4:	4413      	add	r3, r2
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b086      	sub	sp, #24
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d904      	bls.n	800d212 <get_fat+0x20>
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d302      	bcc.n	800d218 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d212:	2301      	movs	r3, #1
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	e08e      	b.n	800d336 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d218:	f04f 33ff 	mov.w	r3, #4294967295
 800d21c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b03      	cmp	r3, #3
 800d224:	d061      	beq.n	800d2ea <get_fat+0xf8>
 800d226:	2b03      	cmp	r3, #3
 800d228:	dc7b      	bgt.n	800d322 <get_fat+0x130>
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d002      	beq.n	800d234 <get_fat+0x42>
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d041      	beq.n	800d2b6 <get_fat+0xc4>
 800d232:	e076      	b.n	800d322 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	085b      	lsrs	r3, r3, #1
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	0a5b      	lsrs	r3, r3, #9
 800d24a:	4413      	add	r3, r2
 800d24c:	4619      	mov	r1, r3
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f7ff ff14 	bl	800d07c <move_window>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d166      	bne.n	800d328 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	60fa      	str	r2, [r7, #12]
 800d260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	4413      	add	r3, r2
 800d268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d26c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	0a5b      	lsrs	r3, r3, #9
 800d276:	4413      	add	r3, r2
 800d278:	4619      	mov	r1, r3
 800d27a:	6938      	ldr	r0, [r7, #16]
 800d27c:	f7ff fefe 	bl	800d07c <move_window>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d152      	bne.n	800d32c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	4413      	add	r3, r2
 800d290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d294:	021b      	lsls	r3, r3, #8
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <get_fat+0xba>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	091b      	lsrs	r3, r3, #4
 800d2aa:	e002      	b.n	800d2b2 <get_fat+0xc0>
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2b2:	617b      	str	r3, [r7, #20]
			break;
 800d2b4:	e03f      	b.n	800d336 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	0a1b      	lsrs	r3, r3, #8
 800d2be:	4413      	add	r3, r2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6938      	ldr	r0, [r7, #16]
 800d2c4:	f7ff feda 	bl	800d07c <move_window>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d130      	bne.n	800d330 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d2dc:	4413      	add	r3, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fbea 	bl	800cab8 <ld_word>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	617b      	str	r3, [r7, #20]
			break;
 800d2e8:	e025      	b.n	800d336 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	09db      	lsrs	r3, r3, #7
 800d2f2:	4413      	add	r3, r2
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6938      	ldr	r0, [r7, #16]
 800d2f8:	f7ff fec0 	bl	800d07c <move_window>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d118      	bne.n	800d334 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d310:	4413      	add	r3, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff fbe8 	bl	800cae8 <ld_dword>
 800d318:	4603      	mov	r3, r0
 800d31a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d31e:	617b      	str	r3, [r7, #20]
			break;
 800d320:	e009      	b.n	800d336 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d322:	2301      	movs	r3, #1
 800d324:	617b      	str	r3, [r7, #20]
 800d326:	e006      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d328:	bf00      	nop
 800d32a:	e004      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d32c:	bf00      	nop
 800d32e:	e002      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d330:	bf00      	nop
 800d332:	e000      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d334:	bf00      	nop
		}
	}

	return val;
 800d336:	697b      	ldr	r3, [r7, #20]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d340:	b590      	push	{r4, r7, lr}
 800d342:	b089      	sub	sp, #36	@ 0x24
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d34c:	2302      	movs	r3, #2
 800d34e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2b01      	cmp	r3, #1
 800d354:	f240 80d9 	bls.w	800d50a <put_fat+0x1ca>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	429a      	cmp	r2, r3
 800d360:	f080 80d3 	bcs.w	800d50a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b03      	cmp	r3, #3
 800d36a:	f000 8096 	beq.w	800d49a <put_fat+0x15a>
 800d36e:	2b03      	cmp	r3, #3
 800d370:	f300 80cb 	bgt.w	800d50a <put_fat+0x1ca>
 800d374:	2b01      	cmp	r3, #1
 800d376:	d002      	beq.n	800d37e <put_fat+0x3e>
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d06e      	beq.n	800d45a <put_fat+0x11a>
 800d37c:	e0c5      	b.n	800d50a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	61bb      	str	r3, [r7, #24]
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	085b      	lsrs	r3, r3, #1
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	4413      	add	r3, r2
 800d38a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	0a5b      	lsrs	r3, r3, #9
 800d394:	4413      	add	r3, r2
 800d396:	4619      	mov	r1, r3
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7ff fe6f 	bl	800d07c <move_window>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3a2:	7ffb      	ldrb	r3, [r7, #31]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f040 80a9 	bne.w	800d4fc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	1c59      	adds	r1, r3, #1
 800d3b4:	61b9      	str	r1, [r7, #24]
 800d3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ba:	4413      	add	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00d      	beq.n	800d3e4 <put_fat+0xa4>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	b25b      	sxtb	r3, r3
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	b25a      	sxtb	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	011b      	lsls	r3, r3, #4
 800d3da:	b25b      	sxtb	r3, r3
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	b25b      	sxtb	r3, r3
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	e001      	b.n	800d3e8 <put_fat+0xa8>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	0a5b      	lsrs	r3, r3, #9
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff fe3c 	bl	800d07c <move_window>
 800d404:	4603      	mov	r3, r0
 800d406:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d408:	7ffb      	ldrb	r3, [r7, #31]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d178      	bne.n	800d500 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41a:	4413      	add	r3, r2
 800d41c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <put_fat+0xf0>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	091b      	lsrs	r3, r3, #4
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	e00e      	b.n	800d44e <put_fat+0x10e>
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f023 030f 	bic.w	r3, r3, #15
 800d43a:	b25a      	sxtb	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	0a1b      	lsrs	r3, r3, #8
 800d440:	b25b      	sxtb	r3, r3
 800d442:	f003 030f 	and.w	r3, r3, #15
 800d446:	b25b      	sxtb	r3, r3
 800d448:	4313      	orrs	r3, r2
 800d44a:	b25b      	sxtb	r3, r3
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2201      	movs	r2, #1
 800d456:	70da      	strb	r2, [r3, #3]
			break;
 800d458:	e057      	b.n	800d50a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	0a1b      	lsrs	r3, r3, #8
 800d462:	4413      	add	r3, r2
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff fe08 	bl	800d07c <move_window>
 800d46c:	4603      	mov	r3, r0
 800d46e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d470:	7ffb      	ldrb	r3, [r7, #31]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d146      	bne.n	800d504 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d484:	4413      	add	r3, r2
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	b292      	uxth	r2, r2
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fb4e 	bl	800cb2e <st_word>
			fs->wflag = 1;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2201      	movs	r2, #1
 800d496:	70da      	strb	r2, [r3, #3]
			break;
 800d498:	e037      	b.n	800d50a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	09db      	lsrs	r3, r3, #7
 800d4a2:	4413      	add	r3, r2
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fde8 	bl	800d07c <move_window>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4b0:	7ffb      	ldrb	r3, [r7, #31]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d128      	bne.n	800d508 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4ca:	4413      	add	r3, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fb0b 	bl	800cae8 <ld_dword>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d4d8:	4323      	orrs	r3, r4
 800d4da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4ea:	4413      	add	r3, r2
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fb38 	bl	800cb64 <st_dword>
			fs->wflag = 1;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	70da      	strb	r2, [r3, #3]
			break;
 800d4fa:	e006      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4fc:	bf00      	nop
 800d4fe:	e004      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d500:	bf00      	nop
 800d502:	e002      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d504:	bf00      	nop
 800d506:	e000      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d508:	bf00      	nop
		}
	}
	return res;
 800d50a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3724      	adds	r7, #36	@ 0x24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d904      	bls.n	800d53a <remove_chain+0x26>
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	429a      	cmp	r2, r3
 800d538:	d301      	bcc.n	800d53e <remove_chain+0x2a>
 800d53a:	2302      	movs	r3, #2
 800d53c:	e04b      	b.n	800d5d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00c      	beq.n	800d55e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d544:	f04f 32ff 	mov.w	r2, #4294967295
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	69b8      	ldr	r0, [r7, #24]
 800d54c:	f7ff fef8 	bl	800d340 <put_fat>
 800d550:	4603      	mov	r3, r0
 800d552:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <remove_chain+0x4a>
 800d55a:	7ffb      	ldrb	r3, [r7, #31]
 800d55c:	e03b      	b.n	800d5d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d55e:	68b9      	ldr	r1, [r7, #8]
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f7ff fe46 	bl	800d1f2 <get_fat>
 800d566:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d031      	beq.n	800d5d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d101      	bne.n	800d578 <remove_chain+0x64>
 800d574:	2302      	movs	r3, #2
 800d576:	e02e      	b.n	800d5d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57e:	d101      	bne.n	800d584 <remove_chain+0x70>
 800d580:	2301      	movs	r3, #1
 800d582:	e028      	b.n	800d5d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d584:	2200      	movs	r2, #0
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	69b8      	ldr	r0, [r7, #24]
 800d58a:	f7ff fed9 	bl	800d340 <put_fat>
 800d58e:	4603      	mov	r3, r0
 800d590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d592:	7ffb      	ldrb	r3, [r7, #31]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <remove_chain+0x88>
 800d598:	7ffb      	ldrb	r3, [r7, #31]
 800d59a:	e01c      	b.n	800d5d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	695a      	ldr	r2, [r3, #20]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	3b02      	subs	r3, #2
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d20b      	bcs.n	800d5c2 <remove_chain+0xae>
			fs->free_clst++;
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	791b      	ldrb	r3, [r3, #4]
 800d5b8:	f043 0301 	orr.w	r3, r3, #1
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d3c6      	bcc.n	800d55e <remove_chain+0x4a>
 800d5d0:	e000      	b.n	800d5d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b088      	sub	sp, #32
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10d      	bne.n	800d610 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <create_chain+0x2c>
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	429a      	cmp	r2, r3
 800d608:	d31b      	bcc.n	800d642 <create_chain+0x64>
 800d60a:	2301      	movs	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	e018      	b.n	800d642 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff fded 	bl	800d1f2 <get_fat>
 800d618:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d801      	bhi.n	800d624 <create_chain+0x46>
 800d620:	2301      	movs	r3, #1
 800d622:	e070      	b.n	800d706 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62a:	d101      	bne.n	800d630 <create_chain+0x52>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	e06a      	b.n	800d706 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	429a      	cmp	r2, r3
 800d638:	d201      	bcs.n	800d63e <create_chain+0x60>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	e063      	b.n	800d706 <create_chain+0x128>
		scl = clst;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	3301      	adds	r3, #1
 800d64a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	429a      	cmp	r2, r3
 800d654:	d307      	bcc.n	800d666 <create_chain+0x88>
				ncl = 2;
 800d656:	2302      	movs	r3, #2
 800d658:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d901      	bls.n	800d666 <create_chain+0x88>
 800d662:	2300      	movs	r3, #0
 800d664:	e04f      	b.n	800d706 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d666:	69f9      	ldr	r1, [r7, #28]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fdc2 	bl	800d1f2 <get_fat>
 800d66e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00e      	beq.n	800d694 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d003      	beq.n	800d684 <create_chain+0xa6>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d682:	d101      	bne.n	800d688 <create_chain+0xaa>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	e03e      	b.n	800d706 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d688:	69fa      	ldr	r2, [r7, #28]
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d1da      	bne.n	800d646 <create_chain+0x68>
 800d690:	2300      	movs	r3, #0
 800d692:	e038      	b.n	800d706 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d694:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d696:	f04f 32ff 	mov.w	r2, #4294967295
 800d69a:	69f9      	ldr	r1, [r7, #28]
 800d69c:	6938      	ldr	r0, [r7, #16]
 800d69e:	f7ff fe4f 	bl	800d340 <put_fat>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d109      	bne.n	800d6c0 <create_chain+0xe2>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d006      	beq.n	800d6c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6938      	ldr	r0, [r7, #16]
 800d6b8:	f7ff fe42 	bl	800d340 <put_fat>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d116      	bne.n	800d6f4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	69fa      	ldr	r2, [r7, #28]
 800d6ca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	695a      	ldr	r2, [r3, #20]
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	3b02      	subs	r3, #2
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d804      	bhi.n	800d6e4 <create_chain+0x106>
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	1e5a      	subs	r2, r3, #1
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	791b      	ldrb	r3, [r3, #4]
 800d6e8:	f043 0301 	orr.w	r3, r3, #1
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	711a      	strb	r2, [r3, #4]
 800d6f2:	e007      	b.n	800d704 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d102      	bne.n	800d700 <create_chain+0x122>
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fe:	e000      	b.n	800d702 <create_chain+0x124>
 800d700:	2301      	movs	r3, #1
 800d702:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d704:	69fb      	ldr	r3, [r7, #28]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d70e:	b480      	push	{r7}
 800d710:	b087      	sub	sp, #28
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d722:	3304      	adds	r3, #4
 800d724:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	0a5b      	lsrs	r3, r3, #9
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	8952      	ldrh	r2, [r2, #10]
 800d72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d732:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	613a      	str	r2, [r7, #16]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <clmt_clust+0x3a>
 800d744:	2300      	movs	r3, #0
 800d746:	e010      	b.n	800d76a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d748:	697a      	ldr	r2, [r7, #20]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d307      	bcc.n	800d760 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	3304      	adds	r3, #4
 800d75c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d75e:	e7e9      	b.n	800d734 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d760:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	4413      	add	r3, r2
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	371c      	adds	r7, #28
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b086      	sub	sp, #24
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d78c:	d204      	bcs.n	800d798 <dir_sdi+0x22>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f003 031f 	and.w	r3, r3, #31
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d798:	2302      	movs	r3, #2
 800d79a:	e063      	b.n	800d864 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <dir_sdi+0x46>
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d902      	bls.n	800d7bc <dir_sdi+0x46>
		clst = fs->dirbase;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	095b      	lsrs	r3, r3, #5
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	8912      	ldrh	r2, [r2, #8]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d301      	bcc.n	800d7d2 <dir_sdi+0x5c>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	e048      	b.n	800d864 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	61da      	str	r2, [r3, #28]
 800d7da:	e029      	b.n	800d830 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	025b      	lsls	r3, r3, #9
 800d7e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d7e4:	e019      	b.n	800d81a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6979      	ldr	r1, [r7, #20]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fd01 	bl	800d1f2 <get_fat>
 800d7f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d101      	bne.n	800d7fe <dir_sdi+0x88>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e032      	b.n	800d864 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d904      	bls.n	800d80e <dir_sdi+0x98>
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d301      	bcc.n	800d812 <dir_sdi+0x9c>
 800d80e:	2302      	movs	r3, #2
 800d810:	e028      	b.n	800d864 <dir_sdi+0xee>
			ofs -= csz;
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d2e1      	bcs.n	800d7e6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d822:	6979      	ldr	r1, [r7, #20]
 800d824:	6938      	ldr	r0, [r7, #16]
 800d826:	f7ff fcc5 	bl	800d1b4 <clust2sect>
 800d82a:	4602      	mov	r2, r0
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <dir_sdi+0xcc>
 800d83e:	2302      	movs	r3, #2
 800d840:	e010      	b.n	800d864 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69da      	ldr	r2, [r3, #28]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	0a5b      	lsrs	r3, r3, #9
 800d84a:	441a      	add	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85c:	441a      	add	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	695b      	ldr	r3, [r3, #20]
 800d880:	3320      	adds	r3, #32
 800d882:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <dir_next+0x28>
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d892:	d301      	bcc.n	800d898 <dir_next+0x2c>
 800d894:	2304      	movs	r3, #4
 800d896:	e0aa      	b.n	800d9ee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f040 8098 	bne.w	800d9d4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	095b      	lsrs	r3, r3, #5
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	8912      	ldrh	r2, [r2, #8]
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	f0c0 8088 	bcc.w	800d9d4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	61da      	str	r2, [r3, #28]
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	e08f      	b.n	800d9ee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	0a5b      	lsrs	r3, r3, #9
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	8952      	ldrh	r2, [r2, #10]
 800d8d6:	3a01      	subs	r2, #1
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d17a      	bne.n	800d9d4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f7ff fc83 	bl	800d1f2 <get_fat>
 800d8ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d801      	bhi.n	800d8f8 <dir_next+0x8c>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e07a      	b.n	800d9ee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	d101      	bne.n	800d904 <dir_next+0x98>
 800d900:	2301      	movs	r3, #1
 800d902:	e074      	b.n	800d9ee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d358      	bcc.n	800d9c0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	61da      	str	r2, [r3, #28]
 800d91a:	2304      	movs	r3, #4
 800d91c:	e067      	b.n	800d9ee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7ff fe59 	bl	800d5de <create_chain>
 800d92c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <dir_next+0xcc>
 800d934:	2307      	movs	r3, #7
 800d936:	e05a      	b.n	800d9ee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d101      	bne.n	800d942 <dir_next+0xd6>
 800d93e:	2302      	movs	r3, #2
 800d940:	e055      	b.n	800d9ee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d948:	d101      	bne.n	800d94e <dir_next+0xe2>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e04f      	b.n	800d9ee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7ff fb50 	bl	800cff4 <sync_window>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <dir_next+0xf2>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e047      	b.n	800d9ee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3334      	adds	r3, #52	@ 0x34
 800d962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff f948 	bl	800cbfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d96e:	2300      	movs	r3, #0
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	6979      	ldr	r1, [r7, #20]
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f7ff fc1d 	bl	800d1b4 <clust2sect>
 800d97a:	4602      	mov	r2, r0
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d980:	e012      	b.n	800d9a8 <dir_next+0x13c>
						fs->wflag = 1;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2201      	movs	r2, #1
 800d986:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f7ff fb33 	bl	800cff4 <sync_window>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <dir_next+0x12c>
 800d994:	2301      	movs	r3, #1
 800d996:	e02a      	b.n	800d9ee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	3301      	adds	r3, #1
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	895b      	ldrh	r3, [r3, #10]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d3e6      	bcc.n	800d982 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	1ad2      	subs	r2, r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d9c6:	6979      	ldr	r1, [r7, #20]
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7ff fbf3 	bl	800d1b4 <clust2sect>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e6:	441a      	add	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800da06:	2100      	movs	r1, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff feb4 	bl	800d776 <dir_sdi>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d12b      	bne.n	800da70 <dir_alloc+0x7a>
		n = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	69db      	ldr	r3, [r3, #28]
 800da20:	4619      	mov	r1, r3
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fb2a 	bl	800d07c <move_window>
 800da28:	4603      	mov	r3, r0
 800da2a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da2c:	7dfb      	ldrb	r3, [r7, #23]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d11d      	bne.n	800da6e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2be5      	cmp	r3, #229	@ 0xe5
 800da3a:	d004      	beq.n	800da46 <dir_alloc+0x50>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d107      	bne.n	800da56 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	3301      	adds	r3, #1
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	429a      	cmp	r2, r3
 800da52:	d102      	bne.n	800da5a <dir_alloc+0x64>
 800da54:	e00c      	b.n	800da70 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800da5a:	2101      	movs	r1, #1
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff ff05 	bl	800d86c <dir_next>
 800da62:	4603      	mov	r3, r0
 800da64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800da66:	7dfb      	ldrb	r3, [r7, #23]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0d7      	beq.n	800da1c <dir_alloc+0x26>
 800da6c:	e000      	b.n	800da70 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800da6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2b04      	cmp	r3, #4
 800da74:	d101      	bne.n	800da7a <dir_alloc+0x84>
 800da76:	2307      	movs	r3, #7
 800da78:	75fb      	strb	r3, [r7, #23]
	return res;
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	331a      	adds	r3, #26
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff f810 	bl	800cab8 <ld_word>
 800da98:	4603      	mov	r3, r0
 800da9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d109      	bne.n	800dab8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	3314      	adds	r3, #20
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff f805 	bl	800cab8 <ld_word>
 800daae:	4603      	mov	r3, r0
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dab8:	68fb      	ldr	r3, [r7, #12]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	331a      	adds	r3, #26
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	b292      	uxth	r2, r2
 800dad6:	4611      	mov	r1, r2
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff f828 	bl	800cb2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d109      	bne.n	800dafa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f103 0214 	add.w	r2, r3, #20
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	4619      	mov	r1, r3
 800daf4:	4610      	mov	r0, r2
 800daf6:	f7ff f81a 	bl	800cb2e <st_word>
	}
}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b086      	sub	sp, #24
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db10:	2100      	movs	r1, #0
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fe2f 	bl	800d776 <dir_sdi>
 800db18:	4603      	mov	r3, r0
 800db1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db1c:	7dfb      	ldrb	r3, [r7, #23]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <dir_find+0x24>
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	e03e      	b.n	800dba4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	4619      	mov	r1, r3
 800db2c:	6938      	ldr	r0, [r7, #16]
 800db2e:	f7ff faa5 	bl	800d07c <move_window>
 800db32:	4603      	mov	r3, r0
 800db34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d12f      	bne.n	800db9c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d102      	bne.n	800db50 <dir_find+0x4e>
 800db4a:	2304      	movs	r3, #4
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e028      	b.n	800dba2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a1b      	ldr	r3, [r3, #32]
 800db54:	330b      	adds	r3, #11
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	330b      	adds	r3, #11
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <dir_find+0x86>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a18      	ldr	r0, [r3, #32]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	3324      	adds	r3, #36	@ 0x24
 800db7a:	220b      	movs	r2, #11
 800db7c:	4619      	mov	r1, r3
 800db7e:	f7ff f859 	bl	800cc34 <mem_cmp>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00b      	beq.n	800dba0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db88:	2100      	movs	r1, #0
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff fe6e 	bl	800d86c <dir_next>
 800db90:	4603      	mov	r3, r0
 800db92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0c5      	beq.n	800db26 <dir_find+0x24>
 800db9a:	e002      	b.n	800dba2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800db9c:	bf00      	nop
 800db9e:	e000      	b.n	800dba2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dba0:	bf00      	nop

	return res;
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dbba:	2101      	movs	r1, #1
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ff1a 	bl	800d9f6 <dir_alloc>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d11c      	bne.n	800dc06 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	68b8      	ldr	r0, [r7, #8]
 800dbd4:	f7ff fa52 	bl	800d07c <move_window>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d111      	bne.n	800dc06 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	2100      	movs	r1, #0
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff f807 	bl	800cbfe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a18      	ldr	r0, [r3, #32]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3324      	adds	r3, #36	@ 0x24
 800dbf8:	220b      	movs	r2, #11
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	f7fe ffde 	bl	800cbbc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	2201      	movs	r2, #1
 800dc04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	3324      	adds	r3, #36	@ 0x24
 800dc24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dc26:	220b      	movs	r2, #11
 800dc28:	2120      	movs	r1, #32
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f7fe ffe7 	bl	800cbfe <mem_set>
	si = i = 0; ni = 8;
 800dc30:	2300      	movs	r3, #0
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	2308      	movs	r3, #8
 800dc3a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	61fa      	str	r2, [r7, #28]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dc4a:	7efb      	ldrb	r3, [r7, #27]
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	d94e      	bls.n	800dcee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dc50:	7efb      	ldrb	r3, [r7, #27]
 800dc52:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc54:	d006      	beq.n	800dc64 <create_name+0x54>
 800dc56:	7efb      	ldrb	r3, [r7, #27]
 800dc58:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc5a:	d110      	bne.n	800dc7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc5c:	e002      	b.n	800dc64 <create_name+0x54>
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	3301      	adds	r3, #1
 800dc62:	61fb      	str	r3, [r7, #28]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc6e:	d0f6      	beq.n	800dc5e <create_name+0x4e>
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	4413      	add	r3, r2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc7a:	d0f0      	beq.n	800dc5e <create_name+0x4e>
			break;
 800dc7c:	e038      	b.n	800dcf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dc7e:	7efb      	ldrb	r3, [r7, #27]
 800dc80:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc82:	d003      	beq.n	800dc8c <create_name+0x7c>
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d30c      	bcc.n	800dca6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2b0b      	cmp	r3, #11
 800dc90:	d002      	beq.n	800dc98 <create_name+0x88>
 800dc92:	7efb      	ldrb	r3, [r7, #27]
 800dc94:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc96:	d001      	beq.n	800dc9c <create_name+0x8c>
 800dc98:	2306      	movs	r3, #6
 800dc9a:	e044      	b.n	800dd26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dc9c:	2308      	movs	r3, #8
 800dc9e:	613b      	str	r3, [r7, #16]
 800dca0:	230b      	movs	r3, #11
 800dca2:	617b      	str	r3, [r7, #20]
			continue;
 800dca4:	e022      	b.n	800dcec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dca6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	da04      	bge.n	800dcb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dcae:	7efb      	ldrb	r3, [r7, #27]
 800dcb0:	3b80      	subs	r3, #128	@ 0x80
 800dcb2:	4a1f      	ldr	r2, [pc, #124]	@ (800dd30 <create_name+0x120>)
 800dcb4:	5cd3      	ldrb	r3, [r2, r3]
 800dcb6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dcb8:	7efb      	ldrb	r3, [r7, #27]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	481d      	ldr	r0, [pc, #116]	@ (800dd34 <create_name+0x124>)
 800dcbe:	f7fe ffe0 	bl	800cc82 <chk_chr>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <create_name+0xbc>
 800dcc8:	2306      	movs	r3, #6
 800dcca:	e02c      	b.n	800dd26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dccc:	7efb      	ldrb	r3, [r7, #27]
 800dcce:	2b60      	cmp	r3, #96	@ 0x60
 800dcd0:	d905      	bls.n	800dcde <create_name+0xce>
 800dcd2:	7efb      	ldrb	r3, [r7, #27]
 800dcd4:	2b7a      	cmp	r3, #122	@ 0x7a
 800dcd6:	d802      	bhi.n	800dcde <create_name+0xce>
 800dcd8:	7efb      	ldrb	r3, [r7, #27]
 800dcda:	3b20      	subs	r3, #32
 800dcdc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	1c5a      	adds	r2, r3, #1
 800dce2:	613a      	str	r2, [r7, #16]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	4413      	add	r3, r2
 800dce8:	7efa      	ldrb	r2, [r7, #27]
 800dcea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dcec:	e7a6      	b.n	800dc3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dcee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <create_name+0xf4>
 800dd00:	2306      	movs	r3, #6
 800dd02:	e010      	b.n	800dd26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2be5      	cmp	r3, #229	@ 0xe5
 800dd0a:	d102      	bne.n	800dd12 <create_name+0x102>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2205      	movs	r2, #5
 800dd10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd12:	7efb      	ldrb	r3, [r7, #27]
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d801      	bhi.n	800dd1c <create_name+0x10c>
 800dd18:	2204      	movs	r2, #4
 800dd1a:	e000      	b.n	800dd1e <create_name+0x10e>
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	330b      	adds	r3, #11
 800dd22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dd24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3720      	adds	r7, #32
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08014cc8 	.word	0x08014cc8
 800dd34:	08014ab0 	.word	0x08014ab0

0800dd38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd4c:	e002      	b.n	800dd54 <follow_path+0x1c>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	3301      	adds	r3, #1
 800dd52:	603b      	str	r3, [r7, #0]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd5a:	d0f8      	beq.n	800dd4e <follow_path+0x16>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd62:	d0f4      	beq.n	800dd4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	2200      	movs	r2, #0
 800dd68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b1f      	cmp	r3, #31
 800dd70:	d80a      	bhi.n	800dd88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2280      	movs	r2, #128	@ 0x80
 800dd76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7ff fcfa 	bl	800d776 <dir_sdi>
 800dd82:	4603      	mov	r3, r0
 800dd84:	75fb      	strb	r3, [r7, #23]
 800dd86:	e043      	b.n	800de10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd88:	463b      	mov	r3, r7
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ff3f 	bl	800dc10 <create_name>
 800dd92:	4603      	mov	r3, r0
 800dd94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d134      	bne.n	800de06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff feb0 	bl	800db02 <dir_find>
 800dda2:	4603      	mov	r3, r0
 800dda4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ddac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00a      	beq.n	800ddca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
 800ddb6:	2b04      	cmp	r3, #4
 800ddb8:	d127      	bne.n	800de0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddba:	7afb      	ldrb	r3, [r7, #11]
 800ddbc:	f003 0304 	and.w	r3, r3, #4
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d122      	bne.n	800de0a <follow_path+0xd2>
 800ddc4:	2305      	movs	r3, #5
 800ddc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ddc8:	e01f      	b.n	800de0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddca:	7afb      	ldrb	r3, [r7, #11]
 800ddcc:	f003 0304 	and.w	r3, r3, #4
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d11c      	bne.n	800de0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	799b      	ldrb	r3, [r3, #6]
 800ddd8:	f003 0310 	and.w	r3, r3, #16
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d102      	bne.n	800dde6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dde0:	2305      	movs	r3, #5
 800dde2:	75fb      	strb	r3, [r7, #23]
 800dde4:	e014      	b.n	800de10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf4:	4413      	add	r3, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fe43 	bl	800da84 <ld_clust>
 800ddfe:	4602      	mov	r2, r0
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de04:	e7c0      	b.n	800dd88 <follow_path+0x50>
			if (res != FR_OK) break;
 800de06:	bf00      	nop
 800de08:	e002      	b.n	800de10 <follow_path+0xd8>
				break;
 800de0a:	bf00      	nop
 800de0c:	e000      	b.n	800de10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de0e:	bf00      	nop
			}
		}
	}

	return res;
 800de10:	7dfb      	ldrb	r3, [r7, #23]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de1a:	b480      	push	{r7}
 800de1c:	b087      	sub	sp, #28
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de22:	f04f 33ff 	mov.w	r3, #4294967295
 800de26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d031      	beq.n	800de94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	617b      	str	r3, [r7, #20]
 800de36:	e002      	b.n	800de3e <get_ldnumber+0x24>
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	3301      	adds	r3, #1
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b20      	cmp	r3, #32
 800de44:	d903      	bls.n	800de4e <get_ldnumber+0x34>
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b3a      	cmp	r3, #58	@ 0x3a
 800de4c:	d1f4      	bne.n	800de38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b3a      	cmp	r3, #58	@ 0x3a
 800de54:	d11c      	bne.n	800de90 <get_ldnumber+0x76>
			tp = *path;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	60fa      	str	r2, [r7, #12]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	3b30      	subs	r3, #48	@ 0x30
 800de66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b09      	cmp	r3, #9
 800de6c:	d80e      	bhi.n	800de8c <get_ldnumber+0x72>
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	429a      	cmp	r2, r3
 800de74:	d10a      	bne.n	800de8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d107      	bne.n	800de8c <get_ldnumber+0x72>
					vol = (int)i;
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	3301      	adds	r3, #1
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	e002      	b.n	800de96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de90:	2300      	movs	r3, #0
 800de92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de94:	693b      	ldr	r3, [r7, #16]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
	...

0800dea4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	70da      	strb	r2, [r3, #3]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f04f 32ff 	mov.w	r2, #4294967295
 800deba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800debc:	6839      	ldr	r1, [r7, #0]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff f8dc 	bl	800d07c <move_window>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <check_fs+0x2a>
 800deca:	2304      	movs	r3, #4
 800decc:	e038      	b.n	800df40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3334      	adds	r3, #52	@ 0x34
 800ded2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fdee 	bl	800cab8 <ld_word>
 800dedc:	4603      	mov	r3, r0
 800dede:	461a      	mov	r2, r3
 800dee0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d001      	beq.n	800deec <check_fs+0x48>
 800dee8:	2303      	movs	r3, #3
 800deea:	e029      	b.n	800df40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800def2:	2be9      	cmp	r3, #233	@ 0xe9
 800def4:	d009      	beq.n	800df0a <check_fs+0x66>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800defc:	2beb      	cmp	r3, #235	@ 0xeb
 800defe:	d11e      	bne.n	800df3e <check_fs+0x9a>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df06:	2b90      	cmp	r3, #144	@ 0x90
 800df08:	d119      	bne.n	800df3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3334      	adds	r3, #52	@ 0x34
 800df0e:	3336      	adds	r3, #54	@ 0x36
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fde9 	bl	800cae8 <ld_dword>
 800df16:	4603      	mov	r3, r0
 800df18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df1c:	4a0a      	ldr	r2, [pc, #40]	@ (800df48 <check_fs+0xa4>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d101      	bne.n	800df26 <check_fs+0x82>
 800df22:	2300      	movs	r3, #0
 800df24:	e00c      	b.n	800df40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3334      	adds	r3, #52	@ 0x34
 800df2a:	3352      	adds	r3, #82	@ 0x52
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe fddb 	bl	800cae8 <ld_dword>
 800df32:	4603      	mov	r3, r0
 800df34:	4a05      	ldr	r2, [pc, #20]	@ (800df4c <check_fs+0xa8>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d101      	bne.n	800df3e <check_fs+0x9a>
 800df3a:	2300      	movs	r3, #0
 800df3c:	e000      	b.n	800df40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df3e:	2302      	movs	r3, #2
}
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	00544146 	.word	0x00544146
 800df4c:	33544146 	.word	0x33544146

0800df50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b096      	sub	sp, #88	@ 0x58
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	4613      	mov	r3, r2
 800df5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7ff ff58 	bl	800de1a <get_ldnumber>
 800df6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da01      	bge.n	800df76 <find_volume+0x26>
 800df72:	230b      	movs	r3, #11
 800df74:	e235      	b.n	800e3e2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df76:	4aa5      	ldr	r2, [pc, #660]	@ (800e20c <find_volume+0x2bc>)
 800df78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df7e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <find_volume+0x3a>
 800df86:	230c      	movs	r3, #12
 800df88:	e22b      	b.n	800e3e2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800df8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df8c:	f7fe fe94 	bl	800ccb8 <lock_fs>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <find_volume+0x4a>
 800df96:	230f      	movs	r3, #15
 800df98:	e223      	b.n	800e3e2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	f023 0301 	bic.w	r3, r3, #1
 800dfa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01a      	beq.n	800dfe6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb2:	785b      	ldrb	r3, [r3, #1]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe fcdf 	bl	800c978 <disk_status>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfc4:	f003 0301 	and.w	r3, r3, #1
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10c      	bne.n	800dfe6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <find_volume+0x92>
 800dfd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfd6:	f003 0304 	and.w	r3, r3, #4
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dfde:	230a      	movs	r3, #10
 800dfe0:	e1ff      	b.n	800e3e2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e1fd      	b.n	800e3e2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe8:	2200      	movs	r2, #0
 800dfea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dfec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff6:	785b      	ldrb	r3, [r3, #1]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fcd7 	bl	800c9ac <disk_initialize>
 800dffe:	4603      	mov	r3, r0
 800e000:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e004:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e010:	2303      	movs	r3, #3
 800e012:	e1e6      	b.n	800e3e2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <find_volume+0xda>
 800e01a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e01e:	f003 0304 	and.w	r3, r3, #4
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e026:	230a      	movs	r3, #10
 800e028:	e1db      	b.n	800e3e2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e02e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e030:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e032:	f7ff ff37 	bl	800dea4 <check_fs>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e03c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e040:	2b02      	cmp	r3, #2
 800e042:	d149      	bne.n	800e0d8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e044:	2300      	movs	r3, #0
 800e046:	643b      	str	r3, [r7, #64]	@ 0x40
 800e048:	e01e      	b.n	800e088 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e052:	011b      	lsls	r3, r3, #4
 800e054:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e058:	4413      	add	r3, r2
 800e05a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	3304      	adds	r3, #4
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <find_volume+0x124>
 800e066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e068:	3308      	adds	r3, #8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fd3c 	bl	800cae8 <ld_dword>
 800e070:	4602      	mov	r2, r0
 800e072:	e000      	b.n	800e076 <find_volume+0x126>
 800e074:	2200      	movs	r2, #0
 800e076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	3358      	adds	r3, #88	@ 0x58
 800e07c:	443b      	add	r3, r7
 800e07e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e084:	3301      	adds	r3, #1
 800e086:	643b      	str	r3, [r7, #64]	@ 0x40
 800e088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d9dd      	bls.n	800e04a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e08e:	2300      	movs	r3, #0
 800e090:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <find_volume+0x14e>
 800e098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e09a:	3b01      	subs	r3, #1
 800e09c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e09e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	3358      	adds	r3, #88	@ 0x58
 800e0a4:	443b      	add	r3, r7
 800e0a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0aa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d005      	beq.n	800e0be <find_volume+0x16e>
 800e0b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e0b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0b6:	f7ff fef5 	bl	800dea4 <check_fs>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	e000      	b.n	800e0c0 <find_volume+0x170>
 800e0be:	2303      	movs	r3, #3
 800e0c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d905      	bls.n	800e0d8 <find_volume+0x188>
 800e0cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0d4:	2b03      	cmp	r3, #3
 800e0d6:	d9e2      	bls.n	800e09e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0dc:	2b04      	cmp	r3, #4
 800e0de:	d101      	bne.n	800e0e4 <find_volume+0x194>
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e17e      	b.n	800e3e2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d901      	bls.n	800e0f0 <find_volume+0x1a0>
 800e0ec:	230d      	movs	r3, #13
 800e0ee:	e178      	b.n	800e3e2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f2:	3334      	adds	r3, #52	@ 0x34
 800e0f4:	330b      	adds	r3, #11
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe fcde 	bl	800cab8 <ld_word>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e102:	d001      	beq.n	800e108 <find_volume+0x1b8>
 800e104:	230d      	movs	r3, #13
 800e106:	e16c      	b.n	800e3e2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10a:	3334      	adds	r3, #52	@ 0x34
 800e10c:	3316      	adds	r3, #22
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe fcd2 	bl	800cab8 <ld_word>
 800e114:	4603      	mov	r3, r0
 800e116:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <find_volume+0x1dc>
 800e11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e120:	3334      	adds	r3, #52	@ 0x34
 800e122:	3324      	adds	r3, #36	@ 0x24
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fcdf 	bl	800cae8 <ld_dword>
 800e12a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e130:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e134:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	789b      	ldrb	r3, [r3, #2]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d005      	beq.n	800e150 <find_volume+0x200>
 800e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e146:	789b      	ldrb	r3, [r3, #2]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d001      	beq.n	800e150 <find_volume+0x200>
 800e14c:	230d      	movs	r3, #13
 800e14e:	e148      	b.n	800e3e2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e152:	789b      	ldrb	r3, [r3, #2]
 800e154:	461a      	mov	r2, r3
 800e156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e158:	fb02 f303 	mul.w	r3, r2, r3
 800e15c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e164:	461a      	mov	r2, r3
 800e166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e168:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16c:	895b      	ldrh	r3, [r3, #10]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d008      	beq.n	800e184 <find_volume+0x234>
 800e172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e174:	895b      	ldrh	r3, [r3, #10]
 800e176:	461a      	mov	r2, r3
 800e178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17a:	895b      	ldrh	r3, [r3, #10]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	4013      	ands	r3, r2
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <find_volume+0x238>
 800e184:	230d      	movs	r3, #13
 800e186:	e12c      	b.n	800e3e2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	3334      	adds	r3, #52	@ 0x34
 800e18c:	3311      	adds	r3, #17
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe fc92 	bl	800cab8 <ld_word>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19e:	891b      	ldrh	r3, [r3, #8]
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <find_volume+0x25e>
 800e1aa:	230d      	movs	r3, #13
 800e1ac:	e119      	b.n	800e3e2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b0:	3334      	adds	r3, #52	@ 0x34
 800e1b2:	3313      	adds	r3, #19
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe fc7f 	bl	800cab8 <ld_word>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d106      	bne.n	800e1d2 <find_volume+0x282>
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c6:	3334      	adds	r3, #52	@ 0x34
 800e1c8:	3320      	adds	r3, #32
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fe fc8c 	bl	800cae8 <ld_dword>
 800e1d0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d4:	3334      	adds	r3, #52	@ 0x34
 800e1d6:	330e      	adds	r3, #14
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fc6d 	bl	800cab8 <ld_word>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <find_volume+0x29c>
 800e1e8:	230d      	movs	r3, #13
 800e1ea:	e0fa      	b.n	800e3e2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e1ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1f0:	4413      	add	r3, r2
 800e1f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1f4:	8912      	ldrh	r2, [r2, #8]
 800e1f6:	0912      	lsrs	r2, r2, #4
 800e1f8:	b292      	uxth	r2, r2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	429a      	cmp	r2, r3
 800e204:	d204      	bcs.n	800e210 <find_volume+0x2c0>
 800e206:	230d      	movs	r3, #13
 800e208:	e0eb      	b.n	800e3e2 <find_volume+0x492>
 800e20a:	bf00      	nop
 800e20c:	20001128 	.word	0x20001128
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e218:	8952      	ldrh	r2, [r2, #10]
 800e21a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e21e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <find_volume+0x2da>
 800e226:	230d      	movs	r3, #13
 800e228:	e0db      	b.n	800e3e2 <find_volume+0x492>
		fmt = FS_FAT32;
 800e22a:	2303      	movs	r3, #3
 800e22c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e236:	4293      	cmp	r3, r2
 800e238:	d802      	bhi.n	800e240 <find_volume+0x2f0>
 800e23a:	2302      	movs	r3, #2
 800e23c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e242:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e246:	4293      	cmp	r3, r2
 800e248:	d802      	bhi.n	800e250 <find_volume+0x300>
 800e24a:	2301      	movs	r3, #1
 800e24c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	1c9a      	adds	r2, r3, #2
 800e254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e256:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e25c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e25e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e262:	441a      	add	r2, r3
 800e264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e266:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e268:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26c:	441a      	add	r2, r3
 800e26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e270:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e272:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e276:	2b03      	cmp	r3, #3
 800e278:	d11e      	bne.n	800e2b8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27c:	3334      	adds	r3, #52	@ 0x34
 800e27e:	332a      	adds	r3, #42	@ 0x2a
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe fc19 	bl	800cab8 <ld_word>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d001      	beq.n	800e290 <find_volume+0x340>
 800e28c:	230d      	movs	r3, #13
 800e28e:	e0a8      	b.n	800e3e2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e292:	891b      	ldrh	r3, [r3, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d001      	beq.n	800e29c <find_volume+0x34c>
 800e298:	230d      	movs	r3, #13
 800e29a:	e0a2      	b.n	800e3e2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	3334      	adds	r3, #52	@ 0x34
 800e2a0:	332c      	adds	r3, #44	@ 0x2c
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fc20 	bl	800cae8 <ld_dword>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ac:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2b6:	e01f      	b.n	800e2f8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ba:	891b      	ldrh	r3, [r3, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d101      	bne.n	800e2c4 <find_volume+0x374>
 800e2c0:	230d      	movs	r3, #13
 800e2c2:	e08e      	b.n	800e3e2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ca:	441a      	add	r2, r3
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ce:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d103      	bne.n	800e2e0 <find_volume+0x390>
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	e00a      	b.n	800e2f6 <find_volume+0x3a6>
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e2:	699a      	ldr	r2, [r3, #24]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	4413      	add	r3, r2
 800e2ea:	085a      	lsrs	r2, r3, #1
 800e2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	f003 0301 	and.w	r3, r3, #1
 800e2f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2f6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	69da      	ldr	r2, [r3, #28]
 800e2fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2fe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e302:	0a5b      	lsrs	r3, r3, #9
 800e304:	429a      	cmp	r2, r3
 800e306:	d201      	bcs.n	800e30c <find_volume+0x3bc>
 800e308:	230d      	movs	r3, #13
 800e30a:	e06a      	b.n	800e3e2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	f04f 32ff 	mov.w	r2, #4294967295
 800e312:	615a      	str	r2, [r3, #20]
 800e314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e316:	695a      	ldr	r2, [r3, #20]
 800e318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31e:	2280      	movs	r2, #128	@ 0x80
 800e320:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e322:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e326:	2b03      	cmp	r3, #3
 800e328:	d149      	bne.n	800e3be <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32c:	3334      	adds	r3, #52	@ 0x34
 800e32e:	3330      	adds	r3, #48	@ 0x30
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fbc1 	bl	800cab8 <ld_word>
 800e336:	4603      	mov	r3, r0
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d140      	bne.n	800e3be <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e33c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e33e:	3301      	adds	r3, #1
 800e340:	4619      	mov	r1, r3
 800e342:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e344:	f7fe fe9a 	bl	800d07c <move_window>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d137      	bne.n	800e3be <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e350:	2200      	movs	r2, #0
 800e352:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e356:	3334      	adds	r3, #52	@ 0x34
 800e358:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fe fbab 	bl	800cab8 <ld_word>
 800e362:	4603      	mov	r3, r0
 800e364:	461a      	mov	r2, r3
 800e366:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d127      	bne.n	800e3be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e370:	3334      	adds	r3, #52	@ 0x34
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe fbb8 	bl	800cae8 <ld_dword>
 800e378:	4603      	mov	r3, r0
 800e37a:	4a1c      	ldr	r2, [pc, #112]	@ (800e3ec <find_volume+0x49c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d11e      	bne.n	800e3be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e382:	3334      	adds	r3, #52	@ 0x34
 800e384:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fe fbad 	bl	800cae8 <ld_dword>
 800e38e:	4603      	mov	r3, r0
 800e390:	4a17      	ldr	r2, [pc, #92]	@ (800e3f0 <find_volume+0x4a0>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d113      	bne.n	800e3be <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e398:	3334      	adds	r3, #52	@ 0x34
 800e39a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe fba2 	bl	800cae8 <ld_dword>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ac:	3334      	adds	r3, #52	@ 0x34
 800e3ae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fe fb98 	bl	800cae8 <ld_dword>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e3c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e3f4 <find_volume+0x4a4>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	4b09      	ldr	r3, [pc, #36]	@ (800e3f4 <find_volume+0x4a4>)
 800e3d0:	801a      	strh	r2, [r3, #0]
 800e3d2:	4b08      	ldr	r3, [pc, #32]	@ (800e3f4 <find_volume+0x4a4>)
 800e3d4:	881a      	ldrh	r2, [r3, #0]
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3dc:	f7fe fde6 	bl	800cfac <clear_lock>
#endif
	return FR_OK;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3758      	adds	r7, #88	@ 0x58
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	41615252 	.word	0x41615252
 800e3f0:	61417272 	.word	0x61417272
 800e3f4:	2000112c 	.word	0x2000112c

0800e3f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e402:	2309      	movs	r3, #9
 800e404:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d02e      	beq.n	800e46a <validate+0x72>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d02a      	beq.n	800e46a <validate+0x72>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d025      	beq.n	800e46a <validate+0x72>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	889a      	ldrh	r2, [r3, #4]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	88db      	ldrh	r3, [r3, #6]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d11e      	bne.n	800e46a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe fc41 	bl	800ccb8 <lock_fs>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d014      	beq.n	800e466 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	785b      	ldrb	r3, [r3, #1]
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fa98 	bl	800c978 <disk_status>
 800e448:	4603      	mov	r3, r0
 800e44a:	f003 0301 	and.w	r3, r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d102      	bne.n	800e458 <validate+0x60>
				res = FR_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
 800e456:	e008      	b.n	800e46a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2100      	movs	r1, #0
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fe fc40 	bl	800cce4 <unlock_fs>
 800e464:	e001      	b.n	800e46a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e466:	230f      	movs	r3, #15
 800e468:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e46a:	7bfb      	ldrb	r3, [r7, #15]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d102      	bne.n	800e476 <validate+0x7e>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	e000      	b.n	800e478 <validate+0x80>
 800e476:	2300      	movs	r3, #0
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	6013      	str	r3, [r2, #0]
	return res;
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
	...

0800e488 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b088      	sub	sp, #32
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4613      	mov	r3, r2
 800e494:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e49a:	f107 0310 	add.w	r3, r7, #16
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff fcbb 	bl	800de1a <get_ldnumber>
 800e4a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	da01      	bge.n	800e4b0 <f_mount+0x28>
 800e4ac:	230b      	movs	r3, #11
 800e4ae:	e048      	b.n	800e542 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4b0:	4a26      	ldr	r2, [pc, #152]	@ (800e54c <f_mount+0xc4>)
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00f      	beq.n	800e4e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4c0:	69b8      	ldr	r0, [r7, #24]
 800e4c2:	f7fe fd73 	bl	800cfac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 ff3c 	bl	800f348 <ff_del_syncobj>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <f_mount+0x52>
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	e033      	b.n	800e542 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00f      	beq.n	800e506 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	330c      	adds	r3, #12
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	f000 ff0b 	bl	800f312 <ff_cre_syncobj>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <f_mount+0x7e>
 800e502:	2302      	movs	r3, #2
 800e504:	e01d      	b.n	800e542 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	4910      	ldr	r1, [pc, #64]	@ (800e54c <f_mount+0xc4>)
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <f_mount+0x94>
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d001      	beq.n	800e520 <f_mount+0x98>
 800e51c:	2300      	movs	r3, #0
 800e51e:	e010      	b.n	800e542 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e520:	f107 010c 	add.w	r1, r7, #12
 800e524:	f107 0308 	add.w	r3, r7, #8
 800e528:	2200      	movs	r2, #0
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff fd10 	bl	800df50 <find_volume>
 800e530:	4603      	mov	r3, r0
 800e532:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	7dfa      	ldrb	r2, [r7, #23]
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe fbd2 	bl	800cce4 <unlock_fs>
 800e540:	7dfb      	ldrb	r3, [r7, #23]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3720      	adds	r7, #32
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	20001128 	.word	0x20001128

0800e550 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b098      	sub	sp, #96	@ 0x60
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	4613      	mov	r3, r2
 800e55c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <f_open+0x18>
 800e564:	2309      	movs	r3, #9
 800e566:	e1b0      	b.n	800e8ca <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e568:	79fb      	ldrb	r3, [r7, #7]
 800e56a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e56e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e570:	79fa      	ldrb	r2, [r7, #7]
 800e572:	f107 0110 	add.w	r1, r7, #16
 800e576:	f107 0308 	add.w	r3, r7, #8
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7ff fce8 	bl	800df50 <find_volume>
 800e580:	4603      	mov	r3, r0
 800e582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e586:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f040 818d 	bne.w	800e8aa <f_open+0x35a>
		dj.obj.fs = fs;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	f107 0314 	add.w	r3, r7, #20
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff fbcb 	bl	800dd38 <follow_path>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d118      	bne.n	800e5e2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e5b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e5b4:	b25b      	sxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da03      	bge.n	800e5c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e5ba:	2306      	movs	r3, #6
 800e5bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e5c0:	e00f      	b.n	800e5e2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	bf8c      	ite	hi
 800e5c8:	2301      	movhi	r3, #1
 800e5ca:	2300      	movls	r3, #0
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fba0 	bl	800cd1c <chk_lock>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	f003 031c 	and.w	r3, r3, #28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d07f      	beq.n	800e6ec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e5ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d017      	beq.n	800e624 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5f8:	2b04      	cmp	r3, #4
 800e5fa:	d10e      	bne.n	800e61a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5fc:	f7fe fbea 	bl	800cdd4 <enq_lock>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d006      	beq.n	800e614 <f_open+0xc4>
 800e606:	f107 0314 	add.w	r3, r7, #20
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff face 	bl	800dbac <dir_register>
 800e610:	4603      	mov	r3, r0
 800e612:	e000      	b.n	800e616 <f_open+0xc6>
 800e614:	2312      	movs	r3, #18
 800e616:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	f043 0308 	orr.w	r3, r3, #8
 800e620:	71fb      	strb	r3, [r7, #7]
 800e622:	e010      	b.n	800e646 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e624:	7ebb      	ldrb	r3, [r7, #26]
 800e626:	f003 0311 	and.w	r3, r3, #17
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <f_open+0xe6>
					res = FR_DENIED;
 800e62e:	2307      	movs	r3, #7
 800e630:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e634:	e007      	b.n	800e646 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	f003 0304 	and.w	r3, r3, #4
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <f_open+0xf6>
 800e640:	2308      	movs	r3, #8
 800e642:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e646:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d168      	bne.n	800e720 <f_open+0x1d0>
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	f003 0308 	and.w	r3, r3, #8
 800e654:	2b00      	cmp	r3, #0
 800e656:	d063      	beq.n	800e720 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e658:	f7fd fc58 	bl	800bf0c <get_fattime>
 800e65c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e660:	330e      	adds	r3, #14
 800e662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe fa7d 	bl	800cb64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e66c:	3316      	adds	r3, #22
 800e66e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e670:	4618      	mov	r0, r3
 800e672:	f7fe fa77 	bl	800cb64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e678:	330b      	adds	r3, #11
 800e67a:	2220      	movs	r2, #32
 800e67c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e682:	4611      	mov	r1, r2
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff f9fd 	bl	800da84 <ld_clust>
 800e68a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e690:	2200      	movs	r2, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fa15 	bl	800dac2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e69a:	331c      	adds	r3, #28
 800e69c:	2100      	movs	r1, #0
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fa60 	bl	800cb64 <st_dword>
					fs->wflag = 1;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e6aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d037      	beq.n	800e720 <f_open+0x1d0>
						dw = fs->winsect;
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6b4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e6b6:	f107 0314 	add.w	r3, r7, #20
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fe ff28 	bl	800d514 <remove_chain>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e6ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d126      	bne.n	800e720 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fcd0 	bl	800d07c <move_window>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6e6:	3a01      	subs	r2, #1
 800e6e8:	611a      	str	r2, [r3, #16]
 800e6ea:	e019      	b.n	800e720 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d115      	bne.n	800e720 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6f4:	7ebb      	ldrb	r3, [r7, #26]
 800e6f6:	f003 0310 	and.w	r3, r3, #16
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e6fe:	2304      	movs	r3, #4
 800e700:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e704:	e00c      	b.n	800e720 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	f003 0302 	and.w	r3, r3, #2
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d007      	beq.n	800e720 <f_open+0x1d0>
 800e710:	7ebb      	ldrb	r3, [r7, #26]
 800e712:	f003 0301 	and.w	r3, r3, #1
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <f_open+0x1d0>
						res = FR_DENIED;
 800e71a:	2307      	movs	r3, #7
 800e71c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e720:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e724:	2b00      	cmp	r3, #0
 800e726:	d126      	bne.n	800e776 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	f003 0308 	and.w	r3, r3, #8
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e738:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e748:	79fb      	ldrb	r3, [r7, #7]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	bf8c      	ite	hi
 800e74e:	2301      	movhi	r3, #1
 800e750:	2300      	movls	r3, #0
 800e752:	b2db      	uxtb	r3, r3
 800e754:	461a      	mov	r2, r3
 800e756:	f107 0314 	add.w	r3, r7, #20
 800e75a:	4611      	mov	r1, r2
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fb5b 	bl	800ce18 <inc_lock>
 800e762:	4602      	mov	r2, r0
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d102      	bne.n	800e776 <f_open+0x226>
 800e770:	2302      	movs	r3, #2
 800e772:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e776:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f040 8095 	bne.w	800e8aa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e784:	4611      	mov	r1, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff f97c 	bl	800da84 <ld_clust>
 800e78c:	4602      	mov	r2, r0
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e794:	331c      	adds	r3, #28
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe f9a6 	bl	800cae8 <ld_dword>
 800e79c:	4602      	mov	r2, r0
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	88da      	ldrh	r2, [r3, #6]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	79fa      	ldrb	r2, [r7, #7]
 800e7ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3330      	adds	r3, #48	@ 0x30
 800e7d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe fa10 	bl	800cbfe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	f003 0320 	and.w	r3, r3, #32
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d060      	beq.n	800e8aa <f_open+0x35a>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d05c      	beq.n	800e8aa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	895b      	ldrh	r3, [r3, #10]
 800e7fc:	025b      	lsls	r3, r3, #9
 800e7fe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e80c:	e016      	b.n	800e83c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fced 	bl	800d1f2 <get_fat>
 800e818:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e81a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d802      	bhi.n	800e826 <f_open+0x2d6>
 800e820:	2302      	movs	r3, #2
 800e822:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d102      	bne.n	800e834 <f_open+0x2e4>
 800e82e:	2301      	movs	r3, #1
 800e830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e838:	1ad3      	subs	r3, r2, r3
 800e83a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e83c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e840:	2b00      	cmp	r3, #0
 800e842:	d103      	bne.n	800e84c <f_open+0x2fc>
 800e844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e848:	429a      	cmp	r2, r3
 800e84a:	d8e0      	bhi.n	800e80e <f_open+0x2be>
				}
				fp->clust = clst;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e850:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e852:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e856:	2b00      	cmp	r3, #0
 800e858:	d127      	bne.n	800e8aa <f_open+0x35a>
 800e85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e860:	2b00      	cmp	r3, #0
 800e862:	d022      	beq.n	800e8aa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fca3 	bl	800d1b4 <clust2sect>
 800e86e:	6478      	str	r0, [r7, #68]	@ 0x44
 800e870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e872:	2b00      	cmp	r3, #0
 800e874:	d103      	bne.n	800e87e <f_open+0x32e>
						res = FR_INT_ERR;
 800e876:	2302      	movs	r3, #2
 800e878:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e87c:	e015      	b.n	800e8aa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e880:	0a5a      	lsrs	r2, r3, #9
 800e882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e884:	441a      	add	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	7858      	ldrb	r0, [r3, #1]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6a1a      	ldr	r2, [r3, #32]
 800e898:	2301      	movs	r3, #1
 800e89a:	f7fe f8af 	bl	800c9fc <disk_read>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <f_open+0x35a>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e8aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d002      	beq.n	800e8b8 <f_open+0x368>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fa0f 	bl	800cce4 <unlock_fs>
 800e8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3760      	adds	r7, #96	@ 0x60
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b08e      	sub	sp, #56	@ 0x38
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f107 0214 	add.w	r2, r7, #20
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fd80 	bl	800e3f8 <validate>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <f_read+0x44>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	7d5b      	ldrb	r3, [r3, #21]
 800e90a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e90e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e912:	2b00      	cmp	r3, #0
 800e914:	d009      	beq.n	800e92a <f_read+0x58>
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e91c:	4611      	mov	r1, r2
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f9e0 	bl	800cce4 <unlock_fs>
 800e924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e928:	e13d      	b.n	800eba6 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	7d1b      	ldrb	r3, [r3, #20]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d106      	bne.n	800e944 <f_read+0x72>
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	2107      	movs	r1, #7
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe f9d2 	bl	800cce4 <unlock_fs>
 800e940:	2307      	movs	r3, #7
 800e942:	e130      	b.n	800eba6 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	68da      	ldr	r2, [r3, #12]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	429a      	cmp	r2, r3
 800e956:	f240 811c 	bls.w	800eb92 <f_read+0x2c0>
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e95e:	e118      	b.n	800eb92 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f040 80e4 	bne.w	800eb36 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	0a5b      	lsrs	r3, r3, #9
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	8952      	ldrh	r2, [r2, #10]
 800e978:	3a01      	subs	r2, #1
 800e97a:	4013      	ands	r3, r2
 800e97c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d139      	bne.n	800e9f8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d103      	bne.n	800e994 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	633b      	str	r3, [r7, #48]	@ 0x30
 800e992:	e013      	b.n	800e9bc <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d007      	beq.n	800e9ac <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f7fe feb3 	bl	800d70e <clmt_clust>
 800e9a8:	6338      	str	r0, [r7, #48]	@ 0x30
 800e9aa:	e007      	b.n	800e9bc <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	f7fe fc1c 	bl	800d1f2 <get_fat>
 800e9ba:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d809      	bhi.n	800e9d6 <f_read+0x104>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2202      	movs	r2, #2
 800e9c6:	755a      	strb	r2, [r3, #21]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2102      	movs	r1, #2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fe f989 	bl	800cce4 <unlock_fs>
 800e9d2:	2302      	movs	r3, #2
 800e9d4:	e0e7      	b.n	800eba6 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9dc:	d109      	bne.n	800e9f2 <f_read+0x120>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	755a      	strb	r2, [r3, #21]
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe f97b 	bl	800cce4 <unlock_fs>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e0d9      	b.n	800eba6 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9f6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e9f8:	697a      	ldr	r2, [r7, #20]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	69db      	ldr	r3, [r3, #28]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4610      	mov	r0, r2
 800ea02:	f7fe fbd7 	bl	800d1b4 <clust2sect>
 800ea06:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d109      	bne.n	800ea22 <f_read+0x150>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2202      	movs	r2, #2
 800ea12:	755a      	strb	r2, [r3, #21]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	2102      	movs	r1, #2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fe f963 	bl	800cce4 <unlock_fs>
 800ea1e:	2302      	movs	r3, #2
 800ea20:	e0c1      	b.n	800eba6 <f_read+0x2d4>
			sect += csect;
 800ea22:	69ba      	ldr	r2, [r7, #24]
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	4413      	add	r3, r2
 800ea28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	0a5b      	lsrs	r3, r3, #9
 800ea2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ea30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d03e      	beq.n	800eab4 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea36:	69fa      	ldr	r2, [r7, #28]
 800ea38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3a:	4413      	add	r3, r2
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	8952      	ldrh	r2, [r2, #10]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d905      	bls.n	800ea50 <f_read+0x17e>
					cc = fs->csize - csect;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	895b      	ldrh	r3, [r3, #10]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	7858      	ldrb	r0, [r3, #1]
 800ea54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea56:	69ba      	ldr	r2, [r7, #24]
 800ea58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea5a:	f7fd ffcf 	bl	800c9fc <disk_read>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d009      	beq.n	800ea78 <f_read+0x1a6>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2201      	movs	r2, #1
 800ea68:	755a      	strb	r2, [r3, #21]
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fe f938 	bl	800cce4 <unlock_fs>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e096      	b.n	800eba6 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	da14      	bge.n	800eaac <f_read+0x1da>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6a1a      	ldr	r2, [r3, #32]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d90d      	bls.n	800eaac <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6a1a      	ldr	r2, [r3, #32]
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	025b      	lsls	r3, r3, #9
 800ea9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea9c:	18d0      	adds	r0, r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3330      	adds	r3, #48	@ 0x30
 800eaa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	f7fe f888 	bl	800cbbc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaae:	025b      	lsls	r3, r3, #9
 800eab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800eab2:	e05a      	b.n	800eb6a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	69ba      	ldr	r2, [r7, #24]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d038      	beq.n	800eb30 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	7d1b      	ldrb	r3, [r3, #20]
 800eac2:	b25b      	sxtb	r3, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	da1d      	bge.n	800eb04 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6a1a      	ldr	r2, [r3, #32]
 800ead6:	2301      	movs	r3, #1
 800ead8:	f7fd ffb0 	bl	800ca3c <disk_write>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d009      	beq.n	800eaf6 <f_read+0x224>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2201      	movs	r2, #1
 800eae6:	755a      	strb	r2, [r3, #21]
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2101      	movs	r1, #1
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe f8f9 	bl	800cce4 <unlock_fs>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e057      	b.n	800eba6 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	7d1b      	ldrb	r3, [r3, #20]
 800eafa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	7858      	ldrb	r0, [r3, #1]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb0e:	2301      	movs	r3, #1
 800eb10:	69ba      	ldr	r2, [r7, #24]
 800eb12:	f7fd ff73 	bl	800c9fc <disk_read>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d009      	beq.n	800eb30 <f_read+0x25e>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	755a      	strb	r2, [r3, #21]
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2101      	movs	r1, #1
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe f8dc 	bl	800cce4 <unlock_fs>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e03a      	b.n	800eba6 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eb42:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eb44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d901      	bls.n	800eb50 <f_read+0x27e>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb5e:	4413      	add	r3, r2
 800eb60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb62:	4619      	mov	r1, r3
 800eb64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb66:	f7fe f829 	bl	800cbbc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6e:	4413      	add	r3, r2
 800eb70:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	699a      	ldr	r2, [r3, #24]
 800eb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb78:	441a      	add	r2, r3
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	619a      	str	r2, [r3, #24]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb84:	441a      	add	r2, r3
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f47f aee3 	bne.w	800e960 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe f8a0 	bl	800cce4 <unlock_fs>
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3738      	adds	r7, #56	@ 0x38
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b08c      	sub	sp, #48	@ 0x30
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	60f8      	str	r0, [r7, #12]
 800ebb6:	60b9      	str	r1, [r7, #8]
 800ebb8:	607a      	str	r2, [r7, #4]
 800ebba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f107 0210 	add.w	r2, r7, #16
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff fc12 	bl	800e3f8 <validate>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ebda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d107      	bne.n	800ebf2 <f_write+0x44>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	7d5b      	ldrb	r3, [r3, #21]
 800ebe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ebea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <f_write+0x58>
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe f872 	bl	800cce4 <unlock_fs>
 800ec00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec04:	e173      	b.n	800eeee <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	7d1b      	ldrb	r3, [r3, #20]
 800ec0a:	f003 0302 	and.w	r3, r3, #2
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <f_write+0x72>
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2107      	movs	r1, #7
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe f864 	bl	800cce4 <unlock_fs>
 800ec1c:	2307      	movs	r3, #7
 800ec1e:	e166      	b.n	800eeee <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	699a      	ldr	r2, [r3, #24]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	441a      	add	r2, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	f080 814b 	bcs.w	800eec8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	43db      	mvns	r3, r3
 800ec38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ec3a:	e145      	b.n	800eec8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 8101 	bne.w	800ee4c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	0a5b      	lsrs	r3, r3, #9
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	8952      	ldrh	r2, [r2, #10]
 800ec54:	3a01      	subs	r2, #1
 800ec56:	4013      	ands	r3, r2
 800ec58:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d14d      	bne.n	800ecfc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10c      	bne.n	800ec82 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ec6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d11a      	bne.n	800ecaa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2100      	movs	r1, #0
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe fcb0 	bl	800d5de <create_chain>
 800ec7e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ec80:	e013      	b.n	800ecaa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d007      	beq.n	800ec9a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	4619      	mov	r1, r3
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7fe fd3c 	bl	800d70e <clmt_clust>
 800ec96:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ec98:	e007      	b.n	800ecaa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	69db      	ldr	r3, [r3, #28]
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7fe fc9b 	bl	800d5de <create_chain>
 800eca8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 8110 	beq.w	800eed2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d109      	bne.n	800eccc <f_write+0x11e>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2202      	movs	r2, #2
 800ecbc:	755a      	strb	r2, [r3, #21]
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2102      	movs	r1, #2
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe f80e 	bl	800cce4 <unlock_fs>
 800ecc8:	2302      	movs	r3, #2
 800ecca:	e110      	b.n	800eeee <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd2:	d109      	bne.n	800ece8 <f_write+0x13a>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	755a      	strb	r2, [r3, #21]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	2101      	movs	r1, #1
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe f800 	bl	800cce4 <unlock_fs>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e102      	b.n	800eeee <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d102      	bne.n	800ecfc <f_write+0x14e>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	7d1b      	ldrb	r3, [r3, #20]
 800ed00:	b25b      	sxtb	r3, r3
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	da1d      	bge.n	800ed42 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	7858      	ldrb	r0, [r3, #1]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6a1a      	ldr	r2, [r3, #32]
 800ed14:	2301      	movs	r3, #1
 800ed16:	f7fd fe91 	bl	800ca3c <disk_write>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d009      	beq.n	800ed34 <f_write+0x186>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2201      	movs	r2, #1
 800ed24:	755a      	strb	r2, [r3, #21]
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	2101      	movs	r1, #1
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd ffda 	bl	800cce4 <unlock_fs>
 800ed30:	2301      	movs	r3, #1
 800ed32:	e0dc      	b.n	800eeee <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	7d1b      	ldrb	r3, [r3, #20]
 800ed38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	69db      	ldr	r3, [r3, #28]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fe fa32 	bl	800d1b4 <clust2sect>
 800ed50:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d109      	bne.n	800ed6c <f_write+0x1be>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	755a      	strb	r2, [r3, #21]
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	2102      	movs	r1, #2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fd ffbe 	bl	800cce4 <unlock_fs>
 800ed68:	2302      	movs	r3, #2
 800ed6a:	e0c0      	b.n	800eeee <f_write+0x340>
			sect += csect;
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	4413      	add	r3, r2
 800ed72:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	0a5b      	lsrs	r3, r3, #9
 800ed78:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d041      	beq.n	800ee04 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed80:	69ba      	ldr	r2, [r7, #24]
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	4413      	add	r3, r2
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	8952      	ldrh	r2, [r2, #10]
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d905      	bls.n	800ed9a <f_write+0x1ec>
					cc = fs->csize - csect;
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	895b      	ldrh	r3, [r3, #10]
 800ed92:	461a      	mov	r2, r3
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	7858      	ldrb	r0, [r3, #1]
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	69f9      	ldr	r1, [r7, #28]
 800eda4:	f7fd fe4a 	bl	800ca3c <disk_write>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d009      	beq.n	800edc2 <f_write+0x214>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2201      	movs	r2, #1
 800edb2:	755a      	strb	r2, [r3, #21]
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	2101      	movs	r1, #1
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fd ff93 	bl	800cce4 <unlock_fs>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e095      	b.n	800eeee <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	6a3a      	ldr	r2, [r7, #32]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d915      	bls.n	800edfc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6a1a      	ldr	r2, [r3, #32]
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	1ad3      	subs	r3, r2, r3
 800edde:	025b      	lsls	r3, r3, #9
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	4413      	add	r3, r2
 800ede4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ede8:	4619      	mov	r1, r3
 800edea:	f7fd fee7 	bl	800cbbc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	7d1b      	ldrb	r3, [r3, #20]
 800edf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	025b      	lsls	r3, r3, #9
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ee02:	e044      	b.n	800ee8e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6a1b      	ldr	r3, [r3, #32]
 800ee08:	697a      	ldr	r2, [r7, #20]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d01b      	beq.n	800ee46 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	699a      	ldr	r2, [r3, #24]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d215      	bcs.n	800ee46 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	7858      	ldrb	r0, [r3, #1]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee24:	2301      	movs	r3, #1
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	f7fd fde8 	bl	800c9fc <disk_read>
 800ee2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d009      	beq.n	800ee46 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	755a      	strb	r2, [r3, #21]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fd ff51 	bl	800cce4 <unlock_fs>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e053      	b.n	800eeee <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	699b      	ldr	r3, [r3, #24]
 800ee50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ee58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ee5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d901      	bls.n	800ee66 <f_write+0x2b8>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee74:	4413      	add	r3, r2
 800ee76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee78:	69f9      	ldr	r1, [r7, #28]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fd fe9e 	bl	800cbbc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	7d1b      	ldrb	r3, [r3, #20]
 800ee84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ee8e:	69fa      	ldr	r2, [r7, #28]
 800ee90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee92:	4413      	add	r3, r2
 800ee94:	61fb      	str	r3, [r7, #28]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	699a      	ldr	r2, [r3, #24]
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9c:	441a      	add	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	619a      	str	r2, [r3, #24]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	699b      	ldr	r3, [r3, #24]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	bf38      	it	cc
 800eeae:	461a      	movcc	r2, r3
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	60da      	str	r2, [r3, #12]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	441a      	add	r2, r3
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f47f aeb6 	bne.w	800ec3c <f_write+0x8e>
 800eed0:	e000      	b.n	800eed4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eed2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	7d1b      	ldrb	r3, [r3, #20]
 800eed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	2100      	movs	r1, #0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fd fefc 	bl	800cce4 <unlock_fs>
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3730      	adds	r7, #48	@ 0x30
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b086      	sub	sp, #24
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f107 0208 	add.w	r2, r7, #8
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff fa76 	bl	800e3f8 <validate>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef10:	7dfb      	ldrb	r3, [r7, #23]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d16d      	bne.n	800eff2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d067      	beq.n	800eff2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	7d1b      	ldrb	r3, [r3, #20]
 800ef26:	b25b      	sxtb	r3, r3
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	da1a      	bge.n	800ef62 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	7858      	ldrb	r0, [r3, #1]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a1a      	ldr	r2, [r3, #32]
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	f7fd fd7e 	bl	800ca3c <disk_write>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d006      	beq.n	800ef54 <f_sync+0x5e>
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	2101      	movs	r1, #1
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fd feca 	bl	800cce4 <unlock_fs>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e055      	b.n	800f000 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7d1b      	ldrb	r3, [r3, #20]
 800ef58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef62:	f7fc ffd3 	bl	800bf0c <get_fattime>
 800ef66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4610      	mov	r0, r2
 800ef72:	f7fe f883 	bl	800d07c <move_window>
 800ef76:	4603      	mov	r3, r0
 800ef78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d138      	bne.n	800eff2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	330b      	adds	r3, #11
 800ef8a:	781a      	ldrb	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	330b      	adds	r3, #11
 800ef90:	f042 0220 	orr.w	r2, r2, #32
 800ef94:	b2d2      	uxtb	r2, r2
 800ef96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6818      	ldr	r0, [r3, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	461a      	mov	r2, r3
 800efa2:	68f9      	ldr	r1, [r7, #12]
 800efa4:	f7fe fd8d 	bl	800dac2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f103 021c 	add.w	r2, r3, #28
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	4619      	mov	r1, r3
 800efb4:	4610      	mov	r0, r2
 800efb6:	f7fd fdd5 	bl	800cb64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	3316      	adds	r3, #22
 800efbe:	6939      	ldr	r1, [r7, #16]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fd fdcf 	bl	800cb64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3312      	adds	r3, #18
 800efca:	2100      	movs	r1, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fd fdae 	bl	800cb2e <st_word>
					fs->wflag = 1;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	2201      	movs	r2, #1
 800efd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fe f87c 	bl	800d0d8 <sync_fs>
 800efe0:	4603      	mov	r3, r0
 800efe2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efec:	b2da      	uxtb	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	7dfa      	ldrb	r2, [r7, #23]
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fd fe73 	bl	800cce4 <unlock_fs>
 800effe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ff70 	bl	800eef6 <f_sync>
 800f016:	4603      	mov	r3, r0
 800f018:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d11d      	bne.n	800f05c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f107 0208 	add.w	r2, r7, #8
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff f9e5 	bl	800e3f8 <validate>
 800f02e:	4603      	mov	r3, r0
 800f030:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d111      	bne.n	800f05c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd ff79 	bl	800cf34 <dec_lock>
 800f042:	4603      	mov	r3, r0
 800f044:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d102      	bne.n	800f052 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2100      	movs	r1, #0
 800f056:	4618      	mov	r0, r3
 800f058:	f7fd fe44 	bl	800cce4 <unlock_fs>
#endif
		}
	}
	return res;
 800f05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b092      	sub	sp, #72	@ 0x48
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f072:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f076:	f107 030c 	add.w	r3, r7, #12
 800f07a:	2200      	movs	r2, #0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe ff67 	bl	800df50 <find_volume>
 800f082:	4603      	mov	r3, r0
 800f084:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800f088:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 8099 	bne.w	800f1c4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09a:	695a      	ldr	r2, [r3, #20]
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	3b02      	subs	r3, #2
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d804      	bhi.n	800f0b0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800f0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a8:	695a      	ldr	r2, [r3, #20]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	e089      	b.n	800f1c4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800f0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d128      	bne.n	800f10e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800f0bc:	2302      	movs	r3, #2
 800f0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe f891 	bl	800d1f2 <get_fat>
 800f0d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d8:	d103      	bne.n	800f0e2 <f_getfree+0x7c>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f0e0:	e063      	b.n	800f1aa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d103      	bne.n	800f0f0 <f_getfree+0x8a>
 800f0e8:	2302      	movs	r3, #2
 800f0ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f0ee:	e05c      	b.n	800f1aa <f_getfree+0x144>
					if (stat == 0) nfree++;
 800f0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d102      	bne.n	800f0fc <f_getfree+0x96>
 800f0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800f0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0fe:	3301      	adds	r3, #1
 800f100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f108:	429a      	cmp	r2, r3
 800f10a:	d3db      	bcc.n	800f0c4 <f_getfree+0x5e>
 800f10c:	e04d      	b.n	800f1aa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800f10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f118:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f11e:	2300      	movs	r3, #0
 800f120:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800f122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f124:	2b00      	cmp	r3, #0
 800f126:	d113      	bne.n	800f150 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800f128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12c:	1c5a      	adds	r2, r3, #1
 800f12e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f130:	4619      	mov	r1, r3
 800f132:	f7fd ffa3 	bl	800d07c <move_window>
 800f136:	4603      	mov	r3, r0
 800f138:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800f13c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f140:	2b00      	cmp	r3, #0
 800f142:	d131      	bne.n	800f1a8 <f_getfree+0x142>
							p = fs->win;
 800f144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f146:	3334      	adds	r3, #52	@ 0x34
 800f148:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800f14a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f14e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800f150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b02      	cmp	r3, #2
 800f156:	d10f      	bne.n	800f178 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800f158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f15a:	f7fd fcad 	bl	800cab8 <ld_word>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d102      	bne.n	800f16a <f_getfree+0x104>
 800f164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f166:	3301      	adds	r3, #1
 800f168:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800f16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16c:	3302      	adds	r3, #2
 800f16e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f172:	3b02      	subs	r3, #2
 800f174:	637b      	str	r3, [r7, #52]	@ 0x34
 800f176:	e010      	b.n	800f19a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800f178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f17a:	f7fd fcb5 	bl	800cae8 <ld_dword>
 800f17e:	4603      	mov	r3, r0
 800f180:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f184:	2b00      	cmp	r3, #0
 800f186:	d102      	bne.n	800f18e <f_getfree+0x128>
 800f188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f18a:	3301      	adds	r3, #1
 800f18c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800f18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f190:	3304      	adds	r3, #4
 800f192:	633b      	str	r3, [r7, #48]	@ 0x30
 800f194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f196:	3b04      	subs	r3, #4
 800f198:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800f19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f19c:	3b01      	subs	r3, #1
 800f19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1bd      	bne.n	800f122 <f_getfree+0xbc>
 800f1a6:	e000      	b.n	800f1aa <f_getfree+0x144>
							if (res != FR_OK) break;
 800f1a8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1ae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1b4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800f1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b8:	791a      	ldrb	r2, [r3, #4]
 800f1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1bc:	f042 0201 	orr.w	r2, r2, #1
 800f1c0:	b2d2      	uxtb	r2, r2
 800f1c2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800f1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fd fd89 	bl	800cce4 <unlock_fs>
 800f1d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3748      	adds	r7, #72	@ 0x48
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b088      	sub	sp, #32
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	607a      	str	r2, [r7, #4]
	int n = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f1f2:	e01c      	b.n	800f22e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800f1f4:	f107 0310 	add.w	r3, r7, #16
 800f1f8:	f107 0114 	add.w	r1, r7, #20
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff fb67 	bl	800e8d2 <f_read>
		if (rc != 1) break;
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d117      	bne.n	800f23a <f_gets+0x5c>
		c = s[0];
 800f20a:	7d3b      	ldrb	r3, [r7, #20]
 800f20c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	2b0d      	cmp	r3, #13
 800f212:	d00b      	beq.n	800f22c <f_gets+0x4e>
		*p++ = c;
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	61ba      	str	r2, [r7, #24]
 800f21a:	7dfa      	ldrb	r2, [r7, #23]
 800f21c:	701a      	strb	r2, [r3, #0]
		n++;
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	3301      	adds	r3, #1
 800f222:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800f224:	7dfb      	ldrb	r3, [r7, #23]
 800f226:	2b0a      	cmp	r3, #10
 800f228:	d009      	beq.n	800f23e <f_gets+0x60>
 800f22a:	e000      	b.n	800f22e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f22c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	3b01      	subs	r3, #1
 800f232:	69fa      	ldr	r2, [r7, #28]
 800f234:	429a      	cmp	r2, r3
 800f236:	dbdd      	blt.n	800f1f4 <f_gets+0x16>
 800f238:	e002      	b.n	800f240 <f_gets+0x62>
		if (rc != 1) break;
 800f23a:	bf00      	nop
 800f23c:	e000      	b.n	800f240 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800f23e:	bf00      	nop
	}
	*p = 0;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	2200      	movs	r2, #0
 800f244:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <f_gets+0x72>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	e000      	b.n	800f252 <f_gets+0x74>
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3720      	adds	r7, #32
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
	...

0800f25c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b087      	sub	sp, #28
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	4613      	mov	r3, r2
 800f268:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f26a:	2301      	movs	r3, #1
 800f26c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f272:	4b1f      	ldr	r3, [pc, #124]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f274:	7a5b      	ldrb	r3, [r3, #9]
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d131      	bne.n	800f2e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f27c:	4b1c      	ldr	r3, [pc, #112]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f27e:	7a5b      	ldrb	r3, [r3, #9]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	461a      	mov	r2, r3
 800f284:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f286:	2100      	movs	r1, #0
 800f288:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f28a:	4b19      	ldr	r3, [pc, #100]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f28c:	7a5b      	ldrb	r3, [r3, #9]
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	4a17      	ldr	r2, [pc, #92]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	4413      	add	r3, r2
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f29a:	4b15      	ldr	r3, [pc, #84]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f29c:	7a5b      	ldrb	r3, [r3, #9]
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4b13      	ldr	r3, [pc, #76]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f2a4:	4413      	add	r3, r2
 800f2a6:	79fa      	ldrb	r2, [r7, #7]
 800f2a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f2aa:	4b11      	ldr	r3, [pc, #68]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f2ac:	7a5b      	ldrb	r3, [r3, #9]
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	b2d1      	uxtb	r1, r2
 800f2b4:	4a0e      	ldr	r2, [pc, #56]	@ (800f2f0 <FATFS_LinkDriverEx+0x94>)
 800f2b6:	7251      	strb	r1, [r2, #9]
 800f2b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f2ba:	7dbb      	ldrb	r3, [r7, #22]
 800f2bc:	3330      	adds	r3, #48	@ 0x30
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	223a      	movs	r2, #58	@ 0x3a
 800f2ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	3302      	adds	r3, #2
 800f2d0:	222f      	movs	r2, #47	@ 0x2f
 800f2d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	3303      	adds	r3, #3
 800f2d8:	2200      	movs	r2, #0
 800f2da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	371c      	adds	r7, #28
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	20001150 	.word	0x20001150

0800f2f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2fe:	2200      	movs	r2, #0
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff ffaa 	bl	800f25c <FATFS_LinkDriverEx>
 800f308:	4603      	mov	r3, r0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	4603      	mov	r3, r0
 800f31a:	6039      	str	r1, [r7, #0]
 800f31c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f31e:	2200      	movs	r2, #0
 800f320:	2101      	movs	r1, #1
 800f322:	2001      	movs	r0, #1
 800f324:	f000 fb1b 	bl	800f95e <osSemaphoreNew>
 800f328:	4602      	mov	r2, r0
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	bf14      	ite	ne
 800f336:	2301      	movne	r3, #1
 800f338:	2300      	moveq	r3, #0
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	60fb      	str	r3, [r7, #12]

    return ret;
 800f33e:	68fb      	ldr	r3, [r7, #12]
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fc23 	bl	800fb9c <osSemaphoreDelete>
#endif
    return 1;
 800f356:	2301      	movs	r3, #1
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f36c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 fb7d 	bl	800fa70 <osSemaphoreAcquire>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f37c:	2301      	movs	r3, #1
 800f37e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f380:	68fb      	ldr	r3, [r7, #12]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 fbbe 	bl	800fb14 <osSemaphoreRelease>
#endif
}
 800f398:	bf00      	nop
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <__NVIC_SetPriority>:
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	6039      	str	r1, [r7, #0]
 800f3aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	db0a      	blt.n	800f3ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	b2da      	uxtb	r2, r3
 800f3b8:	490c      	ldr	r1, [pc, #48]	@ (800f3ec <__NVIC_SetPriority+0x4c>)
 800f3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3be:	0112      	lsls	r2, r2, #4
 800f3c0:	b2d2      	uxtb	r2, r2
 800f3c2:	440b      	add	r3, r1
 800f3c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f3c8:	e00a      	b.n	800f3e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	4908      	ldr	r1, [pc, #32]	@ (800f3f0 <__NVIC_SetPriority+0x50>)
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	f003 030f 	and.w	r3, r3, #15
 800f3d6:	3b04      	subs	r3, #4
 800f3d8:	0112      	lsls	r2, r2, #4
 800f3da:	b2d2      	uxtb	r2, r2
 800f3dc:	440b      	add	r3, r1
 800f3de:	761a      	strb	r2, [r3, #24]
}
 800f3e0:	bf00      	nop
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	e000e100 	.word	0xe000e100
 800f3f0:	e000ed00 	.word	0xe000ed00

0800f3f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f3f8:	4b05      	ldr	r3, [pc, #20]	@ (800f410 <SysTick_Handler+0x1c>)
 800f3fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f3fc:	f002 fdc8 	bl	8011f90 <xTaskGetSchedulerState>
 800f400:	4603      	mov	r3, r0
 800f402:	2b01      	cmp	r3, #1
 800f404:	d001      	beq.n	800f40a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f406:	f003 fd1f 	bl	8012e48 <xPortSysTickHandler>
  }
}
 800f40a:	bf00      	nop
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	e000e010 	.word	0xe000e010

0800f414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f414:	b580      	push	{r7, lr}
 800f416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f418:	2100      	movs	r1, #0
 800f41a:	f06f 0004 	mvn.w	r0, #4
 800f41e:	f7ff ffbf 	bl	800f3a0 <__NVIC_SetPriority>
#endif
}
 800f422:	bf00      	nop
 800f424:	bd80      	pop	{r7, pc}
	...

0800f428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f42e:	f3ef 8305 	mrs	r3, IPSR
 800f432:	603b      	str	r3, [r7, #0]
  return(result);
 800f434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f436:	2b00      	cmp	r3, #0
 800f438:	d003      	beq.n	800f442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f43a:	f06f 0305 	mvn.w	r3, #5
 800f43e:	607b      	str	r3, [r7, #4]
 800f440:	e00c      	b.n	800f45c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f442:	4b0a      	ldr	r3, [pc, #40]	@ (800f46c <osKernelInitialize+0x44>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d105      	bne.n	800f456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f44a:	4b08      	ldr	r3, [pc, #32]	@ (800f46c <osKernelInitialize+0x44>)
 800f44c:	2201      	movs	r2, #1
 800f44e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f450:	2300      	movs	r3, #0
 800f452:	607b      	str	r3, [r7, #4]
 800f454:	e002      	b.n	800f45c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f456:	f04f 33ff 	mov.w	r3, #4294967295
 800f45a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f45c:	687b      	ldr	r3, [r7, #4]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	2000115c 	.word	0x2000115c

0800f470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f476:	f3ef 8305 	mrs	r3, IPSR
 800f47a:	603b      	str	r3, [r7, #0]
  return(result);
 800f47c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d003      	beq.n	800f48a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f482:	f06f 0305 	mvn.w	r3, #5
 800f486:	607b      	str	r3, [r7, #4]
 800f488:	e010      	b.n	800f4ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f48a:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b8 <osKernelStart+0x48>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d109      	bne.n	800f4a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f492:	f7ff ffbf 	bl	800f414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f496:	4b08      	ldr	r3, [pc, #32]	@ (800f4b8 <osKernelStart+0x48>)
 800f498:	2202      	movs	r2, #2
 800f49a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f49c:	f002 f8f2 	bl	8011684 <vTaskStartScheduler>
      stat = osOK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	607b      	str	r3, [r7, #4]
 800f4a4:	e002      	b.n	800f4ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f4ac:	687b      	ldr	r3, [r7, #4]
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	2000115c 	.word	0x2000115c

0800f4bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4c2:	f3ef 8305 	mrs	r3, IPSR
 800f4c6:	603b      	str	r3, [r7, #0]
  return(result);
 800f4c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f4ce:	f002 fa05 	bl	80118dc <xTaskGetTickCountFromISR>
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	e002      	b.n	800f4dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f4d6:	f002 f9f1 	bl	80118bc <xTaskGetTickCount>
 800f4da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f4dc:	687b      	ldr	r3, [r7, #4]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b08e      	sub	sp, #56	@ 0x38
 800f4ea:	af04      	add	r7, sp, #16
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4f6:	f3ef 8305 	mrs	r3, IPSR
 800f4fa:	617b      	str	r3, [r7, #20]
  return(result);
 800f4fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d17e      	bne.n	800f600 <osThreadNew+0x11a>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d07b      	beq.n	800f600 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f508:	2380      	movs	r3, #128	@ 0x80
 800f50a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f50c:	2318      	movs	r3, #24
 800f50e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f510:	2300      	movs	r3, #0
 800f512:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f514:	f04f 33ff 	mov.w	r3, #4294967295
 800f518:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d045      	beq.n	800f5ac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <osThreadNew+0x48>
        name = attr->name;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	699b      	ldr	r3, [r3, #24]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d002      	beq.n	800f53c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d008      	beq.n	800f554 <osThreadNew+0x6e>
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	2b38      	cmp	r3, #56	@ 0x38
 800f546:	d805      	bhi.n	800f554 <osThreadNew+0x6e>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <osThreadNew+0x72>
        return (NULL);
 800f554:	2300      	movs	r3, #0
 800f556:	e054      	b.n	800f602 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	695b      	ldr	r3, [r3, #20]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d003      	beq.n	800f568 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	695b      	ldr	r3, [r3, #20]
 800f564:	089b      	lsrs	r3, r3, #2
 800f566:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00e      	beq.n	800f58e <osThreadNew+0xa8>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	2ba7      	cmp	r3, #167	@ 0xa7
 800f576:	d90a      	bls.n	800f58e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d006      	beq.n	800f58e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	695b      	ldr	r3, [r3, #20]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d002      	beq.n	800f58e <osThreadNew+0xa8>
        mem = 1;
 800f588:	2301      	movs	r3, #1
 800f58a:	61bb      	str	r3, [r7, #24]
 800f58c:	e010      	b.n	800f5b0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10c      	bne.n	800f5b0 <osThreadNew+0xca>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d108      	bne.n	800f5b0 <osThreadNew+0xca>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	691b      	ldr	r3, [r3, #16]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <osThreadNew+0xca>
          mem = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	61bb      	str	r3, [r7, #24]
 800f5aa:	e001      	b.n	800f5b0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d110      	bne.n	800f5d8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f5be:	9202      	str	r2, [sp, #8]
 800f5c0:	9301      	str	r3, [sp, #4]
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	6a3a      	ldr	r2, [r7, #32]
 800f5ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f001 fe65 	bl	801129c <xTaskCreateStatic>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	613b      	str	r3, [r7, #16]
 800f5d6:	e013      	b.n	800f600 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d110      	bne.n	800f600 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	f107 0310 	add.w	r3, r7, #16
 800f5e6:	9301      	str	r3, [sp, #4]
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f001 feb3 	bl	801135c <xTaskCreate>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d001      	beq.n	800f600 <osThreadNew+0x11a>
            hTask = NULL;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f600:	693b      	ldr	r3, [r7, #16]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3728      	adds	r7, #40	@ 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b08c      	sub	sp, #48	@ 0x30
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f616:	f3ef 8305 	mrs	r3, IPSR
 800f61a:	617b      	str	r3, [r7, #20]
  return(result);
 800f61c:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d003      	beq.n	800f62a <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f622:	f06f 0305 	mvn.w	r3, #5
 800f626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f628:	e06b      	b.n	800f702 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	da03      	bge.n	800f638 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f630:	f06f 0303 	mvn.w	r3, #3
 800f634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f636:	e064      	b.n	800f702 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	f003 0302 	and.w	r3, r3, #2
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d002      	beq.n	800f648 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f642:	2300      	movs	r3, #0
 800f644:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f646:	e001      	b.n	800f64c <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800f64c:	2300      	movs	r3, #0
 800f64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800f654:	f002 f932 	bl	80118bc <xTaskGetTickCount>
 800f658:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f65a:	f107 0210 	add.w	r2, r7, #16
 800f65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f662:	2000      	movs	r0, #0
 800f664:	f002 fe22 	bl	80122ac <xTaskNotifyWait>
 800f668:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d137      	bne.n	800f6e0 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4013      	ands	r3, r2
 800f676:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f67c:	4313      	orrs	r3, r2
 800f67e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	f003 0301 	and.w	r3, r3, #1
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00c      	beq.n	800f6a4 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68e:	4013      	ands	r3, r2
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	429a      	cmp	r2, r3
 800f694:	d032      	beq.n	800f6fc <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10f      	bne.n	800f6bc <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f69c:	f06f 0302 	mvn.w	r3, #2
 800f6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800f6a2:	e02e      	b.n	800f702 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d128      	bne.n	800f700 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d103      	bne.n	800f6bc <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f6b4:	f06f 0302 	mvn.w	r3, #2
 800f6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800f6ba:	e022      	b.n	800f702 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f6bc:	f002 f8fe 	bl	80118bc <xTaskGetTickCount>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	6a3b      	ldr	r3, [r7, #32]
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d902      	bls.n	800f6d6 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6d4:	e00e      	b.n	800f6f4 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6de:	e009      	b.n	800f6f4 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d103      	bne.n	800f6ee <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f6e6:	f06f 0302 	mvn.w	r3, #2
 800f6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f6ec:	e002      	b.n	800f6f4 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f6ee:	f06f 0301 	mvn.w	r3, #1
 800f6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1af      	bne.n	800f65a <osThreadFlagsWait+0x50>
 800f6fa:	e002      	b.n	800f702 <osThreadFlagsWait+0xf8>
            break;
 800f6fc:	bf00      	nop
 800f6fe:	e000      	b.n	800f702 <osThreadFlagsWait+0xf8>
            break;
 800f700:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800f704:	4618      	mov	r0, r3
 800f706:	3730      	adds	r7, #48	@ 0x30
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f714:	f3ef 8305 	mrs	r3, IPSR
 800f718:	60bb      	str	r3, [r7, #8]
  return(result);
 800f71a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d003      	beq.n	800f728 <osDelay+0x1c>
    stat = osErrorISR;
 800f720:	f06f 0305 	mvn.w	r3, #5
 800f724:	60fb      	str	r3, [r7, #12]
 800f726:	e007      	b.n	800f738 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f728:	2300      	movs	r3, #0
 800f72a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f001 ff70 	bl	8011618 <vTaskDelay>
    }
  }

  return (stat);
 800f738:	68fb      	ldr	r3, [r7, #12]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f742:	b580      	push	{r7, lr}
 800f744:	b088      	sub	sp, #32
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f74e:	f3ef 8305 	mrs	r3, IPSR
 800f752:	60bb      	str	r3, [r7, #8]
  return(result);
 800f754:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f756:	2b00      	cmp	r3, #0
 800f758:	d174      	bne.n	800f844 <osMutexNew+0x102>
    if (attr != NULL) {
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d003      	beq.n	800f768 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	61bb      	str	r3, [r7, #24]
 800f766:	e001      	b.n	800f76c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f768:	2300      	movs	r3, #0
 800f76a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	f003 0301 	and.w	r3, r3, #1
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <osMutexNew+0x3a>
      rmtx = 1U;
 800f776:	2301      	movs	r3, #1
 800f778:	617b      	str	r3, [r7, #20]
 800f77a:	e001      	b.n	800f780 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f77c:	2300      	movs	r3, #0
 800f77e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	f003 0308 	and.w	r3, r3, #8
 800f786:	2b00      	cmp	r3, #0
 800f788:	d15c      	bne.n	800f844 <osMutexNew+0x102>
      mem = -1;
 800f78a:	f04f 33ff 	mov.w	r3, #4294967295
 800f78e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d015      	beq.n	800f7c2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <osMutexNew+0x6a>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	2b4f      	cmp	r3, #79	@ 0x4f
 800f7a4:	d902      	bls.n	800f7ac <osMutexNew+0x6a>
          mem = 1;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	613b      	str	r3, [r7, #16]
 800f7aa:	e00c      	b.n	800f7c6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d108      	bne.n	800f7c6 <osMutexNew+0x84>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d104      	bne.n	800f7c6 <osMutexNew+0x84>
            mem = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	e001      	b.n	800f7c6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d112      	bne.n	800f7f2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d007      	beq.n	800f7e2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	2004      	movs	r0, #4
 800f7da:	f000 fdb4 	bl	8010346 <xQueueCreateMutexStatic>
 800f7de:	61f8      	str	r0, [r7, #28]
 800f7e0:	e016      	b.n	800f810 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f000 fdac 	bl	8010346 <xQueueCreateMutexStatic>
 800f7ee:	61f8      	str	r0, [r7, #28]
 800f7f0:	e00e      	b.n	800f810 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10b      	bne.n	800f810 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d004      	beq.n	800f808 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f7fe:	2004      	movs	r0, #4
 800f800:	f000 fd89 	bl	8010316 <xQueueCreateMutex>
 800f804:	61f8      	str	r0, [r7, #28]
 800f806:	e003      	b.n	800f810 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f808:	2001      	movs	r0, #1
 800f80a:	f000 fd84 	bl	8010316 <xQueueCreateMutex>
 800f80e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00c      	beq.n	800f830 <osMutexNew+0xee>
        if (attr != NULL) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <osMutexNew+0xe2>
          name = attr->name;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	e001      	b.n	800f828 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	69f8      	ldr	r0, [r7, #28]
 800f82c:	f001 fcae 	bl	801118c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <osMutexNew+0x102>
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d003      	beq.n	800f844 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	f043 0301 	orr.w	r3, r3, #1
 800f842:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f844:	69fb      	ldr	r3, [r7, #28]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3720      	adds	r7, #32
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f84e:	b580      	push	{r7, lr}
 800f850:	b086      	sub	sp, #24
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f023 0301 	bic.w	r3, r3, #1
 800f85e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f868:	2300      	movs	r3, #0
 800f86a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f86c:	f3ef 8305 	mrs	r3, IPSR
 800f870:	60bb      	str	r3, [r7, #8]
  return(result);
 800f872:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f878:	f06f 0305 	mvn.w	r3, #5
 800f87c:	617b      	str	r3, [r7, #20]
 800f87e:	e02c      	b.n	800f8da <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d103      	bne.n	800f88e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f886:	f06f 0303 	mvn.w	r3, #3
 800f88a:	617b      	str	r3, [r7, #20]
 800f88c:	e025      	b.n	800f8da <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d011      	beq.n	800f8b8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6938      	ldr	r0, [r7, #16]
 800f898:	f000 fda5 	bl	80103e6 <xQueueTakeMutexRecursive>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d01b      	beq.n	800f8da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f8a8:	f06f 0301 	mvn.w	r3, #1
 800f8ac:	617b      	str	r3, [r7, #20]
 800f8ae:	e014      	b.n	800f8da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f8b0:	f06f 0302 	mvn.w	r3, #2
 800f8b4:	617b      	str	r3, [r7, #20]
 800f8b6:	e010      	b.n	800f8da <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6938      	ldr	r0, [r7, #16]
 800f8bc:	f001 f94a 	bl	8010b54 <xQueueSemaphoreTake>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d009      	beq.n	800f8da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d003      	beq.n	800f8d4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f8cc:	f06f 0301 	mvn.w	r3, #1
 800f8d0:	617b      	str	r3, [r7, #20]
 800f8d2:	e002      	b.n	800f8da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f8d4:	f06f 0302 	mvn.w	r3, #2
 800f8d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f8da:	697b      	ldr	r3, [r7, #20]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3718      	adds	r7, #24
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f023 0301 	bic.w	r3, r3, #1
 800f8f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f003 0301 	and.w	r3, r3, #1
 800f8fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f900:	f3ef 8305 	mrs	r3, IPSR
 800f904:	60bb      	str	r3, [r7, #8]
  return(result);
 800f906:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d003      	beq.n	800f914 <osMutexRelease+0x30>
    stat = osErrorISR;
 800f90c:	f06f 0305 	mvn.w	r3, #5
 800f910:	617b      	str	r3, [r7, #20]
 800f912:	e01f      	b.n	800f954 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d103      	bne.n	800f922 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f91a:	f06f 0303 	mvn.w	r3, #3
 800f91e:	617b      	str	r3, [r7, #20]
 800f920:	e018      	b.n	800f954 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d009      	beq.n	800f93c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f928:	6938      	ldr	r0, [r7, #16]
 800f92a:	f000 fd27 	bl	801037c <xQueueGiveMutexRecursive>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b01      	cmp	r3, #1
 800f932:	d00f      	beq.n	800f954 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f934:	f06f 0302 	mvn.w	r3, #2
 800f938:	617b      	str	r3, [r7, #20]
 800f93a:	e00b      	b.n	800f954 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f93c:	2300      	movs	r3, #0
 800f93e:	2200      	movs	r2, #0
 800f940:	2100      	movs	r1, #0
 800f942:	6938      	ldr	r0, [r7, #16]
 800f944:	f000 fdf4 	bl	8010530 <xQueueGenericSend>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d002      	beq.n	800f954 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f94e:	f06f 0302 	mvn.w	r3, #2
 800f952:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f954:	697b      	ldr	r3, [r7, #20]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3718      	adds	r7, #24
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f95e:	b580      	push	{r7, lr}
 800f960:	b08a      	sub	sp, #40	@ 0x28
 800f962:	af02      	add	r7, sp, #8
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f96a:	2300      	movs	r3, #0
 800f96c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f96e:	f3ef 8305 	mrs	r3, IPSR
 800f972:	613b      	str	r3, [r7, #16]
  return(result);
 800f974:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f976:	2b00      	cmp	r3, #0
 800f978:	d175      	bne.n	800fa66 <osSemaphoreNew+0x108>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d072      	beq.n	800fa66 <osSemaphoreNew+0x108>
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	429a      	cmp	r2, r3
 800f986:	d86e      	bhi.n	800fa66 <osSemaphoreNew+0x108>
    mem = -1;
 800f988:	f04f 33ff 	mov.w	r3, #4294967295
 800f98c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d015      	beq.n	800f9c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d006      	beq.n	800f9aa <osSemaphoreNew+0x4c>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	2b4f      	cmp	r3, #79	@ 0x4f
 800f9a2:	d902      	bls.n	800f9aa <osSemaphoreNew+0x4c>
        mem = 1;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	61bb      	str	r3, [r7, #24]
 800f9a8:	e00c      	b.n	800f9c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d108      	bne.n	800f9c4 <osSemaphoreNew+0x66>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d104      	bne.n	800f9c4 <osSemaphoreNew+0x66>
          mem = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	61bb      	str	r3, [r7, #24]
 800f9be:	e001      	b.n	800f9c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ca:	d04c      	beq.n	800fa66 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d128      	bne.n	800fa24 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d10a      	bne.n	800f9ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	2203      	movs	r2, #3
 800f9de:	9200      	str	r2, [sp, #0]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	f000 fba1 	bl	801012c <xQueueGenericCreateStatic>
 800f9ea:	61f8      	str	r0, [r7, #28]
 800f9ec:	e005      	b.n	800f9fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f9ee:	2203      	movs	r2, #3
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	2001      	movs	r0, #1
 800f9f4:	f000 fc17 	bl	8010226 <xQueueGenericCreate>
 800f9f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d022      	beq.n	800fa46 <osSemaphoreNew+0xe8>
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d01f      	beq.n	800fa46 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa06:	2300      	movs	r3, #0
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	69f8      	ldr	r0, [r7, #28]
 800fa0e:	f000 fd8f 	bl	8010530 <xQueueGenericSend>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d016      	beq.n	800fa46 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fa18:	69f8      	ldr	r0, [r7, #28]
 800fa1a:	f001 fa6b 	bl	8010ef4 <vQueueDelete>
            hSemaphore = NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	61fb      	str	r3, [r7, #28]
 800fa22:	e010      	b.n	800fa46 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d108      	bne.n	800fa3c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68b9      	ldr	r1, [r7, #8]
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f000 fd0e 	bl	8010454 <xQueueCreateCountingSemaphoreStatic>
 800fa38:	61f8      	str	r0, [r7, #28]
 800fa3a:	e004      	b.n	800fa46 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f000 fd41 	bl	80104c6 <xQueueCreateCountingSemaphore>
 800fa44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00c      	beq.n	800fa66 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <osSemaphoreNew+0xfc>
          name = attr->name;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	e001      	b.n	800fa5e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fa5e:	6979      	ldr	r1, [r7, #20]
 800fa60:	69f8      	ldr	r0, [r7, #28]
 800fa62:	f001 fb93 	bl	801118c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fa66:	69fb      	ldr	r3, [r7, #28]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3720      	adds	r7, #32
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d103      	bne.n	800fa90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fa88:	f06f 0303 	mvn.w	r3, #3
 800fa8c:	617b      	str	r3, [r7, #20]
 800fa8e:	e039      	b.n	800fb04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa90:	f3ef 8305 	mrs	r3, IPSR
 800fa94:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d022      	beq.n	800fae2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800faa2:	f06f 0303 	mvn.w	r3, #3
 800faa6:	617b      	str	r3, [r7, #20]
 800faa8:	e02c      	b.n	800fb04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800faaa:	2300      	movs	r3, #0
 800faac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800faae:	f107 0308 	add.w	r3, r7, #8
 800fab2:	461a      	mov	r2, r3
 800fab4:	2100      	movs	r1, #0
 800fab6:	6938      	ldr	r0, [r7, #16]
 800fab8:	f001 f95c 	bl	8010d74 <xQueueReceiveFromISR>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d003      	beq.n	800faca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fac2:	f06f 0302 	mvn.w	r3, #2
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	e01c      	b.n	800fb04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	2b00      	cmp	r3, #0
 800face:	d019      	beq.n	800fb04 <osSemaphoreAcquire+0x94>
 800fad0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb10 <osSemaphoreAcquire+0xa0>)
 800fad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	e010      	b.n	800fb04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	6938      	ldr	r0, [r7, #16]
 800fae6:	f001 f835 	bl	8010b54 <xQueueSemaphoreTake>
 800faea:	4603      	mov	r3, r0
 800faec:	2b01      	cmp	r3, #1
 800faee:	d009      	beq.n	800fb04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800faf6:	f06f 0301 	mvn.w	r3, #1
 800fafa:	617b      	str	r3, [r7, #20]
 800fafc:	e002      	b.n	800fb04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fafe:	f06f 0302 	mvn.w	r3, #2
 800fb02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fb04:	697b      	ldr	r3, [r7, #20]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	e000ed04 	.word	0xe000ed04

0800fb14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fb20:	2300      	movs	r3, #0
 800fb22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d103      	bne.n	800fb32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fb2a:	f06f 0303 	mvn.w	r3, #3
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	e02c      	b.n	800fb8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb32:	f3ef 8305 	mrs	r3, IPSR
 800fb36:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01a      	beq.n	800fb74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4619      	mov	r1, r3
 800fb48:	6938      	ldr	r0, [r7, #16]
 800fb4a:	f000 fe91 	bl	8010870 <xQueueGiveFromISR>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d003      	beq.n	800fb5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fb54:	f06f 0302 	mvn.w	r3, #2
 800fb58:	617b      	str	r3, [r7, #20]
 800fb5a:	e017      	b.n	800fb8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d014      	beq.n	800fb8c <osSemaphoreRelease+0x78>
 800fb62:	4b0d      	ldr	r3, [pc, #52]	@ (800fb98 <osSemaphoreRelease+0x84>)
 800fb64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb68:	601a      	str	r2, [r3, #0]
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	e00b      	b.n	800fb8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fb74:	2300      	movs	r3, #0
 800fb76:	2200      	movs	r2, #0
 800fb78:	2100      	movs	r1, #0
 800fb7a:	6938      	ldr	r0, [r7, #16]
 800fb7c:	f000 fcd8 	bl	8010530 <xQueueGenericSend>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d002      	beq.n	800fb8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fb86:	f06f 0302 	mvn.w	r3, #2
 800fb8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fb8c:	697b      	ldr	r3, [r7, #20]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	e000ed04 	.word	0xe000ed04

0800fb9c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fba8:	f3ef 8305 	mrs	r3, IPSR
 800fbac:	60fb      	str	r3, [r7, #12]
  return(result);
 800fbae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d003      	beq.n	800fbbc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800fbb4:	f06f 0305 	mvn.w	r3, #5
 800fbb8:	617b      	str	r3, [r7, #20]
 800fbba:	e00e      	b.n	800fbda <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d103      	bne.n	800fbca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800fbc2:	f06f 0303 	mvn.w	r3, #3
 800fbc6:	617b      	str	r3, [r7, #20]
 800fbc8:	e007      	b.n	800fbda <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800fbca:	6938      	ldr	r0, [r7, #16]
 800fbcc:	f001 fb08 	bl	80111e0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800fbd4:	6938      	ldr	r0, [r7, #16]
 800fbd6:	f001 f98d 	bl	8010ef4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800fbda:	697b      	ldr	r3, [r7, #20]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08a      	sub	sp, #40	@ 0x28
 800fbe8:	af02      	add	r7, sp, #8
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbf4:	f3ef 8305 	mrs	r3, IPSR
 800fbf8:	613b      	str	r3, [r7, #16]
  return(result);
 800fbfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d15f      	bne.n	800fcc0 <osMessageQueueNew+0xdc>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d05c      	beq.n	800fcc0 <osMessageQueueNew+0xdc>
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d059      	beq.n	800fcc0 <osMessageQueueNew+0xdc>
    mem = -1;
 800fc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d029      	beq.n	800fc6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d012      	beq.n	800fc46 <osMessageQueueNew+0x62>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	2b4f      	cmp	r3, #79	@ 0x4f
 800fc26:	d90e      	bls.n	800fc46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00a      	beq.n	800fc46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	695a      	ldr	r2, [r3, #20]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	68b9      	ldr	r1, [r7, #8]
 800fc38:	fb01 f303 	mul.w	r3, r1, r3
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d302      	bcc.n	800fc46 <osMessageQueueNew+0x62>
        mem = 1;
 800fc40:	2301      	movs	r3, #1
 800fc42:	61bb      	str	r3, [r7, #24]
 800fc44:	e014      	b.n	800fc70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d110      	bne.n	800fc70 <osMessageQueueNew+0x8c>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d10c      	bne.n	800fc70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d108      	bne.n	800fc70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	695b      	ldr	r3, [r3, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d104      	bne.n	800fc70 <osMessageQueueNew+0x8c>
          mem = 0;
 800fc66:	2300      	movs	r3, #0
 800fc68:	61bb      	str	r3, [r7, #24]
 800fc6a:	e001      	b.n	800fc70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d10b      	bne.n	800fc8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	691a      	ldr	r2, [r3, #16]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	2100      	movs	r1, #0
 800fc80:	9100      	str	r1, [sp, #0]
 800fc82:	68b9      	ldr	r1, [r7, #8]
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f000 fa51 	bl	801012c <xQueueGenericCreateStatic>
 800fc8a:	61f8      	str	r0, [r7, #28]
 800fc8c:	e008      	b.n	800fca0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d105      	bne.n	800fca0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fc94:	2200      	movs	r2, #0
 800fc96:	68b9      	ldr	r1, [r7, #8]
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f000 fac4 	bl	8010226 <xQueueGenericCreate>
 800fc9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00c      	beq.n	800fcc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d003      	beq.n	800fcb4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	617b      	str	r3, [r7, #20]
 800fcb2:	e001      	b.n	800fcb8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fcb8:	6979      	ldr	r1, [r7, #20]
 800fcba:	69f8      	ldr	r0, [r7, #28]
 800fcbc:	f001 fa66 	bl	801118c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fcc0:	69fb      	ldr	r3, [r7, #28]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3720      	adds	r7, #32
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
	...

0800fccc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b088      	sub	sp, #32
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	603b      	str	r3, [r7, #0]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fce4:	f3ef 8305 	mrs	r3, IPSR
 800fce8:	617b      	str	r3, [r7, #20]
  return(result);
 800fcea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d028      	beq.n	800fd42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d005      	beq.n	800fd02 <osMessageQueuePut+0x36>
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <osMessageQueuePut+0x36>
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d003      	beq.n	800fd0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fd02:	f06f 0303 	mvn.w	r3, #3
 800fd06:	61fb      	str	r3, [r7, #28]
 800fd08:	e038      	b.n	800fd7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fd0e:	f107 0210 	add.w	r2, r7, #16
 800fd12:	2300      	movs	r3, #0
 800fd14:	68b9      	ldr	r1, [r7, #8]
 800fd16:	69b8      	ldr	r0, [r7, #24]
 800fd18:	f000 fd0c 	bl	8010734 <xQueueGenericSendFromISR>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d003      	beq.n	800fd2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fd22:	f06f 0302 	mvn.w	r3, #2
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	e028      	b.n	800fd7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d025      	beq.n	800fd7c <osMessageQueuePut+0xb0>
 800fd30:	4b15      	ldr	r3, [pc, #84]	@ (800fd88 <osMessageQueuePut+0xbc>)
 800fd32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	e01c      	b.n	800fd7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <osMessageQueuePut+0x82>
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d103      	bne.n	800fd56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fd4e:	f06f 0303 	mvn.w	r3, #3
 800fd52:	61fb      	str	r3, [r7, #28]
 800fd54:	e012      	b.n	800fd7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fd56:	2300      	movs	r3, #0
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	68b9      	ldr	r1, [r7, #8]
 800fd5c:	69b8      	ldr	r0, [r7, #24]
 800fd5e:	f000 fbe7 	bl	8010530 <xQueueGenericSend>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d009      	beq.n	800fd7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d003      	beq.n	800fd76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fd6e:	f06f 0301 	mvn.w	r3, #1
 800fd72:	61fb      	str	r3, [r7, #28]
 800fd74:	e002      	b.n	800fd7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fd76:	f06f 0302 	mvn.w	r3, #2
 800fd7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fd7c:	69fb      	ldr	r3, [r7, #28]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3720      	adds	r7, #32
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b088      	sub	sp, #32
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fda2:	f3ef 8305 	mrs	r3, IPSR
 800fda6:	617b      	str	r3, [r7, #20]
  return(result);
 800fda8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d028      	beq.n	800fe00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d005      	beq.n	800fdc0 <osMessageQueueGet+0x34>
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <osMessageQueueGet+0x34>
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d003      	beq.n	800fdc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fdc0:	f06f 0303 	mvn.w	r3, #3
 800fdc4:	61fb      	str	r3, [r7, #28]
 800fdc6:	e037      	b.n	800fe38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fdcc:	f107 0310 	add.w	r3, r7, #16
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	69b8      	ldr	r0, [r7, #24]
 800fdd6:	f000 ffcd 	bl	8010d74 <xQueueReceiveFromISR>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d003      	beq.n	800fde8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fde0:	f06f 0302 	mvn.w	r3, #2
 800fde4:	61fb      	str	r3, [r7, #28]
 800fde6:	e027      	b.n	800fe38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d024      	beq.n	800fe38 <osMessageQueueGet+0xac>
 800fdee:	4b15      	ldr	r3, [pc, #84]	@ (800fe44 <osMessageQueueGet+0xb8>)
 800fdf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	e01b      	b.n	800fe38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <osMessageQueueGet+0x80>
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d103      	bne.n	800fe14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fe0c:	f06f 0303 	mvn.w	r3, #3
 800fe10:	61fb      	str	r3, [r7, #28]
 800fe12:	e011      	b.n	800fe38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	68b9      	ldr	r1, [r7, #8]
 800fe18:	69b8      	ldr	r0, [r7, #24]
 800fe1a:	f000 fdb9 	bl	8010990 <xQueueReceive>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d009      	beq.n	800fe38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fe2a:	f06f 0301 	mvn.w	r3, #1
 800fe2e:	61fb      	str	r3, [r7, #28]
 800fe30:	e002      	b.n	800fe38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fe32:	f06f 0302 	mvn.w	r3, #2
 800fe36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe38:	69fb      	ldr	r3, [r7, #28]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3720      	adds	r7, #32
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	e000ed04 	.word	0xe000ed04

0800fe48 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d102      	bne.n	800fe60 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	617b      	str	r3, [r7, #20]
 800fe5e:	e00e      	b.n	800fe7e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe60:	f3ef 8305 	mrs	r3, IPSR
 800fe64:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d004      	beq.n	800fe76 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fe6c:	6938      	ldr	r0, [r7, #16]
 800fe6e:	f001 f822 	bl	8010eb6 <uxQueueMessagesWaitingFromISR>
 800fe72:	6178      	str	r0, [r7, #20]
 800fe74:	e003      	b.n	800fe7e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fe76:	6938      	ldr	r0, [r7, #16]
 800fe78:	f000 fffe 	bl	8010e78 <uxQueueMessagesWaiting>
 800fe7c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800fe7e:	697b      	ldr	r3, [r7, #20]
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3718      	adds	r7, #24
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	4a07      	ldr	r2, [pc, #28]	@ (800feb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800fe98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	4a06      	ldr	r2, [pc, #24]	@ (800feb8 <vApplicationGetIdleTaskMemory+0x30>)
 800fe9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2280      	movs	r2, #128	@ 0x80
 800fea4:	601a      	str	r2, [r3, #0]
}
 800fea6:	bf00      	nop
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20001160 	.word	0x20001160
 800feb8:	20001208 	.word	0x20001208

0800febc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	4a07      	ldr	r2, [pc, #28]	@ (800fee8 <vApplicationGetTimerTaskMemory+0x2c>)
 800fecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	4a06      	ldr	r2, [pc, #24]	@ (800feec <vApplicationGetTimerTaskMemory+0x30>)
 800fed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800feda:	601a      	str	r2, [r3, #0]
}
 800fedc:	bf00      	nop
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	20001408 	.word	0x20001408
 800feec:	200014b0 	.word	0x200014b0

0800fef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f103 0208 	add.w	r2, r3, #8
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f04f 32ff 	mov.w	r2, #4294967295
 800ff08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f103 0208 	add.w	r2, r3, #8
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f103 0208 	add.w	r2, r3, #8
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff3e:	bf00      	nop
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b085      	sub	sp, #20
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	689a      	ldr	r2, [r3, #8]
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	683a      	ldr	r2, [r7, #0]
 800ff74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	1c5a      	adds	r2, r3, #1
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
}
 800ff86:	bf00      	nop
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff92:	b480      	push	{r7}
 800ff94:	b085      	sub	sp, #20
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa8:	d103      	bne.n	800ffb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e00c      	b.n	800ffcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	60fb      	str	r3, [r7, #12]
 800ffb8:	e002      	b.n	800ffc0 <vListInsert+0x2e>
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d2f6      	bcs.n	800ffba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	1c5a      	adds	r2, r3, #1
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	601a      	str	r2, [r3, #0]
}
 800fff8:	bf00      	nop
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	6892      	ldr	r2, [r2, #8]
 801001a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	6852      	ldr	r2, [r2, #4]
 8010024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d103      	bne.n	8010038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	689a      	ldr	r2, [r3, #8]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d10b      	bne.n	8010084 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801007e:	bf00      	nop
 8010080:	bf00      	nop
 8010082:	e7fd      	b.n	8010080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010084:	f002 fe50 	bl	8012d28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010090:	68f9      	ldr	r1, [r7, #12]
 8010092:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010094:	fb01 f303 	mul.w	r3, r1, r3
 8010098:	441a      	add	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100b4:	3b01      	subs	r3, #1
 80100b6:	68f9      	ldr	r1, [r7, #12]
 80100b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80100ba:	fb01 f303 	mul.w	r3, r1, r3
 80100be:	441a      	add	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	22ff      	movs	r2, #255	@ 0xff
 80100c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	22ff      	movs	r2, #255	@ 0xff
 80100d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d114      	bne.n	8010104 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	691b      	ldr	r3, [r3, #16]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d01a      	beq.n	8010118 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3310      	adds	r3, #16
 80100e6:	4618      	mov	r0, r3
 80100e8:	f001 fd7c 	bl	8011be4 <xTaskRemoveFromEventList>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d012      	beq.n	8010118 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80100f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010128 <xQueueGenericReset+0xd0>)
 80100f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	e009      	b.n	8010118 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	3310      	adds	r3, #16
 8010108:	4618      	mov	r0, r3
 801010a:	f7ff fef1 	bl	800fef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3324      	adds	r3, #36	@ 0x24
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff feec 	bl	800fef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010118:	f002 fe38 	bl	8012d8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801011c:	2301      	movs	r3, #1
}
 801011e:	4618      	mov	r0, r3
 8010120:	3710      	adds	r7, #16
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	e000ed04 	.word	0xe000ed04

0801012c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801012c:	b580      	push	{r7, lr}
 801012e:	b08e      	sub	sp, #56	@ 0x38
 8010130:	af02      	add	r7, sp, #8
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
 8010138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10b      	bne.n	8010158 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010152:	bf00      	nop
 8010154:	bf00      	nop
 8010156:	e7fd      	b.n	8010154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10b      	bne.n	8010176 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010170:	bf00      	nop
 8010172:	bf00      	nop
 8010174:	e7fd      	b.n	8010172 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d002      	beq.n	8010182 <xQueueGenericCreateStatic+0x56>
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <xQueueGenericCreateStatic+0x5a>
 8010182:	2301      	movs	r3, #1
 8010184:	e000      	b.n	8010188 <xQueueGenericCreateStatic+0x5c>
 8010186:	2300      	movs	r3, #0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d10b      	bne.n	80101a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801018c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	623b      	str	r3, [r7, #32]
}
 801019e:	bf00      	nop
 80101a0:	bf00      	nop
 80101a2:	e7fd      	b.n	80101a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d102      	bne.n	80101b0 <xQueueGenericCreateStatic+0x84>
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d101      	bne.n	80101b4 <xQueueGenericCreateStatic+0x88>
 80101b0:	2301      	movs	r3, #1
 80101b2:	e000      	b.n	80101b6 <xQueueGenericCreateStatic+0x8a>
 80101b4:	2300      	movs	r3, #0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10b      	bne.n	80101d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80101ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	61fb      	str	r3, [r7, #28]
}
 80101cc:	bf00      	nop
 80101ce:	bf00      	nop
 80101d0:	e7fd      	b.n	80101ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80101d2:	2350      	movs	r3, #80	@ 0x50
 80101d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	2b50      	cmp	r3, #80	@ 0x50
 80101da:	d00b      	beq.n	80101f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80101dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101e0:	f383 8811 	msr	BASEPRI, r3
 80101e4:	f3bf 8f6f 	isb	sy
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	61bb      	str	r3, [r7, #24]
}
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	e7fd      	b.n	80101f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80101f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80101fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00d      	beq.n	801021c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010202:	2201      	movs	r2, #1
 8010204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010208:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	4613      	mov	r3, r2
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	68b9      	ldr	r1, [r7, #8]
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f000 f840 	bl	801029c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801021c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801021e:	4618      	mov	r0, r3
 8010220:	3730      	adds	r7, #48	@ 0x30
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010226:	b580      	push	{r7, lr}
 8010228:	b08a      	sub	sp, #40	@ 0x28
 801022a:	af02      	add	r7, sp, #8
 801022c:	60f8      	str	r0, [r7, #12]
 801022e:	60b9      	str	r1, [r7, #8]
 8010230:	4613      	mov	r3, r2
 8010232:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10b      	bne.n	8010252 <xQueueGenericCreate+0x2c>
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	613b      	str	r3, [r7, #16]
}
 801024c:	bf00      	nop
 801024e:	bf00      	nop
 8010250:	e7fd      	b.n	801024e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	fb02 f303 	mul.w	r3, r2, r3
 801025a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	3350      	adds	r3, #80	@ 0x50
 8010260:	4618      	mov	r0, r3
 8010262:	f002 fe83 	bl	8012f6c <pvPortMalloc>
 8010266:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d011      	beq.n	8010292 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	3350      	adds	r3, #80	@ 0x50
 8010276:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010280:	79fa      	ldrb	r2, [r7, #7]
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	9300      	str	r3, [sp, #0]
 8010286:	4613      	mov	r3, r2
 8010288:	697a      	ldr	r2, [r7, #20]
 801028a:	68b9      	ldr	r1, [r7, #8]
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f000 f805 	bl	801029c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010292:	69bb      	ldr	r3, [r7, #24]
	}
 8010294:	4618      	mov	r0, r3
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	607a      	str	r2, [r7, #4]
 80102a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d103      	bne.n	80102b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	e002      	b.n	80102be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80102ca:	2101      	movs	r1, #1
 80102cc:	69b8      	ldr	r0, [r7, #24]
 80102ce:	f7ff fec3 	bl	8010058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	78fa      	ldrb	r2, [r7, #3]
 80102d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80102da:	bf00      	nop
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b082      	sub	sp, #8
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00e      	beq.n	801030e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2200      	movs	r2, #0
 80102fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010302:	2300      	movs	r3, #0
 8010304:	2200      	movs	r2, #0
 8010306:	2100      	movs	r1, #0
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 f911 	bl	8010530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801030e:	bf00      	nop
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010316:	b580      	push	{r7, lr}
 8010318:	b086      	sub	sp, #24
 801031a:	af00      	add	r7, sp, #0
 801031c:	4603      	mov	r3, r0
 801031e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010320:	2301      	movs	r3, #1
 8010322:	617b      	str	r3, [r7, #20]
 8010324:	2300      	movs	r3, #0
 8010326:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010328:	79fb      	ldrb	r3, [r7, #7]
 801032a:	461a      	mov	r2, r3
 801032c:	6939      	ldr	r1, [r7, #16]
 801032e:	6978      	ldr	r0, [r7, #20]
 8010330:	f7ff ff79 	bl	8010226 <xQueueGenericCreate>
 8010334:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff ffd3 	bl	80102e2 <prvInitialiseMutex>

		return xNewQueue;
 801033c:	68fb      	ldr	r3, [r7, #12]
	}
 801033e:	4618      	mov	r0, r3
 8010340:	3718      	adds	r7, #24
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010346:	b580      	push	{r7, lr}
 8010348:	b088      	sub	sp, #32
 801034a:	af02      	add	r7, sp, #8
 801034c:	4603      	mov	r3, r0
 801034e:	6039      	str	r1, [r7, #0]
 8010350:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010352:	2301      	movs	r3, #1
 8010354:	617b      	str	r3, [r7, #20]
 8010356:	2300      	movs	r3, #0
 8010358:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2200      	movs	r2, #0
 8010362:	6939      	ldr	r1, [r7, #16]
 8010364:	6978      	ldr	r0, [r7, #20]
 8010366:	f7ff fee1 	bl	801012c <xQueueGenericCreateStatic>
 801036a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff ffb8 	bl	80102e2 <prvInitialiseMutex>

		return xNewQueue;
 8010372:	68fb      	ldr	r3, [r7, #12]
	}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801037c:	b590      	push	{r4, r7, lr}
 801037e:	b087      	sub	sp, #28
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10b      	bne.n	80103a6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	60fb      	str	r3, [r7, #12]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	689c      	ldr	r4, [r3, #8]
 80103aa:	f001 fde1 	bl	8011f70 <xTaskGetCurrentTaskHandle>
 80103ae:	4603      	mov	r3, r0
 80103b0:	429c      	cmp	r4, r3
 80103b2:	d111      	bne.n	80103d8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	1e5a      	subs	r2, r3, #1
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80103c6:	2300      	movs	r3, #0
 80103c8:	2200      	movs	r2, #0
 80103ca:	2100      	movs	r1, #0
 80103cc:	6938      	ldr	r0, [r7, #16]
 80103ce:	f000 f8af 	bl	8010530 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80103d2:	2301      	movs	r3, #1
 80103d4:	617b      	str	r3, [r7, #20]
 80103d6:	e001      	b.n	80103dc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80103d8:	2300      	movs	r3, #0
 80103da:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80103dc:	697b      	ldr	r3, [r7, #20]
	}
 80103de:	4618      	mov	r0, r3
 80103e0:	371c      	adds	r7, #28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd90      	pop	{r4, r7, pc}

080103e6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80103e6:	b590      	push	{r4, r7, lr}
 80103e8:	b087      	sub	sp, #28
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10b      	bne.n	8010412 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80103fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103fe:	f383 8811 	msr	BASEPRI, r3
 8010402:	f3bf 8f6f 	isb	sy
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	60fb      	str	r3, [r7, #12]
}
 801040c:	bf00      	nop
 801040e:	bf00      	nop
 8010410:	e7fd      	b.n	801040e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	689c      	ldr	r4, [r3, #8]
 8010416:	f001 fdab 	bl	8011f70 <xTaskGetCurrentTaskHandle>
 801041a:	4603      	mov	r3, r0
 801041c:	429c      	cmp	r4, r3
 801041e:	d107      	bne.n	8010430 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801042a:	2301      	movs	r3, #1
 801042c:	617b      	str	r3, [r7, #20]
 801042e:	e00c      	b.n	801044a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	6938      	ldr	r0, [r7, #16]
 8010434:	f000 fb8e 	bl	8010b54 <xQueueSemaphoreTake>
 8010438:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d004      	beq.n	801044a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801044a:	697b      	ldr	r3, [r7, #20]
	}
 801044c:	4618      	mov	r0, r3
 801044e:	371c      	adds	r7, #28
 8010450:	46bd      	mov	sp, r7
 8010452:	bd90      	pop	{r4, r7, pc}

08010454 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010454:	b580      	push	{r7, lr}
 8010456:	b08a      	sub	sp, #40	@ 0x28
 8010458:	af02      	add	r7, sp, #8
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10b      	bne.n	801047e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	61bb      	str	r3, [r7, #24]
}
 8010478:	bf00      	nop
 801047a:	bf00      	nop
 801047c:	e7fd      	b.n	801047a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	429a      	cmp	r2, r3
 8010484:	d90b      	bls.n	801049e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8010486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	617b      	str	r3, [r7, #20]
}
 8010498:	bf00      	nop
 801049a:	bf00      	nop
 801049c:	e7fd      	b.n	801049a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801049e:	2302      	movs	r3, #2
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	2100      	movs	r1, #0
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff fe3f 	bl	801012c <xQueueGenericCreateStatic>
 80104ae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d002      	beq.n	80104bc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80104bc:	69fb      	ldr	r3, [r7, #28]
	}
 80104be:	4618      	mov	r0, r3
 80104c0:	3720      	adds	r7, #32
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b086      	sub	sp, #24
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10b      	bne.n	80104ee <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	613b      	str	r3, [r7, #16]
}
 80104e8:	bf00      	nop
 80104ea:	bf00      	nop
 80104ec:	e7fd      	b.n	80104ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d90b      	bls.n	801050e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80104f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104fa:	f383 8811 	msr	BASEPRI, r3
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f3bf 8f4f 	dsb	sy
 8010506:	60fb      	str	r3, [r7, #12]
}
 8010508:	bf00      	nop
 801050a:	bf00      	nop
 801050c:	e7fd      	b.n	801050a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801050e:	2202      	movs	r2, #2
 8010510:	2100      	movs	r1, #0
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f7ff fe87 	bl	8010226 <xQueueGenericCreate>
 8010518:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010526:	697b      	ldr	r3, [r7, #20]
	}
 8010528:	4618      	mov	r0, r3
 801052a:	3718      	adds	r7, #24
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b08e      	sub	sp, #56	@ 0x38
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801053e:	2300      	movs	r3, #0
 8010540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10b      	bne.n	8010564 <xQueueGenericSend+0x34>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801055e:	bf00      	nop
 8010560:	bf00      	nop
 8010562:	e7fd      	b.n	8010560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d103      	bne.n	8010572 <xQueueGenericSend+0x42>
 801056a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801056e:	2b00      	cmp	r3, #0
 8010570:	d101      	bne.n	8010576 <xQueueGenericSend+0x46>
 8010572:	2301      	movs	r3, #1
 8010574:	e000      	b.n	8010578 <xQueueGenericSend+0x48>
 8010576:	2300      	movs	r3, #0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10b      	bne.n	8010594 <xQueueGenericSend+0x64>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801058e:	bf00      	nop
 8010590:	bf00      	nop
 8010592:	e7fd      	b.n	8010590 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2b02      	cmp	r3, #2
 8010598:	d103      	bne.n	80105a2 <xQueueGenericSend+0x72>
 801059a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801059c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d101      	bne.n	80105a6 <xQueueGenericSend+0x76>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e000      	b.n	80105a8 <xQueueGenericSend+0x78>
 80105a6:	2300      	movs	r3, #0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d10b      	bne.n	80105c4 <xQueueGenericSend+0x94>
	__asm volatile
 80105ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b0:	f383 8811 	msr	BASEPRI, r3
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	623b      	str	r3, [r7, #32]
}
 80105be:	bf00      	nop
 80105c0:	bf00      	nop
 80105c2:	e7fd      	b.n	80105c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105c4:	f001 fce4 	bl	8011f90 <xTaskGetSchedulerState>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d102      	bne.n	80105d4 <xQueueGenericSend+0xa4>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d101      	bne.n	80105d8 <xQueueGenericSend+0xa8>
 80105d4:	2301      	movs	r3, #1
 80105d6:	e000      	b.n	80105da <xQueueGenericSend+0xaa>
 80105d8:	2300      	movs	r3, #0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10b      	bne.n	80105f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	61fb      	str	r3, [r7, #28]
}
 80105f0:	bf00      	nop
 80105f2:	bf00      	nop
 80105f4:	e7fd      	b.n	80105f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105f6:	f002 fb97 	bl	8012d28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010602:	429a      	cmp	r2, r3
 8010604:	d302      	bcc.n	801060c <xQueueGenericSend+0xdc>
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d129      	bne.n	8010660 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	68b9      	ldr	r1, [r7, #8]
 8010610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010612:	f000 fcab 	bl	8010f6c <prvCopyDataToQueue>
 8010616:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801061a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801061c:	2b00      	cmp	r3, #0
 801061e:	d010      	beq.n	8010642 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010622:	3324      	adds	r3, #36	@ 0x24
 8010624:	4618      	mov	r0, r3
 8010626:	f001 fadd 	bl	8011be4 <xTaskRemoveFromEventList>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d013      	beq.n	8010658 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010630:	4b3f      	ldr	r3, [pc, #252]	@ (8010730 <xQueueGenericSend+0x200>)
 8010632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010636:	601a      	str	r2, [r3, #0]
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	e00a      	b.n	8010658 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010644:	2b00      	cmp	r3, #0
 8010646:	d007      	beq.n	8010658 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010648:	4b39      	ldr	r3, [pc, #228]	@ (8010730 <xQueueGenericSend+0x200>)
 801064a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801064e:	601a      	str	r2, [r3, #0]
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010658:	f002 fb98 	bl	8012d8c <vPortExitCritical>
				return pdPASS;
 801065c:	2301      	movs	r3, #1
 801065e:	e063      	b.n	8010728 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d103      	bne.n	801066e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010666:	f002 fb91 	bl	8012d8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801066a:	2300      	movs	r3, #0
 801066c:	e05c      	b.n	8010728 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801066e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010674:	f107 0314 	add.w	r3, r7, #20
 8010678:	4618      	mov	r0, r3
 801067a:	f001 fb17 	bl	8011cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801067e:	2301      	movs	r3, #1
 8010680:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010682:	f002 fb83 	bl	8012d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010686:	f001 f86d 	bl	8011764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801068a:	f002 fb4d 	bl	8012d28 <vPortEnterCritical>
 801068e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010694:	b25b      	sxtb	r3, r3
 8010696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069a:	d103      	bne.n	80106a4 <xQueueGenericSend+0x174>
 801069c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801069e:	2200      	movs	r2, #0
 80106a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106aa:	b25b      	sxtb	r3, r3
 80106ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b0:	d103      	bne.n	80106ba <xQueueGenericSend+0x18a>
 80106b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106b4:	2200      	movs	r2, #0
 80106b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106ba:	f002 fb67 	bl	8012d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106be:	1d3a      	adds	r2, r7, #4
 80106c0:	f107 0314 	add.w	r3, r7, #20
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f001 fb06 	bl	8011cd8 <xTaskCheckForTimeOut>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d124      	bne.n	801071c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80106d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106d4:	f000 fd42 	bl	801115c <prvIsQueueFull>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d018      	beq.n	8010710 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80106de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e0:	3310      	adds	r3, #16
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	4611      	mov	r1, r2
 80106e6:	4618      	mov	r0, r3
 80106e8:	f001 fa2a 	bl	8011b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80106ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106ee:	f000 fccd 	bl	801108c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80106f2:	f001 f845 	bl	8011780 <xTaskResumeAll>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f47f af7c 	bne.w	80105f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80106fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010730 <xQueueGenericSend+0x200>)
 8010700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	e772      	b.n	80105f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010712:	f000 fcbb 	bl	801108c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010716:	f001 f833 	bl	8011780 <xTaskResumeAll>
 801071a:	e76c      	b.n	80105f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801071c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801071e:	f000 fcb5 	bl	801108c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010722:	f001 f82d 	bl	8011780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010728:	4618      	mov	r0, r3
 801072a:	3738      	adds	r7, #56	@ 0x38
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	e000ed04 	.word	0xe000ed04

08010734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b090      	sub	sp, #64	@ 0x40
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010748:	2b00      	cmp	r3, #0
 801074a:	d10b      	bne.n	8010764 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801074c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801075e:	bf00      	nop
 8010760:	bf00      	nop
 8010762:	e7fd      	b.n	8010760 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d103      	bne.n	8010772 <xQueueGenericSendFromISR+0x3e>
 801076a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <xQueueGenericSendFromISR+0x42>
 8010772:	2301      	movs	r3, #1
 8010774:	e000      	b.n	8010778 <xQueueGenericSendFromISR+0x44>
 8010776:	2300      	movs	r3, #0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10b      	bne.n	8010794 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010780:	f383 8811 	msr	BASEPRI, r3
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801078e:	bf00      	nop
 8010790:	bf00      	nop
 8010792:	e7fd      	b.n	8010790 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b02      	cmp	r3, #2
 8010798:	d103      	bne.n	80107a2 <xQueueGenericSendFromISR+0x6e>
 801079a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d101      	bne.n	80107a6 <xQueueGenericSendFromISR+0x72>
 80107a2:	2301      	movs	r3, #1
 80107a4:	e000      	b.n	80107a8 <xQueueGenericSendFromISR+0x74>
 80107a6:	2300      	movs	r3, #0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10b      	bne.n	80107c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	623b      	str	r3, [r7, #32]
}
 80107be:	bf00      	nop
 80107c0:	bf00      	nop
 80107c2:	e7fd      	b.n	80107c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107c4:	f002 fb90 	bl	8012ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80107c8:	f3ef 8211 	mrs	r2, BASEPRI
 80107cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	61fa      	str	r2, [r7, #28]
 80107de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80107e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d302      	bcc.n	80107f6 <xQueueGenericSendFromISR+0xc2>
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d12f      	bne.n	8010856 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80107f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80107fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010804:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010806:	683a      	ldr	r2, [r7, #0]
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801080c:	f000 fbae 	bl	8010f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010810:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010818:	d112      	bne.n	8010840 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801081a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801081e:	2b00      	cmp	r3, #0
 8010820:	d016      	beq.n	8010850 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010824:	3324      	adds	r3, #36	@ 0x24
 8010826:	4618      	mov	r0, r3
 8010828:	f001 f9dc 	bl	8011be4 <xTaskRemoveFromEventList>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00e      	beq.n	8010850 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00b      	beq.n	8010850 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2201      	movs	r2, #1
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	e007      	b.n	8010850 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010844:	3301      	adds	r3, #1
 8010846:	b2db      	uxtb	r3, r3
 8010848:	b25a      	sxtb	r2, r3
 801084a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801084c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010850:	2301      	movs	r3, #1
 8010852:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010854:	e001      	b.n	801085a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010856:	2300      	movs	r3, #0
 8010858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801085a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801085c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010864:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010868:	4618      	mov	r0, r3
 801086a:	3740      	adds	r7, #64	@ 0x40
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b08e      	sub	sp, #56	@ 0x38
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010880:	2b00      	cmp	r3, #0
 8010882:	d10b      	bne.n	801089c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010888:	f383 8811 	msr	BASEPRI, r3
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	623b      	str	r3, [r7, #32]
}
 8010896:	bf00      	nop
 8010898:	bf00      	nop
 801089a:	e7fd      	b.n	8010898 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801089c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00b      	beq.n	80108bc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	61fb      	str	r3, [r7, #28]
}
 80108b6:	bf00      	nop
 80108b8:	bf00      	nop
 80108ba:	e7fd      	b.n	80108b8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80108bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d103      	bne.n	80108cc <xQueueGiveFromISR+0x5c>
 80108c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d101      	bne.n	80108d0 <xQueueGiveFromISR+0x60>
 80108cc:	2301      	movs	r3, #1
 80108ce:	e000      	b.n	80108d2 <xQueueGiveFromISR+0x62>
 80108d0:	2300      	movs	r3, #0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10b      	bne.n	80108ee <xQueueGiveFromISR+0x7e>
	__asm volatile
 80108d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	61bb      	str	r3, [r7, #24]
}
 80108e8:	bf00      	nop
 80108ea:	bf00      	nop
 80108ec:	e7fd      	b.n	80108ea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108ee:	f002 fafb 	bl	8012ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80108f2:	f3ef 8211 	mrs	r2, BASEPRI
 80108f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	617a      	str	r2, [r7, #20]
 8010908:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801090a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010912:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801091a:	429a      	cmp	r2, r3
 801091c:	d22b      	bcs.n	8010976 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801091e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092a:	1c5a      	adds	r2, r3, #1
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010930:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010938:	d112      	bne.n	8010960 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	d016      	beq.n	8010970 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010944:	3324      	adds	r3, #36	@ 0x24
 8010946:	4618      	mov	r0, r3
 8010948:	f001 f94c 	bl	8011be4 <xTaskRemoveFromEventList>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00e      	beq.n	8010970 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00b      	beq.n	8010970 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	2201      	movs	r2, #1
 801095c:	601a      	str	r2, [r3, #0]
 801095e:	e007      	b.n	8010970 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010964:	3301      	adds	r3, #1
 8010966:	b2db      	uxtb	r3, r3
 8010968:	b25a      	sxtb	r2, r3
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010970:	2301      	movs	r3, #1
 8010972:	637b      	str	r3, [r7, #52]	@ 0x34
 8010974:	e001      	b.n	801097a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010976:	2300      	movs	r3, #0
 8010978:	637b      	str	r3, [r7, #52]	@ 0x34
 801097a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801097c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f383 8811 	msr	BASEPRI, r3
}
 8010984:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010988:	4618      	mov	r0, r3
 801098a:	3738      	adds	r7, #56	@ 0x38
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08c      	sub	sp, #48	@ 0x30
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801099c:	2300      	movs	r3, #0
 801099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80109a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d10b      	bne.n	80109c2 <xQueueReceive+0x32>
	__asm volatile
 80109aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ae:	f383 8811 	msr	BASEPRI, r3
 80109b2:	f3bf 8f6f 	isb	sy
 80109b6:	f3bf 8f4f 	dsb	sy
 80109ba:	623b      	str	r3, [r7, #32]
}
 80109bc:	bf00      	nop
 80109be:	bf00      	nop
 80109c0:	e7fd      	b.n	80109be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d103      	bne.n	80109d0 <xQueueReceive+0x40>
 80109c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <xQueueReceive+0x44>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e000      	b.n	80109d6 <xQueueReceive+0x46>
 80109d4:	2300      	movs	r3, #0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10b      	bne.n	80109f2 <xQueueReceive+0x62>
	__asm volatile
 80109da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109de:	f383 8811 	msr	BASEPRI, r3
 80109e2:	f3bf 8f6f 	isb	sy
 80109e6:	f3bf 8f4f 	dsb	sy
 80109ea:	61fb      	str	r3, [r7, #28]
}
 80109ec:	bf00      	nop
 80109ee:	bf00      	nop
 80109f0:	e7fd      	b.n	80109ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109f2:	f001 facd 	bl	8011f90 <xTaskGetSchedulerState>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d102      	bne.n	8010a02 <xQueueReceive+0x72>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <xQueueReceive+0x76>
 8010a02:	2301      	movs	r3, #1
 8010a04:	e000      	b.n	8010a08 <xQueueReceive+0x78>
 8010a06:	2300      	movs	r3, #0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10b      	bne.n	8010a24 <xQueueReceive+0x94>
	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	61bb      	str	r3, [r7, #24]
}
 8010a1e:	bf00      	nop
 8010a20:	bf00      	nop
 8010a22:	e7fd      	b.n	8010a20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a24:	f002 f980 	bl	8012d28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01f      	beq.n	8010a74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010a34:	68b9      	ldr	r1, [r7, #8]
 8010a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a38:	f000 fb02 	bl	8011040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3e:	1e5a      	subs	r2, r3, #1
 8010a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a46:	691b      	ldr	r3, [r3, #16]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00f      	beq.n	8010a6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a4e:	3310      	adds	r3, #16
 8010a50:	4618      	mov	r0, r3
 8010a52:	f001 f8c7 	bl	8011be4 <xTaskRemoveFromEventList>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d007      	beq.n	8010a6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8010b50 <xQueueReceive+0x1c0>)
 8010a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	f3bf 8f4f 	dsb	sy
 8010a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010a6c:	f002 f98e 	bl	8012d8c <vPortExitCritical>
				return pdPASS;
 8010a70:	2301      	movs	r3, #1
 8010a72:	e069      	b.n	8010b48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d103      	bne.n	8010a82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a7a:	f002 f987 	bl	8012d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	e062      	b.n	8010b48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d106      	bne.n	8010a96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a88:	f107 0310 	add.w	r3, r7, #16
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f001 f90d 	bl	8011cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a92:	2301      	movs	r3, #1
 8010a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a96:	f002 f979 	bl	8012d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a9a:	f000 fe63 	bl	8011764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a9e:	f002 f943 	bl	8012d28 <vPortEnterCritical>
 8010aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010aa8:	b25b      	sxtb	r3, r3
 8010aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aae:	d103      	bne.n	8010ab8 <xQueueReceive+0x128>
 8010ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010abe:	b25b      	sxtb	r3, r3
 8010ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac4:	d103      	bne.n	8010ace <xQueueReceive+0x13e>
 8010ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010ace:	f002 f95d 	bl	8012d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ad2:	1d3a      	adds	r2, r7, #4
 8010ad4:	f107 0310 	add.w	r3, r7, #16
 8010ad8:	4611      	mov	r1, r2
 8010ada:	4618      	mov	r0, r3
 8010adc:	f001 f8fc 	bl	8011cd8 <xTaskCheckForTimeOut>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d123      	bne.n	8010b2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ae8:	f000 fb22 	bl	8011130 <prvIsQueueEmpty>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d017      	beq.n	8010b22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010af4:	3324      	adds	r3, #36	@ 0x24
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	4611      	mov	r1, r2
 8010afa:	4618      	mov	r0, r3
 8010afc:	f001 f820 	bl	8011b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b02:	f000 fac3 	bl	801108c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010b06:	f000 fe3b 	bl	8011780 <xTaskResumeAll>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d189      	bne.n	8010a24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010b10:	4b0f      	ldr	r3, [pc, #60]	@ (8010b50 <xQueueReceive+0x1c0>)
 8010b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	e780      	b.n	8010a24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b24:	f000 fab2 	bl	801108c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b28:	f000 fe2a 	bl	8011780 <xTaskResumeAll>
 8010b2c:	e77a      	b.n	8010a24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b30:	f000 faac 	bl	801108c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b34:	f000 fe24 	bl	8011780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b3a:	f000 faf9 	bl	8011130 <prvIsQueueEmpty>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	f43f af6f 	beq.w	8010a24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3730      	adds	r7, #48	@ 0x30
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	e000ed04 	.word	0xe000ed04

08010b54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b08e      	sub	sp, #56	@ 0x38
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010b66:	2300      	movs	r3, #0
 8010b68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10b      	bne.n	8010b88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b74:	f383 8811 	msr	BASEPRI, r3
 8010b78:	f3bf 8f6f 	isb	sy
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	623b      	str	r3, [r7, #32]
}
 8010b82:	bf00      	nop
 8010b84:	bf00      	nop
 8010b86:	e7fd      	b.n	8010b84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00b      	beq.n	8010ba8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	61fb      	str	r3, [r7, #28]
}
 8010ba2:	bf00      	nop
 8010ba4:	bf00      	nop
 8010ba6:	e7fd      	b.n	8010ba4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ba8:	f001 f9f2 	bl	8011f90 <xTaskGetSchedulerState>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <xQueueSemaphoreTake+0x64>
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <xQueueSemaphoreTake+0x68>
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e000      	b.n	8010bbe <xQueueSemaphoreTake+0x6a>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10b      	bne.n	8010bda <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	61bb      	str	r3, [r7, #24]
}
 8010bd4:	bf00      	nop
 8010bd6:	bf00      	nop
 8010bd8:	e7fd      	b.n	8010bd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010bda:	f002 f8a5 	bl	8012d28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010be2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d024      	beq.n	8010c34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bec:	1e5a      	subs	r2, r3, #1
 8010bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d104      	bne.n	8010c04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010bfa:	f001 fb43 	bl	8012284 <pvTaskIncrementMutexHeldCount>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c06:	691b      	ldr	r3, [r3, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00f      	beq.n	8010c2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0e:	3310      	adds	r3, #16
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 ffe7 	bl	8011be4 <xTaskRemoveFromEventList>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d007      	beq.n	8010c2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010c1c:	4b54      	ldr	r3, [pc, #336]	@ (8010d70 <xQueueSemaphoreTake+0x21c>)
 8010c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010c2c:	f002 f8ae 	bl	8012d8c <vPortExitCritical>
				return pdPASS;
 8010c30:	2301      	movs	r3, #1
 8010c32:	e098      	b.n	8010d66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d112      	bne.n	8010c60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d00b      	beq.n	8010c58 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	617b      	str	r3, [r7, #20]
}
 8010c52:	bf00      	nop
 8010c54:	bf00      	nop
 8010c56:	e7fd      	b.n	8010c54 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010c58:	f002 f898 	bl	8012d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e082      	b.n	8010d66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d106      	bne.n	8010c74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c66:	f107 030c 	add.w	r3, r7, #12
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f001 f81e 	bl	8011cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c70:	2301      	movs	r3, #1
 8010c72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c74:	f002 f88a 	bl	8012d8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c78:	f000 fd74 	bl	8011764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c7c:	f002 f854 	bl	8012d28 <vPortEnterCritical>
 8010c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c86:	b25b      	sxtb	r3, r3
 8010c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8c:	d103      	bne.n	8010c96 <xQueueSemaphoreTake+0x142>
 8010c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c9c:	b25b      	sxtb	r3, r3
 8010c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca2:	d103      	bne.n	8010cac <xQueueSemaphoreTake+0x158>
 8010ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cac:	f002 f86e 	bl	8012d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010cb0:	463a      	mov	r2, r7
 8010cb2:	f107 030c 	add.w	r3, r7, #12
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f001 f80d 	bl	8011cd8 <xTaskCheckForTimeOut>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d132      	bne.n	8010d2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cc6:	f000 fa33 	bl	8011130 <prvIsQueueEmpty>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d026      	beq.n	8010d1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d109      	bne.n	8010cec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010cd8:	f002 f826 	bl	8012d28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cde:	689b      	ldr	r3, [r3, #8]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f001 f973 	bl	8011fcc <xTaskPriorityInherit>
 8010ce6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010ce8:	f002 f850 	bl	8012d8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cee:	3324      	adds	r3, #36	@ 0x24
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	4611      	mov	r1, r2
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f000 ff23 	bl	8011b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010cfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cfc:	f000 f9c6 	bl	801108c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d00:	f000 fd3e 	bl	8011780 <xTaskResumeAll>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f47f af67 	bne.w	8010bda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010d0c:	4b18      	ldr	r3, [pc, #96]	@ (8010d70 <xQueueSemaphoreTake+0x21c>)
 8010d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	e75d      	b.n	8010bda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010d1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d20:	f000 f9b4 	bl	801108c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d24:	f000 fd2c 	bl	8011780 <xTaskResumeAll>
 8010d28:	e757      	b.n	8010bda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d2c:	f000 f9ae 	bl	801108c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d30:	f000 fd26 	bl	8011780 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d36:	f000 f9fb 	bl	8011130 <prvIsQueueEmpty>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f43f af4c 	beq.w	8010bda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00d      	beq.n	8010d64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010d48:	f001 ffee 	bl	8012d28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010d4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d4e:	f000 f8f5 	bl	8010f3c <prvGetDisinheritPriorityAfterTimeout>
 8010d52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f001 fa0e 	bl	801217c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010d60:	f002 f814 	bl	8012d8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3738      	adds	r7, #56	@ 0x38
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	e000ed04 	.word	0xe000ed04

08010d74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b08e      	sub	sp, #56	@ 0x38
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10b      	bne.n	8010da2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	f3bf 8f6f 	isb	sy
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	623b      	str	r3, [r7, #32]
}
 8010d9c:	bf00      	nop
 8010d9e:	bf00      	nop
 8010da0:	e7fd      	b.n	8010d9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d103      	bne.n	8010db0 <xQueueReceiveFromISR+0x3c>
 8010da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d101      	bne.n	8010db4 <xQueueReceiveFromISR+0x40>
 8010db0:	2301      	movs	r3, #1
 8010db2:	e000      	b.n	8010db6 <xQueueReceiveFromISR+0x42>
 8010db4:	2300      	movs	r3, #0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10b      	bne.n	8010dd2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	61fb      	str	r3, [r7, #28]
}
 8010dcc:	bf00      	nop
 8010dce:	bf00      	nop
 8010dd0:	e7fd      	b.n	8010dce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dd2:	f002 f889 	bl	8012ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8010dd6:	f3ef 8211 	mrs	r2, BASEPRI
 8010dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dde:	f383 8811 	msr	BASEPRI, r3
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	f3bf 8f4f 	dsb	sy
 8010dea:	61ba      	str	r2, [r7, #24]
 8010dec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010dee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010df6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d02f      	beq.n	8010e5e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e08:	68b9      	ldr	r1, [r7, #8]
 8010e0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e0c:	f000 f918 	bl	8011040 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e12:	1e5a      	subs	r2, r3, #1
 8010e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010e18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e20:	d112      	bne.n	8010e48 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d016      	beq.n	8010e58 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2c:	3310      	adds	r3, #16
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f000 fed8 	bl	8011be4 <xTaskRemoveFromEventList>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00e      	beq.n	8010e58 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00b      	beq.n	8010e58 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2201      	movs	r2, #1
 8010e44:	601a      	str	r2, [r3, #0]
 8010e46:	e007      	b.n	8010e58 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	b25a      	sxtb	r2, r3
 8010e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e5c:	e001      	b.n	8010e62 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f383 8811 	msr	BASEPRI, r3
}
 8010e6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3738      	adds	r7, #56	@ 0x38
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10b      	bne.n	8010e9e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8010e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8a:	f383 8811 	msr	BASEPRI, r3
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f3bf 8f4f 	dsb	sy
 8010e96:	60bb      	str	r3, [r7, #8]
}
 8010e98:	bf00      	nop
 8010e9a:	bf00      	nop
 8010e9c:	e7fd      	b.n	8010e9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010e9e:	f001 ff43 	bl	8012d28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ea6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010ea8:	f001 ff70 	bl	8012d8c <vPortExitCritical>

	return uxReturn;
 8010eac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b087      	sub	sp, #28
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d10b      	bne.n	8010ee0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8010ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	60fb      	str	r3, [r7, #12]
}
 8010eda:	bf00      	nop
 8010edc:	bf00      	nop
 8010ede:	e7fd      	b.n	8010edc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010ee6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010ee8:	4618      	mov	r0, r3
 8010eea:	371c      	adds	r7, #28
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d10b      	bne.n	8010f1e <vQueueDelete+0x2a>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	60bb      	str	r3, [r7, #8]
}
 8010f18:	bf00      	nop
 8010f1a:	bf00      	nop
 8010f1c:	e7fd      	b.n	8010f1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f1e:	68f8      	ldr	r0, [r7, #12]
 8010f20:	f000 f95e 	bl	80111e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d102      	bne.n	8010f34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f002 f8ea 	bl	8013108 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010f34:	bf00      	nop
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d006      	beq.n	8010f5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8010f56:	60fb      	str	r3, [r7, #12]
 8010f58:	e001      	b.n	8010f5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
	}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3714      	adds	r7, #20
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr

08010f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b086      	sub	sp, #24
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10d      	bne.n	8010fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d14d      	bne.n	801102e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f001 f880 	bl	801209c <xTaskPriorityDisinherit>
 8010f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	609a      	str	r2, [r3, #8]
 8010fa4:	e043      	b.n	801102e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d119      	bne.n	8010fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	6858      	ldr	r0, [r3, #4]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	f002 fca5 	bl	8013906 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685a      	ldr	r2, [r3, #4]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fc4:	441a      	add	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	685a      	ldr	r2, [r3, #4]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	689b      	ldr	r3, [r3, #8]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d32b      	bcc.n	801102e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	605a      	str	r2, [r3, #4]
 8010fde:	e026      	b.n	801102e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	68d8      	ldr	r0, [r3, #12]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fe8:	461a      	mov	r2, r3
 8010fea:	68b9      	ldr	r1, [r7, #8]
 8010fec:	f002 fc8b 	bl	8013906 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	68da      	ldr	r2, [r3, #12]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ff8:	425b      	negs	r3, r3
 8010ffa:	441a      	add	r2, r3
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	68da      	ldr	r2, [r3, #12]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	429a      	cmp	r2, r3
 801100a:	d207      	bcs.n	801101c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	689a      	ldr	r2, [r3, #8]
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011014:	425b      	negs	r3, r3
 8011016:	441a      	add	r2, r3
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2b02      	cmp	r3, #2
 8011020:	d105      	bne.n	801102e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	3b01      	subs	r3, #1
 801102c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	1c5a      	adds	r2, r3, #1
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011036:	697b      	ldr	r3, [r7, #20]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3718      	adds	r7, #24
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801104e:	2b00      	cmp	r3, #0
 8011050:	d018      	beq.n	8011084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	68da      	ldr	r2, [r3, #12]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801105a:	441a      	add	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68da      	ldr	r2, [r3, #12]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	689b      	ldr	r3, [r3, #8]
 8011068:	429a      	cmp	r2, r3
 801106a:	d303      	bcc.n	8011074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	68d9      	ldr	r1, [r3, #12]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801107c:	461a      	mov	r2, r3
 801107e:	6838      	ldr	r0, [r7, #0]
 8011080:	f002 fc41 	bl	8013906 <memcpy>
	}
}
 8011084:	bf00      	nop
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011094:	f001 fe48 	bl	8012d28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801109e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110a0:	e011      	b.n	80110c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d012      	beq.n	80110d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	3324      	adds	r3, #36	@ 0x24
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fd98 	bl	8011be4 <xTaskRemoveFromEventList>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80110ba:	f000 fe71 	bl	8011da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80110be:	7bfb      	ldrb	r3, [r7, #15]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	dce9      	bgt.n	80110a2 <prvUnlockQueue+0x16>
 80110ce:	e000      	b.n	80110d2 <prvUnlockQueue+0x46>
					break;
 80110d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	22ff      	movs	r2, #255	@ 0xff
 80110d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80110da:	f001 fe57 	bl	8012d8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80110de:	f001 fe23 	bl	8012d28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80110e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110ea:	e011      	b.n	8011110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d012      	beq.n	801111a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3310      	adds	r3, #16
 80110f8:	4618      	mov	r0, r3
 80110fa:	f000 fd73 	bl	8011be4 <xTaskRemoveFromEventList>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011104:	f000 fe4c 	bl	8011da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011108:	7bbb      	ldrb	r3, [r7, #14]
 801110a:	3b01      	subs	r3, #1
 801110c:	b2db      	uxtb	r3, r3
 801110e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dce9      	bgt.n	80110ec <prvUnlockQueue+0x60>
 8011118:	e000      	b.n	801111c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801111a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	22ff      	movs	r2, #255	@ 0xff
 8011120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011124:	f001 fe32 	bl	8012d8c <vPortExitCritical>
}
 8011128:	bf00      	nop
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011138:	f001 fdf6 	bl	8012d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011140:	2b00      	cmp	r3, #0
 8011142:	d102      	bne.n	801114a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011144:	2301      	movs	r3, #1
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	e001      	b.n	801114e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801114e:	f001 fe1d 	bl	8012d8c <vPortExitCritical>

	return xReturn;
 8011152:	68fb      	ldr	r3, [r7, #12]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011164:	f001 fde0 	bl	8012d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011170:	429a      	cmp	r2, r3
 8011172:	d102      	bne.n	801117a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011174:	2301      	movs	r3, #1
 8011176:	60fb      	str	r3, [r7, #12]
 8011178:	e001      	b.n	801117e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801117a:	2300      	movs	r3, #0
 801117c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801117e:	f001 fe05 	bl	8012d8c <vPortExitCritical>

	return xReturn;
 8011182:	68fb      	ldr	r3, [r7, #12]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801118c:	b480      	push	{r7}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011196:	2300      	movs	r3, #0
 8011198:	60fb      	str	r3, [r7, #12]
 801119a:	e014      	b.n	80111c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801119c:	4a0f      	ldr	r2, [pc, #60]	@ (80111dc <vQueueAddToRegistry+0x50>)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d10b      	bne.n	80111c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80111a8:	490c      	ldr	r1, [pc, #48]	@ (80111dc <vQueueAddToRegistry+0x50>)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80111b2:	4a0a      	ldr	r2, [pc, #40]	@ (80111dc <vQueueAddToRegistry+0x50>)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	4413      	add	r3, r2
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80111be:	e006      	b.n	80111ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	3301      	adds	r3, #1
 80111c4:	60fb      	str	r3, [r7, #12]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2b07      	cmp	r3, #7
 80111ca:	d9e7      	bls.n	801119c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80111cc:	bf00      	nop
 80111ce:	bf00      	nop
 80111d0:	3714      	adds	r7, #20
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	200018b0 	.word	0x200018b0

080111e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111e8:	2300      	movs	r3, #0
 80111ea:	60fb      	str	r3, [r7, #12]
 80111ec:	e016      	b.n	801121c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80111ee:	4a10      	ldr	r2, [pc, #64]	@ (8011230 <vQueueUnregisterQueue+0x50>)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	4413      	add	r3, r2
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d10b      	bne.n	8011216 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80111fe:	4a0c      	ldr	r2, [pc, #48]	@ (8011230 <vQueueUnregisterQueue+0x50>)
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2100      	movs	r1, #0
 8011204:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011208:	4a09      	ldr	r2, [pc, #36]	@ (8011230 <vQueueUnregisterQueue+0x50>)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	4413      	add	r3, r2
 8011210:	2200      	movs	r2, #0
 8011212:	605a      	str	r2, [r3, #4]
				break;
 8011214:	e006      	b.n	8011224 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	3301      	adds	r3, #1
 801121a:	60fb      	str	r3, [r7, #12]
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2b07      	cmp	r3, #7
 8011220:	d9e5      	bls.n	80111ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011222:	bf00      	nop
 8011224:	bf00      	nop
 8011226:	3714      	adds	r7, #20
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr
 8011230:	200018b0 	.word	0x200018b0

08011234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011244:	f001 fd70 	bl	8012d28 <vPortEnterCritical>
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801124e:	b25b      	sxtb	r3, r3
 8011250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011254:	d103      	bne.n	801125e <vQueueWaitForMessageRestricted+0x2a>
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011264:	b25b      	sxtb	r3, r3
 8011266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126a:	d103      	bne.n	8011274 <vQueueWaitForMessageRestricted+0x40>
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011274:	f001 fd8a 	bl	8012d8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801127c:	2b00      	cmp	r3, #0
 801127e:	d106      	bne.n	801128e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	3324      	adds	r3, #36	@ 0x24
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	68b9      	ldr	r1, [r7, #8]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 fc7f 	bl	8011b8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801128e:	6978      	ldr	r0, [r7, #20]
 8011290:	f7ff fefc 	bl	801108c <prvUnlockQueue>
	}
 8011294:	bf00      	nop
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801129c:	b580      	push	{r7, lr}
 801129e:	b08e      	sub	sp, #56	@ 0x38
 80112a0:	af04      	add	r7, sp, #16
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	607a      	str	r2, [r7, #4]
 80112a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80112aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10b      	bne.n	80112c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80112b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	623b      	str	r3, [r7, #32]
}
 80112c2:	bf00      	nop
 80112c4:	bf00      	nop
 80112c6:	e7fd      	b.n	80112c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80112c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d10b      	bne.n	80112e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80112ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	61fb      	str	r3, [r7, #28]
}
 80112e0:	bf00      	nop
 80112e2:	bf00      	nop
 80112e4:	e7fd      	b.n	80112e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80112e6:	23a8      	movs	r3, #168	@ 0xa8
 80112e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80112ee:	d00b      	beq.n	8011308 <xTaskCreateStatic+0x6c>
	__asm volatile
 80112f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	61bb      	str	r3, [r7, #24]
}
 8011302:	bf00      	nop
 8011304:	bf00      	nop
 8011306:	e7fd      	b.n	8011304 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801130a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801130c:	2b00      	cmp	r3, #0
 801130e:	d01e      	beq.n	801134e <xTaskCreateStatic+0xb2>
 8011310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011312:	2b00      	cmp	r3, #0
 8011314:	d01b      	beq.n	801134e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011318:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801131c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801131e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011322:	2202      	movs	r2, #2
 8011324:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011328:	2300      	movs	r3, #0
 801132a:	9303      	str	r3, [sp, #12]
 801132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801132e:	9302      	str	r3, [sp, #8]
 8011330:	f107 0314 	add.w	r3, r7, #20
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	68b9      	ldr	r1, [r7, #8]
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f000 f851 	bl	80113e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011348:	f000 f8f6 	bl	8011538 <prvAddNewTaskToReadyList>
 801134c:	e001      	b.n	8011352 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801134e:	2300      	movs	r3, #0
 8011350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011352:	697b      	ldr	r3, [r7, #20]
	}
 8011354:	4618      	mov	r0, r3
 8011356:	3728      	adds	r7, #40	@ 0x28
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801135c:	b580      	push	{r7, lr}
 801135e:	b08c      	sub	sp, #48	@ 0x30
 8011360:	af04      	add	r7, sp, #16
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	603b      	str	r3, [r7, #0]
 8011368:	4613      	mov	r3, r2
 801136a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801136c:	88fb      	ldrh	r3, [r7, #6]
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4618      	mov	r0, r3
 8011372:	f001 fdfb 	bl	8012f6c <pvPortMalloc>
 8011376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00e      	beq.n	801139c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801137e:	20a8      	movs	r0, #168	@ 0xa8
 8011380:	f001 fdf4 	bl	8012f6c <pvPortMalloc>
 8011384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d003      	beq.n	8011394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	631a      	str	r2, [r3, #48]	@ 0x30
 8011392:	e005      	b.n	80113a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011394:	6978      	ldr	r0, [r7, #20]
 8011396:	f001 feb7 	bl	8013108 <vPortFree>
 801139a:	e001      	b.n	80113a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801139c:	2300      	movs	r3, #0
 801139e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d017      	beq.n	80113d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80113ae:	88fa      	ldrh	r2, [r7, #6]
 80113b0:	2300      	movs	r3, #0
 80113b2:	9303      	str	r3, [sp, #12]
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	9302      	str	r3, [sp, #8]
 80113b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ba:	9301      	str	r3, [sp, #4]
 80113bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113be:	9300      	str	r3, [sp, #0]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	68b9      	ldr	r1, [r7, #8]
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f000 f80f 	bl	80113e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113ca:	69f8      	ldr	r0, [r7, #28]
 80113cc:	f000 f8b4 	bl	8011538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80113d0:	2301      	movs	r3, #1
 80113d2:	61bb      	str	r3, [r7, #24]
 80113d4:	e002      	b.n	80113dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80113d6:	f04f 33ff 	mov.w	r3, #4294967295
 80113da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80113dc:	69bb      	ldr	r3, [r7, #24]
	}
 80113de:	4618      	mov	r0, r3
 80113e0:	3720      	adds	r7, #32
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
	...

080113e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80113f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	009b      	lsls	r3, r3, #2
 80113fe:	461a      	mov	r2, r3
 8011400:	21a5      	movs	r1, #165	@ 0xa5
 8011402:	f002 f9af 	bl	8013764 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011410:	3b01      	subs	r3, #1
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	f023 0307 	bic.w	r3, r3, #7
 801141e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	f003 0307 	and.w	r3, r3, #7
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00b      	beq.n	8011442 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801142a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801142e:	f383 8811 	msr	BASEPRI, r3
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	f3bf 8f4f 	dsb	sy
 801143a:	617b      	str	r3, [r7, #20]
}
 801143c:	bf00      	nop
 801143e:	bf00      	nop
 8011440:	e7fd      	b.n	801143e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d01f      	beq.n	8011488 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011448:	2300      	movs	r3, #0
 801144a:	61fb      	str	r3, [r7, #28]
 801144c:	e012      	b.n	8011474 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	4413      	add	r3, r2
 8011454:	7819      	ldrb	r1, [r3, #0]
 8011456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	4413      	add	r3, r2
 801145c:	3334      	adds	r3, #52	@ 0x34
 801145e:	460a      	mov	r2, r1
 8011460:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	4413      	add	r3, r2
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d006      	beq.n	801147c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	3301      	adds	r3, #1
 8011472:	61fb      	str	r3, [r7, #28]
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	2b0f      	cmp	r3, #15
 8011478:	d9e9      	bls.n	801144e <prvInitialiseNewTask+0x66>
 801147a:	e000      	b.n	801147e <prvInitialiseNewTask+0x96>
			{
				break;
 801147c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011480:	2200      	movs	r2, #0
 8011482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011486:	e003      	b.n	8011490 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801148a:	2200      	movs	r2, #0
 801148c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011492:	2b37      	cmp	r3, #55	@ 0x37
 8011494:	d901      	bls.n	801149a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011496:	2337      	movs	r3, #55	@ 0x37
 8011498:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801149c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801149e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80114a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a8:	2200      	movs	r2, #0
 80114aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ae:	3304      	adds	r3, #4
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fe fd3d 	bl	800ff30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114b8:	3318      	adds	r3, #24
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe fd38 	bl	800ff30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80114c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80114cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80114d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d8:	2200      	movs	r2, #0
 80114da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e0:	2200      	movs	r2, #0
 80114e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80114e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e8:	3354      	adds	r3, #84	@ 0x54
 80114ea:	224c      	movs	r2, #76	@ 0x4c
 80114ec:	2100      	movs	r1, #0
 80114ee:	4618      	mov	r0, r3
 80114f0:	f002 f938 	bl	8013764 <memset>
 80114f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f6:	4a0d      	ldr	r2, [pc, #52]	@ (801152c <prvInitialiseNewTask+0x144>)
 80114f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80114fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114fc:	4a0c      	ldr	r2, [pc, #48]	@ (8011530 <prvInitialiseNewTask+0x148>)
 80114fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011502:	4a0c      	ldr	r2, [pc, #48]	@ (8011534 <prvInitialiseNewTask+0x14c>)
 8011504:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	68f9      	ldr	r1, [r7, #12]
 801150a:	69b8      	ldr	r0, [r7, #24]
 801150c:	f001 fadc 	bl	8012ac8 <pxPortInitialiseStack>
 8011510:	4602      	mov	r2, r0
 8011512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011522:	bf00      	nop
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	20004f4c 	.word	0x20004f4c
 8011530:	20004fb4 	.word	0x20004fb4
 8011534:	2000501c 	.word	0x2000501c

08011538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011540:	f001 fbf2 	bl	8012d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011544:	4b2d      	ldr	r3, [pc, #180]	@ (80115fc <prvAddNewTaskToReadyList+0xc4>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	3301      	adds	r3, #1
 801154a:	4a2c      	ldr	r2, [pc, #176]	@ (80115fc <prvAddNewTaskToReadyList+0xc4>)
 801154c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801154e:	4b2c      	ldr	r3, [pc, #176]	@ (8011600 <prvAddNewTaskToReadyList+0xc8>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011556:	4a2a      	ldr	r2, [pc, #168]	@ (8011600 <prvAddNewTaskToReadyList+0xc8>)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801155c:	4b27      	ldr	r3, [pc, #156]	@ (80115fc <prvAddNewTaskToReadyList+0xc4>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b01      	cmp	r3, #1
 8011562:	d110      	bne.n	8011586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011564:	f000 fc40 	bl	8011de8 <prvInitialiseTaskLists>
 8011568:	e00d      	b.n	8011586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801156a:	4b26      	ldr	r3, [pc, #152]	@ (8011604 <prvAddNewTaskToReadyList+0xcc>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d109      	bne.n	8011586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011572:	4b23      	ldr	r3, [pc, #140]	@ (8011600 <prvAddNewTaskToReadyList+0xc8>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801157c:	429a      	cmp	r2, r3
 801157e:	d802      	bhi.n	8011586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011580:	4a1f      	ldr	r2, [pc, #124]	@ (8011600 <prvAddNewTaskToReadyList+0xc8>)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011586:	4b20      	ldr	r3, [pc, #128]	@ (8011608 <prvAddNewTaskToReadyList+0xd0>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	4a1e      	ldr	r2, [pc, #120]	@ (8011608 <prvAddNewTaskToReadyList+0xd0>)
 801158e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011590:	4b1d      	ldr	r3, [pc, #116]	@ (8011608 <prvAddNewTaskToReadyList+0xd0>)
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801159c:	4b1b      	ldr	r3, [pc, #108]	@ (801160c <prvAddNewTaskToReadyList+0xd4>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d903      	bls.n	80115ac <prvAddNewTaskToReadyList+0x74>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a8:	4a18      	ldr	r2, [pc, #96]	@ (801160c <prvAddNewTaskToReadyList+0xd4>)
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115b0:	4613      	mov	r3, r2
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	4413      	add	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4a15      	ldr	r2, [pc, #84]	@ (8011610 <prvAddNewTaskToReadyList+0xd8>)
 80115ba:	441a      	add	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3304      	adds	r3, #4
 80115c0:	4619      	mov	r1, r3
 80115c2:	4610      	mov	r0, r2
 80115c4:	f7fe fcc1 	bl	800ff4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80115c8:	f001 fbe0 	bl	8012d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80115cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011604 <prvAddNewTaskToReadyList+0xcc>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00e      	beq.n	80115f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80115d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011600 <prvAddNewTaskToReadyList+0xc8>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115de:	429a      	cmp	r2, r3
 80115e0:	d207      	bcs.n	80115f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80115e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011614 <prvAddNewTaskToReadyList+0xdc>)
 80115e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115f2:	bf00      	nop
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	20001dc4 	.word	0x20001dc4
 8011600:	200018f0 	.word	0x200018f0
 8011604:	20001dd0 	.word	0x20001dd0
 8011608:	20001de0 	.word	0x20001de0
 801160c:	20001dcc 	.word	0x20001dcc
 8011610:	200018f4 	.word	0x200018f4
 8011614:	e000ed04 	.word	0xe000ed04

08011618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011620:	2300      	movs	r3, #0
 8011622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d018      	beq.n	801165c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801162a:	4b14      	ldr	r3, [pc, #80]	@ (801167c <vTaskDelay+0x64>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d00b      	beq.n	801164a <vTaskDelay+0x32>
	__asm volatile
 8011632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011636:	f383 8811 	msr	BASEPRI, r3
 801163a:	f3bf 8f6f 	isb	sy
 801163e:	f3bf 8f4f 	dsb	sy
 8011642:	60bb      	str	r3, [r7, #8]
}
 8011644:	bf00      	nop
 8011646:	bf00      	nop
 8011648:	e7fd      	b.n	8011646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801164a:	f000 f88b 	bl	8011764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801164e:	2100      	movs	r1, #0
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fe8b 	bl	801236c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011656:	f000 f893 	bl	8011780 <xTaskResumeAll>
 801165a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d107      	bne.n	8011672 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011662:	4b07      	ldr	r3, [pc, #28]	@ (8011680 <vTaskDelay+0x68>)
 8011664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011672:	bf00      	nop
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	20001dec 	.word	0x20001dec
 8011680:	e000ed04 	.word	0xe000ed04

08011684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b08a      	sub	sp, #40	@ 0x28
 8011688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801168a:	2300      	movs	r3, #0
 801168c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801168e:	2300      	movs	r3, #0
 8011690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011692:	463a      	mov	r2, r7
 8011694:	1d39      	adds	r1, r7, #4
 8011696:	f107 0308 	add.w	r3, r7, #8
 801169a:	4618      	mov	r0, r3
 801169c:	f7fe fbf4 	bl	800fe88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80116a0:	6839      	ldr	r1, [r7, #0]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	9202      	str	r2, [sp, #8]
 80116a8:	9301      	str	r3, [sp, #4]
 80116aa:	2300      	movs	r3, #0
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	2300      	movs	r3, #0
 80116b0:	460a      	mov	r2, r1
 80116b2:	4924      	ldr	r1, [pc, #144]	@ (8011744 <vTaskStartScheduler+0xc0>)
 80116b4:	4824      	ldr	r0, [pc, #144]	@ (8011748 <vTaskStartScheduler+0xc4>)
 80116b6:	f7ff fdf1 	bl	801129c <xTaskCreateStatic>
 80116ba:	4603      	mov	r3, r0
 80116bc:	4a23      	ldr	r2, [pc, #140]	@ (801174c <vTaskStartScheduler+0xc8>)
 80116be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80116c0:	4b22      	ldr	r3, [pc, #136]	@ (801174c <vTaskStartScheduler+0xc8>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80116c8:	2301      	movs	r3, #1
 80116ca:	617b      	str	r3, [r7, #20]
 80116cc:	e001      	b.n	80116d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d102      	bne.n	80116de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80116d8:	f000 fe9c 	bl	8012414 <xTimerCreateTimerTask>
 80116dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d11b      	bne.n	801171c <vTaskStartScheduler+0x98>
	__asm volatile
 80116e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	613b      	str	r3, [r7, #16]
}
 80116f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80116f8:	4b15      	ldr	r3, [pc, #84]	@ (8011750 <vTaskStartScheduler+0xcc>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	3354      	adds	r3, #84	@ 0x54
 80116fe:	4a15      	ldr	r2, [pc, #84]	@ (8011754 <vTaskStartScheduler+0xd0>)
 8011700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011702:	4b15      	ldr	r3, [pc, #84]	@ (8011758 <vTaskStartScheduler+0xd4>)
 8011704:	f04f 32ff 	mov.w	r2, #4294967295
 8011708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801170a:	4b14      	ldr	r3, [pc, #80]	@ (801175c <vTaskStartScheduler+0xd8>)
 801170c:	2201      	movs	r2, #1
 801170e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011710:	4b13      	ldr	r3, [pc, #76]	@ (8011760 <vTaskStartScheduler+0xdc>)
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011716:	f001 fa63 	bl	8012be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801171a:	e00f      	b.n	801173c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011722:	d10b      	bne.n	801173c <vTaskStartScheduler+0xb8>
	__asm volatile
 8011724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011728:	f383 8811 	msr	BASEPRI, r3
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	f3bf 8f4f 	dsb	sy
 8011734:	60fb      	str	r3, [r7, #12]
}
 8011736:	bf00      	nop
 8011738:	bf00      	nop
 801173a:	e7fd      	b.n	8011738 <vTaskStartScheduler+0xb4>
}
 801173c:	bf00      	nop
 801173e:	3718      	adds	r7, #24
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	08014af4 	.word	0x08014af4
 8011748:	08011db9 	.word	0x08011db9
 801174c:	20001de8 	.word	0x20001de8
 8011750:	200018f0 	.word	0x200018f0
 8011754:	20000120 	.word	0x20000120
 8011758:	20001de4 	.word	0x20001de4
 801175c:	20001dd0 	.word	0x20001dd0
 8011760:	20001dc8 	.word	0x20001dc8

08011764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011764:	b480      	push	{r7}
 8011766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011768:	4b04      	ldr	r3, [pc, #16]	@ (801177c <vTaskSuspendAll+0x18>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3301      	adds	r3, #1
 801176e:	4a03      	ldr	r2, [pc, #12]	@ (801177c <vTaskSuspendAll+0x18>)
 8011770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011772:	bf00      	nop
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr
 801177c:	20001dec 	.word	0x20001dec

08011780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801178a:	2300      	movs	r3, #0
 801178c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801178e:	4b42      	ldr	r3, [pc, #264]	@ (8011898 <xTaskResumeAll+0x118>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10b      	bne.n	80117ae <xTaskResumeAll+0x2e>
	__asm volatile
 8011796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	603b      	str	r3, [r7, #0]
}
 80117a8:	bf00      	nop
 80117aa:	bf00      	nop
 80117ac:	e7fd      	b.n	80117aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80117ae:	f001 fabb 	bl	8012d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80117b2:	4b39      	ldr	r3, [pc, #228]	@ (8011898 <xTaskResumeAll+0x118>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	4a37      	ldr	r2, [pc, #220]	@ (8011898 <xTaskResumeAll+0x118>)
 80117ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117bc:	4b36      	ldr	r3, [pc, #216]	@ (8011898 <xTaskResumeAll+0x118>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d162      	bne.n	801188a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80117c4:	4b35      	ldr	r3, [pc, #212]	@ (801189c <xTaskResumeAll+0x11c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d05e      	beq.n	801188a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117cc:	e02f      	b.n	801182e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117ce:	4b34      	ldr	r3, [pc, #208]	@ (80118a0 <xTaskResumeAll+0x120>)
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	3318      	adds	r3, #24
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fe fc12 	bl	8010004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	3304      	adds	r3, #4
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fe fc0d 	bl	8010004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117ee:	4b2d      	ldr	r3, [pc, #180]	@ (80118a4 <xTaskResumeAll+0x124>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d903      	bls.n	80117fe <xTaskResumeAll+0x7e>
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117fa:	4a2a      	ldr	r2, [pc, #168]	@ (80118a4 <xTaskResumeAll+0x124>)
 80117fc:	6013      	str	r3, [r2, #0]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011802:	4613      	mov	r3, r2
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	4413      	add	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	4a27      	ldr	r2, [pc, #156]	@ (80118a8 <xTaskResumeAll+0x128>)
 801180c:	441a      	add	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3304      	adds	r3, #4
 8011812:	4619      	mov	r1, r3
 8011814:	4610      	mov	r0, r2
 8011816:	f7fe fb98 	bl	800ff4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801181e:	4b23      	ldr	r3, [pc, #140]	@ (80118ac <xTaskResumeAll+0x12c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011824:	429a      	cmp	r2, r3
 8011826:	d302      	bcc.n	801182e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011828:	4b21      	ldr	r3, [pc, #132]	@ (80118b0 <xTaskResumeAll+0x130>)
 801182a:	2201      	movs	r2, #1
 801182c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801182e:	4b1c      	ldr	r3, [pc, #112]	@ (80118a0 <xTaskResumeAll+0x120>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1cb      	bne.n	80117ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d001      	beq.n	8011840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801183c:	f000 fb78 	bl	8011f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011840:	4b1c      	ldr	r3, [pc, #112]	@ (80118b4 <xTaskResumeAll+0x134>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d010      	beq.n	801186e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801184c:	f000 f858 	bl	8011900 <xTaskIncrementTick>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d002      	beq.n	801185c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011856:	4b16      	ldr	r3, [pc, #88]	@ (80118b0 <xTaskResumeAll+0x130>)
 8011858:	2201      	movs	r2, #1
 801185a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3b01      	subs	r3, #1
 8011860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1f1      	bne.n	801184c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011868:	4b12      	ldr	r3, [pc, #72]	@ (80118b4 <xTaskResumeAll+0x134>)
 801186a:	2200      	movs	r2, #0
 801186c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801186e:	4b10      	ldr	r3, [pc, #64]	@ (80118b0 <xTaskResumeAll+0x130>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d009      	beq.n	801188a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011876:	2301      	movs	r3, #1
 8011878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801187a:	4b0f      	ldr	r3, [pc, #60]	@ (80118b8 <xTaskResumeAll+0x138>)
 801187c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011880:	601a      	str	r2, [r3, #0]
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801188a:	f001 fa7f 	bl	8012d8c <vPortExitCritical>

	return xAlreadyYielded;
 801188e:	68bb      	ldr	r3, [r7, #8]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	20001dec 	.word	0x20001dec
 801189c:	20001dc4 	.word	0x20001dc4
 80118a0:	20001d84 	.word	0x20001d84
 80118a4:	20001dcc 	.word	0x20001dcc
 80118a8:	200018f4 	.word	0x200018f4
 80118ac:	200018f0 	.word	0x200018f0
 80118b0:	20001dd8 	.word	0x20001dd8
 80118b4:	20001dd4 	.word	0x20001dd4
 80118b8:	e000ed04 	.word	0xe000ed04

080118bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80118c2:	4b05      	ldr	r3, [pc, #20]	@ (80118d8 <xTaskGetTickCount+0x1c>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80118c8:	687b      	ldr	r3, [r7, #4]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop
 80118d8:	20001dc8 	.word	0x20001dc8

080118dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118e2:	f001 fb01 	bl	8012ee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80118e6:	2300      	movs	r3, #0
 80118e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80118ea:	4b04      	ldr	r3, [pc, #16]	@ (80118fc <xTaskGetTickCountFromISR+0x20>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118f0:	683b      	ldr	r3, [r7, #0]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	20001dc8 	.word	0x20001dc8

08011900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011906:	2300      	movs	r3, #0
 8011908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801190a:	4b4f      	ldr	r3, [pc, #316]	@ (8011a48 <xTaskIncrementTick+0x148>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	f040 8090 	bne.w	8011a34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011914:	4b4d      	ldr	r3, [pc, #308]	@ (8011a4c <xTaskIncrementTick+0x14c>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	3301      	adds	r3, #1
 801191a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801191c:	4a4b      	ldr	r2, [pc, #300]	@ (8011a4c <xTaskIncrementTick+0x14c>)
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d121      	bne.n	801196c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011928:	4b49      	ldr	r3, [pc, #292]	@ (8011a50 <xTaskIncrementTick+0x150>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00b      	beq.n	801194a <xTaskIncrementTick+0x4a>
	__asm volatile
 8011932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011936:	f383 8811 	msr	BASEPRI, r3
 801193a:	f3bf 8f6f 	isb	sy
 801193e:	f3bf 8f4f 	dsb	sy
 8011942:	603b      	str	r3, [r7, #0]
}
 8011944:	bf00      	nop
 8011946:	bf00      	nop
 8011948:	e7fd      	b.n	8011946 <xTaskIncrementTick+0x46>
 801194a:	4b41      	ldr	r3, [pc, #260]	@ (8011a50 <xTaskIncrementTick+0x150>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	4b40      	ldr	r3, [pc, #256]	@ (8011a54 <xTaskIncrementTick+0x154>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	4a3e      	ldr	r2, [pc, #248]	@ (8011a50 <xTaskIncrementTick+0x150>)
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	4a3e      	ldr	r2, [pc, #248]	@ (8011a54 <xTaskIncrementTick+0x154>)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6013      	str	r3, [r2, #0]
 801195e:	4b3e      	ldr	r3, [pc, #248]	@ (8011a58 <xTaskIncrementTick+0x158>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	3301      	adds	r3, #1
 8011964:	4a3c      	ldr	r2, [pc, #240]	@ (8011a58 <xTaskIncrementTick+0x158>)
 8011966:	6013      	str	r3, [r2, #0]
 8011968:	f000 fae2 	bl	8011f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801196c:	4b3b      	ldr	r3, [pc, #236]	@ (8011a5c <xTaskIncrementTick+0x15c>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	429a      	cmp	r2, r3
 8011974:	d349      	bcc.n	8011a0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011976:	4b36      	ldr	r3, [pc, #216]	@ (8011a50 <xTaskIncrementTick+0x150>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d104      	bne.n	801198a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011980:	4b36      	ldr	r3, [pc, #216]	@ (8011a5c <xTaskIncrementTick+0x15c>)
 8011982:	f04f 32ff 	mov.w	r2, #4294967295
 8011986:	601a      	str	r2, [r3, #0]
					break;
 8011988:	e03f      	b.n	8011a0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801198a:	4b31      	ldr	r3, [pc, #196]	@ (8011a50 <xTaskIncrementTick+0x150>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801199a:	693a      	ldr	r2, [r7, #16]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d203      	bcs.n	80119aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80119a2:	4a2e      	ldr	r2, [pc, #184]	@ (8011a5c <xTaskIncrementTick+0x15c>)
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80119a8:	e02f      	b.n	8011a0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	3304      	adds	r3, #4
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fe fb28 	bl	8010004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d004      	beq.n	80119c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	3318      	adds	r3, #24
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fe fb1f 	bl	8010004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119ca:	4b25      	ldr	r3, [pc, #148]	@ (8011a60 <xTaskIncrementTick+0x160>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d903      	bls.n	80119da <xTaskIncrementTick+0xda>
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119d6:	4a22      	ldr	r2, [pc, #136]	@ (8011a60 <xTaskIncrementTick+0x160>)
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119de:	4613      	mov	r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4413      	add	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4a1f      	ldr	r2, [pc, #124]	@ (8011a64 <xTaskIncrementTick+0x164>)
 80119e8:	441a      	add	r2, r3
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	3304      	adds	r3, #4
 80119ee:	4619      	mov	r1, r3
 80119f0:	4610      	mov	r0, r2
 80119f2:	f7fe faaa 	bl	800ff4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119fa:	4b1b      	ldr	r3, [pc, #108]	@ (8011a68 <xTaskIncrementTick+0x168>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d3b8      	bcc.n	8011976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011a04:	2301      	movs	r3, #1
 8011a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a08:	e7b5      	b.n	8011976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a0a:	4b17      	ldr	r3, [pc, #92]	@ (8011a68 <xTaskIncrementTick+0x168>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a10:	4914      	ldr	r1, [pc, #80]	@ (8011a64 <xTaskIncrementTick+0x164>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4413      	add	r3, r2
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	440b      	add	r3, r1
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d901      	bls.n	8011a26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011a22:	2301      	movs	r3, #1
 8011a24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011a26:	4b11      	ldr	r3, [pc, #68]	@ (8011a6c <xTaskIncrementTick+0x16c>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d007      	beq.n	8011a3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	617b      	str	r3, [r7, #20]
 8011a32:	e004      	b.n	8011a3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a34:	4b0e      	ldr	r3, [pc, #56]	@ (8011a70 <xTaskIncrementTick+0x170>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8011a70 <xTaskIncrementTick+0x170>)
 8011a3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a3e:	697b      	ldr	r3, [r7, #20]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3718      	adds	r7, #24
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	20001dec 	.word	0x20001dec
 8011a4c:	20001dc8 	.word	0x20001dc8
 8011a50:	20001d7c 	.word	0x20001d7c
 8011a54:	20001d80 	.word	0x20001d80
 8011a58:	20001ddc 	.word	0x20001ddc
 8011a5c:	20001de4 	.word	0x20001de4
 8011a60:	20001dcc 	.word	0x20001dcc
 8011a64:	200018f4 	.word	0x200018f4
 8011a68:	200018f0 	.word	0x200018f0
 8011a6c:	20001dd8 	.word	0x20001dd8
 8011a70:	20001dd4 	.word	0x20001dd4

08011a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8011b28 <vTaskSwitchContext+0xb4>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d003      	beq.n	8011a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a82:	4b2a      	ldr	r3, [pc, #168]	@ (8011b2c <vTaskSwitchContext+0xb8>)
 8011a84:	2201      	movs	r2, #1
 8011a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a88:	e047      	b.n	8011b1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8011a8a:	4b28      	ldr	r3, [pc, #160]	@ (8011b2c <vTaskSwitchContext+0xb8>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a90:	4b27      	ldr	r3, [pc, #156]	@ (8011b30 <vTaskSwitchContext+0xbc>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	e011      	b.n	8011abc <vTaskSwitchContext+0x48>
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d10b      	bne.n	8011ab6 <vTaskSwitchContext+0x42>
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	607b      	str	r3, [r7, #4]
}
 8011ab0:	bf00      	nop
 8011ab2:	bf00      	nop
 8011ab4:	e7fd      	b.n	8011ab2 <vTaskSwitchContext+0x3e>
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	491d      	ldr	r1, [pc, #116]	@ (8011b34 <vTaskSwitchContext+0xc0>)
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4413      	add	r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	440b      	add	r3, r1
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d0e3      	beq.n	8011a98 <vTaskSwitchContext+0x24>
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	4a16      	ldr	r2, [pc, #88]	@ (8011b34 <vTaskSwitchContext+0xc0>)
 8011adc:	4413      	add	r3, r2
 8011ade:	60bb      	str	r3, [r7, #8]
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	685a      	ldr	r2, [r3, #4]
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	605a      	str	r2, [r3, #4]
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	685a      	ldr	r2, [r3, #4]
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	3308      	adds	r3, #8
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d104      	bne.n	8011b00 <vTaskSwitchContext+0x8c>
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	605a      	str	r2, [r3, #4]
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	4a0c      	ldr	r2, [pc, #48]	@ (8011b38 <vTaskSwitchContext+0xc4>)
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	4a09      	ldr	r2, [pc, #36]	@ (8011b30 <vTaskSwitchContext+0xbc>)
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b10:	4b09      	ldr	r3, [pc, #36]	@ (8011b38 <vTaskSwitchContext+0xc4>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	3354      	adds	r3, #84	@ 0x54
 8011b16:	4a09      	ldr	r2, [pc, #36]	@ (8011b3c <vTaskSwitchContext+0xc8>)
 8011b18:	6013      	str	r3, [r2, #0]
}
 8011b1a:	bf00      	nop
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	20001dec 	.word	0x20001dec
 8011b2c:	20001dd8 	.word	0x20001dd8
 8011b30:	20001dcc 	.word	0x20001dcc
 8011b34:	200018f4 	.word	0x200018f4
 8011b38:	200018f0 	.word	0x200018f0
 8011b3c:	20000120 	.word	0x20000120

08011b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10b      	bne.n	8011b68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b54:	f383 8811 	msr	BASEPRI, r3
 8011b58:	f3bf 8f6f 	isb	sy
 8011b5c:	f3bf 8f4f 	dsb	sy
 8011b60:	60fb      	str	r3, [r7, #12]
}
 8011b62:	bf00      	nop
 8011b64:	bf00      	nop
 8011b66:	e7fd      	b.n	8011b64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b68:	4b07      	ldr	r3, [pc, #28]	@ (8011b88 <vTaskPlaceOnEventList+0x48>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	3318      	adds	r3, #24
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7fe fa0e 	bl	800ff92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b76:	2101      	movs	r1, #1
 8011b78:	6838      	ldr	r0, [r7, #0]
 8011b7a:	f000 fbf7 	bl	801236c <prvAddCurrentTaskToDelayedList>
}
 8011b7e:	bf00      	nop
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200018f0 	.word	0x200018f0

08011b8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10b      	bne.n	8011bb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8011b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba2:	f383 8811 	msr	BASEPRI, r3
 8011ba6:	f3bf 8f6f 	isb	sy
 8011baa:	f3bf 8f4f 	dsb	sy
 8011bae:	617b      	str	r3, [r7, #20]
}
 8011bb0:	bf00      	nop
 8011bb2:	bf00      	nop
 8011bb4:	e7fd      	b.n	8011bb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8011be0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	3318      	adds	r3, #24
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	68f8      	ldr	r0, [r7, #12]
 8011bc0:	f7fe f9c3 	bl	800ff4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011bca:	f04f 33ff 	mov.w	r3, #4294967295
 8011bce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011bd0:	6879      	ldr	r1, [r7, #4]
 8011bd2:	68b8      	ldr	r0, [r7, #8]
 8011bd4:	f000 fbca 	bl	801236c <prvAddCurrentTaskToDelayedList>
	}
 8011bd8:	bf00      	nop
 8011bda:	3718      	adds	r7, #24
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	200018f0 	.word	0x200018f0

08011be4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d10b      	bne.n	8011c12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	60fb      	str	r3, [r7, #12]
}
 8011c0c:	bf00      	nop
 8011c0e:	bf00      	nop
 8011c10:	e7fd      	b.n	8011c0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	3318      	adds	r3, #24
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fe f9f4 	bl	8010004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8011c94 <xTaskRemoveFromEventList+0xb0>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d11d      	bne.n	8011c60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	3304      	adds	r3, #4
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fe f9eb 	bl	8010004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c32:	4b19      	ldr	r3, [pc, #100]	@ (8011c98 <xTaskRemoveFromEventList+0xb4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d903      	bls.n	8011c42 <xTaskRemoveFromEventList+0x5e>
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c3e:	4a16      	ldr	r2, [pc, #88]	@ (8011c98 <xTaskRemoveFromEventList+0xb4>)
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c46:	4613      	mov	r3, r2
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	4413      	add	r3, r2
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4a13      	ldr	r2, [pc, #76]	@ (8011c9c <xTaskRemoveFromEventList+0xb8>)
 8011c50:	441a      	add	r2, r3
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	3304      	adds	r3, #4
 8011c56:	4619      	mov	r1, r3
 8011c58:	4610      	mov	r0, r2
 8011c5a:	f7fe f976 	bl	800ff4a <vListInsertEnd>
 8011c5e:	e005      	b.n	8011c6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	3318      	adds	r3, #24
 8011c64:	4619      	mov	r1, r3
 8011c66:	480e      	ldr	r0, [pc, #56]	@ (8011ca0 <xTaskRemoveFromEventList+0xbc>)
 8011c68:	f7fe f96f 	bl	800ff4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c70:	4b0c      	ldr	r3, [pc, #48]	@ (8011ca4 <xTaskRemoveFromEventList+0xc0>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d905      	bls.n	8011c86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ca8 <xTaskRemoveFromEventList+0xc4>)
 8011c80:	2201      	movs	r2, #1
 8011c82:	601a      	str	r2, [r3, #0]
 8011c84:	e001      	b.n	8011c8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011c86:	2300      	movs	r3, #0
 8011c88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c8a:	697b      	ldr	r3, [r7, #20]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3718      	adds	r7, #24
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	20001dec 	.word	0x20001dec
 8011c98:	20001dcc 	.word	0x20001dcc
 8011c9c:	200018f4 	.word	0x200018f4
 8011ca0:	20001d84 	.word	0x20001d84
 8011ca4:	200018f0 	.word	0x200018f0
 8011ca8:	20001dd8 	.word	0x20001dd8

08011cac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011cb4:	4b06      	ldr	r3, [pc, #24]	@ (8011cd0 <vTaskInternalSetTimeOutState+0x24>)
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011cbc:	4b05      	ldr	r3, [pc, #20]	@ (8011cd4 <vTaskInternalSetTimeOutState+0x28>)
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	605a      	str	r2, [r3, #4]
}
 8011cc4:	bf00      	nop
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr
 8011cd0:	20001ddc 	.word	0x20001ddc
 8011cd4:	20001dc8 	.word	0x20001dc8

08011cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10b      	bne.n	8011d00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	613b      	str	r3, [r7, #16]
}
 8011cfa:	bf00      	nop
 8011cfc:	bf00      	nop
 8011cfe:	e7fd      	b.n	8011cfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10b      	bne.n	8011d1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0a:	f383 8811 	msr	BASEPRI, r3
 8011d0e:	f3bf 8f6f 	isb	sy
 8011d12:	f3bf 8f4f 	dsb	sy
 8011d16:	60fb      	str	r3, [r7, #12]
}
 8011d18:	bf00      	nop
 8011d1a:	bf00      	nop
 8011d1c:	e7fd      	b.n	8011d1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011d1e:	f001 f803 	bl	8012d28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d22:	4b1d      	ldr	r3, [pc, #116]	@ (8011d98 <xTaskCheckForTimeOut+0xc0>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d3a:	d102      	bne.n	8011d42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	61fb      	str	r3, [r7, #28]
 8011d40:	e023      	b.n	8011d8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	4b15      	ldr	r3, [pc, #84]	@ (8011d9c <xTaskCheckForTimeOut+0xc4>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d007      	beq.n	8011d5e <xTaskCheckForTimeOut+0x86>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	69ba      	ldr	r2, [r7, #24]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d302      	bcc.n	8011d5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	61fb      	str	r3, [r7, #28]
 8011d5c:	e015      	b.n	8011d8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	697a      	ldr	r2, [r7, #20]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d20b      	bcs.n	8011d80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	1ad2      	subs	r2, r2, r3
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f7ff ff99 	bl	8011cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	61fb      	str	r3, [r7, #28]
 8011d7e:	e004      	b.n	8011d8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2200      	movs	r2, #0
 8011d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d86:	2301      	movs	r3, #1
 8011d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d8a:	f000 ffff 	bl	8012d8c <vPortExitCritical>

	return xReturn;
 8011d8e:	69fb      	ldr	r3, [r7, #28]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3720      	adds	r7, #32
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	20001dc8 	.word	0x20001dc8
 8011d9c:	20001ddc 	.word	0x20001ddc

08011da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011da0:	b480      	push	{r7}
 8011da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011da4:	4b03      	ldr	r3, [pc, #12]	@ (8011db4 <vTaskMissedYield+0x14>)
 8011da6:	2201      	movs	r2, #1
 8011da8:	601a      	str	r2, [r3, #0]
}
 8011daa:	bf00      	nop
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr
 8011db4:	20001dd8 	.word	0x20001dd8

08011db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011dc0:	f000 f852 	bl	8011e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011dc4:	4b06      	ldr	r3, [pc, #24]	@ (8011de0 <prvIdleTask+0x28>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d9f9      	bls.n	8011dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011dcc:	4b05      	ldr	r3, [pc, #20]	@ (8011de4 <prvIdleTask+0x2c>)
 8011dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	f3bf 8f4f 	dsb	sy
 8011dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011ddc:	e7f0      	b.n	8011dc0 <prvIdleTask+0x8>
 8011dde:	bf00      	nop
 8011de0:	200018f4 	.word	0x200018f4
 8011de4:	e000ed04 	.word	0xe000ed04

08011de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011dee:	2300      	movs	r3, #0
 8011df0:	607b      	str	r3, [r7, #4]
 8011df2:	e00c      	b.n	8011e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	4613      	mov	r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	4413      	add	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4a12      	ldr	r2, [pc, #72]	@ (8011e48 <prvInitialiseTaskLists+0x60>)
 8011e00:	4413      	add	r3, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe f874 	bl	800fef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	607b      	str	r3, [r7, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b37      	cmp	r3, #55	@ 0x37
 8011e12:	d9ef      	bls.n	8011df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e14:	480d      	ldr	r0, [pc, #52]	@ (8011e4c <prvInitialiseTaskLists+0x64>)
 8011e16:	f7fe f86b 	bl	800fef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e1a:	480d      	ldr	r0, [pc, #52]	@ (8011e50 <prvInitialiseTaskLists+0x68>)
 8011e1c:	f7fe f868 	bl	800fef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e20:	480c      	ldr	r0, [pc, #48]	@ (8011e54 <prvInitialiseTaskLists+0x6c>)
 8011e22:	f7fe f865 	bl	800fef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e26:	480c      	ldr	r0, [pc, #48]	@ (8011e58 <prvInitialiseTaskLists+0x70>)
 8011e28:	f7fe f862 	bl	800fef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e2c:	480b      	ldr	r0, [pc, #44]	@ (8011e5c <prvInitialiseTaskLists+0x74>)
 8011e2e:	f7fe f85f 	bl	800fef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e32:	4b0b      	ldr	r3, [pc, #44]	@ (8011e60 <prvInitialiseTaskLists+0x78>)
 8011e34:	4a05      	ldr	r2, [pc, #20]	@ (8011e4c <prvInitialiseTaskLists+0x64>)
 8011e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e38:	4b0a      	ldr	r3, [pc, #40]	@ (8011e64 <prvInitialiseTaskLists+0x7c>)
 8011e3a:	4a05      	ldr	r2, [pc, #20]	@ (8011e50 <prvInitialiseTaskLists+0x68>)
 8011e3c:	601a      	str	r2, [r3, #0]
}
 8011e3e:	bf00      	nop
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	200018f4 	.word	0x200018f4
 8011e4c:	20001d54 	.word	0x20001d54
 8011e50:	20001d68 	.word	0x20001d68
 8011e54:	20001d84 	.word	0x20001d84
 8011e58:	20001d98 	.word	0x20001d98
 8011e5c:	20001db0 	.word	0x20001db0
 8011e60:	20001d7c 	.word	0x20001d7c
 8011e64:	20001d80 	.word	0x20001d80

08011e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b082      	sub	sp, #8
 8011e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e6e:	e019      	b.n	8011ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e70:	f000 ff5a 	bl	8012d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e74:	4b10      	ldr	r3, [pc, #64]	@ (8011eb8 <prvCheckTasksWaitingTermination+0x50>)
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3304      	adds	r3, #4
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fe f8bf 	bl	8010004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e86:	4b0d      	ldr	r3, [pc, #52]	@ (8011ebc <prvCheckTasksWaitingTermination+0x54>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	3b01      	subs	r3, #1
 8011e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8011ebc <prvCheckTasksWaitingTermination+0x54>)
 8011e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e90:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec0 <prvCheckTasksWaitingTermination+0x58>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	4a0a      	ldr	r2, [pc, #40]	@ (8011ec0 <prvCheckTasksWaitingTermination+0x58>)
 8011e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e9a:	f000 ff77 	bl	8012d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f810 	bl	8011ec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ea4:	4b06      	ldr	r3, [pc, #24]	@ (8011ec0 <prvCheckTasksWaitingTermination+0x58>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1e1      	bne.n	8011e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011eac:	bf00      	nop
 8011eae:	bf00      	nop
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20001d98 	.word	0x20001d98
 8011ebc:	20001dc4 	.word	0x20001dc4
 8011ec0:	20001dac 	.word	0x20001dac

08011ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	3354      	adds	r3, #84	@ 0x54
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f001 fc5f 	bl	8013794 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d108      	bne.n	8011ef2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f001 f90f 	bl	8013108 <vPortFree>
				vPortFree( pxTCB );
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f001 f90c 	bl	8013108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011ef0:	e019      	b.n	8011f26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d103      	bne.n	8011f04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f001 f903 	bl	8013108 <vPortFree>
	}
 8011f02:	e010      	b.n	8011f26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	d00b      	beq.n	8011f26 <prvDeleteTCB+0x62>
	__asm volatile
 8011f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f12:	f383 8811 	msr	BASEPRI, r3
 8011f16:	f3bf 8f6f 	isb	sy
 8011f1a:	f3bf 8f4f 	dsb	sy
 8011f1e:	60fb      	str	r3, [r7, #12]
}
 8011f20:	bf00      	nop
 8011f22:	bf00      	nop
 8011f24:	e7fd      	b.n	8011f22 <prvDeleteTCB+0x5e>
	}
 8011f26:	bf00      	nop
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
	...

08011f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f36:	4b0c      	ldr	r3, [pc, #48]	@ (8011f68 <prvResetNextTaskUnblockTime+0x38>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d104      	bne.n	8011f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f40:	4b0a      	ldr	r3, [pc, #40]	@ (8011f6c <prvResetNextTaskUnblockTime+0x3c>)
 8011f42:	f04f 32ff 	mov.w	r2, #4294967295
 8011f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f48:	e008      	b.n	8011f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f4a:	4b07      	ldr	r3, [pc, #28]	@ (8011f68 <prvResetNextTaskUnblockTime+0x38>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	685b      	ldr	r3, [r3, #4]
 8011f58:	4a04      	ldr	r2, [pc, #16]	@ (8011f6c <prvResetNextTaskUnblockTime+0x3c>)
 8011f5a:	6013      	str	r3, [r2, #0]
}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	20001d7c 	.word	0x20001d7c
 8011f6c:	20001de4 	.word	0x20001de4

08011f70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011f76:	4b05      	ldr	r3, [pc, #20]	@ (8011f8c <xTaskGetCurrentTaskHandle+0x1c>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011f7c:	687b      	ldr	r3, [r7, #4]
	}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	200018f0 	.word	0x200018f0

08011f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011f96:	4b0b      	ldr	r3, [pc, #44]	@ (8011fc4 <xTaskGetSchedulerState+0x34>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d102      	bne.n	8011fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	607b      	str	r3, [r7, #4]
 8011fa2:	e008      	b.n	8011fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fa4:	4b08      	ldr	r3, [pc, #32]	@ (8011fc8 <xTaskGetSchedulerState+0x38>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d102      	bne.n	8011fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011fac:	2302      	movs	r3, #2
 8011fae:	607b      	str	r3, [r7, #4]
 8011fb0:	e001      	b.n	8011fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011fb6:	687b      	ldr	r3, [r7, #4]
	}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	20001dd0 	.word	0x20001dd0
 8011fc8:	20001dec 	.word	0x20001dec

08011fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d051      	beq.n	8012086 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8012090 <xTaskPriorityInherit+0xc4>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d241      	bcs.n	8012074 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	db06      	blt.n	8012006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ff8:	4b25      	ldr	r3, [pc, #148]	@ (8012090 <xTaskPriorityInherit+0xc4>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ffe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	6959      	ldr	r1, [r3, #20]
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801200e:	4613      	mov	r3, r2
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	4413      	add	r3, r2
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	4a1f      	ldr	r2, [pc, #124]	@ (8012094 <xTaskPriorityInherit+0xc8>)
 8012018:	4413      	add	r3, r2
 801201a:	4299      	cmp	r1, r3
 801201c:	d122      	bne.n	8012064 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	3304      	adds	r3, #4
 8012022:	4618      	mov	r0, r3
 8012024:	f7fd ffee 	bl	8010004 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012028:	4b19      	ldr	r3, [pc, #100]	@ (8012090 <xTaskPriorityInherit+0xc4>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012036:	4b18      	ldr	r3, [pc, #96]	@ (8012098 <xTaskPriorityInherit+0xcc>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	429a      	cmp	r2, r3
 801203c:	d903      	bls.n	8012046 <xTaskPriorityInherit+0x7a>
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012042:	4a15      	ldr	r2, [pc, #84]	@ (8012098 <xTaskPriorityInherit+0xcc>)
 8012044:	6013      	str	r3, [r2, #0]
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801204a:	4613      	mov	r3, r2
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	4413      	add	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4a10      	ldr	r2, [pc, #64]	@ (8012094 <xTaskPriorityInherit+0xc8>)
 8012054:	441a      	add	r2, r3
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	3304      	adds	r3, #4
 801205a:	4619      	mov	r1, r3
 801205c:	4610      	mov	r0, r2
 801205e:	f7fd ff74 	bl	800ff4a <vListInsertEnd>
 8012062:	e004      	b.n	801206e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012064:	4b0a      	ldr	r3, [pc, #40]	@ (8012090 <xTaskPriorityInherit+0xc4>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801206e:	2301      	movs	r3, #1
 8012070:	60fb      	str	r3, [r7, #12]
 8012072:	e008      	b.n	8012086 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012078:	4b05      	ldr	r3, [pc, #20]	@ (8012090 <xTaskPriorityInherit+0xc4>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207e:	429a      	cmp	r2, r3
 8012080:	d201      	bcs.n	8012086 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012082:	2301      	movs	r3, #1
 8012084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012086:	68fb      	ldr	r3, [r7, #12]
	}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	200018f0 	.word	0x200018f0
 8012094:	200018f4 	.word	0x200018f4
 8012098:	20001dcc 	.word	0x20001dcc

0801209c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120a8:	2300      	movs	r3, #0
 80120aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d058      	beq.n	8012164 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120b2:	4b2f      	ldr	r3, [pc, #188]	@ (8012170 <xTaskPriorityDisinherit+0xd4>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	693a      	ldr	r2, [r7, #16]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d00b      	beq.n	80120d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80120bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c0:	f383 8811 	msr	BASEPRI, r3
 80120c4:	f3bf 8f6f 	isb	sy
 80120c8:	f3bf 8f4f 	dsb	sy
 80120cc:	60fb      	str	r3, [r7, #12]
}
 80120ce:	bf00      	nop
 80120d0:	bf00      	nop
 80120d2:	e7fd      	b.n	80120d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10b      	bne.n	80120f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	60bb      	str	r3, [r7, #8]
}
 80120ee:	bf00      	nop
 80120f0:	bf00      	nop
 80120f2:	e7fd      	b.n	80120f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120f8:	1e5a      	subs	r2, r3, #1
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012106:	429a      	cmp	r2, r3
 8012108:	d02c      	beq.n	8012164 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801210e:	2b00      	cmp	r3, #0
 8012110:	d128      	bne.n	8012164 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	3304      	adds	r3, #4
 8012116:	4618      	mov	r0, r3
 8012118:	f7fd ff74 	bl	8010004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012134:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <xTaskPriorityDisinherit+0xd8>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	429a      	cmp	r2, r3
 801213a:	d903      	bls.n	8012144 <xTaskPriorityDisinherit+0xa8>
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012140:	4a0c      	ldr	r2, [pc, #48]	@ (8012174 <xTaskPriorityDisinherit+0xd8>)
 8012142:	6013      	str	r3, [r2, #0]
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012148:	4613      	mov	r3, r2
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	4413      	add	r3, r2
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4a09      	ldr	r2, [pc, #36]	@ (8012178 <xTaskPriorityDisinherit+0xdc>)
 8012152:	441a      	add	r2, r3
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	3304      	adds	r3, #4
 8012158:	4619      	mov	r1, r3
 801215a:	4610      	mov	r0, r2
 801215c:	f7fd fef5 	bl	800ff4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012160:	2301      	movs	r3, #1
 8012162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012164:	697b      	ldr	r3, [r7, #20]
	}
 8012166:	4618      	mov	r0, r3
 8012168:	3718      	adds	r7, #24
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	200018f0 	.word	0x200018f0
 8012174:	20001dcc 	.word	0x20001dcc
 8012178:	200018f4 	.word	0x200018f4

0801217c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801218a:	2301      	movs	r3, #1
 801218c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d06c      	beq.n	801226e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10b      	bne.n	80121b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801219c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121a0:	f383 8811 	msr	BASEPRI, r3
 80121a4:	f3bf 8f6f 	isb	sy
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	60fb      	str	r3, [r7, #12]
}
 80121ae:	bf00      	nop
 80121b0:	bf00      	nop
 80121b2:	e7fd      	b.n	80121b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121b8:	683a      	ldr	r2, [r7, #0]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d902      	bls.n	80121c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	61fb      	str	r3, [r7, #28]
 80121c2:	e002      	b.n	80121ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121ce:	69fa      	ldr	r2, [r7, #28]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d04c      	beq.n	801226e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d147      	bne.n	801226e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80121de:	4b26      	ldr	r3, [pc, #152]	@ (8012278 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69ba      	ldr	r2, [r7, #24]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d10b      	bne.n	8012200 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	60bb      	str	r3, [r7, #8]
}
 80121fa:	bf00      	nop
 80121fc:	bf00      	nop
 80121fe:	e7fd      	b.n	80121fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012204:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	69fa      	ldr	r2, [r7, #28]
 801220a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	699b      	ldr	r3, [r3, #24]
 8012210:	2b00      	cmp	r3, #0
 8012212:	db04      	blt.n	801221e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	6959      	ldr	r1, [r3, #20]
 8012222:	693a      	ldr	r2, [r7, #16]
 8012224:	4613      	mov	r3, r2
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	4413      	add	r3, r2
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4a13      	ldr	r2, [pc, #76]	@ (801227c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801222e:	4413      	add	r3, r2
 8012230:	4299      	cmp	r1, r3
 8012232:	d11c      	bne.n	801226e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012234:	69bb      	ldr	r3, [r7, #24]
 8012236:	3304      	adds	r3, #4
 8012238:	4618      	mov	r0, r3
 801223a:	f7fd fee3 	bl	8010004 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012242:	4b0f      	ldr	r3, [pc, #60]	@ (8012280 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	429a      	cmp	r2, r3
 8012248:	d903      	bls.n	8012252 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801224e:	4a0c      	ldr	r2, [pc, #48]	@ (8012280 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012250:	6013      	str	r3, [r2, #0]
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012256:	4613      	mov	r3, r2
 8012258:	009b      	lsls	r3, r3, #2
 801225a:	4413      	add	r3, r2
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	4a07      	ldr	r2, [pc, #28]	@ (801227c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012260:	441a      	add	r2, r3
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	3304      	adds	r3, #4
 8012266:	4619      	mov	r1, r3
 8012268:	4610      	mov	r0, r2
 801226a:	f7fd fe6e 	bl	800ff4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801226e:	bf00      	nop
 8012270:	3720      	adds	r7, #32
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	200018f0 	.word	0x200018f0
 801227c:	200018f4 	.word	0x200018f4
 8012280:	20001dcc 	.word	0x20001dcc

08012284 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012284:	b480      	push	{r7}
 8012286:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012288:	4b07      	ldr	r3, [pc, #28]	@ (80122a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d004      	beq.n	801229a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012290:	4b05      	ldr	r3, [pc, #20]	@ (80122a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012296:	3201      	adds	r2, #1
 8012298:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801229a:	4b03      	ldr	r3, [pc, #12]	@ (80122a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801229c:	681b      	ldr	r3, [r3, #0]
	}
 801229e:	4618      	mov	r0, r3
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr
 80122a8:	200018f0 	.word	0x200018f0

080122ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	607a      	str	r2, [r7, #4]
 80122b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80122ba:	f000 fd35 	bl	8012d28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80122be:	4b29      	ldr	r3, [pc, #164]	@ (8012364 <xTaskNotifyWait+0xb8>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	2b02      	cmp	r3, #2
 80122ca:	d01c      	beq.n	8012306 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80122cc:	4b25      	ldr	r3, [pc, #148]	@ (8012364 <xTaskNotifyWait+0xb8>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	43d2      	mvns	r2, r2
 80122d8:	400a      	ands	r2, r1
 80122da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80122de:	4b21      	ldr	r3, [pc, #132]	@ (8012364 <xTaskNotifyWait+0xb8>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2201      	movs	r2, #1
 80122e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00b      	beq.n	8012306 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80122ee:	2101      	movs	r1, #1
 80122f0:	6838      	ldr	r0, [r7, #0]
 80122f2:	f000 f83b 	bl	801236c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80122f6:	4b1c      	ldr	r3, [pc, #112]	@ (8012368 <xTaskNotifyWait+0xbc>)
 80122f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122fc:	601a      	str	r2, [r3, #0]
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012306:	f000 fd41 	bl	8012d8c <vPortExitCritical>

		taskENTER_CRITICAL();
 801230a:	f000 fd0d 	bl	8012d28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d005      	beq.n	8012320 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012314:	4b13      	ldr	r3, [pc, #76]	@ (8012364 <xTaskNotifyWait+0xb8>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012320:	4b10      	ldr	r3, [pc, #64]	@ (8012364 <xTaskNotifyWait+0xb8>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b02      	cmp	r3, #2
 801232c:	d002      	beq.n	8012334 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801232e:	2300      	movs	r3, #0
 8012330:	617b      	str	r3, [r7, #20]
 8012332:	e00a      	b.n	801234a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012334:	4b0b      	ldr	r3, [pc, #44]	@ (8012364 <xTaskNotifyWait+0xb8>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801233c:	68ba      	ldr	r2, [r7, #8]
 801233e:	43d2      	mvns	r2, r2
 8012340:	400a      	ands	r2, r1
 8012342:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8012346:	2301      	movs	r3, #1
 8012348:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801234a:	4b06      	ldr	r3, [pc, #24]	@ (8012364 <xTaskNotifyWait+0xb8>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2200      	movs	r2, #0
 8012350:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8012354:	f000 fd1a 	bl	8012d8c <vPortExitCritical>

		return xReturn;
 8012358:	697b      	ldr	r3, [r7, #20]
	}
 801235a:	4618      	mov	r0, r3
 801235c:	3718      	adds	r7, #24
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	200018f0 	.word	0x200018f0
 8012368:	e000ed04 	.word	0xe000ed04

0801236c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012376:	4b21      	ldr	r3, [pc, #132]	@ (80123fc <prvAddCurrentTaskToDelayedList+0x90>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801237c:	4b20      	ldr	r3, [pc, #128]	@ (8012400 <prvAddCurrentTaskToDelayedList+0x94>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	3304      	adds	r3, #4
 8012382:	4618      	mov	r0, r3
 8012384:	f7fd fe3e 	bl	8010004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238e:	d10a      	bne.n	80123a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d007      	beq.n	80123a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012396:	4b1a      	ldr	r3, [pc, #104]	@ (8012400 <prvAddCurrentTaskToDelayedList+0x94>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	3304      	adds	r3, #4
 801239c:	4619      	mov	r1, r3
 801239e:	4819      	ldr	r0, [pc, #100]	@ (8012404 <prvAddCurrentTaskToDelayedList+0x98>)
 80123a0:	f7fd fdd3 	bl	800ff4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80123a4:	e026      	b.n	80123f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4413      	add	r3, r2
 80123ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80123ae:	4b14      	ldr	r3, [pc, #80]	@ (8012400 <prvAddCurrentTaskToDelayedList+0x94>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80123b6:	68ba      	ldr	r2, [r7, #8]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d209      	bcs.n	80123d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123be:	4b12      	ldr	r3, [pc, #72]	@ (8012408 <prvAddCurrentTaskToDelayedList+0x9c>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012400 <prvAddCurrentTaskToDelayedList+0x94>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3304      	adds	r3, #4
 80123c8:	4619      	mov	r1, r3
 80123ca:	4610      	mov	r0, r2
 80123cc:	f7fd fde1 	bl	800ff92 <vListInsert>
}
 80123d0:	e010      	b.n	80123f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123d2:	4b0e      	ldr	r3, [pc, #56]	@ (801240c <prvAddCurrentTaskToDelayedList+0xa0>)
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	4b0a      	ldr	r3, [pc, #40]	@ (8012400 <prvAddCurrentTaskToDelayedList+0x94>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	3304      	adds	r3, #4
 80123dc:	4619      	mov	r1, r3
 80123de:	4610      	mov	r0, r2
 80123e0:	f7fd fdd7 	bl	800ff92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80123e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d202      	bcs.n	80123f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80123ee:	4a08      	ldr	r2, [pc, #32]	@ (8012410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	6013      	str	r3, [r2, #0]
}
 80123f4:	bf00      	nop
 80123f6:	3710      	adds	r7, #16
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	20001dc8 	.word	0x20001dc8
 8012400:	200018f0 	.word	0x200018f0
 8012404:	20001db0 	.word	0x20001db0
 8012408:	20001d80 	.word	0x20001d80
 801240c:	20001d7c 	.word	0x20001d7c
 8012410:	20001de4 	.word	0x20001de4

08012414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b08a      	sub	sp, #40	@ 0x28
 8012418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801241a:	2300      	movs	r3, #0
 801241c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801241e:	f000 fb13 	bl	8012a48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012422:	4b1d      	ldr	r3, [pc, #116]	@ (8012498 <xTimerCreateTimerTask+0x84>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d021      	beq.n	801246e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801242a:	2300      	movs	r3, #0
 801242c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801242e:	2300      	movs	r3, #0
 8012430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012432:	1d3a      	adds	r2, r7, #4
 8012434:	f107 0108 	add.w	r1, r7, #8
 8012438:	f107 030c 	add.w	r3, r7, #12
 801243c:	4618      	mov	r0, r3
 801243e:	f7fd fd3d 	bl	800febc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012442:	6879      	ldr	r1, [r7, #4]
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	9202      	str	r2, [sp, #8]
 801244a:	9301      	str	r3, [sp, #4]
 801244c:	2302      	movs	r3, #2
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	2300      	movs	r3, #0
 8012452:	460a      	mov	r2, r1
 8012454:	4911      	ldr	r1, [pc, #68]	@ (801249c <xTimerCreateTimerTask+0x88>)
 8012456:	4812      	ldr	r0, [pc, #72]	@ (80124a0 <xTimerCreateTimerTask+0x8c>)
 8012458:	f7fe ff20 	bl	801129c <xTaskCreateStatic>
 801245c:	4603      	mov	r3, r0
 801245e:	4a11      	ldr	r2, [pc, #68]	@ (80124a4 <xTimerCreateTimerTask+0x90>)
 8012460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012462:	4b10      	ldr	r3, [pc, #64]	@ (80124a4 <xTimerCreateTimerTask+0x90>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d001      	beq.n	801246e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801246a:	2301      	movs	r3, #1
 801246c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10b      	bne.n	801248c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	613b      	str	r3, [r7, #16]
}
 8012486:	bf00      	nop
 8012488:	bf00      	nop
 801248a:	e7fd      	b.n	8012488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801248c:	697b      	ldr	r3, [r7, #20]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3718      	adds	r7, #24
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	20001e20 	.word	0x20001e20
 801249c:	08014afc 	.word	0x08014afc
 80124a0:	080125e1 	.word	0x080125e1
 80124a4:	20001e24 	.word	0x20001e24

080124a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08a      	sub	sp, #40	@ 0x28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
 80124b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10b      	bne.n	80124d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	623b      	str	r3, [r7, #32]
}
 80124d2:	bf00      	nop
 80124d4:	bf00      	nop
 80124d6:	e7fd      	b.n	80124d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80124d8:	4b19      	ldr	r3, [pc, #100]	@ (8012540 <xTimerGenericCommand+0x98>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d02a      	beq.n	8012536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	2b05      	cmp	r3, #5
 80124f0:	dc18      	bgt.n	8012524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80124f2:	f7ff fd4d 	bl	8011f90 <xTaskGetSchedulerState>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d109      	bne.n	8012510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80124fc:	4b10      	ldr	r3, [pc, #64]	@ (8012540 <xTimerGenericCommand+0x98>)
 80124fe:	6818      	ldr	r0, [r3, #0]
 8012500:	f107 0110 	add.w	r1, r7, #16
 8012504:	2300      	movs	r3, #0
 8012506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012508:	f7fe f812 	bl	8010530 <xQueueGenericSend>
 801250c:	6278      	str	r0, [r7, #36]	@ 0x24
 801250e:	e012      	b.n	8012536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012510:	4b0b      	ldr	r3, [pc, #44]	@ (8012540 <xTimerGenericCommand+0x98>)
 8012512:	6818      	ldr	r0, [r3, #0]
 8012514:	f107 0110 	add.w	r1, r7, #16
 8012518:	2300      	movs	r3, #0
 801251a:	2200      	movs	r2, #0
 801251c:	f7fe f808 	bl	8010530 <xQueueGenericSend>
 8012520:	6278      	str	r0, [r7, #36]	@ 0x24
 8012522:	e008      	b.n	8012536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012524:	4b06      	ldr	r3, [pc, #24]	@ (8012540 <xTimerGenericCommand+0x98>)
 8012526:	6818      	ldr	r0, [r3, #0]
 8012528:	f107 0110 	add.w	r1, r7, #16
 801252c:	2300      	movs	r3, #0
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	f7fe f900 	bl	8010734 <xQueueGenericSendFromISR>
 8012534:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012538:	4618      	mov	r0, r3
 801253a:	3728      	adds	r7, #40	@ 0x28
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	20001e20 	.word	0x20001e20

08012544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af02      	add	r7, sp, #8
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801254e:	4b23      	ldr	r3, [pc, #140]	@ (80125dc <prvProcessExpiredTimer+0x98>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	3304      	adds	r3, #4
 801255c:	4618      	mov	r0, r3
 801255e:	f7fd fd51 	bl	8010004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012568:	f003 0304 	and.w	r3, r3, #4
 801256c:	2b00      	cmp	r3, #0
 801256e:	d023      	beq.n	80125b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	699a      	ldr	r2, [r3, #24]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	18d1      	adds	r1, r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	6978      	ldr	r0, [r7, #20]
 801257e:	f000 f8d5 	bl	801272c <prvInsertTimerInActiveList>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d020      	beq.n	80125ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012588:	2300      	movs	r3, #0
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	2300      	movs	r3, #0
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	2100      	movs	r1, #0
 8012592:	6978      	ldr	r0, [r7, #20]
 8012594:	f7ff ff88 	bl	80124a8 <xTimerGenericCommand>
 8012598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d114      	bne.n	80125ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80125a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	60fb      	str	r3, [r7, #12]
}
 80125b2:	bf00      	nop
 80125b4:	bf00      	nop
 80125b6:	e7fd      	b.n	80125b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80125be:	f023 0301 	bic.w	r3, r3, #1
 80125c2:	b2da      	uxtb	r2, r3
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	6a1b      	ldr	r3, [r3, #32]
 80125ce:	6978      	ldr	r0, [r7, #20]
 80125d0:	4798      	blx	r3
}
 80125d2:	bf00      	nop
 80125d4:	3718      	adds	r7, #24
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	20001e18 	.word	0x20001e18

080125e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80125e8:	f107 0308 	add.w	r3, r7, #8
 80125ec:	4618      	mov	r0, r3
 80125ee:	f000 f859 	bl	80126a4 <prvGetNextExpireTime>
 80125f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	4619      	mov	r1, r3
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f000 f805 	bl	8012608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80125fe:	f000 f8d7 	bl	80127b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012602:	bf00      	nop
 8012604:	e7f0      	b.n	80125e8 <prvTimerTask+0x8>
	...

08012608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012612:	f7ff f8a7 	bl	8011764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012616:	f107 0308 	add.w	r3, r7, #8
 801261a:	4618      	mov	r0, r3
 801261c:	f000 f866 	bl	80126ec <prvSampleTimeNow>
 8012620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d130      	bne.n	801268a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d10a      	bne.n	8012644 <prvProcessTimerOrBlockTask+0x3c>
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	429a      	cmp	r2, r3
 8012634:	d806      	bhi.n	8012644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012636:	f7ff f8a3 	bl	8011780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801263a:	68f9      	ldr	r1, [r7, #12]
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f7ff ff81 	bl	8012544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012642:	e024      	b.n	801268e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d008      	beq.n	801265c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801264a:	4b13      	ldr	r3, [pc, #76]	@ (8012698 <prvProcessTimerOrBlockTask+0x90>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d101      	bne.n	8012658 <prvProcessTimerOrBlockTask+0x50>
 8012654:	2301      	movs	r3, #1
 8012656:	e000      	b.n	801265a <prvProcessTimerOrBlockTask+0x52>
 8012658:	2300      	movs	r3, #0
 801265a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801265c:	4b0f      	ldr	r3, [pc, #60]	@ (801269c <prvProcessTimerOrBlockTask+0x94>)
 801265e:	6818      	ldr	r0, [r3, #0]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	683a      	ldr	r2, [r7, #0]
 8012668:	4619      	mov	r1, r3
 801266a:	f7fe fde3 	bl	8011234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801266e:	f7ff f887 	bl	8011780 <xTaskResumeAll>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10a      	bne.n	801268e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012678:	4b09      	ldr	r3, [pc, #36]	@ (80126a0 <prvProcessTimerOrBlockTask+0x98>)
 801267a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	f3bf 8f6f 	isb	sy
}
 8012688:	e001      	b.n	801268e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801268a:	f7ff f879 	bl	8011780 <xTaskResumeAll>
}
 801268e:	bf00      	nop
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	20001e1c 	.word	0x20001e1c
 801269c:	20001e20 	.word	0x20001e20
 80126a0:	e000ed04 	.word	0xe000ed04

080126a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80126ac:	4b0e      	ldr	r3, [pc, #56]	@ (80126e8 <prvGetNextExpireTime+0x44>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d101      	bne.n	80126ba <prvGetNextExpireTime+0x16>
 80126b6:	2201      	movs	r2, #1
 80126b8:	e000      	b.n	80126bc <prvGetNextExpireTime+0x18>
 80126ba:	2200      	movs	r2, #0
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d105      	bne.n	80126d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80126c8:	4b07      	ldr	r3, [pc, #28]	@ (80126e8 <prvGetNextExpireTime+0x44>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	60fb      	str	r3, [r7, #12]
 80126d2:	e001      	b.n	80126d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80126d4:	2300      	movs	r3, #0
 80126d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80126d8:	68fb      	ldr	r3, [r7, #12]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	20001e18 	.word	0x20001e18

080126ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80126f4:	f7ff f8e2 	bl	80118bc <xTaskGetTickCount>
 80126f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80126fa:	4b0b      	ldr	r3, [pc, #44]	@ (8012728 <prvSampleTimeNow+0x3c>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	68fa      	ldr	r2, [r7, #12]
 8012700:	429a      	cmp	r2, r3
 8012702:	d205      	bcs.n	8012710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012704:	f000 f93a 	bl	801297c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2201      	movs	r2, #1
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	e002      	b.n	8012716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012716:	4a04      	ldr	r2, [pc, #16]	@ (8012728 <prvSampleTimeNow+0x3c>)
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801271c:	68fb      	ldr	r3, [r7, #12]
}
 801271e:	4618      	mov	r0, r3
 8012720:	3710      	adds	r7, #16
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	20001e28 	.word	0x20001e28

0801272c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
 8012738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801273a:	2300      	movs	r3, #0
 801273c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	68ba      	ldr	r2, [r7, #8]
 8012742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801274a:	68ba      	ldr	r2, [r7, #8]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	429a      	cmp	r2, r3
 8012750:	d812      	bhi.n	8012778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	1ad2      	subs	r2, r2, r3
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	429a      	cmp	r2, r3
 801275e:	d302      	bcc.n	8012766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012760:	2301      	movs	r3, #1
 8012762:	617b      	str	r3, [r7, #20]
 8012764:	e01b      	b.n	801279e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012766:	4b10      	ldr	r3, [pc, #64]	@ (80127a8 <prvInsertTimerInActiveList+0x7c>)
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	3304      	adds	r3, #4
 801276e:	4619      	mov	r1, r3
 8012770:	4610      	mov	r0, r2
 8012772:	f7fd fc0e 	bl	800ff92 <vListInsert>
 8012776:	e012      	b.n	801279e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	429a      	cmp	r2, r3
 801277e:	d206      	bcs.n	801278e <prvInsertTimerInActiveList+0x62>
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	429a      	cmp	r2, r3
 8012786:	d302      	bcc.n	801278e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012788:	2301      	movs	r3, #1
 801278a:	617b      	str	r3, [r7, #20]
 801278c:	e007      	b.n	801279e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801278e:	4b07      	ldr	r3, [pc, #28]	@ (80127ac <prvInsertTimerInActiveList+0x80>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	3304      	adds	r3, #4
 8012796:	4619      	mov	r1, r3
 8012798:	4610      	mov	r0, r2
 801279a:	f7fd fbfa 	bl	800ff92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801279e:	697b      	ldr	r3, [r7, #20]
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3718      	adds	r7, #24
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	20001e1c 	.word	0x20001e1c
 80127ac:	20001e18 	.word	0x20001e18

080127b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b08e      	sub	sp, #56	@ 0x38
 80127b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127b6:	e0ce      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	da19      	bge.n	80127f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80127be:	1d3b      	adds	r3, r7, #4
 80127c0:	3304      	adds	r3, #4
 80127c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80127c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10b      	bne.n	80127e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80127ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127ce:	f383 8811 	msr	BASEPRI, r3
 80127d2:	f3bf 8f6f 	isb	sy
 80127d6:	f3bf 8f4f 	dsb	sy
 80127da:	61fb      	str	r3, [r7, #28]
}
 80127dc:	bf00      	nop
 80127de:	bf00      	nop
 80127e0:	e7fd      	b.n	80127de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80127e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127e8:	6850      	ldr	r0, [r2, #4]
 80127ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127ec:	6892      	ldr	r2, [r2, #8]
 80127ee:	4611      	mov	r1, r2
 80127f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f2c0 80ae 	blt.w	8012956 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80127fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012800:	695b      	ldr	r3, [r3, #20]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d004      	beq.n	8012810 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012808:	3304      	adds	r3, #4
 801280a:	4618      	mov	r0, r3
 801280c:	f7fd fbfa 	bl	8010004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012810:	463b      	mov	r3, r7
 8012812:	4618      	mov	r0, r3
 8012814:	f7ff ff6a 	bl	80126ec <prvSampleTimeNow>
 8012818:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b09      	cmp	r3, #9
 801281e:	f200 8097 	bhi.w	8012950 <prvProcessReceivedCommands+0x1a0>
 8012822:	a201      	add	r2, pc, #4	@ (adr r2, 8012828 <prvProcessReceivedCommands+0x78>)
 8012824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012828:	08012851 	.word	0x08012851
 801282c:	08012851 	.word	0x08012851
 8012830:	08012851 	.word	0x08012851
 8012834:	080128c7 	.word	0x080128c7
 8012838:	080128db 	.word	0x080128db
 801283c:	08012927 	.word	0x08012927
 8012840:	08012851 	.word	0x08012851
 8012844:	08012851 	.word	0x08012851
 8012848:	080128c7 	.word	0x080128c7
 801284c:	080128db 	.word	0x080128db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012856:	f043 0301 	orr.w	r3, r3, #1
 801285a:	b2da      	uxtb	r2, r3
 801285c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801285e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012866:	699b      	ldr	r3, [r3, #24]
 8012868:	18d1      	adds	r1, r2, r3
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801286e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012870:	f7ff ff5c 	bl	801272c <prvInsertTimerInActiveList>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d06c      	beq.n	8012954 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801287c:	6a1b      	ldr	r3, [r3, #32]
 801287e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012888:	f003 0304 	and.w	r3, r3, #4
 801288c:	2b00      	cmp	r3, #0
 801288e:	d061      	beq.n	8012954 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	441a      	add	r2, r3
 8012898:	2300      	movs	r3, #0
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	2300      	movs	r3, #0
 801289e:	2100      	movs	r1, #0
 80128a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128a2:	f7ff fe01 	bl	80124a8 <xTimerGenericCommand>
 80128a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80128a8:	6a3b      	ldr	r3, [r7, #32]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d152      	bne.n	8012954 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	61bb      	str	r3, [r7, #24]
}
 80128c0:	bf00      	nop
 80128c2:	bf00      	nop
 80128c4:	e7fd      	b.n	80128c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80128c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80128cc:	f023 0301 	bic.w	r3, r3, #1
 80128d0:	b2da      	uxtb	r2, r3
 80128d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80128d8:	e03d      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80128da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80128e0:	f043 0301 	orr.w	r3, r3, #1
 80128e4:	b2da      	uxtb	r2, r3
 80128e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80128f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128f4:	699b      	ldr	r3, [r3, #24]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10b      	bne.n	8012912 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	617b      	str	r3, [r7, #20]
}
 801290c:	bf00      	nop
 801290e:	bf00      	nop
 8012910:	e7fd      	b.n	801290e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012914:	699a      	ldr	r2, [r3, #24]
 8012916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012918:	18d1      	adds	r1, r2, r3
 801291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801291c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801291e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012920:	f7ff ff04 	bl	801272c <prvInsertTimerInActiveList>
					break;
 8012924:	e017      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801292c:	f003 0302 	and.w	r3, r3, #2
 8012930:	2b00      	cmp	r3, #0
 8012932:	d103      	bne.n	801293c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012936:	f000 fbe7 	bl	8013108 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801293a:	e00c      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801293e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012942:	f023 0301 	bic.w	r3, r3, #1
 8012946:	b2da      	uxtb	r2, r3
 8012948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801294a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801294e:	e002      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012950:	bf00      	nop
 8012952:	e000      	b.n	8012956 <prvProcessReceivedCommands+0x1a6>
					break;
 8012954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012956:	4b08      	ldr	r3, [pc, #32]	@ (8012978 <prvProcessReceivedCommands+0x1c8>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	1d39      	adds	r1, r7, #4
 801295c:	2200      	movs	r2, #0
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe f816 	bl	8010990 <xQueueReceive>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	f47f af26 	bne.w	80127b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801296c:	bf00      	nop
 801296e:	bf00      	nop
 8012970:	3730      	adds	r7, #48	@ 0x30
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	20001e20 	.word	0x20001e20

0801297c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012982:	e049      	b.n	8012a18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012984:	4b2e      	ldr	r3, [pc, #184]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801298e:	4b2c      	ldr	r3, [pc, #176]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	3304      	adds	r3, #4
 801299c:	4618      	mov	r0, r3
 801299e:	f7fd fb31 	bl	8010004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80129b0:	f003 0304 	and.w	r3, r3, #4
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d02f      	beq.n	8012a18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	699b      	ldr	r3, [r3, #24]
 80129bc:	693a      	ldr	r2, [r7, #16]
 80129be:	4413      	add	r3, r2
 80129c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80129c2:	68ba      	ldr	r2, [r7, #8]
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d90e      	bls.n	80129e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80129d6:	4b1a      	ldr	r3, [pc, #104]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	3304      	adds	r3, #4
 80129de:	4619      	mov	r1, r3
 80129e0:	4610      	mov	r0, r2
 80129e2:	f7fd fad6 	bl	800ff92 <vListInsert>
 80129e6:	e017      	b.n	8012a18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80129e8:	2300      	movs	r3, #0
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	2300      	movs	r3, #0
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	2100      	movs	r1, #0
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	f7ff fd58 	bl	80124a8 <xTimerGenericCommand>
 80129f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10b      	bne.n	8012a18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a04:	f383 8811 	msr	BASEPRI, r3
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	f3bf 8f4f 	dsb	sy
 8012a10:	603b      	str	r3, [r7, #0]
}
 8012a12:	bf00      	nop
 8012a14:	bf00      	nop
 8012a16:	e7fd      	b.n	8012a14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012a18:	4b09      	ldr	r3, [pc, #36]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1b0      	bne.n	8012984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012a22:	4b07      	ldr	r3, [pc, #28]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012a28:	4b06      	ldr	r3, [pc, #24]	@ (8012a44 <prvSwitchTimerLists+0xc8>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4a04      	ldr	r2, [pc, #16]	@ (8012a40 <prvSwitchTimerLists+0xc4>)
 8012a2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012a30:	4a04      	ldr	r2, [pc, #16]	@ (8012a44 <prvSwitchTimerLists+0xc8>)
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	6013      	str	r3, [r2, #0]
}
 8012a36:	bf00      	nop
 8012a38:	3718      	adds	r7, #24
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	20001e18 	.word	0x20001e18
 8012a44:	20001e1c 	.word	0x20001e1c

08012a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012a4e:	f000 f96b 	bl	8012d28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012a52:	4b15      	ldr	r3, [pc, #84]	@ (8012aa8 <prvCheckForValidListAndQueue+0x60>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d120      	bne.n	8012a9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012a5a:	4814      	ldr	r0, [pc, #80]	@ (8012aac <prvCheckForValidListAndQueue+0x64>)
 8012a5c:	f7fd fa48 	bl	800fef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012a60:	4813      	ldr	r0, [pc, #76]	@ (8012ab0 <prvCheckForValidListAndQueue+0x68>)
 8012a62:	f7fd fa45 	bl	800fef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012a66:	4b13      	ldr	r3, [pc, #76]	@ (8012ab4 <prvCheckForValidListAndQueue+0x6c>)
 8012a68:	4a10      	ldr	r2, [pc, #64]	@ (8012aac <prvCheckForValidListAndQueue+0x64>)
 8012a6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012a6c:	4b12      	ldr	r3, [pc, #72]	@ (8012ab8 <prvCheckForValidListAndQueue+0x70>)
 8012a6e:	4a10      	ldr	r2, [pc, #64]	@ (8012ab0 <prvCheckForValidListAndQueue+0x68>)
 8012a70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012a72:	2300      	movs	r3, #0
 8012a74:	9300      	str	r3, [sp, #0]
 8012a76:	4b11      	ldr	r3, [pc, #68]	@ (8012abc <prvCheckForValidListAndQueue+0x74>)
 8012a78:	4a11      	ldr	r2, [pc, #68]	@ (8012ac0 <prvCheckForValidListAndQueue+0x78>)
 8012a7a:	2110      	movs	r1, #16
 8012a7c:	200a      	movs	r0, #10
 8012a7e:	f7fd fb55 	bl	801012c <xQueueGenericCreateStatic>
 8012a82:	4603      	mov	r3, r0
 8012a84:	4a08      	ldr	r2, [pc, #32]	@ (8012aa8 <prvCheckForValidListAndQueue+0x60>)
 8012a86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012a88:	4b07      	ldr	r3, [pc, #28]	@ (8012aa8 <prvCheckForValidListAndQueue+0x60>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d005      	beq.n	8012a9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012a90:	4b05      	ldr	r3, [pc, #20]	@ (8012aa8 <prvCheckForValidListAndQueue+0x60>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	490b      	ldr	r1, [pc, #44]	@ (8012ac4 <prvCheckForValidListAndQueue+0x7c>)
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fe fb78 	bl	801118c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a9c:	f000 f976 	bl	8012d8c <vPortExitCritical>
}
 8012aa0:	bf00      	nop
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20001e20 	.word	0x20001e20
 8012aac:	20001df0 	.word	0x20001df0
 8012ab0:	20001e04 	.word	0x20001e04
 8012ab4:	20001e18 	.word	0x20001e18
 8012ab8:	20001e1c 	.word	0x20001e1c
 8012abc:	20001ecc 	.word	0x20001ecc
 8012ac0:	20001e2c 	.word	0x20001e2c
 8012ac4:	08014b04 	.word	0x08014b04

08012ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3b04      	subs	r3, #4
 8012ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	3b04      	subs	r3, #4
 8012ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	f023 0201 	bic.w	r2, r3, #1
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	3b04      	subs	r3, #4
 8012af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012af8:	4a0c      	ldr	r2, [pc, #48]	@ (8012b2c <pxPortInitialiseStack+0x64>)
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	3b14      	subs	r3, #20
 8012b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3b04      	subs	r3, #4
 8012b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f06f 0202 	mvn.w	r2, #2
 8012b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	3b20      	subs	r3, #32
 8012b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	3714      	adds	r7, #20
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr
 8012b2c:	08012b31 	.word	0x08012b31

08012b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012b36:	2300      	movs	r3, #0
 8012b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012b3a:	4b13      	ldr	r3, [pc, #76]	@ (8012b88 <prvTaskExitError+0x58>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b42:	d00b      	beq.n	8012b5c <prvTaskExitError+0x2c>
	__asm volatile
 8012b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	60fb      	str	r3, [r7, #12]
}
 8012b56:	bf00      	nop
 8012b58:	bf00      	nop
 8012b5a:	e7fd      	b.n	8012b58 <prvTaskExitError+0x28>
	__asm volatile
 8012b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b60:	f383 8811 	msr	BASEPRI, r3
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	f3bf 8f4f 	dsb	sy
 8012b6c:	60bb      	str	r3, [r7, #8]
}
 8012b6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012b70:	bf00      	nop
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d0fc      	beq.n	8012b72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012b78:	bf00      	nop
 8012b7a:	bf00      	nop
 8012b7c:	3714      	adds	r7, #20
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	20000110 	.word	0x20000110
 8012b8c:	00000000 	.word	0x00000000

08012b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012b90:	4b07      	ldr	r3, [pc, #28]	@ (8012bb0 <pxCurrentTCBConst2>)
 8012b92:	6819      	ldr	r1, [r3, #0]
 8012b94:	6808      	ldr	r0, [r1, #0]
 8012b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9a:	f380 8809 	msr	PSP, r0
 8012b9e:	f3bf 8f6f 	isb	sy
 8012ba2:	f04f 0000 	mov.w	r0, #0
 8012ba6:	f380 8811 	msr	BASEPRI, r0
 8012baa:	4770      	bx	lr
 8012bac:	f3af 8000 	nop.w

08012bb0 <pxCurrentTCBConst2>:
 8012bb0:	200018f0 	.word	0x200018f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012bb4:	bf00      	nop
 8012bb6:	bf00      	nop

08012bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012bb8:	4808      	ldr	r0, [pc, #32]	@ (8012bdc <prvPortStartFirstTask+0x24>)
 8012bba:	6800      	ldr	r0, [r0, #0]
 8012bbc:	6800      	ldr	r0, [r0, #0]
 8012bbe:	f380 8808 	msr	MSP, r0
 8012bc2:	f04f 0000 	mov.w	r0, #0
 8012bc6:	f380 8814 	msr	CONTROL, r0
 8012bca:	b662      	cpsie	i
 8012bcc:	b661      	cpsie	f
 8012bce:	f3bf 8f4f 	dsb	sy
 8012bd2:	f3bf 8f6f 	isb	sy
 8012bd6:	df00      	svc	0
 8012bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012bda:	bf00      	nop
 8012bdc:	e000ed08 	.word	0xe000ed08

08012be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012be6:	4b47      	ldr	r3, [pc, #284]	@ (8012d04 <xPortStartScheduler+0x124>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4a47      	ldr	r2, [pc, #284]	@ (8012d08 <xPortStartScheduler+0x128>)
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d10b      	bne.n	8012c08 <xPortStartScheduler+0x28>
	__asm volatile
 8012bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	613b      	str	r3, [r7, #16]
}
 8012c02:	bf00      	nop
 8012c04:	bf00      	nop
 8012c06:	e7fd      	b.n	8012c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012c08:	4b3e      	ldr	r3, [pc, #248]	@ (8012d04 <xPortStartScheduler+0x124>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8012d0c <xPortStartScheduler+0x12c>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d10b      	bne.n	8012c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c16:	f383 8811 	msr	BASEPRI, r3
 8012c1a:	f3bf 8f6f 	isb	sy
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	60fb      	str	r3, [r7, #12]
}
 8012c24:	bf00      	nop
 8012c26:	bf00      	nop
 8012c28:	e7fd      	b.n	8012c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012c2a:	4b39      	ldr	r3, [pc, #228]	@ (8012d10 <xPortStartScheduler+0x130>)
 8012c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	22ff      	movs	r2, #255	@ 0xff
 8012c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012c44:	78fb      	ldrb	r3, [r7, #3]
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012c4c:	b2da      	uxtb	r2, r3
 8012c4e:	4b31      	ldr	r3, [pc, #196]	@ (8012d14 <xPortStartScheduler+0x134>)
 8012c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012c52:	4b31      	ldr	r3, [pc, #196]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012c54:	2207      	movs	r2, #7
 8012c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012c58:	e009      	b.n	8012c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	3b01      	subs	r3, #1
 8012c60:	4a2d      	ldr	r2, [pc, #180]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012c64:	78fb      	ldrb	r3, [r7, #3]
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	005b      	lsls	r3, r3, #1
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012c6e:	78fb      	ldrb	r3, [r7, #3]
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c76:	2b80      	cmp	r3, #128	@ 0x80
 8012c78:	d0ef      	beq.n	8012c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012c7a:	4b27      	ldr	r3, [pc, #156]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f1c3 0307 	rsb	r3, r3, #7
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	d00b      	beq.n	8012c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	60bb      	str	r3, [r7, #8]
}
 8012c98:	bf00      	nop
 8012c9a:	bf00      	nop
 8012c9c:	e7fd      	b.n	8012c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	021b      	lsls	r3, r3, #8
 8012ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012cb0:	4a19      	ldr	r2, [pc, #100]	@ (8012d18 <xPortStartScheduler+0x138>)
 8012cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012cbc:	4b17      	ldr	r3, [pc, #92]	@ (8012d1c <xPortStartScheduler+0x13c>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4a16      	ldr	r2, [pc, #88]	@ (8012d1c <xPortStartScheduler+0x13c>)
 8012cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012cc8:	4b14      	ldr	r3, [pc, #80]	@ (8012d1c <xPortStartScheduler+0x13c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	4a13      	ldr	r2, [pc, #76]	@ (8012d1c <xPortStartScheduler+0x13c>)
 8012cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012cd4:	f000 f8da 	bl	8012e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012cd8:	4b11      	ldr	r3, [pc, #68]	@ (8012d20 <xPortStartScheduler+0x140>)
 8012cda:	2200      	movs	r2, #0
 8012cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012cde:	f000 f8f9 	bl	8012ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ce2:	4b10      	ldr	r3, [pc, #64]	@ (8012d24 <xPortStartScheduler+0x144>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8012d24 <xPortStartScheduler+0x144>)
 8012ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012cee:	f7ff ff63 	bl	8012bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012cf2:	f7fe febf 	bl	8011a74 <vTaskSwitchContext>
	prvTaskExitError();
 8012cf6:	f7ff ff1b 	bl	8012b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	e000ed00 	.word	0xe000ed00
 8012d08:	410fc271 	.word	0x410fc271
 8012d0c:	410fc270 	.word	0x410fc270
 8012d10:	e000e400 	.word	0xe000e400
 8012d14:	20001f1c 	.word	0x20001f1c
 8012d18:	20001f20 	.word	0x20001f20
 8012d1c:	e000ed20 	.word	0xe000ed20
 8012d20:	20000110 	.word	0x20000110
 8012d24:	e000ef34 	.word	0xe000ef34

08012d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d32:	f383 8811 	msr	BASEPRI, r3
 8012d36:	f3bf 8f6f 	isb	sy
 8012d3a:	f3bf 8f4f 	dsb	sy
 8012d3e:	607b      	str	r3, [r7, #4]
}
 8012d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012d42:	4b10      	ldr	r3, [pc, #64]	@ (8012d84 <vPortEnterCritical+0x5c>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	3301      	adds	r3, #1
 8012d48:	4a0e      	ldr	r2, [pc, #56]	@ (8012d84 <vPortEnterCritical+0x5c>)
 8012d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8012d84 <vPortEnterCritical+0x5c>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d110      	bne.n	8012d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012d54:	4b0c      	ldr	r3, [pc, #48]	@ (8012d88 <vPortEnterCritical+0x60>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00b      	beq.n	8012d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8012d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	603b      	str	r3, [r7, #0]
}
 8012d70:	bf00      	nop
 8012d72:	bf00      	nop
 8012d74:	e7fd      	b.n	8012d72 <vPortEnterCritical+0x4a>
	}
}
 8012d76:	bf00      	nop
 8012d78:	370c      	adds	r7, #12
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop
 8012d84:	20000110 	.word	0x20000110
 8012d88:	e000ed04 	.word	0xe000ed04

08012d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012d92:	4b12      	ldr	r3, [pc, #72]	@ (8012ddc <vPortExitCritical+0x50>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d10b      	bne.n	8012db2 <vPortExitCritical+0x26>
	__asm volatile
 8012d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	607b      	str	r3, [r7, #4]
}
 8012dac:	bf00      	nop
 8012dae:	bf00      	nop
 8012db0:	e7fd      	b.n	8012dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012db2:	4b0a      	ldr	r3, [pc, #40]	@ (8012ddc <vPortExitCritical+0x50>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	4a08      	ldr	r2, [pc, #32]	@ (8012ddc <vPortExitCritical+0x50>)
 8012dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012dbc:	4b07      	ldr	r3, [pc, #28]	@ (8012ddc <vPortExitCritical+0x50>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d105      	bne.n	8012dd0 <vPortExitCritical+0x44>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	f383 8811 	msr	BASEPRI, r3
}
 8012dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012dd0:	bf00      	nop
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr
 8012ddc:	20000110 	.word	0x20000110

08012de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012de0:	f3ef 8009 	mrs	r0, PSP
 8012de4:	f3bf 8f6f 	isb	sy
 8012de8:	4b15      	ldr	r3, [pc, #84]	@ (8012e40 <pxCurrentTCBConst>)
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	f01e 0f10 	tst.w	lr, #16
 8012df0:	bf08      	it	eq
 8012df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfa:	6010      	str	r0, [r2, #0]
 8012dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012e04:	f380 8811 	msr	BASEPRI, r0
 8012e08:	f3bf 8f4f 	dsb	sy
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f7fe fe30 	bl	8011a74 <vTaskSwitchContext>
 8012e14:	f04f 0000 	mov.w	r0, #0
 8012e18:	f380 8811 	msr	BASEPRI, r0
 8012e1c:	bc09      	pop	{r0, r3}
 8012e1e:	6819      	ldr	r1, [r3, #0]
 8012e20:	6808      	ldr	r0, [r1, #0]
 8012e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e26:	f01e 0f10 	tst.w	lr, #16
 8012e2a:	bf08      	it	eq
 8012e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012e30:	f380 8809 	msr	PSP, r0
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	f3af 8000 	nop.w

08012e40 <pxCurrentTCBConst>:
 8012e40:	200018f0 	.word	0x200018f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012e44:	bf00      	nop
 8012e46:	bf00      	nop

08012e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8012e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	607b      	str	r3, [r7, #4]
}
 8012e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012e62:	f7fe fd4d 	bl	8011900 <xTaskIncrementTick>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d003      	beq.n	8012e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012e6c:	4b06      	ldr	r3, [pc, #24]	@ (8012e88 <xPortSysTickHandler+0x40>)
 8012e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	2300      	movs	r3, #0
 8012e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	f383 8811 	msr	BASEPRI, r3
}
 8012e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012e80:	bf00      	nop
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	e000ed04 	.word	0xe000ed04

08012e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012e90:	4b0b      	ldr	r3, [pc, #44]	@ (8012ec0 <vPortSetupTimerInterrupt+0x34>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012e96:	4b0b      	ldr	r3, [pc, #44]	@ (8012ec4 <vPortSetupTimerInterrupt+0x38>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec8 <vPortSetupTimerInterrupt+0x3c>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8012ecc <vPortSetupTimerInterrupt+0x40>)
 8012ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ea6:	099b      	lsrs	r3, r3, #6
 8012ea8:	4a09      	ldr	r2, [pc, #36]	@ (8012ed0 <vPortSetupTimerInterrupt+0x44>)
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012eae:	4b04      	ldr	r3, [pc, #16]	@ (8012ec0 <vPortSetupTimerInterrupt+0x34>)
 8012eb0:	2207      	movs	r2, #7
 8012eb2:	601a      	str	r2, [r3, #0]
}
 8012eb4:	bf00      	nop
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop
 8012ec0:	e000e010 	.word	0xe000e010
 8012ec4:	e000e018 	.word	0xe000e018
 8012ec8:	20000008 	.word	0x20000008
 8012ecc:	10624dd3 	.word	0x10624dd3
 8012ed0:	e000e014 	.word	0xe000e014

08012ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012ee4 <vPortEnableVFP+0x10>
 8012ed8:	6801      	ldr	r1, [r0, #0]
 8012eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012ede:	6001      	str	r1, [r0, #0]
 8012ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ee2:	bf00      	nop
 8012ee4:	e000ed88 	.word	0xe000ed88

08012ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012eee:	f3ef 8305 	mrs	r3, IPSR
 8012ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2b0f      	cmp	r3, #15
 8012ef8:	d915      	bls.n	8012f26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012efa:	4a18      	ldr	r2, [pc, #96]	@ (8012f5c <vPortValidateInterruptPriority+0x74>)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	4413      	add	r3, r2
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012f04:	4b16      	ldr	r3, [pc, #88]	@ (8012f60 <vPortValidateInterruptPriority+0x78>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	7afa      	ldrb	r2, [r7, #11]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d20b      	bcs.n	8012f26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f12:	f383 8811 	msr	BASEPRI, r3
 8012f16:	f3bf 8f6f 	isb	sy
 8012f1a:	f3bf 8f4f 	dsb	sy
 8012f1e:	607b      	str	r3, [r7, #4]
}
 8012f20:	bf00      	nop
 8012f22:	bf00      	nop
 8012f24:	e7fd      	b.n	8012f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012f26:	4b0f      	ldr	r3, [pc, #60]	@ (8012f64 <vPortValidateInterruptPriority+0x7c>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8012f68 <vPortValidateInterruptPriority+0x80>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d90b      	bls.n	8012f4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f3a:	f383 8811 	msr	BASEPRI, r3
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	f3bf 8f4f 	dsb	sy
 8012f46:	603b      	str	r3, [r7, #0]
}
 8012f48:	bf00      	nop
 8012f4a:	bf00      	nop
 8012f4c:	e7fd      	b.n	8012f4a <vPortValidateInterruptPriority+0x62>
	}
 8012f4e:	bf00      	nop
 8012f50:	3714      	adds	r7, #20
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	e000e3f0 	.word	0xe000e3f0
 8012f60:	20001f1c 	.word	0x20001f1c
 8012f64:	e000ed0c 	.word	0xe000ed0c
 8012f68:	20001f20 	.word	0x20001f20

08012f6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b08a      	sub	sp, #40	@ 0x28
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012f74:	2300      	movs	r3, #0
 8012f76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012f78:	f7fe fbf4 	bl	8011764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80130f0 <pvPortMalloc+0x184>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d101      	bne.n	8012f88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012f84:	f000 f924 	bl	80131d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012f88:	4b5a      	ldr	r3, [pc, #360]	@ (80130f4 <pvPortMalloc+0x188>)
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	4013      	ands	r3, r2
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f040 8095 	bne.w	80130c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d01e      	beq.n	8012fda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012f9c:	2208      	movs	r2, #8
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f003 0307 	and.w	r3, r3, #7
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d015      	beq.n	8012fda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f023 0307 	bic.w	r3, r3, #7
 8012fb4:	3308      	adds	r3, #8
 8012fb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f003 0307 	and.w	r3, r3, #7
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00b      	beq.n	8012fda <pvPortMalloc+0x6e>
	__asm volatile
 8012fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fc6:	f383 8811 	msr	BASEPRI, r3
 8012fca:	f3bf 8f6f 	isb	sy
 8012fce:	f3bf 8f4f 	dsb	sy
 8012fd2:	617b      	str	r3, [r7, #20]
}
 8012fd4:	bf00      	nop
 8012fd6:	bf00      	nop
 8012fd8:	e7fd      	b.n	8012fd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d06f      	beq.n	80130c0 <pvPortMalloc+0x154>
 8012fe0:	4b45      	ldr	r3, [pc, #276]	@ (80130f8 <pvPortMalloc+0x18c>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d86a      	bhi.n	80130c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012fea:	4b44      	ldr	r3, [pc, #272]	@ (80130fc <pvPortMalloc+0x190>)
 8012fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012fee:	4b43      	ldr	r3, [pc, #268]	@ (80130fc <pvPortMalloc+0x190>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ff4:	e004      	b.n	8013000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	429a      	cmp	r2, r3
 8013008:	d903      	bls.n	8013012 <pvPortMalloc+0xa6>
 801300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1f1      	bne.n	8012ff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013012:	4b37      	ldr	r3, [pc, #220]	@ (80130f0 <pvPortMalloc+0x184>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013018:	429a      	cmp	r2, r3
 801301a:	d051      	beq.n	80130c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801301c:	6a3b      	ldr	r3, [r7, #32]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2208      	movs	r2, #8
 8013022:	4413      	add	r3, r2
 8013024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013030:	685a      	ldr	r2, [r3, #4]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	1ad2      	subs	r2, r2, r3
 8013036:	2308      	movs	r3, #8
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	429a      	cmp	r2, r3
 801303c:	d920      	bls.n	8013080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	4413      	add	r3, r2
 8013044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	f003 0307 	and.w	r3, r3, #7
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00b      	beq.n	8013068 <pvPortMalloc+0xfc>
	__asm volatile
 8013050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	613b      	str	r3, [r7, #16]
}
 8013062:	bf00      	nop
 8013064:	bf00      	nop
 8013066:	e7fd      	b.n	8013064 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801306a:	685a      	ldr	r2, [r3, #4]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	1ad2      	subs	r2, r2, r3
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801307a:	69b8      	ldr	r0, [r7, #24]
 801307c:	f000 f90a 	bl	8013294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013080:	4b1d      	ldr	r3, [pc, #116]	@ (80130f8 <pvPortMalloc+0x18c>)
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	4a1b      	ldr	r2, [pc, #108]	@ (80130f8 <pvPortMalloc+0x18c>)
 801308c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801308e:	4b1a      	ldr	r3, [pc, #104]	@ (80130f8 <pvPortMalloc+0x18c>)
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	4b1b      	ldr	r3, [pc, #108]	@ (8013100 <pvPortMalloc+0x194>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	429a      	cmp	r2, r3
 8013098:	d203      	bcs.n	80130a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801309a:	4b17      	ldr	r3, [pc, #92]	@ (80130f8 <pvPortMalloc+0x18c>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a18      	ldr	r2, [pc, #96]	@ (8013100 <pvPortMalloc+0x194>)
 80130a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80130a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a4:	685a      	ldr	r2, [r3, #4]
 80130a6:	4b13      	ldr	r3, [pc, #76]	@ (80130f4 <pvPortMalloc+0x188>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	431a      	orrs	r2, r3
 80130ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80130b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80130b6:	4b13      	ldr	r3, [pc, #76]	@ (8013104 <pvPortMalloc+0x198>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	3301      	adds	r3, #1
 80130bc:	4a11      	ldr	r2, [pc, #68]	@ (8013104 <pvPortMalloc+0x198>)
 80130be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80130c0:	f7fe fb5e 	bl	8011780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	f003 0307 	and.w	r3, r3, #7
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00b      	beq.n	80130e6 <pvPortMalloc+0x17a>
	__asm volatile
 80130ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	60fb      	str	r3, [r7, #12]
}
 80130e0:	bf00      	nop
 80130e2:	bf00      	nop
 80130e4:	e7fd      	b.n	80130e2 <pvPortMalloc+0x176>
	return pvReturn;
 80130e6:	69fb      	ldr	r3, [r7, #28]
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3728      	adds	r7, #40	@ 0x28
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	20004f2c 	.word	0x20004f2c
 80130f4:	20004f40 	.word	0x20004f40
 80130f8:	20004f30 	.word	0x20004f30
 80130fc:	20004f24 	.word	0x20004f24
 8013100:	20004f34 	.word	0x20004f34
 8013104:	20004f38 	.word	0x20004f38

08013108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d04f      	beq.n	80131ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801311a:	2308      	movs	r3, #8
 801311c:	425b      	negs	r3, r3
 801311e:	697a      	ldr	r2, [r7, #20]
 8013120:	4413      	add	r3, r2
 8013122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	4b25      	ldr	r3, [pc, #148]	@ (80131c4 <vPortFree+0xbc>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4013      	ands	r3, r2
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10b      	bne.n	801314e <vPortFree+0x46>
	__asm volatile
 8013136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801313a:	f383 8811 	msr	BASEPRI, r3
 801313e:	f3bf 8f6f 	isb	sy
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	60fb      	str	r3, [r7, #12]
}
 8013148:	bf00      	nop
 801314a:	bf00      	nop
 801314c:	e7fd      	b.n	801314a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00b      	beq.n	801316e <vPortFree+0x66>
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	60bb      	str	r3, [r7, #8]
}
 8013168:	bf00      	nop
 801316a:	bf00      	nop
 801316c:	e7fd      	b.n	801316a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	685a      	ldr	r2, [r3, #4]
 8013172:	4b14      	ldr	r3, [pc, #80]	@ (80131c4 <vPortFree+0xbc>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4013      	ands	r3, r2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d01e      	beq.n	80131ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d11a      	bne.n	80131ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	685a      	ldr	r2, [r3, #4]
 8013188:	4b0e      	ldr	r3, [pc, #56]	@ (80131c4 <vPortFree+0xbc>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	43db      	mvns	r3, r3
 801318e:	401a      	ands	r2, r3
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013194:	f7fe fae6 	bl	8011764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	685a      	ldr	r2, [r3, #4]
 801319c:	4b0a      	ldr	r3, [pc, #40]	@ (80131c8 <vPortFree+0xc0>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4413      	add	r3, r2
 80131a2:	4a09      	ldr	r2, [pc, #36]	@ (80131c8 <vPortFree+0xc0>)
 80131a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80131a6:	6938      	ldr	r0, [r7, #16]
 80131a8:	f000 f874 	bl	8013294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80131ac:	4b07      	ldr	r3, [pc, #28]	@ (80131cc <vPortFree+0xc4>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	3301      	adds	r3, #1
 80131b2:	4a06      	ldr	r2, [pc, #24]	@ (80131cc <vPortFree+0xc4>)
 80131b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80131b6:	f7fe fae3 	bl	8011780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80131ba:	bf00      	nop
 80131bc:	3718      	adds	r7, #24
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20004f40 	.word	0x20004f40
 80131c8:	20004f30 	.word	0x20004f30
 80131cc:	20004f3c 	.word	0x20004f3c

080131d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80131d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80131da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80131dc:	4b27      	ldr	r3, [pc, #156]	@ (801327c <prvHeapInit+0xac>)
 80131de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f003 0307 	and.w	r3, r3, #7
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00c      	beq.n	8013204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	3307      	adds	r3, #7
 80131ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f023 0307 	bic.w	r3, r3, #7
 80131f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	4a1f      	ldr	r2, [pc, #124]	@ (801327c <prvHeapInit+0xac>)
 8013200:	4413      	add	r3, r2
 8013202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013208:	4a1d      	ldr	r2, [pc, #116]	@ (8013280 <prvHeapInit+0xb0>)
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801320e:	4b1c      	ldr	r3, [pc, #112]	@ (8013280 <prvHeapInit+0xb0>)
 8013210:	2200      	movs	r2, #0
 8013212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	68ba      	ldr	r2, [r7, #8]
 8013218:	4413      	add	r3, r2
 801321a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801321c:	2208      	movs	r2, #8
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	1a9b      	subs	r3, r3, r2
 8013222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f023 0307 	bic.w	r3, r3, #7
 801322a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	4a15      	ldr	r2, [pc, #84]	@ (8013284 <prvHeapInit+0xb4>)
 8013230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013232:	4b14      	ldr	r3, [pc, #80]	@ (8013284 <prvHeapInit+0xb4>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2200      	movs	r2, #0
 8013238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801323a:	4b12      	ldr	r3, [pc, #72]	@ (8013284 <prvHeapInit+0xb4>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2200      	movs	r2, #0
 8013240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	68fa      	ldr	r2, [r7, #12]
 801324a:	1ad2      	subs	r2, r2, r3
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013250:	4b0c      	ldr	r3, [pc, #48]	@ (8013284 <prvHeapInit+0xb4>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	4a0a      	ldr	r2, [pc, #40]	@ (8013288 <prvHeapInit+0xb8>)
 801325e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	4a09      	ldr	r2, [pc, #36]	@ (801328c <prvHeapInit+0xbc>)
 8013266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013268:	4b09      	ldr	r3, [pc, #36]	@ (8013290 <prvHeapInit+0xc0>)
 801326a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801326e:	601a      	str	r2, [r3, #0]
}
 8013270:	bf00      	nop
 8013272:	3714      	adds	r7, #20
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr
 801327c:	20001f24 	.word	0x20001f24
 8013280:	20004f24 	.word	0x20004f24
 8013284:	20004f2c 	.word	0x20004f2c
 8013288:	20004f34 	.word	0x20004f34
 801328c:	20004f30 	.word	0x20004f30
 8013290:	20004f40 	.word	0x20004f40

08013294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801329c:	4b28      	ldr	r3, [pc, #160]	@ (8013340 <prvInsertBlockIntoFreeList+0xac>)
 801329e:	60fb      	str	r3, [r7, #12]
 80132a0:	e002      	b.n	80132a8 <prvInsertBlockIntoFreeList+0x14>
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	60fb      	str	r3, [r7, #12]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d8f7      	bhi.n	80132a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	4413      	add	r3, r2
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d108      	bne.n	80132d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	441a      	add	r2, r3
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	68ba      	ldr	r2, [r7, #8]
 80132e0:	441a      	add	r2, r3
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d118      	bne.n	801331c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	4b15      	ldr	r3, [pc, #84]	@ (8013344 <prvInsertBlockIntoFreeList+0xb0>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d00d      	beq.n	8013312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685a      	ldr	r2, [r3, #4]
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	441a      	add	r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	601a      	str	r2, [r3, #0]
 8013310:	e008      	b.n	8013324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013312:	4b0c      	ldr	r3, [pc, #48]	@ (8013344 <prvInsertBlockIntoFreeList+0xb0>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	601a      	str	r2, [r3, #0]
 801331a:	e003      	b.n	8013324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013324:	68fa      	ldr	r2, [r7, #12]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	429a      	cmp	r2, r3
 801332a:	d002      	beq.n	8013332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013332:	bf00      	nop
 8013334:	3714      	adds	r7, #20
 8013336:	46bd      	mov	sp, r7
 8013338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333c:	4770      	bx	lr
 801333e:	bf00      	nop
 8013340:	20004f24 	.word	0x20004f24
 8013344:	20004f2c 	.word	0x20004f2c

08013348 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d003      	beq.n	8013360 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8013358:	f06f 0301 	mvn.w	r3, #1
 801335c:	60fb      	str	r3, [r7, #12]
 801335e:	e014      	b.n	801338a <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8013360:	4a0c      	ldr	r2, [pc, #48]	@ (8013394 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013368:	69db      	ldr	r3, [r3, #28]
 801336a:	490b      	ldr	r1, [pc, #44]	@ (8013398 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013372:	6839      	ldr	r1, [r7, #0]
 8013374:	4610      	mov	r0, r2
 8013376:	4798      	blx	r3
 8013378:	4603      	mov	r3, r0
 801337a:	2b00      	cmp	r3, #0
 801337c:	da03      	bge.n	8013386 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801337e:	f06f 0304 	mvn.w	r3, #4
 8013382:	60fb      	str	r3, [r7, #12]
 8013384:	e001      	b.n	801338a <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8013386:	2300      	movs	r3, #0
 8013388:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801338a:	68fb      	ldr	r3, [r7, #12]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3710      	adds	r7, #16
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	20004f48 	.word	0x20004f48
 8013398:	20004f44 	.word	0x20004f44

0801339c <std>:
 801339c:	2300      	movs	r3, #0
 801339e:	b510      	push	{r4, lr}
 80133a0:	4604      	mov	r4, r0
 80133a2:	e9c0 3300 	strd	r3, r3, [r0]
 80133a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133aa:	6083      	str	r3, [r0, #8]
 80133ac:	8181      	strh	r1, [r0, #12]
 80133ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80133b0:	81c2      	strh	r2, [r0, #14]
 80133b2:	6183      	str	r3, [r0, #24]
 80133b4:	4619      	mov	r1, r3
 80133b6:	2208      	movs	r2, #8
 80133b8:	305c      	adds	r0, #92	@ 0x5c
 80133ba:	f000 f9d3 	bl	8013764 <memset>
 80133be:	4b0d      	ldr	r3, [pc, #52]	@ (80133f4 <std+0x58>)
 80133c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80133c2:	4b0d      	ldr	r3, [pc, #52]	@ (80133f8 <std+0x5c>)
 80133c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80133c6:	4b0d      	ldr	r3, [pc, #52]	@ (80133fc <std+0x60>)
 80133c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80133ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013400 <std+0x64>)
 80133cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80133ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013404 <std+0x68>)
 80133d0:	6224      	str	r4, [r4, #32]
 80133d2:	429c      	cmp	r4, r3
 80133d4:	d006      	beq.n	80133e4 <std+0x48>
 80133d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80133da:	4294      	cmp	r4, r2
 80133dc:	d002      	beq.n	80133e4 <std+0x48>
 80133de:	33d0      	adds	r3, #208	@ 0xd0
 80133e0:	429c      	cmp	r4, r3
 80133e2:	d105      	bne.n	80133f0 <std+0x54>
 80133e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80133e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ec:	f000 ba88 	b.w	8013900 <__retarget_lock_init_recursive>
 80133f0:	bd10      	pop	{r4, pc}
 80133f2:	bf00      	nop
 80133f4:	08013545 	.word	0x08013545
 80133f8:	08013567 	.word	0x08013567
 80133fc:	0801359f 	.word	0x0801359f
 8013400:	080135c3 	.word	0x080135c3
 8013404:	20004f4c 	.word	0x20004f4c

08013408 <stdio_exit_handler>:
 8013408:	4a02      	ldr	r2, [pc, #8]	@ (8013414 <stdio_exit_handler+0xc>)
 801340a:	4903      	ldr	r1, [pc, #12]	@ (8013418 <stdio_exit_handler+0x10>)
 801340c:	4803      	ldr	r0, [pc, #12]	@ (801341c <stdio_exit_handler+0x14>)
 801340e:	f000 b869 	b.w	80134e4 <_fwalk_sglue>
 8013412:	bf00      	nop
 8013414:	20000114 	.word	0x20000114
 8013418:	0801446d 	.word	0x0801446d
 801341c:	20000124 	.word	0x20000124

08013420 <cleanup_stdio>:
 8013420:	6841      	ldr	r1, [r0, #4]
 8013422:	4b0c      	ldr	r3, [pc, #48]	@ (8013454 <cleanup_stdio+0x34>)
 8013424:	4299      	cmp	r1, r3
 8013426:	b510      	push	{r4, lr}
 8013428:	4604      	mov	r4, r0
 801342a:	d001      	beq.n	8013430 <cleanup_stdio+0x10>
 801342c:	f001 f81e 	bl	801446c <_fflush_r>
 8013430:	68a1      	ldr	r1, [r4, #8]
 8013432:	4b09      	ldr	r3, [pc, #36]	@ (8013458 <cleanup_stdio+0x38>)
 8013434:	4299      	cmp	r1, r3
 8013436:	d002      	beq.n	801343e <cleanup_stdio+0x1e>
 8013438:	4620      	mov	r0, r4
 801343a:	f001 f817 	bl	801446c <_fflush_r>
 801343e:	68e1      	ldr	r1, [r4, #12]
 8013440:	4b06      	ldr	r3, [pc, #24]	@ (801345c <cleanup_stdio+0x3c>)
 8013442:	4299      	cmp	r1, r3
 8013444:	d004      	beq.n	8013450 <cleanup_stdio+0x30>
 8013446:	4620      	mov	r0, r4
 8013448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801344c:	f001 b80e 	b.w	801446c <_fflush_r>
 8013450:	bd10      	pop	{r4, pc}
 8013452:	bf00      	nop
 8013454:	20004f4c 	.word	0x20004f4c
 8013458:	20004fb4 	.word	0x20004fb4
 801345c:	2000501c 	.word	0x2000501c

08013460 <global_stdio_init.part.0>:
 8013460:	b510      	push	{r4, lr}
 8013462:	4b0b      	ldr	r3, [pc, #44]	@ (8013490 <global_stdio_init.part.0+0x30>)
 8013464:	4c0b      	ldr	r4, [pc, #44]	@ (8013494 <global_stdio_init.part.0+0x34>)
 8013466:	4a0c      	ldr	r2, [pc, #48]	@ (8013498 <global_stdio_init.part.0+0x38>)
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	4620      	mov	r0, r4
 801346c:	2200      	movs	r2, #0
 801346e:	2104      	movs	r1, #4
 8013470:	f7ff ff94 	bl	801339c <std>
 8013474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013478:	2201      	movs	r2, #1
 801347a:	2109      	movs	r1, #9
 801347c:	f7ff ff8e 	bl	801339c <std>
 8013480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013484:	2202      	movs	r2, #2
 8013486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801348a:	2112      	movs	r1, #18
 801348c:	f7ff bf86 	b.w	801339c <std>
 8013490:	20005084 	.word	0x20005084
 8013494:	20004f4c 	.word	0x20004f4c
 8013498:	08013409 	.word	0x08013409

0801349c <__sfp_lock_acquire>:
 801349c:	4801      	ldr	r0, [pc, #4]	@ (80134a4 <__sfp_lock_acquire+0x8>)
 801349e:	f000 ba30 	b.w	8013902 <__retarget_lock_acquire_recursive>
 80134a2:	bf00      	nop
 80134a4:	2000508d 	.word	0x2000508d

080134a8 <__sfp_lock_release>:
 80134a8:	4801      	ldr	r0, [pc, #4]	@ (80134b0 <__sfp_lock_release+0x8>)
 80134aa:	f000 ba2b 	b.w	8013904 <__retarget_lock_release_recursive>
 80134ae:	bf00      	nop
 80134b0:	2000508d 	.word	0x2000508d

080134b4 <__sinit>:
 80134b4:	b510      	push	{r4, lr}
 80134b6:	4604      	mov	r4, r0
 80134b8:	f7ff fff0 	bl	801349c <__sfp_lock_acquire>
 80134bc:	6a23      	ldr	r3, [r4, #32]
 80134be:	b11b      	cbz	r3, 80134c8 <__sinit+0x14>
 80134c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134c4:	f7ff bff0 	b.w	80134a8 <__sfp_lock_release>
 80134c8:	4b04      	ldr	r3, [pc, #16]	@ (80134dc <__sinit+0x28>)
 80134ca:	6223      	str	r3, [r4, #32]
 80134cc:	4b04      	ldr	r3, [pc, #16]	@ (80134e0 <__sinit+0x2c>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d1f5      	bne.n	80134c0 <__sinit+0xc>
 80134d4:	f7ff ffc4 	bl	8013460 <global_stdio_init.part.0>
 80134d8:	e7f2      	b.n	80134c0 <__sinit+0xc>
 80134da:	bf00      	nop
 80134dc:	08013421 	.word	0x08013421
 80134e0:	20005084 	.word	0x20005084

080134e4 <_fwalk_sglue>:
 80134e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134e8:	4607      	mov	r7, r0
 80134ea:	4688      	mov	r8, r1
 80134ec:	4614      	mov	r4, r2
 80134ee:	2600      	movs	r6, #0
 80134f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134f4:	f1b9 0901 	subs.w	r9, r9, #1
 80134f8:	d505      	bpl.n	8013506 <_fwalk_sglue+0x22>
 80134fa:	6824      	ldr	r4, [r4, #0]
 80134fc:	2c00      	cmp	r4, #0
 80134fe:	d1f7      	bne.n	80134f0 <_fwalk_sglue+0xc>
 8013500:	4630      	mov	r0, r6
 8013502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013506:	89ab      	ldrh	r3, [r5, #12]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d907      	bls.n	801351c <_fwalk_sglue+0x38>
 801350c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013510:	3301      	adds	r3, #1
 8013512:	d003      	beq.n	801351c <_fwalk_sglue+0x38>
 8013514:	4629      	mov	r1, r5
 8013516:	4638      	mov	r0, r7
 8013518:	47c0      	blx	r8
 801351a:	4306      	orrs	r6, r0
 801351c:	3568      	adds	r5, #104	@ 0x68
 801351e:	e7e9      	b.n	80134f4 <_fwalk_sglue+0x10>

08013520 <iprintf>:
 8013520:	b40f      	push	{r0, r1, r2, r3}
 8013522:	b507      	push	{r0, r1, r2, lr}
 8013524:	4906      	ldr	r1, [pc, #24]	@ (8013540 <iprintf+0x20>)
 8013526:	ab04      	add	r3, sp, #16
 8013528:	6808      	ldr	r0, [r1, #0]
 801352a:	f853 2b04 	ldr.w	r2, [r3], #4
 801352e:	6881      	ldr	r1, [r0, #8]
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	f000 fc71 	bl	8013e18 <_vfiprintf_r>
 8013536:	b003      	add	sp, #12
 8013538:	f85d eb04 	ldr.w	lr, [sp], #4
 801353c:	b004      	add	sp, #16
 801353e:	4770      	bx	lr
 8013540:	20000120 	.word	0x20000120

08013544 <__sread>:
 8013544:	b510      	push	{r4, lr}
 8013546:	460c      	mov	r4, r1
 8013548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801354c:	f000 f98a 	bl	8013864 <_read_r>
 8013550:	2800      	cmp	r0, #0
 8013552:	bfab      	itete	ge
 8013554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013556:	89a3      	ldrhlt	r3, [r4, #12]
 8013558:	181b      	addge	r3, r3, r0
 801355a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801355e:	bfac      	ite	ge
 8013560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013562:	81a3      	strhlt	r3, [r4, #12]
 8013564:	bd10      	pop	{r4, pc}

08013566 <__swrite>:
 8013566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801356a:	461f      	mov	r7, r3
 801356c:	898b      	ldrh	r3, [r1, #12]
 801356e:	05db      	lsls	r3, r3, #23
 8013570:	4605      	mov	r5, r0
 8013572:	460c      	mov	r4, r1
 8013574:	4616      	mov	r6, r2
 8013576:	d505      	bpl.n	8013584 <__swrite+0x1e>
 8013578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801357c:	2302      	movs	r3, #2
 801357e:	2200      	movs	r2, #0
 8013580:	f000 f95e 	bl	8013840 <_lseek_r>
 8013584:	89a3      	ldrh	r3, [r4, #12]
 8013586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801358a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801358e:	81a3      	strh	r3, [r4, #12]
 8013590:	4632      	mov	r2, r6
 8013592:	463b      	mov	r3, r7
 8013594:	4628      	mov	r0, r5
 8013596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801359a:	f000 b975 	b.w	8013888 <_write_r>

0801359e <__sseek>:
 801359e:	b510      	push	{r4, lr}
 80135a0:	460c      	mov	r4, r1
 80135a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135a6:	f000 f94b 	bl	8013840 <_lseek_r>
 80135aa:	1c43      	adds	r3, r0, #1
 80135ac:	89a3      	ldrh	r3, [r4, #12]
 80135ae:	bf15      	itete	ne
 80135b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80135b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80135b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80135ba:	81a3      	strheq	r3, [r4, #12]
 80135bc:	bf18      	it	ne
 80135be:	81a3      	strhne	r3, [r4, #12]
 80135c0:	bd10      	pop	{r4, pc}

080135c2 <__sclose>:
 80135c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135c6:	f000 b8d5 	b.w	8013774 <_close_r>

080135ca <_vsniprintf_r>:
 80135ca:	b530      	push	{r4, r5, lr}
 80135cc:	4614      	mov	r4, r2
 80135ce:	2c00      	cmp	r4, #0
 80135d0:	b09b      	sub	sp, #108	@ 0x6c
 80135d2:	4605      	mov	r5, r0
 80135d4:	461a      	mov	r2, r3
 80135d6:	da05      	bge.n	80135e4 <_vsniprintf_r+0x1a>
 80135d8:	238b      	movs	r3, #139	@ 0x8b
 80135da:	6003      	str	r3, [r0, #0]
 80135dc:	f04f 30ff 	mov.w	r0, #4294967295
 80135e0:	b01b      	add	sp, #108	@ 0x6c
 80135e2:	bd30      	pop	{r4, r5, pc}
 80135e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80135e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80135ec:	bf14      	ite	ne
 80135ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135f2:	4623      	moveq	r3, r4
 80135f4:	9302      	str	r3, [sp, #8]
 80135f6:	9305      	str	r3, [sp, #20]
 80135f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80135fc:	9100      	str	r1, [sp, #0]
 80135fe:	9104      	str	r1, [sp, #16]
 8013600:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013604:	4669      	mov	r1, sp
 8013606:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013608:	f000 fae0 	bl	8013bcc <_svfiprintf_r>
 801360c:	1c43      	adds	r3, r0, #1
 801360e:	bfbc      	itt	lt
 8013610:	238b      	movlt	r3, #139	@ 0x8b
 8013612:	602b      	strlt	r3, [r5, #0]
 8013614:	2c00      	cmp	r4, #0
 8013616:	d0e3      	beq.n	80135e0 <_vsniprintf_r+0x16>
 8013618:	9b00      	ldr	r3, [sp, #0]
 801361a:	2200      	movs	r2, #0
 801361c:	701a      	strb	r2, [r3, #0]
 801361e:	e7df      	b.n	80135e0 <_vsniprintf_r+0x16>

08013620 <vsniprintf>:
 8013620:	b507      	push	{r0, r1, r2, lr}
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	4613      	mov	r3, r2
 8013626:	460a      	mov	r2, r1
 8013628:	4601      	mov	r1, r0
 801362a:	4803      	ldr	r0, [pc, #12]	@ (8013638 <vsniprintf+0x18>)
 801362c:	6800      	ldr	r0, [r0, #0]
 801362e:	f7ff ffcc 	bl	80135ca <_vsniprintf_r>
 8013632:	b003      	add	sp, #12
 8013634:	f85d fb04 	ldr.w	pc, [sp], #4
 8013638:	20000120 	.word	0x20000120

0801363c <__swbuf_r>:
 801363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363e:	460e      	mov	r6, r1
 8013640:	4614      	mov	r4, r2
 8013642:	4605      	mov	r5, r0
 8013644:	b118      	cbz	r0, 801364e <__swbuf_r+0x12>
 8013646:	6a03      	ldr	r3, [r0, #32]
 8013648:	b90b      	cbnz	r3, 801364e <__swbuf_r+0x12>
 801364a:	f7ff ff33 	bl	80134b4 <__sinit>
 801364e:	69a3      	ldr	r3, [r4, #24]
 8013650:	60a3      	str	r3, [r4, #8]
 8013652:	89a3      	ldrh	r3, [r4, #12]
 8013654:	071a      	lsls	r2, r3, #28
 8013656:	d501      	bpl.n	801365c <__swbuf_r+0x20>
 8013658:	6923      	ldr	r3, [r4, #16]
 801365a:	b943      	cbnz	r3, 801366e <__swbuf_r+0x32>
 801365c:	4621      	mov	r1, r4
 801365e:	4628      	mov	r0, r5
 8013660:	f000 f82a 	bl	80136b8 <__swsetup_r>
 8013664:	b118      	cbz	r0, 801366e <__swbuf_r+0x32>
 8013666:	f04f 37ff 	mov.w	r7, #4294967295
 801366a:	4638      	mov	r0, r7
 801366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366e:	6823      	ldr	r3, [r4, #0]
 8013670:	6922      	ldr	r2, [r4, #16]
 8013672:	1a98      	subs	r0, r3, r2
 8013674:	6963      	ldr	r3, [r4, #20]
 8013676:	b2f6      	uxtb	r6, r6
 8013678:	4283      	cmp	r3, r0
 801367a:	4637      	mov	r7, r6
 801367c:	dc05      	bgt.n	801368a <__swbuf_r+0x4e>
 801367e:	4621      	mov	r1, r4
 8013680:	4628      	mov	r0, r5
 8013682:	f000 fef3 	bl	801446c <_fflush_r>
 8013686:	2800      	cmp	r0, #0
 8013688:	d1ed      	bne.n	8013666 <__swbuf_r+0x2a>
 801368a:	68a3      	ldr	r3, [r4, #8]
 801368c:	3b01      	subs	r3, #1
 801368e:	60a3      	str	r3, [r4, #8]
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	6022      	str	r2, [r4, #0]
 8013696:	701e      	strb	r6, [r3, #0]
 8013698:	6962      	ldr	r2, [r4, #20]
 801369a:	1c43      	adds	r3, r0, #1
 801369c:	429a      	cmp	r2, r3
 801369e:	d004      	beq.n	80136aa <__swbuf_r+0x6e>
 80136a0:	89a3      	ldrh	r3, [r4, #12]
 80136a2:	07db      	lsls	r3, r3, #31
 80136a4:	d5e1      	bpl.n	801366a <__swbuf_r+0x2e>
 80136a6:	2e0a      	cmp	r6, #10
 80136a8:	d1df      	bne.n	801366a <__swbuf_r+0x2e>
 80136aa:	4621      	mov	r1, r4
 80136ac:	4628      	mov	r0, r5
 80136ae:	f000 fedd 	bl	801446c <_fflush_r>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d0d9      	beq.n	801366a <__swbuf_r+0x2e>
 80136b6:	e7d6      	b.n	8013666 <__swbuf_r+0x2a>

080136b8 <__swsetup_r>:
 80136b8:	b538      	push	{r3, r4, r5, lr}
 80136ba:	4b29      	ldr	r3, [pc, #164]	@ (8013760 <__swsetup_r+0xa8>)
 80136bc:	4605      	mov	r5, r0
 80136be:	6818      	ldr	r0, [r3, #0]
 80136c0:	460c      	mov	r4, r1
 80136c2:	b118      	cbz	r0, 80136cc <__swsetup_r+0x14>
 80136c4:	6a03      	ldr	r3, [r0, #32]
 80136c6:	b90b      	cbnz	r3, 80136cc <__swsetup_r+0x14>
 80136c8:	f7ff fef4 	bl	80134b4 <__sinit>
 80136cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136d0:	0719      	lsls	r1, r3, #28
 80136d2:	d422      	bmi.n	801371a <__swsetup_r+0x62>
 80136d4:	06da      	lsls	r2, r3, #27
 80136d6:	d407      	bmi.n	80136e8 <__swsetup_r+0x30>
 80136d8:	2209      	movs	r2, #9
 80136da:	602a      	str	r2, [r5, #0]
 80136dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136e0:	81a3      	strh	r3, [r4, #12]
 80136e2:	f04f 30ff 	mov.w	r0, #4294967295
 80136e6:	e033      	b.n	8013750 <__swsetup_r+0x98>
 80136e8:	0758      	lsls	r0, r3, #29
 80136ea:	d512      	bpl.n	8013712 <__swsetup_r+0x5a>
 80136ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80136ee:	b141      	cbz	r1, 8013702 <__swsetup_r+0x4a>
 80136f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80136f4:	4299      	cmp	r1, r3
 80136f6:	d002      	beq.n	80136fe <__swsetup_r+0x46>
 80136f8:	4628      	mov	r0, r5
 80136fa:	f000 f913 	bl	8013924 <_free_r>
 80136fe:	2300      	movs	r3, #0
 8013700:	6363      	str	r3, [r4, #52]	@ 0x34
 8013702:	89a3      	ldrh	r3, [r4, #12]
 8013704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013708:	81a3      	strh	r3, [r4, #12]
 801370a:	2300      	movs	r3, #0
 801370c:	6063      	str	r3, [r4, #4]
 801370e:	6923      	ldr	r3, [r4, #16]
 8013710:	6023      	str	r3, [r4, #0]
 8013712:	89a3      	ldrh	r3, [r4, #12]
 8013714:	f043 0308 	orr.w	r3, r3, #8
 8013718:	81a3      	strh	r3, [r4, #12]
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	b94b      	cbnz	r3, 8013732 <__swsetup_r+0x7a>
 801371e:	89a3      	ldrh	r3, [r4, #12]
 8013720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013728:	d003      	beq.n	8013732 <__swsetup_r+0x7a>
 801372a:	4621      	mov	r1, r4
 801372c:	4628      	mov	r0, r5
 801372e:	f000 feeb 	bl	8014508 <__smakebuf_r>
 8013732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013736:	f013 0201 	ands.w	r2, r3, #1
 801373a:	d00a      	beq.n	8013752 <__swsetup_r+0x9a>
 801373c:	2200      	movs	r2, #0
 801373e:	60a2      	str	r2, [r4, #8]
 8013740:	6962      	ldr	r2, [r4, #20]
 8013742:	4252      	negs	r2, r2
 8013744:	61a2      	str	r2, [r4, #24]
 8013746:	6922      	ldr	r2, [r4, #16]
 8013748:	b942      	cbnz	r2, 801375c <__swsetup_r+0xa4>
 801374a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801374e:	d1c5      	bne.n	80136dc <__swsetup_r+0x24>
 8013750:	bd38      	pop	{r3, r4, r5, pc}
 8013752:	0799      	lsls	r1, r3, #30
 8013754:	bf58      	it	pl
 8013756:	6962      	ldrpl	r2, [r4, #20]
 8013758:	60a2      	str	r2, [r4, #8]
 801375a:	e7f4      	b.n	8013746 <__swsetup_r+0x8e>
 801375c:	2000      	movs	r0, #0
 801375e:	e7f7      	b.n	8013750 <__swsetup_r+0x98>
 8013760:	20000120 	.word	0x20000120

08013764 <memset>:
 8013764:	4402      	add	r2, r0
 8013766:	4603      	mov	r3, r0
 8013768:	4293      	cmp	r3, r2
 801376a:	d100      	bne.n	801376e <memset+0xa>
 801376c:	4770      	bx	lr
 801376e:	f803 1b01 	strb.w	r1, [r3], #1
 8013772:	e7f9      	b.n	8013768 <memset+0x4>

08013774 <_close_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d06      	ldr	r5, [pc, #24]	@ (8013790 <_close_r+0x1c>)
 8013778:	2300      	movs	r3, #0
 801377a:	4604      	mov	r4, r0
 801377c:	4608      	mov	r0, r1
 801377e:	602b      	str	r3, [r5, #0]
 8013780:	f7ee f857 	bl	8001832 <_close>
 8013784:	1c43      	adds	r3, r0, #1
 8013786:	d102      	bne.n	801378e <_close_r+0x1a>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	b103      	cbz	r3, 801378e <_close_r+0x1a>
 801378c:	6023      	str	r3, [r4, #0]
 801378e:	bd38      	pop	{r3, r4, r5, pc}
 8013790:	20005088 	.word	0x20005088

08013794 <_reclaim_reent>:
 8013794:	4b29      	ldr	r3, [pc, #164]	@ (801383c <_reclaim_reent+0xa8>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4283      	cmp	r3, r0
 801379a:	b570      	push	{r4, r5, r6, lr}
 801379c:	4604      	mov	r4, r0
 801379e:	d04b      	beq.n	8013838 <_reclaim_reent+0xa4>
 80137a0:	69c3      	ldr	r3, [r0, #28]
 80137a2:	b1ab      	cbz	r3, 80137d0 <_reclaim_reent+0x3c>
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	b16b      	cbz	r3, 80137c4 <_reclaim_reent+0x30>
 80137a8:	2500      	movs	r5, #0
 80137aa:	69e3      	ldr	r3, [r4, #28]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	5959      	ldr	r1, [r3, r5]
 80137b0:	2900      	cmp	r1, #0
 80137b2:	d13b      	bne.n	801382c <_reclaim_reent+0x98>
 80137b4:	3504      	adds	r5, #4
 80137b6:	2d80      	cmp	r5, #128	@ 0x80
 80137b8:	d1f7      	bne.n	80137aa <_reclaim_reent+0x16>
 80137ba:	69e3      	ldr	r3, [r4, #28]
 80137bc:	4620      	mov	r0, r4
 80137be:	68d9      	ldr	r1, [r3, #12]
 80137c0:	f000 f8b0 	bl	8013924 <_free_r>
 80137c4:	69e3      	ldr	r3, [r4, #28]
 80137c6:	6819      	ldr	r1, [r3, #0]
 80137c8:	b111      	cbz	r1, 80137d0 <_reclaim_reent+0x3c>
 80137ca:	4620      	mov	r0, r4
 80137cc:	f000 f8aa 	bl	8013924 <_free_r>
 80137d0:	6961      	ldr	r1, [r4, #20]
 80137d2:	b111      	cbz	r1, 80137da <_reclaim_reent+0x46>
 80137d4:	4620      	mov	r0, r4
 80137d6:	f000 f8a5 	bl	8013924 <_free_r>
 80137da:	69e1      	ldr	r1, [r4, #28]
 80137dc:	b111      	cbz	r1, 80137e4 <_reclaim_reent+0x50>
 80137de:	4620      	mov	r0, r4
 80137e0:	f000 f8a0 	bl	8013924 <_free_r>
 80137e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80137e6:	b111      	cbz	r1, 80137ee <_reclaim_reent+0x5a>
 80137e8:	4620      	mov	r0, r4
 80137ea:	f000 f89b 	bl	8013924 <_free_r>
 80137ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137f0:	b111      	cbz	r1, 80137f8 <_reclaim_reent+0x64>
 80137f2:	4620      	mov	r0, r4
 80137f4:	f000 f896 	bl	8013924 <_free_r>
 80137f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80137fa:	b111      	cbz	r1, 8013802 <_reclaim_reent+0x6e>
 80137fc:	4620      	mov	r0, r4
 80137fe:	f000 f891 	bl	8013924 <_free_r>
 8013802:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013804:	b111      	cbz	r1, 801380c <_reclaim_reent+0x78>
 8013806:	4620      	mov	r0, r4
 8013808:	f000 f88c 	bl	8013924 <_free_r>
 801380c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801380e:	b111      	cbz	r1, 8013816 <_reclaim_reent+0x82>
 8013810:	4620      	mov	r0, r4
 8013812:	f000 f887 	bl	8013924 <_free_r>
 8013816:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013818:	b111      	cbz	r1, 8013820 <_reclaim_reent+0x8c>
 801381a:	4620      	mov	r0, r4
 801381c:	f000 f882 	bl	8013924 <_free_r>
 8013820:	6a23      	ldr	r3, [r4, #32]
 8013822:	b14b      	cbz	r3, 8013838 <_reclaim_reent+0xa4>
 8013824:	4620      	mov	r0, r4
 8013826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801382a:	4718      	bx	r3
 801382c:	680e      	ldr	r6, [r1, #0]
 801382e:	4620      	mov	r0, r4
 8013830:	f000 f878 	bl	8013924 <_free_r>
 8013834:	4631      	mov	r1, r6
 8013836:	e7bb      	b.n	80137b0 <_reclaim_reent+0x1c>
 8013838:	bd70      	pop	{r4, r5, r6, pc}
 801383a:	bf00      	nop
 801383c:	20000120 	.word	0x20000120

08013840 <_lseek_r>:
 8013840:	b538      	push	{r3, r4, r5, lr}
 8013842:	4d07      	ldr	r5, [pc, #28]	@ (8013860 <_lseek_r+0x20>)
 8013844:	4604      	mov	r4, r0
 8013846:	4608      	mov	r0, r1
 8013848:	4611      	mov	r1, r2
 801384a:	2200      	movs	r2, #0
 801384c:	602a      	str	r2, [r5, #0]
 801384e:	461a      	mov	r2, r3
 8013850:	f7ee f816 	bl	8001880 <_lseek>
 8013854:	1c43      	adds	r3, r0, #1
 8013856:	d102      	bne.n	801385e <_lseek_r+0x1e>
 8013858:	682b      	ldr	r3, [r5, #0]
 801385a:	b103      	cbz	r3, 801385e <_lseek_r+0x1e>
 801385c:	6023      	str	r3, [r4, #0]
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	20005088 	.word	0x20005088

08013864 <_read_r>:
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4d07      	ldr	r5, [pc, #28]	@ (8013884 <_read_r+0x20>)
 8013868:	4604      	mov	r4, r0
 801386a:	4608      	mov	r0, r1
 801386c:	4611      	mov	r1, r2
 801386e:	2200      	movs	r2, #0
 8013870:	602a      	str	r2, [r5, #0]
 8013872:	461a      	mov	r2, r3
 8013874:	f7ed ffc0 	bl	80017f8 <_read>
 8013878:	1c43      	adds	r3, r0, #1
 801387a:	d102      	bne.n	8013882 <_read_r+0x1e>
 801387c:	682b      	ldr	r3, [r5, #0]
 801387e:	b103      	cbz	r3, 8013882 <_read_r+0x1e>
 8013880:	6023      	str	r3, [r4, #0]
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	20005088 	.word	0x20005088

08013888 <_write_r>:
 8013888:	b538      	push	{r3, r4, r5, lr}
 801388a:	4d07      	ldr	r5, [pc, #28]	@ (80138a8 <_write_r+0x20>)
 801388c:	4604      	mov	r4, r0
 801388e:	4608      	mov	r0, r1
 8013890:	4611      	mov	r1, r2
 8013892:	2200      	movs	r2, #0
 8013894:	602a      	str	r2, [r5, #0]
 8013896:	461a      	mov	r2, r3
 8013898:	f7ec fe98 	bl	80005cc <_write>
 801389c:	1c43      	adds	r3, r0, #1
 801389e:	d102      	bne.n	80138a6 <_write_r+0x1e>
 80138a0:	682b      	ldr	r3, [r5, #0]
 80138a2:	b103      	cbz	r3, 80138a6 <_write_r+0x1e>
 80138a4:	6023      	str	r3, [r4, #0]
 80138a6:	bd38      	pop	{r3, r4, r5, pc}
 80138a8:	20005088 	.word	0x20005088

080138ac <__errno>:
 80138ac:	4b01      	ldr	r3, [pc, #4]	@ (80138b4 <__errno+0x8>)
 80138ae:	6818      	ldr	r0, [r3, #0]
 80138b0:	4770      	bx	lr
 80138b2:	bf00      	nop
 80138b4:	20000120 	.word	0x20000120

080138b8 <__libc_init_array>:
 80138b8:	b570      	push	{r4, r5, r6, lr}
 80138ba:	4d0d      	ldr	r5, [pc, #52]	@ (80138f0 <__libc_init_array+0x38>)
 80138bc:	4c0d      	ldr	r4, [pc, #52]	@ (80138f4 <__libc_init_array+0x3c>)
 80138be:	1b64      	subs	r4, r4, r5
 80138c0:	10a4      	asrs	r4, r4, #2
 80138c2:	2600      	movs	r6, #0
 80138c4:	42a6      	cmp	r6, r4
 80138c6:	d109      	bne.n	80138dc <__libc_init_array+0x24>
 80138c8:	4d0b      	ldr	r5, [pc, #44]	@ (80138f8 <__libc_init_array+0x40>)
 80138ca:	4c0c      	ldr	r4, [pc, #48]	@ (80138fc <__libc_init_array+0x44>)
 80138cc:	f000 feda 	bl	8014684 <_init>
 80138d0:	1b64      	subs	r4, r4, r5
 80138d2:	10a4      	asrs	r4, r4, #2
 80138d4:	2600      	movs	r6, #0
 80138d6:	42a6      	cmp	r6, r4
 80138d8:	d105      	bne.n	80138e6 <__libc_init_array+0x2e>
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80138e0:	4798      	blx	r3
 80138e2:	3601      	adds	r6, #1
 80138e4:	e7ee      	b.n	80138c4 <__libc_init_array+0xc>
 80138e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ea:	4798      	blx	r3
 80138ec:	3601      	adds	r6, #1
 80138ee:	e7f2      	b.n	80138d6 <__libc_init_array+0x1e>
 80138f0:	08014d84 	.word	0x08014d84
 80138f4:	08014d84 	.word	0x08014d84
 80138f8:	08014d84 	.word	0x08014d84
 80138fc:	08014d88 	.word	0x08014d88

08013900 <__retarget_lock_init_recursive>:
 8013900:	4770      	bx	lr

08013902 <__retarget_lock_acquire_recursive>:
 8013902:	4770      	bx	lr

08013904 <__retarget_lock_release_recursive>:
 8013904:	4770      	bx	lr

08013906 <memcpy>:
 8013906:	440a      	add	r2, r1
 8013908:	4291      	cmp	r1, r2
 801390a:	f100 33ff 	add.w	r3, r0, #4294967295
 801390e:	d100      	bne.n	8013912 <memcpy+0xc>
 8013910:	4770      	bx	lr
 8013912:	b510      	push	{r4, lr}
 8013914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013918:	f803 4f01 	strb.w	r4, [r3, #1]!
 801391c:	4291      	cmp	r1, r2
 801391e:	d1f9      	bne.n	8013914 <memcpy+0xe>
 8013920:	bd10      	pop	{r4, pc}
	...

08013924 <_free_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4605      	mov	r5, r0
 8013928:	2900      	cmp	r1, #0
 801392a:	d041      	beq.n	80139b0 <_free_r+0x8c>
 801392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013930:	1f0c      	subs	r4, r1, #4
 8013932:	2b00      	cmp	r3, #0
 8013934:	bfb8      	it	lt
 8013936:	18e4      	addlt	r4, r4, r3
 8013938:	f000 f8e0 	bl	8013afc <__malloc_lock>
 801393c:	4a1d      	ldr	r2, [pc, #116]	@ (80139b4 <_free_r+0x90>)
 801393e:	6813      	ldr	r3, [r2, #0]
 8013940:	b933      	cbnz	r3, 8013950 <_free_r+0x2c>
 8013942:	6063      	str	r3, [r4, #4]
 8013944:	6014      	str	r4, [r2, #0]
 8013946:	4628      	mov	r0, r5
 8013948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801394c:	f000 b8dc 	b.w	8013b08 <__malloc_unlock>
 8013950:	42a3      	cmp	r3, r4
 8013952:	d908      	bls.n	8013966 <_free_r+0x42>
 8013954:	6820      	ldr	r0, [r4, #0]
 8013956:	1821      	adds	r1, r4, r0
 8013958:	428b      	cmp	r3, r1
 801395a:	bf01      	itttt	eq
 801395c:	6819      	ldreq	r1, [r3, #0]
 801395e:	685b      	ldreq	r3, [r3, #4]
 8013960:	1809      	addeq	r1, r1, r0
 8013962:	6021      	streq	r1, [r4, #0]
 8013964:	e7ed      	b.n	8013942 <_free_r+0x1e>
 8013966:	461a      	mov	r2, r3
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	b10b      	cbz	r3, 8013970 <_free_r+0x4c>
 801396c:	42a3      	cmp	r3, r4
 801396e:	d9fa      	bls.n	8013966 <_free_r+0x42>
 8013970:	6811      	ldr	r1, [r2, #0]
 8013972:	1850      	adds	r0, r2, r1
 8013974:	42a0      	cmp	r0, r4
 8013976:	d10b      	bne.n	8013990 <_free_r+0x6c>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	4401      	add	r1, r0
 801397c:	1850      	adds	r0, r2, r1
 801397e:	4283      	cmp	r3, r0
 8013980:	6011      	str	r1, [r2, #0]
 8013982:	d1e0      	bne.n	8013946 <_free_r+0x22>
 8013984:	6818      	ldr	r0, [r3, #0]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	6053      	str	r3, [r2, #4]
 801398a:	4408      	add	r0, r1
 801398c:	6010      	str	r0, [r2, #0]
 801398e:	e7da      	b.n	8013946 <_free_r+0x22>
 8013990:	d902      	bls.n	8013998 <_free_r+0x74>
 8013992:	230c      	movs	r3, #12
 8013994:	602b      	str	r3, [r5, #0]
 8013996:	e7d6      	b.n	8013946 <_free_r+0x22>
 8013998:	6820      	ldr	r0, [r4, #0]
 801399a:	1821      	adds	r1, r4, r0
 801399c:	428b      	cmp	r3, r1
 801399e:	bf04      	itt	eq
 80139a0:	6819      	ldreq	r1, [r3, #0]
 80139a2:	685b      	ldreq	r3, [r3, #4]
 80139a4:	6063      	str	r3, [r4, #4]
 80139a6:	bf04      	itt	eq
 80139a8:	1809      	addeq	r1, r1, r0
 80139aa:	6021      	streq	r1, [r4, #0]
 80139ac:	6054      	str	r4, [r2, #4]
 80139ae:	e7ca      	b.n	8013946 <_free_r+0x22>
 80139b0:	bd38      	pop	{r3, r4, r5, pc}
 80139b2:	bf00      	nop
 80139b4:	20005094 	.word	0x20005094

080139b8 <sbrk_aligned>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	4e0f      	ldr	r6, [pc, #60]	@ (80139f8 <sbrk_aligned+0x40>)
 80139bc:	460c      	mov	r4, r1
 80139be:	6831      	ldr	r1, [r6, #0]
 80139c0:	4605      	mov	r5, r0
 80139c2:	b911      	cbnz	r1, 80139ca <sbrk_aligned+0x12>
 80139c4:	f000 fe18 	bl	80145f8 <_sbrk_r>
 80139c8:	6030      	str	r0, [r6, #0]
 80139ca:	4621      	mov	r1, r4
 80139cc:	4628      	mov	r0, r5
 80139ce:	f000 fe13 	bl	80145f8 <_sbrk_r>
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	d103      	bne.n	80139de <sbrk_aligned+0x26>
 80139d6:	f04f 34ff 	mov.w	r4, #4294967295
 80139da:	4620      	mov	r0, r4
 80139dc:	bd70      	pop	{r4, r5, r6, pc}
 80139de:	1cc4      	adds	r4, r0, #3
 80139e0:	f024 0403 	bic.w	r4, r4, #3
 80139e4:	42a0      	cmp	r0, r4
 80139e6:	d0f8      	beq.n	80139da <sbrk_aligned+0x22>
 80139e8:	1a21      	subs	r1, r4, r0
 80139ea:	4628      	mov	r0, r5
 80139ec:	f000 fe04 	bl	80145f8 <_sbrk_r>
 80139f0:	3001      	adds	r0, #1
 80139f2:	d1f2      	bne.n	80139da <sbrk_aligned+0x22>
 80139f4:	e7ef      	b.n	80139d6 <sbrk_aligned+0x1e>
 80139f6:	bf00      	nop
 80139f8:	20005090 	.word	0x20005090

080139fc <_malloc_r>:
 80139fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a00:	1ccd      	adds	r5, r1, #3
 8013a02:	f025 0503 	bic.w	r5, r5, #3
 8013a06:	3508      	adds	r5, #8
 8013a08:	2d0c      	cmp	r5, #12
 8013a0a:	bf38      	it	cc
 8013a0c:	250c      	movcc	r5, #12
 8013a0e:	2d00      	cmp	r5, #0
 8013a10:	4606      	mov	r6, r0
 8013a12:	db01      	blt.n	8013a18 <_malloc_r+0x1c>
 8013a14:	42a9      	cmp	r1, r5
 8013a16:	d904      	bls.n	8013a22 <_malloc_r+0x26>
 8013a18:	230c      	movs	r3, #12
 8013a1a:	6033      	str	r3, [r6, #0]
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013af8 <_malloc_r+0xfc>
 8013a26:	f000 f869 	bl	8013afc <__malloc_lock>
 8013a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a2e:	461c      	mov	r4, r3
 8013a30:	bb44      	cbnz	r4, 8013a84 <_malloc_r+0x88>
 8013a32:	4629      	mov	r1, r5
 8013a34:	4630      	mov	r0, r6
 8013a36:	f7ff ffbf 	bl	80139b8 <sbrk_aligned>
 8013a3a:	1c43      	adds	r3, r0, #1
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	d158      	bne.n	8013af2 <_malloc_r+0xf6>
 8013a40:	f8d8 4000 	ldr.w	r4, [r8]
 8013a44:	4627      	mov	r7, r4
 8013a46:	2f00      	cmp	r7, #0
 8013a48:	d143      	bne.n	8013ad2 <_malloc_r+0xd6>
 8013a4a:	2c00      	cmp	r4, #0
 8013a4c:	d04b      	beq.n	8013ae6 <_malloc_r+0xea>
 8013a4e:	6823      	ldr	r3, [r4, #0]
 8013a50:	4639      	mov	r1, r7
 8013a52:	4630      	mov	r0, r6
 8013a54:	eb04 0903 	add.w	r9, r4, r3
 8013a58:	f000 fdce 	bl	80145f8 <_sbrk_r>
 8013a5c:	4581      	cmp	r9, r0
 8013a5e:	d142      	bne.n	8013ae6 <_malloc_r+0xea>
 8013a60:	6821      	ldr	r1, [r4, #0]
 8013a62:	1a6d      	subs	r5, r5, r1
 8013a64:	4629      	mov	r1, r5
 8013a66:	4630      	mov	r0, r6
 8013a68:	f7ff ffa6 	bl	80139b8 <sbrk_aligned>
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	d03a      	beq.n	8013ae6 <_malloc_r+0xea>
 8013a70:	6823      	ldr	r3, [r4, #0]
 8013a72:	442b      	add	r3, r5
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	f8d8 3000 	ldr.w	r3, [r8]
 8013a7a:	685a      	ldr	r2, [r3, #4]
 8013a7c:	bb62      	cbnz	r2, 8013ad8 <_malloc_r+0xdc>
 8013a7e:	f8c8 7000 	str.w	r7, [r8]
 8013a82:	e00f      	b.n	8013aa4 <_malloc_r+0xa8>
 8013a84:	6822      	ldr	r2, [r4, #0]
 8013a86:	1b52      	subs	r2, r2, r5
 8013a88:	d420      	bmi.n	8013acc <_malloc_r+0xd0>
 8013a8a:	2a0b      	cmp	r2, #11
 8013a8c:	d917      	bls.n	8013abe <_malloc_r+0xc2>
 8013a8e:	1961      	adds	r1, r4, r5
 8013a90:	42a3      	cmp	r3, r4
 8013a92:	6025      	str	r5, [r4, #0]
 8013a94:	bf18      	it	ne
 8013a96:	6059      	strne	r1, [r3, #4]
 8013a98:	6863      	ldr	r3, [r4, #4]
 8013a9a:	bf08      	it	eq
 8013a9c:	f8c8 1000 	streq.w	r1, [r8]
 8013aa0:	5162      	str	r2, [r4, r5]
 8013aa2:	604b      	str	r3, [r1, #4]
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f000 f82f 	bl	8013b08 <__malloc_unlock>
 8013aaa:	f104 000b 	add.w	r0, r4, #11
 8013aae:	1d23      	adds	r3, r4, #4
 8013ab0:	f020 0007 	bic.w	r0, r0, #7
 8013ab4:	1ac2      	subs	r2, r0, r3
 8013ab6:	bf1c      	itt	ne
 8013ab8:	1a1b      	subne	r3, r3, r0
 8013aba:	50a3      	strne	r3, [r4, r2]
 8013abc:	e7af      	b.n	8013a1e <_malloc_r+0x22>
 8013abe:	6862      	ldr	r2, [r4, #4]
 8013ac0:	42a3      	cmp	r3, r4
 8013ac2:	bf0c      	ite	eq
 8013ac4:	f8c8 2000 	streq.w	r2, [r8]
 8013ac8:	605a      	strne	r2, [r3, #4]
 8013aca:	e7eb      	b.n	8013aa4 <_malloc_r+0xa8>
 8013acc:	4623      	mov	r3, r4
 8013ace:	6864      	ldr	r4, [r4, #4]
 8013ad0:	e7ae      	b.n	8013a30 <_malloc_r+0x34>
 8013ad2:	463c      	mov	r4, r7
 8013ad4:	687f      	ldr	r7, [r7, #4]
 8013ad6:	e7b6      	b.n	8013a46 <_malloc_r+0x4a>
 8013ad8:	461a      	mov	r2, r3
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	42a3      	cmp	r3, r4
 8013ade:	d1fb      	bne.n	8013ad8 <_malloc_r+0xdc>
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	6053      	str	r3, [r2, #4]
 8013ae4:	e7de      	b.n	8013aa4 <_malloc_r+0xa8>
 8013ae6:	230c      	movs	r3, #12
 8013ae8:	6033      	str	r3, [r6, #0]
 8013aea:	4630      	mov	r0, r6
 8013aec:	f000 f80c 	bl	8013b08 <__malloc_unlock>
 8013af0:	e794      	b.n	8013a1c <_malloc_r+0x20>
 8013af2:	6005      	str	r5, [r0, #0]
 8013af4:	e7d6      	b.n	8013aa4 <_malloc_r+0xa8>
 8013af6:	bf00      	nop
 8013af8:	20005094 	.word	0x20005094

08013afc <__malloc_lock>:
 8013afc:	4801      	ldr	r0, [pc, #4]	@ (8013b04 <__malloc_lock+0x8>)
 8013afe:	f7ff bf00 	b.w	8013902 <__retarget_lock_acquire_recursive>
 8013b02:	bf00      	nop
 8013b04:	2000508c 	.word	0x2000508c

08013b08 <__malloc_unlock>:
 8013b08:	4801      	ldr	r0, [pc, #4]	@ (8013b10 <__malloc_unlock+0x8>)
 8013b0a:	f7ff befb 	b.w	8013904 <__retarget_lock_release_recursive>
 8013b0e:	bf00      	nop
 8013b10:	2000508c 	.word	0x2000508c

08013b14 <__ssputs_r>:
 8013b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b18:	688e      	ldr	r6, [r1, #8]
 8013b1a:	461f      	mov	r7, r3
 8013b1c:	42be      	cmp	r6, r7
 8013b1e:	680b      	ldr	r3, [r1, #0]
 8013b20:	4682      	mov	sl, r0
 8013b22:	460c      	mov	r4, r1
 8013b24:	4690      	mov	r8, r2
 8013b26:	d82d      	bhi.n	8013b84 <__ssputs_r+0x70>
 8013b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013b30:	d026      	beq.n	8013b80 <__ssputs_r+0x6c>
 8013b32:	6965      	ldr	r5, [r4, #20]
 8013b34:	6909      	ldr	r1, [r1, #16]
 8013b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b3a:	eba3 0901 	sub.w	r9, r3, r1
 8013b3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b42:	1c7b      	adds	r3, r7, #1
 8013b44:	444b      	add	r3, r9
 8013b46:	106d      	asrs	r5, r5, #1
 8013b48:	429d      	cmp	r5, r3
 8013b4a:	bf38      	it	cc
 8013b4c:	461d      	movcc	r5, r3
 8013b4e:	0553      	lsls	r3, r2, #21
 8013b50:	d527      	bpl.n	8013ba2 <__ssputs_r+0x8e>
 8013b52:	4629      	mov	r1, r5
 8013b54:	f7ff ff52 	bl	80139fc <_malloc_r>
 8013b58:	4606      	mov	r6, r0
 8013b5a:	b360      	cbz	r0, 8013bb6 <__ssputs_r+0xa2>
 8013b5c:	6921      	ldr	r1, [r4, #16]
 8013b5e:	464a      	mov	r2, r9
 8013b60:	f7ff fed1 	bl	8013906 <memcpy>
 8013b64:	89a3      	ldrh	r3, [r4, #12]
 8013b66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b6e:	81a3      	strh	r3, [r4, #12]
 8013b70:	6126      	str	r6, [r4, #16]
 8013b72:	6165      	str	r5, [r4, #20]
 8013b74:	444e      	add	r6, r9
 8013b76:	eba5 0509 	sub.w	r5, r5, r9
 8013b7a:	6026      	str	r6, [r4, #0]
 8013b7c:	60a5      	str	r5, [r4, #8]
 8013b7e:	463e      	mov	r6, r7
 8013b80:	42be      	cmp	r6, r7
 8013b82:	d900      	bls.n	8013b86 <__ssputs_r+0x72>
 8013b84:	463e      	mov	r6, r7
 8013b86:	6820      	ldr	r0, [r4, #0]
 8013b88:	4632      	mov	r2, r6
 8013b8a:	4641      	mov	r1, r8
 8013b8c:	f000 fcf8 	bl	8014580 <memmove>
 8013b90:	68a3      	ldr	r3, [r4, #8]
 8013b92:	1b9b      	subs	r3, r3, r6
 8013b94:	60a3      	str	r3, [r4, #8]
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	4433      	add	r3, r6
 8013b9a:	6023      	str	r3, [r4, #0]
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ba2:	462a      	mov	r2, r5
 8013ba4:	f000 fd38 	bl	8014618 <_realloc_r>
 8013ba8:	4606      	mov	r6, r0
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d1e0      	bne.n	8013b70 <__ssputs_r+0x5c>
 8013bae:	6921      	ldr	r1, [r4, #16]
 8013bb0:	4650      	mov	r0, sl
 8013bb2:	f7ff feb7 	bl	8013924 <_free_r>
 8013bb6:	230c      	movs	r3, #12
 8013bb8:	f8ca 3000 	str.w	r3, [sl]
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bc2:	81a3      	strh	r3, [r4, #12]
 8013bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc8:	e7e9      	b.n	8013b9e <__ssputs_r+0x8a>
	...

08013bcc <_svfiprintf_r>:
 8013bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	4698      	mov	r8, r3
 8013bd2:	898b      	ldrh	r3, [r1, #12]
 8013bd4:	061b      	lsls	r3, r3, #24
 8013bd6:	b09d      	sub	sp, #116	@ 0x74
 8013bd8:	4607      	mov	r7, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	4614      	mov	r4, r2
 8013bde:	d510      	bpl.n	8013c02 <_svfiprintf_r+0x36>
 8013be0:	690b      	ldr	r3, [r1, #16]
 8013be2:	b973      	cbnz	r3, 8013c02 <_svfiprintf_r+0x36>
 8013be4:	2140      	movs	r1, #64	@ 0x40
 8013be6:	f7ff ff09 	bl	80139fc <_malloc_r>
 8013bea:	6028      	str	r0, [r5, #0]
 8013bec:	6128      	str	r0, [r5, #16]
 8013bee:	b930      	cbnz	r0, 8013bfe <_svfiprintf_r+0x32>
 8013bf0:	230c      	movs	r3, #12
 8013bf2:	603b      	str	r3, [r7, #0]
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	b01d      	add	sp, #116	@ 0x74
 8013bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfe:	2340      	movs	r3, #64	@ 0x40
 8013c00:	616b      	str	r3, [r5, #20]
 8013c02:	2300      	movs	r3, #0
 8013c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c06:	2320      	movs	r3, #32
 8013c08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c10:	2330      	movs	r3, #48	@ 0x30
 8013c12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013db0 <_svfiprintf_r+0x1e4>
 8013c16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c1a:	f04f 0901 	mov.w	r9, #1
 8013c1e:	4623      	mov	r3, r4
 8013c20:	469a      	mov	sl, r3
 8013c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c26:	b10a      	cbz	r2, 8013c2c <_svfiprintf_r+0x60>
 8013c28:	2a25      	cmp	r2, #37	@ 0x25
 8013c2a:	d1f9      	bne.n	8013c20 <_svfiprintf_r+0x54>
 8013c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8013c30:	d00b      	beq.n	8013c4a <_svfiprintf_r+0x7e>
 8013c32:	465b      	mov	r3, fp
 8013c34:	4622      	mov	r2, r4
 8013c36:	4629      	mov	r1, r5
 8013c38:	4638      	mov	r0, r7
 8013c3a:	f7ff ff6b 	bl	8013b14 <__ssputs_r>
 8013c3e:	3001      	adds	r0, #1
 8013c40:	f000 80a7 	beq.w	8013d92 <_svfiprintf_r+0x1c6>
 8013c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c46:	445a      	add	r2, fp
 8013c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	f000 809f 	beq.w	8013d92 <_svfiprintf_r+0x1c6>
 8013c54:	2300      	movs	r3, #0
 8013c56:	f04f 32ff 	mov.w	r2, #4294967295
 8013c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c5e:	f10a 0a01 	add.w	sl, sl, #1
 8013c62:	9304      	str	r3, [sp, #16]
 8013c64:	9307      	str	r3, [sp, #28]
 8013c66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c6c:	4654      	mov	r4, sl
 8013c6e:	2205      	movs	r2, #5
 8013c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c74:	484e      	ldr	r0, [pc, #312]	@ (8013db0 <_svfiprintf_r+0x1e4>)
 8013c76:	f7ec fa8b 	bl	8000190 <memchr>
 8013c7a:	9a04      	ldr	r2, [sp, #16]
 8013c7c:	b9d8      	cbnz	r0, 8013cb6 <_svfiprintf_r+0xea>
 8013c7e:	06d0      	lsls	r0, r2, #27
 8013c80:	bf44      	itt	mi
 8013c82:	2320      	movmi	r3, #32
 8013c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c88:	0711      	lsls	r1, r2, #28
 8013c8a:	bf44      	itt	mi
 8013c8c:	232b      	movmi	r3, #43	@ 0x2b
 8013c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c92:	f89a 3000 	ldrb.w	r3, [sl]
 8013c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c98:	d015      	beq.n	8013cc6 <_svfiprintf_r+0xfa>
 8013c9a:	9a07      	ldr	r2, [sp, #28]
 8013c9c:	4654      	mov	r4, sl
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f04f 0c0a 	mov.w	ip, #10
 8013ca4:	4621      	mov	r1, r4
 8013ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013caa:	3b30      	subs	r3, #48	@ 0x30
 8013cac:	2b09      	cmp	r3, #9
 8013cae:	d94b      	bls.n	8013d48 <_svfiprintf_r+0x17c>
 8013cb0:	b1b0      	cbz	r0, 8013ce0 <_svfiprintf_r+0x114>
 8013cb2:	9207      	str	r2, [sp, #28]
 8013cb4:	e014      	b.n	8013ce0 <_svfiprintf_r+0x114>
 8013cb6:	eba0 0308 	sub.w	r3, r0, r8
 8013cba:	fa09 f303 	lsl.w	r3, r9, r3
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	9304      	str	r3, [sp, #16]
 8013cc2:	46a2      	mov	sl, r4
 8013cc4:	e7d2      	b.n	8013c6c <_svfiprintf_r+0xa0>
 8013cc6:	9b03      	ldr	r3, [sp, #12]
 8013cc8:	1d19      	adds	r1, r3, #4
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	9103      	str	r1, [sp, #12]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	bfbb      	ittet	lt
 8013cd2:	425b      	neglt	r3, r3
 8013cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8013cd8:	9307      	strge	r3, [sp, #28]
 8013cda:	9307      	strlt	r3, [sp, #28]
 8013cdc:	bfb8      	it	lt
 8013cde:	9204      	strlt	r2, [sp, #16]
 8013ce0:	7823      	ldrb	r3, [r4, #0]
 8013ce2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ce4:	d10a      	bne.n	8013cfc <_svfiprintf_r+0x130>
 8013ce6:	7863      	ldrb	r3, [r4, #1]
 8013ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cea:	d132      	bne.n	8013d52 <_svfiprintf_r+0x186>
 8013cec:	9b03      	ldr	r3, [sp, #12]
 8013cee:	1d1a      	adds	r2, r3, #4
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	9203      	str	r2, [sp, #12]
 8013cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013cf8:	3402      	adds	r4, #2
 8013cfa:	9305      	str	r3, [sp, #20]
 8013cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013dc0 <_svfiprintf_r+0x1f4>
 8013d00:	7821      	ldrb	r1, [r4, #0]
 8013d02:	2203      	movs	r2, #3
 8013d04:	4650      	mov	r0, sl
 8013d06:	f7ec fa43 	bl	8000190 <memchr>
 8013d0a:	b138      	cbz	r0, 8013d1c <_svfiprintf_r+0x150>
 8013d0c:	9b04      	ldr	r3, [sp, #16]
 8013d0e:	eba0 000a 	sub.w	r0, r0, sl
 8013d12:	2240      	movs	r2, #64	@ 0x40
 8013d14:	4082      	lsls	r2, r0
 8013d16:	4313      	orrs	r3, r2
 8013d18:	3401      	adds	r4, #1
 8013d1a:	9304      	str	r3, [sp, #16]
 8013d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d20:	4824      	ldr	r0, [pc, #144]	@ (8013db4 <_svfiprintf_r+0x1e8>)
 8013d22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d26:	2206      	movs	r2, #6
 8013d28:	f7ec fa32 	bl	8000190 <memchr>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d036      	beq.n	8013d9e <_svfiprintf_r+0x1d2>
 8013d30:	4b21      	ldr	r3, [pc, #132]	@ (8013db8 <_svfiprintf_r+0x1ec>)
 8013d32:	bb1b      	cbnz	r3, 8013d7c <_svfiprintf_r+0x1b0>
 8013d34:	9b03      	ldr	r3, [sp, #12]
 8013d36:	3307      	adds	r3, #7
 8013d38:	f023 0307 	bic.w	r3, r3, #7
 8013d3c:	3308      	adds	r3, #8
 8013d3e:	9303      	str	r3, [sp, #12]
 8013d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d42:	4433      	add	r3, r6
 8013d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d46:	e76a      	b.n	8013c1e <_svfiprintf_r+0x52>
 8013d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d4c:	460c      	mov	r4, r1
 8013d4e:	2001      	movs	r0, #1
 8013d50:	e7a8      	b.n	8013ca4 <_svfiprintf_r+0xd8>
 8013d52:	2300      	movs	r3, #0
 8013d54:	3401      	adds	r4, #1
 8013d56:	9305      	str	r3, [sp, #20]
 8013d58:	4619      	mov	r1, r3
 8013d5a:	f04f 0c0a 	mov.w	ip, #10
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d64:	3a30      	subs	r2, #48	@ 0x30
 8013d66:	2a09      	cmp	r2, #9
 8013d68:	d903      	bls.n	8013d72 <_svfiprintf_r+0x1a6>
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d0c6      	beq.n	8013cfc <_svfiprintf_r+0x130>
 8013d6e:	9105      	str	r1, [sp, #20]
 8013d70:	e7c4      	b.n	8013cfc <_svfiprintf_r+0x130>
 8013d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d76:	4604      	mov	r4, r0
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e7f0      	b.n	8013d5e <_svfiprintf_r+0x192>
 8013d7c:	ab03      	add	r3, sp, #12
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	462a      	mov	r2, r5
 8013d82:	4b0e      	ldr	r3, [pc, #56]	@ (8013dbc <_svfiprintf_r+0x1f0>)
 8013d84:	a904      	add	r1, sp, #16
 8013d86:	4638      	mov	r0, r7
 8013d88:	f3af 8000 	nop.w
 8013d8c:	1c42      	adds	r2, r0, #1
 8013d8e:	4606      	mov	r6, r0
 8013d90:	d1d6      	bne.n	8013d40 <_svfiprintf_r+0x174>
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	065b      	lsls	r3, r3, #25
 8013d96:	f53f af2d 	bmi.w	8013bf4 <_svfiprintf_r+0x28>
 8013d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d9c:	e72c      	b.n	8013bf8 <_svfiprintf_r+0x2c>
 8013d9e:	ab03      	add	r3, sp, #12
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	462a      	mov	r2, r5
 8013da4:	4b05      	ldr	r3, [pc, #20]	@ (8013dbc <_svfiprintf_r+0x1f0>)
 8013da6:	a904      	add	r1, sp, #16
 8013da8:	4638      	mov	r0, r7
 8013daa:	f000 f9bb 	bl	8014124 <_printf_i>
 8013dae:	e7ed      	b.n	8013d8c <_svfiprintf_r+0x1c0>
 8013db0:	08014d48 	.word	0x08014d48
 8013db4:	08014d52 	.word	0x08014d52
 8013db8:	00000000 	.word	0x00000000
 8013dbc:	08013b15 	.word	0x08013b15
 8013dc0:	08014d4e 	.word	0x08014d4e

08013dc4 <__sfputc_r>:
 8013dc4:	6893      	ldr	r3, [r2, #8]
 8013dc6:	3b01      	subs	r3, #1
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	b410      	push	{r4}
 8013dcc:	6093      	str	r3, [r2, #8]
 8013dce:	da08      	bge.n	8013de2 <__sfputc_r+0x1e>
 8013dd0:	6994      	ldr	r4, [r2, #24]
 8013dd2:	42a3      	cmp	r3, r4
 8013dd4:	db01      	blt.n	8013dda <__sfputc_r+0x16>
 8013dd6:	290a      	cmp	r1, #10
 8013dd8:	d103      	bne.n	8013de2 <__sfputc_r+0x1e>
 8013dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dde:	f7ff bc2d 	b.w	801363c <__swbuf_r>
 8013de2:	6813      	ldr	r3, [r2, #0]
 8013de4:	1c58      	adds	r0, r3, #1
 8013de6:	6010      	str	r0, [r2, #0]
 8013de8:	7019      	strb	r1, [r3, #0]
 8013dea:	4608      	mov	r0, r1
 8013dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013df0:	4770      	bx	lr

08013df2 <__sfputs_r>:
 8013df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df4:	4606      	mov	r6, r0
 8013df6:	460f      	mov	r7, r1
 8013df8:	4614      	mov	r4, r2
 8013dfa:	18d5      	adds	r5, r2, r3
 8013dfc:	42ac      	cmp	r4, r5
 8013dfe:	d101      	bne.n	8013e04 <__sfputs_r+0x12>
 8013e00:	2000      	movs	r0, #0
 8013e02:	e007      	b.n	8013e14 <__sfputs_r+0x22>
 8013e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e08:	463a      	mov	r2, r7
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	f7ff ffda 	bl	8013dc4 <__sfputc_r>
 8013e10:	1c43      	adds	r3, r0, #1
 8013e12:	d1f3      	bne.n	8013dfc <__sfputs_r+0xa>
 8013e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e18 <_vfiprintf_r>:
 8013e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	b09d      	sub	sp, #116	@ 0x74
 8013e20:	4614      	mov	r4, r2
 8013e22:	4698      	mov	r8, r3
 8013e24:	4606      	mov	r6, r0
 8013e26:	b118      	cbz	r0, 8013e30 <_vfiprintf_r+0x18>
 8013e28:	6a03      	ldr	r3, [r0, #32]
 8013e2a:	b90b      	cbnz	r3, 8013e30 <_vfiprintf_r+0x18>
 8013e2c:	f7ff fb42 	bl	80134b4 <__sinit>
 8013e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e32:	07d9      	lsls	r1, r3, #31
 8013e34:	d405      	bmi.n	8013e42 <_vfiprintf_r+0x2a>
 8013e36:	89ab      	ldrh	r3, [r5, #12]
 8013e38:	059a      	lsls	r2, r3, #22
 8013e3a:	d402      	bmi.n	8013e42 <_vfiprintf_r+0x2a>
 8013e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e3e:	f7ff fd60 	bl	8013902 <__retarget_lock_acquire_recursive>
 8013e42:	89ab      	ldrh	r3, [r5, #12]
 8013e44:	071b      	lsls	r3, r3, #28
 8013e46:	d501      	bpl.n	8013e4c <_vfiprintf_r+0x34>
 8013e48:	692b      	ldr	r3, [r5, #16]
 8013e4a:	b99b      	cbnz	r3, 8013e74 <_vfiprintf_r+0x5c>
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f7ff fc32 	bl	80136b8 <__swsetup_r>
 8013e54:	b170      	cbz	r0, 8013e74 <_vfiprintf_r+0x5c>
 8013e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e58:	07dc      	lsls	r4, r3, #31
 8013e5a:	d504      	bpl.n	8013e66 <_vfiprintf_r+0x4e>
 8013e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e60:	b01d      	add	sp, #116	@ 0x74
 8013e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e66:	89ab      	ldrh	r3, [r5, #12]
 8013e68:	0598      	lsls	r0, r3, #22
 8013e6a:	d4f7      	bmi.n	8013e5c <_vfiprintf_r+0x44>
 8013e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e6e:	f7ff fd49 	bl	8013904 <__retarget_lock_release_recursive>
 8013e72:	e7f3      	b.n	8013e5c <_vfiprintf_r+0x44>
 8013e74:	2300      	movs	r3, #0
 8013e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e78:	2320      	movs	r3, #32
 8013e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e82:	2330      	movs	r3, #48	@ 0x30
 8013e84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014034 <_vfiprintf_r+0x21c>
 8013e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e8c:	f04f 0901 	mov.w	r9, #1
 8013e90:	4623      	mov	r3, r4
 8013e92:	469a      	mov	sl, r3
 8013e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e98:	b10a      	cbz	r2, 8013e9e <_vfiprintf_r+0x86>
 8013e9a:	2a25      	cmp	r2, #37	@ 0x25
 8013e9c:	d1f9      	bne.n	8013e92 <_vfiprintf_r+0x7a>
 8013e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8013ea2:	d00b      	beq.n	8013ebc <_vfiprintf_r+0xa4>
 8013ea4:	465b      	mov	r3, fp
 8013ea6:	4622      	mov	r2, r4
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	4630      	mov	r0, r6
 8013eac:	f7ff ffa1 	bl	8013df2 <__sfputs_r>
 8013eb0:	3001      	adds	r0, #1
 8013eb2:	f000 80a7 	beq.w	8014004 <_vfiprintf_r+0x1ec>
 8013eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013eb8:	445a      	add	r2, fp
 8013eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 809f 	beq.w	8014004 <_vfiprintf_r+0x1ec>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8013ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ed0:	f10a 0a01 	add.w	sl, sl, #1
 8013ed4:	9304      	str	r3, [sp, #16]
 8013ed6:	9307      	str	r3, [sp, #28]
 8013ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ede:	4654      	mov	r4, sl
 8013ee0:	2205      	movs	r2, #5
 8013ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee6:	4853      	ldr	r0, [pc, #332]	@ (8014034 <_vfiprintf_r+0x21c>)
 8013ee8:	f7ec f952 	bl	8000190 <memchr>
 8013eec:	9a04      	ldr	r2, [sp, #16]
 8013eee:	b9d8      	cbnz	r0, 8013f28 <_vfiprintf_r+0x110>
 8013ef0:	06d1      	lsls	r1, r2, #27
 8013ef2:	bf44      	itt	mi
 8013ef4:	2320      	movmi	r3, #32
 8013ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013efa:	0713      	lsls	r3, r2, #28
 8013efc:	bf44      	itt	mi
 8013efe:	232b      	movmi	r3, #43	@ 0x2b
 8013f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f04:	f89a 3000 	ldrb.w	r3, [sl]
 8013f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f0a:	d015      	beq.n	8013f38 <_vfiprintf_r+0x120>
 8013f0c:	9a07      	ldr	r2, [sp, #28]
 8013f0e:	4654      	mov	r4, sl
 8013f10:	2000      	movs	r0, #0
 8013f12:	f04f 0c0a 	mov.w	ip, #10
 8013f16:	4621      	mov	r1, r4
 8013f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f1c:	3b30      	subs	r3, #48	@ 0x30
 8013f1e:	2b09      	cmp	r3, #9
 8013f20:	d94b      	bls.n	8013fba <_vfiprintf_r+0x1a2>
 8013f22:	b1b0      	cbz	r0, 8013f52 <_vfiprintf_r+0x13a>
 8013f24:	9207      	str	r2, [sp, #28]
 8013f26:	e014      	b.n	8013f52 <_vfiprintf_r+0x13a>
 8013f28:	eba0 0308 	sub.w	r3, r0, r8
 8013f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8013f30:	4313      	orrs	r3, r2
 8013f32:	9304      	str	r3, [sp, #16]
 8013f34:	46a2      	mov	sl, r4
 8013f36:	e7d2      	b.n	8013ede <_vfiprintf_r+0xc6>
 8013f38:	9b03      	ldr	r3, [sp, #12]
 8013f3a:	1d19      	adds	r1, r3, #4
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	9103      	str	r1, [sp, #12]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	bfbb      	ittet	lt
 8013f44:	425b      	neglt	r3, r3
 8013f46:	f042 0202 	orrlt.w	r2, r2, #2
 8013f4a:	9307      	strge	r3, [sp, #28]
 8013f4c:	9307      	strlt	r3, [sp, #28]
 8013f4e:	bfb8      	it	lt
 8013f50:	9204      	strlt	r2, [sp, #16]
 8013f52:	7823      	ldrb	r3, [r4, #0]
 8013f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f56:	d10a      	bne.n	8013f6e <_vfiprintf_r+0x156>
 8013f58:	7863      	ldrb	r3, [r4, #1]
 8013f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f5c:	d132      	bne.n	8013fc4 <_vfiprintf_r+0x1ac>
 8013f5e:	9b03      	ldr	r3, [sp, #12]
 8013f60:	1d1a      	adds	r2, r3, #4
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	9203      	str	r2, [sp, #12]
 8013f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f6a:	3402      	adds	r4, #2
 8013f6c:	9305      	str	r3, [sp, #20]
 8013f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014044 <_vfiprintf_r+0x22c>
 8013f72:	7821      	ldrb	r1, [r4, #0]
 8013f74:	2203      	movs	r2, #3
 8013f76:	4650      	mov	r0, sl
 8013f78:	f7ec f90a 	bl	8000190 <memchr>
 8013f7c:	b138      	cbz	r0, 8013f8e <_vfiprintf_r+0x176>
 8013f7e:	9b04      	ldr	r3, [sp, #16]
 8013f80:	eba0 000a 	sub.w	r0, r0, sl
 8013f84:	2240      	movs	r2, #64	@ 0x40
 8013f86:	4082      	lsls	r2, r0
 8013f88:	4313      	orrs	r3, r2
 8013f8a:	3401      	adds	r4, #1
 8013f8c:	9304      	str	r3, [sp, #16]
 8013f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f92:	4829      	ldr	r0, [pc, #164]	@ (8014038 <_vfiprintf_r+0x220>)
 8013f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f98:	2206      	movs	r2, #6
 8013f9a:	f7ec f8f9 	bl	8000190 <memchr>
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	d03f      	beq.n	8014022 <_vfiprintf_r+0x20a>
 8013fa2:	4b26      	ldr	r3, [pc, #152]	@ (801403c <_vfiprintf_r+0x224>)
 8013fa4:	bb1b      	cbnz	r3, 8013fee <_vfiprintf_r+0x1d6>
 8013fa6:	9b03      	ldr	r3, [sp, #12]
 8013fa8:	3307      	adds	r3, #7
 8013faa:	f023 0307 	bic.w	r3, r3, #7
 8013fae:	3308      	adds	r3, #8
 8013fb0:	9303      	str	r3, [sp, #12]
 8013fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb4:	443b      	add	r3, r7
 8013fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fb8:	e76a      	b.n	8013e90 <_vfiprintf_r+0x78>
 8013fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fbe:	460c      	mov	r4, r1
 8013fc0:	2001      	movs	r0, #1
 8013fc2:	e7a8      	b.n	8013f16 <_vfiprintf_r+0xfe>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	3401      	adds	r4, #1
 8013fc8:	9305      	str	r3, [sp, #20]
 8013fca:	4619      	mov	r1, r3
 8013fcc:	f04f 0c0a 	mov.w	ip, #10
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fd6:	3a30      	subs	r2, #48	@ 0x30
 8013fd8:	2a09      	cmp	r2, #9
 8013fda:	d903      	bls.n	8013fe4 <_vfiprintf_r+0x1cc>
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d0c6      	beq.n	8013f6e <_vfiprintf_r+0x156>
 8013fe0:	9105      	str	r1, [sp, #20]
 8013fe2:	e7c4      	b.n	8013f6e <_vfiprintf_r+0x156>
 8013fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fe8:	4604      	mov	r4, r0
 8013fea:	2301      	movs	r3, #1
 8013fec:	e7f0      	b.n	8013fd0 <_vfiprintf_r+0x1b8>
 8013fee:	ab03      	add	r3, sp, #12
 8013ff0:	9300      	str	r3, [sp, #0]
 8013ff2:	462a      	mov	r2, r5
 8013ff4:	4b12      	ldr	r3, [pc, #72]	@ (8014040 <_vfiprintf_r+0x228>)
 8013ff6:	a904      	add	r1, sp, #16
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	f3af 8000 	nop.w
 8013ffe:	4607      	mov	r7, r0
 8014000:	1c78      	adds	r0, r7, #1
 8014002:	d1d6      	bne.n	8013fb2 <_vfiprintf_r+0x19a>
 8014004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014006:	07d9      	lsls	r1, r3, #31
 8014008:	d405      	bmi.n	8014016 <_vfiprintf_r+0x1fe>
 801400a:	89ab      	ldrh	r3, [r5, #12]
 801400c:	059a      	lsls	r2, r3, #22
 801400e:	d402      	bmi.n	8014016 <_vfiprintf_r+0x1fe>
 8014010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014012:	f7ff fc77 	bl	8013904 <__retarget_lock_release_recursive>
 8014016:	89ab      	ldrh	r3, [r5, #12]
 8014018:	065b      	lsls	r3, r3, #25
 801401a:	f53f af1f 	bmi.w	8013e5c <_vfiprintf_r+0x44>
 801401e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014020:	e71e      	b.n	8013e60 <_vfiprintf_r+0x48>
 8014022:	ab03      	add	r3, sp, #12
 8014024:	9300      	str	r3, [sp, #0]
 8014026:	462a      	mov	r2, r5
 8014028:	4b05      	ldr	r3, [pc, #20]	@ (8014040 <_vfiprintf_r+0x228>)
 801402a:	a904      	add	r1, sp, #16
 801402c:	4630      	mov	r0, r6
 801402e:	f000 f879 	bl	8014124 <_printf_i>
 8014032:	e7e4      	b.n	8013ffe <_vfiprintf_r+0x1e6>
 8014034:	08014d48 	.word	0x08014d48
 8014038:	08014d52 	.word	0x08014d52
 801403c:	00000000 	.word	0x00000000
 8014040:	08013df3 	.word	0x08013df3
 8014044:	08014d4e 	.word	0x08014d4e

08014048 <_printf_common>:
 8014048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801404c:	4616      	mov	r6, r2
 801404e:	4698      	mov	r8, r3
 8014050:	688a      	ldr	r2, [r1, #8]
 8014052:	690b      	ldr	r3, [r1, #16]
 8014054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014058:	4293      	cmp	r3, r2
 801405a:	bfb8      	it	lt
 801405c:	4613      	movlt	r3, r2
 801405e:	6033      	str	r3, [r6, #0]
 8014060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014064:	4607      	mov	r7, r0
 8014066:	460c      	mov	r4, r1
 8014068:	b10a      	cbz	r2, 801406e <_printf_common+0x26>
 801406a:	3301      	adds	r3, #1
 801406c:	6033      	str	r3, [r6, #0]
 801406e:	6823      	ldr	r3, [r4, #0]
 8014070:	0699      	lsls	r1, r3, #26
 8014072:	bf42      	ittt	mi
 8014074:	6833      	ldrmi	r3, [r6, #0]
 8014076:	3302      	addmi	r3, #2
 8014078:	6033      	strmi	r3, [r6, #0]
 801407a:	6825      	ldr	r5, [r4, #0]
 801407c:	f015 0506 	ands.w	r5, r5, #6
 8014080:	d106      	bne.n	8014090 <_printf_common+0x48>
 8014082:	f104 0a19 	add.w	sl, r4, #25
 8014086:	68e3      	ldr	r3, [r4, #12]
 8014088:	6832      	ldr	r2, [r6, #0]
 801408a:	1a9b      	subs	r3, r3, r2
 801408c:	42ab      	cmp	r3, r5
 801408e:	dc26      	bgt.n	80140de <_printf_common+0x96>
 8014090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014094:	6822      	ldr	r2, [r4, #0]
 8014096:	3b00      	subs	r3, #0
 8014098:	bf18      	it	ne
 801409a:	2301      	movne	r3, #1
 801409c:	0692      	lsls	r2, r2, #26
 801409e:	d42b      	bmi.n	80140f8 <_printf_common+0xb0>
 80140a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80140a4:	4641      	mov	r1, r8
 80140a6:	4638      	mov	r0, r7
 80140a8:	47c8      	blx	r9
 80140aa:	3001      	adds	r0, #1
 80140ac:	d01e      	beq.n	80140ec <_printf_common+0xa4>
 80140ae:	6823      	ldr	r3, [r4, #0]
 80140b0:	6922      	ldr	r2, [r4, #16]
 80140b2:	f003 0306 	and.w	r3, r3, #6
 80140b6:	2b04      	cmp	r3, #4
 80140b8:	bf02      	ittt	eq
 80140ba:	68e5      	ldreq	r5, [r4, #12]
 80140bc:	6833      	ldreq	r3, [r6, #0]
 80140be:	1aed      	subeq	r5, r5, r3
 80140c0:	68a3      	ldr	r3, [r4, #8]
 80140c2:	bf0c      	ite	eq
 80140c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140c8:	2500      	movne	r5, #0
 80140ca:	4293      	cmp	r3, r2
 80140cc:	bfc4      	itt	gt
 80140ce:	1a9b      	subgt	r3, r3, r2
 80140d0:	18ed      	addgt	r5, r5, r3
 80140d2:	2600      	movs	r6, #0
 80140d4:	341a      	adds	r4, #26
 80140d6:	42b5      	cmp	r5, r6
 80140d8:	d11a      	bne.n	8014110 <_printf_common+0xc8>
 80140da:	2000      	movs	r0, #0
 80140dc:	e008      	b.n	80140f0 <_printf_common+0xa8>
 80140de:	2301      	movs	r3, #1
 80140e0:	4652      	mov	r2, sl
 80140e2:	4641      	mov	r1, r8
 80140e4:	4638      	mov	r0, r7
 80140e6:	47c8      	blx	r9
 80140e8:	3001      	adds	r0, #1
 80140ea:	d103      	bne.n	80140f4 <_printf_common+0xac>
 80140ec:	f04f 30ff 	mov.w	r0, #4294967295
 80140f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f4:	3501      	adds	r5, #1
 80140f6:	e7c6      	b.n	8014086 <_printf_common+0x3e>
 80140f8:	18e1      	adds	r1, r4, r3
 80140fa:	1c5a      	adds	r2, r3, #1
 80140fc:	2030      	movs	r0, #48	@ 0x30
 80140fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014102:	4422      	add	r2, r4
 8014104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801410c:	3302      	adds	r3, #2
 801410e:	e7c7      	b.n	80140a0 <_printf_common+0x58>
 8014110:	2301      	movs	r3, #1
 8014112:	4622      	mov	r2, r4
 8014114:	4641      	mov	r1, r8
 8014116:	4638      	mov	r0, r7
 8014118:	47c8      	blx	r9
 801411a:	3001      	adds	r0, #1
 801411c:	d0e6      	beq.n	80140ec <_printf_common+0xa4>
 801411e:	3601      	adds	r6, #1
 8014120:	e7d9      	b.n	80140d6 <_printf_common+0x8e>
	...

08014124 <_printf_i>:
 8014124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014128:	7e0f      	ldrb	r7, [r1, #24]
 801412a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801412c:	2f78      	cmp	r7, #120	@ 0x78
 801412e:	4691      	mov	r9, r2
 8014130:	4680      	mov	r8, r0
 8014132:	460c      	mov	r4, r1
 8014134:	469a      	mov	sl, r3
 8014136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801413a:	d807      	bhi.n	801414c <_printf_i+0x28>
 801413c:	2f62      	cmp	r7, #98	@ 0x62
 801413e:	d80a      	bhi.n	8014156 <_printf_i+0x32>
 8014140:	2f00      	cmp	r7, #0
 8014142:	f000 80d2 	beq.w	80142ea <_printf_i+0x1c6>
 8014146:	2f58      	cmp	r7, #88	@ 0x58
 8014148:	f000 80b9 	beq.w	80142be <_printf_i+0x19a>
 801414c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014154:	e03a      	b.n	80141cc <_printf_i+0xa8>
 8014156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801415a:	2b15      	cmp	r3, #21
 801415c:	d8f6      	bhi.n	801414c <_printf_i+0x28>
 801415e:	a101      	add	r1, pc, #4	@ (adr r1, 8014164 <_printf_i+0x40>)
 8014160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014164:	080141bd 	.word	0x080141bd
 8014168:	080141d1 	.word	0x080141d1
 801416c:	0801414d 	.word	0x0801414d
 8014170:	0801414d 	.word	0x0801414d
 8014174:	0801414d 	.word	0x0801414d
 8014178:	0801414d 	.word	0x0801414d
 801417c:	080141d1 	.word	0x080141d1
 8014180:	0801414d 	.word	0x0801414d
 8014184:	0801414d 	.word	0x0801414d
 8014188:	0801414d 	.word	0x0801414d
 801418c:	0801414d 	.word	0x0801414d
 8014190:	080142d1 	.word	0x080142d1
 8014194:	080141fb 	.word	0x080141fb
 8014198:	0801428b 	.word	0x0801428b
 801419c:	0801414d 	.word	0x0801414d
 80141a0:	0801414d 	.word	0x0801414d
 80141a4:	080142f3 	.word	0x080142f3
 80141a8:	0801414d 	.word	0x0801414d
 80141ac:	080141fb 	.word	0x080141fb
 80141b0:	0801414d 	.word	0x0801414d
 80141b4:	0801414d 	.word	0x0801414d
 80141b8:	08014293 	.word	0x08014293
 80141bc:	6833      	ldr	r3, [r6, #0]
 80141be:	1d1a      	adds	r2, r3, #4
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	6032      	str	r2, [r6, #0]
 80141c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80141c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80141cc:	2301      	movs	r3, #1
 80141ce:	e09d      	b.n	801430c <_printf_i+0x1e8>
 80141d0:	6833      	ldr	r3, [r6, #0]
 80141d2:	6820      	ldr	r0, [r4, #0]
 80141d4:	1d19      	adds	r1, r3, #4
 80141d6:	6031      	str	r1, [r6, #0]
 80141d8:	0606      	lsls	r6, r0, #24
 80141da:	d501      	bpl.n	80141e0 <_printf_i+0xbc>
 80141dc:	681d      	ldr	r5, [r3, #0]
 80141de:	e003      	b.n	80141e8 <_printf_i+0xc4>
 80141e0:	0645      	lsls	r5, r0, #25
 80141e2:	d5fb      	bpl.n	80141dc <_printf_i+0xb8>
 80141e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80141e8:	2d00      	cmp	r5, #0
 80141ea:	da03      	bge.n	80141f4 <_printf_i+0xd0>
 80141ec:	232d      	movs	r3, #45	@ 0x2d
 80141ee:	426d      	negs	r5, r5
 80141f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141f4:	4859      	ldr	r0, [pc, #356]	@ (801435c <_printf_i+0x238>)
 80141f6:	230a      	movs	r3, #10
 80141f8:	e011      	b.n	801421e <_printf_i+0xfa>
 80141fa:	6821      	ldr	r1, [r4, #0]
 80141fc:	6833      	ldr	r3, [r6, #0]
 80141fe:	0608      	lsls	r0, r1, #24
 8014200:	f853 5b04 	ldr.w	r5, [r3], #4
 8014204:	d402      	bmi.n	801420c <_printf_i+0xe8>
 8014206:	0649      	lsls	r1, r1, #25
 8014208:	bf48      	it	mi
 801420a:	b2ad      	uxthmi	r5, r5
 801420c:	2f6f      	cmp	r7, #111	@ 0x6f
 801420e:	4853      	ldr	r0, [pc, #332]	@ (801435c <_printf_i+0x238>)
 8014210:	6033      	str	r3, [r6, #0]
 8014212:	bf14      	ite	ne
 8014214:	230a      	movne	r3, #10
 8014216:	2308      	moveq	r3, #8
 8014218:	2100      	movs	r1, #0
 801421a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801421e:	6866      	ldr	r6, [r4, #4]
 8014220:	60a6      	str	r6, [r4, #8]
 8014222:	2e00      	cmp	r6, #0
 8014224:	bfa2      	ittt	ge
 8014226:	6821      	ldrge	r1, [r4, #0]
 8014228:	f021 0104 	bicge.w	r1, r1, #4
 801422c:	6021      	strge	r1, [r4, #0]
 801422e:	b90d      	cbnz	r5, 8014234 <_printf_i+0x110>
 8014230:	2e00      	cmp	r6, #0
 8014232:	d04b      	beq.n	80142cc <_printf_i+0x1a8>
 8014234:	4616      	mov	r6, r2
 8014236:	fbb5 f1f3 	udiv	r1, r5, r3
 801423a:	fb03 5711 	mls	r7, r3, r1, r5
 801423e:	5dc7      	ldrb	r7, [r0, r7]
 8014240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014244:	462f      	mov	r7, r5
 8014246:	42bb      	cmp	r3, r7
 8014248:	460d      	mov	r5, r1
 801424a:	d9f4      	bls.n	8014236 <_printf_i+0x112>
 801424c:	2b08      	cmp	r3, #8
 801424e:	d10b      	bne.n	8014268 <_printf_i+0x144>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	07df      	lsls	r7, r3, #31
 8014254:	d508      	bpl.n	8014268 <_printf_i+0x144>
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	6861      	ldr	r1, [r4, #4]
 801425a:	4299      	cmp	r1, r3
 801425c:	bfde      	ittt	le
 801425e:	2330      	movle	r3, #48	@ 0x30
 8014260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014268:	1b92      	subs	r2, r2, r6
 801426a:	6122      	str	r2, [r4, #16]
 801426c:	f8cd a000 	str.w	sl, [sp]
 8014270:	464b      	mov	r3, r9
 8014272:	aa03      	add	r2, sp, #12
 8014274:	4621      	mov	r1, r4
 8014276:	4640      	mov	r0, r8
 8014278:	f7ff fee6 	bl	8014048 <_printf_common>
 801427c:	3001      	adds	r0, #1
 801427e:	d14a      	bne.n	8014316 <_printf_i+0x1f2>
 8014280:	f04f 30ff 	mov.w	r0, #4294967295
 8014284:	b004      	add	sp, #16
 8014286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428a:	6823      	ldr	r3, [r4, #0]
 801428c:	f043 0320 	orr.w	r3, r3, #32
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	4833      	ldr	r0, [pc, #204]	@ (8014360 <_printf_i+0x23c>)
 8014294:	2778      	movs	r7, #120	@ 0x78
 8014296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	6831      	ldr	r1, [r6, #0]
 801429e:	061f      	lsls	r7, r3, #24
 80142a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80142a4:	d402      	bmi.n	80142ac <_printf_i+0x188>
 80142a6:	065f      	lsls	r7, r3, #25
 80142a8:	bf48      	it	mi
 80142aa:	b2ad      	uxthmi	r5, r5
 80142ac:	6031      	str	r1, [r6, #0]
 80142ae:	07d9      	lsls	r1, r3, #31
 80142b0:	bf44      	itt	mi
 80142b2:	f043 0320 	orrmi.w	r3, r3, #32
 80142b6:	6023      	strmi	r3, [r4, #0]
 80142b8:	b11d      	cbz	r5, 80142c2 <_printf_i+0x19e>
 80142ba:	2310      	movs	r3, #16
 80142bc:	e7ac      	b.n	8014218 <_printf_i+0xf4>
 80142be:	4827      	ldr	r0, [pc, #156]	@ (801435c <_printf_i+0x238>)
 80142c0:	e7e9      	b.n	8014296 <_printf_i+0x172>
 80142c2:	6823      	ldr	r3, [r4, #0]
 80142c4:	f023 0320 	bic.w	r3, r3, #32
 80142c8:	6023      	str	r3, [r4, #0]
 80142ca:	e7f6      	b.n	80142ba <_printf_i+0x196>
 80142cc:	4616      	mov	r6, r2
 80142ce:	e7bd      	b.n	801424c <_printf_i+0x128>
 80142d0:	6833      	ldr	r3, [r6, #0]
 80142d2:	6825      	ldr	r5, [r4, #0]
 80142d4:	6961      	ldr	r1, [r4, #20]
 80142d6:	1d18      	adds	r0, r3, #4
 80142d8:	6030      	str	r0, [r6, #0]
 80142da:	062e      	lsls	r6, r5, #24
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	d501      	bpl.n	80142e4 <_printf_i+0x1c0>
 80142e0:	6019      	str	r1, [r3, #0]
 80142e2:	e002      	b.n	80142ea <_printf_i+0x1c6>
 80142e4:	0668      	lsls	r0, r5, #25
 80142e6:	d5fb      	bpl.n	80142e0 <_printf_i+0x1bc>
 80142e8:	8019      	strh	r1, [r3, #0]
 80142ea:	2300      	movs	r3, #0
 80142ec:	6123      	str	r3, [r4, #16]
 80142ee:	4616      	mov	r6, r2
 80142f0:	e7bc      	b.n	801426c <_printf_i+0x148>
 80142f2:	6833      	ldr	r3, [r6, #0]
 80142f4:	1d1a      	adds	r2, r3, #4
 80142f6:	6032      	str	r2, [r6, #0]
 80142f8:	681e      	ldr	r6, [r3, #0]
 80142fa:	6862      	ldr	r2, [r4, #4]
 80142fc:	2100      	movs	r1, #0
 80142fe:	4630      	mov	r0, r6
 8014300:	f7eb ff46 	bl	8000190 <memchr>
 8014304:	b108      	cbz	r0, 801430a <_printf_i+0x1e6>
 8014306:	1b80      	subs	r0, r0, r6
 8014308:	6060      	str	r0, [r4, #4]
 801430a:	6863      	ldr	r3, [r4, #4]
 801430c:	6123      	str	r3, [r4, #16]
 801430e:	2300      	movs	r3, #0
 8014310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014314:	e7aa      	b.n	801426c <_printf_i+0x148>
 8014316:	6923      	ldr	r3, [r4, #16]
 8014318:	4632      	mov	r2, r6
 801431a:	4649      	mov	r1, r9
 801431c:	4640      	mov	r0, r8
 801431e:	47d0      	blx	sl
 8014320:	3001      	adds	r0, #1
 8014322:	d0ad      	beq.n	8014280 <_printf_i+0x15c>
 8014324:	6823      	ldr	r3, [r4, #0]
 8014326:	079b      	lsls	r3, r3, #30
 8014328:	d413      	bmi.n	8014352 <_printf_i+0x22e>
 801432a:	68e0      	ldr	r0, [r4, #12]
 801432c:	9b03      	ldr	r3, [sp, #12]
 801432e:	4298      	cmp	r0, r3
 8014330:	bfb8      	it	lt
 8014332:	4618      	movlt	r0, r3
 8014334:	e7a6      	b.n	8014284 <_printf_i+0x160>
 8014336:	2301      	movs	r3, #1
 8014338:	4632      	mov	r2, r6
 801433a:	4649      	mov	r1, r9
 801433c:	4640      	mov	r0, r8
 801433e:	47d0      	blx	sl
 8014340:	3001      	adds	r0, #1
 8014342:	d09d      	beq.n	8014280 <_printf_i+0x15c>
 8014344:	3501      	adds	r5, #1
 8014346:	68e3      	ldr	r3, [r4, #12]
 8014348:	9903      	ldr	r1, [sp, #12]
 801434a:	1a5b      	subs	r3, r3, r1
 801434c:	42ab      	cmp	r3, r5
 801434e:	dcf2      	bgt.n	8014336 <_printf_i+0x212>
 8014350:	e7eb      	b.n	801432a <_printf_i+0x206>
 8014352:	2500      	movs	r5, #0
 8014354:	f104 0619 	add.w	r6, r4, #25
 8014358:	e7f5      	b.n	8014346 <_printf_i+0x222>
 801435a:	bf00      	nop
 801435c:	08014d59 	.word	0x08014d59
 8014360:	08014d6a 	.word	0x08014d6a

08014364 <__sflush_r>:
 8014364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436c:	0716      	lsls	r6, r2, #28
 801436e:	4605      	mov	r5, r0
 8014370:	460c      	mov	r4, r1
 8014372:	d454      	bmi.n	801441e <__sflush_r+0xba>
 8014374:	684b      	ldr	r3, [r1, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	dc02      	bgt.n	8014380 <__sflush_r+0x1c>
 801437a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801437c:	2b00      	cmp	r3, #0
 801437e:	dd48      	ble.n	8014412 <__sflush_r+0xae>
 8014380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014382:	2e00      	cmp	r6, #0
 8014384:	d045      	beq.n	8014412 <__sflush_r+0xae>
 8014386:	2300      	movs	r3, #0
 8014388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801438c:	682f      	ldr	r7, [r5, #0]
 801438e:	6a21      	ldr	r1, [r4, #32]
 8014390:	602b      	str	r3, [r5, #0]
 8014392:	d030      	beq.n	80143f6 <__sflush_r+0x92>
 8014394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014396:	89a3      	ldrh	r3, [r4, #12]
 8014398:	0759      	lsls	r1, r3, #29
 801439a:	d505      	bpl.n	80143a8 <__sflush_r+0x44>
 801439c:	6863      	ldr	r3, [r4, #4]
 801439e:	1ad2      	subs	r2, r2, r3
 80143a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80143a2:	b10b      	cbz	r3, 80143a8 <__sflush_r+0x44>
 80143a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	2300      	movs	r3, #0
 80143aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80143ac:	6a21      	ldr	r1, [r4, #32]
 80143ae:	4628      	mov	r0, r5
 80143b0:	47b0      	blx	r6
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	89a3      	ldrh	r3, [r4, #12]
 80143b6:	d106      	bne.n	80143c6 <__sflush_r+0x62>
 80143b8:	6829      	ldr	r1, [r5, #0]
 80143ba:	291d      	cmp	r1, #29
 80143bc:	d82b      	bhi.n	8014416 <__sflush_r+0xb2>
 80143be:	4a2a      	ldr	r2, [pc, #168]	@ (8014468 <__sflush_r+0x104>)
 80143c0:	410a      	asrs	r2, r1
 80143c2:	07d6      	lsls	r6, r2, #31
 80143c4:	d427      	bmi.n	8014416 <__sflush_r+0xb2>
 80143c6:	2200      	movs	r2, #0
 80143c8:	6062      	str	r2, [r4, #4]
 80143ca:	04d9      	lsls	r1, r3, #19
 80143cc:	6922      	ldr	r2, [r4, #16]
 80143ce:	6022      	str	r2, [r4, #0]
 80143d0:	d504      	bpl.n	80143dc <__sflush_r+0x78>
 80143d2:	1c42      	adds	r2, r0, #1
 80143d4:	d101      	bne.n	80143da <__sflush_r+0x76>
 80143d6:	682b      	ldr	r3, [r5, #0]
 80143d8:	b903      	cbnz	r3, 80143dc <__sflush_r+0x78>
 80143da:	6560      	str	r0, [r4, #84]	@ 0x54
 80143dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80143de:	602f      	str	r7, [r5, #0]
 80143e0:	b1b9      	cbz	r1, 8014412 <__sflush_r+0xae>
 80143e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143e6:	4299      	cmp	r1, r3
 80143e8:	d002      	beq.n	80143f0 <__sflush_r+0x8c>
 80143ea:	4628      	mov	r0, r5
 80143ec:	f7ff fa9a 	bl	8013924 <_free_r>
 80143f0:	2300      	movs	r3, #0
 80143f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80143f4:	e00d      	b.n	8014412 <__sflush_r+0xae>
 80143f6:	2301      	movs	r3, #1
 80143f8:	4628      	mov	r0, r5
 80143fa:	47b0      	blx	r6
 80143fc:	4602      	mov	r2, r0
 80143fe:	1c50      	adds	r0, r2, #1
 8014400:	d1c9      	bne.n	8014396 <__sflush_r+0x32>
 8014402:	682b      	ldr	r3, [r5, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0c6      	beq.n	8014396 <__sflush_r+0x32>
 8014408:	2b1d      	cmp	r3, #29
 801440a:	d001      	beq.n	8014410 <__sflush_r+0xac>
 801440c:	2b16      	cmp	r3, #22
 801440e:	d11e      	bne.n	801444e <__sflush_r+0xea>
 8014410:	602f      	str	r7, [r5, #0]
 8014412:	2000      	movs	r0, #0
 8014414:	e022      	b.n	801445c <__sflush_r+0xf8>
 8014416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801441a:	b21b      	sxth	r3, r3
 801441c:	e01b      	b.n	8014456 <__sflush_r+0xf2>
 801441e:	690f      	ldr	r7, [r1, #16]
 8014420:	2f00      	cmp	r7, #0
 8014422:	d0f6      	beq.n	8014412 <__sflush_r+0xae>
 8014424:	0793      	lsls	r3, r2, #30
 8014426:	680e      	ldr	r6, [r1, #0]
 8014428:	bf08      	it	eq
 801442a:	694b      	ldreq	r3, [r1, #20]
 801442c:	600f      	str	r7, [r1, #0]
 801442e:	bf18      	it	ne
 8014430:	2300      	movne	r3, #0
 8014432:	eba6 0807 	sub.w	r8, r6, r7
 8014436:	608b      	str	r3, [r1, #8]
 8014438:	f1b8 0f00 	cmp.w	r8, #0
 801443c:	dde9      	ble.n	8014412 <__sflush_r+0xae>
 801443e:	6a21      	ldr	r1, [r4, #32]
 8014440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014442:	4643      	mov	r3, r8
 8014444:	463a      	mov	r2, r7
 8014446:	4628      	mov	r0, r5
 8014448:	47b0      	blx	r6
 801444a:	2800      	cmp	r0, #0
 801444c:	dc08      	bgt.n	8014460 <__sflush_r+0xfc>
 801444e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014456:	81a3      	strh	r3, [r4, #12]
 8014458:	f04f 30ff 	mov.w	r0, #4294967295
 801445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014460:	4407      	add	r7, r0
 8014462:	eba8 0800 	sub.w	r8, r8, r0
 8014466:	e7e7      	b.n	8014438 <__sflush_r+0xd4>
 8014468:	dfbffffe 	.word	0xdfbffffe

0801446c <_fflush_r>:
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	690b      	ldr	r3, [r1, #16]
 8014470:	4605      	mov	r5, r0
 8014472:	460c      	mov	r4, r1
 8014474:	b913      	cbnz	r3, 801447c <_fflush_r+0x10>
 8014476:	2500      	movs	r5, #0
 8014478:	4628      	mov	r0, r5
 801447a:	bd38      	pop	{r3, r4, r5, pc}
 801447c:	b118      	cbz	r0, 8014486 <_fflush_r+0x1a>
 801447e:	6a03      	ldr	r3, [r0, #32]
 8014480:	b90b      	cbnz	r3, 8014486 <_fflush_r+0x1a>
 8014482:	f7ff f817 	bl	80134b4 <__sinit>
 8014486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d0f3      	beq.n	8014476 <_fflush_r+0xa>
 801448e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014490:	07d0      	lsls	r0, r2, #31
 8014492:	d404      	bmi.n	801449e <_fflush_r+0x32>
 8014494:	0599      	lsls	r1, r3, #22
 8014496:	d402      	bmi.n	801449e <_fflush_r+0x32>
 8014498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801449a:	f7ff fa32 	bl	8013902 <__retarget_lock_acquire_recursive>
 801449e:	4628      	mov	r0, r5
 80144a0:	4621      	mov	r1, r4
 80144a2:	f7ff ff5f 	bl	8014364 <__sflush_r>
 80144a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144a8:	07da      	lsls	r2, r3, #31
 80144aa:	4605      	mov	r5, r0
 80144ac:	d4e4      	bmi.n	8014478 <_fflush_r+0xc>
 80144ae:	89a3      	ldrh	r3, [r4, #12]
 80144b0:	059b      	lsls	r3, r3, #22
 80144b2:	d4e1      	bmi.n	8014478 <_fflush_r+0xc>
 80144b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144b6:	f7ff fa25 	bl	8013904 <__retarget_lock_release_recursive>
 80144ba:	e7dd      	b.n	8014478 <_fflush_r+0xc>

080144bc <__swhatbuf_r>:
 80144bc:	b570      	push	{r4, r5, r6, lr}
 80144be:	460c      	mov	r4, r1
 80144c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144c4:	2900      	cmp	r1, #0
 80144c6:	b096      	sub	sp, #88	@ 0x58
 80144c8:	4615      	mov	r5, r2
 80144ca:	461e      	mov	r6, r3
 80144cc:	da0d      	bge.n	80144ea <__swhatbuf_r+0x2e>
 80144ce:	89a3      	ldrh	r3, [r4, #12]
 80144d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80144d4:	f04f 0100 	mov.w	r1, #0
 80144d8:	bf14      	ite	ne
 80144da:	2340      	movne	r3, #64	@ 0x40
 80144dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80144e0:	2000      	movs	r0, #0
 80144e2:	6031      	str	r1, [r6, #0]
 80144e4:	602b      	str	r3, [r5, #0]
 80144e6:	b016      	add	sp, #88	@ 0x58
 80144e8:	bd70      	pop	{r4, r5, r6, pc}
 80144ea:	466a      	mov	r2, sp
 80144ec:	f000 f862 	bl	80145b4 <_fstat_r>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	dbec      	blt.n	80144ce <__swhatbuf_r+0x12>
 80144f4:	9901      	ldr	r1, [sp, #4]
 80144f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80144fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80144fe:	4259      	negs	r1, r3
 8014500:	4159      	adcs	r1, r3
 8014502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014506:	e7eb      	b.n	80144e0 <__swhatbuf_r+0x24>

08014508 <__smakebuf_r>:
 8014508:	898b      	ldrh	r3, [r1, #12]
 801450a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801450c:	079d      	lsls	r5, r3, #30
 801450e:	4606      	mov	r6, r0
 8014510:	460c      	mov	r4, r1
 8014512:	d507      	bpl.n	8014524 <__smakebuf_r+0x1c>
 8014514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014518:	6023      	str	r3, [r4, #0]
 801451a:	6123      	str	r3, [r4, #16]
 801451c:	2301      	movs	r3, #1
 801451e:	6163      	str	r3, [r4, #20]
 8014520:	b003      	add	sp, #12
 8014522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014524:	ab01      	add	r3, sp, #4
 8014526:	466a      	mov	r2, sp
 8014528:	f7ff ffc8 	bl	80144bc <__swhatbuf_r>
 801452c:	9f00      	ldr	r7, [sp, #0]
 801452e:	4605      	mov	r5, r0
 8014530:	4639      	mov	r1, r7
 8014532:	4630      	mov	r0, r6
 8014534:	f7ff fa62 	bl	80139fc <_malloc_r>
 8014538:	b948      	cbnz	r0, 801454e <__smakebuf_r+0x46>
 801453a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801453e:	059a      	lsls	r2, r3, #22
 8014540:	d4ee      	bmi.n	8014520 <__smakebuf_r+0x18>
 8014542:	f023 0303 	bic.w	r3, r3, #3
 8014546:	f043 0302 	orr.w	r3, r3, #2
 801454a:	81a3      	strh	r3, [r4, #12]
 801454c:	e7e2      	b.n	8014514 <__smakebuf_r+0xc>
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	6020      	str	r0, [r4, #0]
 8014552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014556:	81a3      	strh	r3, [r4, #12]
 8014558:	9b01      	ldr	r3, [sp, #4]
 801455a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801455e:	b15b      	cbz	r3, 8014578 <__smakebuf_r+0x70>
 8014560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014564:	4630      	mov	r0, r6
 8014566:	f000 f837 	bl	80145d8 <_isatty_r>
 801456a:	b128      	cbz	r0, 8014578 <__smakebuf_r+0x70>
 801456c:	89a3      	ldrh	r3, [r4, #12]
 801456e:	f023 0303 	bic.w	r3, r3, #3
 8014572:	f043 0301 	orr.w	r3, r3, #1
 8014576:	81a3      	strh	r3, [r4, #12]
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	431d      	orrs	r5, r3
 801457c:	81a5      	strh	r5, [r4, #12]
 801457e:	e7cf      	b.n	8014520 <__smakebuf_r+0x18>

08014580 <memmove>:
 8014580:	4288      	cmp	r0, r1
 8014582:	b510      	push	{r4, lr}
 8014584:	eb01 0402 	add.w	r4, r1, r2
 8014588:	d902      	bls.n	8014590 <memmove+0x10>
 801458a:	4284      	cmp	r4, r0
 801458c:	4623      	mov	r3, r4
 801458e:	d807      	bhi.n	80145a0 <memmove+0x20>
 8014590:	1e43      	subs	r3, r0, #1
 8014592:	42a1      	cmp	r1, r4
 8014594:	d008      	beq.n	80145a8 <memmove+0x28>
 8014596:	f811 2b01 	ldrb.w	r2, [r1], #1
 801459a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801459e:	e7f8      	b.n	8014592 <memmove+0x12>
 80145a0:	4402      	add	r2, r0
 80145a2:	4601      	mov	r1, r0
 80145a4:	428a      	cmp	r2, r1
 80145a6:	d100      	bne.n	80145aa <memmove+0x2a>
 80145a8:	bd10      	pop	{r4, pc}
 80145aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145b2:	e7f7      	b.n	80145a4 <memmove+0x24>

080145b4 <_fstat_r>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4d07      	ldr	r5, [pc, #28]	@ (80145d4 <_fstat_r+0x20>)
 80145b8:	2300      	movs	r3, #0
 80145ba:	4604      	mov	r4, r0
 80145bc:	4608      	mov	r0, r1
 80145be:	4611      	mov	r1, r2
 80145c0:	602b      	str	r3, [r5, #0]
 80145c2:	f7ed f942 	bl	800184a <_fstat>
 80145c6:	1c43      	adds	r3, r0, #1
 80145c8:	d102      	bne.n	80145d0 <_fstat_r+0x1c>
 80145ca:	682b      	ldr	r3, [r5, #0]
 80145cc:	b103      	cbz	r3, 80145d0 <_fstat_r+0x1c>
 80145ce:	6023      	str	r3, [r4, #0]
 80145d0:	bd38      	pop	{r3, r4, r5, pc}
 80145d2:	bf00      	nop
 80145d4:	20005088 	.word	0x20005088

080145d8 <_isatty_r>:
 80145d8:	b538      	push	{r3, r4, r5, lr}
 80145da:	4d06      	ldr	r5, [pc, #24]	@ (80145f4 <_isatty_r+0x1c>)
 80145dc:	2300      	movs	r3, #0
 80145de:	4604      	mov	r4, r0
 80145e0:	4608      	mov	r0, r1
 80145e2:	602b      	str	r3, [r5, #0]
 80145e4:	f7ed f941 	bl	800186a <_isatty>
 80145e8:	1c43      	adds	r3, r0, #1
 80145ea:	d102      	bne.n	80145f2 <_isatty_r+0x1a>
 80145ec:	682b      	ldr	r3, [r5, #0]
 80145ee:	b103      	cbz	r3, 80145f2 <_isatty_r+0x1a>
 80145f0:	6023      	str	r3, [r4, #0]
 80145f2:	bd38      	pop	{r3, r4, r5, pc}
 80145f4:	20005088 	.word	0x20005088

080145f8 <_sbrk_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4d06      	ldr	r5, [pc, #24]	@ (8014614 <_sbrk_r+0x1c>)
 80145fc:	2300      	movs	r3, #0
 80145fe:	4604      	mov	r4, r0
 8014600:	4608      	mov	r0, r1
 8014602:	602b      	str	r3, [r5, #0]
 8014604:	f7ed f94a 	bl	800189c <_sbrk>
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	d102      	bne.n	8014612 <_sbrk_r+0x1a>
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	b103      	cbz	r3, 8014612 <_sbrk_r+0x1a>
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	bd38      	pop	{r3, r4, r5, pc}
 8014614:	20005088 	.word	0x20005088

08014618 <_realloc_r>:
 8014618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801461c:	4680      	mov	r8, r0
 801461e:	4615      	mov	r5, r2
 8014620:	460c      	mov	r4, r1
 8014622:	b921      	cbnz	r1, 801462e <_realloc_r+0x16>
 8014624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014628:	4611      	mov	r1, r2
 801462a:	f7ff b9e7 	b.w	80139fc <_malloc_r>
 801462e:	b92a      	cbnz	r2, 801463c <_realloc_r+0x24>
 8014630:	f7ff f978 	bl	8013924 <_free_r>
 8014634:	2400      	movs	r4, #0
 8014636:	4620      	mov	r0, r4
 8014638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463c:	f000 f81a 	bl	8014674 <_malloc_usable_size_r>
 8014640:	4285      	cmp	r5, r0
 8014642:	4606      	mov	r6, r0
 8014644:	d802      	bhi.n	801464c <_realloc_r+0x34>
 8014646:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801464a:	d8f4      	bhi.n	8014636 <_realloc_r+0x1e>
 801464c:	4629      	mov	r1, r5
 801464e:	4640      	mov	r0, r8
 8014650:	f7ff f9d4 	bl	80139fc <_malloc_r>
 8014654:	4607      	mov	r7, r0
 8014656:	2800      	cmp	r0, #0
 8014658:	d0ec      	beq.n	8014634 <_realloc_r+0x1c>
 801465a:	42b5      	cmp	r5, r6
 801465c:	462a      	mov	r2, r5
 801465e:	4621      	mov	r1, r4
 8014660:	bf28      	it	cs
 8014662:	4632      	movcs	r2, r6
 8014664:	f7ff f94f 	bl	8013906 <memcpy>
 8014668:	4621      	mov	r1, r4
 801466a:	4640      	mov	r0, r8
 801466c:	f7ff f95a 	bl	8013924 <_free_r>
 8014670:	463c      	mov	r4, r7
 8014672:	e7e0      	b.n	8014636 <_realloc_r+0x1e>

08014674 <_malloc_usable_size_r>:
 8014674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014678:	1f18      	subs	r0, r3, #4
 801467a:	2b00      	cmp	r3, #0
 801467c:	bfbc      	itt	lt
 801467e:	580b      	ldrlt	r3, [r1, r0]
 8014680:	18c0      	addlt	r0, r0, r3
 8014682:	4770      	bx	lr

08014684 <_init>:
 8014684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014686:	bf00      	nop
 8014688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801468a:	bc08      	pop	{r3}
 801468c:	469e      	mov	lr, r3
 801468e:	4770      	bx	lr

08014690 <_fini>:
 8014690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014692:	bf00      	nop
 8014694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014696:	bc08      	pop	{r3}
 8014698:	469e      	mov	lr, r3
 801469a:	4770      	bx	lr
