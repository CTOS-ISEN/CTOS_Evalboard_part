
Tof_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001770c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0801784c  0801784c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b30  08017b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b38  08017b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b3c  08017b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  20000008  08017b40  00019008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000075fc  200000e0  08017c18  000190e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200076dc  08017c18  000196dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000190e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000555a8  00000000  00000000  00019110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064fb  00000000  00000000  0006e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002930  00000000  00000000  00074bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f8d  00000000  00000000  000774e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002cae6  00000000  00000000  00079475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034377  00000000  00000000  000a5f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010c703  00000000  00000000  000da2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e69d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b6ec  00000000  00000000  001e6a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000048  00000000  00000000  001f2104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08017834 	.word	0x08017834

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	08017834 	.word	0x08017834

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9b5 	b.w	80005ac <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	f023 0218 	bic.w	r2, r3, #24
 8000612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e009      	b.n	8000682 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff9a 	bl	80005b0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbf1      	blt.n	800066e <_write+0x12>
}
return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f011 ff46 	bl	8012528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80c 	bl	80006b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a0:	f000 f880 	bl	80007a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f8c4 	bl	8000830 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006a8:	f000 f89a 	bl	80007e0 <MX_USB_PCD_Init>
  MX_TOF_Init();
 80006ac:	f015 feeb 	bl	8016486 <MX_TOF_Init>
  while (1)
  {

    /* USER CODE END WHILE */

  MX_TOF_Process();
 80006b0:	f015 feef 	bl	8016492 <MX_TOF_Process>
 80006b4:	e7fc      	b.n	80006b0 <main+0x1c>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09a      	sub	sp, #104	@ 0x68
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2248      	movs	r2, #72	@ 0x48
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f016 fada 	bl	8016c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006ec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	f023 0303 	bic.w	r3, r3, #3
 80006f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000702:	f013 fae1 	bl	8013cc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff79 	bl	80005fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xe8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000714:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <SystemClock_Config+0xe8>)
 8000716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <SystemClock_Config+0xe8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000728:	2327      	movs	r3, #39	@ 0x27
 800072a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f013 fe4b 	bl	80143f0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 f8be 	bl	80008e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000764:	236f      	movs	r3, #111	@ 0x6f
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f014 f9a7 	bl	8014ad8 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000790:	f000 f8a6 	bl	80008e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000794:	f014 ff62 	bl	801565c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000798:	bf00      	nop
 800079a:	3768      	adds	r7, #104	@ 0x68
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000400 	.word	0x58000400

080007a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2250      	movs	r2, #80	@ 0x50
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f016 fa65 	bl	8016c80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f014 fdd2 	bl	8015370 <HAL_RCCEx_PeriphCLKConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007d2:	f000 f885 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007e6:	4a11      	ldr	r2, [pc, #68]	@ (800082c <MX_USB_PCD_Init+0x4c>)
 80007e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007fe:	2200      	movs	r2, #0
 8000800:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000804:	2200      	movs	r2, #0
 8000806:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 800080a:	2200      	movs	r2, #0
 800080c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000810:	2200      	movs	r2, #0
 8000812:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000816:	f013 f95e 	bl	8013ad6 <HAL_PCD_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000820:	f000 f85e 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000fc 	.word	0x200000fc
 800082c:	40006800 	.word	0x40006800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	2004      	movs	r0, #4
 8000846:	f7ff fef0 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff feea 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2008      	movs	r0, #8
 8000858:	f7ff fee7 	bl	800062a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2123      	movs	r1, #35	@ 0x23
 8000860:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <MX_GPIO_Init+0xa8>)
 8000862:	f012 fac5 	bl	8012df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000866:	2323      	movs	r3, #35	@ 0x23
 8000868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4817      	ldr	r0, [pc, #92]	@ (80008d8 <MX_GPIO_Init+0xa8>)
 800087c:	f012 f86a 	bl	8012954 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000884:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	2301      	movs	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4812      	ldr	r0, [pc, #72]	@ (80008dc <MX_GPIO_Init+0xac>)
 8000894:	f012 f85e 	bl	8012954 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000898:	2302      	movs	r3, #2
 800089a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <MX_GPIO_Init+0xac>)
 80008aa:	f012 f853 	bl	8012954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2006      	movs	r0, #6
 80008b4:	f011 ffbd 	bl	8012832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f011 ffd4 	bl	8012866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	200a      	movs	r0, #10
 80008c4:	f011 ffb5 	bl	8012832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f011 ffcc 	bl	8012866 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000c00 	.word	0x48000c00

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <LL_AHB2_GRP1_EnableClock>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800092c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2250      	movs	r2, #80	@ 0x50
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f016 f97d 	bl	8016c80 <memset>
  if(hpcd->Instance==USB)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <HAL_PCD_MspInit+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d136      	bne.n	80009fe <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000994:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000996:	2318      	movs	r3, #24
 8000998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800099a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800099e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80009a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80009a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80009ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4618      	mov	r0, r3
 80009be:	f014 fcd7 	bl	8015370 <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80009c8:	f7ff ff8a 	bl	80008e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff ff8d 	bl	80008ec <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009e4:	230a      	movs	r3, #10
 80009e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f011 ffaf 	bl	8012954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009f6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80009fa:	f7ff ff90 	bl	800091e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	@ 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006800 	.word	0x40006800

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f011 fdbb 	bl	80125dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f012 f9d6 	bl	8012e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <EXTI4_IRQHandler+0x10>)
 8000a7e:	f011 ff3a 	bl	80128f6 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000070 	.word	0x20000070

08000a8c <LL_AHB2_GRP1_EnableClock>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_APB1_GRP1_EnableClock>:
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ada:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b06:	4013      	ands	r3, r2
 8000b08:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <BSP_I2C1_Init+0x70>)
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <BSP_I2C1_Init+0x74>)
 8000b26:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <BSP_I2C1_Init+0x78>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	4918      	ldr	r1, [pc, #96]	@ (8000b90 <BSP_I2C1_Init+0x78>)
 8000b30:	600a      	str	r2, [r1, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d122      	bne.n	8000b7c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000b36:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <BSP_I2C1_Init+0x70>)
 8000b38:	f012 fc76 	bl	8013428 <HAL_I2C_GetState>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11c      	bne.n	8000b7c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b42:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <BSP_I2C1_Init+0x70>)
 8000b44:	f000 f8ee 	bl	8000d24 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d116      	bne.n	8000b7c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <BSP_I2C1_Init+0x70>)
 8000b50:	f000 f8a4 	bl	8000c9c <MX_I2C1_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b5a:	f06f 0307 	mvn.w	r3, #7
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	e00c      	b.n	8000b7c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <BSP_I2C1_Init+0x70>)
 8000b66:	f012 ff1f 	bl	80139a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b70:	f06f 0307 	mvn.w	r3, #7
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	e001      	b.n	8000b7c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200003d8 	.word	0x200003d8
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	2000042c 	.word	0x2000042c

08000b94 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d014      	beq.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10b      	bne.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000bb8:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <BSP_I2C1_DeInit+0x4c>)
 8000bba:	f000 f8f7 	bl	8000dac <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000bbe:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <BSP_I2C1_DeInit+0x4c>)
 8000bc0:	f012 f9e1 	bl	8012f86 <HAL_I2C_DeInit>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000bca:	f06f 0307 	mvn.w	r3, #7
 8000bce:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000042c 	.word	0x2000042c
 8000be0:	200003d8 	.word	0x200003d8

08000be4 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	80fb      	strh	r3, [r7, #6]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	88f9      	ldrh	r1, [r7, #6]
 8000bfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c00:	9200      	str	r2, [sp, #0]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <BSP_I2C1_Send+0x50>)
 8000c06:	f012 fa01 	bl	801300c <HAL_I2C_Master_Transmit>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00c      	beq.n	8000c2a <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <BSP_I2C1_Send+0x50>)
 8000c12:	f012 fc17 	bl	8013444 <HAL_I2C_GetError>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d003      	beq.n	8000c24 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c1c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e002      	b.n	8000c2a <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c24:	f06f 0303 	mvn.w	r3, #3
 8000c28:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200003d8 	.word	0x200003d8

08000c38 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	4613      	mov	r3, r2
 8000c46:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	88f9      	ldrh	r1, [r7, #6]
 8000c50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c54:	9200      	str	r2, [sp, #0]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <BSP_I2C1_Recv+0x50>)
 8000c5a:	f012 faef 	bl	801323c <HAL_I2C_Master_Receive>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00c      	beq.n	8000c7e <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <BSP_I2C1_Recv+0x50>)
 8000c66:	f012 fbed 	bl	8013444 <HAL_I2C_GetError>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d003      	beq.n	8000c78 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c70:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e002      	b.n	8000c7e <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c78:	f06f 0303 	mvn.w	r3, #3
 8000c7c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200003d8 	.word	0x200003d8

08000c8c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c90:	f011 fcb8 	bl	8012604 <HAL_GetTick>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <MX_I2C1_Init+0x80>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <MX_I2C1_Init+0x84>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f012 f8b6 	bl	8012e50 <HAL_I2C_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f012 fe59 	bl	80139a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f012 fe9b 	bl	8013a3e <HAL_I2CEx_ConfigDigitalFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	00b07cb4 	.word	0x00b07cb4

08000d24 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	@ 0x70
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2250      	movs	r2, #80	@ 0x50
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f015 ffa3 	bl	8016c80 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d3e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f014 fb11 	bl	8015370 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fe9c 	bl	8000a8c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d66:	2304      	movs	r3, #4
 8000d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <I2C1_MspInit+0x84>)
 8000d72:	f011 fdef 	bl	8012954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <I2C1_MspInit+0x84>)
 8000d94:	f011 fdde 	bl	8012954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d9c:	f7ff fe8f 	bl	8000abe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	3770      	adds	r7, #112	@ 0x70
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48000400 	.word	0x48000400

08000dac <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000db4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000db8:	f7ff fe9a 	bl	8000af0 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <I2C1_MspDeInit+0x2c>)
 8000dc2:	f011 ff37 	bl	8012c34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dca:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <I2C1_MspDeInit+0x2c>)
 8000dcc:	f011 ff32 	bl	8012c34 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48000400 	.word	0x48000400

08000ddc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00a      	b.n	8000e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dee:	f3af 8000 	nop.w
 8000df2:	4601      	mov	r1, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf0      	blt.n	8000dee <_read+0x12>
  }

  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f015 ff48 	bl	8016d44 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20030000 	.word	0x20030000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000430 	.word	0x20000430
 8000ee8:	200076e0 	.word	0x200076e0

08000eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ef0:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <SystemInit+0x98>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <SystemInit+0x98>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f14:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f18:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <SystemInit+0x9c>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f36:	f023 0305 	bic.w	r3, r3, #5
 8000f3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f56:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <SystemInit+0xa0>)
 8000f58:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <SystemInit+0xa0>)
 8000f60:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	faf6fefb 	.word	0xfaf6fefb
 8000f8c:	22041000 	.word	0x22041000

08000f90 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f90:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f92:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f94:	3304      	adds	r3, #4

08000f96 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f96:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f98:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f9a:	d3f9      	bcc.n	8000f90 <CopyDataInit>
  bx lr
 8000f9c:	4770      	bx	lr

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f9e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fa0:	3004      	adds	r0, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fa2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>
  bx lr
 8000fa6:	4770      	bx	lr

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f7ff ff9e 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fb0:	480b      	ldr	r0, [pc, #44]	@ (8000fe0 <LoopForever+0x6>)
 8000fb2:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <LoopForever+0xa>)
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <LoopForever+0xe>)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f7ff ffed 	bl	8000f96 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fbc:	480b      	ldr	r0, [pc, #44]	@ (8000fec <LoopForever+0x12>)
 8000fbe:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <LoopForever+0x16>)
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <LoopForever+0x1a>)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f7ff ffe7 	bl	8000f96 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <LoopForever+0x1e>)
 8000fca:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <LoopForever+0x22>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f7ff ffe8 	bl	8000fa2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd2:	f015 febd 	bl	8016d50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fd6:	f7ff fb5d 	bl	8000694 <main>

08000fda <LoopForever>:

LoopForever:
  b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   r0, =_estack
 8000fdc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200000e0 	.word	0x200000e0
 8000fe8:	08017b40 	.word	0x08017b40
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fec:	20030000 	.word	0x20030000
 8000ff0:	20030000 	.word	0x20030000
 8000ff4:	08017c18 	.word	0x08017c18
  INIT_BSS _sbss, _ebss
 8000ff8:	200000e0 	.word	0x200000e0
 8000ffc:	200076dc 	.word	0x200076dc

08001000 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>

08001002 <VL53L4A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d903      	bls.n	8001018 <VL53L4A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001010:	f06f 0301 	mvn.w	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e003      	b.n	8001020 <VL53L4A2_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L4CX_Probe(Instance);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f919 	bl	8001250 <VL53L4CX_Probe>
 800101e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001020:	68fb      	ldr	r3, [r7, #12]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <VL53L4A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d903      	bls.n	8001044 <VL53L4A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800103c:	f06f 0301 	mvn.w	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e012      	b.n	800106a <VL53L4A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ReadID(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <VL53L4A2_RANGING_SENSOR_ReadID+0x48>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	490b      	ldr	r1, [pc, #44]	@ (8001078 <VL53L4A2_RANGING_SENSOR_ReadID+0x4c>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	4610      	mov	r0, r2
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	da03      	bge.n	8001066 <VL53L4A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800105e:	f06f 0304 	mvn.w	r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <VL53L4A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000440 	.word	0x20000440
 8001078:	20000434 	.word	0x20000434

0800107c <VL53L4A2_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d903      	bls.n	8001094 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800108c:	f06f 0301 	mvn.w	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e012      	b.n	80010ba <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x48>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	490b      	ldr	r1, [pc, #44]	@ (80010c8 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x4c>)
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4610      	mov	r0, r2
 80010a6:	4798      	blx	r3
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da03      	bge.n	80010b6 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80010ae:	f06f 0304 	mvn.w	r3, #4
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e001      	b.n	80010ba <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000440 	.word	0x20000440
 80010c8:	20000434 	.word	0x20000434

080010cc <VL53L4A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d903      	bls.n	80010e4 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010dc:	f06f 0301 	mvn.w	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e012      	b.n	800110a <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	490b      	ldr	r1, [pc, #44]	@ (8001118 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	4610      	mov	r0, r2
 80010f6:	4798      	blx	r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da03      	bge.n	8001106 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80010fe:	f06f 0304 	mvn.w	r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e001      	b.n	800110a <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000440 	.word	0x20000440
 8001118:	20000434 	.word	0x20000434

0800111c <VL53L4A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d903      	bls.n	8001134 <VL53L4A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800112c:	f06f 0301 	mvn.w	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e012      	b.n	800115a <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetDistance(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <VL53L4A2_RANGING_SENSOR_GetDistance+0x48>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	490b      	ldr	r1, [pc, #44]	@ (8001168 <VL53L4A2_RANGING_SENSOR_GetDistance+0x4c>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4610      	mov	r0, r2
 8001146:	4798      	blx	r3
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	da03      	bge.n	8001156 <VL53L4A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800114e:	f06f 0304 	mvn.w	r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e001      	b.n	800115a <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000440 	.word	0x20000440
 8001168:	20000434 	.word	0x20000434

0800116c <VL53L4A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d903      	bls.n	8001184 <VL53L4A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800117c:	f06f 0301 	mvn.w	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e012      	b.n	80011aa <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Start(VL53L4A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <VL53L4A2_RANGING_SENSOR_Start+0x48>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	490b      	ldr	r1, [pc, #44]	@ (80011b8 <VL53L4A2_RANGING_SENSOR_Start+0x4c>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	4798      	blx	r3
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	da03      	bge.n	80011a6 <VL53L4A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800119e:	f06f 0304 	mvn.w	r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e001      	b.n	80011aa <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000440 	.word	0x20000440
 80011b8:	20000434 	.word	0x20000434

080011bc <VL53L4A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d903      	bls.n	80011d2 <VL53L4A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011ca:	f06f 0301 	mvn.w	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e011      	b.n	80011f6 <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Stop(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <VL53L4A2_RANGING_SENSOR_Stop+0x44>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	490a      	ldr	r1, [pc, #40]	@ (8001204 <VL53L4A2_RANGING_SENSOR_Stop+0x48>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e0:	4610      	mov	r0, r2
 80011e2:	4798      	blx	r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da03      	bge.n	80011f2 <VL53L4A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80011ea:	f06f 0304 	mvn.w	r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e001      	b.n	80011f6 <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000440 	.word	0x20000440
 8001204:	20000434 	.word	0x20000434

08001208 <VL53L4A2_RANGING_SENSOR_OffsetCalibration>:
  * @param Instance    Ranging sensor instance.
  * @param CalDistance   Calibration distance in mm.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_OffsetCalibration(uint32_t Instance, uint32_t CalDistance)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d903      	bls.n	8001220 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001218:	f06f 0301 	mvn.w	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e010      	b.n	8001242 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else if (VL53L4CX_OffsetCalibration(VL53L4A2_RANGING_SENSOR_CompObj[Instance], CalDistance) < 0)
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x44>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f010 fe7c 	bl	8011f28 <VL53L4CX_OffsetCalibration>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	da03      	bge.n	800123e <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001236:	f06f 0304 	mvn.w	r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e001      	b.n	8001242 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000434 	.word	0x20000434

08001250 <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 8001258:	2352      	movs	r3, #82	@ 0x52
 800125a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L4A2_I2C_INIT;
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <VL53L4CX_Probe+0xf0>)
 800125e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L4A2_I2C_DEINIT;
 8001260:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <VL53L4CX_Probe+0xf4>)
 8001262:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L4A2_I2C_WRITEREG;
 8001264:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <VL53L4CX_Probe+0xf8>)
 8001266:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L4A2_I2C_READREG;
 8001268:	4b38      	ldr	r3, [pc, #224]	@ (800134c <VL53L4CX_Probe+0xfc>)
 800126a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L4A2_GETTICK;
 800126c:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <VL53L4CX_Probe+0x100>)
 800126e:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&(VL53L4CXObj[Instance]), &IOCtx) != VL53L4CX_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	4a36      	ldr	r2, [pc, #216]	@ (8001354 <VL53L4CX_Probe+0x104>)
 800127c:	4413      	add	r3, r2
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f010 fb66 	bl	8011956 <VL53L4CX_RegisterBusIO>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <VL53L4CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001290:	f06f 0304 	mvn.w	r3, #4
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e04d      	b.n	8001334 <VL53L4CX_Probe+0xe4>
  }
  else
  {
    VL53L4A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <VL53L4CX_Probe+0x108>)
 800129a:	4a30      	ldr	r2, [pc, #192]	@ (800135c <VL53L4CX_Probe+0x10c>)
 800129c:	601a      	str	r2, [r3, #0]
    VL53L4A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L4CXObj[Instance]);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <VL53L4CX_Probe+0x104>)
 80012aa:	441a      	add	r2, r3
 80012ac:	492c      	ldr	r1, [pc, #176]	@ (8001360 <VL53L4CX_Probe+0x110>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L4CX_ReadID(&(VL53L4CXObj[Instance]), &id) != VL53L4CX_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a25      	ldr	r2, [pc, #148]	@ (8001354 <VL53L4CX_Probe+0x104>)
 80012c0:	4413      	add	r3, r2
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f010 fbf6 	bl	8011aba <VL53L4CX_ReadID>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <VL53L4CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012d4:	f06f 0304 	mvn.w	r3, #4
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012da:	e02b      	b.n	8001334 <VL53L4CX_Probe+0xe4>
    }
    else if (id != VL53L4CX_ID)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d003      	beq.n	80012ee <VL53L4CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80012e6:	f06f 0306 	mvn.w	r3, #6
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ec:	e022      	b.n	8001334 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->Init(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) != VL53L4CX_OK)
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <VL53L4CX_Probe+0x108>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	491a      	ldr	r1, [pc, #104]	@ (8001360 <VL53L4CX_Probe+0x110>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012fc:	4610      	mov	r0, r2
 80012fe:	4798      	blx	r3
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <VL53L4CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001306:	f06f 0304 	mvn.w	r3, #4
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
 800130c:	e012      	b.n	8001334 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance],
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <VL53L4CX_Probe+0x108>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4912      	ldr	r1, [pc, #72]	@ (8001360 <VL53L4CX_Probe+0x110>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800131c:	4911      	ldr	r1, [pc, #68]	@ (8001364 <VL53L4CX_Probe+0x114>)
 800131e:	4610      	mov	r0, r2
 8001320:	4798      	blx	r3
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <VL53L4CX_Probe+0xe0>
                                                          &VL53L4A2_RANGING_SENSOR_Cap) != VL53L4CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001328:	f06f 0304 	mvn.w	r3, #4
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e001      	b.n	8001334 <VL53L4CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001336:	4618      	mov	r0, r3
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08000b19 	.word	0x08000b19
 8001344:	08000b95 	.word	0x08000b95
 8001348:	08000be5 	.word	0x08000be5
 800134c:	08000c39 	.word	0x08000c39
 8001350:	08000c8d 	.word	0x08000c8d
 8001354:	20000458 	.word	0x20000458
 8001358:	20000440 	.word	0x20000440
 800135c:	20000038 	.word	0x20000038
 8001360:	20000434 	.word	0x20000434
 8001364:	20000444 	.word	0x20000444

08001368 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3318      	adds	r3, #24
 800137c:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001384:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f010 f8e7 	bl	8011564 <VL53LX_WrByte>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80013aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 80013c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 80013ca:	2101      	movs	r1, #1
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f001 fe7a 	bl	80030c6 <VL53LX_data_init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 80013d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 80013de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e2:	2102      	movs	r1, #2
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f885 	bl	80014f4 <SetPresetModeL3CX>
 80013ea:	4603      	mov	r3, r0
 80013ec:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 80013ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80013f6:	f248 2135 	movw	r1, #33333	@ 0x8235
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f980 	bl	8001700 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3318      	adds	r3, #24
 8001410:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8001418:	220c      	movs	r2, #12
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f015 fc2f 	bl	8016c80 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800142a:	2102      	movs	r1, #2
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f004 f86e 	bl	800550e <VL53LX_set_dmax_mode>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001436:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 ff57 	bl	80022f4 <VL53LX_SmudgeCorrectionEnable>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800144a:	2320      	movs	r3, #32
 800144c:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800145a:	2202      	movs	r2, #2
 800145c:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001478:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f00f fc2a 	bl	8010cd6 <VL53LX_poll_for_boot_completion>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <ComputeDevicePresetMode+0x5c>)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	4611      	mov	r1, r2
 80014ae:	8019      	strh	r1, [r3, #0]
 80014b0:	3302      	adds	r3, #2
 80014b2:	0c12      	lsrs	r2, r2, #16
 80014b4:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d002      	beq.n	80014c2 <ComputeDevicePresetMode+0x2e>
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d003      	beq.n	80014c8 <ComputeDevicePresetMode+0x34>
 80014c0:	e005      	b.n	80014ce <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
		break;
 80014c6:	e004      	b.n	80014d2 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
		break;
 80014cc:	e001      	b.n	80014d2 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3310      	adds	r3, #16
 80014d6:	443b      	add	r3, r7
 80014d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	701a      	strb	r2, [r3, #0]

	return Status;
 80014e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	0801784c 	.word	0x0801784c

080014f4 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b08e      	sub	sp, #56	@ 0x38
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	460b      	mov	r3, r1
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001518:	2320      	movs	r3, #32
 800151a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800151e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffb4 	bl	8001494 <ComputeDevicePresetMode>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001532:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001536:	2b00      	cmp	r3, #0
 8001538:	d112      	bne.n	8001560 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 800153a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800153e:	f107 001c 	add.w	r0, r7, #28
 8001542:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4603      	mov	r3, r0
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f002 fa19 	bl	800398c <VL53LX_get_preset_mode_timing_cfg>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001560:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	d112      	bne.n	800158e <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001568:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 800156c:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800156e:	69fd      	ldr	r5, [r7, #28]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	9102      	str	r1, [sp, #8]
 8001578:	9201      	str	r2, [sp, #4]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	462b      	mov	r3, r5
 800157e:	4622      	mov	r2, r4
 8001580:	4601      	mov	r1, r0
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f002 fa63 	bl	8003a4e <VL53LX_set_preset_mode>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800158e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800159c:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 800159e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bdb0      	pop	{r4, r5, r7, pc}

080015aa <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3318      	adds	r3, #24
 80015ba:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 80015c2:	2baa      	cmp	r3, #170	@ 0xaa
 80015c4:	d106      	bne.n	80015d4 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80015cc:	2beb      	cmp	r3, #235	@ 0xeb
 80015ce:	d101      	bne.n	80015d4 <IsL4+0x2a>
		devL4 = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
	return devL4;
 80015d4:	68fb      	ldr	r3, [r7, #12]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80015ee:	793b      	ldrb	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d808      	bhi.n	8001606 <CheckValidRectRoi+0x24>
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d805      	bhi.n	8001606 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80015fa:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d802      	bhi.n	8001606 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	d901      	bls.n	800160a <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001606:	23fc      	movs	r3, #252	@ 0xfc
 8001608:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800160a:	793a      	ldrb	r2, [r7, #4]
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	429a      	cmp	r2, r3
 8001610:	d803      	bhi.n	800161a <CheckValidRectRoi+0x38>
 8001612:	797a      	ldrb	r2, [r7, #5]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d201      	bcs.n	800161e <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800161a:	23fc      	movs	r3, #252	@ 0xfc
 800161c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b088      	sub	sp, #32
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d008      	beq.n	8001662 <VL53LX_SetDistanceMode+0x34>
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d005      	beq.n	8001662 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d002      	beq.n	8001662 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 800165c:	f06f 0303 	mvn.w	r3, #3
 8001660:	e049      	b.n	80016f6 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa1 	bl	80015aa <IsL4>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <VL53LX_SetDistanceMode+0x4c>
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001674:	f06f 0303 	mvn.w	r3, #3
 8001678:	e03d      	b.n	80016f6 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10a      	bne.n	800169e <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	f107 0210 	add.w	r2, r7, #16
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f002 f854 	bl	8003742 <VL53LX_get_timeouts_us>
 800169a:	4603      	mov	r3, r0
 800169c:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 800169e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff21 	bl	80014f4 <SetPresetModeL3CX>
 80016b2:	4603      	mov	r3, r0
 80016b4:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 80016b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016c4:	461a      	mov	r2, r3
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80016cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10e      	bne.n	80016f2 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 fff8 	bl	80036d0 <VL53LX_set_timeouts_us>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 80016e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800171e:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4a31      	ldr	r2, [pc, #196]	@ (80017e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d902      	bls.n	800172e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001728:	23fc      	movs	r3, #252	@ 0xfc
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 800172e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10b      	bne.n	800174e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	f107 0210 	add.w	r2, r7, #16
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f001 fffd 	bl	8003742 <VL53LX_get_timeouts_us>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 800174e:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8001752:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001754:	2306      	movs	r3, #6
 8001756:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff26 	bl	80015aa <IsL4>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001766:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	d803      	bhi.n	8001778 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001770:	23fc      	movs	r3, #252	@ 0xfc
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001776:	e003      	b.n	8001780 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800177e:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001780:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001784:	2b00      	cmp	r3, #0
 8001786:	d11c      	bne.n	80017c2 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	429a      	cmp	r2, r3
 800178e:	d203      	bcs.n	8001798 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001790:	23fc      	movs	r3, #252	@ 0xfc
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001796:	e00d      	b.n	80017b4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f001 ff91 	bl	80036d0 <VL53LX_set_timeouts_us>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80017b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80017c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80017d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	00086470 	.word	0x00086470
 80017e8:	00989680 	.word	0x00989680
 80017ec:	00030d40 	.word	0x00030d40

080017f0 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b092      	sub	sp, #72	@ 0x48
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff feeb 	bl	80015e2 <CheckValidRectRoi>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001812:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 800181a:	f06f 0303 	mvn.w	r3, #3
 800181e:	e050      	b.n	80018c2 <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	789b      	ldrb	r3, [r3, #2]
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	3301      	adds	r3, #1
 800182e:	0fda      	lsrs	r2, r3, #31
 8001830:	4413      	add	r3, r2
 8001832:	105b      	asrs	r3, r3, #1
 8001834:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	461a      	mov	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	4413      	add	r3, r2
 8001844:	3301      	adds	r3, #1
 8001846:	0fda      	lsrs	r2, r3, #31
 8001848:	4413      	add	r3, r2
 800184a:	105b      	asrs	r3, r3, #1
 800184c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	789a      	ldrb	r2, [r3, #2]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785a      	ldrb	r2, [r3, #1]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	78db      	ldrb	r3, [r3, #3]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001874:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001878:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 800187c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001880:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8001884:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 800188c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8001894:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001898:	2b02      	cmp	r3, #2
 800189a:	d903      	bls.n	80018a4 <VL53LX_SetUserROI+0xb4>
 800189c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d803      	bhi.n	80018ac <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80018a4:	23fc      	movs	r3, #252	@ 0xfc
 80018a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80018aa:	e008      	b.n	80018be <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f002 f827 	bl	8003906 <VL53LX_set_zone_config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 80018be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3748      	adds	r7, #72	@ 0x48
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3318      	adds	r3, #24
 80018da:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fa8f 	bl	8002e00 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	75bb      	strb	r3, [r7, #22]
 80018e6:	e01a      	b.n	800191e <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80018e8:	7dbb      	ldrb	r3, [r7, #22]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80018f0:	3308      	adds	r3, #8
 80018f2:	2100      	movs	r1, #0
 80018f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80018f8:	7dbb      	ldrb	r3, [r7, #22]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001902:	3318      	adds	r3, #24
 8001904:	22ff      	movs	r2, #255	@ 0xff
 8001906:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001908:	7dbb      	ldrb	r3, [r7, #22]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001912:	331c      	adds	r3, #28
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001918:	7dbb      	ldrb	r3, [r7, #22]
 800191a:	3301      	adds	r3, #1
 800191c:	75bb      	strb	r3, [r7, #22]
 800191e:	7dbb      	ldrb	r3, [r7, #22]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d9e1      	bls.n	80018e8 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800192a:	2200      	movs	r2, #0
 800192c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001936:	2200      	movs	r2, #0
 8001938:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7edb      	ldrb	r3, [r3, #27]
 8001940:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2206      	movs	r2, #6
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f002 f93f 	bl	8003bd4 <VL53LX_init_and_start_range>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 800195a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f002 fbfc 	bl	8004170 <VL53LX_stop_range>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 fb6d 	bl	800305c <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7edb      	ldrb	r3, [r3, #27]
 800199e:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f003 f8fa 	bl	8004b9e <VL53LX_clear_interrupt_and_enable_next_range>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f00f f949 	bl	8010c62 <VL53LX_is_new_data_ready>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <VL53LX_WaitMeasurementDataReady>:

VL53LX_Error VL53LX_WaitMeasurementDataReady(VL53LX_DEV Dev)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	Status = VL53LX_poll_for_range_completion(Dev,
 80019ec:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f00f f99c 	bl	8010d2e <VL53LX_poll_for_range_completion>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <ConvertStatusHisto>:

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b05      	subs	r3, #5
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d840      	bhi.n	8001a9c <ConvertStatusHisto+0x94>
 8001a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a20 <ConvertStatusHisto+0x18>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a6d 	.word	0x08001a6d
 8001a24:	08001a73 	.word	0x08001a73
 8001a28:	08001a7f 	.word	0x08001a7f
 8001a2c:	08001a9d 	.word	0x08001a9d
 8001a30:	08001a97 	.word	0x08001a97
 8001a34:	08001a9d 	.word	0x08001a9d
 8001a38:	08001a9d 	.word	0x08001a9d
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a9d 	.word	0x08001a9d
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	08001a9d 	.word	0x08001a9d
 8001a50:	08001a9d 	.word	0x08001a9d
 8001a54:	08001a9d 	.word	0x08001a9d
 8001a58:	08001a79 	.word	0x08001a79
 8001a5c:	08001a8b 	.word	0x08001a8b
 8001a60:	08001a9d 	.word	0x08001a9d
 8001a64:	08001a91 	.word	0x08001a91
 8001a68:	08001a85 	.word	0x08001a85
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	73fb      	strb	r3, [r7, #15]
		break;
 8001a70:	e016      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
		break;
 8001a76:	e013      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001a78:	2306      	movs	r3, #6
 8001a7a:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8001a7c:	e010      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	73fb      	strb	r3, [r7, #15]
		break;
 8001a82:	e00d      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001a84:	230c      	movs	r3, #12
 8001a86:	73fb      	strb	r3, [r7, #15]
		break;
 8001a88:	e00a      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a8e:	e007      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001a90:	230b      	movs	r3, #11
 8001a92:	73fb      	strb	r3, [r7, #15]
		break;
 8001a94:	e004      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
		break;
 8001a9a:	e001      	b.n	8001aa0 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8001a9c:	23ff      	movs	r3, #255	@ 0xff
 8001a9e:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	@ 0x38
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	70fb      	strb	r3, [r7, #3]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70bb      	strb	r3, [r7, #2]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad8:	33f8      	adds	r3, #248	@ 0xf8
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001b00:	025b      	lsls	r3, r3, #9
 8001b02:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b0c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b1a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b20:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b24:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8001b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2a:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8001b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b34:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8001b36:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b3a:	2b11      	cmp	r3, #17
 8001b3c:	d009      	beq.n	8001b52 <SetTargetData+0xa2>
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	dc0f      	bgt.n	8001b62 <SetTargetData+0xb2>
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	dc02      	bgt.n	8001b4c <SetTargetData+0x9c>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	dc03      	bgt.n	8001b52 <SetTargetData+0xa2>
 8001b4a:	e00a      	b.n	8001b62 <SetTargetData+0xb2>
 8001b4c:	2b0d      	cmp	r3, #13
 8001b4e:	d004      	beq.n	8001b5a <SetTargetData+0xaa>
 8001b50:	e007      	b.n	8001b62 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b54:	2205      	movs	r2, #5
 8001b56:	749a      	strb	r2, [r3, #18]
		break;
 8001b58:	e006      	b.n	8001b68 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5c:	220d      	movs	r2, #13
 8001b5e:	749a      	strb	r2, [r3, #18]
		break;
 8001b60:	e002      	b.n	8001b68 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b64:	2200      	movs	r2, #0
 8001b66:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b6a:	7c9b      	ldrb	r3, [r3, #18]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d117      	bne.n	8001ba0 <SetTargetData+0xf0>
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d114      	bne.n	8001ba0 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b78:	22ff      	movs	r2, #255	@ 0xff
 8001b7a:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8001b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8001b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8001b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8a:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b8e:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b92:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b96:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8001b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b9a:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b9e:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba2:	7c9b      	ldrb	r3, [r3, #18]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8001ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff2b 	bl	8001a08 <ConvertStatusHisto>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8001bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bb8:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f248 0191 	movw	r1, #32913	@ 0x8091
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f003 fcf9 	bl	80055bc <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8001bca:	78bb      	ldrb	r3, [r7, #2]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bda:	8a1b      	ldrh	r3, [r3, #16]
 8001bdc:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 8001be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be4:	2200      	movs	r2, #0
 8001be6:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8001be8:	f107 030b 	add.w	r3, r7, #11
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f009 fc03 	bl	800b3fa <VL53LX_compute_histo_merge_nb>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d109      	bne.n	8001c14 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8001c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8001c0e:	7afb      	ldrb	r3, [r7, #11]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 81db 	beq.w	8001fd6 <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 8001c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c22:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	d004      	beq.n	8001c32 <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8001c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c2a:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	f040 81d2 	bne.w	8001fd6 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8001c32:	787b      	ldrb	r3, [r7, #1]
 8001c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	d01c      	beq.n	8001c7e <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c4e:	3318      	adds	r3, #24
 8001c50:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d013      	beq.n	8001c7e <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c60:	3318      	adds	r3, #24
 8001c62:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 81b6 	bne.w	8001fd6 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8001c6a:	787b      	ldrb	r3, [r7, #1]
 8001c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c74:	331c      	adds	r3, #28
 8001c76:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 81ac 	bne.w	8001fd6 <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 8001c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001c88:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8001c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8c:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8001c90:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d00c      	beq.n	8001cb0 <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 8001c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001ca0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8001ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca4:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8001ca8:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8001caa:	429a      	cmp	r2, r3
 8001cac:	f040 816b 	bne.w	8001f86 <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cb6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cbc:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001cc6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	2b21      	cmp	r3, #33	@ 0x21
 8001cda:	d008      	beq.n	8001cee <SetTargetData+0x23e>
 8001cdc:	2b21      	cmp	r3, #33	@ 0x21
 8001cde:	f300 814e 	bgt.w	8001f7e <SetTargetData+0x4ce>
 8001ce2:	2b1b      	cmp	r3, #27
 8001ce4:	f000 80d7 	beq.w	8001e96 <SetTargetData+0x3e6>
 8001ce8:	2b1e      	cmp	r3, #30
 8001cea:	d004      	beq.n	8001cf6 <SetTargetData+0x246>
 8001cec:	e147      	b.n	8001f7e <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001cf4:	e147      	b.n	8001f86 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf8:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8001cfc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dd0e      	ble.n	8001d22 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d06:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001d0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	da07      	bge.n	8001d22 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d104      	bne.n	8001d22 <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8001d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8001d1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d20:	e0b8      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	da0f      	bge.n	8001d52 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 8001d3c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dd07      	ble.n	8001d52 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8001d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8001d4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d50:	e0a0      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8001d58:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dd0e      	ble.n	8001d7e <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	da07      	bge.n	8001d7e <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 8001d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d76:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8001d7a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d7c:	e08a      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8001d88:	425b      	negs	r3, r3
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	da0f      	bge.n	8001dae <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8001d98:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dd07      	ble.n	8001dae <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d104      	bne.n	8001dae <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8001daa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001dac:	e072      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db0:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001db4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dd0e      	ble.n	8001dda <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbe:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001dc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	da07      	bge.n	8001dda <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 8001dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8001dd6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001dd8:	e05c      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001dda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de0:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001de4:	425b      	negs	r3, r3
 8001de6:	429a      	cmp	r2, r3
 8001de8:	da0f      	bge.n	8001e0a <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001dea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df0:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8001df4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dd07      	ble.n	8001e0a <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8001e06:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e08:	e044      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001e10:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dd0e      	ble.n	8001e36 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001e1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	da07      	bge.n	8001e36 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8001e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8001e32:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e34:	e02e      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001e36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001e40:	425b      	negs	r3, r3
 8001e42:	429a      	cmp	r2, r3
 8001e44:	da0f      	bge.n	8001e66 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001e46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8001e50:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dd07      	ble.n	8001e66 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8001e62:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e64:	e016      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e68:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8001e6c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	da0b      	bge.n	8001e8c <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8001e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e76:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001e7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dd04      	ble.n	8001e8c <SetTargetData+0x3dc>
					AddOffset =
 8001e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e84:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001e88:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e8a:	e003      	b.n	8001e94 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001e92:	e078      	b.n	8001f86 <SetTargetData+0x4d6>
 8001e94:	e077      	b.n	8001f86 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001e9c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dd0e      	ble.n	8001ec2 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001eaa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	da07      	bge.n	8001ec2 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8001ebe:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001ec0:	e05c      	b.n	8001f7c <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001ec2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001ecc:	425b      	negs	r3, r3
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	da0f      	bge.n	8001ef2 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001ed2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed8:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8001edc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dd07      	ble.n	8001ef2 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d104      	bne.n	8001ef2 <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8001eee:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001ef0:	e044      	b.n	8001f7c <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001ef8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dd0e      	ble.n	8001f1e <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001f06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	da07      	bge.n	8001f1e <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d104      	bne.n	8001f1e <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8001f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f16:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001f1a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f1c:	e02e      	b.n	8001f7c <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001f1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f24:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001f28:	425b      	negs	r3, r3
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	da0f      	bge.n	8001f4e <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001f2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f34:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8001f38:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dd07      	ble.n	8001f4e <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8001f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f46:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8001f4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f4c:	e016      	b.n	8001f7c <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f50:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8001f54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	da0b      	bge.n	8001f74 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001f62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dd04      	ble.n	8001f74 <SetTargetData+0x4c4>
					AddOffset =
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8001f70:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f72:	e003      	b.n	8001f7c <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001f7a:	e004      	b.n	8001f86 <SetTargetData+0x4d6>
 8001f7c:	e003      	b.n	8001f86 <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001f84:	bf00      	nop
			}
		}

		if (uwr_status) {
 8001f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d023      	beq.n	8001fd6 <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001f98:	4413      	add	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa0:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fac:	4413      	add	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb4:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc8:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8001fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fcc:	2201      	movs	r2, #1
 8001fce:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001fd6:	787b      	ldrb	r3, [r7, #1]
 8001fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fda:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001fde:	3308      	adds	r3, #8
 8001fe0:	8ab9      	ldrh	r1, [r7, #20]
 8001fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001fe6:	787b      	ldrb	r3, [r7, #1]
 8001fe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fea:	7c91      	ldrb	r1, [r2, #18]
 8001fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001ff4:	3318      	adds	r3, #24
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ffe:	7cd1      	ldrb	r1, [r2, #19]
 8002000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002002:	4413      	add	r3, r2
 8002004:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002008:	331c      	adds	r3, #28
 800200a:	460a      	mov	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800200e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002010:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002014:	461a      	mov	r2, r3
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 800201c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201e:	8a1b      	ldrh	r3, [r3, #16]
 8002020:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002024:	7c9b      	ldrb	r3, [r3, #18]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d110      	bne.n	800204c <SetTargetData+0x59c>
 800202a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da0c      	bge.n	800204c <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002032:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <SetTargetData+0x5a8>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	da03      	bge.n	8002046 <SetTargetData+0x596>
			pRangeData->RangeStatus =
 800203e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002040:	220e      	movs	r2, #14
 8002042:	749a      	strb	r2, [r3, #18]
 8002044:	e002      	b.n	800204c <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002048:	2200      	movs	r2, #0
 800204a:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 800204c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 8002050:	4618      	mov	r0, r3
 8002052:	3738      	adds	r7, #56	@ 0x38
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000000c 	.word	0x2000000c

0800205c <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b08f      	sub	sp, #60	@ 0x3c
 8002060:	af04      	add	r7, sp, #16
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3318      	adds	r3, #24
 800206c:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	7c9a      	ldrb	r2, [r3, #18]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	78da      	ldrb	r2, [r3, #3]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	7c9b      	ldrb	r3, [r3, #18]
 800209a:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 800209c:	7ffb      	ldrb	r3, [r7, #31]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <SetMeasurementData+0x4e>

		iteration = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020a8:	e002      	b.n	80020b0 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
 80020ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020b6:	e035      	b.n	8002124 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80020b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3308      	adds	r3, #8
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80020cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d0:	224c      	movs	r2, #76	@ 0x4c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	3310      	adds	r3, #16
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80020e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d113      	bne.n	8002110 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7918      	ldrb	r0, [r3, #4]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	7c1b      	ldrb	r3, [r3, #16]
 80020f0:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80020f4:	7ff9      	ldrb	r1, [r7, #31]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	9202      	str	r2, [sp, #8]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	9201      	str	r2, [sp, #4]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4623      	mov	r3, r4
 8002102:	4602      	mov	r2, r0
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff fcd3 	bl	8001ab0 <SetTargetData>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800211e:	3301      	adds	r3, #1
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002124:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800212c:	429a      	cmp	r2, r3
 800212e:	d3c3      	bcc.n	80020b8 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800213c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002140:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002148:	e01f      	b.n	800218a <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800214a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002154:	3308      	adds	r3, #8
 8002156:	2100      	movs	r1, #0
 8002158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800215c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	4413      	add	r3, r2
 8002164:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002168:	3318      	adds	r3, #24
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800216e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	4413      	add	r3, r2
 8002176:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800217a:	331c      	adds	r3, #28
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002184:	3301      	adds	r3, #1
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800218a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800218e:	2b03      	cmp	r3, #3
 8002190:	d9db      	bls.n	800214a <SetMeasurementData+0xee>
	}

	return Status;
 8002192:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 8002196:	4618      	mov	r0, r3
 8002198:	372c      	adds	r7, #44	@ 0x2c
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}

0800219e <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3318      	adds	r3, #24
 80021b0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80021b8:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80021ba:	225c      	movs	r2, #92	@ 0x5c
 80021bc:	21ff      	movs	r1, #255	@ 0xff
 80021be:	6838      	ldr	r0, [r7, #0]
 80021c0:	f014 fd5e 	bl	8016c80 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	2102      	movs	r1, #2
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f002 f8e0 	bl	800438e <VL53LX_get_device_results>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff40 	bl	800205c <SetMeasurementData>
 80021dc:	4603      	mov	r3, r0
 80021de:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 80021e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b090      	sub	sp, #64	@ 0x40
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80021fa:	f240 3305 	movw	r3, #773	@ 0x305
 80021fe:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3318      	adds	r3, #24
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 8002206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002208:	3348      	adds	r3, #72	@ 0x48
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002212:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 8002216:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 800221a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002222:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fa45 	bl	80026b8 <VL53LX_run_ref_spad_char>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002234:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002238:	f113 0f1d 	cmn.w	r3, #29
 800223c:	d14e      	bne.n	80022dc <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	2206      	movs	r2, #6
 8002244:	2128      	movs	r1, #40	@ 0x28
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f00c ff58 	bl	800f0fc <VL53LX_read_nvm_raw_data>
 800224c:	4603      	mov	r3, r0
 800224e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002252:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 800225a:	f107 020c 	add.w	r2, r7, #12
 800225e:	2302      	movs	r3, #2
 8002260:	2114      	movs	r1, #20
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f00f f912 	bl	801148c <VL53LX_WriteMulti>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 800226e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002276:	7b3a      	ldrb	r2, [r7, #12]
 8002278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227a:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 800227c:	7b7a      	ldrb	r2, [r7, #13]
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	3310      	adds	r3, #16
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 800228a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 8002292:	2306      	movs	r3, #6
 8002294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002296:	210d      	movs	r1, #13
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f00f f8f7 	bl	801148c <VL53LX_WriteMulti>
 800229e:	4603      	mov	r3, r0
 80022a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80022a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d117      	bne.n	80022dc <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b2:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80022b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b6:	785a      	ldrb	r2, [r3, #1]
 80022b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ba:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022be:	789a      	ldrb	r2, [r3, #2]
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c2:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80022c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c6:	78da      	ldrb	r2, [r3, #3]
 80022c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ca:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	791a      	ldrb	r2, [r3, #4]
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	795a      	ldrb	r2, [r3, #5]
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 80022dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff f9a3 	bl	800162e <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 80022e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3740      	adds	r7, #64	@ 0x40
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002304:	2300      	movs	r3, #0
 8002306:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d84a      	bhi.n	80023ac <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002316:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	0800232d 	.word	0x0800232d
 8002320:	0800234d 	.word	0x0800234d
 8002324:	0800236d 	.word	0x0800236d
 8002328:	0800238d 	.word	0x0800238d
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f004 f850 	bl	80063d2 <VL53LX_dynamic_xtalk_correction_disable>
 8002332:	4603      	mov	r3, r0
 8002334:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f004 f862 	bl	8006400 <VL53LX_dynamic_xtalk_correction_apply_disable>
 800233c:	4603      	mov	r3, r0
 800233e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 f88b 	bl	800645c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002346:	4603      	mov	r3, r0
 8002348:	733b      	strb	r3, [r7, #12]
		break;
 800234a:	e032      	b.n	80023b2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f004 f829 	bl	80063a4 <VL53LX_dynamic_xtalk_correction_enable>
 8002352:	4603      	mov	r3, r0
 8002354:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f004 f897 	bl	800648a <VL53LX_dynamic_xtalk_correction_apply_enable>
 800235c:	4603      	mov	r3, r0
 800235e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f004 f87b 	bl	800645c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002366:	4603      	mov	r3, r0
 8002368:	733b      	strb	r3, [r7, #12]
		break;
 800236a:	e022      	b.n	80023b2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f004 f819 	bl	80063a4 <VL53LX_dynamic_xtalk_correction_enable>
 8002372:	4603      	mov	r3, r0
 8002374:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f004 f887 	bl	800648a <VL53LX_dynamic_xtalk_correction_apply_enable>
 800237c:	4603      	mov	r3, r0
 800237e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 f854 	bl	800642e <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002386:	4603      	mov	r3, r0
 8002388:	733b      	strb	r3, [r7, #12]
		break;
 800238a:	e012      	b.n	80023b2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f004 f809 	bl	80063a4 <VL53LX_dynamic_xtalk_correction_enable>
 8002392:	4603      	mov	r3, r0
 8002394:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f004 f832 	bl	8006400 <VL53LX_dynamic_xtalk_correction_apply_disable>
 800239c:	4603      	mov	r3, r0
 800239e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f004 f85b 	bl	800645c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80023a6:	4603      	mov	r3, r0
 80023a8:	733b      	strb	r3, [r7, #12]
		break;
 80023aa:	e002      	b.n	80023b2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80023ac:	23fc      	movs	r3, #252	@ 0xfc
 80023ae:	73fb      	strb	r3, [r7, #15]
		break;
 80023b0:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop

080023e4 <VL53LX_SetOffsetCorrectionMode>:
}


VL53LX_Error VL53LX_SetOffsetCorrectionMode(VL53LX_DEV Dev,
		VL53LX_OffsetCorrectionModes OffsetCorrectionMode)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
	VL53LX_OffsetCorrectionMode offset_cor_mode;

	LOG_FUNCTION_START("");

	if (OffsetCorrectionMode ==
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d102      	bne.n	8002400 <VL53LX_SetOffsetCorrectionMode+0x1c>
		VL53LX_OFFSETCORRECTIONMODE_PERVCSEL)
		offset_cor_mode =
 80023fa:	2303      	movs	r3, #3
 80023fc:	73bb      	strb	r3, [r7, #14]
 80023fe:	e006      	b.n	800240e <VL53LX_SetOffsetCorrectionMode+0x2a>
				VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS;
	else {
		offset_cor_mode =
 8002400:	2301      	movs	r3, #1
 8002402:	73bb      	strb	r3, [r7, #14]
			VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
		if (OffsetCorrectionMode !=
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <VL53LX_SetOffsetCorrectionMode+0x2a>
			VL53LX_OFFSETCORRECTIONMODE_STANDARD)
			Status = VL53LX_ERROR_INVALID_PARAMS;
 800240a:	23fc      	movs	r3, #252	@ 0xfc
 800240c:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53LX_ERROR_NONE)
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <VL53LX_SetOffsetCorrectionMode+0x40>
		Status =  VL53LX_set_offset_correction_mode(Dev,
 8002416:	7bbb      	ldrb	r3, [r7, #14]
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f003 f8b7 	bl	800558e <VL53LX_set_offset_correction_mode>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
				offset_cor_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <VL53LX_PerformOffsetSimpleCalibration>:


VL53LX_Error VL53LX_PerformOffsetSimpleCalibration(VL53LX_DEV Dev,
	int32_t CalDistanceMilliMeter)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0a6      	sub	sp, #152	@ 0x98
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	int16_t meanDistance_mm;
	int16_t offset;
	VL53LX_MultiRangingData_t RangingMeasurementData;
	VL53LX_LLDriverData_t *pdev;
	uint8_t goodmeas;
	VL53LX_Error SmudgeStatus = VL53LX_ERROR_NONE;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	uint8_t smudge_corr_en;
	VL53LX_TargetRangeData_t *pRange;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3318      	adds	r3, #24
 800244a:	67fb      	str	r3, [r7, #124]	@ 0x7c

	smudge_corr_en = pdev->smudge_correct_config.smudge_corr_enabled;
 800244c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800244e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002452:	f893 3394 	ldrb.w	r3, [r3, #916]	@ 0x394
 8002456:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	SmudgeStatus = VL53LX_dynamic_xtalk_correction_disable(Dev);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f003 ffb9 	bl	80063d2 <VL53LX_dynamic_xtalk_correction_disable>
 8002460:	4603      	mov	r3, r0
 8002462:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8002466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002468:	2200      	movs	r2, #0
 800246a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	pdev->customer.mm_config__inner_offset_mm = 0;
 800246e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002470:	2200      	movs	r2, #0
 8002472:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	pdev->customer.mm_config__outer_offset_mm = 0;
 8002476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002478:	2200      	movs	r2, #0
 800247a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	memset(&pdev->per_vcsel_cal_data, 0, sizeof(pdev->per_vcsel_cal_data));
 800247e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002480:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002484:	220c      	movs	r2, #12
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f014 fbf9 	bl	8016c80 <memset>
	Repeat = BDTable[VL53LX_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT];
 800248e:	4b89      	ldr	r3, [pc, #548]	@ (80026b4 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	Max = BDTable[
 8002496:	4b87      	ldr	r3, [pc, #540]	@ (80026b4 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		VL53LX_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER];
	UnderMax = 1 + (Max / 2);
 800249e:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80024a2:	0fda      	lsrs	r2, r3, #31
 80024a4:	4413      	add	r3, r2
 80024a6:	105b      	asrs	r3, r3, #1
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	OverMax = Max + (Max / 2);
 80024b4:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80024b8:	0fda      	lsrs	r2, r3, #31
 80024ba:	4413      	add	r3, r2
 80024bc:	105b      	asrs	r3, r3, #1
 80024be:	b21b      	sxth	r3, r3
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80024c6:	4413      	add	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	sum_ranging = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	total_count = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80024da:	e087      	b.n	80025ec <VL53LX_PerformOffsetSimpleCalibration+0x1bc>
		Status = VL53LX_StartMeasurement(Dev);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff f9f4 	bl	80018ca <VL53LX_StartMeasurement>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		if (Status == VL53LX_ERROR_NONE) {
 80024e8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <VL53LX_PerformOffsetSimpleCalibration+0xd8>
			VL53LX_WaitMeasurementDataReady(Dev);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fa75 	bl	80019e0 <VL53LX_WaitMeasurementDataReady>
			VL53LX_GetMultiRangingData(Dev,
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fe4e 	bl	800219e <VL53LX_GetMultiRangingData>
				&RangingMeasurementData);
			VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fa43 	bl	800198e <VL53LX_ClearInterruptAndStartMeasurement>
		}

		inloopcount = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		offset_meas = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8002514:	e040      	b.n	8002598 <VL53LX_PerformOffsetSimpleCalibration+0x168>
				(offset_meas < OverMax)) {
			Status = VL53LX_WaitMeasurementDataReady(Dev);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fa62 	bl	80019e0 <VL53LX_WaitMeasurementDataReady>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (Status == VL53LX_ERROR_NONE)
 8002522:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <VL53LX_PerformOffsetSimpleCalibration+0x10c>
				Status = VL53LX_GetMultiRangingData(Dev,
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe34 	bl	800219e <VL53LX_GetMultiRangingData>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						&RangingMeasurementData);
			pRange = &(RangingMeasurementData.RangeData[0]);
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	3308      	adds	r3, #8
 8002542:	673b      	str	r3, [r7, #112]	@ 0x70
			goodmeas = (pRange->RangeStatus ==
 8002544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002546:	7c9b      	ldrb	r3, [r3, #18]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				VL53LX_RANGESTATUS_RANGE_VALID);
			if ((Status == VL53LX_ERROR_NONE) && goodmeas) {
 8002556:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800255a:	2b00      	cmp	r3, #0
 800255c:	d111      	bne.n	8002582 <VL53LX_PerformOffsetSimpleCalibration+0x152>
 800255e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <VL53LX_PerformOffsetSimpleCalibration+0x152>
				sum_ranging += pRange->RangeMilliMeter;
 8002566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002568:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800256c:	461a      	mov	r2, r3
 800256e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002572:	4413      	add	r3, r2
 8002574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				inloopcount++;
 8002578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800257c:	3301      	adds	r3, #1
 800257e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			}
			Status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fa03 	bl	800198e <VL53LX_ClearInterruptAndStartMeasurement>
 8002588:	4603      	mov	r3, r0
 800258a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			offset_meas++;
 800258e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002592:	3301      	adds	r3, #1
 8002594:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8002598:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <VL53LX_PerformOffsetSimpleCalibration+0x188>
 80025a0:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80025a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80025a8:	429a      	cmp	r2, r3
 80025aa:	da05      	bge.n	80025b8 <VL53LX_PerformOffsetSimpleCalibration+0x188>
				(offset_meas < OverMax)) {
 80025ac:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80025b0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbae      	blt.n	8002516 <VL53LX_PerformOffsetSimpleCalibration+0xe6>
		}
		total_count += inloopcount;
 80025b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c0:	4413      	add	r3, r2
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


		if (inloopcount < UnderMax)
 80025c6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80025ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80025ce:	429a      	cmp	r2, r3
 80025d0:	da02      	bge.n	80025d8 <VL53LX_PerformOffsetSimpleCalibration+0x1a8>
			Status = VL53LX_ERROR_OFFSET_CAL_NO_SAMPLE_FAIL;
 80025d2:	23e8      	movs	r3, #232	@ 0xe8
 80025d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		VL53LX_StopMeasurement(Dev);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff f9c4 	bl	8001966 <VL53LX_StopMeasurement>

		Repeat--;
 80025de:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80025ec:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	dd04      	ble.n	80025fe <VL53LX_PerformOffsetSimpleCalibration+0x1ce>
 80025f4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f43f af6f 	beq.w	80024dc <VL53LX_PerformOffsetSimpleCalibration+0xac>

	}

	if ((SmudgeStatus == VL53LX_ERROR_NONE) && (smudge_corr_en == 1))
 80025fe:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
 8002606:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800260a:	2b01      	cmp	r3, #1
 800260c:	d105      	bne.n	800261a <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
		SmudgeStatus = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f003 fec8 	bl	80063a4 <VL53LX_dynamic_xtalk_correction_enable>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	if ((sum_ranging < 0) ||
 800261a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800261e:	2b00      	cmp	r3, #0
 8002620:	db08      	blt.n	8002634 <VL53LX_PerformOffsetSimpleCalibration+0x204>
		(sum_ranging > ((int32_t) total_count * 0xffff)))
 8002622:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002626:	4613      	mov	r3, r2
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	1a9b      	subs	r3, r3, r2
	if ((sum_ranging < 0) ||
 800262c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002630:	429a      	cmp	r2, r3
 8002632:	dd02      	ble.n	800263a <VL53LX_PerformOffsetSimpleCalibration+0x20a>
		Status = VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH;
 8002634:	23e0      	movs	r3, #224	@ 0xe0
 8002636:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	if ((Status == VL53LX_ERROR_NONE) && (total_count > 0)) {
 800263a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800263e:	2b00      	cmp	r3, #0
 8002640:	d132      	bne.n	80026a8 <VL53LX_PerformOffsetSimpleCalibration+0x278>
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002646:	2b00      	cmp	r3, #0
 8002648:	dd2e      	ble.n	80026a8 <VL53LX_PerformOffsetSimpleCalibration+0x278>
		IncRounding = total_count / 2;
 800264a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800264e:	0fda      	lsrs	r2, r3, #31
 8002650:	4413      	add	r3, r2
 8002652:	105b      	asrs	r3, r3, #1
 8002654:	66bb      	str	r3, [r7, #104]	@ 0x68
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8002656:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800265a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800265c:	441a      	add	r2, r3
				/ total_count);
 800265e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002662:	fb92 f3f3 	sdiv	r3, r2, r3
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8002666:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		offset = (int16_t)CalDistanceMilliMeter - meanDistance_mm;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		pdev->customer.algo__part_to_part_range_offset_mm = 0;
 800267a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800267c:	2200      	movs	r2, #0
 800267e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		pdev->customer.mm_config__inner_offset_mm = offset;
 8002682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002684:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002688:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		pdev->customer.mm_config__outer_offset_mm = offset;
 800268c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800268e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002692:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

		Status = VL53LX_set_customer_nvm_managed(Dev,
 8002696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002698:	3348      	adds	r3, #72	@ 0x48
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f00c ffe8 	bl	800f672 <VL53LX_set_customer_nvm_managed>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				&(pdev->customer));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026a8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3798      	adds	r7, #152	@ 0x98
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000000c 	.word	0x2000000c

080026b8 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b08c      	sub	sp, #48	@ 0x30
 80026bc:	af04      	add	r7, sp, #16
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3318      	adds	r3, #24
 80026ca:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80026d2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80026d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f005 feaa 	bl	8008436 <VL53LX_enable_powerforce>
 80026e2:	4603      	mov	r3, r0
 80026e4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80026e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d117      	bne.n	800271e <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	7858      	ldrb	r0, [r3, #1]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	685c      	ldr	r4, [r3, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	891d      	ldrh	r5, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	899b      	ldrh	r3, [r3, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	8952      	ldrh	r2, [r2, #10]
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 8002708:	9102      	str	r1, [sp, #8]
 800270a:	9201      	str	r2, [sp, #4]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	462b      	mov	r3, r5
 8002710:	4622      	mov	r2, r4
 8002712:	4601      	mov	r1, r0
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f007 fd7d 	bl	800a214 <VL53LX_set_ref_spad_char_config>
 800271a:	4603      	mov	r3, r0
 800271c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 800271e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f890 	bl	8002852 <VL53LX_run_device_test>
 8002732:	4603      	mov	r3, r0
 8002734:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002736:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 800273e:	f107 020c 	add.w	r2, r7, #12
 8002742:	2302      	movs	r3, #2
 8002744:	21d9      	movs	r1, #217	@ 0xd9
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f00e fed6 	bl	80114f8 <VL53LX_ReadMulti>
 800274c:	4603      	mov	r3, r0
 800274e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002750:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002758:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002760:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002764:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276c:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8002770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 8002778:	f107 020c 	add.w	r2, r7, #12
 800277c:	2302      	movs	r3, #2
 800277e:	2114      	movs	r1, #20
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f00e fe83 	bl	801148c <VL53LX_WriteMulti>
 8002786:	4603      	mov	r3, r0
 8002788:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 800278a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d107      	bne.n	80027a2 <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002792:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800279a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 80027a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 80027aa:	f107 020c 	add.w	r2, r7, #12
 80027ae:	2306      	movs	r3, #6
 80027b0:	21ac      	movs	r1, #172	@ 0xac
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f00e fea0 	bl	80114f8 <VL53LX_ReadMulti>
 80027b8:	4603      	mov	r3, r0
 80027ba:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 80027bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 80027c4:	f107 020c 	add.w	r2, r7, #12
 80027c8:	2306      	movs	r3, #6
 80027ca:	210d      	movs	r1, #13
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f00e fe5d 	bl	801148c <VL53LX_WriteMulti>
 80027d2:	4603      	mov	r3, r0
 80027d4:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 80027d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d117      	bne.n	800280e <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 80027de:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 80027e6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 80027ee:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 80027fe:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002806:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 800280e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d114      	bne.n	8002840 <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 800281c:	2b10      	cmp	r3, #16
 800281e:	d00c      	beq.n	800283a <VL53LX_run_ref_spad_char+0x182>
 8002820:	2b10      	cmp	r3, #16
 8002822:	dc0d      	bgt.n	8002840 <VL53LX_run_ref_spad_char+0x188>
 8002824:	2b0e      	cmp	r3, #14
 8002826:	d002      	beq.n	800282e <VL53LX_run_ref_spad_char+0x176>
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d003      	beq.n	8002834 <VL53LX_run_ref_spad_char+0x17c>
 800282c:	e008      	b.n	8002840 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800282e:	23e4      	movs	r3, #228	@ 0xe4
 8002830:	77fb      	strb	r3, [r7, #31]
			break;
 8002832:	e005      	b.n	8002840 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002834:	23e3      	movs	r3, #227	@ 0xe3
 8002836:	77fb      	strb	r3, [r7, #31]
			break;
 8002838:	e002      	b.n	8002840 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800283a:	23e2      	movs	r3, #226	@ 0xe2
 800283c:	77fb      	strb	r3, [r7, #31]
			break;
 800283e:	bf00      	nop
		}
	}



	*pcal_status = status;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7ffa      	ldrb	r2, [r7, #31]
 8002844:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}

08002852 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3318      	adds	r3, #24
 8002866:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800286c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002874:	f107 030b 	add.w	r3, r7, #11
 8002878:	461a      	mov	r2, r3
 800287a:	2130      	movs	r1, #48	@ 0x30
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f00e fecd 	bl	801161c <VL53LX_RdByte>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 800288e:	7afa      	ldrb	r2, [r7, #11]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002896:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f005 fd4b 	bl	800833e <VL53LX_start_test>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 80028ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d104      	bne.n	80028be <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f00e f99b 	bl	8010bf0 <VL53LX_wait_for_test_completion>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80028be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 80028c6:	f107 020c 	add.w	r2, r7, #12
 80028ca:	2302      	movs	r3, #2
 80028cc:	2189      	movs	r1, #137	@ 0x89
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f00e fe12 	bl	80114f8 <VL53LX_ReadMulti>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80028d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 80028e0:	7b3a      	ldrb	r2, [r7, #12]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 80028e8:	7b7a      	ldrb	r2, [r7, #13]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d108      	bne.n	800291c <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 800290a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f005 fdb3 	bl	800847e <VL53LX_clear_interrupt>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 800291c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002924:	2100      	movs	r1, #0
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f005 fd09 	bl	800833e <VL53LX_start_test>
 800292c:	4603      	mov	r3, r0
 800292e:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	785b      	ldrb	r3, [r3, #1]
 800294e:	2b21      	cmp	r3, #33	@ 0x21
 8002950:	d006      	beq.n	8002960 <select_offset_per_vcsel+0x24>
 8002952:	2b21      	cmp	r3, #33	@ 0x21
 8002954:	dc2b      	bgt.n	80029ae <select_offset_per_vcsel+0x72>
 8002956:	2b1b      	cmp	r3, #27
 8002958:	d01c      	beq.n	8002994 <select_offset_per_vcsel+0x58>
 800295a:	2b1e      	cmp	r3, #30
 800295c:	d00d      	beq.n	800297a <select_offset_per_vcsel+0x3e>
 800295e:	e026      	b.n	80029ae <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002966:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800296a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002972:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 8002976:	817b      	strh	r3, [r7, #10]
		break;
 8002978:	e02b      	b.n	80029d2 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002980:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8002984:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298c:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8002990:	817b      	strh	r3, [r7, #10]
		break;
 8002992:	e01e      	b.n	80029d2 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299a:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 800299e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a6:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 80029aa:	817b      	strh	r3, [r7, #10]
		break;
 80029ac:	e011      	b.n	80029d2 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b4:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 80029b8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c0:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 80029c4:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80029c6:	23fc      	movs	r3, #252	@ 0xfc
 80029c8:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	801a      	strh	r2, [r3, #0]
		break;
 80029d0:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80029d8:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 80029e2:	7a7b      	ldrb	r3, [r7, #9]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <select_offset_per_vcsel+0xb6>
 80029ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029f0:	e001      	b.n	80029f6 <select_offset_per_vcsel+0xba>
 80029f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	8013      	strh	r3, [r2, #0]

	return status;
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002a0a:	b490      	push	{r4, r7}
 8002a0c:	b08a      	sub	sp, #40	@ 0x28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	4611      	mov	r1, r2
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a3c:	e021      	b.n	8002a82 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002a3e:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	0052      	lsls	r2, r2, #1
 8002a4c:	441a      	add	r2, r3
 8002a4e:	00d3      	lsls	r3, r2, #3
 8002a50:	461a      	mov	r2, r3
 8002a52:	460b      	mov	r3, r1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4423      	add	r3, r4
 8002a5e:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002a62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002a66:	6a3a      	ldr	r2, [r7, #32]
 8002a68:	4413      	add	r3, r2
 8002a6a:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002a6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3206      	adds	r2, #6
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3d8      	bcc.n	8002a3e <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d047      	beq.n	8002b22 <vl53lx_diff_histo_stddev+0x118>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d044      	beq.n	8002b22 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002aa0:	e03a      	b.n	8002b18 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002aa2:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	461a      	mov	r2, r3
 8002aae:	0052      	lsls	r2, r2, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	00d3      	lsls	r3, r2, #3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	440b      	add	r3, r1
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4413      	add	r3, r2
 8002ac0:	4423      	add	r3, r4
 8002ac2:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002ac6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002aca:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002adc:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002ade:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3206      	adds	r2, #6
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002aec:	fb03 f202 	mul.w	r2, r3, r2
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002b02:	69b8      	ldr	r0, [r7, #24]
 8002b04:	6979      	ldr	r1, [r7, #20]
 8002b06:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	441a      	add	r2, r3
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b10:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002b12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b14:	3301      	adds	r3, #1
 8002b16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3bf      	bcc.n	8002aa2 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002b22:	bf00      	nop
 8002b24:	3728      	adds	r7, #40	@ 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc90      	pop	{r4, r7}
 8002b2a:	4770      	bx	lr

08002b2c <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b08c      	sub	sp, #48	@ 0x30
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002b5c:	2318      	movs	r3, #24
 8002b5e:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	461a      	mov	r2, r3
 8002b66:	f248 018f 	movw	r1, #32911	@ 0x808f
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f002 fd26 	bl	80055bc <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	461a      	mov	r2, r3
 8002b76:	f248 018e 	movw	r1, #32910	@ 0x808e
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f002 fd1e 	bl	80055bc <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 811a 	bne.w	8002dc4 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002baa:	7efb      	ldrb	r3, [r7, #27]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	7eba      	ldrb	r2, [r7, #26]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bbc:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bca:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd4:	e004      	b.n	8002be0 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002be0:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002be4:	7efb      	ldrb	r3, [r7, #27]
 8002be6:	69f8      	ldr	r0, [r7, #28]
 8002be8:	461a      	mov	r2, r3
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	441a      	add	r2, r3
 8002bee:	0153      	lsls	r3, r2, #5
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4403      	add	r3, r0
 8002bfe:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	dd0c      	ble.n	8002c22 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002c08:	7e79      	ldrb	r1, [r7, #25]
 8002c0a:	7efa      	ldrb	r2, [r7, #27]
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	69f8      	ldr	r0, [r7, #28]
 8002c1e:	f7ff fef4 	bl	8002a0a <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	db23      	blt.n	8002c72 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002c30:	3310      	adds	r3, #16
 8002c32:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f014 f821 	bl	8016c80 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 8002c50:	7efb      	ldrb	r3, [r7, #27]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002c62:	e034      	b.n	8002cce <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002c70:	e02d      	b.n	8002cce <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c78:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002c7c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002c84:	e01e      	b.n	8002cc4 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002c86:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002c8a:	7e39      	ldrb	r1, [r7, #24]
 8002c8c:	7efb      	ldrb	r3, [r7, #27]
 8002c8e:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	3006      	adds	r0, #6
 8002c96:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002c9a:	69f8      	ldr	r0, [r7, #28]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	0052      	lsls	r2, r2, #1
 8002ca0:	441a      	add	r2, r3
 8002ca2:	00d3      	lsls	r3, r2, #3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	440b      	add	r3, r1
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	4413      	add	r3, r2
 8002cb0:	442b      	add	r3, r5
 8002cb2:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002cb6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8002cba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002cc4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002cc8:	7ebb      	ldrb	r3, [r7, #26]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3db      	bcc.n	8002c86 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd4:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002cd8:	461a      	mov	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d109      	bne.n	8002cf6 <vl53lx_histo_merge+0x1ca>
 8002ce2:	7efb      	ldrb	r3, [r7, #27]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8002cf4:	e00e      	b.n	8002d14 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8002cf6:	7efb      	ldrb	r3, [r7, #27]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10b      	bne.n	8002d14 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d02:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d10:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <vl53lx_histo_merge+0x1f6>
 8002d1c:	7efb      	ldrb	r3, [r7, #27]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d069      	beq.n	8002df6 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d28:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d162      	bne.n	8002df6 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d34:	e008      	b.n	8002d48 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002d36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3206      	adds	r2, #6
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002d42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d44:	3301      	adds	r3, #1
 8002d46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d48:	7ebb      	ldrb	r3, [r7, #26]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f1      	bcc.n	8002d36 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d56:	e02f      	b.n	8002db8 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002d5e:	e023      	b.n	8002da8 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002d60:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3206      	adds	r2, #6
 8002d66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8002d6a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002d6e:	7efb      	ldrb	r3, [r7, #27]
 8002d70:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 8002d72:	69fc      	ldr	r4, [r7, #28]
 8002d74:	461a      	mov	r2, r3
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	441a      	add	r2, r3
 8002d7a:	00d3      	lsls	r3, r2, #3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	460b      	mov	r3, r1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	440b      	add	r3, r1
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4413      	add	r3, r2
 8002d88:	442b      	add	r3, r5
 8002d8a:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002d8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002d92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d94:	18c1      	adds	r1, r0, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	3206      	adds	r2, #6
 8002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8002d9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002da2:	3301      	adds	r3, #1
 8002da4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002da8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbd6      	blt.n	8002d60 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8002db2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002db4:	3301      	adds	r3, #1
 8002db6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002db8:	7ebb      	ldrb	r3, [r7, #26]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3ca      	bcc.n	8002d58 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8002dc2:	e018      	b.n	8002df6 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dca:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd8:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de2:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002de6:	2bff      	cmp	r3, #255	@ 0xff
 8002de8:	d105      	bne.n	8002df6 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e00 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0c6      	sub	sp, #280	@ 0x118
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e0e:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8002e1c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8002e24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e28:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2185      	movs	r1, #133	@ 0x85
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f00e fb97 	bl	8011564 <VL53LX_WrByte>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8002e3c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8002e44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	f005 faf2 	bl	8008436 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8002e52:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002e56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e5e:	f248 018c 	movw	r1, #32908	@ 0x808c
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	f002 fbaa 	bl	80055bc <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8002e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d81b      	bhi.n	8002ea8 <VL53LX_load_patch+0xa8>
 8002e70:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <VL53LX_load_patch+0x78>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e91 	.word	0x08002e91
 8002e80:	08002e99 	.word	0x08002e99
 8002e84:	08002ea1 	.word	0x08002ea1
	case 0:
		patch_power = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002e8e:	e00e      	b.n	8002eae <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8002e90:	2310      	movs	r3, #16
 8002e92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002e96:	e00a      	b.n	8002eae <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002e9e:	e006      	b.n	8002eae <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002ea6:	e002      	b.n	8002eae <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8002eae:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d134      	bne.n	8002f20 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8002eb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ebe:	2229      	movs	r2, #41	@ 0x29
 8002ec0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8002ec2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002eca:	22c9      	movs	r2, #201	@ 0xc9
 8002ecc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8002ece:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ed2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ed6:	220e      	movs	r2, #14
 8002ed8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8002eda:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ee2:	2240      	movs	r2, #64	@ 0x40
 8002ee4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8002ee6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002eee:	2228      	movs	r2, #40	@ 0x28
 8002ef0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8002ef2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002efc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f00:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8002f02:	f107 020c 	add.w	r2, r7, #12
 8002f06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f0a:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002f0e:	2306      	movs	r3, #6
 8002f10:	f240 4176 	movw	r1, #1142	@ 0x476
 8002f14:	6800      	ldr	r0, [r0, #0]
 8002f16:	f00e fab9 	bl	801148c <VL53LX_WriteMulti>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002f20:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d132      	bne.n	8002f8e <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8002f28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f30:	2203      	movs	r2, #3
 8002f32:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8002f34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f3c:	226d      	movs	r2, #109	@ 0x6d
 8002f3e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8002f40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f48:	2203      	movs	r2, #3
 8002f4a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8002f4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f54:	226f      	movs	r2, #111	@ 0x6f
 8002f56:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8002f58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f60:	2207      	movs	r2, #7
 8002f62:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8002f64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f6c:	2229      	movs	r2, #41	@ 0x29
 8002f6e:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8002f70:	f107 020c 	add.w	r2, r7, #12
 8002f74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f78:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002f7c:	2306      	movs	r3, #6
 8002f7e:	f240 4196 	movw	r1, #1174	@ 0x496
 8002f82:	6800      	ldr	r0, [r0, #0]
 8002f84:	f00e fa82 	bl	801148c <VL53LX_WriteMulti>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002f8e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11a      	bne.n	8002fcc <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8002f96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002fa2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002faa:	2207      	movs	r2, #7
 8002fac:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002fae:	f107 020c 	add.w	r2, r7, #12
 8002fb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fb6:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002fba:	2302      	movs	r3, #2
 8002fbc:	f240 4172 	movw	r1, #1138	@ 0x472
 8002fc0:	6800      	ldr	r0, [r0, #0]
 8002fc2:	f00e fa63 	bl	801148c <VL53LX_WriteMulti>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002fcc:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11a      	bne.n	800300a <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8002fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002fe0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fe4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fe8:	2207      	movs	r2, #7
 8002fea:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002fec:	f107 020c 	add.w	r2, r7, #12
 8002ff0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ff4:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f240 4174 	movw	r1, #1140	@ 0x474
 8002ffe:	6800      	ldr	r0, [r0, #0]
 8003000:	f00e fa44 	bl	801148c <VL53LX_WriteMulti>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800300a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8003012:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003016:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800301a:	2201      	movs	r2, #1
 800301c:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f00e fa9f 	bl	8011564 <VL53LX_WrByte>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 800302c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8003034:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003038:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800303c:	2201      	movs	r2, #1
 800303e:	2185      	movs	r1, #133	@ 0x85
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	f00e fa8f 	bl	8011564 <VL53LX_WrByte>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800304c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8003050:	4618      	mov	r0, r3
 8003052:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop

0800305c <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003070:	2200      	movs	r2, #0
 8003072:	2185      	movs	r1, #133	@ 0x85
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f00e fa75 	bl	8011564 <VL53LX_WrByte>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f005 f9e7 	bl	800845a <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 800308c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f00e fa62 	bl	8011564 <VL53LX_WrByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 80030ac:	2201      	movs	r2, #1
 80030ae:	2185      	movs	r1, #133	@ 0x85
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f00e fa57 	bl	8011564 <VL53LX_WrByte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80030c6:	b5b0      	push	{r4, r5, r7, lr}
 80030c8:	b08a      	sub	sp, #40	@ 0x28
 80030ca:	af04      	add	r7, sp, #16
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3318      	adds	r3, #24
 80030da:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80030e2:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80030e8:	2162      	movs	r1, #98	@ 0x62
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f004 fa28 	bl	8007540 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2204      	movs	r2, #4
 80030f4:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2205      	movs	r2, #5
 8003100:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800310c:	2300      	movs	r3, #0
 800310e:	75bb      	strb	r3, [r7, #22]
 8003110:	e01b      	b.n	800314a <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003112:	7dba      	ldrb	r2, [r7, #22]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	3308      	adds	r3, #8
 8003126:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2200      	movs	r2, #0
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003144:	7dbb      	ldrb	r3, [r7, #22]
 8003146:	3301      	adds	r3, #1
 8003148:	75bb      	strb	r3, [r7, #22]
 800314a:	7dbb      	ldrb	r3, [r7, #22]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d9e0      	bls.n	8003112 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2205      	movs	r2, #5
 8003154:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2205      	movs	r2, #5
 8003164:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003170:	2300      	movs	r3, #0
 8003172:	75bb      	strb	r3, [r7, #22]
 8003174:	e039      	b.n	80031ea <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003176:	7dba      	ldrb	r2, [r7, #22]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 800318c:	7dba      	ldrb	r2, [r7, #22]
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 80031a2:	7dba      	ldrb	r2, [r7, #22]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 80031b8:	7dba      	ldrb	r2, [r7, #22]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80031ce:	7dba      	ldrb	r2, [r7, #22]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80031e4:	7dbb      	ldrb	r3, [r7, #22]
 80031e6:	3301      	adds	r3, #1
 80031e8:	75bb      	strb	r3, [r7, #22]
 80031ea:	7dbb      	ldrb	r3, [r7, #22]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d9c2      	bls.n	8003176 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	221e      	movs	r2, #30
 80031fa:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2200      	movs	r2, #0
 8003200:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2200      	movs	r2, #0
 8003206:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2201      	movs	r2, #1
 800320c:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2201      	movs	r2, #1
 8003212:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2201      	movs	r2, #1
 8003218:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003220:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003228:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8003230:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2264      	movs	r2, #100	@ 0x64
 8003236:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800323e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800324e:	2203      	movs	r2, #3
 8003250:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f240 72db 	movw	r2, #2011	@ 0x7db
 8003266:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8003270:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f004 f947 	bl	8007508 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8003280:	3310      	adds	r3, #16
 8003282:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f013 fcf9 	bl	8016c80 <memset>
	pdev->bin_rec_pos = 0;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <VL53LX_data_init+0x1f8>
 80032ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8b7 	bl	8003428 <VL53LX_read_p2p_data>
 80032ba:	4603      	mov	r3, r0
 80032bc:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80032be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 f8f3 	bl	80064b8 <VL53LX_init_refspadchar_config_struct>
 80032d2:	4603      	mov	r3, r0
 80032d4:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 f90b 	bl	8006500 <VL53LX_init_ssc_config_struct>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80032ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f003 f91c 	bl	8006542 <VL53LX_init_xtalk_config_struct>
 800330a:	4603      	mov	r3, r0
 800330c:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 800330e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f983 	bl	8006628 <VL53LX_init_xtalk_extract_config_struct>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003334:	4618      	mov	r0, r3
 8003336:	f003 f9a6 	bl	8006686 <VL53LX_init_offset_cal_config_struct>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800333e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f9c1 	bl	80066d4 <VL53LX_init_zone_cal_config_struct>
 8003352:	4603      	mov	r3, r0
 8003354:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f003 f9d5 	bl	800671c <VL53LX_init_hist_post_process_config_struct>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003384:	4618      	mov	r0, r3
 8003386:	f003 fbd4 	bl	8006b32 <VL53LX_init_hist_gen3_dmax_config_struct>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800338e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	33f8      	adds	r3, #248	@ 0xf8
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fa2d 	bl	80067fa <VL53LX_init_tuning_parm_storage_struct>
 80033a0:	4603      	mov	r3, r0
 80033a2:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 80033a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d116      	bne.n	80033da <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	7858      	ldrb	r0, [r3, #1]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	8b1c      	ldrh	r4, [r3, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	689d      	ldr	r5, [r3, #8]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	6912      	ldr	r2, [r2, #16]
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	6949      	ldr	r1, [r1, #20]
 80033c4:	9102      	str	r1, [sp, #8]
 80033c6:	9201      	str	r2, [sp, #4]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	462b      	mov	r3, r5
 80033cc:	4622      	mov	r2, r4
 80033ce:	4601      	mov	r1, r0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb3c 	bl	8003a4e <VL53LX_set_preset_mode>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80033e0:	461a      	mov	r2, r3
 80033e2:	2118      	movs	r1, #24
 80033e4:	2000      	movs	r0, #0
 80033e6:	f008 fc8a 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80033f0:	461a      	mov	r2, r3
 80033f2:	2118      	movs	r1, #24
 80033f4:	2000      	movs	r0, #0
 80033f6:	f008 fc82 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 8003400:	461a      	mov	r2, r3
 8003402:	210c      	movs	r1, #12
 8003404:	2000      	movs	r0, #0
 8003406:	f004 fe3b 	bl	8008080 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f007 fe5b 	bl	800b0c6 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f007 fd61 	bl	800aed8 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f007 fe80 	bl	800b11c <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800341c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bdb0      	pop	{r4, r5, r7, pc}

08003428 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b091      	sub	sp, #68	@ 0x44
 800342c:	af04      	add	r7, sp, #16
 800342e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3318      	adds	r3, #24
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	3348      	adds	r3, #72	@ 0x48
 8003448:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	339c      	adds	r3, #156	@ 0x9c
 800344e:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003450:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f00b ffc8 	bl	800f3f6 <VL53LX_get_static_nvm_managed>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 800346c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003476:	3348      	adds	r3, #72	@ 0x48
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f00c f920 	bl	800f6c0 <VL53LX_get_customer_nvm_managed>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003486:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d117      	bne.n	80034be <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003490:	f203 3392 	addw	r3, r3, #914	@ 0x392
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f00d f81c 	bl	80104d4 <VL53LX_get_nvm_copy_data>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 80034a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	f203 3292 	addw	r2, r3, #914	@ 0x392
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f004 fb37 	bl	8007b2c <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 80034be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	895b      	ldrh	r3, [r3, #10]
 80034ca:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80034e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	33c0      	adds	r3, #192	@ 0xc0
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f00b fe33 	bl	800f15e <VL53LX_read_nvm_optical_centre>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80034fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	3360      	adds	r3, #96	@ 0x60
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f00b fe49 	bl	800f1a4 <VL53LX_read_nvm_cal_peak_rate_map>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003518:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800351c:	2b00      	cmp	r3, #0
 800351e:	d12d      	bne.n	800357c <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	339c      	adds	r3, #156	@ 0x9c
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f00b fe62 	bl	800f1f0 <VL53LX_read_nvm_additional_offset_cal_data>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	889b      	ldrh	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d120      	bne.n	800357c <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11c      	bne.n	800357c <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800354e:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	3102      	adds	r1, #2
 8003568:	9103      	str	r1, [sp, #12]
 800356a:	9202      	str	r2, [sp, #8]
 800356c:	2238      	movs	r2, #56	@ 0x38
 800356e:	9201      	str	r2, [sp, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	23ff      	movs	r3, #255	@ 0xff
 8003574:	22c7      	movs	r2, #199	@ 0xc7
 8003576:	4621      	mov	r1, r4
 8003578:	f006 fb46 	bl	8009c08 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 800357c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003580:	2b00      	cmp	r3, #0
 8003582:	d12f      	bne.n	80035e4 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	461a      	mov	r2, r3
 800358a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f00b fe51 	bl	800f236 <VL53LX_read_nvm_fmt_range_results_data>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800359a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d120      	bne.n	80035e4 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80035a2:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80035aa:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80035b2:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80035ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035cc:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 80035d0:	e003      	b.n	80035da <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	2214      	movs	r2, #20
 80035d6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035e0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80035e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 80035f2:	3304      	adds	r3, #4
 80035f4:	461a      	mov	r2, r3
 80035f6:	21de      	movs	r1, #222	@ 0xde
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f00e f843 	bl	8011684 <VL53LX_RdWord>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	d204      	bcs.n	800361a <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8003616:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 800361a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	33bc      	adds	r3, #188	@ 0xbc
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f918 	bl	800385e <VL53LX_get_mode_mitigation_roi>
 800362e:	4603      	mov	r3, r0
 8003630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d114      	bne.n	8003668 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364a:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003668:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800366c:	4618      	mov	r0, r3
 800366e:	3734      	adds	r7, #52	@ 0x34
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3318      	adds	r3, #24
 8003686:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368e:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003696:	23f1      	movs	r3, #241	@ 0xf1
 8003698:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ae:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 80036b2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80036c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3318      	adds	r3, #24
 80036e6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80036f2:	23f1      	movs	r3, #241	@ 0xf1
 80036f4:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80036f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11b      	bne.n	8003736 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8003722:	9201      	str	r2, [sp, #4]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	460b      	mov	r3, r1
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f005 f84a 	bl	80087c6 <VL53LX_calc_timeout_register_values>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3318      	adds	r3, #24
 8003758:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800376c:	23f1      	movs	r3, #241	@ 0xf1
 800376e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d148      	bne.n	800380a <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f004 fe96 	bl	80084b8 <VL53LX_calc_macro_period_us>
 800378c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8003794:	6979      	ldr	r1, [r7, #20]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 ff55 	bl	8008646 <VL53LX_calc_timeout_us>
 800379c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 80037a8:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80037aa:	8a7b      	ldrh	r3, [r7, #18]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 80037b6:	4413      	add	r3, r2
 80037b8:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80037ba:	8a7b      	ldrh	r3, [r7, #18]
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 ffa8 	bl	8008714 <VL53LX_calc_decoded_timeout_us>
 80037c4:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 80037d0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80037d2:	8a7b      	ldrh	r3, [r7, #18]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 80037de:	4413      	add	r3, r2
 80037e0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80037e2:	8a7b      	ldrh	r3, [r7, #18]
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 ff94 	bl	8008714 <VL53LX_calc_decoded_timeout_us>
 80037ec:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800380a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3318      	adds	r3, #24
 8003828:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	7858      	ldrb	r0, [r3, #1]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	7819      	ldrb	r1, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 8003838:	461a      	mov	r2, r3
 800383a:	f006 f864 	bl	8009906 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	7898      	ldrb	r0, [r3, #2]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	78d9      	ldrb	r1, [r3, #3]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 800384c:	461a      	mov	r2, r3
 800384e:	f006 f899 	bl	8009984 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3318      	adds	r3, #24
 8003870:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8003884:	f107 020e 	add.w	r2, r7, #14
 8003888:	f107 010d 	add.w	r1, r7, #13
 800388c:	4618      	mov	r0, r3
 800388e:	f008 fadf 	bl	800be50 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003892:	7bba      	ldrb	r2, [r7, #14]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003898:	7b7a      	ldrb	r2, [r7, #13]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 80038a4:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80038bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e008      	b.n	80038ec <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	3301      	adds	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3f1      	bcc.n	80038da <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80038f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3318      	adds	r3, #24
 8003918:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	331c      	adds	r3, #28
 8003924:	2214      	movs	r2, #20
 8003926:	4619      	mov	r1, r3
 8003928:	f013 fa39 	bl	8016d9e <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	785a      	ldrb	r2, [r3, #1]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	33c2      	adds	r3, #194	@ 0xc2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ffbf 	bl	80038c8 <VL53LX_init_zone_config_histogram_bins>
 800394a:	4603      	mov	r3, r0
 800394c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 800395e:	e00f      	b.n	8003980 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d807      	bhi.n	8003978 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	3301      	adds	r3, #1
 800396e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003976:	e003      	b.n	8003980 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2206      	movs	r2, #6
 800397c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	460b      	mov	r3, r1
 800399a:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3318      	adds	r3, #24
 80039a4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80039a6:	7afb      	ldrb	r3, [r7, #11]
 80039a8:	2b21      	cmp	r3, #33	@ 0x21
 80039aa:	d030      	beq.n	8003a0e <VL53LX_get_preset_mode_timing_cfg+0x82>
 80039ac:	2b21      	cmp	r3, #33	@ 0x21
 80039ae:	dc43      	bgt.n	8003a38 <VL53LX_get_preset_mode_timing_cfg+0xac>
 80039b0:	2b1b      	cmp	r3, #27
 80039b2:	d002      	beq.n	80039ba <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80039b4:	2b1e      	cmp	r3, #30
 80039b6:	d015      	beq.n	80039e4 <VL53LX_get_preset_mode_timing_cfg+0x58>
 80039b8:	e03e      	b.n	8003a38 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	601a      	str	r2, [r3, #0]

	break;
 80039e2:	e02c      	b.n	8003a3e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	601a      	str	r2, [r3, #0]
	break;
 8003a0c:	e017      	b.n	8003a3e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	601a      	str	r2, [r3, #0]
	break;
 8003a36:	e002      	b.n	8003a3e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003a38:	23fc      	movs	r3, #252	@ 0xfc
 8003a3a:	75fb      	strb	r3, [r7, #23]
		break;
 8003a3c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b096      	sub	sp, #88	@ 0x58
 8003a52:	af06      	add	r7, sp, #24
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	72fb      	strb	r3, [r7, #11]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a76:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003a7a:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7e:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003a9a:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003aa2:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003aaa:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	33c2      	adds	r3, #194	@ 0xc2
 8003ab0:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	33f8      	adds	r3, #248	@ 0xf8
 8003ab6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	7afa      	ldrb	r2, [r7, #11]
 8003abc:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ac2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ac8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ace:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f003 fd34 	bl	8007540 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	2b21      	cmp	r3, #33	@ 0x21
 8003adc:	d02e      	beq.n	8003b3c <VL53LX_set_preset_mode+0xee>
 8003ade:	2b21      	cmp	r3, #33	@ 0x21
 8003ae0:	dc40      	bgt.n	8003b64 <VL53LX_set_preset_mode+0x116>
 8003ae2:	2b1b      	cmp	r3, #27
 8003ae4:	d002      	beq.n	8003aec <VL53LX_set_preset_mode+0x9e>
 8003ae6:	2b1e      	cmp	r3, #30
 8003ae8:	d014      	beq.n	8003b14 <VL53LX_set_preset_mode+0xc6>
 8003aea:	e03b      	b.n	8003b64 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b08:	f003 fa57 	bl	8006fba <VL53LX_preset_mode_histogram_long_range>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b12:	e02b      	b.n	8003b6c <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	9304      	str	r3, [sp, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	9303      	str	r3, [sp, #12]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b30:	f003 fae1 	bl	80070f6 <VL53LX_preset_mode_histogram_medium_range>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b3a:	e017      	b.n	8003b6c <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9304      	str	r3, [sp, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b58:	f003 fb6b 	bl	8007232 <VL53LX_preset_mode_histogram_short_range>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b62:	e003      	b.n	8003b6c <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003b64:	23fc      	movs	r3, #252	@ 0xfc
 8003b66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8003b6a:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	893a      	ldrh	r2, [r7, #8]
 8003b78:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	893a      	ldrh	r2, [r7, #8]
 8003b7e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003b80:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff fd9e 	bl	80036d0 <VL53LX_set_timeouts_us>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003b9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003ba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fd65 	bl	8003674 <VL53LX_set_inter_measurement_period_ms>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb2:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f004 f8d2 	bl	8007d6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003bc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3740      	adds	r7, #64	@ 0x40
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0d2      	sub	sp, #328	@ 0x148
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bde:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003be2:	6018      	str	r0, [r3, #0]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bec:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bf8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3318      	adds	r3, #24
 8003c12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003c16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c1a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003c24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003c28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c2c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8003c30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003c34:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c38:	3348      	adds	r3, #72	@ 0x48
 8003c3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003c3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c42:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003c46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003c4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c4e:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003c52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003c56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c5a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003c5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003c62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c66:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003c6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c72:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003c7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c7e:	332c      	adds	r3, #44	@ 0x2c
 8003c80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003c84:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c88:	3348      	adds	r3, #72	@ 0x48
 8003c8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003cae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cb2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003cb6:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003cbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003cc2:	791b      	ldrb	r3, [r3, #4]
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003ccc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003cd0:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003cde:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003ce2:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003ce4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ce8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8003cec:	3336      	adds	r3, #54	@ 0x36
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003cf4:	4413      	add	r3, r2
 8003cf6:	1d9a      	adds	r2, r3, #6
 8003cf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003cfc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d00:	4611      	mov	r1, r2
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	f7ff fd87 	bl	8003816 <VL53LX_set_user_zone>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003d0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d12:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d019      	beq.n	8003d4e <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003d1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d22:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003d30:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003d34:	4413      	add	r3, r2
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d3c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d40:	4611      	mov	r1, r2
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	f001 fbbc 	bl	80054c0 <VL53LX_set_zone_dss_config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003d4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d52:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003d5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003d6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d6e:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003d72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d76:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003d7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d82:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8003d86:	2bff      	cmp	r3, #255	@ 0xff
 8003d88:	d106      	bne.n	8003d98 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003d8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003d98:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da0:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d139      	bne.n	8003e1c <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003da8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db0:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d131      	bne.n	8003e1c <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003db8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dbc:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8003dc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc8:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003dcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8003dd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dda:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 8003dde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8003de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003dee:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8003df0:	b21a      	sxth	r2, r3
 8003df2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003df6:	825a      	strh	r2, [r3, #18]
 8003df8:	e003      	b.n	8003e02 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003dfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dfe:	2200      	movs	r2, #0
 8003e00:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8003e02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e06:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d805      	bhi.n	8003e1c <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003e10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e14:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e18:	2205      	movs	r2, #5
 8003e1a:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e24:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d117      	bne.n	8003e5c <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003e2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e34:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10f      	bne.n	8003e5c <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003e3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e44:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003e48:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e4c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8003e50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e54:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e58:	2206      	movs	r2, #6
 8003e5a:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003e5c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8003e64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f006 f835 	bl	8009edc <VL53LX_save_cfg_data>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 8003e78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e7c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d827      	bhi.n	8003ed8 <VL53LX_init_and_start_range+0x304>
 8003e88:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <VL53LX_init_and_start_range+0x2bc>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ed1 	.word	0x08003ed1
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ea9 	.word	0x08003ea9
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eae:	e017      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003eb0:	230d      	movs	r3, #13
 8003eb2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eb6:	e013      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8003eb8:	2324      	movs	r3, #36	@ 0x24
 8003eba:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ebe:	e00f      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8003ec0:	2344      	movs	r3, #68	@ 0x44
 8003ec2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ec6:	e00b      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8003ec8:	235a      	movs	r3, #90	@ 0x5a
 8003eca:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ece:	e007      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8003ed0:	2371      	movs	r3, #113	@ 0x71
 8003ed2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ed6:	e003      	b.n	8003ee0 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8003ed8:	2383      	movs	r3, #131	@ 0x83
 8003eda:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ede:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8003ee0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003ee4:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8003ee8:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8003efa:	e00b      	b.n	8003f14 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8003efc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003f0a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8003f14:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8003f18:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3ed      	bcc.n	8003efc <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8003f20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f24:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d917      	bls.n	8003f5e <VL53LX_init_and_start_range+0x38a>
 8003f2e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f36:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003f3a:	f1c3 0301 	rsb	r3, r3, #1
 8003f3e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003f42:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8003f46:	f107 020c 	add.w	r2, r7, #12
 8003f4a:	4413      	add	r3, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	210b      	movs	r1, #11
 8003f50:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8003f54:	f00b f99a 	bl	800f28c <VL53LX_i2c_encode_static_nvm_managed>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003f5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f62:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d917      	bls.n	8003f9c <VL53LX_init_and_start_range+0x3c8>
 8003f6c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d113      	bne.n	8003f9c <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f74:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003f78:	f1c3 030d 	rsb	r3, r3, #13
 8003f7c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003f80:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8003f84:	f107 020c 	add.w	r2, r7, #12
 8003f88:	4413      	add	r3, r2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2117      	movs	r1, #23
 8003f8e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8003f92:	f00b fa57 	bl	800f444 <VL53LX_i2c_encode_customer_nvm_managed>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003f9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fa0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d917      	bls.n	8003fda <VL53LX_init_and_start_range+0x406>
 8003faa:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003fb2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003fb6:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003fba:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003fbe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 8003fc2:	f107 020c 	add.w	r2, r7, #12
 8003fc6:	4413      	add	r3, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2120      	movs	r1, #32
 8003fcc:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8003fd0:	f00b fbc1 	bl	800f756 <VL53LX_i2c_encode_static_config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8003fda:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fde:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d917      	bls.n	8004018 <VL53LX_init_and_start_range+0x444>
 8003fe8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d113      	bne.n	8004018 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003ff0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003ff4:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8003ff8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003ffc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 8004000:	f107 020c 	add.w	r2, r7, #12
 8004004:	4413      	add	r3, r2
 8004006:	461a      	mov	r2, r3
 8004008:	2116      	movs	r1, #22
 800400a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800400e:	f00b fc85 	bl	800f91c <VL53LX_i2c_encode_general_config>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004018:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800401c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d917      	bls.n	8004056 <VL53LX_init_and_start_range+0x482>
 8004026:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800402a:	2b00      	cmp	r3, #0
 800402c:	d113      	bne.n	8004056 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800402e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004032:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8004036:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800403a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 800403e:	f107 020c 	add.w	r2, r7, #12
 8004042:	4413      	add	r3, r2
 8004044:	461a      	mov	r2, r3
 8004046:	2117      	movs	r1, #23
 8004048:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800404c:	f00b fcea 	bl	800fa24 <VL53LX_i2c_encode_timing_config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004056:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800405a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d036      	beq.n	80040d2 <VL53LX_init_and_start_range+0x4fe>
 8004064:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004068:	2b00      	cmp	r3, #0
 800406a:	d132      	bne.n	80040d2 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800406c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004070:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8004074:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004078:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004096:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80040b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80040ba:	f107 020c 	add.w	r2, r7, #12
 80040be:	4413      	add	r3, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	2112      	movs	r1, #18
 80040c4:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80040c8:	f00b fd2e 	bl	800fb28 <VL53LX_i2c_encode_dynamic_config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80040d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80040da:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80040de:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80040e2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 80040ea:	f107 020c 	add.w	r2, r7, #12
 80040ee:	4413      	add	r3, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	2105      	movs	r1, #5
 80040f4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80040f8:	f00b fd9b 	bl	800fc32 <VL53LX_i2c_encode_system_control>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004102:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 800410a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800410e:	f107 020c 	add.w	r2, r7, #12
 8004112:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8004116:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800411a:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	f00d f9b4 	bl	801148c <VL53LX_WriteMulti>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 800412a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004132:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004136:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	f003 fa30 	bl	80075a0 <VL53LX_update_ll_driver_rd_state>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 8004146:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800414e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004152:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	f003 fbc2 	bl	80078e0 <VL53LX_update_ll_driver_cfg_state>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004162:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8004166:	4618      	mov	r0, r3
 8004168:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3318      	adds	r3, #24
 8004180:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004188:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004190:	b25b      	sxtb	r3, r3
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004198:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800419c:	b25b      	sxtb	r3, r3
 800419e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f00b fd7a 	bl	800fca8 <VL53LX_set_system_control>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80041ca:	2103      	movs	r1, #3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f003 f9b7 	bl	8007540 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 80041d8:	3301      	adds	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f003 fdc1 	bl	8007d6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f003 fdf3 	bl	8007dd6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f6:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f006 ffd4 	bl	800b1ac <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b0c8      	sub	sp, #288	@ 0x120
 8004214:	af00      	add	r7, sp, #0
 8004216:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800421a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800421e:	6018      	str	r0, [r3, #0]
 8004220:	460a      	mov	r2, r1
 8004222:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004226:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800422a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004232:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004236:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3318      	adds	r3, #24
 800423e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004242:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004246:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800424a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800424e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004252:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004256:	3318      	adds	r3, #24
 8004258:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800425c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004260:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004264:	331c      	adds	r3, #28
 8004266:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 800426a:	2388      	movs	r3, #136	@ 0x88
 800426c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800427c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004280:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d008      	beq.n	800429c <VL53LX_get_measurement_results+0x8c>
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10d      	bne.n	80042aa <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800428e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004292:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8004296:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800429a:	e00a      	b.n	80042b2 <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800429c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80042a0:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80042a4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80042a8:	e003      	b.n	80042b2 <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 80042aa:	232c      	movs	r3, #44	@ 0x2c
 80042ac:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80042b0:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80042b2:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 80042ba:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80042be:	f107 0208 	add.w	r2, r7, #8
 80042c2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80042c6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80042ca:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	f00d f912 	bl	80114f8 <VL53LX_ReadMulti>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80042da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80042de:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d917      	bls.n	8004318 <VL53LX_get_measurement_results+0x108>
 80042e8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d113      	bne.n	8004318 <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042f0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80042f4:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 80042f8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80042fc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 8004300:	f107 0208 	add.w	r2, r7, #8
 8004304:	4413      	add	r3, r2
 8004306:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800430a:	4619      	mov	r1, r3
 800430c:	2038      	movs	r0, #56	@ 0x38
 800430e:	f00b fe49 	bl	800ffa4 <VL53LX_i2c_decode_debug_results>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004318:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800431c:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <VL53LX_get_measurement_results+0x146>
 8004326:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800432a:	2b00      	cmp	r3, #0
 800432c:	d113      	bne.n	8004356 <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800432e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004332:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8004336:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800433a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 800433e:	f107 0208 	add.w	r2, r7, #8
 8004342:	4413      	add	r3, r2
 8004344:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004348:	4619      	mov	r1, r3
 800434a:	2021      	movs	r0, #33	@ 0x21
 800434c:	f00b fdc9 	bl	800fee2 <VL53LX_i2c_decode_core_results>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004356:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800435a:	2b00      	cmp	r3, #0
 800435c:	d110      	bne.n	8004380 <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004364:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 8004368:	f107 0208 	add.w	r2, r7, #8
 800436c:	4413      	add	r3, r2
 800436e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004372:	4619      	mov	r1, r3
 8004374:	202c      	movs	r0, #44	@ 0x2c
 8004376:	f00b fcbe 	bl	800fcf6 <VL53LX_i2c_decode_system_results>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004380:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8004384:	4618      	mov	r0, r3
 8004386:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 800438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	b0a0      	sub	sp, #128	@ 0x80
 8004394:	af06      	add	r7, sp, #24
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	460b      	mov	r3, r1
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3318      	adds	r3, #24
 80043a8:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80043b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80043b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b4:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80043b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80043bc:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80043be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c0:	332c      	adds	r3, #44	@ 0x2c
 80043c2:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80043c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c6:	33c2      	adds	r3, #194	@ 0xc2
 80043c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80043ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043cc:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80043d0:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80043d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043da:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80043e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80043e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ea:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 80043ee:	3310      	adds	r3, #16
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80043f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80043fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043fc:	3348      	adds	r3, #72	@ 0x48
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004402:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8004408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800440a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800440e:	331c      	adds	r3, #28
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004414:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8296 	beq.w	800494e <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004424:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004428:	4619      	mov	r1, r3
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fbd2 	bl	8004bd4 <VL53LX_get_histogram_bin_data>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004436:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004442:	2b00      	cmp	r3, #0
 8004444:	d114      	bne.n	8004470 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004448:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800444c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004458:	4413      	add	r3, r2
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800445e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f004 fa27 	bl	80088b8 <VL53LX_hist_copy_and_scale_ambient_info>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004470:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004474:	2b00      	cmp	r3, #0
 8004476:	f040 8206 	bne.w	8004886 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800447a:	f107 0313 	add.w	r3, r7, #19
 800447e:	4619      	mov	r1, r3
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f006 ffba 	bl	800b3fa <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 800448c:	2301      	movs	r3, #1
 800448e:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	3b01      	subs	r3, #1
 8004494:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80044a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	3202      	adds	r2, #2
 80044aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b0:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80044b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b4:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 80044b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ba:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80044bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f004 f8fd 	bl	80086c8 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80044ce:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80044d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80044d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80044da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044dc:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80044de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80044e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e6:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80044e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ea:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80044ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ee:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80044f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f4:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80044f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044f8:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80044fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044fe:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004502:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004508:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800450c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800450e:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004514:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8004518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800451a:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800451e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004520:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004526:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800452e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004530:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004534:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004538:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800453a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800453e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004540:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004544:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8004548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800454a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f003 faeb 	bl	8007b2c <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004558:	795b      	ldrb	r3, [r3, #5]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d002      	beq.n	8004564 <VL53LX_get_device_results+0x1d6>
 800455e:	2b03      	cmp	r3, #3
 8004560:	d02e      	beq.n	80045c0 <VL53LX_get_device_results+0x232>
 8004562:	e03d      	b.n	80045e0 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004566:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 800456a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800457a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457c:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 8004580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004582:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 8004586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004588:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800458c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800458e:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 8004592:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004594:	319c      	adds	r1, #156	@ 0x9c
 8004596:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004598:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 800459c:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 80045a0:	b2a4      	uxth	r4, r4
 80045a2:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 80045a4:	351c      	adds	r5, #28
 80045a6:	9505      	str	r5, [sp, #20]
 80045a8:	9404      	str	r4, [sp, #16]
 80045aa:	9003      	str	r0, [sp, #12]
 80045ac:	9102      	str	r1, [sp, #8]
 80045ae:	9201      	str	r2, [sp, #4]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4643      	mov	r3, r8
 80045b4:	4672      	mov	r2, lr
 80045b6:	4661      	mov	r1, ip
 80045b8:	4630      	mov	r0, r6
 80045ba:	f005 f8f4 	bl	80097a6 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80045be:	e013      	b.n	80045e8 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80045c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c2:	331c      	adds	r3, #28
 80045c4:	4619      	mov	r1, r3
 80045c6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80045c8:	f7fe f9b8 	bl	800293c <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80045cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	b21a      	sxth	r2, r3
 80045da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045dc:	839a      	strh	r2, [r3, #28]
		break;
 80045de:	e003      	b.n	80045e8 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 80045e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e2:	2200      	movs	r2, #0
 80045e4:	839a      	strh	r2, [r3, #28]
		break;
 80045e6:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 80045e8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 814c 	bne.w	800488a <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 80045f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fa:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 80045fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004600:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004606:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 800460a:	461c      	mov	r4, r3
 800460c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800460e:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4623      	mov	r3, r4
 8004616:	f005 fa69 	bl	8009aec <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800461a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800461c:	799b      	ldrb	r3, [r3, #6]
 800461e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004620:	4619      	mov	r1, r3
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 ff89 	bl	800553a <VL53LX_get_dmax_calibration_data>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 800462e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 812b 	bne.w	800488e <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800463a:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 800463e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004640:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 8004644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004646:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800464a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800464c:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004650:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004652:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 8004656:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004658:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 800465c:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 800465e:	9405      	str	r4, [sp, #20]
 8004660:	f107 0413 	add.w	r4, r7, #19
 8004664:	9404      	str	r4, [sp, #16]
 8004666:	9003      	str	r0, [sp, #12]
 8004668:	9102      	str	r1, [sp, #8]
 800466a:	9201      	str	r2, [sp, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	4633      	mov	r3, r6
 8004670:	462a      	mov	r2, r5
 8004672:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f00d f94d 	bl	8011914 <VL53LX_ipp_hist_process_data>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004682:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d150      	bne.n	800472c <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 800468a:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800468c:	2b01      	cmp	r3, #1
 800468e:	d94d      	bls.n	800472c <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004696:	e045      	b.n	8004724 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004698:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800469c:	224c      	movs	r2, #76	@ 0x4c
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	3310      	adds	r3, #16
 80046a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046a6:	4413      	add	r3, r2
 80046a8:	3304      	adds	r3, #4
 80046aa:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	7cfa      	ldrb	r2, [r7, #19]
 80046b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	7cfa      	ldrb	r2, [r7, #19]
 80046c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	7cfa      	ldrb	r2, [r7, #19]
 80046ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80046da:	461a      	mov	r2, r3
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	fb92 f3f3 	sdiv	r3, r2, r3
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046ec:	461a      	mov	r2, r3
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80046fe:	461a      	mov	r2, r3
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	fb92 f3f3 	sdiv	r3, r2, r3
 8004706:	b29a      	uxth	r2, r3
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	7cfa      	ldrb	r2, [r7, #19]
 8004712:	fbb3 f2f2 	udiv	r2, r3, r2
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800471a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800471e:	3301      	adds	r3, #1
 8004720:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004724:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004728:	2b03      	cmp	r3, #3
 800472a:	d9b5      	bls.n	8004698 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800472c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 80ae 	bne.w	8004892 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004738:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 800473c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800473e:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 8004742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004744:	330e      	adds	r3, #14
 8004746:	461a      	mov	r2, r3
 8004748:	f004 fff7 	bl	800973a <VL53LX_hist_wrap_dmax>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004752:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004756:	2b00      	cmp	r3, #0
 8004758:	f040 809d 	bne.w	8004896 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800475c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800475e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476e:	4413      	add	r3, r2
 8004770:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004772:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004782:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004784:	4413      	add	r3, r2
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f004 faf2 	bl	8008d76 <VL53LX_hist_phase_consistency_check>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004798:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800479c:	2b00      	cmp	r3, #0
 800479e:	d17c      	bne.n	800489a <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80047a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80047aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b2:	4413      	add	r3, r2
 80047b4:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80047b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80047c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047c8:	4413      	add	r3, r2
 80047ca:	f103 0208 	add.w	r2, r3, #8
 80047ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047d0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f004 ff58 	bl	800968a <VL53LX_hist_xmonitor_consistency_check>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 80047e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d15a      	bne.n	800489e <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80047e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	2205      	movs	r2, #5
 80047f6:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80047f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80047fe:	3301      	adds	r3, #1
 8004800:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004804:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004808:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800480c:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 800480e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004810:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 8004814:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004818:	429a      	cmp	r2, r3
 800481a:	d222      	bcs.n	8004862 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800481c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 800482e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004830:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004838:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004842:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 800484a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800484c:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800484e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004850:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8004854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004856:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 800485e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004860:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004862:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11b      	bne.n	80048a2 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 800486a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800486c:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8004870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004872:	f203 3266 	addw	r2, r3, #870	@ 0x366
 8004876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004878:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 800487c:	3318      	adds	r3, #24
 800487e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004880:	f005 fa91 	bl	8009da6 <VL53LX_hist_copy_results_to_sys_and_core>
 8004884:	e00e      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004886:	bf00      	nop
 8004888:	e00c      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800488a:	bf00      	nop
 800488c:	e00a      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800488e:	bf00      	nop
 8004890:	e008      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004892:	bf00      	nop
 8004894:	e006      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80048a2:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80048a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d036      	beq.n	800491a <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80048ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ae:	79db      	ldrb	r3, [r3, #7]
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d00a      	beq.n	80048ca <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80048b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80048bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f005 fb45 	bl	8009f4e <VL53LX_dynamic_zone_update>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80048d0:	e015      	b.n	80048fe <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80048d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 80048d8:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <VL53LX_get_device_results+0x556>
 80048e0:	2103      	movs	r1, #3
 80048e2:	e000      	b.n	80048e6 <VL53LX_get_device_results+0x558>
 80048e4:	2101      	movs	r1, #1
 80048e6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ec:	4413      	add	r3, r2
 80048ee:	460a      	mov	r2, r1
 80048f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80048f4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048f8:	3301      	adds	r3, #1
 80048fa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80048fe:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004902:	2b04      	cmp	r3, #4
 8004904:	d9e5      	bls.n	80048d2 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004906:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f005 fb97 	bl	800a042 <VL53LX_multizone_hist_bins_update>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800491a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f006 f832 	bl	800a98c <VL53LX_dynamic_xtalk_correction_corrector>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800492e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004930:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d157      	bne.n	80049e8 <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 8004938:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800493a:	2b00      	cmp	r3, #0
 800493c:	d054      	beq.n	80049e8 <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	7cfa      	ldrb	r2, [r7, #19]
 8004944:	fbb3 f2f2 	udiv	r2, r3, r2
 8004948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e04c      	b.n	80049e8 <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 800494e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 8004956:	7afb      	ldrb	r3, [r7, #11]
 8004958:	4619      	mov	r1, r3
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff fc58 	bl	8004210 <VL53LX_get_measurement_results>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004966:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800496e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004970:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004974:	4618      	mov	r0, r3
 8004976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004978:	f203 3166 	addw	r1, r3, #870	@ 0x366
 800497c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800497e:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8004982:	3218      	adds	r2, #24
 8004984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004986:	f000 fc27 	bl	80051d8 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d12a      	bne.n	80049e8 <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 8004992:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f006 fc4e 	bl	800b244 <VL53LX_low_power_auto_setup_manual_calibration>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	2201      	movs	r2, #1
 80049b2:	709a      	strb	r2, [r3, #2]
 80049b4:	e00a      	b.n	80049cc <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 80049b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	2202      	movs	r2, #2
 80049ca:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	2bff      	cmp	r3, #255	@ 0xff
 80049d2:	d009      	beq.n	80049e8 <VL53LX_get_device_results+0x65a>
 80049d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f006 fc83 	bl	800b2e8 <VL53LX_low_power_auto_update_DSS>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80049e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80049ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f0:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80049f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f4:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80049f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049fa:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80049fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049fe:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a04:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004a06:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 80b0 	bne.w	8004b70 <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a12:	2205      	movs	r2, #5
 8004a14:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a24:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8004a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a34:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8004a38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	f080 8097 	bcs.w	8004b70 <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004a42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004a52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a54:	4413      	add	r3, r2
 8004a56:	3308      	adds	r3, #8
 8004a58:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a5c:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a60:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a64:	785a      	ldrb	r2, [r3, #1]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a68:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a6c:	789a      	ldrb	r2, [r3, #2]
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a70:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a74:	78da      	ldrb	r2, [r3, #3]
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a7c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a86:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a90:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a9c:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8004aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa8:	7c5a      	ldrb	r2, [r3, #17]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004aae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ab0:	7c9a      	ldrb	r2, [r3, #18]
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab4:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004abc:	e052      	b.n	8004b64 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004abe:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ac2:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004ac6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ac8:	204c      	movs	r0, #76	@ 0x4c
 8004aca:	fb00 f303 	mul.w	r3, r0, r3
 8004ace:	440b      	add	r3, r1
 8004ad0:	3338      	adds	r3, #56	@ 0x38
 8004ad2:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ad4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4403      	add	r3, r0
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004ae4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004ae8:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004aec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004aee:	204c      	movs	r0, #76	@ 0x4c
 8004af0:	fb00 f303 	mul.w	r3, r0, r3
 8004af4:	440b      	add	r3, r1
 8004af6:	333c      	adds	r3, #60	@ 0x3c
 8004af8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004afa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4403      	add	r3, r0
 8004b06:	330c      	adds	r3, #12
 8004b08:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004b0a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004b0e:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004b12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b14:	204c      	movs	r0, #76	@ 0x4c
 8004b16:	fb00 f303 	mul.w	r3, r0, r3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3354      	adds	r3, #84	@ 0x54
 8004b1e:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	4602      	mov	r2, r0
 8004b30:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004b32:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004b36:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8004b3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b3c:	204c      	movs	r0, #76	@ 0x4c
 8004b3e:	fb00 f303 	mul.w	r3, r0, r3
 8004b42:	440b      	add	r3, r1
 8004b44:	335e      	adds	r3, #94	@ 0x5e
 8004b46:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004b48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3312      	adds	r3, #18
 8004b56:	4602      	mov	r2, r0
 8004b58:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004b5a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b66:	7c9b      	ldrb	r3, [r3, #18]
 8004b68:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3a6      	bcc.n	8004abe <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 8004b70:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004b74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f012 f911 	bl	8016d9e <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004b7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f002 fdf9 	bl	800777c <VL53LX_check_ll_driver_rd_state>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004b90:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3768      	adds	r7, #104	@ 0x68
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b9e <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff f809 	bl	8003bd4 <VL53LX_init_and_start_range>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b0d2      	sub	sp, #328	@ 0x148
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bde:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004be2:	6018      	str	r0, [r3, #0]
 8004be4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004be8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004bec:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8004bf4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bf8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3318      	adds	r3, #24
 8004c00:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004c04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c08:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004c12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004c16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c1a:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8004c1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c26:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8004c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c32:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004c36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c3e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004c42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004c46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004c4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 8004c80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004c8c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8004c94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c98:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8004c9c:	2353      	movs	r3, #83	@ 0x53
 8004c9e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004ca2:	2188      	movs	r1, #136	@ 0x88
 8004ca4:	6800      	ldr	r0, [r0, #0]
 8004ca6:	f00c fc27 	bl	80114f8 <VL53LX_ReadMulti>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004cb0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004cc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cc8:	785a      	ldrb	r2, [r3, #1]
 8004cca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004cd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cdc:	789a      	ldrb	r2, [r3, #2]
 8004cde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ce2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004cec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cf0:	78da      	ldrb	r2, [r3, #3]
 8004cf2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cf6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004d00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	2002      	movs	r0, #2
 8004d0a:	f003 fa37 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004d12:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d16:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8004d20:	234e      	movs	r3, #78	@ 0x4e
 8004d22:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004d26:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004d2a:	f107 020c 	add.w	r2, r7, #12
 8004d2e:	4413      	add	r3, r2
 8004d30:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004d34:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004d38:	2002      	movs	r0, #2
 8004d3a:	f003 fa1f 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004d42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d46:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8004d50:	2350      	movs	r3, #80	@ 0x50
 8004d52:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004d56:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004d5a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004d5e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004d62:	5cd2      	ldrb	r2, [r2, r3]
 8004d64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004d72:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d76:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d88:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004d8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004d9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da2:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 8004da6:	2351      	movs	r3, #81	@ 0x51
 8004da8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004dac:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004db0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004db4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004db8:	5cd3      	ldrb	r3, [r2, r3]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004dc0:	2352      	movs	r3, #82	@ 0x52
 8004dc2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004dc6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004dca:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004dce:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004dd2:	5cd2      	ldrb	r2, [r2, r3]
 8004dd4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004dd8:	4413      	add	r3, r2
 8004dda:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004dde:	234d      	movs	r3, #77	@ 0x4d
 8004de0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004de4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004de8:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004dec:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004df0:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8004df4:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004df6:	2306      	movs	r3, #6
 8004df8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004dfc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004e00:	f107 020c 	add.w	r2, r7, #12
 8004e04:	4413      	add	r3, r2
 8004e06:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004e10:	e01a      	b.n	8004e48 <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004e12:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004e16:	2003      	movs	r0, #3
 8004e18:	f003 fa4f 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 8004e1c:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004e1e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004e22:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004e24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3206      	adds	r2, #6
 8004e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004e34:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e38:	3303      	adds	r3, #3
 8004e3a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004e3e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004e42:	3301      	adds	r3, #1
 8004e44:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004e48:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004e4c:	2b17      	cmp	r3, #23
 8004e4e:	d9e0      	bls.n	8004e12 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8004e50:	f107 0208 	add.w	r2, r7, #8
 8004e54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e5c:	f248 018d 	movw	r1, #32909	@ 0x808d
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	f000 fbab 	bl	80055bc <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8004e66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e6a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d118      	bne.n	8004eaa <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004e78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e7c:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8004e80:	3310      	adds	r3, #16
 8004e82:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f011 fef9 	bl	8016c80 <memset>
		pdev->bin_rec_pos = 0;
 8004e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 8004e9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 8004eaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10b      	bne.n	8004ed0 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 8004eb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ebc:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004ec0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ec4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ec8:	6811      	ldr	r1, [r2, #0]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	f7fd fe2e 	bl	8002b2c <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8004ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ed4:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004ed8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004edc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8004ee4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ee8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004ef2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ef6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2218      	movs	r2, #24
 8004efe:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004f00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2218      	movs	r2, #24
 8004f0c:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8004f0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f12:	78da      	ldrb	r2, [r3, #3]
 8004f14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8004f22:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f26:	799b      	ldrb	r3, [r3, #6]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8004f2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8004f3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f3e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004f48:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004f4c:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 8004f4e:	4413      	add	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f56:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8004f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f64:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8004f66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f6a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8004f74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f78:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004f7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f80:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	f003 fd97 	bl	8008aba <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8004f8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d115      	bne.n	8004fc4 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8004f98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8004fa2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004fa6:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 8004fa8:	4413      	add	r3, r2
 8004faa:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8004fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fb2:	799a      	ldrb	r2, [r3, #6]
 8004fb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fb8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8004fc2:	e014      	b.n	8004fee <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8004fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fc8:	79db      	ldrb	r3, [r3, #7]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8004fce:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004fd2:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8004fda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fde:	7a5a      	ldrb	r2, [r3, #9]
 8004fe0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fe4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8004fee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ff2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005002:	e01f      	b.n	8005044 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005004:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005008:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800500c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	4413      	add	r3, r2
 8005014:	7b1b      	ldrb	r3, [r3, #12]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b07      	cmp	r3, #7
 800501c:	d10d      	bne.n	800503a <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800501e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005022:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	7adb      	ldrb	r3, [r3, #11]
 800502a:	3304      	adds	r3, #4
 800502c:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800502e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005032:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800503a:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800503e:	3301      	adds	r3, #1
 8005040:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005044:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005048:	2b05      	cmp	r3, #5
 800504a:	d9db      	bls.n	8005004 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 800504c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005050:	4618      	mov	r0, r3
 8005052:	f003 fba2 	bl	800879a <VL53LX_decode_timeout>
 8005056:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005058:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800505c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005066:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800506a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005074:	4618      	mov	r0, r3
 8005076:	f006 fa00 	bl	800b47a <VL53LX_calc_pll_period_us>
 800507a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800507e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005082:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508c:	3301      	adds	r3, #1
 800508e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005092:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005096:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 80050a0:	4619      	mov	r1, r3
 80050a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80050a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050aa:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80050ae:	f006 f9fb 	bl	800b4a8 <VL53LX_duration_maths>
 80050b2:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80050b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80050c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80050d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050d6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	f006 fb0a 	bl	800b6f4 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80050e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f006 ff22 	bl	800bf32 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80050ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050f2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80050f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005102:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005106:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800510a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800510e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8005116:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800511a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	789b      	ldrb	r3, [r3, #2]
 8005122:	461a      	mov	r2, r3
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005130:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005134:	4413      	add	r3, r2
 8005136:	3302      	adds	r3, #2
 8005138:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005140:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005142:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005146:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005154:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005156:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800515a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005168:	2200      	movs	r2, #0
 800516a:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800516c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005170:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2b11      	cmp	r3, #17
 8005180:	bf8c      	ite	hi
 8005182:	2201      	movhi	r2, #1
 8005184:	2200      	movls	r2, #0
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	2a00      	cmp	r2, #0
 800518a:	d11c      	bne.n	80051c6 <VL53LX_get_histogram_bin_data+0x5f2>
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <VL53LX_get_histogram_bin_data+0x600>)
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80051a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051bc:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80051be:	23fa      	movs	r3, #250	@ 0xfa
 80051c0:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 80051c4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80051c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	0002200e 	.word	0x0002200e

080051d8 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80051d8:	b480      	push	{r7}
 80051da:	b08b      	sub	sp, #44	@ 0x2c
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	78da      	ldrb	r2, [r3, #3]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2204      	movs	r2, #4
 800520c:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	8a1b      	ldrh	r3, [r3, #16]
 8005218:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	8a9b      	ldrh	r3, [r3, #20]
 800521e:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	8a5b      	ldrh	r3, [r3, #18]
 8005224:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800522c:	e00b      	b.n	8005246 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800522e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4413      	add	r3, r2
 8005238:	2200      	movs	r2, #0
 800523a:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800523c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005240:	3301      	adds	r3, #1
 8005242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800524a:	2b04      	cmp	r3, #4
 800524c:	d9ef      	bls.n	800522e <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	3314      	adds	r3, #20
 8005252:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800525a:	e0fe      	b.n	800545a <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005262:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2200      	movs	r2, #0
 8005268:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	78db      	ldrb	r3, [r3, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800527a:	2b09      	cmp	r3, #9
 800527c:	d104      	bne.n	8005288 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2213      	movs	r2, #19
 8005282:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8005286:	e007      	b.n	8005298 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2200      	movs	r2, #0
 800529c:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2200      	movs	r2, #0
 80052a2:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2200      	movs	r2, #0
 80052a8:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	2200      	movs	r2, #0
 80052ae:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2200      	movs	r2, #0
 80052b4:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	2200      	movs	r2, #0
 80052ba:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80052bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d05c      	beq.n	8005382 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80052c8:	e0a8      	b.n	800541c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	789b      	ldrb	r3, [r3, #2]
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	d103      	bne.n	80052da <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	8a7a      	ldrh	r2, [r7, #18]
 80052d6:	82da      	strh	r2, [r3, #22]
 80052d8:	e00b      	b.n	80052f2 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	789b      	ldrb	r3, [r3, #2]
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d103      	bne.n	80052ea <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	8aba      	ldrh	r2, [r7, #20]
 80052e6:	82da      	strh	r2, [r3, #22]
 80052e8:	e003      	b.n	80052f2 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	8afa      	ldrh	r2, [r7, #22]
 80052f6:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	895b      	ldrh	r3, [r3, #10]
 800530c:	015b      	lsls	r3, r3, #5
 800530e:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d302      	bcc.n	800531e <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005318:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800531c:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	b29a      	uxth	r2, r3
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005334:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005346:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	da01      	bge.n	8005352 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800534e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005352:	12db      	asrs	r3, r3, #11
 8005354:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	b21a      	sxth	r2, r3
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8005380:	e04c      	b.n	800541c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005398:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	8bdb      	ldrh	r3, [r3, #30]
 80053a6:	015b      	lsls	r3, r3, #5
 80053a8:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b0:	d302      	bcc.n	80053b8 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80053b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053b6:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 80053ce:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e0:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da01      	bge.n	80053ec <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80053e8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80053ec:	12db      	asrs	r3, r3, #11
 80053ee:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 800541a:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	334c      	adds	r3, #76	@ 0x4c
 800544e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005454:	3301      	adds	r3, #1
 8005456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800545a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800545e:	2b01      	cmp	r3, #1
 8005460:	f67f aefc 	bls.w	800525c <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2b11      	cmp	r3, #17
 8005474:	bf8c      	ite	hi
 8005476:	2201      	movhi	r2, #1
 8005478:	2200      	movls	r2, #0
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	2a00      	cmp	r2, #0
 800547e:	d117      	bne.n	80054b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 8005480:	4a0e      	ldr	r2, [pc, #56]	@ (80054bc <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005482:	fa22 f303 	lsr.w	r3, r2, r3
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80054ae:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80054b0:	bf00      	nop
 80054b2:	372c      	adds	r7, #44	@ 0x2c
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	0002200e 	.word	0x0002200e

080054c0 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3318      	adds	r3, #24
 80054d2:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	332c      	adds	r3, #44	@ 0x2c
 80054d8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d109      	bne.n	80054f6 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 80054f4:	e003      	b.n	80054fe <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80054fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3318      	adds	r3, #24
 8005522:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800552a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	460b      	mov	r3, r1
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3318      	adds	r3, #24
 8005550:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d009      	beq.n	800556c <VL53LX_get_dmax_calibration_data+0x32>
 8005558:	2b02      	cmp	r3, #2
 800555a:	d10f      	bne.n	800557c <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 8005560:	220a      	movs	r2, #10
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f011 fc1a 	bl	8016d9e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800556a:	e00a      	b.n	8005582 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8005570:	220a      	movs	r2, #10
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f011 fc12 	bl	8016d9e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800557a:	e002      	b.n	8005582 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800557c:	23fc      	movs	r3, #252	@ 0xfc
 800557e:	75fb      	strb	r3, [r7, #23]
	break;
 8005580:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <VL53LX_set_offset_correction_mode>:


VL53LX_Error VL53LX_set_offset_correction_mode(
	VL53LX_DEV                     Dev,
	VL53LX_OffsetCorrectionMode    offset_cor_mode)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3318      	adds	r3, #24
 80055a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->offset_correction_mode = offset_cor_mode;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	715a      	strb	r2, [r3, #5]

	LOG_FUNCTION_END(status);

	return status;
 80055aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	460b      	mov	r3, r1
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3318      	adds	r3, #24
 80055d2:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80055da:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80055e2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80055ea:	2bb9      	cmp	r3, #185	@ 0xb9
 80055ec:	f200 86ca 	bhi.w	8006384 <VL53LX_get_tuning_parm+0xdc8>
 80055f0:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <VL53LX_get_tuning_parm+0x3c>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	080058e1 	.word	0x080058e1
 80055fc:	080058f1 	.word	0x080058f1
 8005600:	08005901 	.word	0x08005901
 8005604:	08005911 	.word	0x08005911
 8005608:	0800591f 	.word	0x0800591f
 800560c:	0800592d 	.word	0x0800592d
 8005610:	0800593b 	.word	0x0800593b
 8005614:	08005949 	.word	0x08005949
 8005618:	08005957 	.word	0x08005957
 800561c:	08005965 	.word	0x08005965
 8005620:	08005973 	.word	0x08005973
 8005624:	0800597f 	.word	0x0800597f
 8005628:	0800598d 	.word	0x0800598d
 800562c:	0800599b 	.word	0x0800599b
 8005630:	080059a7 	.word	0x080059a7
 8005634:	080059b5 	.word	0x080059b5
 8005638:	080059c3 	.word	0x080059c3
 800563c:	080059d3 	.word	0x080059d3
 8005640:	080059e3 	.word	0x080059e3
 8005644:	080059f1 	.word	0x080059f1
 8005648:	08005a01 	.word	0x08005a01
 800564c:	08005a0f 	.word	0x08005a0f
 8005650:	08005a1f 	.word	0x08005a1f
 8005654:	08005a2f 	.word	0x08005a2f
 8005658:	08005a3f 	.word	0x08005a3f
 800565c:	08005a4f 	.word	0x08005a4f
 8005660:	08005a5f 	.word	0x08005a5f
 8005664:	08005a6f 	.word	0x08005a6f
 8005668:	08005a7f 	.word	0x08005a7f
 800566c:	08005a8f 	.word	0x08005a8f
 8005670:	08005a9f 	.word	0x08005a9f
 8005674:	08005aad 	.word	0x08005aad
 8005678:	08005abd 	.word	0x08005abd
 800567c:	08005acd 	.word	0x08005acd
 8005680:	08005add 	.word	0x08005add
 8005684:	08005aed 	.word	0x08005aed
 8005688:	08005afd 	.word	0x08005afd
 800568c:	08005b0d 	.word	0x08005b0d
 8005690:	08005b1d 	.word	0x08005b1d
 8005694:	08005b2d 	.word	0x08005b2d
 8005698:	08005b3d 	.word	0x08005b3d
 800569c:	08005b4d 	.word	0x08005b4d
 80056a0:	08005b5d 	.word	0x08005b5d
 80056a4:	08005b6d 	.word	0x08005b6d
 80056a8:	08005b7d 	.word	0x08005b7d
 80056ac:	08005b8d 	.word	0x08005b8d
 80056b0:	08005b9b 	.word	0x08005b9b
 80056b4:	08005ba9 	.word	0x08005ba9
 80056b8:	08005bb7 	.word	0x08005bb7
 80056bc:	08005bc5 	.word	0x08005bc5
 80056c0:	08005bd3 	.word	0x08005bd3
 80056c4:	08005be1 	.word	0x08005be1
 80056c8:	08005bef 	.word	0x08005bef
 80056cc:	08005bfd 	.word	0x08005bfd
 80056d0:	08005c0b 	.word	0x08005c0b
 80056d4:	08005c19 	.word	0x08005c19
 80056d8:	08005c27 	.word	0x08005c27
 80056dc:	08005c35 	.word	0x08005c35
 80056e0:	08005c43 	.word	0x08005c43
 80056e4:	08005c51 	.word	0x08005c51
 80056e8:	08005c5f 	.word	0x08005c5f
 80056ec:	08005c6d 	.word	0x08005c6d
 80056f0:	08005c7b 	.word	0x08005c7b
 80056f4:	08005c89 	.word	0x08005c89
 80056f8:	08005c97 	.word	0x08005c97
 80056fc:	08005ca5 	.word	0x08005ca5
 8005700:	08005cb3 	.word	0x08005cb3
 8005704:	08005cc1 	.word	0x08005cc1
 8005708:	08005ccf 	.word	0x08005ccf
 800570c:	08005cdd 	.word	0x08005cdd
 8005710:	08005ceb 	.word	0x08005ceb
 8005714:	08005cf9 	.word	0x08005cf9
 8005718:	08005d07 	.word	0x08005d07
 800571c:	08005d15 	.word	0x08005d15
 8005720:	08005d21 	.word	0x08005d21
 8005724:	08005d2f 	.word	0x08005d2f
 8005728:	08005d3d 	.word	0x08005d3d
 800572c:	08005d49 	.word	0x08005d49
 8005730:	08005d55 	.word	0x08005d55
 8005734:	08005d61 	.word	0x08005d61
 8005738:	08005d6d 	.word	0x08005d6d
 800573c:	08005d79 	.word	0x08005d79
 8005740:	08005d85 	.word	0x08005d85
 8005744:	08005d93 	.word	0x08005d93
 8005748:	08005da1 	.word	0x08005da1
 800574c:	08005daf 	.word	0x08005daf
 8005750:	08005dbd 	.word	0x08005dbd
 8005754:	08005dcb 	.word	0x08005dcb
 8005758:	08005dd9 	.word	0x08005dd9
 800575c:	08005de7 	.word	0x08005de7
 8005760:	08005df5 	.word	0x08005df5
 8005764:	08005e03 	.word	0x08005e03
 8005768:	08005e11 	.word	0x08005e11
 800576c:	08005e1f 	.word	0x08005e1f
 8005770:	08005e2d 	.word	0x08005e2d
 8005774:	08005e3b 	.word	0x08005e3b
 8005778:	08005e49 	.word	0x08005e49
 800577c:	08005e57 	.word	0x08005e57
 8005780:	08005e65 	.word	0x08005e65
 8005784:	08005e73 	.word	0x08005e73
 8005788:	08005e81 	.word	0x08005e81
 800578c:	08005e8f 	.word	0x08005e8f
 8005790:	08005e9d 	.word	0x08005e9d
 8005794:	08005eab 	.word	0x08005eab
 8005798:	08005eb9 	.word	0x08005eb9
 800579c:	08005ec7 	.word	0x08005ec7
 80057a0:	08005ed5 	.word	0x08005ed5
 80057a4:	08005ee3 	.word	0x08005ee3
 80057a8:	08005ef1 	.word	0x08005ef1
 80057ac:	08005eff 	.word	0x08005eff
 80057b0:	08005f0d 	.word	0x08005f0d
 80057b4:	08005f1b 	.word	0x08005f1b
 80057b8:	08005f29 	.word	0x08005f29
 80057bc:	08005f37 	.word	0x08005f37
 80057c0:	08005f45 	.word	0x08005f45
 80057c4:	08005f53 	.word	0x08005f53
 80057c8:	08005f61 	.word	0x08005f61
 80057cc:	08005f6f 	.word	0x08005f6f
 80057d0:	08005f7d 	.word	0x08005f7d
 80057d4:	08005f8f 	.word	0x08005f8f
 80057d8:	08005fa1 	.word	0x08005fa1
 80057dc:	08005fb3 	.word	0x08005fb3
 80057e0:	08005fc5 	.word	0x08005fc5
 80057e4:	08005fd7 	.word	0x08005fd7
 80057e8:	08005fe9 	.word	0x08005fe9
 80057ec:	08005ffb 	.word	0x08005ffb
 80057f0:	0800600d 	.word	0x0800600d
 80057f4:	0800601f 	.word	0x0800601f
 80057f8:	08006031 	.word	0x08006031
 80057fc:	08006043 	.word	0x08006043
 8005800:	08006055 	.word	0x08006055
 8005804:	08006067 	.word	0x08006067
 8005808:	08006079 	.word	0x08006079
 800580c:	0800608b 	.word	0x0800608b
 8005810:	0800609d 	.word	0x0800609d
 8005814:	080060af 	.word	0x080060af
 8005818:	080060c1 	.word	0x080060c1
 800581c:	080060d3 	.word	0x080060d3
 8005820:	080060e1 	.word	0x080060e1
 8005824:	080060ef 	.word	0x080060ef
 8005828:	080060fd 	.word	0x080060fd
 800582c:	0800610b 	.word	0x0800610b
 8005830:	08006119 	.word	0x08006119
 8005834:	08006127 	.word	0x08006127
 8005838:	08006135 	.word	0x08006135
 800583c:	08006147 	.word	0x08006147
 8005840:	08006155 	.word	0x08006155
 8005844:	08006163 	.word	0x08006163
 8005848:	08006171 	.word	0x08006171
 800584c:	0800617f 	.word	0x0800617f
 8005850:	0800618d 	.word	0x0800618d
 8005854:	0800619b 	.word	0x0800619b
 8005858:	080061a9 	.word	0x080061a9
 800585c:	080061b7 	.word	0x080061b7
 8005860:	080061c5 	.word	0x080061c5
 8005864:	080061d3 	.word	0x080061d3
 8005868:	080061e1 	.word	0x080061e1
 800586c:	080061ef 	.word	0x080061ef
 8005870:	080061fd 	.word	0x080061fd
 8005874:	0800620b 	.word	0x0800620b
 8005878:	08006219 	.word	0x08006219
 800587c:	08006227 	.word	0x08006227
 8005880:	08006235 	.word	0x08006235
 8005884:	08006243 	.word	0x08006243
 8005888:	08006251 	.word	0x08006251
 800588c:	0800625f 	.word	0x0800625f
 8005890:	0800626d 	.word	0x0800626d
 8005894:	0800627b 	.word	0x0800627b
 8005898:	08006289 	.word	0x08006289
 800589c:	08006297 	.word	0x08006297
 80058a0:	080062a5 	.word	0x080062a5
 80058a4:	080062b3 	.word	0x080062b3
 80058a8:	080062c1 	.word	0x080062c1
 80058ac:	080062cf 	.word	0x080062cf
 80058b0:	080062dd 	.word	0x080062dd
 80058b4:	080062eb 	.word	0x080062eb
 80058b8:	080062f9 	.word	0x080062f9
 80058bc:	08006307 	.word	0x08006307
 80058c0:	08006315 	.word	0x08006315
 80058c4:	08006323 	.word	0x08006323
 80058c8:	08006331 	.word	0x08006331
 80058cc:	0800633f 	.word	0x0800633f
 80058d0:	0800634d 	.word	0x0800634d
 80058d4:	0800635b 	.word	0x0800635b
 80058d8:	08006369 	.word	0x08006369
 80058dc:	08006377 	.word	0x08006377

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80058e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
	break;
 80058ec:	f000 bd51 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80058f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
	break;
 80058fc:	f000 bd49 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8005906:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
	break;
 800590c:	f000 bd41 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	break;
 800591a:	f000 bd3a 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
	break;
 8005928:	f000 bd33 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	789b      	ldrb	r3, [r3, #2]
 8005930:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
	break;
 8005936:	f000 bd2c 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	78db      	ldrb	r3, [r3, #3]
 800593e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	601a      	str	r2, [r3, #0]
	break;
 8005944:	f000 bd25 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
	break;
 8005952:	f000 bd1e 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	795b      	ldrb	r3, [r3, #5]
 800595a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
	break;
 8005960:	f000 bd17 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	799b      	ldrb	r3, [r3, #6]
 8005968:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
	break;
 800596e:	f000 bd10 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
	break;
 800597a:	f000 bd0a 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	891b      	ldrh	r3, [r3, #8]
 8005982:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
	break;
 8005988:	f000 bd03 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	8a1b      	ldrh	r3, [r3, #16]
 8005990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
	break;
 8005996:	f000 bcfc 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
	break;
 80059a2:	f000 bcf6 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	7e1b      	ldrb	r3, [r3, #24]
 80059aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
	break;
 80059b0:	f000 bcef 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	8b5b      	ldrh	r3, [r3, #26]
 80059b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
	break;
 80059be:	f000 bce8 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80059c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
	break;
 80059ce:	f000 bce0 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80059d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
	break;
 80059de:	f000 bcd8 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
	break;
 80059ec:	f000 bcd1 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80059f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	601a      	str	r2, [r3, #0]
	break;
 80059fc:	f000 bcc9 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
	break;
 8005a0a:	f000 bcc2 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8005a14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
	break;
 8005a1a:	f000 bcba 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005a24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
	break;
 8005a2a:	f000 bcb2 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
	break;
 8005a3a:	f000 bcaa 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8005a44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
	break;
 8005a4a:	f000 bca2 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005a54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
	break;
 8005a5a:	f000 bc9a 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8005a64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
	break;
 8005a6a:	f000 bc92 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
	break;
 8005a7a:	f000 bc8a 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
	break;
 8005a8a:	f000 bc82 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8005a94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
	break;
 8005a9a:	f000 bc7a 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
	break;
 8005aa8:	f000 bc73 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]
	break;
 8005ab8:	f000 bc6b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
	break;
 8005ac8:	f000 bc63 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 8005ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
	break;
 8005ad8:	f000 bc5b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8005ae2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
	break;
 8005ae8:	f000 bc53 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8005af2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
	break;
 8005af8:	f000 bc4b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8005b02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
	break;
 8005b08:	f000 bc43 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
	break;
 8005b18:	f000 bc3b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8005b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
	break;
 8005b28:	f000 bc33 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8005b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
	break;
 8005b38:	f000 bc2b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8005b42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
	break;
 8005b48:	f000 bc23 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8005b52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
	break;
 8005b58:	f000 bc1b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
	break;
 8005b68:	f000 bc13 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8005b72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	601a      	str	r2, [r3, #0]
	break;
 8005b78:	f000 bc0b 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
	break;
 8005b88:	f000 bc03 	b.w	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]
	break;
 8005b98:	e3fb      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005ba0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
	break;
 8005ba6:	e3f4      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8005bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	601a      	str	r2, [r3, #0]
	break;
 8005bb4:	e3ed      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8005bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
	break;
 8005bc2:	e3e6      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8005bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
	break;
 8005bd0:	e3df      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8005bd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
	break;
 8005bde:	e3d8      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8005be6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	601a      	str	r2, [r3, #0]
	break;
 8005bec:	e3d1      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8005bf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
	break;
 8005bfa:	e3ca      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8005c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
	break;
 8005c08:	e3c3      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8005c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
	break;
 8005c16:	e3bc      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8005c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	601a      	str	r2, [r3, #0]
	break;
 8005c24:	e3b5      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8005c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
	break;
 8005c32:	e3ae      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	break;
 8005c40:	e3a7      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8005c48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
	break;
 8005c4e:	e3a0      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005c56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
	break;
 8005c5c:	e399      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8005c64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	601a      	str	r2, [r3, #0]
	break;
 8005c6a:	e392      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 8005c72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	601a      	str	r2, [r3, #0]
	break;
 8005c78:	e38b      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 8005c80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]
	break;
 8005c86:	e384      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005c8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
	break;
 8005c94:	e37d      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 8005c9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]
	break;
 8005ca2:	e376      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 8005caa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
	break;
 8005cb0:	e36f      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8005cb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
	break;
 8005cbe:	e368      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8005cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
	break;
 8005ccc:	e361      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8005cd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
	break;
 8005cda:	e35a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8005ce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	601a      	str	r2, [r3, #0]
	break;
 8005ce8:	e353      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8005cf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
	break;
 8005cf6:	e34c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8005cfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
	break;
 8005d04:	e345      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8005d0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
	break;
 8005d12:	e33e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	7c1b      	ldrb	r3, [r3, #16]
 8005d18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
	break;
 8005d1e:	e338      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
	break;
 8005d2c:	e331      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005d34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
	break;
 8005d3a:	e32a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
	break;
 8005d46:	e324      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
	break;
 8005d52:	e31e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	8adb      	ldrh	r3, [r3, #22]
 8005d58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
	break;
 8005d5e:	e318      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	8b1b      	ldrh	r3, [r3, #24]
 8005d64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
	break;
 8005d6a:	e312      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	break;
 8005d76:	e30c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
	break;
 8005d82:	e306      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
	break;
 8005d90:	e2ff      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
	break;
 8005d9e:	e2f8      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005da6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
	break;
 8005dac:	e2f1      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
	break;
 8005dba:	e2ea      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8005dc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	601a      	str	r2, [r3, #0]
	break;
 8005dc8:	e2e3      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8005dd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
	break;
 8005dd6:	e2dc      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 8005dde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
	break;
 8005de4:	e2d5      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8005dec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
	break;
 8005df2:	e2ce      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
	break;
 8005e00:	e2c7      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8005e08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
	break;
 8005e0e:	e2c0      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8005e16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
	break;
 8005e1c:	e2b9      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8005e24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
	break;
 8005e2a:	e2b2      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 8005e32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
	break;
 8005e38:	e2ab      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005e40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	break;
 8005e46:	e2a4      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8005e4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
	break;
 8005e54:	e29d      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8005e5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
	break;
 8005e62:	e296      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8005e6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
	break;
 8005e70:	e28f      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8005e78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
	break;
 8005e7e:	e288      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8005e86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
	break;
 8005e8c:	e281      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 8005e94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
	break;
 8005e9a:	e27a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8005ea2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
	break;
 8005ea8:	e273      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8005eb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
	break;
 8005eb6:	e26c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8005ebe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
	break;
 8005ec4:	e265      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8005ecc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]
	break;
 8005ed2:	e25e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005eda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
	break;
 8005ee0:	e257      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8005ee8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
	break;
 8005eee:	e250      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005ef6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]
	break;
 8005efc:	e249      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8005f04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]
	break;
 8005f0a:	e242      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005f12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
	break;
 8005f18:	e23b      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005f20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
	break;
 8005f26:	e234      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005f2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	break;
 8005f34:	e22d      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8005f3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	break;
 8005f42:	e226      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8005f4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
	break;
 8005f50:	e21f      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8005f58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
	break;
 8005f5e:	e218      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8005f66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
	break;
 8005f6c:	e211      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8005f74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
	break;
 8005f7a:	e20a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f82:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 8005f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
	break;
 8005f8c:	e201      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f94:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 8005f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
	break;
 8005f9e:	e1f8      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	break;
 8005fb0:	e1ef      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb8:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8005fbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
	break;
 8005fc2:	e1e6      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fca:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 8005fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
	break;
 8005fd4:	e1dd      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fdc:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8005fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	break;
 8005fe6:	e1d4      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fee:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8005ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
	break;
 8005ff8:	e1cb      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006000:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8006004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	break;
 800600a:	e1c2      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006012:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8006016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
	break;
 800601c:	e1b9      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006024:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 8006028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
	break;
 800602e:	e1b0      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006036:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 800603a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	break;
 8006040:	e1a7      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006048:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 800604c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	break;
 8006052:	e19e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800605a:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 800605e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
	break;
 8006064:	e195      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800606c:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	break;
 8006076:	e18c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	break;
 8006088:	e183      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006090:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006094:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
	break;
 800609a:	e17a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80060a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
	break;
 80060ac:	e171      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b4:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 80060b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
	break;
 80060be:	e168      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060c6:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 80060ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
	break;
 80060d0:	e15f      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	e158      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80060e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	break;
 80060ec:	e151      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 80060f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
	break;
 80060fa:	e14a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8006102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
	break;
 8006108:	e143      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8006110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	break;
 8006116:	e13c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800611e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	break;
 8006124:	e135      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800612c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
	break;
 8006132:	e12e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800613e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
	break;
 8006144:	e125      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 800614c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
	break;
 8006152:	e11e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 800615a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
	break;
 8006160:	e117      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 8006168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]
	break;
 800616e:	e110      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 8006176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	break;
 800617c:	e109      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 8006184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
	break;
 800618a:	e102      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 8006192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
	break;
 8006198:	e0fb      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 80061a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
	break;
 80061a6:	e0f4      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 80061ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
	break;
 80061b4:	e0ed      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 80061bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
	break;
 80061c2:	e0e6      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 80061ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
	break;
 80061d0:	e0df      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 80061d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
	break;
 80061de:	e0d8      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 80061e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
	break;
 80061ec:	e0d1      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 80061f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
	break;
 80061fa:	e0ca      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 8006202:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
	break;
 8006208:	e0c3      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 8006210:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
	break;
 8006216:	e0bc      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 800621e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
	break;
 8006224:	e0b5      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 800622c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
	break;
 8006232:	e0ae      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 800623a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
	break;
 8006240:	e0a7      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 8006248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
	break;
 800624e:	e0a0      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 8006256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
	break;
 800625c:	e099      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 8006264:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	601a      	str	r2, [r3, #0]
	break;
 800626a:	e092      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 8006272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
	break;
 8006278:	e08b      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 8006280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	break;
 8006286:	e084      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 800628e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	break;
 8006294:	e07d      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 800629c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	break;
 80062a2:	e076      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 80062aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
	break;
 80062b0:	e06f      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 80062b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
	break;
 80062be:	e068      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 80062c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
	break;
 80062cc:	e061      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 80062d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
	break;
 80062da:	e05a      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 80062e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
	break;
 80062e8:	e053      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 80062f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
	break;
 80062f6:	e04c      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 80062fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
	break;
 8006304:	e045      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 800630c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
	break;
 8006312:	e03e      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 800631a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
	break;
 8006320:	e037      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8006328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
	break;
 800632e:	e030      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 8006336:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
	break;
 800633c:	e029      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 8006344:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	break;
 800634a:	e022      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 8006352:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
	break;
 8006358:	e01b      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 8006360:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
	break;
 8006366:	e014      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 800636e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
	break;
 8006374:	e00d      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 800637c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
	break;
 8006382:	e006      	b.n	8006392 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800638a:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 800638c:	23fc      	movs	r3, #252	@ 0xfc
 800638e:	77fb      	strb	r3, [r7, #31]
	break;
 8006390:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006392:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3724      	adds	r7, #36	@ 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop

080063a4 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3318      	adds	r3, #24
 80063b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80063c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3318      	adds	r3, #24
 80063e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80063f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3318      	adds	r3, #24
 8006410:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 800641e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3318      	adds	r3, #24
 800643e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 800644c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3318      	adds	r3, #24
 800646c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 800647a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3318      	adds	r3, #24
 800649a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 80064a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2208      	movs	r2, #8
 80064c8:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	220b      	movs	r2, #11
 80064ce:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064d6:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80064de:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80064e6:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80064ee:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80064f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2212      	movs	r2, #18
 8006516:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	220f      	movs	r2, #15
 800651c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800652a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220c      	movs	r2, #12
 8006530:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	895b      	ldrh	r3, [r3, #10]
 8006554:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	895b      	ldrh	r3, [r3, #10]
 8006572:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2200      	movs	r2, #0
 8006596:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10d      	bne.n	80065c2 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d108      	bne.n	80065c2 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	741a      	strb	r2, [r3, #16]
 80065c0:	e002      	b.n	80065c8 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80065c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d114      	bne.n	80065fa <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d110      	bne.n	80065fa <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	7d9b      	ldrb	r3, [r3, #22]
 80065ec:	f001 ff94 	bl	8008518 <VL53LX_calc_range_ignore_threshold>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	831a      	strh	r2, [r3, #24]
 80065f8:	e002      	b.n	8006600 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2200      	movs	r2, #0
 80065fe:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 8006606:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2232      	movs	r2, #50	@ 0x32
 800660c:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006614:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	228c      	movs	r2, #140	@ 0x8c
 800661a:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800661c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800663a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006642:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2207      	movs	r2, #7
 8006648:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006650:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006658:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8006660:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2246      	movs	r2, #70	@ 0x46
 8006666:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800666e:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	228c      	movs	r2, #140	@ 0x8c
 8006674:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006676:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006698:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80066a0:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80066a8:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80066b0:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2208      	movs	r2, #8
 80066b6:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2228      	movs	r2, #40	@ 0x28
 80066bc:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2209      	movs	r2, #9
 80066c2:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80066c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80066e6:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80066ee:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066f6:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80066fe:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2210      	movs	r2, #16
 8006704:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2208      	movs	r2, #8
 800670a:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800670c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2204      	movs	r2, #4
 8006730:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2201      	movs	r2, #1
 800673c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2202      	movs	r2, #2
 8006742:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2201      	movs	r2, #1
 8006748:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2250      	movs	r2, #80	@ 0x50
 800674e:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2264      	movs	r2, #100	@ 0x64
 8006754:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f241 023d 	movw	r2, #4157	@ 0x103d
 800675c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2210      	movs	r2, #16
 8006762:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2232      	movs	r2, #50	@ 0x32
 8006768:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2264      	movs	r2, #100	@ 0x64
 800676e:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2201      	movs	r2, #1
 8006774:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	22b4      	movs	r2, #180	@ 0xb4
 800677a:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8006788:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2288      	movs	r2, #136	@ 0x88
 8006796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2208      	movs	r2, #8
 800679e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b0:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2200      	movs	r2, #0
 80067b6:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	79fa      	ldrb	r2, [r7, #7]
 80067bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 80067c6:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2232      	movs	r2, #50	@ 0x32
 80067cc:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067d4:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	228c      	movs	r2, #140	@ 0x8c
 80067da:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2250      	movs	r2, #80	@ 0x50
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2232      	movs	r2, #50	@ 0x32
 80067e8:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	221e      	movs	r2, #30
 800680a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	220e      	movs	r2, #14
 8006810:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8006818:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	220e      	movs	r2, #14
 800681e:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	220a      	movs	r2, #10
 8006824:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2206      	movs	r2, #6
 800682a:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	220e      	movs	r2, #14
 8006830:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	220a      	movs	r2, #10
 8006836:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2206      	movs	r2, #6
 800683c:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2209      	movs	r2, #9
 8006842:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2205      	movs	r2, #5
 8006848:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2203      	movs	r2, #3
 800684e:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2206      	movs	r2, #6
 8006854:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2206      	movs	r2, #6
 800685a:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2206      	movs	r2, #6
 8006860:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2221      	movs	r2, #33	@ 0x21
 800686c:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	223c      	movs	r2, #60	@ 0x3c
 800687e:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	223c      	movs	r2, #60	@ 0x3c
 8006884:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	223c      	movs	r2, #60	@ 0x3c
 800688a:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2280      	movs	r2, #128	@ 0x80
 8006890:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2280      	movs	r2, #128	@ 0x80
 8006896:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2280      	movs	r2, #128	@ 0x80
 800689c:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2208      	movs	r2, #8
 80068a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2210      	movs	r2, #16
 80068aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2202      	movs	r2, #2
 80068ba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80068e4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f640 22be 	movw	r2, #2750	@ 0xabe
 80068ee:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	22fa      	movs	r2, #250	@ 0xfa
 80068f6:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006900:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800690a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006914:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800691e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006928:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006932:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	22c8      	movs	r2, #200	@ 0xc8
 800693a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f640 1238 	movw	r2, #2360	@ 0x938
 8006944:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f640 1247 	movw	r2, #2375	@ 0x947
 8006956:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f640 4235 	movw	r2, #3125	@ 0xc35
 8006960:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f241 2270 	movw	r2, #4720	@ 0x1270
 800696a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8006974:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f241 228e 	movw	r2, #4750	@ 0x128e
 800697e:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8006988:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	22fa      	movs	r2, #250	@ 0xfa
 80069a0:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80069aa:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 80069b4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f241 1294 	movw	r2, #4500	@ 0x1194
 80069be:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f64f 7238 	movw	r2, #65336	@ 0xff38
 80069c8:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22c8      	movs	r2, #200	@ 0xc8
 80069d0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f640 720a 	movw	r2, #3850	@ 0xf0a
 80069fa:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8006a04:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006a0e:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a50:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a58:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006a60:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a68:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a70:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a78:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a80:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a90:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006a98:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8006aa0:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aa8:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ab0:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ac0:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ac8:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006ad0:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ad8:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ae0:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006ae8:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006af6:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8006afe:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2206      	movs	r2, #6
 8006b1e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006b44:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2238      	movs	r2, #56	@ 0x38
 8006b4a:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2270      	movs	r2, #112	@ 0x70
 8006b56:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2264      	movs	r2, #100	@ 0x64
 8006b62:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b6a:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	220f      	movs	r2, #15
 8006b70:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2234      	movs	r2, #52	@ 0x34
 8006b76:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	22c8      	movs	r2, #200	@ 0xc8
 8006b7c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006b84:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006b8c:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bb6:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2211      	movs	r2, #17
 8006bf8:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	22ff      	movs	r2, #255	@ 0xff
 8006c52:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	220b      	movs	r2, #11
 8006c8c:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	220d      	movs	r2, #13
 8006ca0:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8006cc8:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2238      	movs	r2, #56	@ 0x38
 8006cd4:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	22ff      	movs	r2, #255	@ 0xff
 8006cda:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	221a      	movs	r2, #26
 8006cec:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	22cc      	movs	r2, #204	@ 0xcc
 8006d04:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	220b      	movs	r2, #11
 8006d0a:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	22f5      	movs	r2, #245	@ 0xf5
 8006d16:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2209      	movs	r2, #9
 8006d1c:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2208      	movs	r2, #8
 8006d32:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2278      	movs	r2, #120	@ 0x78
 8006d38:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2221      	movs	r2, #33	@ 0x21
 8006d50:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2243      	movs	r2, #67	@ 0x43
 8006d56:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2232      	movs	r2, #50	@ 0x32
 8006d62:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2254      	movs	r2, #84	@ 0x54
 8006d68:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2221      	movs	r2, #33	@ 0x21
 8006d74:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2243      	movs	r2, #67	@ 0x43
 8006d7a:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2210      	movs	r2, #16
 8006d80:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2202      	movs	r2, #2
 8006d86:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2243      	movs	r2, #67	@ 0x43
 8006d8c:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2205      	movs	r2, #5
 8006d92:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2207      	movs	r2, #7
 8006d9e:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2221      	movs	r2, #33	@ 0x21
 8006da4:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2243      	movs	r2, #67	@ 0x43
 8006daa:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2210      	movs	r2, #16
 8006db0:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2232      	movs	r2, #50	@ 0x32
 8006db6:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2254      	movs	r2, #84	@ 0x54
 8006dbc:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006dc4:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006dcc:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	2205      	movs	r2, #5
 8006dd8:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	2200      	movs	r2, #0
 8006dde:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	220f      	movs	r2, #15
 8006de4:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	220f      	movs	r2, #15
 8006dea:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dee:	2208      	movs	r2, #8
 8006df0:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	2208      	movs	r2, #8
 8006df6:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2200      	movs	r2, #0
 8006e02:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	2200      	movs	r2, #0
 8006e08:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e12:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	220b      	movs	r2, #11
 8006e1e:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2209      	movs	r2, #9
 8006e24:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e48:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	22c7      	movs	r2, #199	@ 0xc7
 8006e54:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	22ff      	movs	r2, #255	@ 0xff
 8006e5a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	22db      	movs	r2, #219	@ 0xdb
 8006e60:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	2202      	movs	r2, #2
 8006e66:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	2201      	movs	r2, #1
 8006e72:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	2201      	movs	r2, #1
 8006e78:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	2221      	movs	r2, #33	@ 0x21
 8006e7e:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b090      	sub	sp, #64	@ 0x40
 8006e94:	af0a      	add	r7, sp, #40	@ 0x28
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	68b8      	ldr	r0, [r7, #8]
 8006eba:	f7ff fe70 	bl	8006b9e <VL53LX_preset_mode_standard_ranging>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d171      	bne.n	8006fae <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006ed0:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	9308      	str	r3, [sp, #32]
 8006ed6:	2305      	movs	r3, #5
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	2304      	movs	r3, #4
 8006edc:	9306      	str	r3, [sp, #24]
 8006ede:	2303      	movs	r3, #3
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9302      	str	r3, [sp, #8]
 8006eee:	2304      	movs	r3, #4
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	2201      	movs	r2, #1
 8006efa:	2100      	movs	r1, #0
 8006efc:	2007      	movs	r0, #7
 8006efe:	f000 ff9f 	bl	8007e40 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	3302      	adds	r3, #2
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	2305      	movs	r3, #5
 8006f0a:	9307      	str	r3, [sp, #28]
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	9306      	str	r3, [sp, #24]
 8006f10:	2303      	movs	r3, #3
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	2302      	movs	r3, #2
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	2301      	movs	r3, #1
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	2304      	movs	r3, #4
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	2303      	movs	r3, #3
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2302      	movs	r3, #2
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2007      	movs	r0, #7
 8006f30:	f001 f816 	bl	8007f60 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	2209      	movs	r2, #9
 8006f38:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	220b      	movs	r2, #11
 8006f3e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	2209      	movs	r2, #9
 8006f44:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	220b      	movs	r2, #11
 8006f4a:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2220      	movs	r2, #32
 8006f56:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	221a      	movs	r2, #26
 8006f62:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	2200      	movs	r2, #0
 8006f68:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	2228      	movs	r2, #40	@ 0x28
 8006f6e:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2200      	movs	r2, #0
 8006f74:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	2221      	movs	r2, #33	@ 0x21
 8006f7a:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	22f5      	movs	r2, #245	@ 0xf5
 8006f80:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2208      	movs	r2, #8
 8006f86:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2288      	movs	r2, #136	@ 0x88
 8006f8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f9e6 	bl	800736e <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	229b      	movs	r2, #155	@ 0x9b
 8006fa6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2226      	movs	r2, #38	@ 0x26
 8006fac:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b090      	sub	sp, #64	@ 0x40
 8006fbe:	af0a      	add	r7, sp, #40	@ 0x28
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	9303      	str	r3, [sp, #12]
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	9302      	str	r3, [sp, #8]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff ff52 	bl	8006e90 <VL53LX_preset_mode_histogram_ranging>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d178      	bne.n	80070ea <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	9308      	str	r3, [sp, #32]
 8006ffc:	2305      	movs	r3, #5
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	2304      	movs	r3, #4
 8007002:	9306      	str	r3, [sp, #24]
 8007004:	2303      	movs	r3, #3
 8007006:	9305      	str	r3, [sp, #20]
 8007008:	2302      	movs	r3, #2
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	2301      	movs	r3, #1
 800700e:	9303      	str	r3, [sp, #12]
 8007010:	2300      	movs	r3, #0
 8007012:	9302      	str	r3, [sp, #8]
 8007014:	2304      	movs	r3, #4
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	2303      	movs	r3, #3
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2302      	movs	r3, #2
 800701e:	2201      	movs	r2, #1
 8007020:	2100      	movs	r1, #0
 8007022:	2007      	movs	r0, #7
 8007024:	f000 ff0c 	bl	8007e40 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	3302      	adds	r3, #2
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	2305      	movs	r3, #5
 8007030:	9307      	str	r3, [sp, #28]
 8007032:	2304      	movs	r3, #4
 8007034:	9306      	str	r3, [sp, #24]
 8007036:	2303      	movs	r3, #3
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	2302      	movs	r3, #2
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	2301      	movs	r3, #1
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	2300      	movs	r3, #0
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	2304      	movs	r3, #4
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	2303      	movs	r3, #3
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2302      	movs	r3, #2
 8007050:	2201      	movs	r2, #1
 8007052:	2100      	movs	r1, #0
 8007054:	2007      	movs	r0, #7
 8007056:	f000 ff83 	bl	8007f60 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f982 	bl	800736e <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2209      	movs	r2, #9
 800706e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	220b      	movs	r2, #11
 8007074:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2221      	movs	r2, #33	@ 0x21
 8007080:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	2200      	movs	r2, #0
 8007086:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	221b      	movs	r2, #27
 800708c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	2200      	movs	r2, #0
 8007092:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2229      	movs	r2, #41	@ 0x29
 8007098:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2200      	movs	r2, #0
 800709e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	2222      	movs	r2, #34	@ 0x22
 80070a4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2209      	movs	r2, #9
 80070aa:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	22f5      	movs	r2, #245	@ 0xf5
 80070b0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	2209      	movs	r2, #9
 80070b6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	220b      	movs	r2, #11
 80070bc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2208      	movs	r2, #8
 80070d2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2288      	movs	r2, #136	@ 0x88
 80070da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	229b      	movs	r2, #155	@ 0x9b
 80070e2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	2226      	movs	r2, #38	@ 0x26
 80070e8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80070ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b090      	sub	sp, #64	@ 0x40
 80070fa:	af0a      	add	r7, sp, #40	@ 0x28
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	9302      	str	r3, [sp, #8]
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff feb4 	bl	8006e90 <VL53LX_preset_mode_histogram_ranging>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800712c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d178      	bne.n	8007226 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	2303      	movs	r3, #3
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	2302      	movs	r3, #2
 800713e:	9306      	str	r3, [sp, #24]
 8007140:	2301      	movs	r3, #1
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	2302      	movs	r3, #2
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	2301      	movs	r3, #1
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	2300      	movs	r3, #0
 800714e:	9302      	str	r3, [sp, #8]
 8007150:	2302      	movs	r3, #2
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	2302      	movs	r3, #2
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	2301      	movs	r3, #1
 800715a:	2201      	movs	r2, #1
 800715c:	2100      	movs	r1, #0
 800715e:	2007      	movs	r0, #7
 8007160:	f000 fe6e 	bl	8007e40 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	3302      	adds	r3, #2
 8007168:	9308      	str	r3, [sp, #32]
 800716a:	2303      	movs	r3, #3
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	2302      	movs	r3, #2
 8007170:	9306      	str	r3, [sp, #24]
 8007172:	2301      	movs	r3, #1
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	2302      	movs	r3, #2
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	2301      	movs	r3, #1
 800717c:	9303      	str	r3, [sp, #12]
 800717e:	2300      	movs	r3, #0
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	2302      	movs	r3, #2
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	2302      	movs	r3, #2
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2301      	movs	r3, #1
 800718c:	2201      	movs	r2, #1
 800718e:	2100      	movs	r1, #0
 8007190:	2007      	movs	r0, #7
 8007192:	f000 fee5 	bl	8007f60 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8e4 	bl	800736e <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	2205      	movs	r2, #5
 80071aa:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2207      	movs	r2, #7
 80071b0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2236      	movs	r2, #54	@ 0x36
 80071bc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	2200      	movs	r2, #0
 80071c2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	2228      	movs	r2, #40	@ 0x28
 80071c8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	2200      	movs	r2, #0
 80071ce:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	2244      	movs	r2, #68	@ 0x44
 80071d4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2200      	movs	r2, #0
 80071da:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	2233      	movs	r2, #51	@ 0x33
 80071e0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2205      	movs	r2, #5
 80071e6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	22f5      	movs	r2, #245	@ 0xf5
 80071ec:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	2205      	movs	r2, #5
 80071f2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	2207      	movs	r2, #7
 80071f8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80071fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fc:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007204:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2208      	movs	r2, #8
 800720e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2248      	movs	r2, #72	@ 0x48
 8007216:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	229b      	movs	r2, #155	@ 0x9b
 800721e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	2226      	movs	r2, #38	@ 0x26
 8007224:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b090      	sub	sp, #64	@ 0x40
 8007236:	af0a      	add	r7, sp, #40	@ 0x28
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	9303      	str	r3, [sp, #12]
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff fe16 	bl	8006e90 <VL53LX_preset_mode_histogram_ranging>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d178      	bne.n	8007362 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	9308      	str	r3, [sp, #32]
 8007274:	2302      	movs	r3, #2
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	2302      	movs	r3, #2
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	2301      	movs	r3, #1
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	2301      	movs	r3, #1
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	2301      	movs	r3, #1
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	2300      	movs	r3, #0
 800728a:	9302      	str	r3, [sp, #8]
 800728c:	2301      	movs	r3, #1
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	2301      	movs	r3, #1
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2301      	movs	r3, #1
 8007296:	2200      	movs	r2, #0
 8007298:	2107      	movs	r1, #7
 800729a:	2007      	movs	r0, #7
 800729c:	f000 fdd0 	bl	8007e40 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	3302      	adds	r3, #2
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	2302      	movs	r3, #2
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	2302      	movs	r3, #2
 80072ac:	9306      	str	r3, [sp, #24]
 80072ae:	2301      	movs	r3, #1
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	2301      	movs	r3, #1
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	2301      	movs	r3, #1
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	2300      	movs	r3, #0
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	2301      	movs	r3, #1
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	2301      	movs	r3, #1
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	2301      	movs	r3, #1
 80072c8:	2200      	movs	r2, #0
 80072ca:	2107      	movs	r1, #7
 80072cc:	2007      	movs	r0, #7
 80072ce:	f000 fe47 	bl	8007f60 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f846 	bl	800736e <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	2203      	movs	r2, #3
 80072e6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2205      	movs	r2, #5
 80072ec:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2252      	movs	r2, #82	@ 0x52
 80072f8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2200      	movs	r2, #0
 80072fe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2237      	movs	r2, #55	@ 0x37
 8007304:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	2200      	movs	r2, #0
 800730a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2266      	movs	r2, #102	@ 0x66
 8007310:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	2200      	movs	r2, #0
 8007316:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	2244      	movs	r2, #68	@ 0x44
 800731c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2203      	movs	r2, #3
 8007322:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	22f5      	movs	r2, #245	@ 0xf5
 8007328:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	2203      	movs	r2, #3
 800732e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	2205      	movs	r2, #5
 8007334:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2208      	movs	r2, #8
 800734a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2228      	movs	r2, #40	@ 0x28
 8007352:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	22bb      	movs	r2, #187	@ 0xbb
 800735a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	2226      	movs	r2, #38	@ 0x26
 8007360:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	7a12      	ldrb	r2, [r2, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	7892      	ldrb	r2, [r2, #2]
 80073fc:	4413      	add	r3, r2
 80073fe:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	7912      	ldrb	r2, [r2, #4]
 8007410:	4413      	add	r3, r2
 8007412:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	7a12      	ldrb	r2, [r2, #8]
 8007494:	4413      	add	r3, r2
 8007496:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	7892      	ldrb	r2, [r2, #2]
 80074d0:	4413      	add	r3, r2
 80074d2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	7912      	ldrb	r2, [r2, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3318      	adds	r3, #24
 8007514:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3318      	adds	r3, #24
 8007550:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	332c      	adds	r3, #44	@ 0x2c
 8007556:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2202      	movs	r2, #2
 8007568:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2202      	movs	r2, #2
 8007586:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	735a      	strb	r2, [r3, #13]

}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3318      	adds	r3, #24
 80075b0:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	332c      	adds	r3, #44	@ 0x2c
 80075b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80075be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d115      	bne.n	80075f2 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2203      	movs	r2, #3
 80075ca:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2202      	movs	r2, #2
 80075e2:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	735a      	strb	r2, [r3, #13]
 80075f0:	e0be      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	7a1b      	ldrb	r3, [r3, #8]
 80075f6:	2bff      	cmp	r3, #255	@ 0xff
 80075f8:	d103      	bne.n	8007602 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2280      	movs	r2, #128	@ 0x80
 80075fe:	721a      	strb	r2, [r3, #8]
 8007600:	e005      	b.n	800760e <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	7a1b      	ldrb	r3, [r3, #8]
 8007606:	3301      	adds	r3, #1
 8007608:	b2da      	uxtb	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	7a19      	ldrb	r1, [r3, #8]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f103 0209 	add.w	r2, r3, #9
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	330a      	adds	r3, #10
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 fdba 	bl	800a196 <VL53LX_update_internal_stream_counters>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	7adb      	ldrb	r3, [r3, #11]
 800762a:	f083 0302 	eor.w	r3, r3, #2
 800762e:	b2da      	uxtb	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	79db      	ldrb	r3, [r3, #7]
 8007638:	3b03      	subs	r3, #3
 800763a:	2b05      	cmp	r3, #5
 800763c:	f200 8082 	bhi.w	8007744 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007661 	.word	0x08007661
 800764c:	08007745 	.word	0x08007745
 8007650:	08007745 	.word	0x08007745
 8007654:	080076b3 	.word	0x080076b3
 8007658:	080076e9 	.word	0x080076e9
 800765c:	08007713 	.word	0x08007713

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	dd03      	ble.n	8007676 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2206      	movs	r2, #6
 8007672:	71da      	strb	r2, [r3, #7]
 8007674:	e00d      	b.n	8007692 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8007680:	429a      	cmp	r2, r3
 8007682:	d303      	bcc.n	800768c <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2208      	movs	r2, #8
 8007688:	71da      	strb	r2, [r3, #7]
 800768a:	e002      	b.n	8007692 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2207      	movs	r2, #7
 8007690:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	735a      	strb	r2, [r3, #13]

			break;
 80076b0:	e05e      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d303      	bcc.n	80076e0 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2208      	movs	r2, #8
 80076dc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80076de:	e047      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2207      	movs	r2, #7
 80076e4:	71da      	strb	r2, [r3, #7]
			break;
 80076e6:	e043      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	7b5b      	ldrb	r3, [r3, #13]
 80076ec:	3301      	adds	r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80076fe:	429a      	cmp	r2, r3
 8007700:	d303      	bcc.n	800770a <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2208      	movs	r2, #8
 8007706:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007708:	e032      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2207      	movs	r2, #7
 800770e:	71da      	strb	r2, [r3, #7]
			break;
 8007710:	e02e      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	7b1b      	ldrb	r3, [r3, #12]
 800771c:	f083 0301 	eor.w	r3, r3, #1
 8007720:	b2da      	uxtb	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007730:	429a      	cmp	r2, r3
 8007732:	d303      	bcc.n	800773c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2208      	movs	r2, #8
 8007738:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800773a:	e019      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2207      	movs	r2, #7
 8007740:	71da      	strb	r2, [r3, #7]
			break;
 8007742:	e015      	b.n	8007770 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2203      	movs	r2, #3
 8007748:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	735a      	strb	r2, [r3, #13]
			break;
 800776e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800777c:	b480      	push	{r7}
 800777e:	b08d      	sub	sp, #52	@ 0x34
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3318      	adds	r3, #24
 800778e:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007796:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	332c      	adds	r3, #44	@ 0x2c
 800779c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	f203 3366 	addw	r3, r3, #870	@ 0x366
 80077a4:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80077ac:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80077b4:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80077e6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bf14      	ite	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	2300      	moveq	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80077f4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80077fa:	111b      	asrs	r3, r3, #4
 80077fc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 8007806:	7c7b      	ldrb	r3, [r7, #17]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007812:	111b      	asrs	r3, r3, #4
 8007814:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04e      	beq.n	80078ca <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	79db      	ldrb	r3, [r3, #7]
 8007830:	2b06      	cmp	r3, #6
 8007832:	d109      	bne.n	8007848 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007834:	7c7b      	ldrb	r3, [r7, #17]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d14a      	bne.n	80078d0 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800783a:	7cfb      	ldrb	r3, [r7, #19]
 800783c:	2b12      	cmp	r3, #18
 800783e:	d047      	beq.n	80078d0 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007840:	23ef      	movs	r3, #239	@ 0xef
 8007842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007846:	e043      	b.n	80078d0 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	7a1b      	ldrb	r3, [r3, #8]
 800784c:	7cba      	ldrb	r2, [r7, #18]
 800784e:	429a      	cmp	r2, r3
 8007850:	d002      	beq.n	8007858 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007852:	23ee      	movs	r3, #238	@ 0xee
 8007854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	7adb      	ldrb	r3, [r3, #11]
 800785c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007860:	429a      	cmp	r2, r3
 8007862:	d002      	beq.n	800786a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007864:	23ed      	movs	r3, #237	@ 0xed
 8007866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	7b5b      	ldrb	r3, [r3, #13]
 800786e:	4619      	mov	r1, r3
		expected_stream_count =
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	460b      	mov	r3, r1
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	4413      	add	r3, r2
 800787c:	3302      	adds	r3, #2
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	7b5b      	ldrb	r3, [r3, #13]
 8007886:	4619      	mov	r1, r3
		expected_gph_id =
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	460b      	mov	r3, r1
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	3303      	adds	r3, #3
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800789a:	7c3a      	ldrb	r2, [r7, #16]
 800789c:	7cbb      	ldrb	r3, [r7, #18]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d00a      	beq.n	80078b8 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <VL53LX_check_ll_driver_rd_state+0x136>
 80078ac:	7cbb      	ldrb	r3, [r7, #18]
 80078ae:	2bff      	cmp	r3, #255	@ 0xff
 80078b0:	d002      	beq.n	80078b8 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 80078b2:	23ec      	movs	r3, #236	@ 0xec
 80078b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 80078b8:	7bfa      	ldrb	r2, [r7, #15]
 80078ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078be:	429a      	cmp	r2, r3
 80078c0:	d005      	beq.n	80078ce <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80078c2:	23eb      	movs	r3, #235	@ 0xeb
 80078c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80078c8:	e002      	b.n	80078d0 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 80078ce:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80078d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3734      	adds	r7, #52	@ 0x34
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3318      	adds	r3, #24
 80078f0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80078f8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	332c      	adds	r3, #44	@ 0x2c
 80078fe:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007906:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800790e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d11b      	bne.n	800794e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2203      	movs	r2, #3
 800791a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2200      	movs	r2, #0
 8007920:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2200      	movs	r2, #0
 8007926:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2202      	movs	r2, #2
 8007932:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2200      	movs	r2, #0
 8007938:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2200      	movs	r2, #0
 800793e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	773b      	strb	r3, [r7, #28]
 800794c:	e0b1      	b.n	8007ab2 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	799b      	ldrb	r3, [r3, #6]
 8007958:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2bff      	cmp	r3, #255	@ 0xff
 8007966:	d103      	bne.n	8007970 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2280      	movs	r2, #128	@ 0x80
 800796c:	705a      	strb	r2, [r3, #1]
 800796e:	e005      	b.n	800797c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	3301      	adds	r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	7859      	ldrb	r1, [r3, #1]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1c9a      	adds	r2, r3, #2
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	3303      	adds	r3, #3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 fc04 	bl	800a196 <VL53LX_update_internal_stream_counters>
 800798e:	4603      	mov	r3, r0
 8007990:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	f083 0302 	eor.w	r3, r3, #2
 800799a:	b2da      	uxtb	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	d053      	beq.n	8007a50 <VL53LX_update_ll_driver_cfg_state+0x170>
 80079a8:	2b05      	cmp	r3, #5
 80079aa:	dc69      	bgt.n	8007a80 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d002      	beq.n	80079b6 <VL53LX_update_ll_driver_cfg_state+0xd6>
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d02d      	beq.n	8007a10 <VL53LX_update_ll_driver_cfg_state+0x130>
 80079b4:	e064      	b.n	8007a80 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	2201      	movs	r2, #1
 80079ba:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d909      	bls.n	80079de <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2200      	movs	r2, #0
 80079ce:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	795b      	ldrb	r3, [r3, #5]
 80079d4:	f083 0301 	eor.w	r3, r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2201      	movs	r2, #1
 80079e2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2201      	movs	r2, #1
 80079f2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2200      	movs	r2, #0
 80079f8:	70da      	strb	r2, [r3, #3]
 80079fa:	e005      	b.n	8007a08 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2200      	movs	r2, #0
 8007a00:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2201      	movs	r2, #1
 8007a06:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007a0e:	e050      	b.n	8007ab2 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	799b      	ldrb	r3, [r3, #6]
 8007a14:	3301      	adds	r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d940      	bls.n	8007aac <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	795b      	ldrb	r3, [r3, #5]
 8007a34:	f083 0301 	eor.w	r3, r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d031      	beq.n	8007aac <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007a4e:	e02d      	b.n	8007aac <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	799b      	ldrb	r3, [r3, #6]
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d922      	bls.n	8007ab0 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	795b      	ldrb	r3, [r3, #5]
 8007a74:	f083 0301 	eor.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007a7e:	e017      	b.n	8007ab0 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2203      	movs	r2, #3
 8007a84:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2200      	movs	r2, #0
 8007a96:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	719a      	strb	r2, [r3, #6]
			break;
 8007aaa:	e002      	b.n	8007ab2 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007ab0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d11d      	bne.n	8007af8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007abc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007abe:	7f3b      	ldrb	r3, [r7, #28]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b2d8      	uxtb	r0, r3
 8007ac4:	68f9      	ldr	r1, [r7, #12]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	440b      	add	r3, r1
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	7b5b      	ldrb	r3, [r3, #13]
 8007ada:	4619      	mov	r1, r3
 8007adc:	7f7b      	ldrb	r3, [r7, #29]
 8007ade:	f083 0302 	eor.w	r3, r3, #2
 8007ae2:	b2d8      	uxtb	r0, r3
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	4413      	add	r3, r2
 8007af0:	3303      	adds	r3, #3
 8007af2:	4602      	mov	r2, r0
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e013      	b.n	8007b20 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007af8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	440b      	add	r3, r1
 8007b06:	3302      	adds	r3, #2
 8007b08:	7f3a      	ldrb	r2, [r7, #28]
 8007b0a:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007b0c:	7fba      	ldrb	r2, [r7, #30]
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	440b      	add	r3, r1
 8007b1a:	3303      	adds	r3, #3
 8007b1c:	7f7a      	ldrb	r2, [r7, #29]
 8007b1e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007b20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7c1a      	ldrb	r2, [r3, #16]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	7c52      	ldrb	r2, [r2, #17]
 8007b46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c92      	ldrb	r2, [r2, #18]
 8007b50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	3303      	adds	r3, #3
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	7cd2      	ldrb	r2, [r2, #19]
 8007b5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7d12      	ldrb	r2, [r2, #20]
 8007b64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	3305      	adds	r3, #5
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	7d52      	ldrb	r2, [r2, #21]
 8007b6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	3306      	adds	r3, #6
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7d92      	ldrb	r2, [r2, #22]
 8007b78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	7dd2      	ldrb	r2, [r2, #23]
 8007b82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7e12      	ldrb	r2, [r2, #24]
 8007b8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	3309      	adds	r3, #9
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	7e52      	ldrb	r2, [r2, #25]
 8007b96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	330a      	adds	r3, #10
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7e92      	ldrb	r2, [r2, #26]
 8007ba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	330b      	adds	r3, #11
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	7ed2      	ldrb	r2, [r2, #27]
 8007baa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7f12      	ldrb	r2, [r2, #28]
 8007bb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	330d      	adds	r3, #13
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	7f52      	ldrb	r2, [r2, #29]
 8007bbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	330e      	adds	r3, #14
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7f92      	ldrb	r2, [r2, #30]
 8007bc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	330f      	adds	r3, #15
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	7fd2      	ldrb	r2, [r2, #31]
 8007bd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007bde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	3311      	adds	r3, #17
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007bea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	3312      	adds	r3, #18
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007bf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3313      	adds	r3, #19
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007c02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3314      	adds	r3, #20
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	3315      	adds	r3, #21
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007c1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	3316      	adds	r3, #22
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007c26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	3317      	adds	r3, #23
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007c32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	3318      	adds	r3, #24
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007c3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3319      	adds	r3, #25
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007c4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	331a      	adds	r3, #26
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007c56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	331b      	adds	r3, #27
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007c62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	331c      	adds	r3, #28
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007c6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	331d      	adds	r3, #29
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007c7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	331e      	adds	r3, #30
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007c86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	331f      	adds	r3, #31
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007c92:	701a      	strb	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	22ff      	movs	r2, #255	@ 0xff
 8007cac:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	22ff      	movs	r2, #255	@ 0xff
 8007cb2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	22ff      	movs	r2, #255	@ 0xff
 8007cb8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	22ff      	movs	r2, #255	@ 0xff
 8007cbe:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cc6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cce:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cd6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cde:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ce6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cee:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cf6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cfe:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d06:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d0e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d16:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d1e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d26:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d2e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d36:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d3e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d46:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	22ff      	movs	r2, #255	@ 0xff
 8007d5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2205      	movs	r2, #5
 8007d80:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	79fa      	ldrb	r2, [r7, #7]
 8007d86:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e017      	b.n	8007dbe <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007d8e:	7bfa      	ldrb	r2, [r7, #15]
 8007d90:	4613      	mov	r3, r2
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2203      	movs	r2, #3
 8007da4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2203      	movs	r2, #3
 8007daa:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2204      	movs	r2, #4
 8007db0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2200      	movs	r2, #0
 8007db6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	7bfa      	ldrb	r2, [r7, #15]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d3e2      	bcc.n	8007d8e <V53L1_init_zone_results_structure+0x22>
	}
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b087      	sub	sp, #28
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007de4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007dea:	2305      	movs	r3, #5
 8007dec:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007df4:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
 8007dfa:	e016      	b.n	8007e2a <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007dfc:	7dfa      	ldrb	r2, [r7, #23]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	440b      	add	r3, r1
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007e10:	7dfa      	ldrb	r2, [r7, #23]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	440b      	add	r3, r1
 8007e1e:	3306      	adds	r3, #6
 8007e20:	2200      	movs	r2, #0
 8007e22:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	3301      	adds	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
 8007e2a:	7dfa      	ldrb	r2, [r7, #23]
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d3e4      	bcc.n	8007dfc <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	371c      	adds	r7, #28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007e40:	b490      	push	{r4, r7}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	71fb      	strb	r3, [r7, #7]
 8007e52:	4603      	mov	r3, r0
 8007e54:	71bb      	strb	r3, [r7, #6]
 8007e56:	460b      	mov	r3, r1
 8007e58:	717b      	strb	r3, [r7, #5]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007e5e:	79bb      	ldrb	r3, [r7, #6]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	4413      	add	r3, r2
 8007e68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007e6e:	793b      	ldrb	r3, [r7, #4]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	797b      	ldrb	r3, [r7, #5]
 8007e76:	4413      	add	r3, r2
 8007e78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007e7e:	7d3b      	ldrb	r3, [r7, #20]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	7c3b      	ldrb	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007e8e:	7f3b      	ldrb	r3, [r7, #28]
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	7e3b      	ldrb	r3, [r7, #24]
 8007e96:	4413      	add	r3, r2
 8007e98:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007eaa:	4413      	add	r3, r2
 8007eac:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007eb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ebe:	4413      	add	r3, r2
 8007ec0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007eec:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007efa:	4413      	add	r3, r2
 8007efc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007f08:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f46:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f4e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	2200      	movs	r2, #0
 8007f54:	701a      	strb	r2, [r3, #0]

}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc90      	pop	{r4, r7}
 8007f5e:	4770      	bx	lr

08007f60 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f60:	b490      	push	{r4, r7}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4623      	mov	r3, r4
 8007f70:	71fb      	strb	r3, [r7, #7]
 8007f72:	4603      	mov	r3, r0
 8007f74:	71bb      	strb	r3, [r7, #6]
 8007f76:	460b      	mov	r3, r1
 8007f78:	717b      	strb	r3, [r7, #5]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f7e:	79bb      	ldrb	r3, [r7, #6]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	4413      	add	r3, r2
 8007f88:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007f8e:	793b      	ldrb	r3, [r7, #4]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	797b      	ldrb	r3, [r7, #5]
 8007f96:	4413      	add	r3, r2
 8007f98:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007f9e:	7d3b      	ldrb	r3, [r7, #20]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	7c3b      	ldrb	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	789a      	ldrb	r2, [r3, #2]
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	78da      	ldrb	r2, [r3, #3]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	789a      	ldrb	r2, [r3, #2]
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	78da      	ldrb	r2, [r3, #3]
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	791a      	ldrb	r2, [r3, #4]
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007fec:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ffa:	4413      	add	r3, r2
 8007ffc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008008:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	2200      	movs	r2, #0
 800800e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008010:	7f3b      	ldrb	r3, [r7, #28]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	b2da      	uxtb	r2, r3
 8008016:	7e3b      	ldrb	r3, [r7, #24]
 8008018:	4413      	add	r3, r2
 800801a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008020:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	b2da      	uxtb	r2, r3
 8008028:	f897 3020 	ldrb.w	r3, [r7, #32]
 800802c:	4413      	add	r3, r2
 800802e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008034:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	b2da      	uxtb	r2, r3
 800803c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008040:	4413      	add	r3, r2
 8008042:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	7bda      	ldrb	r2, [r3, #15]
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	7c1a      	ldrb	r2, [r3, #16]
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	7c5a      	ldrb	r2, [r3, #17]
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008066:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800806e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bc90      	pop	{r4, r7}
 800807e:	4770      	bx	lr

08008080 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	460b      	mov	r3, r1
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	220c      	movs	r2, #12
 80080a8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80080e0:	2300      	movs	r3, #0
 80080e2:	82fb      	strh	r3, [r7, #22]
 80080e4:	e015      	b.n	8008112 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80080e6:	8afa      	ldrh	r2, [r7, #22]
 80080e8:	897b      	ldrh	r3, [r7, #10]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d207      	bcs.n	80080fe <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80080ee:	8afb      	ldrh	r3, [r7, #22]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	3302      	adds	r3, #2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	e006      	b.n	800810c <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80080fe:	8afb      	ldrh	r3, [r7, #22]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	3302      	adds	r3, #2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	2200      	movs	r2, #0
 800810a:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800810c:	8afb      	ldrh	r3, [r7, #22]
 800810e:	3301      	adds	r3, #1
 8008110:	82fb      	strh	r3, [r7, #22]
 8008112:	8afb      	ldrh	r3, [r7, #22]
 8008114:	2b0b      	cmp	r3, #11
 8008116:	d9e6      	bls.n	80080e6 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	4603      	mov	r3, r0
 800812e:	603a      	str	r2, [r7, #0]
 8008130:	80fb      	strh	r3, [r7, #6]
 8008132:	460b      	mov	r3, r1
 8008134:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008142:	2300      	movs	r3, #0
 8008144:	81fb      	strh	r3, [r7, #14]
 8008146:	e00e      	b.n	8008166 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008148:	88ba      	ldrh	r2, [r7, #4]
 800814a:	89fb      	ldrh	r3, [r7, #14]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	4413      	add	r3, r2
 8008154:	89ba      	ldrh	r2, [r7, #12]
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800815a:	89bb      	ldrh	r3, [r7, #12]
 800815c:	0a1b      	lsrs	r3, r3, #8
 800815e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008160:	89fb      	ldrh	r3, [r7, #14]
 8008162:	3301      	adds	r3, #1
 8008164:	81fb      	strh	r3, [r7, #14]
 8008166:	89fa      	ldrh	r2, [r7, #14]
 8008168:	88bb      	ldrh	r3, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3ec      	bcc.n	8008148 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008188:	2300      	movs	r3, #0
 800818a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800818c:	e00a      	b.n	80081a4 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800818e:	89fb      	ldrh	r3, [r7, #14]
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	b21a      	sxth	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b21b      	sxth	r3, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	b21b      	sxth	r3, r3
 80081a2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	1e5a      	subs	r2, r3, #1
 80081a8:	80fa      	strh	r2, [r7, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1ef      	bne.n	800818e <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80081ae:	89fb      	ldrh	r3, [r7, #14]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	603a      	str	r2, [r7, #0]
 80081c6:	80fb      	strh	r3, [r7, #6]
 80081c8:	460b      	mov	r3, r1
 80081ca:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80081d8:	2300      	movs	r3, #0
 80081da:	81fb      	strh	r3, [r7, #14]
 80081dc:	e00f      	b.n	80081fe <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80081de:	88ba      	ldrh	r2, [r7, #4]
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4413      	add	r3, r2
 80081ea:	89ba      	ldrh	r2, [r7, #12]
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80081f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80081f4:	121b      	asrs	r3, r3, #8
 80081f6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80081f8:	89fb      	ldrh	r3, [r7, #14]
 80081fa:	3301      	adds	r3, #1
 80081fc:	81fb      	strh	r3, [r7, #14]
 80081fe:	89fa      	ldrh	r2, [r7, #14]
 8008200:	88bb      	ldrh	r3, [r7, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d3eb      	bcc.n	80081de <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008220:	2300      	movs	r3, #0
 8008222:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b25b      	sxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0e      	bge.n	800824c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800822e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008232:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008234:	e00a      	b.n	800824c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	b21a      	sxth	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	1c59      	adds	r1, r3, #1
 8008242:	6039      	str	r1, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b21b      	sxth	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	1e5a      	subs	r2, r3, #1
 8008250:	80fa      	strh	r2, [r7, #6]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ef      	bne.n	8008236 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	460b      	mov	r3, r1
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	82fb      	strh	r3, [r7, #22]
 8008284:	e00e      	b.n	80082a4 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008286:	897a      	ldrh	r2, [r7, #10]
 8008288:	8afb      	ldrh	r3, [r7, #22]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800829e:	8afb      	ldrh	r3, [r7, #22]
 80082a0:	3301      	adds	r3, #1
 80082a2:	82fb      	strh	r3, [r7, #22]
 80082a4:	8afa      	ldrh	r2, [r7, #22]
 80082a6:	897b      	ldrh	r3, [r7, #10]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3ec      	bcc.n	8008286 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	4603      	mov	r3, r0
 80082c2:	6039      	str	r1, [r7, #0]
 80082c4:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80082ca:	e007      	b.n	80082dc <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	021a      	lsls	r2, r3, #8
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	1e5a      	subs	r2, r3, #1
 80082e0:	80fa      	strh	r2, [r7, #6]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f2      	bne.n	80082cc <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80082e6:	68fb      	ldr	r3, [r7, #12]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b25b      	sxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	da0b      	bge.n	8008326 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800830e:	f04f 33ff 	mov.w	r3, #4294967295
 8008312:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008314:	e007      	b.n	8008326 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	021a      	lsls	r2, r3, #8
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	1c59      	adds	r1, r3, #1
 800831e:	6039      	str	r1, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	1e5a      	subs	r2, r3, #1
 800832a:	80fa      	strh	r2, [r7, #6]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1f2      	bne.n	8008316 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008330:	68fb      	ldr	r3, [r7, #12]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800834e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d107      	bne.n	8008366 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	461a      	mov	r2, r3
 800835a:	2127      	movs	r1, #39	@ 0x27
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f009 f901 	bl	8011564 <VL53LX_WrByte>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3318      	adds	r3, #24
 8008386:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 8008396:	461a      	mov	r2, r3
 8008398:	2185      	movs	r1, #133	@ 0x85
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f009 f8e2 	bl	8011564 <VL53LX_WrByte>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80083a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80083bc:	2101      	movs	r1, #1
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff ffd7 	bl	8008372 <VL53LX_set_firmware_enable_register>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80083c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff ffc5 	bl	8008372 <VL53LX_set_firmware_enable_register>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80083ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3318      	adds	r3, #24
 800840c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 800841c:	461a      	mov	r2, r3
 800841e:	2183      	movs	r1, #131	@ 0x83
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f009 f89f 	bl	8011564 <VL53LX_WrByte>
 8008426:	4603      	mov	r3, r0
 8008428:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800842a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008442:	2101      	movs	r1, #1
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ffd7 	bl	80083f8 <VL53LX_set_powerforce_register>
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800844e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8008466:	2100      	movs	r1, #0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff ffc5 	bl	80083f8 <VL53LX_set_powerforce_register>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3318      	adds	r3, #24
 800848e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 800849e:	461a      	mov	r2, r3
 80084a0:	2186      	movs	r1, #134	@ 0x86
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f009 f85e 	bl	8011564 <VL53LX_WrByte>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80084ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	460a      	mov	r2, r1
 80084c2:	80fb      	strh	r3, [r7, #6]
 80084c4:	4613      	mov	r3, r2
 80084c6:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 ffcf 	bl	800b47a <VL53LX_calc_pll_period_us>
 80084dc:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80084de:	797b      	ldrb	r3, [r7, #5]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f003 fbbb 	bl	800bc5c <VL53LX_decode_vcsel_period>
 80084e6:	4603      	mov	r3, r0
 80084e8:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4613      	mov	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	099b      	lsrs	r3, r3, #6
 80084fa:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80084fc:	7cfa      	ldrb	r2, [r7, #19]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	099b      	lsrs	r3, r3, #6
 800850a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800850c:	68fb      	ldr	r3, [r7, #12]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	@ 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	4608      	mov	r0, r1
 8008522:	4611      	mov	r1, r2
 8008524:	461a      	mov	r2, r3
 8008526:	4603      	mov	r3, r0
 8008528:	817b      	strh	r3, [r7, #10]
 800852a:	460b      	mov	r3, r1
 800852c:	813b      	strh	r3, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	4a23      	ldr	r2, [pc, #140]	@ (80085d8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800854c:	fb82 1203 	smull	r1, r2, r2, r3
 8008550:	1192      	asrs	r2, r2, #6
 8008552:	17db      	asrs	r3, r3, #31
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da03      	bge.n	8008568 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008560:	897b      	ldrh	r3, [r7, #10]
 8008562:	425b      	negs	r3, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008568:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da03      	bge.n	8008578 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008570:	893b      	ldrh	r3, [r7, #8]
 8008572:	425b      	negs	r3, r3
 8008574:	b29b      	uxth	r3, r3
 8008576:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008578:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800857c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008580:	4413      	add	r3, r2
 8008582:	015b      	lsls	r3, r3, #5
 8008584:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4a13      	ldr	r2, [pc, #76]	@ (80085d8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800858a:	fb82 1203 	smull	r1, r2, r2, r3
 800858e:	1192      	asrs	r2, r2, #6
 8008590:	17db      	asrs	r3, r3, #31
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800859e:	79fa      	ldrb	r2, [r7, #7]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3310      	adds	r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da00      	bge.n	80085b2 <VL53LX_calc_range_ignore_threshold+0x9a>
 80085b0:	331f      	adds	r3, #31
 80085b2:	115b      	asrs	r3, r3, #5
 80085b4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085bc:	db03      	blt.n	80085c6 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80085be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085c2:	83fb      	strh	r3, [r7, #30]
 80085c4:	e001      	b.n	80085ca <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80085ca:	8bfb      	ldrh	r3, [r7, #30]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3724      	adds	r7, #36	@ 0x24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	10624dd3 	.word	0x10624dd3

080085dc <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e008      	b.n	8008608 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	031a      	lsls	r2, r3, #12
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	441a      	add	r2, r3
		timeout_mclks   =
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008608:	68fb      	ldr	r3, [r7, #12]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff ffd6 	bl	80085dc <VL53LX_calc_timeout_mclks>
 8008630:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f887 	bl	8008746 <VL53LX_encode_timeout>
 8008638:	4603      	mov	r3, r0
 800863a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800863c:	897b      	ldrh	r3, [r7, #10]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008646:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008652:	2100      	movs	r1, #0
 8008654:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8008656:	f04f 0000 	mov.w	r0, #0
 800865a:	f04f 0100 	mov.w	r1, #0
 800865e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	2000      	movs	r0, #0
 8008666:	4688      	mov	r8, r1
 8008668:	4681      	mov	r9, r0
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	2000      	movs	r0, #0
 800866e:	460c      	mov	r4, r1
 8008670:	4605      	mov	r5, r0
 8008672:	fb04 f009 	mul.w	r0, r4, r9
 8008676:	fb08 f105 	mul.w	r1, r8, r5
 800867a:	4401      	add	r1, r0
 800867c:	fba8 2304 	umull	r2, r3, r8, r4
 8008680:	4419      	add	r1, r3
 8008682:	460b      	mov	r3, r1
 8008684:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008688:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800868c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008690:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008694:	f143 0b00 	adc.w	fp, r3, #0
 8008698:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800869c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	0b02      	lsrs	r2, r0, #12
 80086aa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80086ae:	0b0b      	lsrs	r3, r1, #12
 80086b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 80086b8:	697b      	ldr	r3, [r7, #20]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80086c4:	4770      	bx	lr
	...

080086c8 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80086dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80086e0:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80086e2:	4413      	add	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da02      	bge.n	80086f2 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e005      	b.n	80086fe <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086f8:	db01      	blt.n	80086fe <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80086fa:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80086fc:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008702:	68bb      	ldr	r3, [r7, #8]

}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	0003ffff 	.word	0x0003ffff

08008714 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f835 	bl	800879a <VL53LX_decode_timeout>
 8008730:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff ff86 	bl	8008646 <VL53LX_calc_timeout_us>
 800873a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800873c:	68bb      	ldr	r3, [r7, #8]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008746:	b480      	push	{r7}
 8008748:	b087      	sub	sp, #28
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d015      	beq.n	800878c <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3b01      	subs	r3, #1
 8008764:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008766:	e005      	b.n	8008774 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800876e:	89fb      	ldrh	r3, [r7, #14]
 8008770:	3301      	adds	r3, #1
 8008772:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2bff      	cmp	r3, #255	@ 0xff
 8008778:	d8f6      	bhi.n	8008768 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800877a:	89fb      	ldrh	r3, [r7, #14]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	b29b      	uxth	r3, r3
 8008784:	b2db      	uxtb	r3, r3
 8008786:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008788:	4413      	add	r3, r2
 800878a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800878c:	8afb      	ldrh	r3, [r7, #22]
}
 800878e:	4618      	mov	r0, r3
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	4603      	mov	r3, r0
 80087a2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	0a12      	lsrs	r2, r2, #8
 80087b0:	b292      	uxth	r2, r2
 80087b2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80087b8:	68fb      	ldr	r3, [r7, #12]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b088      	sub	sp, #32
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80087e4:	887b      	ldrh	r3, [r7, #2]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80087ea:	23f1      	movs	r3, #241	@ 0xf1
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e05d      	b.n	80088ac <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80087f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f2:	799a      	ldrb	r2, [r3, #6]
 80087f4:	887b      	ldrh	r3, [r7, #2]
 80087f6:	4611      	mov	r1, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fe5d 	bl	80084b8 <VL53LX_calc_macro_period_us>
 80087fe:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff feea 	bl	80085dc <VL53LX_calc_timeout_mclks>
 8008808:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2bff      	cmp	r3, #255	@ 0xff
 800880e:	d901      	bls.n	8008814 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008810:	23ff      	movs	r3, #255	@ 0xff
 8008812:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800881c:	6979      	ldr	r1, [r7, #20]
 800881e:	68b8      	ldr	r0, [r7, #8]
 8008820:	f7ff fef9 	bl	8008616 <VL53LX_calc_encoded_timeout>
 8008824:	4603      	mov	r3, r0
 8008826:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008828:	8a7b      	ldrh	r3, [r7, #18]
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b29b      	uxth	r3, r3
 800882e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008832:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008834:	8a7b      	ldrh	r3, [r7, #18]
 8008836:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800883c:	6979      	ldr	r1, [r7, #20]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fee9 	bl	8008616 <VL53LX_calc_encoded_timeout>
 8008844:	4603      	mov	r3, r0
 8008846:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008848:	8a7b      	ldrh	r3, [r7, #18]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008852:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008854:	8a7b      	ldrh	r3, [r7, #18]
 8008856:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	7a5a      	ldrb	r2, [r3, #9]
 8008860:	887b      	ldrh	r3, [r7, #2]
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fe27 	bl	80084b8 <VL53LX_calc_macro_period_us>
 800886a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800886c:	6979      	ldr	r1, [r7, #20]
 800886e:	68b8      	ldr	r0, [r7, #8]
 8008870:	f7ff fed1 	bl	8008616 <VL53LX_calc_encoded_timeout>
 8008874:	4603      	mov	r3, r0
 8008876:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008878:	8a7b      	ldrh	r3, [r7, #18]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008882:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008884:	8a7b      	ldrh	r3, [r7, #18]
 8008886:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff fec1 	bl	8008616 <VL53LX_calc_encoded_timeout>
 8008894:	4603      	mov	r3, r0
 8008896:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008898:	8a7b      	ldrh	r3, [r7, #18]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	b29b      	uxth	r3, r3
 800889e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80088a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80088a4:	8a7b      	ldrh	r3, [r7, #18]
 80088a6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80088ac:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80088b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088bc:	b09e      	sub	sp, #120	@ 0x78
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6578      	str	r0, [r7, #84]	@ 0x54
 80088c2:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 80088ca:	f04f 0200 	mov.w	r2, #0
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 80088e2:	f04f 0200 	mov.w	r2, #0
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80088ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f0:	885b      	ldrh	r3, [r3, #2]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d103      	bne.n	80088fe <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80088f6:	23f1      	movs	r3, #241	@ 0xf1
 80088f8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80088fc:	e0d6      	b.n	8008aac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80088fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80d2 	beq.w	8008aac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 8008908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 80cd 	bne.w	8008aac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008918:	2200      	movs	r2, #0
 800891a:	643b      	str	r3, [r7, #64]	@ 0x40
 800891c:	647a      	str	r2, [r7, #68]	@ 0x44
 800891e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008922:	460b      	mov	r3, r1
 8008924:	3301      	adds	r3, #1
 8008926:	623b      	str	r3, [r7, #32]
 8008928:	4613      	mov	r3, r2
 800892a:	f143 0300 	adc.w	r3, r3, #0
 800892e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008930:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008934:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800893a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800893e:	b29b      	uxth	r3, r3
 8008940:	2200      	movs	r2, #0
 8008942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008944:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 8008946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008948:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800894c:	4602      	mov	r2, r0
 800894e:	fb02 f203 	mul.w	r2, r2, r3
 8008952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008954:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	441a      	add	r2, r3
 800895e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008960:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008962:	fba3 4501 	umull	r4, r5, r3, r1
 8008966:	1953      	adds	r3, r2, r5
 8008968:	461d      	mov	r5, r3
 800896a:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 800896e:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800897a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800897c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008980:	460b      	mov	r3, r1
 8008982:	3301      	adds	r3, #1
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	4613      	mov	r3, r2
 8008988:	f143 0300 	adc.w	r3, r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008992:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	b29b      	uxth	r3, r3
 800899c:	2200      	movs	r2, #0
 800899e:	633b      	str	r3, [r7, #48]	@ 0x30
 80089a0:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 80089a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80089a8:	4622      	mov	r2, r4
 80089aa:	fb02 f203 	mul.w	r2, r2, r3
 80089ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b0:	4629      	mov	r1, r5
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089ba:	4621      	mov	r1, r4
 80089bc:	fba3 ab01 	umull	sl, fp, r3, r1
 80089c0:	eb02 030b 	add.w	r3, r2, fp
 80089c4:	469b      	mov	fp, r3
 80089c6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 80089ca:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 80089ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	17da      	asrs	r2, r3, #31
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 80089d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80089de:	4622      	mov	r2, r4
 80089e0:	fb02 f203 	mul.w	r2, r2, r3
 80089e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089e6:	4629      	mov	r1, r5
 80089e8:	fb01 f303 	mul.w	r3, r1, r3
 80089ec:	4413      	add	r3, r2
 80089ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089f0:	4621      	mov	r1, r4
 80089f2:	fba2 8901 	umull	r8, r9, r2, r1
 80089f6:	444b      	add	r3, r9
 80089f8:	4699      	mov	r9, r3
 80089fa:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 80089fe:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 8008a02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a06:	0fd9      	lsrs	r1, r3, #31
 8008a08:	2000      	movs	r0, #0
 8008a0a:	6139      	str	r1, [r7, #16]
 8008a0c:	6178      	str	r0, [r7, #20]
 8008a0e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008a12:	4621      	mov	r1, r4
 8008a14:	1889      	adds	r1, r1, r2
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	4629      	mov	r1, r5
 8008a1a:	eb43 0101 	adc.w	r1, r3, r1
 8008a1e:	60f9      	str	r1, [r7, #12]
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	084a      	lsrs	r2, r1, #1
 8008a30:	4629      	mov	r1, r5
 8008a32:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008a36:	4629      	mov	r1, r5
 8008a38:	104b      	asrs	r3, r1, #1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a42:	1814      	adds	r4, r2, r0
 8008a44:	603c      	str	r4, [r7, #0]
 8008a46:	414b      	adcs	r3, r1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008a4e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 8008a52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d009      	beq.n	8008a6e <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8008a5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008a62:	f7f7 fbdd 	bl	8000220 <__aeabi_ldivmod>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8008a6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8008a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8008a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a8a:	7852      	ldrb	r2, [r2, #1]
 8008a8c:	0852      	lsrs	r2, r2, #1
 8008a8e:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008a90:	441a      	add	r2, r3
 8008a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8008a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008a9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008aa0:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008aa2:	fb93 f2f2 	sdiv	r2, r3, r2
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aa8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008aac:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3778      	adds	r7, #120	@ 0x78
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008aba <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3318      	adds	r3, #24
 8008ac8:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 8095 	bne.w	8008c24 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 8008b00:	091b      	lsrs	r3, r3, #4
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 8008b1e:	091b      	lsrs	r3, r3, #4
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	da2c      	bge.n	8008bba <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 8008b66:	091b      	lsrs	r3, r3, #4
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 8008b74:	f003 030f 	and.w	r3, r3, #15
 8008b78:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 8008ba2:	091b      	lsrs	r3, r3, #4
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	f340 80c2 	ble.w	8008d4c <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 8008bec:	091b      	lsrs	r3, r3, #4
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 8008c0a:	091b      	lsrs	r3, r3, #4
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	731a      	strb	r2, [r3, #12]
 8008c22:	e093      	b.n	8008d4c <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	da2c      	bge.n	8008ce6 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 8008ca0:	f003 030f 	and.w	r3, r3, #15
 8008ca4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 8008cb0:	091b      	lsrs	r3, r3, #4
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 8008cbe:	f003 030f 	and.w	r3, r3, #15
 8008cc2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 8008cce:	091b      	lsrs	r3, r3, #4
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	dd2c      	ble.n	8008d4c <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 8008cf8:	091b      	lsrs	r3, r3, #4
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 8008d24:	f003 030f 	and.w	r3, r3, #15
 8008d28:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 8008d34:	091b      	lsrs	r3, r3, #4
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75fb      	strb	r3, [r7, #23]
 8008d50:	e007      	b.n	8008d62 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	4413      	add	r3, r2
 8008d58:	2201      	movs	r2, #1
 8008d5a:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	75fb      	strb	r3, [r7, #23]
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	2b05      	cmp	r3, #5
 8008d66:	d9f4      	bls.n	8008d52 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008d76:	b590      	push	{r4, r7, lr}
 8008d78:	b093      	sub	sp, #76	@ 0x4c
 8008d7a:	af04      	add	r7, sp, #16
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008d84:	2300      	movs	r3, #0
 8008d86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3318      	adds	r3, #24
 8008d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8008db6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbc:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8008dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 8008dc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 8008dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 8008dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008dd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008dda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b07      	cmp	r3, #7
 8008de6:	d006      	beq.n	8008df6 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d002      	beq.n	8008df6 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008df0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008df4:	e0ec      	b.n	8008fd0 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008df6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008dfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008e00:	e0e6      	b.n	8008fd0 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008e08:	e0d9      	b.n	8008fbe <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e0a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	214c      	movs	r1, #76	@ 0x4c
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	335e      	adds	r3, #94	@ 0x5e
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d00b      	beq.n	8008e38 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008e20:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	214c      	movs	r1, #76	@ 0x4c
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	335e      	adds	r3, #94	@ 0x5e
 8008e30:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e32:	2b13      	cmp	r3, #19
 8008e34:	f040 80bd 	bne.w	8008fb2 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	795b      	ldrb	r3, [r3, #5]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008e40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	214c      	movs	r1, #76	@ 0x4c
 8008e48:	fb01 f303 	mul.w	r3, r1, r3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	335e      	adds	r3, #94	@ 0x5e
 8008e50:	2217      	movs	r2, #23
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e009      	b.n	8008e6a <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008e56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	214c      	movs	r1, #76	@ 0x4c
 8008e5e:	fb01 f303 	mul.w	r3, r1, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	335e      	adds	r3, #94	@ 0x5e
 8008e66:	2207      	movs	r2, #7
 8008e68:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008e70:	e097      	b.n	8008fa2 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008e72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	214c      	movs	r1, #76	@ 0x4c
 8008e7a:	fb01 f303 	mul.w	r3, r1, r3
 8008e7e:	4413      	add	r3, r2
 8008e80:	3354      	adds	r3, #84	@ 0x54
 8008e82:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008e84:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4403      	add	r3, r0
 8008e94:	3310      	adds	r3, #16
 8008e96:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d915      	bls.n	8008ec8 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008e9c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	214c      	movs	r1, #76	@ 0x4c
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3354      	adds	r3, #84	@ 0x54
 8008eac:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008eae:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4403      	add	r3, r0
 8008ebe:	3310      	adds	r3, #16
 8008ec0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008ec2:	1acb      	subs	r3, r1, r3
 8008ec4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ec6:	e014      	b.n	8008ef2 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008ec8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3310      	adds	r3, #16
 8008eda:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008edc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	204c      	movs	r0, #76	@ 0x4c
 8008ee4:	fb00 f303 	mul.w	r3, r0, r3
 8008ee8:	440b      	add	r3, r1
 8008eea:	3354      	adds	r3, #84	@ 0x54
 8008eec:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 8008ef2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008ef4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d24e      	bcs.n	8008f98 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8008efa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d125      	bne.n	8008f4e <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8008f02:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 8008f06:	4613      	mov	r3, r2
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	3308      	adds	r3, #8
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8008f14:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 8008f18:	224c      	movs	r2, #76	@ 0x4c
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
 8008f1e:	3310      	adds	r3, #16
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8008f28:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 8008f2c:	f107 0217 	add.w	r2, r7, #23
 8008f30:	9203      	str	r2, [sp, #12]
 8008f32:	f107 021c 	add.w	r2, r7, #28
 8008f36:	9202      	str	r2, [sp, #8]
 8008f38:	f107 0218 	add.w	r2, r7, #24
 8008f3c:	9201      	str	r2, [sp, #4]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	4623      	mov	r3, r4
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	f000 f848 	bl	8008fd8 <VL53LX_hist_events_consistency_check>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008f4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d115      	bne.n	8008f82 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008f58:	2b09      	cmp	r3, #9
 8008f5a:	d112      	bne.n	8008f82 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008f5c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008f60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 8008f64:	224c      	movs	r2, #76	@ 0x4c
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
 8008f6a:	3310      	adds	r3, #16
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	f107 0217 	add.w	r2, r7, #23
 8008f76:	4619      	mov	r1, r3
 8008f78:	f000 fb44 	bl	8009604 <VL53LX_hist_merged_pulse_check>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8008f82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f86:	7df8      	ldrb	r0, [r7, #23]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	214c      	movs	r1, #76	@ 0x4c
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	335e      	adds	r3, #94	@ 0x5e
 8008f94:	4602      	mov	r2, r0
 8008f96:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008f98:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	795b      	ldrb	r3, [r3, #5]
 8008fa6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008faa:	429a      	cmp	r2, r3
 8008fac:	f4ff af61 	bcc.w	8008e72 <VL53LX_hist_phase_consistency_check+0xfc>
 8008fb0:	e000      	b.n	8008fb4 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8008fb2:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008fb4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	7c9b      	ldrb	r3, [r3, #18]
 8008fc2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	f4ff af1f 	bcc.w	8008e0a <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8008fcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	373c      	adds	r7, #60	@ 0x3c
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd90      	pop	{r4, r7, pc}

08008fd8 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8008fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fdc:	b0d4      	sub	sp, #336	@ 0x150
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8008fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8008fee:	460b      	mov	r3, r1
 8008ff0:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 800901e:	f04f 0200 	mov.w	r2, #0
 8009022:	f04f 0300 	mov.w	r3, #0
 8009026:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 800902a:	f04f 0200 	mov.w	r2, #0
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	f04f 0300 	mov.w	r3, #0
 800903e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 8009066:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800906e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8009072:	2209      	movs	r2, #9
 8009074:	701a      	strb	r2, [r3, #0]
		return status;
 8009076:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800907a:	e2bd      	b.n	80095f8 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800907c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009088:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800908c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009090:	460b      	mov	r3, r1
 8009092:	3301      	adds	r3, #1
 8009094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009098:	4613      	mov	r3, r2
 800909a:	f143 0300 	adc.w	r3, r3, #0
 800909e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80090a6:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80090aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090ae:	885b      	ldrh	r3, [r3, #2]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2200      	movs	r2, #0
 80090b4:	469a      	mov	sl, r3
 80090b6:	4693      	mov	fp, r2
 80090b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80090bc:	fb0a f203 	mul.w	r2, sl, r3
 80090c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80090c4:	fb0b f303 	mul.w	r3, fp, r3
 80090c8:	441a      	add	r2, r3
 80090ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80090ce:	fba3 450a 	umull	r4, r5, r3, sl
 80090d2:	1953      	adds	r3, r2, r5
 80090d4:	461d      	mov	r5, r3
 80090d6:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 80090da:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80090de:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090f2:	460b      	mov	r3, r1
 80090f4:	3301      	adds	r3, #1
 80090f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090fa:	4613      	mov	r3, r2
 80090fc:	f143 0300 	adc.w	r3, r3, #0
 8009100:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009104:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8009108:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800910c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009110:	8adb      	ldrh	r3, [r3, #22]
 8009112:	b29b      	uxth	r3, r3
 8009114:	2200      	movs	r2, #0
 8009116:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800911a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800911e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009122:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8009126:	4622      	mov	r2, r4
 8009128:	fb02 f203 	mul.w	r2, r2, r3
 800912c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009130:	4629      	mov	r1, r5
 8009132:	fb01 f303 	mul.w	r3, r1, r3
 8009136:	441a      	add	r2, r3
 8009138:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800913c:	4621      	mov	r1, r4
 800913e:	fba3 8901 	umull	r8, r9, r3, r1
 8009142:	eb02 0309 	add.w	r3, r2, r9
 8009146:	4699      	mov	r9, r3
 8009148:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 800914c:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 8009150:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8009154:	f04f 0000 	mov.w	r0, #0
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	0319      	lsls	r1, r3, #12
 800915e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009162:	0310      	lsls	r0, r2, #12
 8009164:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 8009168:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800916c:	4313      	orrs	r3, r2
 800916e:	d035      	beq.n	80091dc <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 8009170:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009174:	0fd9      	lsrs	r1, r3, #31
 8009176:	2000      	movs	r0, #0
 8009178:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800917c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8009180:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8009184:	4621      	mov	r1, r4
 8009186:	1889      	adds	r1, r1, r2
 8009188:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800918c:	4629      	mov	r1, r5
 800918e:	eb43 0101 	adc.w	r1, r3, r1
 8009192:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80091a2:	4621      	mov	r1, r4
 80091a4:	084a      	lsrs	r2, r1, #1
 80091a6:	4629      	mov	r1, r5
 80091a8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80091ac:	4629      	mov	r1, r5
 80091ae:	104b      	asrs	r3, r1, #1
 80091b0:	4610      	mov	r0, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80091b8:	1814      	adds	r4, r2, r0
 80091ba:	67bc      	str	r4, [r7, #120]	@ 0x78
 80091bc:	414b      	adcs	r3, r1
 80091be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091c0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80091c4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 80091c8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80091cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80091d0:	f7f7 f826 	bl	8000220 <__aeabi_ldivmod>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80091dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80091e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091e4:	fb03 f102 	mul.w	r1, r3, r2
 80091e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80091ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	18ca      	adds	r2, r1, r3
 80091f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091fa:	fba3 1303 	umull	r1, r3, r3, r3
 80091fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009202:	460b      	mov	r3, r1
 8009204:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800920c:	18d3      	adds	r3, r2, r3
 800920e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009212:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8009216:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 800921a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 800921e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009222:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009226:	6739      	str	r1, [r7, #112]	@ 0x70
 8009228:	f143 0300 	adc.w	r3, r3, #0
 800922c:	677b      	str	r3, [r7, #116]	@ 0x74
 800922e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8009232:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 8009236:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800923a:	2b00      	cmp	r3, #0
 800923c:	da08      	bge.n	8009250 <VL53LX_hist_events_consistency_check+0x278>
 800923e:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009242:	1851      	adds	r1, r2, r1
 8009244:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009246:	f143 0300 	adc.w	r3, r3, #0
 800924a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800924c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009250:	f04f 0000 	mov.w	r0, #0
 8009254:	f04f 0100 	mov.w	r1, #0
 8009258:	0b10      	lsrs	r0, r2, #12
 800925a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800925e:	1319      	asrs	r1, r3, #12
 8009260:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009264:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	2200      	movs	r2, #0
 800926c:	663b      	str	r3, [r7, #96]	@ 0x60
 800926e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009270:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8009274:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009278:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800927c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927e:	2200      	movs	r2, #0
 8009280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009284:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009288:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800928c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8009290:	4621      	mov	r1, r4
 8009292:	1a51      	subs	r1, r2, r1
 8009294:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009296:	4629      	mov	r1, r5
 8009298:	eb63 0301 	sbc.w	r3, r3, r1
 800929c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800929e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80092a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 80092a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80092aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80092ae:	fb03 f102 	mul.w	r1, r3, r2
 80092b2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80092b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	4419      	add	r1, r3
 80092c0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80092c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80092c8:	fba2 2303 	umull	r2, r3, r2, r3
 80092cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092d0:	4613      	mov	r3, r2
 80092d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092da:	18cb      	adds	r3, r1, r3
 80092dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092e0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80092e4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80092e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 80092ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80092f0:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80092f4:	6539      	str	r1, [r7, #80]	@ 0x50
 80092f6:	f143 0300 	adc.w	r3, r3, #0
 80092fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80092fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8009300:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 8009304:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009308:	2b00      	cmp	r3, #0
 800930a:	da08      	bge.n	800931e <VL53LX_hist_events_consistency_check+0x346>
 800930c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009310:	1851      	adds	r1, r2, r1
 8009312:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009314:	f143 0300 	adc.w	r3, r3, #0
 8009318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800931a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800931e:	f04f 0000 	mov.w	r0, #0
 8009322:	f04f 0100 	mov.w	r1, #0
 8009326:	0b10      	lsrs	r0, r2, #12
 8009328:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800932c:	1319      	asrs	r1, r3, #12
 800932e:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009332:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009336:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800933a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	2200      	movs	r2, #0
 8009342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009346:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800934a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800934e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8009352:	4622      	mov	r2, r4
 8009354:	fb02 f203 	mul.w	r2, r2, r3
 8009358:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800935c:	4629      	mov	r1, r5
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	441a      	add	r2, r3
 8009364:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009368:	4621      	mov	r1, r4
 800936a:	fba3 1301 	umull	r1, r3, r3, r1
 800936e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009372:	460b      	mov	r3, r1
 8009374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800937c:	18d3      	adds	r3, r2, r3
 800937e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009382:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8009386:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800938a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 800938e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009392:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009396:	6439      	str	r1, [r7, #64]	@ 0x40
 8009398:	f143 0300 	adc.w	r3, r3, #0
 800939c:	647b      	str	r3, [r7, #68]	@ 0x44
 800939e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80093a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 80093a6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da08      	bge.n	80093c0 <VL53LX_hist_events_consistency_check+0x3e8>
 80093ae:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80093b2:	1851      	adds	r1, r2, r1
 80093b4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093b6:	f143 0300 	adc.w	r3, r3, #0
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80093c0:	f04f 0000 	mov.w	r0, #0
 80093c4:	f04f 0100 	mov.w	r1, #0
 80093c8:	0b10      	lsrs	r0, r2, #12
 80093ca:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80093ce:	1319      	asrs	r1, r3, #12
 80093d0:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80093d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80093d8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80093dc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80093f4:	4622      	mov	r2, r4
 80093f6:	fb02 f203 	mul.w	r2, r2, r3
 80093fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093fe:	4629      	mov	r1, r5
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	441a      	add	r2, r3
 8009406:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800940a:	4621      	mov	r1, r4
 800940c:	fba3 1301 	umull	r1, r3, r3, r1
 8009410:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009414:	460b      	mov	r3, r1
 8009416:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800941a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800941e:	18d3      	adds	r3, r2, r3
 8009420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009424:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8009428:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 800942c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 8009430:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009434:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009438:	6339      	str	r1, [r7, #48]	@ 0x30
 800943a:	f143 0300 	adc.w	r3, r3, #0
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009440:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009444:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 8009448:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800944c:	4610      	mov	r0, r2
 800944e:	4619      	mov	r1, r3
 8009450:	2900      	cmp	r1, #0
 8009452:	da08      	bge.n	8009466 <VL53LX_hist_events_consistency_check+0x48e>
 8009454:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009458:	18c3      	adds	r3, r0, r3
 800945a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800945c:	f141 0300 	adc.w	r3, r1, #0
 8009460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	f04f 0300 	mov.w	r3, #0
 800946e:	0b02      	lsrs	r2, r0, #12
 8009470:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009474:	130b      	asrs	r3, r1, #12
 8009476:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 800947a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800947e:	1c91      	adds	r1, r2, #2
 8009480:	6239      	str	r1, [r7, #32]
 8009482:	f143 0300 	adc.w	r3, r3, #0
 8009486:	627b      	str	r3, [r7, #36]	@ 0x24
 8009488:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800948c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 8009490:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009494:	2b00      	cmp	r3, #0
 8009496:	da06      	bge.n	80094a6 <VL53LX_hist_events_consistency_check+0x4ce>
 8009498:	1cd1      	adds	r1, r2, #3
 800949a:	61b9      	str	r1, [r7, #24]
 800949c:	f143 0300 	adc.w	r3, r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094a6:	f04f 0000 	mov.w	r0, #0
 80094aa:	f04f 0100 	mov.w	r1, #0
 80094ae:	0890      	lsrs	r0, r2, #2
 80094b0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80094b4:	1099      	asrs	r1, r3, #2
 80094b6:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80094ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094be:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80094c0:	2200      	movs	r2, #0
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	617a      	str	r2, [r7, #20]
 80094c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80094ca:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 80094ce:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80094d2:	1c91      	adds	r1, r2, #2
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	f143 0300 	adc.w	r3, r3, #0
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80094e0:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 80094e4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da06      	bge.n	80094fa <VL53LX_hist_events_consistency_check+0x522>
 80094ec:	1cd1      	adds	r1, r2, #3
 80094ee:	6039      	str	r1, [r7, #0]
 80094f0:	f143 0300 	adc.w	r3, r3, #0
 80094f4:	607b      	str	r3, [r7, #4]
 80094f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fa:	f04f 0000 	mov.w	r0, #0
 80094fe:	f04f 0100 	mov.w	r1, #0
 8009502:	0890      	lsrs	r0, r2, #2
 8009504:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009508:	1099      	asrs	r1, r3, #2
 800950a:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800950e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009512:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009514:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009518:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800951a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 800951e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009520:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 8009524:	4413      	add	r3, r2
 8009526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800952a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	4618      	mov	r0, r3
 8009532:	f002 f8ab 	bl	800b68c <VL53LX_isqrt>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
	*pevents_tolerance =
 800953a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800953e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009540:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800954a:	fb03 f202 	mul.w	r2, r3, r2
 800954e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009552:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009554:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f103 0220 	add.w	r2, r3, #32
 800955e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009562:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009564:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da00      	bge.n	8009570 <VL53LX_hist_events_consistency_check+0x598>
 800956e:	333f      	adds	r3, #63	@ 0x3f
 8009570:	119b      	asrs	r3, r3, #6
 8009572:	461a      	mov	r2, r3
 8009574:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009578:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 8009596:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800959a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800959e:	429a      	cmp	r2, r3
 80095a0:	da08      	bge.n	80095b4 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80095a2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095aa:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80095ac:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e007      	b.n	80095c4 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80095b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095b8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80095bc:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80095be:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095c2:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80095c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	dd0b      	ble.n	80095ec <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80095d4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80095d8:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80095da:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 80095de:	429a      	cmp	r2, r3
 80095e0:	d204      	bcs.n	80095ec <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80095e2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80095e6:	2214      	movs	r2, #20
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e003      	b.n	80095f4 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80095ec:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80095f0:	2209      	movs	r2, #9
 80095f2:	701a      	strb	r2, [r3, #0]





	return status;
 80095f4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 80095fe:	46bd      	mov	sp, r7
 8009600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009604 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
 8009614:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009626:	429a      	cmp	r2, r3
 8009628:	dd0b      	ble.n	8009642 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009630:	b29a      	uxth	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009638:	b29b      	uxth	r3, r3
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	b29b      	uxth	r3, r3
		delta_mm =
 800963e:	82fb      	strh	r3, [r7, #22]
 8009640:	e00a      	b.n	8009658 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009648:	b29a      	uxth	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009650:	b29b      	uxth	r3, r3
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	b29b      	uxth	r3, r3
		delta_mm =
 8009656:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009658:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd09      	ble.n	8009674 <VL53LX_hist_merged_pulse_check+0x70>
 8009660:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009668:	429a      	cmp	r2, r3
 800966a:	dd03      	ble.n	8009674 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2216      	movs	r2, #22
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e002      	b.n	800967a <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2209      	movs	r2, #9
 8009678:	701a      	strb	r2, [r3, #0]

	return status;
 800967a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800967e:	4618      	mov	r0, r3
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b08e      	sub	sp, #56	@ 0x38
 800968e:	af04      	add	r7, sp, #16
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3318      	adds	r3, #24
 80096a2:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 80096b2:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 80096ba:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80096c2:	2b09      	cmp	r3, #9
 80096c4:	d009      	beq.n	80096da <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096cc:	2b13      	cmp	r3, #19
 80096ce:	d004      	beq.n	80096da <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80096d6:	2b14      	cmp	r3, #20
 80096d8:	d129      	bne.n	800972e <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096e0:	2b09      	cmp	r3, #9
 80096e2:	d009      	beq.n	80096f8 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096ea:	2b13      	cmp	r3, #19
 80096ec:	d004      	beq.n	80096f8 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80096f4:	2b14      	cmp	r3, #20
 80096f6:	d11a      	bne.n	800972e <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2209      	movs	r2, #9
 80096fc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 800970a:	8bb9      	ldrh	r1, [r7, #28]
 800970c:	7ff8      	ldrb	r0, [r7, #31]
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	f107 0318 	add.w	r3, r7, #24
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	f107 0314 	add.w	r3, r7, #20
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	f7ff fc58 	bl	8008fd8 <VL53LX_hist_events_consistency_check>
 8009728:	4603      	mov	r3, r0
 800972a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 800972e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009732:	4618      	mov	r0, r3
 8009734:	3728      	adds	r7, #40	@ 0x28
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b088      	sub	sp, #32
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009746:	2300      	movs	r3, #0
 8009748:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009762:	2b00      	cmp	r3, #0
 8009764:	d019      	beq.n	800979a <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800976c:	4618      	mov	r0, r3
 800976e:	f002 f8f4 	bl	800b95a <VL53LX_calc_pll_period_mm>
 8009772:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	fb02 f303 	mul.w	r3, r2, r3
 8009786:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800978e:	0bdb      	lsrs	r3, r3, #15
 8009790:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	b21a      	sxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800979a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80097a6:	b590      	push	{r4, r7, lr}
 80097a8:	b08d      	sub	sp, #52	@ 0x34
 80097aa:	af04      	add	r7, sp, #16
 80097ac:	4604      	mov	r4, r0
 80097ae:	4608      	mov	r0, r1
 80097b0:	4611      	mov	r1, r2
 80097b2:	461a      	mov	r2, r3
 80097b4:	4623      	mov	r3, r4
 80097b6:	80fb      	strh	r3, [r7, #6]
 80097b8:	4603      	mov	r3, r0
 80097ba:	80bb      	strh	r3, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	4613      	mov	r3, r2
 80097c2:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 80097e4:	78b9      	ldrb	r1, [r7, #2]
 80097e6:	78f8      	ldrb	r0, [r7, #3]
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	9303      	str	r3, [sp, #12]
 80097ee:	f107 030e 	add.w	r3, r7, #14
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	23ff      	movs	r3, #255	@ 0xff
 8009800:	22c7      	movs	r2, #199	@ 0xc7
 8009802:	f000 fa01 	bl	8009c08 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d050      	beq.n	80098ae <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800980c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d04d      	beq.n	80098ae <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009812:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 8009816:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800981a:	78b9      	ldrb	r1, [r7, #2]
 800981c:	78f8      	ldrb	r0, [r7, #3]
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	9303      	str	r3, [sp, #12]
 8009824:	f107 030a 	add.w	r3, r7, #10
 8009828:	9302      	str	r3, [sp, #8]
 800982a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	4623      	mov	r3, r4
 8009836:	f000 f9e7 	bl	8009c08 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800983e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009840:	897b      	ldrh	r3, [r7, #10]
 8009842:	461a      	mov	r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800984c:	89fb      	ldrh	r3, [r7, #14]
 800984e:	461a      	mov	r2, r3
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	fbb3 f3f2 	udiv	r3, r3, r2
 8009856:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985a:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800985c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800985e:	893b      	ldrh	r3, [r7, #8]
 8009860:	461a      	mov	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	fb02 f303 	mul.w	r3, r2, r3
 8009868:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800986a:	89bb      	ldrh	r3, [r7, #12]
 800986c:	461a      	mov	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	fbb3 f3f2 	udiv	r3, r3, r2
 8009874:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	fb02 f303 	mul.w	r3, r2, r3
 8009880:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	fb02 f303 	mul.w	r3, r2, r3
 800988c:	69fa      	ldr	r2, [r7, #28]
 800988e:	4413      	add	r3, r2
 8009890:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009892:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009894:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009896:	4413      	add	r3, r2
 8009898:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	009a      	lsls	r2, r3, #2
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	e002      	b.n	80098b4 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 80098ae:	bf00      	nop
 80098b0:	e000      	b.n	80098b4 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 80098b2:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ba:	801a      	strh	r2, [r3, #0]

}
 80098bc:	bf00      	nop
 80098be:	3724      	adds	r7, #36	@ 0x24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd90      	pop	{r4, r7, pc}

080098c4 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	2301      	movs	r3, #1
 80098f2:	4093      	lsls	r3, r2
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	701a      	strb	r2, [r3, #0]

}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	4603      	mov	r3, r0
 800990e:	603a      	str	r2, [r7, #0]
 8009910:	71fb      	strb	r3, [r7, #7]
 8009912:	460b      	mov	r3, r1
 8009914:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b07      	cmp	r3, #7
 800991a:	d90a      	bls.n	8009932 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800991c:	79bb      	ldrb	r3, [r7, #6]
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	b2da      	uxtb	r2, r3
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	b2db      	uxtb	r3, r3
 8009928:	3b71      	subs	r3, #113	@ 0x71
 800992a:	b2da      	uxtb	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009930:	e00a      	b.n	8009948 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009932:	79bb      	ldrb	r3, [r7, #6]
 8009934:	f1c3 030f 	rsb	r3, r3, #15
 8009938:	b2db      	uxtb	r3, r3
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	b2da      	uxtb	r2, r3
 800993e:	79fb      	ldrb	r3, [r7, #7]
 8009940:	4413      	add	r3, r2
 8009942:	b2da      	uxtb	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	701a      	strb	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	091b      	lsrs	r3, r3, #4
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	b2da      	uxtb	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	701a      	strb	r2, [r3, #0]

}
 8009978:	bf00      	nop
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	603a      	str	r2, [r7, #0]
 800998e:	71fb      	strb	r3, [r7, #7]
 8009990:	460b      	mov	r3, r1
 8009992:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009994:	79bb      	ldrb	r3, [r7, #6]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	b2da      	uxtb	r2, r3
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	4413      	add	r3, r2
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	701a      	strb	r2, [r3, #0]

}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60ba      	str	r2, [r7, #8]
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	460b      	mov	r3, r1
 80099c0:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 80099d2:	f107 0217 	add.w	r2, r7, #23
 80099d6:	f107 0116 	add.w	r1, r7, #22
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	4618      	mov	r0, r3
 80099de:	f002 fa37 	bl	800be50 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 80099e2:	f107 0214 	add.w	r2, r7, #20
 80099e6:	f107 0115 	add.w	r1, r7, #21
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff ffb1 	bl	8009954 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	4619      	mov	r1, r3
 80099f6:	7d7b      	ldrb	r3, [r7, #21]
 80099f8:	3301      	adds	r3, #1
 80099fa:	0fda      	lsrs	r2, r3, #31
 80099fc:	4413      	add	r3, r2
 80099fe:	105b      	asrs	r3, r3, #1
 8009a00:	425b      	negs	r3, r3
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	440b      	add	r3, r1
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	b21a      	sxth	r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da02      	bge.n	8009a1e <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	7d7a      	ldrb	r2, [r7, #21]
 8009a28:	4413      	add	r3, r2
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	b21a      	sxth	r2, r3
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a38:	2b0f      	cmp	r3, #15
 8009a3a:	dd02      	ble.n	8009a42 <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	220f      	movs	r2, #15
 8009a40:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009a42:	7dbb      	ldrb	r3, [r7, #22]
 8009a44:	4619      	mov	r1, r3
 8009a46:	7d3b      	ldrb	r3, [r7, #20]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	0fda      	lsrs	r2, r3, #31
 8009a4c:	4413      	add	r3, r2
 8009a4e:	105b      	asrs	r3, r3, #1
 8009a50:	425b      	negs	r3, r3
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	440b      	add	r3, r1
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	b21a      	sxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da02      	bge.n	8009a6e <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	7d3a      	ldrb	r2, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	b21a      	sxth	r2, r3
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a88:	2b0f      	cmp	r3, #15
 8009a8a:	dd02      	ble.n	8009a92 <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8e:	220f      	movs	r2, #15
 8009a90:	801a      	strh	r2, [r3, #0]
}
 8009a92:	bf00      	nop
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b085      	sub	sp, #20
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	460a      	mov	r2, r1
 8009aa4:	71fb      	strb	r3, [r7, #7]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009ab6:	79bb      	ldrb	r3, [r7, #6]
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <VL53LX_is_aperture_location+0x34>
 8009ac4:	7b7b      	ldrb	r3, [r7, #13]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d101      	bne.n	8009ace <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009aca:	2301      	movs	r3, #1
 8009acc:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d104      	bne.n	8009ade <VL53LX_is_aperture_location+0x44>
 8009ad4:	7b7b      	ldrb	r3, [r7, #13]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009ada:	2301      	movs	r3, #1
 8009adc:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b08b      	sub	sp, #44	@ 0x2c
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	603a      	str	r2, [r7, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	460b      	mov	r3, r1
 8009afc:	71bb      	strb	r3, [r7, #6]
 8009afe:	4613      	mov	r3, r2
 8009b00:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009b2e:	f107 0416 	add.w	r4, r7, #22
 8009b32:	f107 0218 	add.w	r2, r7, #24
 8009b36:	79b9      	ldrb	r1, [r7, #6]
 8009b38:	79f8      	ldrb	r0, [r7, #7]
 8009b3a:	f107 0312 	add.w	r3, r7, #18
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4623      	mov	r3, r4
 8009b48:	f7ff ff32 	bl	80099b0 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	2200      	movs	r2, #0
 8009b50:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009b52:	8afb      	ldrh	r3, [r7, #22]
 8009b54:	83bb      	strh	r3, [r7, #28]
 8009b56:	e04c      	b.n	8009bf2 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009b58:	8b3b      	ldrh	r3, [r7, #24]
 8009b5a:	83fb      	strh	r3, [r7, #30]
 8009b5c:	e03d      	b.n	8009bda <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009b5e:	8bbb      	ldrh	r3, [r7, #28]
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	8bfa      	ldrh	r2, [r7, #30]
 8009b64:	b2d1      	uxtb	r1, r2
 8009b66:	f107 0211 	add.w	r2, r7, #17
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fecb 	bl	8009906 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009b70:	7c78      	ldrb	r0, [r7, #17]
 8009b72:	f107 030e 	add.w	r3, r7, #14
 8009b76:	f107 020f 	add.w	r2, r7, #15
 8009b7a:	f107 0110 	add.w	r1, r7, #16
 8009b7e:	f7ff fea1 	bl	80098c4 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009b82:	7c3b      	ldrb	r3, [r7, #16]
 8009b84:	461a      	mov	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	4413      	add	r3, r2
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d01b      	beq.n	8009bce <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009b96:	8bbb      	ldrh	r3, [r7, #28]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	8bfa      	ldrh	r2, [r7, #30]
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff ff7a 	bl	8009a9a <VL53LX_is_aperture_location>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009baa:	7efb      	ldrb	r3, [r7, #27]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	881a      	ldrh	r2, [r3, #0]
 8009bb4:	88bb      	ldrh	r3, [r7, #4]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	e006      	b.n	8009bce <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009bce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	83fb      	strh	r3, [r7, #30]
 8009bda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009bde:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	ddbb      	ble.n	8009b5e <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009be6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3301      	adds	r3, #1
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	83bb      	strh	r3, [r7, #28]
 8009bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bf6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	ddac      	ble.n	8009b58 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	3724      	adds	r7, #36	@ 0x24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}

08009c08 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009c08:	b590      	push	{r4, r7, lr}
 8009c0a:	b08d      	sub	sp, #52	@ 0x34
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	4611      	mov	r1, r2
 8009c14:	461a      	mov	r2, r3
 8009c16:	4623      	mov	r3, r4
 8009c18:	71fb      	strb	r3, [r7, #7]
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71bb      	strb	r3, [r7, #6]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	717b      	strb	r3, [r7, #5]
 8009c22:	4613      	mov	r3, r2
 8009c24:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 8009c68:	f107 041c 	add.w	r4, r7, #28
 8009c6c:	f107 021e 	add.w	r2, r7, #30
 8009c70:	79b9      	ldrb	r1, [r7, #6]
 8009c72:	79f8      	ldrb	r0, [r7, #7]
 8009c74:	f107 0318 	add.w	r3, r7, #24
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	f107 031a 	add.w	r3, r7, #26
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4623      	mov	r3, r4
 8009c82:	f7ff fe95 	bl	80099b0 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009c86:	f107 0414 	add.w	r4, r7, #20
 8009c8a:	f107 0216 	add.w	r2, r7, #22
 8009c8e:	7939      	ldrb	r1, [r7, #4]
 8009c90:	7978      	ldrb	r0, [r7, #5]
 8009c92:	f107 0310 	add.w	r3, r7, #16
 8009c96:	9301      	str	r3, [sp, #4]
 8009c98:	f107 0312 	add.w	r3, r7, #18
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	f7ff fe86 	bl	80099b0 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cac:	2200      	movs	r2, #0
 8009cae:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009cb0:	8abb      	ldrh	r3, [r7, #20]
 8009cb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009cb4:	e06c      	b.n	8009d90 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009cb6:	8afb      	ldrh	r3, [r7, #22]
 8009cb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009cba:	e05d      	b.n	8009d78 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009cbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009cc2:	b2d1      	uxtb	r1, r2
 8009cc4:	f107 020f 	add.w	r2, r7, #15
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fe1c 	bl	8009906 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009cce:	7bf8      	ldrb	r0, [r7, #15]
 8009cd0:	f107 030c 	add.w	r3, r7, #12
 8009cd4:	f107 020d 	add.w	r2, r7, #13
 8009cd8:	f107 010e 	add.w	r1, r7, #14
 8009cdc:	f7ff fdf2 	bl	80098c4 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	4413      	add	r3, r2
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	7b3b      	ldrb	r3, [r7, #12]
 8009cec:	4013      	ands	r3, r2
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d03b      	beq.n	8009d6c <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fecb 	bl	8009a9a <VL53LX_is_aperture_location>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009d0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009d12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d14:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d16:	e002      	b.n	8009d1e <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d1c:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009d1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d22:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d26:	429a      	cmp	r2, r3
 8009d28:	db19      	blt.n	8009d5e <VL53LX_calc_mm_effective_spads+0x156>
 8009d2a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009d2e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d32:	429a      	cmp	r2, r3
 8009d34:	dc13      	bgt.n	8009d5e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009d36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009d3a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	db0d      	blt.n	8009d5e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009d42:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d46:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	dc07      	bgt.n	8009d5e <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d50:	881a      	ldrh	r2, [r3, #0]
 8009d52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d54:	4413      	add	r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	e006      	b.n	8009d6c <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d60:	881a      	ldrh	r2, [r3, #0]
 8009d62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d64:	4413      	add	r3, r2
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3301      	adds	r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009d78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d7c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d80:	429a      	cmp	r2, r3
 8009d82:	dd9b      	ble.n	8009cbc <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009d94:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	dd8c      	ble.n	8009cb6 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	372c      	adds	r7, #44	@ 0x2c
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd90      	pop	{r4, r7, pc}

08009da6 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fd ff71 	bl	8007ca0 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	7c9a      	ldrb	r2, [r3, #18]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	3314      	adds	r3, #20
 8009de8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]
 8009dee:	e06b      	b.n	8009ec8 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d034      	beq.n	8009e64 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009dfa:	e05f      	b.n	8009ebc <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009e34:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	8a9a      	ldrh	r2, [r3, #20]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	601a      	str	r2, [r3, #0]

			break;
 8009e62:	e02b      	b.n	8009ebc <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009e94:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	611a      	str	r2, [r3, #16]
			break;
 8009eba:	bf00      	nop
		}

		pdata++;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	334c      	adds	r3, #76	@ 0x4c
 8009ec0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	7c9b      	ldrb	r3, [r3, #18]
 8009ecc:	7dfa      	ldrb	r2, [r7, #23]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d38e      	bcc.n	8009df0 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009ed2:	bf00      	nop
 8009ed4:	bf00      	nop
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	@ 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3318      	adds	r3, #24
 8009eec:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009ef4:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8009efc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f04:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	3302      	adds	r3, #2
 8009f18:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8009f3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3724      	adds	r7, #36	@ 0x24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b08b      	sub	sp, #44	@ 0x2c
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3318      	adds	r3, #24
 8009f60:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009f68:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009f70:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009f78:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 8009f80:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009f82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f86:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009f88:	7bfa      	ldrb	r2, [r7, #15]
 8009f8a:	6939      	ldr	r1, [r7, #16]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	440b      	add	r3, r1
 8009f96:	3306      	adds	r3, #6
 8009f98:	2200      	movs	r2, #0
 8009f9a:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009fa2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009faa:	e01a      	b.n	8009fe2 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	214c      	movs	r1, #76	@ 0x4c
 8009fb4:	fb01 f303 	mul.w	r3, r1, r3
 8009fb8:	4413      	add	r3, r2
 8009fba:	334a      	adds	r3, #74	@ 0x4a
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d209      	bcs.n	8009fd8 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	214c      	movs	r1, #76	@ 0x4c
 8009fcc:	fb01 f303 	mul.w	r3, r1, r3
 8009fd0:	4413      	add	r3, r2
 8009fd2:	334a      	adds	r3, #74	@ 0x4a
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 8009fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fdc:	3301      	adds	r3, #1
 8009fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	7c9b      	ldrb	r3, [r3, #18]
 8009fe6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d3de      	bcc.n	8009fac <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ff8:	623b      	str	r3, [r7, #32]
 8009ffa:	e00e      	b.n	800a01a <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 8009ffc:	89bb      	ldrh	r3, [r7, #12]
 8009ffe:	039b      	lsls	r3, r3, #14
 800a000:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a004:	6a3a      	ldr	r2, [r7, #32]
 800a006:	fbb2 f3f3 	udiv	r3, r2, r3
 800a00a:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a012:	d302      	bcc.n	800a01a <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a018:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a01a:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a020:	6939      	ldr	r1, [r7, #16]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	440b      	add	r3, r1
 800a02c:	3306      	adds	r3, #6
 800a02e:	4602      	mov	r2, r0
 800a030:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a032:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a036:	4618      	mov	r0, r3
 800a038:	372c      	adds	r7, #44	@ 0x2c
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b08a      	sub	sp, #40	@ 0x28
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3318      	adds	r3, #24
 800a054:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	332c      	adds	r3, #44	@ 0x2c
 800a05a:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	33c2      	adds	r3, #194	@ 0xc2
 800a060:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800a068:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	3302      	adds	r3, #2
 800a06e:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a080:	461a      	mov	r2, r3
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	4413      	add	r3, r2
 800a086:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d11e      	bne.n	800a0cc <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d05d      	beq.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	719a      	strb	r2, [r3, #6]
 800a0ca:	e050      	b.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d11e      	bne.n	800a11e <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d034      	beq.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	719a      	strb	r2, [r3, #6]
 800a11c:	e027      	b.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a124:	461a      	mov	r2, r3
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	4413      	add	r3, r2
 800a12a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d11d      	bne.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10b      	bne.n	800a150 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a16e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800a182:	461a      	mov	r2, r3
 800a184:	6978      	ldr	r0, [r7, #20]
 800a186:	f7fd f961 	bl	800744c <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a18a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3728      	adds	r7, #40	@ 0x28
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a196:	b480      	push	{r7}
 800a198:	b089      	sub	sp, #36	@ 0x24
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3318      	adds	r3, #24
 800a1ae:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a1b6:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d103      	bne.n	800a1c6 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7afa      	ldrb	r2, [r7, #11]
 800a1c2:	701a      	strb	r2, [r3, #0]
 800a1c4:	e01e      	b.n	800a204 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d111      	bne.n	800a1f8 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2bff      	cmp	r3, #255	@ 0xff
 800a1da:	d103      	bne.n	800a1e4 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2280      	movs	r2, #128	@ 0x80
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	e005      	b.n	800a1f0 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	e005      	b.n	800a204 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a204:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3724      	adds	r7, #36	@ 0x24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	@ 0x28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	461a      	mov	r2, r3
 800a220:	460b      	mov	r3, r1
 800a222:	72fb      	strb	r3, [r7, #11]
 800a224:	4613      	mov	r3, r2
 800a226:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3318      	adds	r3, #24
 800a232:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a23c:	7afa      	ldrb	r2, [r7, #11]
 800a23e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe f938 	bl	80084b8 <VL53LX_calc_macro_period_us>
 800a248:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a250:	2301      	movs	r3, #1
 800a252:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	031b      	lsls	r3, r3, #12
 800a258:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	4413      	add	r3, r2
 800a262:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26c:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	2bff      	cmp	r3, #255	@ 0xff
 800a272:	d904      	bls.n	800a27e <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	22ff      	movs	r2, #255	@ 0xff
 800a278:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800a27c:	e004      	b.n	800a288 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	7afa      	ldrb	r2, [r7, #11]
 800a28c:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a290:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800a29e:	461a      	mov	r2, r3
 800a2a0:	214b      	movs	r1, #75	@ 0x4b
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f007 f95e 	bl	8011564 <VL53LX_WrByte>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a2ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2bc:	461a      	mov	r2, r3
 800a2be:	2160      	movs	r1, #96	@ 0x60
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f007 f94f 	bl	8011564 <VL53LX_WrByte>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2d2:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2da:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a2dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d109      	bne.n	800a2f8 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a2e4:	f107 0214 	add.w	r2, r7, #20
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	2178      	movs	r1, #120	@ 0x78
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f007 f8cd 	bl	801148c <VL53LX_WriteMulti>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	893a      	ldrh	r2, [r7, #8]
 800a2fc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a300:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a304:	2b00      	cmp	r3, #0
 800a306:	d108      	bne.n	800a31a <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a308:	893b      	ldrh	r3, [r7, #8]
 800a30a:	461a      	mov	r2, r3
 800a30c:	211c      	movs	r1, #28
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f007 f952 	bl	80115b8 <VL53LX_WrWord>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d108      	bne.n	800a334 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a322:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a324:	461a      	mov	r2, r3
 800a326:	2164      	movs	r1, #100	@ 0x64
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f007 f945 	bl	80115b8 <VL53LX_WrWord>
 800a32e:	4603      	mov	r3, r0
 800a330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a334:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d108      	bne.n	800a34e <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a33c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a33e:	461a      	mov	r2, r3
 800a340:	2166      	movs	r1, #102	@ 0x66
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f007 f938 	bl	80115b8 <VL53LX_WrWord>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a34e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a352:	4618      	mov	r0, r3
 800a354:	3728      	adds	r7, #40	@ 0x28
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a35a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a35e:	b0a2      	sub	sp, #136	@ 0x88
 800a360:	af00      	add	r7, sp, #0
 800a362:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a364:	2300      	movs	r3, #0
 800a366:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a36c:	3318      	adds	r3, #24
 800a36e:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a372:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a376:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800a378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a37a:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a37e:	3314      	adds	r3, #20
 800a380:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a384:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a388:	3318      	adds	r3, #24
 800a38a:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a38c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a38e:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a392:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a396:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a3a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800a3a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a3a8:	4413      	add	r3, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	461c      	mov	r4, r3
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800a3b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800a3bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a3c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a3c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	f04f 0000 	mov.w	r0, #0
 800a3d0:	f04f 0100 	mov.w	r1, #0
 800a3d4:	0159      	lsls	r1, r3, #5
 800a3d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3da:	0150      	lsls	r0, r2, #5
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	ebb2 0804 	subs.w	r8, r2, r4
 800a3e4:	eb63 0905 	sbc.w	r9, r3, r5
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	f04f 0300 	mov.w	r3, #0
 800a3f0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a3f4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800a3f8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a3fc:	4690      	mov	r8, r2
 800a3fe:	4699      	mov	r9, r3
 800a400:	eb18 0304 	adds.w	r3, r8, r4
 800a404:	633b      	str	r3, [r7, #48]	@ 0x30
 800a406:	eb49 0305 	adc.w	r3, r9, r5
 800a40a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40c:	f04f 0200 	mov.w	r2, #0
 800a410:	f04f 0300 	mov.w	r3, #0
 800a414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a418:	4629      	mov	r1, r5
 800a41a:	00cb      	lsls	r3, r1, #3
 800a41c:	4621      	mov	r1, r4
 800a41e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a422:	4621      	mov	r1, r4
 800a424:	00ca      	lsls	r2, r1, #3
 800a426:	4610      	mov	r0, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a42e:	2200      	movs	r2, #0
 800a430:	643b      	str	r3, [r7, #64]	@ 0x40
 800a432:	647a      	str	r2, [r7, #68]	@ 0x44
 800a434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a438:	f7f5 ff42 	bl	80002c0 <__aeabi_uldivmod>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a444:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	f04f 0000 	mov.w	r0, #0
 800a450:	f04f 0100 	mov.w	r1, #0
 800a454:	0159      	lsls	r1, r3, #5
 800a456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a45a:	0150      	lsls	r0, r2, #5
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	ebb2 0a04 	subs.w	sl, r2, r4
 800a464:	eb63 0b05 	sbc.w	fp, r3, r5
 800a468:	f04f 0200 	mov.w	r2, #0
 800a46c:	f04f 0300 	mov.w	r3, #0
 800a470:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a474:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800a478:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a47c:	4692      	mov	sl, r2
 800a47e:	469b      	mov	fp, r3
 800a480:	eb1a 0304 	adds.w	r3, sl, r4
 800a484:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a486:	eb4b 0305 	adc.w	r3, fp, r5
 800a48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a498:	4629      	mov	r1, r5
 800a49a:	00cb      	lsls	r3, r1, #3
 800a49c:	4621      	mov	r1, r4
 800a49e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	00ca      	lsls	r2, r1, #3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a4b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a4b8:	f7f5 ff02 	bl	80002c0 <__aeabi_uldivmod>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4ca:	8ad2      	ldrh	r2, [r2, #22]
 800a4cc:	fb02 f303 	mul.w	r3, r2, r3
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	623b      	str	r3, [r7, #32]
 800a4d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a4da:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800a4de:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	d105      	bne.n	800a4f2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800a4e6:	f04f 0201 	mov.w	r2, #1
 800a4ea:	f04f 0300 	mov.w	r3, #0
 800a4ee:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800a4f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	f04f 0400 	mov.w	r4, #0
 800a4fe:	f04f 0500 	mov.w	r5, #0
 800a502:	015d      	lsls	r5, r3, #5
 800a504:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a508:	0154      	lsls	r4, r2, #5
 800a50a:	4622      	mov	r2, r4
 800a50c:	462b      	mov	r3, r5
 800a50e:	1a14      	subs	r4, r2, r0
 800a510:	61bc      	str	r4, [r7, #24]
 800a512:	eb63 0301 	sbc.w	r3, r3, r1
 800a516:	61fb      	str	r3, [r7, #28]
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	f04f 0300 	mov.w	r3, #0
 800a520:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a524:	464c      	mov	r4, r9
 800a526:	00a3      	lsls	r3, r4, #2
 800a528:	4644      	mov	r4, r8
 800a52a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a52e:	4644      	mov	r4, r8
 800a530:	00a2      	lsls	r2, r4, #2
 800a532:	4614      	mov	r4, r2
 800a534:	461d      	mov	r5, r3
 800a536:	4623      	mov	r3, r4
 800a538:	181b      	adds	r3, r3, r0
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	462b      	mov	r3, r5
 800a53e:	eb41 0303 	adc.w	r3, r1, r3
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a550:	4629      	mov	r1, r5
 800a552:	02cb      	lsls	r3, r1, #11
 800a554:	4621      	mov	r1, r4
 800a556:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a55a:	4621      	mov	r1, r4
 800a55c:	02ca      	lsls	r2, r1, #11
 800a55e:	461c      	mov	r4, r3
 800a560:	4613      	mov	r3, r2
 800a562:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a566:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a56a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a56e:	f7f5 fea7 	bl	80002c0 <__aeabi_uldivmod>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800a57a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	f04f 0500 	mov.w	r5, #0
 800a58a:	015d      	lsls	r5, r3, #5
 800a58c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a590:	0154      	lsls	r4, r2, #5
 800a592:	4622      	mov	r2, r4
 800a594:	462b      	mov	r3, r5
 800a596:	1a14      	subs	r4, r2, r0
 800a598:	60bc      	str	r4, [r7, #8]
 800a59a:	eb63 0301 	sbc.w	r3, r3, r1
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	f04f 0200 	mov.w	r2, #0
 800a5a4:	f04f 0300 	mov.w	r3, #0
 800a5a8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a5ac:	464c      	mov	r4, r9
 800a5ae:	00a3      	lsls	r3, r4, #2
 800a5b0:	4644      	mov	r4, r8
 800a5b2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a5b6:	4644      	mov	r4, r8
 800a5b8:	00a2      	lsls	r2, r4, #2
 800a5ba:	4614      	mov	r4, r2
 800a5bc:	461d      	mov	r5, r3
 800a5be:	4623      	mov	r3, r4
 800a5c0:	181b      	adds	r3, r3, r0
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	462b      	mov	r3, r5
 800a5c6:	eb41 0303 	adc.w	r3, r1, r3
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a5d8:	4629      	mov	r1, r5
 800a5da:	02cb      	lsls	r3, r1, #11
 800a5dc:	4621      	mov	r1, r4
 800a5de:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	02ca      	lsls	r2, r1, #11
 800a5e6:	461c      	mov	r4, r3
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a5ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a5f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a5f6:	f7f5 fe63 	bl	80002c0 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800a602:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a606:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d802      	bhi.n	800a616 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800a610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a612:	2202      	movs	r2, #2
 800a614:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a616:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3788      	adds	r7, #136	@ 0x88
 800a61e:	46bd      	mov	sp, r7
 800a620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a624 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b096      	sub	sp, #88	@ 0x58
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a632:	2300      	movs	r3, #0
 800a634:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3318      	adds	r3, #24
 800a63c:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a644:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a648:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800a64c:	331c      	adds	r3, #28
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a650:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800a654:	2b01      	cmp	r3, #1
 800a656:	d107      	bne.n	800a668 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	889b      	ldrh	r3, [r3, #4]
 800a65c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	609a      	str	r2, [r3, #8]
 800a666:	e002      	b.n	800a66e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	899b      	ldrh	r3, [r3, #12]
 800a678:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	89db      	ldrh	r3, [r3, #14]
 800a680:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d004      	beq.n	800a698 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a694:	2b01      	cmp	r3, #1
 800a696:	d126      	bne.n	800a6e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69a:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d022      	beq.n	800a6e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a6a0:	f107 0317 	add.w	r3, r7, #23
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 fea7 	bl	800b3fa <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b8:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d003      	beq.n	800a6c8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6c6:	e006      	b.n	800a6d6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ce:	3202      	adds	r2, #2
 800a6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d4:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d8:	889b      	ldrh	r3, [r3, #4]
 800a6da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e0:	88db      	ldrh	r3, [r3, #6]
 800a6e2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a6f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d106      	bne.n	800a706 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	795b      	ldrb	r3, [r3, #5]
 800a6fc:	f043 0301 	orr.w	r3, r3, #1
 800a700:	b2da      	uxtb	r2, r3
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a710:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d106      	bne.n	800a726 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	795b      	ldrb	r3, [r3, #5]
 800a71c:	f043 0302 	orr.w	r3, r3, #2
 800a720:	b2da      	uxtb	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a72c:	2301      	movs	r3, #1
 800a72e:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a736:	2b01      	cmp	r3, #1
 800a738:	d108      	bne.n	800a74c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a73e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a746:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a74a:	e017      	b.n	800a77c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a74c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a750:	019a      	lsls	r2, r3, #6
 800a752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a754:	fbb2 f3f3 	udiv	r3, r2, r3
 800a758:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800a762:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a764:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a768:	019a      	lsls	r2, r3, #6
 800a76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a77a:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d12a      	bne.n	800a7dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800a78e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a792:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a796:	119b      	asrs	r3, r3, #6
 800a798:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a0:	db02      	blt.n	800a7a8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800a7a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7a6:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7aa:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800a7b8:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a7bc:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c0:	119b      	asrs	r3, r3, #6
 800a7c2:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ca:	db02      	blt.n	800a7d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800a7cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7d0:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a7d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	81da      	strh	r2, [r3, #14]
 800a7da:	e042      	b.n	800a862 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d13d      	bne.n	800a862 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a7ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a7f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	da00      	bge.n	800a7f8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800a7f6:	330f      	adds	r3, #15
 800a7f8:	111b      	asrs	r3, r3, #4
 800a7fa:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a802:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a808:	4413      	add	r3, r2
 800a80a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a80e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a812:	db02      	blt.n	800a81a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800a814:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a818:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a826:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a82e:	4a55      	ldr	r2, [pc, #340]	@ (800a984 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800a830:	fb82 1203 	smull	r1, r2, r2, r3
 800a834:	1152      	asrs	r2, r2, #5
 800a836:	17db      	asrs	r3, r3, #31
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a842:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a848:	4413      	add	r3, r2
 800a84a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a84c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a84e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a852:	db02      	blt.n	800a85a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800a854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a858:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a85c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	785b      	ldrb	r3, [r3, #1]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d17f      	bne.n	800a96a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800a86a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d07b      	beq.n	800a96a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2201      	movs	r2, #1
 800a876:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a87e:	f107 0317 	add.w	r3, r7, #23
 800a882:	4619      	mov	r1, r3
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fdb8 	bl	800b3fa <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a894:	3308      	adds	r3, #8
 800a896:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d049      	beq.n	800a932 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a0:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d144      	bne.n	800a932 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d041      	beq.n	800a932 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800a8b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da01      	bge.n	800a8c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800a8be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a8c2:	125b      	asrs	r3, r3, #9
 800a8c4:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d0:	461a      	mov	r2, r3
			if ((max ==  0)||
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	db03      	blt.n	800a8e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	719a      	strb	r2, [r3, #6]
 800a8de:	e028      	b.n	800a932 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800a8e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e8:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a8f4:	e014      	b.n	800a920 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800a8f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a900:	4a21      	ldr	r2, [pc, #132]	@ (800a988 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	095a      	lsrs	r2, r3, #5
 800a908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90a:	441a      	add	r2, r3
 800a90c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a90e:	601a      	str	r2, [r3, #0]
					pcpo++;
 800a910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a912:	3304      	adds	r3, #4
 800a914:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800a916:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a91a:	3301      	adds	r3, #1
 800a91c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a920:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	3b01      	subs	r3, #1
 800a928:	429a      	cmp	r2, r3
 800a92a:	d3e4      	bcc.n	800a8f6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800a92c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a92e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a930:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	799b      	ldrb	r3, [r3, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d017      	beq.n	800a96a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	789b      	ldrb	r3, [r3, #2]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d105      	bne.n	800a96a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800a96a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d002      	beq.n	800a978 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2201      	movs	r2, #1
 800a976:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a978:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3758      	adds	r7, #88	@ 0x58
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	66666667 	.word	0x66666667
 800a988:	51eb851f 	.word	0x51eb851f

0800a98c <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800a98c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a990:	b0a2      	sub	sp, #136	@ 0x88
 800a992:	af02      	add	r7, sp, #8
 800a994:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a996:	2300      	movs	r3, #0
 800a998:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	3318      	adds	r3, #24
 800a9a0:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a9a8:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800a9aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9ac:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a9b0:	3314      	adds	r3, #20
 800a9b2:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a9b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b6:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a9ba:	3318      	adds	r3, #24
 800a9bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800a9be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a9c4:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800a9c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c8:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a9ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9cc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a9d0:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aa1c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800aa20:	4619      	mov	r1, r3
 800aa22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa24:	f000 fce9 	bl	800b3fa <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800aa28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800aa30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa32:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d002      	beq.n	800aa40 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800aa40:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800aa42:	f000 fb10 	bl	800b066 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aa46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800aa4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa56:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800aa5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa5c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d901      	bls.n	800aa68 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800aa6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa70:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d106      	bne.n	800aa86 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800aa78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa7a:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800aa7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d101      	bne.n	800aa8a <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800aa86:	2301      	movs	r3, #1
 800aa88:	e000      	b.n	800aa8c <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800aa8a:	2300      	movs	r3, #0
	merging_complete =
 800aa8c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800aa90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa92:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d10e      	bne.n	800aab6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800aa98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800aaa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa2:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	d105      	bne.n	800aab6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aaaa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e000      	b.n	800aab8 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800aab6:	2300      	movs	r3, #0
	run_smudge_detection =
 800aab8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800aabc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aabe:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800aac2:	2b09      	cmp	r3, #9
 800aac4:	f000 80a6 	beq.w	800ac14 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800aac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aaca:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aacc:	2b01      	cmp	r3, #1
 800aace:	f040 80a1 	bne.w	800ac14 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800aad2:	2302      	movs	r3, #2
 800aad4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800aad8:	2300      	movs	r3, #0
 800aada:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800aade:	e02d      	b.n	800ab3c <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800aae0:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800aae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aae6:	234c      	movs	r3, #76	@ 0x4c
 800aae8:	fb01 f303 	mul.w	r3, r1, r3
 800aaec:	4413      	add	r3, r2
 800aaee:	335e      	adds	r3, #94	@ 0x5e
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	d11d      	bne.n	800ab32 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800aaf6:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800aafa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aafc:	234c      	movs	r3, #76	@ 0x4c
 800aafe:	fb01 f303 	mul.w	r3, r1, r3
 800ab02:	4413      	add	r3, r2
 800ab04:	335a      	adds	r3, #90	@ 0x5a
 800ab06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab0a:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ab0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab0e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ab10:	429a      	cmp	r2, r3
 800ab12:	dc03      	bgt.n	800ab1c <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ab1a:	e00a      	b.n	800ab32 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800ab1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d106      	bne.n	800ab32 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800ab24:	2301      	movs	r3, #1
 800ab26:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800ab2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab2e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ab32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab36:	3301      	adds	r3, #1
 800ab38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab3e:	7c9a      	ldrb	r2, [r3, #18]
 800ab40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d3cb      	bcc.n	800aae0 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ab48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d102      	bne.n	800ab56 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ab56:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800ab5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab5c:	234c      	movs	r3, #76	@ 0x4c
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	3348      	adds	r3, #72	@ 0x48
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800ab6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d150      	bne.n	800ac14 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800ab72:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab74:	2200      	movs	r2, #0
 800ab76:	469a      	mov	sl, r3
 800ab78:	4693      	mov	fp, r2
 800ab7a:	4652      	mov	r2, sl
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	f04f 0000 	mov.w	r0, #0
 800ab82:	f04f 0100 	mov.w	r1, #0
 800ab86:	0159      	lsls	r1, r3, #5
 800ab88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab8c:	0150      	lsls	r0, r2, #5
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	ebb2 040a 	subs.w	r4, r2, sl
 800ab96:	eb63 050b 	sbc.w	r5, r3, fp
 800ab9a:	f04f 0200 	mov.w	r2, #0
 800ab9e:	f04f 0300 	mov.w	r3, #0
 800aba2:	00ab      	lsls	r3, r5, #2
 800aba4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800aba8:	00a2      	lsls	r2, r4, #2
 800abaa:	4614      	mov	r4, r2
 800abac:	461d      	mov	r5, r3
 800abae:	eb14 080a 	adds.w	r8, r4, sl
 800abb2:	eb45 090b 	adc.w	r9, r5, fp
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abca:	4690      	mov	r8, r2
 800abcc:	4699      	mov	r9, r3
 800abce:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800abd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800abd6:	f04f 0200 	mov.w	r2, #0
 800abda:	f04f 0300 	mov.w	r3, #0
 800abde:	024b      	lsls	r3, r1, #9
 800abe0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800abe4:	0242      	lsls	r2, r0, #9
 800abe6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800abea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abee:	2200      	movs	r2, #0
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	61fa      	str	r2, [r7, #28]
 800abf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abf8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800abfc:	4621      	mov	r1, r4
 800abfe:	428a      	cmp	r2, r1
 800ac00:	4629      	mov	r1, r5
 800ac02:	418b      	sbcs	r3, r1
 800ac04:	d203      	bcs.n	800ac0e <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800ac06:	2301      	movs	r3, #1
 800ac08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ac0c:	e002      	b.n	800ac14 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800ac14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 810b 	beq.w	800ae34 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800ac1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac20:	2200      	movs	r2, #0
 800ac22:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ac24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac26:	f7ff fb98 	bl	800a35a <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ac2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac2c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ac30:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ac32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ac3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac40:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ac46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4e:	4413      	add	r3, r2
 800ac50:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ac52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da02      	bge.n	800ac5e <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800ac58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac5a:	425b      	negs	r3, r3
 800ac5c:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ac5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac66:	4293      	cmp	r3, r2
 800ac68:	dd0c      	ble.n	800ac84 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ac6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ac6e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ac70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac72:	429a      	cmp	r2, r3
 800ac74:	da03      	bge.n	800ac7e <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800ac76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac78:	2201      	movs	r2, #1
 800ac7a:	709a      	strb	r2, [r3, #2]
 800ac7c:	e002      	b.n	800ac84 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ac7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac80:	2202      	movs	r2, #2
 800ac82:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ac84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac8c:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ac8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d906      	bls.n	800aca8 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800ac9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800aca0:	2302      	movs	r3, #2
 800aca2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800aca6:	e014      	b.n	800acd2 <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800aca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acaa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800acae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb0:	2000      	movs	r0, #0
 800acb2:	6139      	str	r1, [r7, #16]
 800acb4:	6178      	str	r0, [r7, #20]
 800acb6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800acba:	4621      	mov	r1, r4
 800acbc:	1851      	adds	r1, r2, r1
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	4629      	mov	r1, r5
 800acc2:	eb43 0101 	adc.w	r1, r3, r1
 800acc6:	60f9      	str	r1, [r7, #12]
 800acc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800acce:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800acd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d202      	bcs.n	800ace4 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ace4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ace6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800acea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2200      	movs	r2, #0
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acf8:	f7f5 fae2 	bl	80002c0 <__aeabi_uldivmod>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ad00:	4613      	mov	r3, r2
 800ad02:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ad04:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad08:	1ad2      	subs	r2, r2, r3
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0c:	4413      	add	r3, r2
 800ad0e:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ad10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	da02      	bge.n	800ad1c <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800ad16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad18:	425b      	negs	r3, r3
 800ad1a:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ad1c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d112      	bne.n	800ad4a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ad24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ad2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	db0c      	blt.n	800ad4a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ad30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800ad32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ad34:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ad36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	da03      	bge.n	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800ad3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad3e:	2201      	movs	r2, #1
 800ad40:	70da      	strb	r2, [r3, #3]
 800ad42:	e002      	b.n	800ad4a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ad44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad46:	2202      	movs	r2, #2
 800ad48:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ad4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d108      	bne.n	800ad64 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ad52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ad58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	da02      	bge.n	800ad64 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800ad5e:	2302      	movs	r3, #2
 800ad60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800ad64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad66:	2200      	movs	r2, #0
 800ad68:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ad6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d112      	bne.n	800ad98 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ad72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad74:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00e      	beq.n	800ad98 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ad7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ad86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d905      	bls.n	800ad98 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800ad8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad8e:	2201      	movs	r2, #1
 800ad90:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ad92:	2302      	movs	r3, #2
 800ad94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ad98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad9a:	7c1b      	ldrb	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ada0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ada2:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ada4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d902      	bls.n	800adb0 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800adaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800adb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d107      	bne.n	800adc8 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800adb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adba:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800adbc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d202      	bcs.n	800adc8 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800adc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800adc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adca:	089b      	lsrs	r3, r3, #2
 800adcc:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800adce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800add4:	d301      	bcc.n	800adda <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800add6:	4b3f      	ldr	r3, [pc, #252]	@ (800aed4 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800add8:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800adda:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10d      	bne.n	800adfe <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ade2:	2300      	movs	r3, #0
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	2301      	movs	r3, #1
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800adee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800adf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800adf2:	f7ff fc17 	bl	800a624 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800adf6:	2302      	movs	r3, #2
 800adf8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800adfc:	e009      	b.n	800ae12 <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800adfe:	2301      	movs	r3, #1
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	2301      	movs	r3, #1
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae0a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ae0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae0e:	f7ff fc09 	bl	800a624 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ae12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d10c      	bne.n	800ae34 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800ae1a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ae28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ae2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae30:	2200      	movs	r2, #0
 800ae32:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800ae3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d140      	bne.n	800aec4 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800ae42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae4a:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800ae4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d202      	bcs.n	800ae5e <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800ae5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae62:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800ae64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d110      	bne.n	800ae8e <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	2300      	movs	r3, #0
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae78:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ae7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae7c:	f7ff fbd2 	bl	800a624 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ae80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae82:	2202      	movs	r2, #2
 800ae84:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ae86:	2302      	movs	r3, #2
 800ae88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ae8c:	e009      	b.n	800aea2 <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ae8e:	2301      	movs	r3, #1
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae9a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ae9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae9e:	f7ff fbc1 	bl	800a624 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800aea2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d10c      	bne.n	800aec4 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800aeaa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	f04f 0300 	mov.w	r3, #0
 800aeb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800aeb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800aebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aec0:	2200      	movs	r2, #0
 800aec2:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800aec4:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3780      	adds	r7, #128	@ 0x80
 800aecc:	46bd      	mov	sp, r7
 800aece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aed2:	bf00      	nop
 800aed4:	0003ffff 	.word	0x0003ffff

0800aed8 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3318      	adds	r3, #24
 800aee8:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800aef0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af28:	461a      	mov	r2, r3
 800af2a:	2364      	movs	r3, #100	@ 0x64
 800af2c:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af36:	461a      	mov	r2, r3
 800af38:	2300      	movs	r3, #0
 800af3a:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af44:	2200      	movs	r2, #0
 800af46:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af50:	461a      	mov	r2, r3
 800af52:	23c8      	movs	r3, #200	@ 0xc8
 800af54:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af5e:	461a      	mov	r2, r3
 800af60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af64:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af6e:	461a      	mov	r2, r3
 800af70:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800af74:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af7e:	461a      	mov	r2, r3
 800af80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800af84:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af8e:	461a      	mov	r2, r3
 800af90:	2380      	movs	r3, #128	@ 0x80
 800af92:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afac:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afba:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afd0:	461a      	mov	r2, r3
 800afd2:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800afd6:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe0:	461a      	mov	r2, r3
 800afe2:	2328      	movs	r3, #40	@ 0x28
 800afe4:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afee:	461a      	mov	r2, r3
 800aff0:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800aff4:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800affe:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b002:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b00c:	461a      	mov	r2, r3
 800b00e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b012:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b01c:	461a      	mov	r2, r3
 800b01e:	2300      	movs	r3, #0
 800b020:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b02a:	461a      	mov	r2, r3
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800b038:	4619      	mov	r1, r3
 800b03a:	f04f 0200 	mov.w	r2, #0
 800b03e:	f04f 0300 	mov.w	r3, #0
 800b042:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b04c:	461a      	mov	r2, r3
 800b04e:	2300      	movs	r3, #0
 800b050:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 f806 	bl	800b066 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b066:	b480      	push	{r7}
 800b068:	b085      	sub	sp, #20
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b078:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2200      	movs	r2, #0
 800b084:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2200      	movs	r2, #0
 800b090:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2200      	movs	r2, #0
 800b096:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3318      	adds	r3, #24
 800b0d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800b104:	3304      	adds	r3, #4
 800b106:	2218      	movs	r2, #24
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f00b fdb8 	bl	8016c80 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b124:	2300      	movs	r3, #0
 800b126:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3318      	adds	r3, #24
 800b12c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b134:	2203      	movs	r2, #3
 800b136:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b140:	2200      	movs	r2, #0
 800b142:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b164:	2200      	movs	r2, #0
 800b166:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b170:	2200      	movs	r2, #0
 800b172:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b188:	461a      	mov	r2, r3
 800b18a:	2300      	movs	r3, #0
 800b18c:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b196:	2200      	movs	r2, #0
 800b198:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800b19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3318      	adds	r3, #24
 800b1bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1c4:	22ff      	movs	r2, #255	@ 0xff
 800b1c6:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1dc:	461a      	mov	r2, r3
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b204:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b214:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d007      	beq.n	800b22c <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b222:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3318      	adds	r3, #24
 800b250:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b252:	2300      	movs	r3, #0
 800b254:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b262:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b272:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800b27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b280:	b2da      	uxtb	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b29a:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b2a2:	4413      	add	r3, r2
 800b2a4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ba:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2c4:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ce:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b2d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800b2fc:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	8a1b      	ldrh	r3, [r3, #16]
 800b306:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	891b      	ldrh	r3, [r3, #8]
 800b30c:	4413      	add	r3, r2
	utemp32a =
 800b30e:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b316:	d302      	bcc.n	800b31e <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b318:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b31c:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	041b      	lsls	r3, r3, #16
 800b322:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b32e:	23f1      	movs	r3, #241	@ 0xf1
 800b330:	75fb      	strb	r3, [r7, #23]
 800b332:	e040      	b.n	800b3b6 <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b33a:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b342:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b34a:	461a      	mov	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b358:	041b      	lsls	r3, r3, #16
 800b35a:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b362:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b36a:	23f1      	movs	r3, #241	@ 0xf1
 800b36c:	75fb      	strb	r3, [r7, #23]
 800b36e:	e022      	b.n	800b3b6 <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b376:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b380:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b388:	d302      	bcc.n	800b390 <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800b38a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b38e:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39a:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a4:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b3b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3ba:	f113 0f0f 	cmn.w	r3, #15
 800b3be:	d114      	bne.n	800b3ea <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b3ca:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d4:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	371c      	adds	r7, #28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b087      	sub	sp, #28
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3318      	adds	r3, #24
 800b408:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800b418:	2b07      	cmp	r3, #7
 800b41a:	bf0c      	ite	eq
 800b41c:	2301      	moveq	r3, #1
 800b41e:	2300      	movne	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b424:	2300      	movs	r3, #0
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	e019      	b.n	800b45e <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b42a:	7df9      	ldrb	r1, [r7, #23]
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	6938      	ldr	r0, [r7, #16]
 800b430:	461a      	mov	r2, r3
 800b432:	0052      	lsls	r2, r2, #1
 800b434:	441a      	add	r2, r3
 800b436:	0153      	lsls	r3, r2, #5
 800b438:	461a      	mov	r2, r3
 800b43a:	460b      	mov	r3, r1
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	440b      	add	r3, r1
 800b440:	019b      	lsls	r3, r3, #6
 800b442:	4413      	add	r3, r2
 800b444:	4403      	add	r3, r0
 800b446:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b44a:	330c      	adds	r3, #12
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dd02      	ble.n	800b458 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b452:	7dbb      	ldrb	r3, [r7, #22]
 800b454:	3301      	adds	r3, #1
 800b456:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	3301      	adds	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b05      	cmp	r3, #5
 800b462:	d9e2      	bls.n	800b42a <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	7dba      	ldrb	r2, [r7, #22]
 800b468:	701a      	strb	r2, [r3, #0]

	return status;
 800b46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b085      	sub	sp, #20
 800b47e:	af00      	add	r7, sp, #0
 800b480:	4603      	mov	r3, r0
 800b482:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b494:	fb92 f3f3 	sdiv	r3, r2, r3
 800b498:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b4a8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4ac:	b089      	sub	sp, #36	@ 0x24
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	f04f 0300 	mov.w	r3, #0
 800b4c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	fb02 f303 	mul.w	r3, r2, r3
 800b4d0:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	0b1b      	lsrs	r3, r3, #12
 800b4d6:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	469a      	mov	sl, r3
 800b4de:	4693      	mov	fp, r2
 800b4e0:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ec:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	091b      	lsrs	r3, r3, #4
 800b4f2:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	4691      	mov	r9, r2
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	fb08 f203 	mul.w	r2, r8, r3
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	fb09 f303 	mul.w	r3, r9, r3
 800b508:	4413      	add	r3, r2
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	fba2 4508 	umull	r4, r5, r2, r8
 800b510:	442b      	add	r3, r5
 800b512:	461d      	mov	r5, r3
 800b514:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800b518:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b51c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	0b02      	lsrs	r2, r0, #12
 800b52a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b52e:	0b0b      	lsrs	r3, r1, #12
 800b530:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d305      	bcc.n	800b548 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800b53c:	f04f 32ff 	mov.w	r2, #4294967295
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b54c:	697b      	ldr	r3, [r7, #20]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3724      	adds	r7, #36	@ 0x24
 800b552:	46bd      	mov	sp, r7
 800b554:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b558:	4770      	bx	lr

0800b55a <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b55a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b55e:	b096      	sub	sp, #88	@ 0x58
 800b560:	af00      	add	r7, sp, #0
 800b562:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b564:	460b      	mov	r3, r1
 800b566:	627a      	str	r2, [r7, #36]	@ 0x24
 800b568:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	f04f 0300 	mov.w	r3, #0
 800b572:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	f04f 0300 	mov.w	r3, #0
 800b57e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	17da      	asrs	r2, r3, #31
 800b58a:	469a      	mov	sl, r3
 800b58c:	4693      	mov	fp, r2
 800b58e:	4652      	mov	r2, sl
 800b590:	465b      	mov	r3, fp
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f04f 0100 	mov.w	r1, #0
 800b59a:	0159      	lsls	r1, r3, #5
 800b59c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b5a0:	0150      	lsls	r0, r2, #5
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	ebb2 040a 	subs.w	r4, r2, sl
 800b5aa:	eb63 050b 	sbc.w	r5, r3, fp
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	f04f 0300 	mov.w	r3, #0
 800b5b6:	00ab      	lsls	r3, r5, #2
 800b5b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b5bc:	00a2      	lsls	r2, r4, #2
 800b5be:	4614      	mov	r4, r2
 800b5c0:	461d      	mov	r5, r3
 800b5c2:	eb14 080a 	adds.w	r8, r4, sl
 800b5c6:	eb45 090b 	adc.w	r9, r5, fp
 800b5ca:	f04f 0200 	mov.w	r2, #0
 800b5ce:	f04f 0300 	mov.w	r3, #0
 800b5d2:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b5d6:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800b5da:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800b5de:	4690      	mov	r8, r2
 800b5e0:	4699      	mov	r9, r3
 800b5e2:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800b5e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00d      	beq.n	800b608 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800b5ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	61bb      	str	r3, [r7, #24]
 800b5f2:	61fa      	str	r2, [r7, #28]
 800b5f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b5fc:	f7f4 fe60 	bl	80002c0 <__aeabi_uldivmod>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d02a      	beq.n	800b664 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b60e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b612:	f04f 0200 	mov.w	r2, #0
 800b616:	f04f 0300 	mov.w	r3, #0
 800b61a:	02cb      	lsls	r3, r1, #11
 800b61c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b620:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b624:	0849      	lsrs	r1, r1, #1
 800b626:	2000      	movs	r0, #0
 800b628:	6139      	str	r1, [r7, #16]
 800b62a:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b62c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b630:	4621      	mov	r1, r4
 800b632:	1851      	adds	r1, r2, r1
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	4629      	mov	r1, r5
 800b638:	eb43 0101 	adc.w	r1, r3, r1
 800b63c:	6079      	str	r1, [r7, #4]
 800b63e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b642:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b648:	2200      	movs	r2, #0
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	60fa      	str	r2, [r7, #12]
 800b64e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b652:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b656:	f7f4 fe33 	bl	80002c0 <__aeabi_uldivmod>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800b662:	e00b      	b.n	800b67c <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b664:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	02cb      	lsls	r3, r1, #11
 800b672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b676:	02c2      	lsls	r2, r0, #11
 800b678:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b67c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b67e:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800b680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b682:	4618      	mov	r0, r3
 800b684:	3758      	adds	r7, #88	@ 0x58
 800b686:	46bd      	mov	sp, r7
 800b688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b68c <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b698:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b69c:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b69e:	e002      	b.n	800b6a6 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	089b      	lsrs	r3, r3, #2
 800b6a4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d8f8      	bhi.n	800b6a0 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b6ae:	e017      	b.n	800b6e0 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d30b      	bcc.n	800b6d4 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e002      	b.n	800b6da <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	085b      	lsrs	r3, r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	089b      	lsrs	r3, r3, #2
 800b6de:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e4      	bne.n	800b6b0 <VL53LX_isqrt+0x24>
	}

	return res;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 faa6 	bl	800bc5c <VL53LX_decode_vcsel_period>
 800b710:	4603      	mov	r3, r0
	period = 2048 *
 800b712:	02db      	lsls	r3, r3, #11
 800b714:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800b720:	461a      	mov	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	4413      	add	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b72e:	02db      	lsls	r3, r3, #11
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b73c:	02db      	lsls	r3, r3, #11
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	fb01 f202 	mul.w	r2, r1, r2
 800b758:	1a9b      	subs	r3, r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e001      	b.n	800b762 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b786:	6838      	ldr	r0, [r7, #0]
 800b788:	f000 fb91 	bl	800beae <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff ff7a 	bl	800b68c <VL53LX_isqrt>
 800b798:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b79a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	3307      	adds	r3, #7
 800b7aa:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	111b      	asrs	r3, r3, #4
 800b7b0:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]
 800b7d2:	e01e      	b.n	800b812 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b7d4:	7bfa      	ldrb	r2, [r7, #15]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	3206      	adds	r2, #6
 800b7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	dd13      	ble.n	800b80c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b7ea:	7bf9      	ldrb	r1, [r7, #15]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	3106      	adds	r1, #6
 800b7f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7f4:	441a      	add	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b802:	3301      	adds	r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	3301      	adds	r3, #1
 800b810:	73fb      	strb	r3, [r7, #15]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	7a9b      	ldrb	r3, [r3, #10]
 800b816:	7bfa      	ldrb	r2, [r7, #15]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d3db      	bcc.n	800b7d4 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01c      	beq.n	800b860 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800b83e:	0852      	lsrs	r2, r2, #1
 800b840:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b842:	441a      	add	r2, r3
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800b856:	fb93 f2f2 	sdiv	r2, r3, r2
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b860:	bf00      	nop
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7b1b      	ldrb	r3, [r3, #12]
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	2b07      	cmp	r3, #7
 800b886:	d13a      	bne.n	800b8fe <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b88c:	2300      	movs	r3, #0
 800b88e:	73bb      	strb	r3, [r7, #14]
 800b890:	e01f      	b.n	800b8d2 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b892:	7bbb      	ldrb	r3, [r7, #14]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	4413      	add	r3, r2
 800b898:	7b1b      	ldrb	r3, [r3, #12]
 800b89a:	f003 0307 	and.w	r3, r3, #7
 800b89e:	2b07      	cmp	r3, #7
 800b8a0:	d014      	beq.n	800b8cc <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b8a2:	7bba      	ldrb	r2, [r7, #14]
 800b8a4:	7b7b      	ldrb	r3, [r7, #13]
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	7b11      	ldrb	r1, [r2, #12]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	460a      	mov	r2, r1
 800b8b2:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b8b4:	7bba      	ldrb	r2, [r7, #14]
 800b8b6:	7b7b      	ldrb	r3, [r7, #13]
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	7c91      	ldrb	r1, [r2, #18]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	460a      	mov	r2, r1
 800b8c4:	749a      	strb	r2, [r3, #18]
				i++;
 800b8c6:	7b7b      	ldrb	r3, [r7, #13]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	73bb      	strb	r3, [r7, #14]
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b05      	cmp	r3, #5
 800b8d6:	d9dc      	bls.n	800b892 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8d8:	7b7b      	ldrb	r3, [r7, #13]
 800b8da:	73bb      	strb	r3, [r7, #14]
 800b8dc:	e00c      	b.n	800b8f8 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	2210      	movs	r2, #16
 800b8e6:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	73bb      	strb	r3, [r7, #14]
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	2b05      	cmp	r3, #5
 800b8fc:	d9ef      	bls.n	800b8de <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	7adb      	ldrb	r3, [r3, #11]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d023      	beq.n	800b94e <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7adb      	ldrb	r3, [r3, #11]
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	e00f      	b.n	800b92e <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b90e:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	7ad2      	ldrb	r2, [r2, #11]
 800b916:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3106      	adds	r1, #6
 800b91c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3206      	adds	r2, #6
 800b924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	3301      	adds	r3, #1
 800b92c:	73fb      	strb	r3, [r7, #15]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7a5b      	ldrb	r3, [r3, #9]
 800b932:	7bfa      	ldrb	r2, [r7, #15]
 800b934:	429a      	cmp	r2, r3
 800b936:	d3ea      	bcc.n	800b90e <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	72da      	strb	r2, [r3, #11]
	}
}
 800b94e:	bf00      	nop
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	4603      	mov	r3, r0
 800b962:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b96c:	88fb      	ldrh	r3, [r7, #6]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff fd83 	bl	800b47a <VL53LX_calc_pll_period_us>
 800b974:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800b97a:	f249 2257 	movw	r2, #37463	@ 0x9257
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b98a:	0c1b      	lsrs	r3, r3, #16
 800b98c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800b98e:	68bb      	ldr	r3, [r7, #8]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800b9a6:	2307      	movs	r3, #7
 800b9a8:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9b4:	db03      	blt.n	800b9be <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800b9b6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	e004      	b.n	800b9c8 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dd01      	ble.n	800b9c8 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ce:	dd02      	ble.n	800b9d6 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	e001      	b.n	800b9da <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800b9d6:	2307      	movs	r3, #7
 800b9d8:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d009      	beq.n	800b9f4 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	409a      	lsls	r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	085b      	lsrs	r3, r3, #1
 800b9ea:	441a      	add	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f2:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9fa:	dd02      	ble.n	800ba02 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba08:	d302      	bcc.n	800ba10 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ba0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba0e:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ba14:	89fb      	ldrh	r3, [r7, #14]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	371c      	adds	r7, #28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b087      	sub	sp, #28
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	603b      	str	r3, [r7, #0]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ba3a:	88fb      	ldrh	r3, [r7, #6]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d010      	beq.n	800ba62 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	021a      	lsls	r2, r3, #8
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4a:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	085b      	lsrs	r3, r3, #1
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ba58:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ba5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	e004      	b.n	800ba6c <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	fa02 f303 	lsl.w	r3, r2, r3
 800ba6a:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d901      	bls.n	800ba78 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ba7c:	8a7b      	ldrh	r3, [r7, #18]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	371c      	adds	r7, #28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
	...

0800ba8c <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba90:	b093      	sub	sp, #76	@ 0x4c
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	461e      	mov	r6, r3
 800ba96:	4603      	mov	r3, r0
 800ba98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ba9e:	4613      	mov	r3, r2
 800baa0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800baa2:	4633      	mov	r3, r6
 800baa4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	f04f 0300 	mov.w	r3, #0
 800bab4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bac0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff fcd9 	bl	800b47a <VL53LX_calc_pll_period_us>
 800bac8:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800baca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bacc:	2200      	movs	r2, #0
 800bace:	623b      	str	r3, [r7, #32]
 800bad0:	627a      	str	r2, [r7, #36]	@ 0x24
 800bad2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bad4:	2200      	movs	r2, #0
 800bad6:	61bb      	str	r3, [r7, #24]
 800bad8:	61fa      	str	r2, [r7, #28]
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bae0:	4602      	mov	r2, r0
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	613b      	str	r3, [r7, #16]
 800bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae8:	460a      	mov	r2, r1
 800baea:	eb63 0302 	sbc.w	r3, r3, r2
 800baee:	617b      	str	r3, [r7, #20]
 800baf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800baf4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800baf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bafa:	2200      	movs	r2, #0
 800bafc:	469a      	mov	sl, r3
 800bafe:	4693      	mov	fp, r2
 800bb00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb02:	fb0a f203 	mul.w	r2, sl, r3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	fb0b f303 	mul.w	r3, fp, r3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb10:	fba2 890a 	umull	r8, r9, r2, sl
 800bb14:	444b      	add	r3, r9
 800bb16:	4699      	mov	r9, r3
 800bb18:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800bb1c:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bb20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	da08      	bge.n	800bb3a <VL53LX_range_maths+0xae>
 800bb28:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800bb2c:	1851      	adds	r1, r2, r1
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	f143 0300 	adc.w	r3, r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb3a:	f04f 0000 	mov.w	r0, #0
 800bb3e:	f04f 0100 	mov.w	r1, #0
 800bb42:	0a50      	lsrs	r0, r2, #9
 800bb44:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bb48:	1259      	asrs	r1, r3, #9
 800bb4a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bb54:	fb03 f202 	mul.w	r2, r3, r2
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	4413      	add	r3, r2
 800bb62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb64:	f249 2157 	movw	r1, #37463	@ 0x9257
 800bb68:	fba2 4501 	umull	r4, r5, r2, r1
 800bb6c:	442b      	add	r3, r5
 800bb6e:	461d      	mov	r5, r3
 800bb70:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800bb74:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bb78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da07      	bge.n	800bb90 <VL53LX_range_maths+0x104>
 800bb80:	4934      	ldr	r1, [pc, #208]	@ (800bc54 <VL53LX_range_maths+0x1c8>)
 800bb82:	1851      	adds	r1, r2, r1
 800bb84:	6039      	str	r1, [r7, #0]
 800bb86:	f143 0300 	adc.w	r3, r3, #0
 800bb8a:	607b      	str	r3, [r7, #4]
 800bb8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb90:	f04f 0000 	mov.w	r0, #0
 800bb94:	f04f 0100 	mov.w	r1, #0
 800bb98:	0d90      	lsrs	r0, r2, #22
 800bb9a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bb9e:	1599      	asrs	r1, r3, #22
 800bba0:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bba8:	4413      	add	r3, r2
 800bbaa:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800bbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bbb0:	fb02 f303 	mul.w	r3, r2, r3
 800bbb4:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800bbb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bbbc:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800bbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	da01      	bge.n	800bbc8 <VL53LX_range_maths+0x13c>
 800bbc4:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800bbc8:	12db      	asrs	r3, r3, #11
 800bbca:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800bbcc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d130      	bne.n	800bc36 <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800bbd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	da00      	bge.n	800bbe8 <VL53LX_range_maths+0x15c>
 800bbe6:	3303      	adds	r3, #3
 800bbe8:	109b      	asrs	r3, r3, #2
 800bbea:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800bbec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bbee:	4b1a      	ldr	r3, [pc, #104]	@ (800bc58 <VL53LX_range_maths+0x1cc>)
 800bbf0:	fb83 2301 	smull	r2, r3, r3, r1
 800bbf4:	109a      	asrs	r2, r3, #2
 800bbf6:	17cb      	asrs	r3, r1, #31
 800bbf8:	1ad2      	subs	r2, r2, r3
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	005b      	lsls	r3, r3, #1
 800bc02:	1aca      	subs	r2, r1, r3
 800bc04:	2a04      	cmp	r2, #4
 800bc06:	dc09      	bgt.n	800bc1c <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0a:	4a13      	ldr	r2, [pc, #76]	@ (800bc58 <VL53LX_range_maths+0x1cc>)
 800bc0c:	fb82 1203 	smull	r1, r2, r2, r3
 800bc10:	1092      	asrs	r2, r2, #2
 800bc12:	17db      	asrs	r3, r3, #31
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	b21b      	sxth	r3, r3
 800bc18:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc1a:	e015      	b.n	800bc48 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1e:	4a0e      	ldr	r2, [pc, #56]	@ (800bc58 <VL53LX_range_maths+0x1cc>)
 800bc20:	fb82 1203 	smull	r1, r2, r2, r3
 800bc24:	1092      	asrs	r2, r2, #2
 800bc26:	17db      	asrs	r3, r3, #31
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	b21b      	sxth	r3, r3
 800bc32:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc34:	e008      	b.n	800bc48 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800bc36:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d104      	bne.n	800bc48 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800bc3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc40:	0fda      	lsrs	r2, r3, #31
 800bc42:	4413      	add	r3, r2
 800bc44:	105b      	asrs	r3, r3, #1
 800bc46:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800bc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	374c      	adds	r7, #76	@ 0x4c
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	003fffff 	.word	0x003fffff
 800bc58:	66666667 	.word	0x66666667

0800bc5c <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7a5a      	ldrb	r2, [r3, #9]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	605a      	str	r2, [r3, #4]
}
 800bcf2:	bf00      	nop
 800bcf4:	370c      	adds	r7, #12
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b087      	sub	sp, #28
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	60f8      	str	r0, [r7, #12]
 800bd06:	460b      	mov	r3, r1
 800bd08:	607a      	str	r2, [r7, #4]
 800bd0a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2203      	movs	r2, #3
 800bd14:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2203      	movs	r2, #3
 800bd1a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2218      	movs	r2, #24
 800bd32:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bd34:	897b      	ldrh	r3, [r7, #10]
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	82fb      	strh	r3, [r7, #22]
 800bdd6:	e009      	b.n	800bdec <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bdd8:	8afb      	ldrh	r3, [r7, #22]
 800bdda:	8afa      	ldrh	r2, [r7, #22]
 800bddc:	b2d1      	uxtb	r1, r2
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4413      	add	r3, r2
 800bde2:	460a      	mov	r2, r1
 800bde4:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bde6:	8afb      	ldrh	r3, [r7, #22]
 800bde8:	3301      	adds	r3, #1
 800bdea:	82fb      	strh	r3, [r7, #22]
 800bdec:	8afb      	ldrh	r3, [r7, #22]
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	d9f2      	bls.n	800bdd8 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	82fb      	strh	r3, [r7, #22]
 800bdf6:	e007      	b.n	800be08 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bdf8:	8afb      	ldrh	r3, [r7, #22]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	2201      	movs	r2, #1
 800be00:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be02:	8afb      	ldrh	r3, [r7, #22]
 800be04:	3301      	adds	r3, #1
 800be06:	82fb      	strh	r3, [r7, #22]
 800be08:	8afb      	ldrh	r3, [r7, #22]
 800be0a:	2b05      	cmp	r3, #5
 800be0c:	d9f4      	bls.n	800bdf8 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800be0e:	2300      	movs	r3, #0
 800be10:	82fb      	strh	r3, [r7, #22]
 800be12:	e013      	b.n	800be3c <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800be14:	8afa      	ldrh	r2, [r7, #22]
 800be16:	897b      	ldrh	r3, [r7, #10]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d206      	bcs.n	800be2a <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800be1c:	8afa      	ldrh	r2, [r7, #22]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3206      	adds	r2, #6
 800be22:	68f9      	ldr	r1, [r7, #12]
 800be24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be28:	e005      	b.n	800be36 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800be2a:	8afa      	ldrh	r2, [r7, #22]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3206      	adds	r2, #6
 800be30:	2100      	movs	r1, #0
 800be32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800be36:	8afb      	ldrh	r3, [r7, #22]
 800be38:	3301      	adds	r3, #1
 800be3a:	82fb      	strh	r3, [r7, #22]
 800be3c:	8afb      	ldrh	r3, [r7, #22]
 800be3e:	2b17      	cmp	r3, #23
 800be40:	d9e8      	bls.n	800be14 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800be5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be62:	2b00      	cmp	r3, #0
 800be64:	da10      	bge.n	800be88 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	43db      	mvns	r3, r3
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	f003 0307 	and.w	r3, r3, #7
 800be70:	b2db      	uxtb	r3, r3
 800be72:	3308      	adds	r3, #8
 800be74:	b2da      	uxtb	r2, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	3b80      	subs	r3, #128	@ 0x80
 800be7e:	10db      	asrs	r3, r3, #3
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800be86:	e00c      	b.n	800bea2 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	f003 0307 	and.w	r3, r3, #7
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800be9a:	10db      	asrs	r3, r3, #3
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	701a      	strb	r2, [r3, #0]
}
 800bea2:	bf00      	nop
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800beae:	b480      	push	{r7}
 800beb0:	b085      	sub	sp, #20
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
 800bebe:	e02c      	b.n	800bf1a <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800becc:	7bf9      	ldrb	r1, [r7, #15]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3106      	adds	r1, #6
 800bed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	db07      	blt.n	800beea <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800beda:	7bfa      	ldrb	r2, [r7, #15]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3206      	adds	r2, #6
 800bee0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d009      	beq.n	800bf04 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800bef6:	7bf9      	ldrb	r1, [r7, #15]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	3106      	adds	r1, #6
 800befc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	dc07      	bgt.n	800bf14 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bf04:	7bfa      	ldrb	r2, [r7, #15]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3206      	adds	r2, #6
 800bf0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	3301      	adds	r3, #1
 800bf18:	73fb      	strb	r3, [r7, #15]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7a9b      	ldrb	r3, [r3, #10]
 800bf1e:	7bfa      	ldrb	r2, [r7, #15]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d3cd      	bcc.n	800bec0 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b085      	sub	sp, #20
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	7adb      	ldrb	r3, [r3, #11]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d03a      	beq.n	800bfbc <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
 800bf5c:	e00e      	b.n	800bf7c <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bf64:	7bf9      	ldrb	r1, [r7, #15]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3106      	adds	r1, #6
 800bf6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf6e:	441a      	add	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	73fb      	strb	r3, [r7, #15]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7adb      	ldrb	r3, [r3, #11]
 800bf80:	7bfa      	ldrb	r2, [r7, #15]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d3eb      	bcc.n	800bf5e <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	7ad2      	ldrb	r2, [r2, #11]
 800bf9c:	0852      	lsrs	r2, r2, #1
 800bf9e:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bfa0:	441a      	add	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800bfb2:	fb93 f2f2 	sdiv	r2, r3, r2
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800bfbc:	bf00      	nop
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800bfc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfcc:	b0ca      	sub	sp, #296	@ 0x128
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800bfd4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800bfd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800bffa:	f04f 0200 	mov.w	r2, #0
 800bffe:	f04f 0300 	mov.w	r3, #0
 800c002:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c00c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c010:	2300      	movs	r3, #0
 800c012:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c014:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c018:	2300      	movs	r3, #0
 800c01a:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c01c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c020:	2300      	movs	r3, #0
 800c022:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c024:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c028:	2300      	movs	r3, #0
 800c02a:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c02c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c030:	2300      	movs	r3, #0
 800c032:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c034:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c038:	2300      	movs	r3, #0
 800c03a:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c03c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c040:	2300      	movs	r3, #0
 800c042:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800c044:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c048:	2300      	movs	r3, #0
 800c04a:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800c04c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c050:	2300      	movs	r3, #0
 800c052:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c058:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80e1 	beq.w	800c224 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800c062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 80da 	beq.w	800c224 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c070:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c074:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff f9fe 	bl	800b47a <VL53LX_calc_pll_period_us>
 800c07e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c08a:	3301      	adds	r3, #1
 800c08c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c094:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c098:	2110      	movs	r1, #16
 800c09a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800c09e:	f7ff fa03 	bl	800b4a8 <VL53LX_duration_maths>
 800c0a2:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c0a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0a8:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c0aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c0b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f7ff fc6c 	bl	800b998 <VL53LX_rate_maths>
 800c0c0:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c0c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0c6:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c0c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0cc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800c0d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0d4:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800c0d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f7ff fa3b 	bl	800b55a <VL53LX_events_per_spad_maths>
 800c0e4:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c0e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0ea:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c0ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0f0:	8adb      	ldrh	r3, [r3, #22]
 800c0f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0f6:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0fc:	8adb      	ldrh	r3, [r3, #22]
 800c0fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c102:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c104:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 808a 	beq.w	800c224 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c114:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c116:	b29b      	uxth	r3, r3
 800c118:	2200      	movs	r2, #0
 800c11a:	461c      	mov	r4, r3
 800c11c:	4615      	mov	r5, r2
 800c11e:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800c122:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c126:	4622      	mov	r2, r4
 800c128:	462b      	mov	r3, r5
 800c12a:	f04f 0000 	mov.w	r0, #0
 800c12e:	f04f 0100 	mov.w	r1, #0
 800c132:	0159      	lsls	r1, r3, #5
 800c134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c138:	0150      	lsls	r0, r2, #5
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	ebb2 0804 	subs.w	r8, r2, r4
 800c142:	eb63 0905 	sbc.w	r9, r3, r5
 800c146:	f04f 0200 	mov.w	r2, #0
 800c14a:	f04f 0300 	mov.w	r3, #0
 800c14e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c152:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c156:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c15a:	4690      	mov	r8, r2
 800c15c:	4699      	mov	r9, r3
 800c15e:	eb18 0a04 	adds.w	sl, r8, r4
 800c162:	eb49 0b05 	adc.w	fp, r9, r5
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c172:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c17a:	4692      	mov	sl, r2
 800c17c:	469b      	mov	fp, r3
 800c17e:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800c182:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c186:	f04f 0000 	mov.w	r0, #0
 800c18a:	f04f 0100 	mov.w	r1, #0
 800c18e:	0319      	lsls	r1, r3, #12
 800c190:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c194:	0310      	lsls	r0, r2, #12
 800c196:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800c19a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	085b      	lsrs	r3, r3, #1
 800c1a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800c1a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c1b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c1b8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800c1bc:	4621      	mov	r1, r4
 800c1be:	1851      	adds	r1, r2, r1
 800c1c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	eb43 0101 	adc.w	r1, r3, r1
 800c1c8:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800c1ca:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c1ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800c1d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1de:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c1e2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c1e6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c1ea:	f7f4 f869 	bl	80002c0 <__aeabi_uldivmod>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c1f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1fa:	8adb      	ldrh	r3, [r3, #22]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c204:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c208:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c20c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c210:	4621      	mov	r1, r4
 800c212:	428a      	cmp	r2, r1
 800c214:	4629      	mov	r1, r5
 800c216:	418b      	sbcs	r3, r1
 800c218:	d204      	bcs.n	800c224 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c21a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c21e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c222:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c224:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 82e9 	beq.w	800c802 <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800c230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c234:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 82e2 	beq.w	800c802 <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800c23e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c242:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 82dc 	beq.w	800c802 <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800c24a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 82d5 	beq.w	800c802 <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c258:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	2200      	movs	r2, #0
 800c262:	653b      	str	r3, [r7, #80]	@ 0x50
 800c264:	657a      	str	r2, [r7, #84]	@ 0x54
 800c266:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800c26a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800c26e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c272:	4622      	mov	r2, r4
 800c274:	462b      	mov	r3, r5
 800c276:	f04f 0000 	mov.w	r0, #0
 800c27a:	f04f 0100 	mov.w	r1, #0
 800c27e:	0159      	lsls	r1, r3, #5
 800c280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c284:	0150      	lsls	r0, r2, #5
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	1b11      	subs	r1, r2, r4
 800c28c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c28e:	eb63 0305 	sbc.w	r3, r3, r5
 800c292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c294:	f04f 0200 	mov.w	r2, #0
 800c298:	f04f 0300 	mov.w	r3, #0
 800c29c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	008b      	lsls	r3, r1, #2
 800c2a4:	4641      	mov	r1, r8
 800c2a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2aa:	4641      	mov	r1, r8
 800c2ac:	008a      	lsls	r2, r1, #2
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	191b      	adds	r3, r3, r4
 800c2b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	eb45 0303 	adc.w	r3, r5, r3
 800c2be:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c0:	f04f 0200 	mov.w	r2, #0
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	02cb      	lsls	r3, r1, #11
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	02ca      	lsls	r2, r1, #11
 800c2da:	461c      	mov	r4, r3
 800c2dc:	4613      	mov	r3, r2
 800c2de:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c2e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	085b      	lsrs	r3, r3, #1
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800c2f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2fa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c2fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c302:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800c306:	4621      	mov	r1, r4
 800c308:	1851      	adds	r1, r2, r1
 800c30a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c30c:	4629      	mov	r1, r5
 800c30e:	eb43 0101 	adc.w	r1, r3, r1
 800c312:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c314:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c318:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c31c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
 800c324:	2200      	movs	r2, #0
 800c326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c32a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c32e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c332:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c336:	f7f3 ffc3 	bl	80002c0 <__aeabi_uldivmod>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c342:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c346:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c34a:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c34c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	011a      	lsls	r2, r3, #4
 800c354:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c358:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c35a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2200      	movs	r2, #0
 800c362:	633b      	str	r3, [r7, #48]	@ 0x30
 800c364:	637a      	str	r2, [r7, #52]	@ 0x34
 800c366:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c36a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c36e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c37a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c37e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c382:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c386:	4622      	mov	r2, r4
 800c388:	fb02 f203 	mul.w	r2, r2, r3
 800c38c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c390:	4629      	mov	r1, r5
 800c392:	fb01 f303 	mul.w	r3, r1, r3
 800c396:	441a      	add	r2, r3
 800c398:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c39c:	4621      	mov	r1, r4
 800c39e:	fba3 1301 	umull	r1, r3, r3, r1
 800c3a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c3b0:	18d3      	adds	r3, r2, r3
 800c3b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c3b6:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800c3ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c3be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c3c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c3c6:	8b5b      	ldrh	r3, [r3, #26]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3d0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c3d8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c3dc:	4622      	mov	r2, r4
 800c3de:	fb02 f203 	mul.w	r2, r2, r3
 800c3e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	441a      	add	r2, r3
 800c3ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	fba3 1301 	umull	r1, r3, r3, r1
 800c3f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c406:	18d3      	adds	r3, r2, r3
 800c408:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c40c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800c410:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c414:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c418:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c41c:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c420:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c422:	f143 0300 	adc.w	r3, r3, #0
 800c426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c428:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c42c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c430:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c434:	f04f 0000 	mov.w	r0, #0
 800c438:	f04f 0100 	mov.w	r1, #0
 800c43c:	0cd0      	lsrs	r0, r2, #19
 800c43e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c442:	0cd9      	lsrs	r1, r3, #19
 800c444:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800c448:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c44c:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c450:	6239      	str	r1, [r7, #32]
 800c452:	f143 0300 	adc.w	r3, r3, #0
 800c456:	627b      	str	r3, [r7, #36]	@ 0x24
 800c458:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c45c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800c460:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c464:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	f7f3 ff28 	bl	80002c0 <__aeabi_uldivmod>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c478:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c47c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c480:	f173 0300 	sbcs.w	r3, r3, #0
 800c484:	d305      	bcc.n	800c492 <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800c486:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c48a:	f04f 0300 	mov.w	r3, #0
 800c48e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c492:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c496:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c49a:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c49c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	61bb      	str	r3, [r7, #24]
 800c4a6:	61fa      	str	r2, [r7, #28]
 800c4a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c4ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c4b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c4c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c4c4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800c4c8:	4622      	mov	r2, r4
 800c4ca:	fb02 f203 	mul.w	r2, r2, r3
 800c4ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	fb01 f303 	mul.w	r3, r1, r3
 800c4d8:	441a      	add	r2, r3
 800c4da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4de:	4621      	mov	r1, r4
 800c4e0:	fba3 1301 	umull	r1, r3, r3, r1
 800c4e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4f2:	18d3      	adds	r3, r2, r3
 800c4f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4f8:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800c4fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c500:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c504:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c508:	8b5b      	ldrh	r3, [r3, #26]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c512:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c51a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c51e:	4622      	mov	r2, r4
 800c520:	fb02 f203 	mul.w	r2, r2, r3
 800c524:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c528:	4629      	mov	r1, r5
 800c52a:	fb01 f303 	mul.w	r3, r1, r3
 800c52e:	441a      	add	r2, r3
 800c530:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c534:	4621      	mov	r1, r4
 800c536:	fba3 1301 	umull	r1, r3, r3, r1
 800c53a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c53e:	460b      	mov	r3, r1
 800c540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c548:	18d3      	adds	r3, r2, r3
 800c54a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c54e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800c552:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c556:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c55a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c55e:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c562:	6139      	str	r1, [r7, #16]
 800c564:	f143 0300 	adc.w	r3, r3, #0
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c56e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c572:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c576:	f04f 0000 	mov.w	r0, #0
 800c57a:	f04f 0100 	mov.w	r1, #0
 800c57e:	0cd0      	lsrs	r0, r2, #19
 800c580:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c584:	0cd9      	lsrs	r1, r3, #19
 800c586:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800c58a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800c58e:	2200      	movs	r2, #0
 800c590:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c592:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800c594:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c598:	891b      	ldrh	r3, [r3, #8]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	2200      	movs	r2, #0
 800c59e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c5a0:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800c5a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c5ac:	4642      	mov	r2, r8
 800c5ae:	fb02 f203 	mul.w	r2, r2, r3
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4641      	mov	r1, r8
 800c5c0:	fba2 1201 	umull	r1, r2, r2, r1
 800c5c4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c5ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c5d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c5dc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	fb02 f203 	mul.w	r2, r2, r3
 800c5e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	fb01 f303 	mul.w	r3, r1, r3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	fba2 1201 	umull	r1, r2, r2, r1
 800c5fc:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c600:	460a      	mov	r2, r1
 800c602:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800c606:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c60a:	4413      	add	r3, r2
 800c60c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c610:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800c614:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c618:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c61c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c620:	88db      	ldrh	r3, [r3, #6]
 800c622:	b29b      	uxth	r3, r3
 800c624:	2200      	movs	r2, #0
 800c626:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c628:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c62a:	f04f 0200 	mov.w	r2, #0
 800c62e:	f04f 0300 	mov.w	r3, #0
 800c632:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c636:	4629      	mov	r1, r5
 800c638:	01cb      	lsls	r3, r1, #7
 800c63a:	4621      	mov	r1, r4
 800c63c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800c640:	4621      	mov	r1, r4
 800c642:	01ca      	lsls	r2, r1, #7
 800c644:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c648:	1884      	adds	r4, r0, r2
 800c64a:	60bc      	str	r4, [r7, #8]
 800c64c:	eb41 0303 	adc.w	r3, r1, r3
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c656:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c65a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c65e:	88db      	ldrh	r3, [r3, #6]
 800c660:	b29b      	uxth	r3, r3
 800c662:	2200      	movs	r2, #0
 800c664:	663b      	str	r3, [r7, #96]	@ 0x60
 800c666:	667a      	str	r2, [r7, #100]	@ 0x64
 800c668:	f04f 0200 	mov.w	r2, #0
 800c66c:	f04f 0300 	mov.w	r3, #0
 800c670:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c674:	4629      	mov	r1, r5
 800c676:	020b      	lsls	r3, r1, #8
 800c678:	4621      	mov	r1, r4
 800c67a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800c67e:	4621      	mov	r1, r4
 800c680:	020a      	lsls	r2, r1, #8
 800c682:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c686:	f7f3 fe1b 	bl	80002c0 <__aeabi_uldivmod>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c696:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c69a:	6039      	str	r1, [r7, #0]
 800c69c:	f143 0300 	adc.w	r3, r3, #0
 800c6a0:	607b      	str	r3, [r7, #4]
 800c6a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c6a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800c6aa:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c6ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	f7f3 fe03 	bl	80002c0 <__aeabi_uldivmod>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c6c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c6c6:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c6ca:	f173 0300 	sbcs.w	r3, r3, #0
 800c6ce:	d305      	bcc.n	800c6dc <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800c6d0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c6d4:	f04f 0300 	mov.w	r3, #0
 800c6d8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c6dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c6e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c6e4:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c6e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe ffcc 	bl	800b68c <VL53LX_isqrt>
 800c6f4:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c6f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	461a      	mov	r2, r3
 800c700:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c704:	fb02 f303 	mul.w	r3, r2, r3
 800c708:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800c70c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c710:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c712:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c716:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c718:	4293      	cmp	r3, r2
 800c71a:	d218      	bcs.n	800c74e <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c71c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c724:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c728:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800c730:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c734:	021b      	lsls	r3, r3, #8
 800c736:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800c73a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c73e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c742:	429a      	cmp	r2, r3
 800c744:	d203      	bcs.n	800c74e <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800c746:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c74a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c74e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c752:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c754:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c758:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c75a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c75c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c760:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c762:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800c766:	f000 f854 	bl	800c812 <VL53LX_f_002>
 800c76a:	4603      	mov	r3, r0
 800c76c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c76e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c772:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c774:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c77e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c782:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800c786:	461a      	mov	r2, r3
 800c788:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c78c:	fb02 f303 	mul.w	r3, r2, r3
 800c790:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800c794:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c798:	3308      	adds	r3, #8
 800c79a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800c79e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c7a2:	091b      	lsrs	r3, r3, #4
 800c7a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7ac:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c7ae:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c7b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c7b4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c7b6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c7b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7bc:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c7be:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800c7c2:	f000 f826 	bl	800c812 <VL53LX_f_002>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c7ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7ce:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c7d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7d4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c7d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7dc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	da07      	bge.n	800c7f4 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c7e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7e8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c7ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c7f0:	801a      	strh	r2, [r3, #0]
 800c7f2:	e006      	b.n	800c802 <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c7f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7f8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800c7fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c800:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c802:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800c806:	4618      	mov	r0, r3
 800c808:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c80c:	46bd      	mov	sp, r7
 800c80e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c812 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b086      	sub	sp, #24
 800c816:	af00      	add	r7, sp, #0
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	607a      	str	r2, [r7, #4]
 800c81e:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	fb03 f303 	mul.w	r3, r3, r3
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	4413      	add	r3, r2
 800c838:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c83a:	6938      	ldr	r0, [r7, #16]
 800c83c:	f7fe ff26 	bl	800b68c <VL53LX_isqrt>
 800c840:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4413      	add	r3, r2
 800c848:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe ff1c 	bl	800b68c <VL53LX_isqrt>
 800c854:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	fb02 f303 	mul.w	r3, r2, r3
 800c85e:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d009      	beq.n	800c87a <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	4413      	add	r3, r2
 800c86c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	fbb2 f3f3 	udiv	r3, r2, r3
 800c878:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c87a:	697b      	ldr	r3, [r7, #20]

}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2218      	movs	r2, #24
 800c894:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	73fb      	strb	r3, [r7, #15]
 800c8ba:	e01f      	b.n	800c8fc <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c8de:	7bfa      	ldrb	r2, [r7, #15]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	322e      	adds	r2, #46	@ 0x2e
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c8ea:	7bfa      	ldrb	r2, [r7, #15]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3246      	adds	r2, #70	@ 0x46
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	73fb      	strb	r3, [r7, #15]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	785b      	ldrb	r3, [r3, #1]
 800c900:	7bfa      	ldrb	r2, [r7, #15]
 800c902:	429a      	cmp	r2, r3
 800c904:	d3da      	bcc.n	800c8bc <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2208      	movs	r2, #8
 800c912:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c924:	461a      	mov	r2, r3
 800c926:	2118      	movs	r1, #24
 800c928:	2000      	movs	r0, #0
 800c92a:	f7ff f9e8 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800c934:	461a      	mov	r2, r3
 800c936:	2118      	movs	r1, #24
 800c938:	2000      	movs	r0, #0
 800c93a:	f7ff f9e0 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c944:	461a      	mov	r2, r3
 800c946:	2118      	movs	r1, #24
 800c948:	2000      	movs	r0, #0
 800c94a:	f7ff f9d8 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800c954:	461a      	mov	r2, r3
 800c956:	2118      	movs	r1, #24
 800c958:	2000      	movs	r0, #0
 800c95a:	f7ff f9d0 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800c964:	461a      	mov	r2, r3
 800c966:	2118      	movs	r1, #24
 800c968:	2000      	movs	r0, #0
 800c96a:	f7ff f9c8 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c96e:	bf00      	nop
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c976:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c97a:	b090      	sub	sp, #64	@ 0x40
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	61b9      	str	r1, [r7, #24]
 800c980:	617a      	str	r2, [r7, #20]
 800c982:	461a      	mov	r2, r3
 800c984:	4603      	mov	r3, r0
 800c986:	83fb      	strh	r3, [r7, #30]
 800c988:	4613      	mov	r3, r2
 800c98a:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800c99e:	f04f 0200 	mov.w	r2, #0
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c9b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9b8:	7a5a      	ldrb	r2, [r3, #9]
 800c9ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9bc:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c9be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9c0:	7a1a      	ldrb	r2, [r3, #8]
 800c9c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9c4:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c9c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9c8:	7a9a      	ldrb	r2, [r3, #10]
 800c9ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9cc:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c9ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c9d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9d6:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c9d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff f93c 	bl	800bc5c <VL53LX_decode_vcsel_period>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c9e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9ea:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c9ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c9f2:	17da      	asrs	r2, r3, #31
 800c9f4:	60bb      	str	r3, [r7, #8]
 800c9f6:	60fa      	str	r2, [r7, #12]
 800c9f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800ca00:	8bfb      	ldrh	r3, [r7, #30]
 800ca02:	2200      	movs	r2, #0
 800ca04:	4698      	mov	r8, r3
 800ca06:	4691      	mov	r9, r2
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	fb08 f203 	mul.w	r2, r8, r3
 800ca0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca10:	fb09 f303 	mul.w	r3, r9, r3
 800ca14:	4413      	add	r3, r2
 800ca16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca18:	fba2 4508 	umull	r4, r5, r2, r8
 800ca1c:	442b      	add	r3, r5
 800ca1e:	461d      	mov	r5, r3
 800ca20:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800ca24:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800ca28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca2c:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800ca30:	f143 0b00 	adc.w	fp, r3, #0
 800ca34:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800ca38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	da08      	bge.n	800ca52 <VL53LX_f_006+0xdc>
 800ca40:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800ca44:	1851      	adds	r1, r2, r1
 800ca46:	6039      	str	r1, [r7, #0]
 800ca48:	f143 0300 	adc.w	r3, r3, #0
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca52:	f04f 0000 	mov.w	r0, #0
 800ca56:	f04f 0100 	mov.w	r1, #0
 800ca5a:	0b10      	lsrs	r0, r2, #12
 800ca5c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ca60:	1319      	asrs	r1, r3, #12
 800ca62:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ca70:	e062      	b.n	800cb38 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800ca72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca76:	089b      	lsrs	r3, r3, #2
 800ca78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800ca7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ca80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca82:	4413      	add	r3, r2
 800ca84:	7c9b      	ldrb	r3, [r3, #18]
 800ca86:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	dd4f      	ble.n	800cb2e <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800ca8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca90:	7a9b      	ldrb	r3, [r3, #10]
 800ca92:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d20f      	bcs.n	800caba <VL53LX_f_006+0x144>
 800ca9a:	7f7b      	ldrb	r3, [r7, #29]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800caa0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800caa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caa6:	3206      	adds	r2, #6
 800caa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	441a      	add	r2, r3
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	fb02 f303 	mul.w	r3, r2, r3
 800cab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cab8:	e004      	b.n	800cac4 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800caba:	6a3b      	ldr	r3, [r7, #32]
 800cabc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cabe:	fb02 f303 	mul.w	r3, r2, r3
 800cac2:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe fde0 	bl	800b68c <VL53LX_isqrt>
 800cacc:	4603      	mov	r3, r0
 800cace:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	0fda      	lsrs	r2, r3, #31
 800cad4:	4413      	add	r3, r2
 800cad6:	105b      	asrs	r3, r3, #1
 800cad8:	461a      	mov	r2, r3
 800cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cadc:	4413      	add	r3, r2
 800cade:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800cae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	fb92 f3f3 	sdiv	r3, r2, r3
 800cae8:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800caea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	fb02 f303 	mul.w	r3, r2, r3
 800caf2:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800caf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf6:	3308      	adds	r3, #8
 800caf8:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800cafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da00      	bge.n	800cb02 <VL53LX_f_006+0x18c>
 800cb00:	330f      	adds	r3, #15
 800cb02:	111b      	asrs	r3, r3, #4
 800cb04:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800cb06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0a:	4413      	add	r3, r2
 800cb0c:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cb0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	da01      	bge.n	800cb1a <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cb1a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb20:	3216      	adds	r2, #22
 800cb22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cb28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb2c:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cb2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb32:	3301      	adds	r3, #1
 800cb34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb3a:	7a9b      	ldrb	r3, [r3, #10]
 800cb3c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d396      	bcc.n	800ca72 <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800cb44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb46:	2200      	movs	r2, #0
 800cb48:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cb4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb4c:	7a1b      	ldrb	r3, [r3, #8]
 800cb4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb52:	e033      	b.n	800cbbc <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cb54:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb5a:	3206      	adds	r2, #6
 800cb5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb60:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800cb64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb66:	3116      	adds	r1, #22
 800cb68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	dd13      	ble.n	800cb98 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800cb70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb76:	4413      	add	r3, r2
 800cb78:	2201      	movs	r2, #1
 800cb7a:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cb7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb82:	4413      	add	r3, r2
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800cb8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb8c:	791b      	ldrb	r3, [r3, #4]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb94:	711a      	strb	r2, [r3, #4]
 800cb96:	e00c      	b.n	800cbb2 <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cb98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb9e:	4413      	add	r3, r2
 800cba0:	2200      	movs	r2, #0
 800cba2:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cba4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cba8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbaa:	4413      	add	r3, r2
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cbb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cbbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbbe:	7a9b      	ldrb	r3, [r3, #10]
 800cbc0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d3c5      	bcc.n	800cb54 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3740      	adds	r7, #64	@ 0x40
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cbd6 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]
 800cbfa:	e02d      	b.n	800cc58 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	78d2      	ldrb	r2, [r2, #3]
 800cc04:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc08:	fb01 f202 	mul.w	r2, r1, r2
 800cc0c:	1a9b      	subs	r3, r3, r2
 800cc0e:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	789b      	ldrb	r3, [r3, #2]
 800cc14:	7bfa      	ldrb	r2, [r7, #15]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d21b      	bcs.n	800cc52 <VL53LX_f_007+0x7c>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	789b      	ldrb	r3, [r3, #2]
 800cc1e:	7b3a      	ldrb	r2, [r7, #12]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d216      	bcs.n	800cc52 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10f      	bne.n	800cc52 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc32:	7b3b      	ldrb	r3, [r7, #12]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4413      	add	r3, r2
 800cc38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d108      	bne.n	800cc52 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d105      	bne.n	800cc52 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7bfa      	ldrb	r2, [r7, #15]
 800cc4a:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	3301      	adds	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	78db      	ldrb	r3, [r3, #3]
 800cc5c:	7bfa      	ldrb	r2, [r7, #15]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d3cc      	bcc.n	800cbfc <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc62:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b085      	sub	sp, #20
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cc90:	73fb      	strb	r3, [r7, #15]
 800cc92:	e05a      	b.n	800cd4a <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	78da      	ldrb	r2, [r3, #3]
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc9e:	fb01 f202 	mul.w	r2, r1, r2
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	78d2      	ldrb	r2, [r2, #3]
 800ccae:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccb2:	fb01 f202 	mul.w	r2, r1, r2
 800ccb6:	1a9b      	subs	r3, r3, r2
 800ccb8:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	789b      	ldrb	r3, [r3, #2]
 800ccbe:	7b7a      	ldrb	r2, [r7, #13]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d23f      	bcs.n	800cd44 <VL53LX_f_008+0xd2>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	789b      	ldrb	r3, [r3, #2]
 800ccc8:	7b3a      	ldrb	r2, [r7, #12]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d23a      	bcs.n	800cd44 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800ccce:	7b7b      	ldrb	r3, [r7, #13]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10e      	bne.n	800ccfa <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800ccdc:	7b3b      	ldrb	r3, [r7, #12]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4413      	add	r3, r2
 800cce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d107      	bne.n	800ccfa <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d905      	bls.n	800cd16 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cd16:	7b7b      	ldrb	r3, [r7, #13]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d009      	beq.n	800cd38 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cd24:	7b7b      	ldrb	r3, [r7, #13]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	4413      	add	r3, r2
 800cd30:	460a      	mov	r2, r1
 800cd32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd36:	e005      	b.n	800cd44 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cd38:	7b7b      	ldrb	r3, [r7, #13]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	3301      	adds	r3, #1
 800cd48:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cd4a:	7bfa      	ldrb	r2, [r7, #15]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cd52:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cd58:	440b      	add	r3, r1
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	db9a      	blt.n	800cc94 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cd5e:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b087      	sub	sp, #28
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd76:	2300      	movs	r3, #0
 800cd78:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	78db      	ldrb	r3, [r3, #3]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cd96:	7cbb      	ldrb	r3, [r7, #18]
 800cd98:	085b      	lsrs	r3, r3, #1
 800cd9a:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cda2:	75fb      	strb	r3, [r7, #23]
 800cda4:	e0a2      	b.n	800ceec <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	78da      	ldrb	r2, [r3, #3]
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdb0:	fb01 f202 	mul.w	r2, r1, r2
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	78d2      	ldrb	r2, [r2, #3]
 800cdc0:	fb93 f1f2 	sdiv	r1, r3, r2
 800cdc4:	fb01 f202 	mul.w	r2, r1, r2
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	789b      	ldrb	r3, [r3, #2]
 800cdd0:	7d7a      	ldrb	r2, [r7, #21]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	f080 8087 	bcs.w	800cee6 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cddc:	7d3a      	ldrb	r2, [r7, #20]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	f080 8081 	bcs.w	800cee6 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cde4:	7d7b      	ldrb	r3, [r7, #21]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d12f      	bne.n	800ce52 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cdf2:	7d3b      	ldrb	r3, [r7, #20]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d028      	beq.n	800ce52 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800ce00:	7d3b      	ldrb	r3, [r7, #20]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ce14:	7cfa      	ldrb	r2, [r7, #19]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d21b      	bcs.n	800ce52 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce1a:	7cfa      	ldrb	r2, [r7, #19]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	4413      	add	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	7dfa      	ldrb	r2, [r7, #23]
 800ce34:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	22ff      	movs	r2, #255	@ 0xff
 800ce44:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ce52:	7d7b      	ldrb	r3, [r7, #21]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	4413      	add	r3, r2
 800ce58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d042      	beq.n	800cee6 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ce60:	7d3b      	ldrb	r3, [r7, #20]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	4413      	add	r3, r2
 800ce66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d13b      	bne.n	800cee6 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ce6e:	7d7b      	ldrb	r3, [r7, #21]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	4413      	add	r3, r2
 800ce74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ce82:	7cfa      	ldrb	r2, [r7, #19]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d22e      	bcs.n	800cee6 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce88:	7cfa      	ldrb	r2, [r7, #19]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	7dfa      	ldrb	r2, [r7, #23]
 800cea2:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	3301      	adds	r3, #1
 800cebc:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	3301      	adds	r3, #1
 800ced0:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	799b      	ldrb	r3, [r3, #6]
 800ceda:	7cba      	ldrb	r2, [r7, #18]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d202      	bcs.n	800cee6 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	7cba      	ldrb	r2, [r7, #18]
 800cee4:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	3301      	adds	r3, #1
 800ceea:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800ceec:	7dfa      	ldrb	r2, [r7, #23]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cef4:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cefa:	440b      	add	r3, r1
 800cefc:	429a      	cmp	r2, r3
 800cefe:	f6ff af52 	blt.w	800cda6 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf02:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cf06:	4618      	mov	r0, r3
 800cf08:	371c      	adds	r7, #28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b090      	sub	sp, #64	@ 0x40
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	4603      	mov	r3, r0
 800cf1a:	6039      	str	r1, [r7, #0]
 800cf1c:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cf24:	f107 030c 	add.w	r3, r7, #12
 800cf28:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800cf30:	2301      	movs	r3, #1
 800cf32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d965      	bls.n	800d00c <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cf40:	e05f      	b.n	800d002 <VL53LX_f_016+0xf0>

		swapped = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cf4e:	e051      	b.n	800cff4 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cf50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	4613      	mov	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	4413      	add	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	4413      	add	r3, r2
 800cf66:	3304      	adds	r3, #4
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cf6a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cf6e:	4613      	mov	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	3304      	adds	r3, #4
 800cf80:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d118      	bne.n	800cfba <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cf88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8a:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8e:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cf90:	429a      	cmp	r2, r3
 800cf92:	da2a      	bge.n	800cfea <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cf94:	2224      	movs	r2, #36	@ 0x24
 800cf96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf9a:	f009 ff00 	bl	8016d9e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cf9e:	2224      	movs	r2, #36	@ 0x24
 800cfa0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfa4:	f009 fefb 	bl	8016d9e <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cfa8:	2224      	movs	r2, #36	@ 0x24
 800cfaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cfac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfae:	f009 fef6 	bl	8016d9e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800cfb8:	e017      	b.n	800cfea <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800cfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d911      	bls.n	800cfea <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cfc6:	2224      	movs	r2, #36	@ 0x24
 800cfc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cfca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cfcc:	f009 fee7 	bl	8016d9e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cfd0:	2224      	movs	r2, #36	@ 0x24
 800cfd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfd6:	f009 fee2 	bl	8016d9e <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cfda:	2224      	movs	r2, #36	@ 0x24
 800cfdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cfde:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfe0:	f009 fedd 	bl	8016d9e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cfea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfee:	3301      	adds	r3, #1
 800cff0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cffa:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cffe:	429a      	cmp	r2, r3
 800d000:	d3a6      	bcc.n	800cf50 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d002:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d006:	2b00      	cmp	r3, #0
 800d008:	d19b      	bne.n	800cf42 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d00a:	e000      	b.n	800d00e <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d00c:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d00e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800d012:	4618      	mov	r0, r3
 800d014:	3740      	adds	r7, #64	@ 0x40
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b087      	sub	sp, #28
 800d01e:	af00      	add	r7, sp, #0
 800d020:	4603      	mov	r3, r0
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d028:	2300      	movs	r3, #0
 800d02a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d034:	7bfa      	ldrb	r2, [r7, #15]
 800d036:	4613      	mov	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	4413      	add	r3, r2
 800d046:	3304      	adds	r3, #4
 800d048:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2200      	movs	r2, #0
 800d04e:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2200      	movs	r2, #0
 800d054:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	75fb      	strb	r3, [r7, #23]
 800d05c:	e01c      	b.n	800d098 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	78da      	ldrb	r2, [r3, #3]
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	fbb3 f1f2 	udiv	r1, r3, r2
 800d068:	fb01 f202 	mul.w	r2, r1, r2
 800d06c:	1a9b      	subs	r3, r3, r2
 800d06e:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	68da      	ldr	r2, [r3, #12]
 800d074:	7d79      	ldrb	r1, [r7, #21]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	3106      	adds	r1, #6
 800d07a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d07e:	441a      	add	r2, r3
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	441a      	add	r2, r3
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	3301      	adds	r3, #1
 800d096:	75fb      	strb	r3, [r7, #23]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	791b      	ldrb	r3, [r3, #4]
 800d09c:	7dfa      	ldrb	r2, [r7, #23]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d9dd      	bls.n	800d05e <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	68da      	ldr	r2, [r3, #12]
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d0b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	371c      	adds	r7, #28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d0c0:	b590      	push	{r4, r7, lr}
 800d0c2:	b08d      	sub	sp, #52	@ 0x34
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	60ba      	str	r2, [r7, #8]
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d0ee:	7bfa      	ldrb	r2, [r7, #15]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4413      	add	r3, r2
 800d100:	3304      	adds	r3, #4
 800d102:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	789b      	ldrb	r3, [r3, #2]
 800d108:	2bff      	cmp	r3, #255	@ 0xff
 800d10a:	d102      	bne.n	800d112 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2201      	movs	r2, #1
 800d110:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	789b      	ldrb	r3, [r3, #2]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	78d2      	ldrb	r2, [r2, #3]
 800d11a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d11e:	fb01 f202 	mul.w	r2, r1, r2
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800d128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d12c:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	8c3b      	ldrh	r3, [r7, #32]
 800d136:	4413      	add	r3, r2
 800d138:	b29b      	uxth	r3, r3
 800d13a:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d13c:	8c3b      	ldrh	r3, [r7, #32]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	7892      	ldrb	r2, [r2, #2]
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	b29b      	uxth	r3, r3
 800d146:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d14c:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	791b      	ldrb	r3, [r3, #4]
 800d152:	461a      	mov	r2, r3
 800d154:	8bfb      	ldrh	r3, [r7, #30]
 800d156:	4413      	add	r3, r2
 800d158:	b29b      	uxth	r3, r3
 800d15a:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d15c:	8bfb      	ldrh	r3, [r7, #30]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	7892      	ldrb	r2, [r2, #2]
 800d162:	1a9b      	subs	r3, r3, r2
 800d164:	b29b      	uxth	r3, r3
 800d166:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d168:	8bfa      	ldrh	r2, [r7, #30]
 800d16a:	8c3b      	ldrh	r3, [r7, #32]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	b29b      	uxth	r3, r3
 800d170:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800d172:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d176:	2b03      	cmp	r3, #3
 800d178:	dd01      	ble.n	800d17e <VL53LX_f_015+0xbe>
		window_width = 3;
 800d17a:	2303      	movs	r3, #3
 800d17c:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d17e:	8c3a      	ldrh	r2, [r7, #32]
 800d180:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d182:	4413      	add	r3, r2
 800d184:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d186:	b219      	sxth	r1, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	78da      	ldrb	r2, [r3, #3]
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	3314      	adds	r3, #20
 800d190:	7bbc      	ldrb	r4, [r7, #14]
 800d192:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	4623      	mov	r3, r4
 800d19e:	f000 f846 	bl	800d22e <VL53LX_f_020>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d1a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d114      	bne.n	800d1da <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d1b0:	8bfa      	ldrh	r2, [r7, #30]
 800d1b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d1b8:	b218      	sxth	r0, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	78da      	ldrb	r2, [r3, #3]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	331c      	adds	r3, #28
 800d1c2:	7bbc      	ldrb	r4, [r7, #14]
 800d1c4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4623      	mov	r3, r4
 800d1d0:	f000 f82d 	bl	800d22e <VL53LX_f_020>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	695a      	ldr	r2, [r3, #20]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d909      	bls.n	800d1fa <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	69da      	ldr	r2, [r3, #28]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	699a      	ldr	r2, [r3, #24]
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	429a      	cmp	r2, r3
 800d204:	d203      	bcs.n	800d20e <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	699a      	ldr	r2, [r3, #24]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	699a      	ldr	r2, [r3, #24]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	429a      	cmp	r2, r3
 800d218:	d903      	bls.n	800d222 <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	699a      	ldr	r2, [r3, #24]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d222:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d226:	4618      	mov	r0, r3
 800d228:	372c      	adds	r7, #44	@ 0x2c
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd90      	pop	{r4, r7, pc}

0800d22e <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d232:	b09d      	sub	sp, #116	@ 0x74
 800d234:	af00      	add	r7, sp, #0
 800d236:	461c      	mov	r4, r3
 800d238:	4603      	mov	r3, r0
 800d23a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d23e:	460b      	mov	r3, r1
 800d240:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d244:	4613      	mov	r3, r2
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24a:	4623      	mov	r3, r4
 800d24c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d250:	2300      	movs	r3, #0
 800d252:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800d262:	f04f 0200 	mov.w	r2, #0
 800d266:	f04f 0300 	mov.w	r3, #0
 800d26a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	f04f 0300 	mov.w	r3, #0
 800d276:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800d27a:	f04f 0200 	mov.w	r2, #0
 800d27e:	f04f 0300 	mov.w	r3, #0
 800d282:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d286:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d28a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d28e:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800d290:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d294:	2b00      	cmp	r3, #0
 800d296:	f000 809c 	beq.w	800d3d2 <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d29a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d29e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d2a2:	e08f      	b.n	800d3c4 <VL53LX_f_020+0x196>

		if (lb < 0)
 800d2a4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	da09      	bge.n	800d2c0 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800d2ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d2b6:	4413      	add	r3, r2
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d2be:	e00a      	b.n	800d2d6 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d2c0:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800d2c4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d2c8:	fb91 f3f2 	sdiv	r3, r1, r2
 800d2cc:	fb02 f303 	mul.w	r3, r2, r3
 800d2d0:	1acb      	subs	r3, r1, r3
 800d2d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d2d6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	db6b      	blt.n	800d3b6 <VL53LX_f_020+0x188>
 800d2de:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2e2:	2b17      	cmp	r3, #23
 800d2e4:	dc67      	bgt.n	800d3b6 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d2e6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d2ee:	3306      	adds	r3, #6
 800d2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f4:	17da      	asrs	r2, r3, #31
 800d2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2f8:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800d2fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d302:	17da      	asrs	r2, r3, #31
 800d304:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d306:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d30e:	4602      	mov	r2, r0
 800d310:	1a9b      	subs	r3, r3, r2
 800d312:	623b      	str	r3, [r7, #32]
 800d314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d316:	460a      	mov	r2, r1
 800d318:	eb63 0302 	sbc.w	r3, r3, r2
 800d31c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d31e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d322:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d326:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <VL53LX_f_020+0x114>
 800d32e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d332:	2b00      	cmp	r3, #0
 800d334:	da05      	bge.n	800d342 <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800d336:	f04f 0200 	mov.w	r2, #0
 800d33a:	f04f 0300 	mov.w	r3, #0
 800d33e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800d342:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800d346:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d34a:	1884      	adds	r4, r0, r2
 800d34c:	61bc      	str	r4, [r7, #24]
 800d34e:	eb41 0303 	adc.w	r3, r1, r3
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d358:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d35c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d360:	17da      	asrs	r2, r3, #31
 800d362:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d364:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d366:	f04f 0200 	mov.w	r2, #0
 800d36a:	f04f 0300 	mov.w	r3, #0
 800d36e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d370:	02cb      	lsls	r3, r1, #11
 800d372:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d374:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d378:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d37a:	02ca      	lsls	r2, r1, #11
 800d37c:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800d380:	f143 0600 	adc.w	r6, r3, #0
 800d384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d386:	fb06 f203 	mul.w	r2, r6, r3
 800d38a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d38c:	fb05 f303 	mul.w	r3, r5, r3
 800d390:	441a      	add	r2, r3
 800d392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d394:	fba3 ab05 	umull	sl, fp, r3, r5
 800d398:	eb02 030b 	add.w	r3, r2, fp
 800d39c:	469b      	mov	fp, r3
			weighted_sum +=
 800d39e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d3a2:	eb12 010a 	adds.w	r1, r2, sl
 800d3a6:	6139      	str	r1, [r7, #16]
 800d3a8:	eb43 030b 	adc.w	r3, r3, fp
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d3b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d3b6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d3c4:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800d3c8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	f77f af69 	ble.w	800d2a4 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d3d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3d6:	2a01      	cmp	r2, #1
 800d3d8:	f173 0300 	sbcs.w	r3, r3, #0
 800d3dc:	db3b      	blt.n	800d456 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800d3de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3e2:	0fd9      	lsrs	r1, r3, #31
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	eb11 0802 	adds.w	r8, r1, r2
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	eb41 0903 	adc.w	r9, r1, r3
 800d3fa:	f04f 0200 	mov.w	r2, #0
 800d3fe:	f04f 0300 	mov.w	r3, #0
 800d402:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d406:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d40a:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d40e:	4610      	mov	r0, r2
 800d410:	4619      	mov	r1, r3
 800d412:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d416:	1814      	adds	r4, r2, r0
 800d418:	603c      	str	r4, [r7, #0]
 800d41a:	414b      	adcs	r3, r1
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d422:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d42a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d42e:	f7f2 fef7 	bl	8000220 <__aeabi_ldivmod>
 800d432:	4602      	mov	r2, r0
 800d434:	460b      	mov	r3, r1
 800d436:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800d43a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da05      	bge.n	800d44e <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800d44e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d450:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d454:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d456:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3774      	adds	r7, #116	@ 0x74
 800d45e:	46bd      	mov	sp, r7
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d464 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	603b      	str	r3, [r7, #0]
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d474:	2300      	movs	r3, #0
 800d476:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d480:	7bfa      	ldrb	r2, [r7, #15]
 800d482:	4613      	mov	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	4413      	add	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	4413      	add	r3, r2
 800d492:	3304      	adds	r3, #4
 800d494:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d496:	22ac      	movs	r2, #172	@ 0xac
 800d498:	68b9      	ldr	r1, [r7, #8]
 800d49a:	6a38      	ldr	r0, [r7, #32]
 800d49c:	f009 fc7f 	bl	8016d9e <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d4a6:	75fb      	strb	r3, [r7, #23]
 800d4a8:	e020      	b.n	800d4ec <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	7dfa      	ldrb	r2, [r7, #23]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d304      	bcc.n	800d4be <VL53LX_f_011+0x5a>
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	791b      	ldrb	r3, [r3, #4]
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d913      	bls.n	800d4e6 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	78da      	ldrb	r2, [r3, #3]
 800d4c2:	7dfb      	ldrb	r3, [r7, #23]
 800d4c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4c8:	fb01 f202 	mul.w	r2, r1, r2
 800d4cc:	1a9b      	subs	r3, r3, r2
 800d4ce:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	7a9b      	ldrb	r3, [r3, #10]
 800d4d4:	7d7a      	ldrb	r2, [r7, #21]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d205      	bcs.n	800d4e6 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d4da:	7d7a      	ldrb	r2, [r7, #21]
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	3206      	adds	r2, #6
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d4ec:	7dfa      	ldrb	r2, [r7, #23]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d4f4:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d4fa:	440b      	add	r3, r1
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	dbd4      	blt.n	800d4aa <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d500:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d510:	b096      	sub	sp, #88	@ 0x58
 800d512:	af08      	add	r7, sp, #32
 800d514:	4604      	mov	r4, r0
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	461a      	mov	r2, r3
 800d51c:	4623      	mov	r3, r4
 800d51e:	73fb      	strb	r3, [r7, #15]
 800d520:	4603      	mov	r3, r0
 800d522:	73bb      	strb	r3, [r7, #14]
 800d524:	460b      	mov	r3, r1
 800d526:	737b      	strb	r3, [r7, #13]
 800d528:	4613      	mov	r3, r2
 800d52a:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d52c:	2300      	movs	r3, #0
 800d52e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d532:	2300      	movs	r3, #0
 800d534:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d546:	2300      	movs	r3, #0
 800d548:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d55e:	7b7b      	ldrb	r3, [r7, #13]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d566:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d56a:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d56c:	f06f 030e 	mvn.w	r3, #14
 800d570:	e06f      	b.n	800d652 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
 800d574:	7b7a      	ldrb	r2, [r7, #13]
 800d576:	fbb3 f1f2 	udiv	r1, r3, r2
 800d57a:	fb01 f202 	mul.w	r2, r1, r2
 800d57e:	1a9b      	subs	r3, r3, r2
 800d580:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800d584:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d588:	7b39      	ldrb	r1, [r7, #12]
 800d58a:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d58e:	f107 0320 	add.w	r3, r7, #32
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	4613      	mov	r3, r2
 800d59c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d59e:	f000 fddb 	bl	800e158 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d5a2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d5a6:	7b39      	ldrb	r1, [r7, #12]
 800d5a8:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d5ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5bc:	f000 fdcc 	bl	800e158 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d5c0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00e      	beq.n	800d5e6 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d5c8:	f107 021c 	add.w	r2, r7, #28
 800d5cc:	7b39      	ldrb	r1, [r7, #12]
 800d5ce:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d5d2:	f107 0314 	add.w	r3, r7, #20
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	f107 0318 	add.w	r3, r7, #24
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d5e2:	f000 fdb9 	bl	800e158 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e8:	469c      	mov	ip, r3
 800d5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f0:	4698      	mov	r8, r3
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	461c      	mov	r4, r3
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	461d      	mov	r5, r3
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	461e      	mov	r6, r3
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800d60c:	607b      	str	r3, [r7, #4]
 800d60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d610:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d614:	7bb8      	ldrb	r0, [r7, #14]
 800d616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d618:	9207      	str	r2, [sp, #28]
 800d61a:	9306      	str	r3, [sp, #24]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	9205      	str	r2, [sp, #20]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	9304      	str	r3, [sp, #16]
 800d624:	9603      	str	r6, [sp, #12]
 800d626:	9502      	str	r5, [sp, #8]
 800d628:	9401      	str	r4, [sp, #4]
 800d62a:	9100      	str	r1, [sp, #0]
 800d62c:	4643      	mov	r3, r8
 800d62e:	4672      	mov	r2, lr
 800d630:	4661      	mov	r1, ip
 800d632:	f002 ff7a 	bl	801052a <VL53LX_f_023>
 800d636:	4603      	mov	r3, r0
 800d638:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d63c:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800d640:	f113 0f0f 	cmn.w	r3, #15
 800d644:	d103      	bne.n	800d64e <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d64c:	801a      	strh	r2, [r3, #0]


	return status;
 800d64e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d652:	4618      	mov	r0, r3
 800d654:	3738      	adds	r7, #56	@ 0x38
 800d656:	46bd      	mov	sp, r7
 800d658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d65c <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d65c:	b490      	push	{r4, r7}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	4604      	mov	r4, r0
 800d664:	4608      	mov	r0, r1
 800d666:	4611      	mov	r1, r2
 800d668:	461a      	mov	r2, r3
 800d66a:	4623      	mov	r3, r4
 800d66c:	71fb      	strb	r3, [r7, #7]
 800d66e:	4603      	mov	r3, r0
 800d670:	71bb      	strb	r3, [r7, #6]
 800d672:	460b      	mov	r3, r1
 800d674:	717b      	strb	r3, [r7, #5]
 800d676:	4613      	mov	r3, r2
 800d678:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	79fa      	ldrb	r2, [r7, #7]
 800d686:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	2200      	movs	r2, #0
 800d68c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	781a      	ldrb	r2, [r3, #0]
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	785a      	ldrb	r2, [r3, #1]
 800d69a:	6a3b      	ldr	r3, [r7, #32]
 800d69c:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	789a      	ldrb	r2, [r3, #2]
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	78da      	ldrb	r2, [r3, #3]
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	791a      	ldrb	r2, [r3, #4]
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	795a      	ldrb	r2, [r3, #5]
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	791a      	ldrb	r2, [r3, #4]
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	8c1a      	ldrh	r2, [r3, #32]
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	6a3b      	ldr	r3, [r7, #32]
 800d702:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	461a      	mov	r2, r3
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	691a      	ldr	r2, [r3, #16]
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	461a      	mov	r2, r3
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	2213      	movs	r2, #19
 800d730:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800d734:	887b      	ldrh	r3, [r7, #2]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00a      	beq.n	800d750 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	8c1b      	ldrh	r3, [r3, #32]
 800d73e:	461a      	mov	r2, r3
 800d740:	887b      	ldrh	r3, [r7, #2]
 800d742:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d744:	429a      	cmp	r2, r3
 800d746:	d903      	bls.n	800d750 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	2206      	movs	r2, #6
 800d74c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d750:	79bb      	ldrb	r3, [r7, #6]
 800d752:	b29b      	uxth	r3, r3
 800d754:	021b      	lsls	r3, r3, #8
 800d756:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	8a9b      	ldrh	r3, [r3, #20]
 800d75c:	89fa      	ldrh	r2, [r7, #14]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d205      	bcs.n	800d76e <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d766:	89fb      	ldrh	r3, [r7, #14]
 800d768:	1ad3      	subs	r3, r2, r3
 800d76a:	81fb      	strh	r3, [r7, #14]
 800d76c:	e001      	b.n	800d772 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d772:	797b      	ldrb	r3, [r7, #5]
 800d774:	b29b      	uxth	r3, r3
 800d776:	021b      	lsls	r3, r3, #8
 800d778:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d780:	89bb      	ldrh	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d78c:	89fa      	ldrh	r2, [r7, #14]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d805      	bhi.n	800d79e <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d798:	89ba      	ldrh	r2, [r7, #12]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d203      	bcs.n	800d7a6 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	2205      	movs	r2, #5
 800d7a2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800d7a6:	bf00      	nop
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bc90      	pop	{r4, r7}
 800d7ae:	4770      	bx	lr

0800d7b0 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b2:	b08f      	sub	sp, #60	@ 0x3c
 800d7b4:	af06      	add	r7, sp, #24
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c8:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d7cc:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d7ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d7d0:	f7ff f858 	bl	800c884 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800d7da:	22ac      	movs	r2, #172	@ 0xac
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f009 fadd 	bl	8016d9e <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	781a      	ldrb	r2, [r3, #0]
 800d7e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7ea:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	785a      	ldrb	r2, [r3, #1]
 800d7f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7f2:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	789a      	ldrb	r2, [r3, #2]
 800d7f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7fa:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800d802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d804:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d808:	2200      	movs	r2, #0
 800d80a:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d80c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d80e:	2204      	movs	r2, #4
 800d810:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d814:	2200      	movs	r2, #0
 800d816:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d818:	2300      	movs	r3, #0
 800d81a:	77bb      	strb	r3, [r7, #30]
 800d81c:	e008      	b.n	800d830 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d81e:	7fbb      	ldrb	r3, [r7, #30]
 800d820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	4413      	add	r3, r2
 800d826:	2200      	movs	r2, #0
 800d828:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d82a:	7fbb      	ldrb	r3, [r7, #30]
 800d82c:	3301      	adds	r3, #1
 800d82e:	77bb      	strb	r3, [r7, #30]
 800d830:	7fbb      	ldrb	r3, [r7, #30]
 800d832:	2b04      	cmp	r3, #4
 800d834:	d9f3      	bls.n	800d81e <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d838:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fd ff59 	bl	800b6f4 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d846:	461a      	mov	r2, r3
 800d848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d84e:	4619      	mov	r1, r3
 800d850:	4610      	mov	r0, r2
 800d852:	f7fd ff8f 	bl	800b774 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d858:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fe fb68 	bl	800bf32 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d864:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd fffd 	bl	800b868 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d874:	2b00      	cmp	r3, #0
 800d876:	d009      	beq.n	800d88c <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d87a:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d880:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800d884:	461a      	mov	r2, r3
 800d886:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d888:	f000 fdae 	bl	800e3e8 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d894:	2300      	movs	r3, #0
 800d896:	77bb      	strb	r3, [r7, #30]
 800d898:	e01e      	b.n	800d8d8 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d89a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d117      	bne.n	800d8d2 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d8a2:	7fbb      	ldrb	r3, [r7, #30]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	4413      	add	r3, r2
 800d8ac:	8898      	ldrh	r0, [r3, #4]
 800d8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d8b4:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8ba:	4413      	add	r3, r2
 800d8bc:	3304      	adds	r3, #4
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	68f9      	ldr	r1, [r7, #12]
 800d8ca:	f7fe fb7d 	bl	800bfc8 <VL53LX_f_001>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d8d2:	7fbb      	ldrb	r3, [r7, #30]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	77bb      	strb	r3, [r7, #30]
 800d8d8:	7fbb      	ldrb	r3, [r7, #30]
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d9dd      	bls.n	800d89a <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d8de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d11a      	bne.n	800d91c <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d8ee:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d900:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d902:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800d906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d908:	9102      	str	r1, [sp, #8]
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	462b      	mov	r3, r5
 800d910:	4622      	mov	r2, r4
 800d912:	4631      	mov	r1, r6
 800d914:	f7ff f82f 	bl	800c976 <VL53LX_f_006>
 800d918:	4603      	mov	r3, r0
 800d91a:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d91c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d104      	bne.n	800d92e <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d924:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d926:	f7ff f956 	bl	800cbd6 <VL53LX_f_007>
 800d92a:	4603      	mov	r3, r0
 800d92c:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d92e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d104      	bne.n	800d940 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d936:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d938:	f7ff f99b 	bl	800cc72 <VL53LX_f_008>
 800d93c:	4603      	mov	r3, r0
 800d93e:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d940:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d948:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d94a:	f7ff fa10 	bl	800cd6e <VL53LX_f_009>
 800d94e:	4603      	mov	r3, r0
 800d950:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d952:	2300      	movs	r3, #0
 800d954:	77bb      	strb	r3, [r7, #30]
 800d956:	e0a6      	b.n	800daa6 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d958:	7fba      	ldrb	r2, [r7, #30]
 800d95a:	4613      	mov	r3, r2
 800d95c:	00db      	lsls	r3, r3, #3
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d966:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d968:	4413      	add	r3, r2
 800d96a:	3304      	adds	r3, #4
 800d96c:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d96e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d978:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d97c:	7fbb      	ldrb	r3, [r7, #30]
 800d97e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fb4a 	bl	800d01a <VL53LX_f_010>
 800d986:	4603      	mov	r3, r0
 800d988:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d98a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d110      	bne.n	800d9b4 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d994:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800d99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a0:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800d9a4:	7fb8      	ldrb	r0, [r7, #30]
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9ac:	f7ff fd5a 	bl	800d464 <VL53LX_f_011>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d9b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10d      	bne.n	800d9d8 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9be:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c4:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800d9c8:	7fb8      	ldrb	r0, [r7, #30]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9d0:	f7ff fd48 	bl	800d464 <VL53LX_f_011>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d9d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10d      	bne.n	800d9fc <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e2:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e8:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800d9ec:	7fb8      	ldrb	r0, [r7, #30]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9f4:	f7ff fd36 	bl	800d464 <VL53LX_f_011>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d9fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d109      	bne.n	800da18 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800da04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da06:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800da0a:	7fb8      	ldrb	r0, [r7, #30]
 800da0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da10:	f000 f8dd 	bl	800dbce <VL53LX_f_026>
 800da14:	4603      	mov	r3, r0
 800da16:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800da18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d108      	bne.n	800da32 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8a19      	ldrh	r1, [r3, #16]
 800da24:	7fb8      	ldrb	r0, [r7, #30]
 800da26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da2a:	f000 f95c 	bl	800dce6 <VL53LX_f_027>
 800da2e:	4603      	mov	r3, r0
 800da30:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800da32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d124      	bne.n	800da84 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	789d      	ldrb	r5, [r3, #2]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7e1e      	ldrb	r6, [r3, #24]
 800da42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da44:	f893 c003 	ldrb.w	ip, [r3, #3]
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	f893 e006 	ldrb.w	lr, [r3, #6]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da56:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800da5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da5c:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800da60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da62:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800da66:	697c      	ldr	r4, [r7, #20]
 800da68:	3420      	adds	r4, #32
 800da6a:	9404      	str	r4, [sp, #16]
 800da6c:	9003      	str	r0, [sp, #12]
 800da6e:	9102      	str	r1, [sp, #8]
 800da70:	9201      	str	r2, [sp, #4]
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	4673      	mov	r3, lr
 800da76:	4662      	mov	r2, ip
 800da78:	4631      	mov	r1, r6
 800da7a:	4628      	mov	r0, r5
 800da7c:	f7ff fd46 	bl	800d50c <VL53LX_f_014>
 800da80:	4603      	mov	r3, r0
 800da82:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800da84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d109      	bne.n	800daa0 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800da8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da8e:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800da92:	7fb8      	ldrb	r0, [r7, #30]
 800da94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da96:	2101      	movs	r1, #1
 800da98:	f7ff fb12 	bl	800d0c0 <VL53LX_f_015>
 800da9c:	4603      	mov	r3, r0
 800da9e:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800daa0:	7fbb      	ldrb	r3, [r7, #30]
 800daa2:	3301      	adds	r3, #1
 800daa4:	77bb      	strb	r3, [r7, #30]
 800daa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa8:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800daac:	7fba      	ldrb	r2, [r7, #30]
 800daae:	429a      	cmp	r2, r3
 800dab0:	f4ff af52 	bcc.w	800d958 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d107      	bne.n	800dacc <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff fa25 	bl	800cf12 <VL53LX_f_016>
 800dac8:	4603      	mov	r3, r0
 800daca:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dacc:	2300      	movs	r3, #0
 800dace:	77bb      	strb	r3, [r7, #30]
 800dad0:	e071      	b.n	800dbb6 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dad2:	7fba      	ldrb	r2, [r7, #30]
 800dad4:	4613      	mov	r3, r2
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	4413      	add	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dae2:	4413      	add	r3, r2
 800dae4:	3304      	adds	r3, #4
 800dae6:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800dae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daea:	7c9a      	ldrb	r2, [r3, #18]
 800daec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daee:	7c5b      	ldrb	r3, [r3, #17]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d25c      	bcs.n	800dbae <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800dafc:	429a      	cmp	r2, r3
 800dafe:	dd57      	ble.n	800dbb0 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800db04:	2bff      	cmp	r3, #255	@ 0xff
 800db06:	d053      	beq.n	800dbb0 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800db08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db0a:	7c9b      	ldrb	r3, [r3, #18]
 800db0c:	461a      	mov	r2, r3
			prange_data =
 800db0e:	234c      	movs	r3, #76	@ 0x4c
 800db10:	fb02 f303 	mul.w	r3, r2, r3
 800db14:	3310      	adds	r3, #16
 800db16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db18:	4413      	add	r3, r2
 800db1a:	3304      	adds	r3, #4
 800db1c:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800db1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d115      	bne.n	800db52 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800db26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db28:	7c98      	ldrb	r0, [r3, #18]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 1020 	ldrb.w	r1, [r3, #32]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	8b5d      	ldrh	r5, [r3, #26]
 800db3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db3c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	9202      	str	r2, [sp, #8]
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	9201      	str	r2, [sp, #4]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	462b      	mov	r3, r5
 800db4c:	4622      	mov	r2, r4
 800db4e:	f7ff fd85 	bl	800d65c <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800db52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d115      	bne.n	800db86 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800db72:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	4623      	mov	r3, r4
 800db7e:	f000 fb44 	bl	800e20a <VL53LX_f_018>
 800db82:	4603      	mov	r3, r0
 800db84:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800db86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d108      	bne.n	800dba0 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	8bd8      	ldrh	r0, [r3, #30]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4619      	mov	r1, r3
 800db9c:	f000 fbda 	bl	800e354 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba2:	7c9b      	ldrb	r3, [r3, #18]
 800dba4:	3301      	adds	r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbaa:	749a      	strb	r2, [r3, #18]
 800dbac:	e000      	b.n	800dbb0 <VL53LX_f_025+0x400>
			continue;
 800dbae:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dbb0:	7fbb      	ldrb	r3, [r7, #30]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	77bb      	strb	r3, [r7, #30]
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbb8:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dbbc:	7fba      	ldrb	r2, [r7, #30]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d387      	bcc.n	800dad2 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dbc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3724      	adds	r7, #36	@ 0x24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbce <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b08c      	sub	sp, #48	@ 0x30
 800dbd2:	af02      	add	r7, sp, #8
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	603b      	str	r3, [r7, #0]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dbe4:	7bfa      	ldrb	r2, [r7, #15]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	00db      	lsls	r3, r3, #3
 800dbea:	4413      	add	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	785a      	ldrb	r2, [r3, #1]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	789a      	ldrb	r2, [r3, #2]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc30:	e04d      	b.n	800dcce <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	78da      	ldrb	r2, [r3, #3]
 800dc36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc3e:	fb01 f202 	mul.w	r2, r1, r2
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	7999      	ldrb	r1, [r3, #6]
 800dc4a:	f107 0218 	add.w	r2, r7, #24
 800dc4e:	7ff8      	ldrb	r0, [r7, #31]
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	f107 0314 	add.w	r3, r7, #20
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	f000 fa7a 	bl	800e158 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800dc64:	7ffb      	ldrb	r3, [r7, #31]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	440b      	add	r3, r1
 800dc6e:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800dc70:	7ffb      	ldrb	r3, [r7, #31]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	3318      	adds	r3, #24
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	440b      	add	r3, r1
 800dc7c:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dc7e:	7ffb      	ldrb	r3, [r7, #31]
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	3330      	adds	r3, #48	@ 0x30
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	440b      	add	r3, r1
 800dc8a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800dc9a:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800dc9c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800dc9e:	6839      	ldr	r1, [r7, #0]
 800dca0:	3348      	adds	r3, #72	@ 0x48
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	440b      	add	r3, r1
 800dca6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	689a      	ldr	r2, [r3, #8]
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800dcb6:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800dcb8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	3360      	adds	r3, #96	@ 0x60
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	440b      	add	r3, r1
 800dcc2:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcc8:	3301      	adds	r3, #1
 800dcca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dcce:	6a3b      	ldr	r3, [r7, #32]
 800dcd0:	791b      	ldrb	r3, [r3, #4]
 800dcd2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d9ab      	bls.n	800dc32 <VL53LX_f_026+0x64>
	}

	return status;
 800dcda:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3728      	adds	r7, #40	@ 0x28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800dce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce8:	b08f      	sub	sp, #60	@ 0x3c
 800dcea:	af06      	add	r7, sp, #24
 800dcec:	60ba      	str	r2, [r7, #8]
 800dcee:	607b      	str	r3, [r7, #4]
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dd00:	7bfa      	ldrb	r2, [r7, #15]
 800dd02:	4613      	mov	r3, r2
 800dd04:	00db      	lsls	r3, r3, #3
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	4413      	add	r3, r2
 800dd12:	3304      	adds	r3, #4
 800dd14:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	77fb      	strb	r3, [r7, #31]
 800dd28:	e0b9      	b.n	800de9e <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	78da      	ldrb	r2, [r3, #3]
 800dd2e:	7ffb      	ldrb	r3, [r7, #31]
 800dd30:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd34:	fb01 f202 	mul.w	r2, r1, r2
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800dd3c:	7ffb      	ldrb	r3, [r7, #31]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	78d2      	ldrb	r2, [r2, #3]
 800dd44:	fb93 f1f2 	sdiv	r1, r3, r2
 800dd48:	fb01 f202 	mul.w	r2, r1, r2
 800dd4c:	1a9b      	subs	r3, r3, r2
 800dd4e:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	789b      	ldrb	r3, [r3, #2]
 800dd54:	7dfa      	ldrb	r2, [r7, #23]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	f080 809e 	bcs.w	800de98 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800dd60:	7dba      	ldrb	r2, [r7, #22]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	f080 8098 	bcs.w	800de98 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	3348      	adds	r3, #72	@ 0x48
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4413      	add	r3, r2
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10e      	bne.n	800dd96 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	3360      	adds	r3, #96	@ 0x60
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d106      	bne.n	800dd96 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800dd88:	7dfb      	ldrb	r3, [r7, #23]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800dd94:	e043      	b.n	800de1e <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	3348      	adds	r3, #72	@ 0x48
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	db0e      	blt.n	800ddc4 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	3360      	adds	r3, #96	@ 0x60
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	db06      	blt.n	800ddc4 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	4413      	add	r3, r2
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800ddc2:	e02c      	b.n	800de1e <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	3348      	adds	r3, #72	@ 0x48
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da1e      	bge.n	800de12 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	3360      	adds	r3, #96	@ 0x60
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	db16      	blt.n	800de12 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dde4:	7dbb      	ldrb	r3, [r7, #22]
 800dde6:	68ba      	ldr	r2, [r7, #8]
 800dde8:	3348      	adds	r3, #72	@ 0x48
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	db0e      	blt.n	800de12 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ddf4:	7dbb      	ldrb	r3, [r7, #22]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	3360      	adds	r3, #96	@ 0x60
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800de00:	2b00      	cmp	r3, #0
 800de02:	da06      	bge.n	800de12 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800de04:	7dfb      	ldrb	r3, [r7, #23]
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	4413      	add	r3, r2
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800de10:	e005      	b.n	800de1e <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800de12:	7dfb      	ldrb	r3, [r7, #23]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	4413      	add	r3, r2
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800de1e:	7dfb      	ldrb	r3, [r7, #23]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	4413      	add	r3, r2
 800de24:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d035      	beq.n	800de98 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	7ffa      	ldrb	r2, [r7, #31]
 800de30:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	685c      	ldr	r4, [r3, #4]
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	3318      	adds	r3, #24
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	685d      	ldr	r5, [r3, #4]
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	3330      	adds	r3, #48	@ 0x30
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	685e      	ldr	r6, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	78d2      	ldrb	r2, [r2, #3]
 800de5c:	69b9      	ldr	r1, [r7, #24]
 800de5e:	3118      	adds	r1, #24
 800de60:	7ff8      	ldrb	r0, [r7, #31]
 800de62:	9105      	str	r1, [sp, #20]
 800de64:	9204      	str	r2, [sp, #16]
 800de66:	9303      	str	r3, [sp, #12]
 800de68:	2300      	movs	r3, #0
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	2300      	movs	r3, #0
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	4633      	mov	r3, r6
 800de76:	462a      	mov	r2, r5
 800de78:	4621      	mov	r1, r4
 800de7a:	f000 f81c 	bl	800deb6 <VL53LX_f_028>
 800de7e:	4603      	mov	r3, r0
 800de80:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800de82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de86:	f113 0f0f 	cmn.w	r3, #15
 800de8a:	d105      	bne.n	800de98 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	4413      	add	r3, r2
 800de92:	2200      	movs	r2, #0
 800de94:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800de98:	7ffb      	ldrb	r3, [r7, #31]
 800de9a:	3301      	adds	r3, #1
 800de9c:	77fb      	strb	r3, [r7, #31]
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	791b      	ldrb	r3, [r3, #4]
 800dea2:	7ffa      	ldrb	r2, [r7, #31]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	f4ff af40 	bcc.w	800dd2a <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800deaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3724      	adds	r7, #36	@ 0x24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800deb6 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800deb6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800deba:	b0b2      	sub	sp, #200	@ 0xc8
 800debc:	af00      	add	r7, sp, #0
 800debe:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800dec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deca:	4603      	mov	r3, r0
 800decc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ded0:	23f1      	movs	r3, #241	@ 0xf1
 800ded2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800ded6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800deda:	f04f 0300 	mov.w	r3, #0
 800dede:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800dee2:	f04f 0200 	mov.w	r2, #0
 800dee6:	f04f 0300 	mov.w	r3, #0
 800deea:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800deee:	f04f 0200 	mov.w	r2, #0
 800def2:	f04f 0300 	mov.w	r3, #0
 800def6:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800defa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800defe:	17da      	asrs	r2, r3, #31
 800df00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800df0c:	17da      	asrs	r2, r3, #31
 800df0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800df12:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800df1e:	4602      	mov	r2, r0
 800df20:	ebb3 0802 	subs.w	r8, r3, r2
 800df24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df28:	460a      	mov	r2, r1
 800df2a:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800df32:	17da      	asrs	r2, r3, #31
 800df34:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800df38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800df3c:	460b      	mov	r3, r1
 800df3e:	ebb8 0a03 	subs.w	sl, r8, r3
 800df42:	4613      	mov	r3, r2
 800df44:	eb69 0b03 	sbc.w	fp, r9, r3
 800df48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df4c:	17da      	asrs	r2, r3, #31
 800df4e:	673b      	str	r3, [r7, #112]	@ 0x70
 800df50:	677a      	str	r2, [r7, #116]	@ 0x74
 800df52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800df56:	460b      	mov	r3, r1
 800df58:	ebba 0403 	subs.w	r4, sl, r3
 800df5c:	4613      	mov	r3, r2
 800df5e:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df62:	f04f 0200 	mov.w	r2, #0
 800df66:	f04f 0300 	mov.w	r3, #0
 800df6a:	032b      	lsls	r3, r5, #12
 800df6c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800df70:	0322      	lsls	r2, r4, #12
 800df72:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df7a:	17da      	asrs	r2, r3, #31
 800df7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800df7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800df80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800df84:	17da      	asrs	r2, r3, #31
 800df86:	663b      	str	r3, [r7, #96]	@ 0x60
 800df88:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df8a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800df8e:	4623      	mov	r3, r4
 800df90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800df94:	4602      	mov	r2, r0
 800df96:	1a9b      	subs	r3, r3, r2
 800df98:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df9a:	462b      	mov	r3, r5
 800df9c:	460a      	mov	r2, r1
 800df9e:	eb63 0302 	sbc.w	r3, r3, r2
 800dfa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfa8:	17da      	asrs	r2, r3, #31
 800dfaa:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfac:	657a      	str	r2, [r7, #84]	@ 0x54
 800dfae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800dfb2:	4623      	mov	r3, r4
 800dfb4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800dfb8:	4602      	mov	r2, r0
 800dfba:	1a9b      	subs	r3, r3, r2
 800dfbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	460a      	mov	r2, r1
 800dfc2:	eb63 0302 	sbc.w	r3, r3, r2
 800dfc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dfc8:	f04f 0200 	mov.w	r2, #0
 800dfcc:	f04f 0300 	mov.w	r3, #0
 800dfd0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	030b      	lsls	r3, r1, #12
 800dfd8:	4621      	mov	r1, r4
 800dfda:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800dfde:	4621      	mov	r1, r4
 800dfe0:	030a      	lsls	r2, r1, #12
 800dfe2:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800dfe6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800dfea:	4313      	orrs	r3, r2
 800dfec:	f000 80a8 	beq.w	800e140 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800dff0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800dff4:	f04f 0000 	mov.w	r0, #0
 800dff8:	f04f 0100 	mov.w	r1, #0
 800dffc:	0319      	lsls	r1, r3, #12
 800dffe:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e002:	0310      	lsls	r0, r2, #12
 800e004:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e008:	1814      	adds	r4, r2, r0
 800e00a:	633c      	str	r4, [r7, #48]	@ 0x30
 800e00c:	414b      	adcs	r3, r1
 800e00e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e010:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e014:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e018:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e01c:	1891      	adds	r1, r2, r2
 800e01e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e020:	415b      	adcs	r3, r3
 800e022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e028:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e02c:	f7f2 f8f8 	bl	8000220 <__aeabi_ldivmod>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800e038:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e03c:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800e040:	6239      	str	r1, [r7, #32]
 800e042:	f143 0300 	adc.w	r3, r3, #0
 800e046:	627b      	str	r3, [r7, #36]	@ 0x24
 800e048:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e04c:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800e050:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e054:	2200      	movs	r2, #0
 800e056:	643b      	str	r3, [r7, #64]	@ 0x40
 800e058:	647a      	str	r2, [r7, #68]	@ 0x44
 800e05a:	f04f 0200 	mov.w	r2, #0
 800e05e:	f04f 0300 	mov.w	r3, #0
 800e062:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e066:	4629      	mov	r1, r5
 800e068:	030b      	lsls	r3, r1, #12
 800e06a:	4621      	mov	r1, r4
 800e06c:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e070:	4621      	mov	r1, r4
 800e072:	030a      	lsls	r2, r1, #12
 800e074:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e078:	1884      	adds	r4, r0, r2
 800e07a:	61bc      	str	r4, [r7, #24]
 800e07c:	eb41 0303 	adc.w	r3, r1, r3
 800e080:	61fb      	str	r3, [r7, #28]
 800e082:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e086:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e08a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e08e:	1c51      	adds	r1, r2, #1
 800e090:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e092:	f143 0300 	adc.w	r3, r3, #0
 800e096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e098:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e09c:	460b      	mov	r3, r1
 800e09e:	0fdb      	lsrs	r3, r3, #31
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	617a      	str	r2, [r7, #20]
 800e0a6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e0aa:	4623      	mov	r3, r4
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	189b      	adds	r3, r3, r2
 800e0b0:	60bb      	str	r3, [r7, #8]
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	eb42 0303 	adc.w	r3, r2, r3
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	f04f 0200 	mov.w	r2, #0
 800e0c0:	f04f 0300 	mov.w	r3, #0
 800e0c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	084a      	lsrs	r2, r1, #1
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	104b      	asrs	r3, r1, #1
 800e0d6:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800e0da:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da05      	bge.n	800e0ee <VL53LX_f_028+0x238>
			mean_phase = 0;
 800e0e2:	f04f 0200 	mov.w	r2, #0
 800e0e6:	f04f 0300 	mov.w	r3, #0
 800e0ea:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e0ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e0f2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e0f6:	f173 0300 	sbcs.w	r3, r3, #0
 800e0fa:	db05      	blt.n	800e108 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e0fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e100:	f04f 0300 	mov.w	r3, #0
 800e104:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800e108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e10c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e110:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800e114:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e11a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e11e:	fb01 f202 	mul.w	r2, r1, r2
 800e122:	1a9b      	subs	r3, r3, r2
 800e124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800e128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e12c:	17da      	asrs	r2, r3, #31
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e136:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800e13a:	2300      	movs	r3, #0
 800e13c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e140:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e148:	601a      	str	r2, [r3, #0]

	return status;
 800e14a:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800e14e:	4618      	mov	r0, r3
 800e150:	37c8      	adds	r7, #200	@ 0xc8
 800e152:	46bd      	mov	sp, r7
 800e154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e158 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e158:	b480      	push	{r7}
 800e15a:	b087      	sub	sp, #28
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60ba      	str	r2, [r7, #8]
 800e160:	607b      	str	r3, [r7, #4]
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]
 800e166:	460b      	mov	r3, r1
 800e168:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e178:	7bfa      	ldrb	r2, [r7, #15]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	3206      	adds	r2, #6
 800e17e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e18c:	2300      	movs	r3, #0
 800e18e:	75fb      	strb	r3, [r7, #23]
 800e190:	e02f      	b.n	800e1f2 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e192:	7bfa      	ldrb	r2, [r7, #15]
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	4413      	add	r3, r2
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	7a92      	ldrb	r2, [r2, #10]
 800e19c:	441a      	add	r2, r3
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
 800e1a0:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	7a92      	ldrb	r2, [r2, #10]
 800e1a6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e1aa:	fb01 f202 	mul.w	r2, r1, r2
 800e1ae:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e1b0:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e1b2:	7dfa      	ldrb	r2, [r7, #23]
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d20a      	bcs.n	800e1d0 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	7db9      	ldrb	r1, [r7, #22]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	3106      	adds	r1, #6
 800e1c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1c8:	441a      	add	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	e00d      	b.n	800e1ec <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e1d0:	7dfa      	ldrb	r2, [r7, #23]
 800e1d2:	7bbb      	ldrb	r3, [r7, #14]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d909      	bls.n	800e1ec <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	7db9      	ldrb	r1, [r7, #22]
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	3106      	adds	r1, #6
 800e1e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1e6:	441a      	add	r2, r3
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ea:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	75fb      	strb	r3, [r7, #23]
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
 800e1f4:	005a      	lsls	r2, r3, #1
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	daca      	bge.n	800e192 <VL53LX_f_022+0x3a>
	}
}
 800e1fc:	bf00      	nop
 800e1fe:	bf00      	nop
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b088      	sub	sp, #32
 800e20e:	af00      	add	r7, sp, #0
 800e210:	60ba      	str	r2, [r7, #8]
 800e212:	461a      	mov	r2, r3
 800e214:	4603      	mov	r3, r0
 800e216:	81fb      	strh	r3, [r7, #14]
 800e218:	460b      	mov	r3, r1
 800e21a:	81bb      	strh	r3, [r7, #12]
 800e21c:	4613      	mov	r3, r2
 800e21e:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e220:	2300      	movs	r3, #0
 800e222:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e232:	89fa      	ldrh	r2, [r7, #14]
 800e234:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e238:	89ba      	ldrh	r2, [r7, #12]
 800e23a:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e244:	88fa      	ldrh	r2, [r7, #6]
 800e246:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24a:	8a5b      	ldrh	r3, [r3, #18]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e250:	23f1      	movs	r3, #241	@ 0xf1
 800e252:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e25c:	23f1      	movs	r3, #241	@ 0xf1
 800e25e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e260:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d16f      	bne.n	800e348 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26a:	8a5b      	ldrh	r3, [r3, #18]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fd f904 	bl	800b47a <VL53LX_calc_pll_period_us>
 800e272:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	3301      	adds	r3, #1
 800e27a:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27e:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e280:	4619      	mov	r1, r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e288:	6978      	ldr	r0, [r7, #20]
 800e28a:	f7fd f90d 	bl	800b4a8 <VL53LX_duration_maths>
 800e28e:	4602      	mov	r2, r0
 800e290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e292:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e298:	0119      	lsls	r1, r3, #4
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2a0:	6978      	ldr	r0, [r7, #20]
 800e2a2:	f7fd f901 	bl	800b4a8 <VL53LX_duration_maths>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b2:	69db      	ldr	r3, [r3, #28]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f7fd fb6e 	bl	800b998 <VL53LX_rate_maths>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	461a      	mov	r2, r3
 800e2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c2:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fd fb62 	bl	800b998 <VL53LX_rate_maths>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2da:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	f7fd fb55 	bl	800b998 <VL53LX_rate_maths>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f4:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e2fa:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800e300:	4413      	add	r3, r2
 800e302:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e304:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d905      	bls.n	800e318 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e30c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e310:	69ba      	ldr	r2, [r7, #24]
 800e312:	fbb2 f3f3 	udiv	r3, r2, r3
 800e316:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31a:	8ada      	ldrh	r2, [r3, #22]
 800e31c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e320:	69b9      	ldr	r1, [r7, #24]
 800e322:	2006      	movs	r0, #6
 800e324:	f7fd fb7d 	bl	800ba22 <VL53LX_rate_per_spad_maths>
 800e328:	4603      	mov	r3, r0
 800e32a:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32e:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e332:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	8ad9      	ldrh	r1, [r3, #22]
 800e338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	461a      	mov	r2, r3
 800e33e:	f7fd f90c 	bl	800b55a <VL53LX_events_per_spad_maths>
 800e342:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e346:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e348:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e354:	b590      	push	{r4, r7, lr}
 800e356:	b085      	sub	sp, #20
 800e358:	af02      	add	r7, sp, #8
 800e35a:	4603      	mov	r3, r0
 800e35c:	603a      	str	r2, [r7, #0]
 800e35e:	80fb      	strh	r3, [r7, #6]
 800e360:	460b      	mov	r3, r1
 800e362:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	8a58      	ldrh	r0, [r3, #18]
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	8a9c      	ldrh	r4, [r3, #20]
 800e370:	88fb      	ldrh	r3, [r7, #6]
 800e372:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e376:	9201      	str	r2, [sp, #4]
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	2300      	movs	r3, #0
 800e37c:	4622      	mov	r2, r4
 800e37e:	f7fd fb85 	bl	800ba8c <VL53LX_range_maths>
 800e382:	4603      	mov	r3, r0
 800e384:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	8a58      	ldrh	r0, [r3, #18]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	8a9c      	ldrh	r4, [r3, #20]
 800e39a:	88fb      	ldrh	r3, [r7, #6]
 800e39c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e3a0:	9201      	str	r2, [sp, #4]
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4622      	mov	r2, r4
 800e3a8:	f7fd fb70 	bl	800ba8c <VL53LX_range_maths>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	8a58      	ldrh	r0, [r3, #18]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	8a9c      	ldrh	r4, [r3, #20]
 800e3c4:	88fb      	ldrh	r3, [r7, #6]
 800e3c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	f7fd fb5b 	bl	800ba8c <VL53LX_range_maths>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800e3e0:	bf00      	nop
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd90      	pop	{r4, r7, pc}

0800e3e8 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e404:	22ac      	movs	r2, #172	@ 0xac
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f008 fcc8 	bl	8016d9e <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e40e:	2300      	movs	r3, #0
 800e410:	75fb      	strb	r3, [r7, #23]
 800e412:	e008      	b.n	800e426 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e414:	7dfa      	ldrb	r2, [r7, #23]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	3206      	adds	r2, #6
 800e41a:	2100      	movs	r1, #0
 800e41c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	3301      	adds	r3, #1
 800e424:	75fb      	strb	r3, [r7, #23]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7a5b      	ldrb	r3, [r3, #9]
 800e42a:	7dfa      	ldrb	r2, [r7, #23]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d3f1      	bcc.n	800e414 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e430:	68f9      	ldr	r1, [r7, #12]
 800e432:	68b8      	ldr	r0, [r7, #8]
 800e434:	f000 f878 	bl	800e528 <VL53LX_f_030>
 800e438:	4603      	mov	r3, r0
 800e43a:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	7a9a      	ldrb	r2, [r3, #10]
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	7a9b      	ldrb	r3, [r3, #10]
 800e444:	429a      	cmp	r2, r3
 800e446:	d203      	bcs.n	800e450 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	7a9b      	ldrb	r3, [r3, #10]
 800e44c:	75bb      	strb	r3, [r7, #22]
 800e44e:	e002      	b.n	800e456 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	7a9b      	ldrb	r3, [r3, #10]
 800e454:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e456:	2300      	movs	r3, #0
 800e458:	75fb      	strb	r3, [r7, #23]
 800e45a:	e05c      	b.n	800e516 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e45c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e460:	2b00      	cmp	r3, #0
 800e462:	db0f      	blt.n	800e484 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e468:	461a      	mov	r2, r3
 800e46a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e46e:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	7a92      	ldrb	r2, [r2, #10]
 800e474:	b252      	sxtb	r2, r2
 800e476:	fb93 f1f2 	sdiv	r1, r3, r2
 800e47a:	fb01 f202 	mul.w	r2, r1, r2
 800e47e:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e480:	757b      	strb	r3, [r7, #21]
 800e482:	e013      	b.n	800e4ac <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	7a9b      	ldrb	r3, [r3, #10]
 800e488:	b25b      	sxtb	r3, r3
 800e48a:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e490:	4619      	mov	r1, r3
 800e492:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e496:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e498:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	7a92      	ldrb	r2, [r2, #10]
 800e49e:	b252      	sxtb	r2, r2
 800e4a0:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4a4:	fb01 f202 	mul.w	r2, r1, r2
 800e4a8:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e4aa:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e4ac:	7d7b      	ldrb	r3, [r7, #21]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	3206      	adds	r2, #6
 800e4b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e4b8:	7df9      	ldrb	r1, [r7, #23]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	3106      	adds	r1, #6
 800e4be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	dd12      	ble.n	800e4ec <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e4c6:	7d7b      	ldrb	r3, [r7, #21]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	3206      	adds	r2, #6
 800e4ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e4d2:	7df9      	ldrb	r1, [r7, #23]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	3106      	adds	r1, #6
 800e4d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e4dc:	7d79      	ldrb	r1, [r7, #21]
 800e4de:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e4e0:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	1d82      	adds	r2, r0, #6
 800e4e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e4ea:	e006      	b.n	800e4fa <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e4ec:	7d7b      	ldrb	r3, [r7, #21]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	3206      	adds	r2, #6
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e4fa:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e4fc:	7d7b      	ldrb	r3, [r7, #21]
 800e4fe:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3206      	adds	r2, #6
 800e504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	1d82      	adds	r2, r0, #6
 800e50c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e510:	7dfb      	ldrb	r3, [r7, #23]
 800e512:	3301      	adds	r3, #1
 800e514:	75fb      	strb	r3, [r7, #23]
 800e516:	7dfa      	ldrb	r2, [r7, #23]
 800e518:	7dbb      	ldrb	r3, [r7, #22]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d39e      	bcc.n	800e45c <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e51e:	bf00      	nop
 800e520:	bf00      	nop
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fd fb87 	bl	800bc5c <VL53LX_decode_vcsel_period>
 800e54e:	4603      	mov	r3, r0
	period = 2048 *
 800e550:	02db      	lsls	r3, r3, #11
 800e552:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	fbb3 f2f2 	udiv	r2, r3, r2
 800e566:	68b9      	ldr	r1, [r7, #8]
 800e568:	fb01 f202 	mul.w	r2, r1, r2
 800e56c:	1a9b      	subs	r3, r3, r2
 800e56e:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800e576:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e578:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	dd09      	ble.n	800e598 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	da01      	bge.n	800e592 <VL53LX_f_030+0x6a>
 800e58e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e592:	12db      	asrs	r3, r3, #11
 800e594:	75fb      	strb	r3, [r7, #23]
 800e596:	e008      	b.n	800e5aa <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	da01      	bge.n	800e5a6 <VL53LX_f_030+0x7e>
 800e5a2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e5a6:	12db      	asrs	r3, r3, #11
 800e5a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b08e      	sub	sp, #56	@ 0x38
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e5e8:	22ac      	movs	r2, #172	@ 0xac
 800e5ea:	6879      	ldr	r1, [r7, #4]
 800e5ec:	6838      	ldr	r0, [r7, #0]
 800e5ee:	f008 fbd6 	bl	8016d9e <memcpy>


	podata->VL53LX_p_021 = 0;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e5fe:	e00a      	b.n	800e616 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e600:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	4413      	add	r3, r2
 800e608:	2210      	movs	r2, #16
 800e60a:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e60c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e610:	3301      	adds	r3, #1
 800e612:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e616:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e61a:	2b05      	cmp	r3, #5
 800e61c:	d9f0      	bls.n	800e600 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e61e:	2300      	movs	r3, #0
 800e620:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e624:	e00b      	b.n	800e63e <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e626:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	3206      	adds	r2, #6
 800e62e:	2100      	movs	r1, #0
 800e630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e634:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e638:	3301      	adds	r3, #1
 800e63a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	7a5b      	ldrb	r3, [r3, #9]
 800e642:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e646:	429a      	cmp	r2, r3
 800e648:	d3ed      	bcc.n	800e626 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e64a:	2300      	movs	r3, #0
 800e64c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e650:	e012      	b.n	800e678 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800e652:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e656:	3338      	adds	r3, #56	@ 0x38
 800e658:	443b      	add	r3, r7
 800e65a:	2200      	movs	r2, #0
 800e65c:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e660:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e664:	3338      	adds	r3, #56	@ 0x38
 800e666:	443b      	add	r3, r7
 800e668:	2200      	movs	r2, #0
 800e66a:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e66e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e672:	3301      	adds	r3, #1
 800e674:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e678:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e67c:	2b0f      	cmp	r3, #15
 800e67e:	d9e8      	bls.n	800e652 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e680:	2300      	movs	r3, #0
 800e682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e686:	2300      	movs	r3, #0
 800e688:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e68c:	e068      	b.n	800e760 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800e68e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	4413      	add	r3, r2
 800e696:	7b1b      	ldrb	r3, [r3, #12]
 800e698:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e69c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6a0:	3338      	adds	r3, #56	@ 0x38
 800e6a2:	443b      	add	r3, r7
 800e6a4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d115      	bne.n	800e6d8 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e6ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6b0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e6b4:	0092      	lsls	r2, r2, #2
 800e6b6:	b2d2      	uxtb	r2, r2
 800e6b8:	3338      	adds	r3, #56	@ 0x38
 800e6ba:	443b      	add	r3, r7
 800e6bc:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800e6cc:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e6ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e6d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e6e0:	443a      	add	r2, r7
 800e6e2:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	3338      	adds	r3, #56	@ 0x38
 800e6ec:	443b      	add	r3, r7
 800e6ee:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e6f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6f6:	3338      	adds	r3, #56	@ 0x38
 800e6f8:	443b      	add	r3, r7
 800e6fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e702:	2300      	movs	r3, #0
 800e704:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e708:	e021      	b.n	800e74e <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800e70a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e70e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e712:	441a      	add	r2, r3
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	3206      	adds	r2, #6
 800e718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e71c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e720:	009a      	lsls	r2, r3, #2
 800e722:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e726:	441a      	add	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3206      	adds	r2, #6
 800e72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e730:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800e734:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800e738:	4402      	add	r2, r0
 800e73a:	4419      	add	r1, r3
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	3206      	adds	r2, #6
 800e740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e744:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e748:	3301      	adds	r3, #1
 800e74a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e74e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e752:	2b03      	cmp	r3, #3
 800e754:	d9d9      	bls.n	800e70a <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e756:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e75a:	3301      	adds	r3, #1
 800e75c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e760:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e764:	2b05      	cmp	r3, #5
 800e766:	d992      	bls.n	800e68e <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e768:	2300      	movs	r3, #0
 800e76a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e76e:	e022      	b.n	800e7b6 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800e770:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e774:	683a      	ldr	r2, [r7, #0]
 800e776:	4413      	add	r3, r2
 800e778:	7b1b      	ldrb	r3, [r3, #12]
 800e77a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e77e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e782:	2b0f      	cmp	r3, #15
 800e784:	d80c      	bhi.n	800e7a0 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e786:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800e78a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800e78e:	3238      	adds	r2, #56	@ 0x38
 800e790:	443a      	add	r2, r7
 800e792:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	4413      	add	r3, r2
 800e79a:	460a      	mov	r2, r1
 800e79c:	749a      	strb	r2, [r3, #18]
 800e79e:	e005      	b.n	800e7ac <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800e7a0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7a4:	683a      	ldr	r2, [r7, #0]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e7ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7ba:	2b05      	cmp	r3, #5
 800e7bc:	d9d8      	bls.n	800e770 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e7be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7d0:	e050      	b.n	800e874 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e7d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7d6:	3338      	adds	r3, #56	@ 0x38
 800e7d8:	443b      	add	r3, r7
 800e7da:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e7de:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd41      	ble.n	800e86a <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800e7e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7ea:	3338      	adds	r3, #56	@ 0x38
 800e7ec:	443b      	add	r3, r7
 800e7ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e7f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e7fc:	e031      	b.n	800e862 <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800e7fe:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e802:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e806:	441a      	add	r2, r3
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	3206      	adds	r2, #6
 800e80c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e812:	0fda      	lsrs	r2, r3, #31
 800e814:	4413      	add	r3, r2
 800e816:	105b      	asrs	r3, r3, #1
 800e818:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e81a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e81e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e822:	441a      	add	r2, r3
 800e824:	4401      	add	r1, r0
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	3206      	adds	r2, #6
 800e82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e82e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e832:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e836:	441a      	add	r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	3206      	adds	r2, #6
 800e83c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e840:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e844:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e848:	441a      	add	r2, r3
 800e84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84c:	fb91 f1f3 	sdiv	r1, r1, r3
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	3206      	adds	r2, #6
 800e854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e858:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e85c:	3301      	adds	r3, #1
 800e85e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e862:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e866:	2b03      	cmp	r3, #3
 800e868:	d9c9      	bls.n	800e7fe <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e86a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e86e:	3301      	adds	r3, #1
 800e870:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e874:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e878:	2b0f      	cmp	r3, #15
 800e87a:	d9aa      	bls.n	800e7d2 <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2200      	movs	r2, #0
 800e880:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e882:	7bfb      	ldrb	r3, [r7, #15]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800e888:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d002      	beq.n	800e894 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2204      	movs	r2, #4
 800e892:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e894:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3738      	adds	r7, #56	@ 0x38
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a2:	b0cb      	sub	sp, #300	@ 0x12c
 800e8a4:	af06      	add	r7, sp, #24
 800e8a6:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800e8aa:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800e8ae:	6020      	str	r0, [r4, #0]
 800e8b0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800e8b4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800e8b8:	6001      	str	r1, [r0, #0]
 800e8ba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800e8be:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800e8c2:	600a      	str	r2, [r1, #0]
 800e8c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800e8c8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800e8cc:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e8d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e8dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e8e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e8e4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800e8e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e8ec:	f107 0318 	add.w	r3, r7, #24
 800e8f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800e904:	2300      	movs	r3, #0
 800e906:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800e916:	2300      	movs	r3, #0
 800e918:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e91c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e924:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	f7ff fe44 	bl	800e5b6 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e92e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e932:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e934:	4619      	mov	r1, r3
 800e936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e93a:	3348      	adds	r3, #72	@ 0x48
 800e93c:	461a      	mov	r2, r3
 800e93e:	2000      	movs	r0, #0
 800e940:	f7fd f9dd 	bl	800bcfe <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e944:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e948:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e94c:	3348      	adds	r3, #72	@ 0x48
 800e94e:	4619      	mov	r1, r3
 800e950:	4610      	mov	r0, r2
 800e952:	f7fd f996 	bl	800bc82 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e956:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d142      	bne.n	800e9e4 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e95e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e962:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d039      	beq.n	800e9e4 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800e970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e974:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800e97c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e980:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800e98a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e98e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800e998:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e99c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800e9a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800e9aa:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800e9ae:	6812      	ldr	r2, [r2, #0]
 800e9b0:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800e9b4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800e9b8:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800e9bc:	6809      	ldr	r1, [r1, #0]
 800e9be:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800e9c2:	f107 0014 	add.w	r0, r7, #20
 800e9c6:	9004      	str	r0, [sp, #16]
 800e9c8:	9103      	str	r1, [sp, #12]
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f002 f9d6 	bl	8010d8a <VL53LX_f_032>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e9e4:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d115      	bne.n	800ea18 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e9ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00c      	beq.n	800ea18 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800e9fe:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea08:	3348      	adds	r3, #72	@ 0x48
 800ea0a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800ea0e:	f002 fc2b 	bl	8011268 <VL53LX_f_033>
 800ea12:	4603      	mov	r3, r0
 800ea14:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800ea18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800ea20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800ea28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea2c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800ea30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea34:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800ea38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800ea42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea46:	2200      	movs	r2, #0
 800ea48:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800ea4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ea56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800ea66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d002      	beq.n	800ea7e <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ea84:	e108      	b.n	800ec98 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800ea86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ea94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800ea98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea9c:	3348      	adds	r3, #72	@ 0x48
 800ea9e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800eaa2:	7814      	ldrb	r4, [r2, #0]
 800eaa4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800eaa8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800eaac:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800eab0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800eab4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800eab8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eabc:	9405      	str	r4, [sp, #20]
 800eabe:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800eac2:	9404      	str	r4, [sp, #16]
 800eac4:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800eac8:	9403      	str	r4, [sp, #12]
 800eaca:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800eace:	9402      	str	r4, [sp, #8]
 800ead0:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800ead4:	9401      	str	r4, [sp, #4]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eadc:	6812      	ldr	r2, [r2, #0]
 800eade:	6809      	ldr	r1, [r1, #0]
 800eae0:	6800      	ldr	r0, [r0, #0]
 800eae2:	f7fe fe65 	bl	800d7b0 <VL53LX_f_025>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800eaec:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f040 80cb 	bne.w	800ec8c <VL53LX_hist_process_data+0x3ec>
 800eaf6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f040 80c6 	bne.w	800ec8c <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800eb00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb04:	7c9b      	ldrb	r3, [r3, #18]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d110      	bne.n	800eb2c <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800eb0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb0e:	3314      	adds	r3, #20
 800eb10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800eb14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb18:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800eb1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb1e:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800eb20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb24:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800eb26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb2a:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800eb2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800eb38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800eb3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	461a      	mov	r2, r3
 800eb44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb48:	fb02 f303 	mul.w	r3, r2, r3
 800eb4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800eb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb54:	011b      	lsls	r3, r3, #4
 800eb56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800eb60:	e08b      	b.n	800ec7a <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800eb62:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800eb66:	224c      	movs	r2, #76	@ 0x4c
 800eb68:	fb02 f303 	mul.w	r3, r2, r3
 800eb6c:	3310      	adds	r3, #16
 800eb6e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800eb72:	4413      	add	r3, r2
 800eb74:	3304      	adds	r3, #4
 800eb76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800eb7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb7e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800eb82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb86:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	dd0e      	ble.n	800ebac <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800eb8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb92:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800eb96:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800eb98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb9c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800eba0:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	b29b      	uxth	r3, r3
				delta_mm =
 800eba6:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800ebaa:	e00d      	b.n	800ebc8 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800ebac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebb0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ebb4:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800ebb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebba:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ebbe:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	b29b      	uxth	r3, r3
				delta_mm =
 800ebc4:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800ebc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800ebd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ebd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebe4:	fb02 f303 	mul.w	r3, r2, r3
 800ebe8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800ebec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebf0:	015b      	lsls	r3, r3, #5
 800ebf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800ebf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebfa:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ebfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	dd2f      	ble.n	800ec70 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800ec10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec14:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ec18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ec26:	429a      	cmp	r2, r3
 800ec28:	da22      	bge.n	800ec70 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800ec2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ec30:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d91b      	bls.n	800ec70 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ec38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec3c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800ec3e:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800ec40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d913      	bls.n	800ec70 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800ec48:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800ec4c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ec50:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	da09      	bge.n	800ec70 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800ec5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec60:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800ec64:	224c      	movs	r2, #76	@ 0x4c
 800ec66:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f008 f897 	bl	8016d9e <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800ec70:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ec74:	3301      	adds	r3, #1
 800ec76:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ec7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec7e:	7c9b      	ldrb	r3, [r3, #18]
 800ec80:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800ec84:	429a      	cmp	r2, r3
 800ec86:	f4ff af6c 	bcc.w	800eb62 <VL53LX_hist_process_data+0x2c2>
 800ec8a:	e000      	b.n	800ec8e <VL53LX_hist_process_data+0x3ee>
			continue;
 800ec8c:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ec8e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800ec92:	3301      	adds	r3, #1
 800ec94:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ec98:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ec9c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800eca0:	429a      	cmp	r2, r3
 800eca2:	f67f aef0 	bls.w	800ea86 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800eca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ecaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800ecb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ecb8:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecc6 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b086      	sub	sp, #24
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	60f8      	str	r0, [r7, #12]
 800ecce:	460b      	mov	r3, r1
 800ecd0:	607a      	str	r2, [r7, #4]
 800ecd2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ecd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d104      	bne.n	800ecea <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7f9 fb77 	bl	80083d4 <VL53LX_disable_firmware>
 800ece6:	4603      	mov	r3, r0
 800ece8:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ecea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d104      	bne.n	800ecfc <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7f9 fb9f 	bl	8008436 <VL53LX_enable_powerforce>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ecfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d105      	bne.n	800ed10 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ed04:	21fa      	movs	r1, #250	@ 0xfa
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f002 fd1e 	bl	8011748 <VL53LX_WaitUs>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ed10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d107      	bne.n	800ed28 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f240 7181 	movw	r1, #1921	@ 0x781
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f002 fc20 	bl	8011564 <VL53LX_WrByte>
 800ed24:	4603      	mov	r3, r0
 800ed26:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ed28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d107      	bne.n	800ed40 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800ed30:	2205      	movs	r2, #5
 800ed32:	f240 6183 	movw	r1, #1667	@ 0x683
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f002 fc14 	bl	8011564 <VL53LX_WrByte>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800ed40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d105      	bne.n	800ed54 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f002 fcfc 	bl	8011748 <VL53LX_WaitUs>
 800ed50:	4603      	mov	r3, r0
 800ed52:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800ed54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d107      	bne.n	800ed6c <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f002 fbfe 	bl	8011564 <VL53LX_WrByte>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800ed6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d108      	bne.n	800ed86 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800ed74:	897b      	ldrh	r3, [r7, #10]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f240 7184 	movw	r1, #1924	@ 0x784
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f002 fc1b 	bl	80115b8 <VL53LX_WrWord>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800ed86:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3718      	adds	r7, #24
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b086      	sub	sp, #24
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	60f8      	str	r0, [r7, #12]
 800ed9a:	607b      	str	r3, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	72fb      	strb	r3, [r7, #11]
 800eda0:	4613      	mov	r3, r2
 800eda2:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eda4:	2300      	movs	r3, #0
 800eda6:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800edac:	7afb      	ldrb	r3, [r7, #11]
 800edae:	75bb      	strb	r3, [r7, #22]
 800edb0:	e041      	b.n	800ee36 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800edb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d108      	bne.n	800edcc <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800edba:	7dbb      	ldrb	r3, [r7, #22]
 800edbc:	461a      	mov	r2, r3
 800edbe:	f240 7194 	movw	r1, #1940	@ 0x794
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f002 fbce 	bl	8011564 <VL53LX_WrByte>
 800edc8:	4603      	mov	r3, r0
 800edca:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800edcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d107      	bne.n	800ede4 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800edd4:	2200      	movs	r2, #0
 800edd6:	f240 7183 	movw	r1, #1923	@ 0x783
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f002 fbc2 	bl	8011564 <VL53LX_WrByte>
 800ede0:	4603      	mov	r3, r0
 800ede2:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ede4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d105      	bne.n	800edf8 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800edec:	2105      	movs	r1, #5
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f002 fcaa 	bl	8011748 <VL53LX_WaitUs>
 800edf4:	4603      	mov	r3, r0
 800edf6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800edf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d107      	bne.n	800ee10 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800ee00:	2201      	movs	r2, #1
 800ee02:	f240 7183 	movw	r1, #1923	@ 0x783
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f002 fbac 	bl	8011564 <VL53LX_WrByte>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800ee10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d108      	bne.n	800ee2a <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800ee18:	2304      	movs	r3, #4
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f002 fb69 	bl	80114f8 <VL53LX_ReadMulti>
 800ee26:	4603      	mov	r3, r0
 800ee28:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800ee30:	7dbb      	ldrb	r3, [r7, #22]
 800ee32:	3301      	adds	r3, #1
 800ee34:	75bb      	strb	r3, [r7, #22]
 800ee36:	7dba      	ldrb	r2, [r7, #22]
 800ee38:	7af9      	ldrb	r1, [r7, #11]
 800ee3a:	7abb      	ldrb	r3, [r7, #10]
 800ee3c:	440b      	add	r3, r1
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	dbb7      	blt.n	800edb2 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ee42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3718      	adds	r7, #24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ee5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d107      	bne.n	800ee72 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ee62:	2201      	movs	r2, #1
 800ee64:	f240 7183 	movw	r1, #1923	@ 0x783
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f002 fb7b 	bl	8011564 <VL53LX_WrByte>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ee72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d107      	bne.n	800ee8a <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f240 7181 	movw	r1, #1921	@ 0x781
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f002 fb6f 	bl	8011564 <VL53LX_WrByte>
 800ee86:	4603      	mov	r3, r0
 800ee88:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ee8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d104      	bne.n	800ee9c <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7f9 fae1 	bl	800845a <VL53LX_disable_powerforce>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800ee9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7f9 fa83 	bl	80083b0 <VL53LX_enable_firmware>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800eeae:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800eeba:	b480      	push	{r7}
 800eebc:	b087      	sub	sp, #28
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	4603      	mov	r3, r0
 800eec2:	60b9      	str	r1, [r7, #8]
 800eec4:	607a      	str	r2, [r7, #4]
 800eec6:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eec8:	2300      	movs	r3, #0
 800eeca:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800eed0:	89fb      	ldrh	r3, [r7, #14]
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d802      	bhi.n	800eedc <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eed6:	f06f 0308 	mvn.w	r3, #8
 800eeda:	e017      	b.n	800ef0c <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800eedc:	23f0      	movs	r3, #240	@ 0xf0
 800eede:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	3302      	adds	r3, #2
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	8afb      	ldrh	r3, [r7, #22]
 800eeea:	1a9b      	subs	r3, r3, r2
 800eeec:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800eeee:	8afb      	ldrh	r3, [r7, #22]
 800eef0:	2bff      	cmp	r3, #255	@ 0xff
 800eef2:	d901      	bls.n	800eef8 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800eef8:	8afb      	ldrh	r3, [r7, #22]
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	78da      	ldrb	r2, [r3, #3]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	705a      	strb	r2, [r3, #1]

	return status;
 800ef08:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	371c      	adds	r7, #28
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800ef18:	b590      	push	{r4, r7, lr}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ef32:	89fb      	ldrh	r3, [r7, #14]
 800ef34:	2b37      	cmp	r3, #55	@ 0x37
 800ef36:	d802      	bhi.n	800ef3e <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef38:	f06f 0308 	mvn.w	r3, #8
 800ef3c:	e03e      	b.n	800efbc <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ef3e:	68b9      	ldr	r1, [r7, #8]
 800ef40:	2002      	movs	r0, #2
 800ef42:	f7f9 f91b 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800ef46:	4603      	mov	r3, r0
 800ef48:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	3302      	adds	r3, #2
 800ef52:	4619      	mov	r1, r3
 800ef54:	2002      	movs	r0, #2
 800ef56:	f7f9 f911 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ef66:	099b      	lsrs	r3, r3, #6
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2219      	movs	r2, #25
 800ef72:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2205      	movs	r2, #5
 800ef78:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2205      	movs	r2, #5
 800ef7e:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	3304      	adds	r3, #4
 800ef84:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ef86:	2300      	movs	r3, #0
 800ef88:	74fb      	strb	r3, [r7, #19]
 800ef8a:	e012      	b.n	800efb2 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ef8c:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ef8e:	6979      	ldr	r1, [r7, #20]
 800ef90:	2002      	movs	r0, #2
 800ef92:	f7f9 f8f3 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800ef96:	4603      	mov	r3, r0
 800ef98:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	1d23      	adds	r3, r4, #4
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	4413      	add	r3, r2
 800efa2:	460a      	mov	r2, r1
 800efa4:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	3302      	adds	r3, #2
 800efaa:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800efac:	7cfb      	ldrb	r3, [r7, #19]
 800efae:	3301      	adds	r3, #1
 800efb0:	74fb      	strb	r3, [r7, #19]
 800efb2:	7cfb      	ldrb	r3, [r7, #19]
 800efb4:	2b18      	cmp	r3, #24
 800efb6:	d9e9      	bls.n	800ef8c <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800efb8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	371c      	adds	r7, #28
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd90      	pop	{r4, r7, pc}

0800efc4 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800efd6:	89fb      	ldrh	r3, [r7, #14]
 800efd8:	2b07      	cmp	r3, #7
 800efda:	d802      	bhi.n	800efe2 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800efdc:	f06f 0308 	mvn.w	r3, #8
 800efe0:	e027      	b.n	800f032 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800efe2:	68b9      	ldr	r1, [r7, #8]
 800efe4:	2002      	movs	r0, #2
 800efe6:	f7f9 f8c9 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800efea:	4603      	mov	r3, r0
 800efec:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	3302      	adds	r3, #2
 800eff6:	4619      	mov	r1, r3
 800eff8:	2002      	movs	r0, #2
 800effa:	f7f9 f8bf 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800effe:	4603      	mov	r3, r0
 800f000:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	2002      	movs	r0, #2
 800f00e:	f7f9 f8b5 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f012:	4603      	mov	r3, r0
 800f014:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	3306      	adds	r3, #6
 800f01e:	4619      	mov	r1, r3
 800f020:	2002      	movs	r0, #2
 800f022:	f7f9 f8ab 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f026:	4603      	mov	r3, r0
 800f028:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	80da      	strh	r2, [r3, #6]

	return status;
 800f02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3718      	adds	r7, #24
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b086      	sub	sp, #24
 800f03e:	af00      	add	r7, sp, #0
 800f040:	4603      	mov	r3, r0
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f048:	2300      	movs	r3, #0
 800f04a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f04c:	89fb      	ldrh	r3, [r7, #14]
 800f04e:	2b0f      	cmp	r3, #15
 800f050:	d802      	bhi.n	800f058 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f052:	f06f 0308 	mvn.w	r3, #8
 800f056:	e04d      	b.n	800f0f4 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f058:	68b9      	ldr	r1, [r7, #8]
 800f05a:	2002      	movs	r0, #2
 800f05c:	f7f9 f88e 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f060:	4603      	mov	r3, r0
 800f062:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	789a      	ldrb	r2, [r3, #2]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	78da      	ldrb	r2, [r3, #3]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	3304      	adds	r3, #4
 800f07c:	4619      	mov	r1, r3
 800f07e:	2002      	movs	r0, #2
 800f080:	f7f9 f87c 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	3306      	adds	r3, #6
 800f090:	4619      	mov	r1, r3
 800f092:	2002      	movs	r0, #2
 800f094:	f7f9 f872 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f098:	4603      	mov	r3, r0
 800f09a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	2002      	movs	r0, #2
 800f0a8:	f7f9 f868 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	330a      	adds	r3, #10
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	2002      	movs	r0, #2
 800f0bc:	f7f9 f85e 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	330c      	adds	r3, #12
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	2002      	movs	r0, #2
 800f0d0:	f7f9 f854 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	330e      	adds	r3, #14
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	2002      	movs	r0, #2
 800f0e4:	f7f9 f84a 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	81da      	strh	r2, [r3, #14]

	return status;
 800f0f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	607b      	str	r3, [r7, #4]
 800f106:	460b      	mov	r3, r1
 800f108:	72fb      	strb	r3, [r7, #11]
 800f10a:	4613      	mov	r3, r2
 800f10c:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f10e:	2300      	movs	r3, #0
 800f110:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f11a:	2232      	movs	r2, #50	@ 0x32
 800f11c:	2104      	movs	r1, #4
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff fdd1 	bl	800ecc6 <VL53LX_nvm_enable>
 800f124:	4603      	mov	r3, r0
 800f126:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d107      	bne.n	800f140 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f130:	7aba      	ldrb	r2, [r7, #10]
 800f132:	7af9      	ldrb	r1, [r7, #11]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f7ff fe2b 	bl	800ed92 <VL53LX_nvm_read>
 800f13c:	4603      	mov	r3, r0
 800f13e:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d104      	bne.n	800f152 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7ff fe80 	bl	800ee4e <VL53LX_nvm_disable>
 800f14e:	4603      	mov	r3, r0
 800f150:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f152:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f168:	2300      	movs	r3, #0
 800f16a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f16c:	f107 0308 	add.w	r3, r7, #8
 800f170:	2201      	movs	r2, #1
 800f172:	212e      	movs	r1, #46	@ 0x2e
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff ffc1 	bl	800f0fc <VL53LX_read_nvm_raw_data>
 800f17a:	4603      	mov	r3, r0
 800f17c:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d108      	bne.n	800f198 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f186:	f107 0308 	add.w	r3, r7, #8
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4619      	mov	r1, r3
 800f18e:	2004      	movs	r0, #4
 800f190:	f7ff fe93 	bl	800eeba <VL53LX_nvm_decode_optical_centre>
 800f194:	4603      	mov	r3, r0
 800f196:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f198:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b092      	sub	sp, #72	@ 0x48
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f1b4:	f107 030c 	add.w	r3, r7, #12
 800f1b8:	220e      	movs	r2, #14
 800f1ba:	2157      	movs	r1, #87	@ 0x57
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7ff ff9d 	bl	800f0fc <VL53LX_read_nvm_raw_data>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f1c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d109      	bne.n	800f1e4 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f1d0:	f107 030c 	add.w	r3, r7, #12
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	2038      	movs	r0, #56	@ 0x38
 800f1da:	f7ff fe9d 	bl	800ef18 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f1e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3748      	adds	r7, #72	@ 0x48
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f1fe:	f107 030c 	add.w	r3, r7, #12
 800f202:	2202      	movs	r2, #2
 800f204:	2165      	movs	r1, #101	@ 0x65
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7ff ff78 	bl	800f0fc <VL53LX_read_nvm_raw_data>
 800f20c:	4603      	mov	r3, r0
 800f20e:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d108      	bne.n	800f22a <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f218:	f107 030c 	add.w	r3, r7, #12
 800f21c:	683a      	ldr	r2, [r7, #0]
 800f21e:	4619      	mov	r1, r3
 800f220:	2008      	movs	r0, #8
 800f222:	f7ff fecf 	bl	800efc4 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f226:	4603      	mov	r3, r0
 800f228:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f22a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f22e:	4618      	mov	r0, r3
 800f230:	3718      	adds	r7, #24
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b08a      	sub	sp, #40	@ 0x28
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	460b      	mov	r3, r1
 800f240:	607a      	str	r2, [r7, #4]
 800f242:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f244:	2300      	movs	r3, #0
 800f246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f24a:	897b      	ldrh	r3, [r7, #10]
 800f24c:	089b      	lsrs	r3, r3, #2
 800f24e:	b29b      	uxth	r3, r3
 800f250:	b2d9      	uxtb	r1, r3
 800f252:	f107 0314 	add.w	r3, r7, #20
 800f256:	2204      	movs	r2, #4
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7ff ff4f 	bl	800f0fc <VL53LX_read_nvm_raw_data>
 800f25e:	4603      	mov	r3, r0
 800f260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f264:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d109      	bne.n	800f280 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f26c:	f107 0314 	add.w	r3, r7, #20
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	4619      	mov	r1, r3
 800f274:	2010      	movs	r0, #16
 800f276:	f7ff fee0 	bl	800f03a <VL53LX_nvm_decode_fmt_range_results_data>
 800f27a:	4603      	mov	r3, r0
 800f27c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f280:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800f284:	4618      	mov	r0, r3
 800f286:	3728      	adds	r7, #40	@ 0x28
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	460b      	mov	r3, r1
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f29a:	2300      	movs	r3, #0
 800f29c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f29e:	897b      	ldrh	r3, [r7, #10]
 800f2a0:	2b0a      	cmp	r3, #10
 800f2a2:	d802      	bhi.n	800f2aa <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2a4:	f06f 0309 	mvn.w	r3, #9
 800f2a8:	e047      	b.n	800f33a <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2b2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f2c0:	f002 020f 	and.w	r2, r2, #15
 800f2c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f2c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f2d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f2d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f2d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f2e0:	f002 0203 	and.w	r2, r2, #3
 800f2e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f2e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f2f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f2f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f2f6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	88d8      	ldrh	r0, [r3, #6]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3305      	adds	r3, #5
 800f300:	461a      	mov	r2, r3
 800f302:	2102      	movs	r1, #2
 800f304:	f7f8 ff0f 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f31a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f324:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f328:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f32a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f334:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	4603      	mov	r3, r0
 800f34a:	60b9      	str	r1, [r7, #8]
 800f34c:	607a      	str	r2, [r7, #4]
 800f34e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f350:	2300      	movs	r3, #0
 800f352:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f354:	89fb      	ldrh	r3, [r7, #14]
 800f356:	2b0a      	cmp	r3, #10
 800f358:	d802      	bhi.n	800f360 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f35a:	f06f 0309 	mvn.w	r3, #9
 800f35e:	e046      	b.n	800f3ee <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f368:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	3301      	adds	r3, #1
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	f003 030f 	and.w	r3, r3, #15
 800f378:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	3302      	adds	r3, #2
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f388:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	3303      	adds	r3, #3
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0303 	and.w	r3, r3, #3
 800f398:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	3305      	adds	r3, #5
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	2002      	movs	r0, #2
 800f3b6:	f7f8 fee1 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	79da      	ldrb	r2, [r3, #7]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	7a1a      	ldrb	r2, [r3, #8]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3309      	adds	r3, #9
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3dc:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	7a9a      	ldrb	r2, [r3, #10]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f3ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b086      	sub	sp, #24
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f400:	2300      	movs	r3, #0
 800f402:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d108      	bne.n	800f41e <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f40c:	f107 020c 	add.w	r2, r7, #12
 800f410:	230b      	movs	r3, #11
 800f412:	2101      	movs	r1, #1
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f002 f86f 	bl	80114f8 <VL53LX_ReadMulti>
 800f41a:	4603      	mov	r3, r0
 800f41c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f41e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d108      	bne.n	800f438 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f426:	f107 030c 	add.w	r3, r7, #12
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	200b      	movs	r0, #11
 800f430:	f7ff ff87 	bl	800f342 <VL53LX_i2c_decode_static_nvm_managed>
 800f434:	4603      	mov	r3, r0
 800f436:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b086      	sub	sp, #24
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	460b      	mov	r3, r1
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f452:	2300      	movs	r3, #0
 800f454:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f456:	897b      	ldrh	r3, [r7, #10]
 800f458:	2b16      	cmp	r3, #22
 800f45a:	d802      	bhi.n	800f462 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f45c:	f06f 0309 	mvn.w	r3, #9
 800f460:	e076      	b.n	800f550 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f472:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f47c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f486:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f490:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f49a:	f002 020f 	and.w	r2, r2, #15
 800f49e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f4a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f4aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f4b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f4b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f4ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f4c4:	f002 0203 	and.w	r2, r2, #3
 800f4c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f4ca:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	8958      	ldrh	r0, [r3, #10]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3309      	adds	r3, #9
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	2102      	movs	r1, #2
 800f4d8:	f7f8 fe25 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	330b      	adds	r3, #11
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	2102      	movs	r1, #2
 800f4ea:	f7f8 fe67 	bl	80081bc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	330d      	adds	r3, #13
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	2102      	movs	r1, #2
 800f4fc:	f7f8 fe5e 	bl	80081bc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	8a18      	ldrh	r0, [r3, #16]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	330f      	adds	r3, #15
 800f508:	461a      	mov	r2, r3
 800f50a:	2102      	movs	r1, #2
 800f50c:	f7f8 fe0b 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f51a:	b218      	sxth	r0, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3311      	adds	r3, #17
 800f520:	461a      	mov	r2, r3
 800f522:	2102      	movs	r1, #2
 800f524:	f7f8 fe4a 	bl	80081bc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	3313      	adds	r3, #19
 800f532:	461a      	mov	r2, r3
 800f534:	2102      	movs	r1, #2
 800f536:	f7f8 fe41 	bl	80081bc <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3315      	adds	r3, #21
 800f544:	461a      	mov	r2, r3
 800f546:	2102      	movs	r1, #2
 800f548:	f7f8 fe38 	bl	80081bc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3718      	adds	r7, #24
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	4603      	mov	r3, r0
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f566:	2300      	movs	r3, #0
 800f568:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f56a:	89fb      	ldrh	r3, [r7, #14]
 800f56c:	2b16      	cmp	r3, #22
 800f56e:	d802      	bhi.n	800f576 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f570:	f06f 0309 	mvn.w	r3, #9
 800f574:	e079      	b.n	800f66a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	785a      	ldrb	r2, [r3, #1]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	789a      	ldrb	r2, [r3, #2]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	78da      	ldrb	r2, [r3, #3]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	791a      	ldrb	r2, [r3, #4]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	3305      	adds	r3, #5
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f003 030f 	and.w	r3, r3, #15
 800f5a8:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	799a      	ldrb	r2, [r3, #6]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	3307      	adds	r3, #7
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5c0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 0303 	and.w	r3, r3, #3
 800f5d0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	3309      	adds	r3, #9
 800f5da:	4619      	mov	r1, r3
 800f5dc:	2002      	movs	r0, #2
 800f5de:	f7f8 fdcd 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	330b      	adds	r3, #11
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	2002      	movs	r0, #2
 800f5f2:	f7f8 fe0f 	bl	8008214 <VL53LX_i2c_decode_int16_t>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	330d      	adds	r3, #13
 800f602:	4619      	mov	r1, r3
 800f604:	2002      	movs	r0, #2
 800f606:	f7f8 fe05 	bl	8008214 <VL53LX_i2c_decode_int16_t>
 800f60a:	4603      	mov	r3, r0
 800f60c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	330f      	adds	r3, #15
 800f616:	4619      	mov	r1, r3
 800f618:	2002      	movs	r0, #2
 800f61a:	f7f8 fdaf 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800f61e:	4603      	mov	r3, r0
 800f620:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	3311      	adds	r3, #17
 800f62a:	4619      	mov	r1, r3
 800f62c:	2002      	movs	r0, #2
 800f62e:	f7f8 fdf1 	bl	8008214 <VL53LX_i2c_decode_int16_t>
 800f632:	4603      	mov	r3, r0
 800f634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f638:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	3313      	adds	r3, #19
 800f642:	4619      	mov	r1, r3
 800f644:	2002      	movs	r0, #2
 800f646:	f7f8 fde5 	bl	8008214 <VL53LX_i2c_decode_int16_t>
 800f64a:	4603      	mov	r3, r0
 800f64c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	3315      	adds	r3, #21
 800f656:	4619      	mov	r1, r3
 800f658:	2002      	movs	r0, #2
 800f65a:	f7f8 fddb 	bl	8008214 <VL53LX_i2c_decode_int16_t>
 800f65e:	4603      	mov	r3, r0
 800f660:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <VL53LX_set_customer_nvm_managed>:


VL53LX_Error VL53LX_set_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f672:	b580      	push	{r7, lr}
 800f674:	b088      	sub	sp, #32
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f67c:	2300      	movs	r3, #0
 800f67e:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d108      	bne.n	800f69a <VL53LX_set_customer_nvm_managed+0x28>
		status = VL53LX_i2c_encode_customer_nvm_managed(
 800f688:	f107 0308 	add.w	r3, r7, #8
 800f68c:	461a      	mov	r2, r3
 800f68e:	2117      	movs	r1, #23
 800f690:	6838      	ldr	r0, [r7, #0]
 800f692:	f7ff fed7 	bl	800f444 <VL53LX_i2c_encode_customer_nvm_managed>
 800f696:	4603      	mov	r3, r0
 800f698:	77fb      	strb	r3, [r7, #31]
			pdata,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f69a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d108      	bne.n	800f6b4 <VL53LX_set_customer_nvm_managed+0x42>
		status = VL53LX_WriteMulti(
 800f6a2:	f107 0208 	add.w	r2, r7, #8
 800f6a6:	2317      	movs	r3, #23
 800f6a8:	210d      	movs	r1, #13
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f001 feee 	bl	801148c <VL53LX_WriteMulti>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f6b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3720      	adds	r7, #32
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08a      	sub	sp, #40	@ 0x28
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f6d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d109      	bne.n	800f6ec <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f6d8:	f107 020c 	add.w	r2, r7, #12
 800f6dc:	2317      	movs	r3, #23
 800f6de:	210d      	movs	r1, #13
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f001 ff09 	bl	80114f8 <VL53LX_ReadMulti>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f6ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d109      	bne.n	800f708 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f6f4:	f107 030c 	add.w	r3, r7, #12
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	2017      	movs	r0, #23
 800f6fe:	f7ff ff2b 	bl	800f558 <VL53LX_i2c_decode_customer_nvm_managed>
 800f702:	4603      	mov	r3, r0
 800f704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d11c      	bne.n	800f74a <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	8a5b      	ldrh	r3, [r3, #18]
 800f714:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800f716:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	da00      	bge.n	800f720 <VL53LX_get_customer_nvm_managed+0x60>
 800f71e:	3303      	adds	r3, #3
 800f720:	109b      	asrs	r3, r3, #2
 800f722:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800f724:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f72c:	db04      	blt.n	800f738 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f72e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f730:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800f734:	b29b      	uxth	r3, r3
 800f736:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	2200      	movs	r2, #0
 800f73c:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f742:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f748:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f74a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3728      	adds	r7, #40	@ 0x28
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b086      	sub	sp, #24
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	60f8      	str	r0, [r7, #12]
 800f75e:	460b      	mov	r3, r1
 800f760:	607a      	str	r2, [r7, #4]
 800f762:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f764:	2300      	movs	r3, #0
 800f766:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f768:	897b      	ldrh	r3, [r7, #10]
 800f76a:	2b1f      	cmp	r3, #31
 800f76c:	d802      	bhi.n	800f774 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f76e:	f06f 0309 	mvn.w	r3, #9
 800f772:	e0cf      	b.n	800f914 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	2102      	movs	r1, #2
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7f8 fcd2 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f78a:	f002 0201 	and.w	r2, r2, #1
 800f78e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f790:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f79a:	f002 020f 	and.w	r2, r2, #15
 800f79e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f7a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f7aa:	f002 020f 	and.w	r2, r2, #15
 800f7ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f7b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f7ba:	f002 021f 	and.w	r2, r2, #31
 800f7be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f7c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f7ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f7ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f7d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f7da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f7de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f7e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f7ea:	f002 0201 	and.w	r2, r2, #1
 800f7ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f7f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f7fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f804:	f002 0201 	and.w	r2, r2, #1
 800f808:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f80a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f814:	f002 0203 	and.w	r2, r2, #3
 800f818:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f81a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f824:	f002 021f 	and.w	r2, r2, #31
 800f828:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f82a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f834:	f002 0203 	and.w	r2, r2, #3
 800f838:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f83a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f844:	f002 0203 	and.w	r2, r2, #3
 800f848:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f84a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f854:	f002 0207 	and.w	r2, r2, #7
 800f858:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f85a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f864:	f002 021f 	and.w	r2, r2, #31
 800f868:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f86a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f874:	f002 0201 	and.w	r2, r2, #1
 800f878:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f87a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f884:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f88e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f898:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f8a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f8ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f8b6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	8b18      	ldrh	r0, [r3, #24]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3318      	adds	r3, #24
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	2102      	movs	r1, #2
 800f8c4:	f7f8 fc2f 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f8d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f8e4:	f002 020f 	and.w	r2, r2, #15
 800f8e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f8ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f8f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f8fe:	f002 020f 	and.w	r2, r2, #15
 800f902:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f904:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f90e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	460b      	mov	r3, r1
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f92a:	2300      	movs	r3, #0
 800f92c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f92e:	897b      	ldrh	r3, [r7, #10]
 800f930:	2b15      	cmp	r3, #21
 800f932:	d802      	bhi.n	800f93a <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f934:	f06f 0309 	mvn.w	r3, #9
 800f938:	e070      	b.n	800fa1c <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f94a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f95e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f962:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f964:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f96a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f96e:	b298      	uxth	r0, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	3304      	adds	r3, #4
 800f974:	461a      	mov	r2, r3
 800f976:	2102      	movs	r1, #2
 800f978:	f7f8 fbd5 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f984:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f988:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f98a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f994:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f99e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f9a8:	f002 0201 	and.w	r2, r2, #1
 800f9ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f9ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f9b8:	f002 0207 	and.w	r2, r2, #7
 800f9bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f9be:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	8998      	ldrh	r0, [r3, #12]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	330c      	adds	r3, #12
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	2102      	movs	r1, #2
 800f9cc:	f7f8 fbab 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	89d8      	ldrh	r0, [r3, #14]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	330e      	adds	r3, #14
 800f9d8:	461a      	mov	r2, r3
 800f9da:	2102      	movs	r1, #2
 800f9dc:	f7f8 fba3 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	8a18      	ldrh	r0, [r3, #16]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	3310      	adds	r3, #16
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	f7f8 fb9b 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f9f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fa02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fa0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fa16:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3718      	adds	r7, #24
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa32:	2300      	movs	r3, #0
 800fa34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800fa36:	897b      	ldrh	r3, [r7, #10]
 800fa38:	2b16      	cmp	r3, #22
 800fa3a:	d802      	bhi.n	800fa42 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa3c:	f06f 0309 	mvn.w	r3, #9
 800fa40:	e06e      	b.n	800fb20 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	f003 030f 	and.w	r3, r3, #15
 800fa4a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fa58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fa62:	f002 020f 	and.w	r2, r2, #15
 800fa66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fa68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fa72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fa7c:	f002 020f 	and.w	r2, r2, #15
 800fa80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fa82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fa8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fa96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fa9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fa9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800faa6:	f002 020f 	and.w	r2, r2, #15
 800faaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800faac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fab6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fac0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fac4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fac6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	8958      	ldrh	r0, [r3, #10]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	330a      	adds	r3, #10
 800fad0:	461a      	mov	r2, r3
 800fad2:	2102      	movs	r1, #2
 800fad4:	f7f8 fb27 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	8998      	ldrh	r0, [r3, #12]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	330c      	adds	r3, #12
 800fae0:	461a      	mov	r2, r3
 800fae2:	2102      	movs	r1, #2
 800fae4:	f7f8 fb1f 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800faf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800fafa:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6918      	ldr	r0, [r3, #16]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3312      	adds	r3, #18
 800fb04:	461a      	mov	r2, r3
 800fb06:	2104      	movs	r1, #4
 800fb08:	f7f8 fbad 	bl	8008266 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800fb14:	f002 0201 	and.w	r2, r2, #1
 800fb18:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800fb1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	460b      	mov	r3, r1
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fb3a:	897b      	ldrh	r3, [r7, #10]
 800fb3c:	2b11      	cmp	r3, #17
 800fb3e:	d802      	bhi.n	800fb46 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb40:	f06f 0309 	mvn.w	r3, #9
 800fb44:	e071      	b.n	800fc2a <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	f003 0303 	and.w	r3, r3, #3
 800fb4e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	8858      	ldrh	r0, [r3, #2]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	2102      	movs	r1, #2
 800fb60:	f7f8 fae1 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	8898      	ldrh	r0, [r3, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3303      	adds	r3, #3
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	2102      	movs	r1, #2
 800fb70:	f7f8 fad9 	bl	8008126 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fb7c:	f002 0201 	and.w	r2, r2, #1
 800fb80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fb82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fb8c:	f002 0207 	and.w	r2, r2, #7
 800fb90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fb92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fb9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fbb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fbb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fbc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fbd0:	f002 0203 	and.w	r2, r2, #3
 800fbd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fbd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fbe0:	f002 0203 	and.w	r2, r2, #3
 800fbe4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fbe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fbf0:	f002 020f 	and.w	r2, r2, #15
 800fbf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fbf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fc00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800fc0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800fc14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fc1e:	f002 0203 	and.w	r2, r2, #3
 800fc22:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fc24:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fc32:	b480      	push	{r7}
 800fc34:	b087      	sub	sp, #28
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	607a      	str	r2, [r7, #4]
 800fc3e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc40:	2300      	movs	r3, #0
 800fc42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fc44:	897b      	ldrh	r3, [r7, #10]
 800fc46:	2b04      	cmp	r3, #4
 800fc48:	d802      	bhi.n	800fc50 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc4a:	f06f 0309 	mvn.w	r3, #9
 800fc4e:	e025      	b.n	800fc9c <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	f003 0301 	and.w	r3, r3, #1
 800fc58:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fc66:	f002 0201 	and.w	r2, r2, #1
 800fc6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fc6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fc76:	f002 0201 	and.w	r2, r2, #1
 800fc7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fc7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fc86:	f002 0203 	and.w	r2, r2, #3
 800fc8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fc8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fc96:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	371c      	adds	r7, #28
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d108      	bne.n	800fcd0 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800fcbe:	f107 0308 	add.w	r3, r7, #8
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	2105      	movs	r1, #5
 800fcc6:	6838      	ldr	r0, [r7, #0]
 800fcc8:	f7ff ffb3 	bl	800fc32 <VL53LX_i2c_encode_system_control>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800fcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d108      	bne.n	800fcea <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fcd8:	f107 0208 	add.w	r2, r7, #8
 800fcdc:	2305      	movs	r3, #5
 800fcde:	2183      	movs	r1, #131	@ 0x83
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 fbd3 	bl	801148c <VL53LX_WriteMulti>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fcea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b086      	sub	sp, #24
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
 800fd02:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd04:	2300      	movs	r3, #0
 800fd06:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fd08:	89fb      	ldrh	r3, [r7, #14]
 800fd0a:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd0c:	d802      	bhi.n	800fd14 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd0e:	f06f 0309 	mvn.w	r3, #9
 800fd12:	e0e2      	b.n	800feda <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd1c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	785a      	ldrb	r2, [r3, #1]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	3302      	adds	r3, #2
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 030f 	and.w	r3, r3, #15
 800fd34:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	78da      	ldrb	r2, [r3, #3]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	3304      	adds	r3, #4
 800fd46:	4619      	mov	r1, r3
 800fd48:	2002      	movs	r0, #2
 800fd4a:	f7f8 fa17 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	3306      	adds	r3, #6
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	2002      	movs	r0, #2
 800fd5e:	f7f8 fa0d 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fd62:	4603      	mov	r3, r0
 800fd64:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	4619      	mov	r1, r3
 800fd70:	2002      	movs	r0, #2
 800fd72:	f7f8 fa03 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fd76:	4603      	mov	r3, r0
 800fd78:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	330a      	adds	r3, #10
 800fd82:	4619      	mov	r1, r3
 800fd84:	2002      	movs	r0, #2
 800fd86:	f7f8 f9f9 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	330c      	adds	r3, #12
 800fd96:	4619      	mov	r1, r3
 800fd98:	2002      	movs	r0, #2
 800fd9a:	f7f8 f9ef 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	330e      	adds	r3, #14
 800fdaa:	4619      	mov	r1, r3
 800fdac:	2002      	movs	r0, #2
 800fdae:	f7f8 f9e5 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	3310      	adds	r3, #16
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	2002      	movs	r0, #2
 800fdc2:	f7f8 f9db 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	3312      	adds	r3, #18
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	2002      	movs	r0, #2
 800fdd6:	f7f8 f9d1 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fdda:	4603      	mov	r3, r0
 800fddc:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	3314      	adds	r3, #20
 800fde6:	4619      	mov	r1, r3
 800fde8:	2002      	movs	r0, #2
 800fdea:	f7f8 f9c7 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	3316      	adds	r3, #22
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	2002      	movs	r0, #2
 800fdfe:	f7f8 f9bd 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe02:	4603      	mov	r3, r0
 800fe04:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	3318      	adds	r3, #24
 800fe0e:	4619      	mov	r1, r3
 800fe10:	2002      	movs	r0, #2
 800fe12:	f7f8 f9b3 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe16:	4603      	mov	r3, r0
 800fe18:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	331a      	adds	r3, #26
 800fe22:	4619      	mov	r1, r3
 800fe24:	2002      	movs	r0, #2
 800fe26:	f7f8 f9a9 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	331c      	adds	r3, #28
 800fe36:	4619      	mov	r1, r3
 800fe38:	2002      	movs	r0, #2
 800fe3a:	f7f8 f99f 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	331e      	adds	r3, #30
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	2002      	movs	r0, #2
 800fe4e:	f7f8 f995 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe52:	4603      	mov	r3, r0
 800fe54:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	3320      	adds	r3, #32
 800fe5e:	4619      	mov	r1, r3
 800fe60:	2002      	movs	r0, #2
 800fe62:	f7f8 f98b 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe66:	4603      	mov	r3, r0
 800fe68:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	3322      	adds	r3, #34	@ 0x22
 800fe72:	4619      	mov	r1, r3
 800fe74:	2002      	movs	r0, #2
 800fe76:	f7f8 f981 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	3324      	adds	r3, #36	@ 0x24
 800fe86:	4619      	mov	r1, r3
 800fe88:	2002      	movs	r0, #2
 800fe8a:	f7f8 f977 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	3326      	adds	r3, #38	@ 0x26
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	2002      	movs	r0, #2
 800fe9e:	f7f8 f96d 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800fea2:	4603      	mov	r3, r0
 800fea4:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	3328      	adds	r3, #40	@ 0x28
 800feae:	4619      	mov	r1, r3
 800feb0:	2002      	movs	r0, #2
 800feb2:	f7f8 f963 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800feb6:	4603      	mov	r3, r0
 800feb8:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b086      	sub	sp, #24
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	4603      	mov	r3, r0
 800feea:	60b9      	str	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
 800feee:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fef0:	2300      	movs	r3, #0
 800fef2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fef4:	89fb      	ldrh	r3, [r7, #14]
 800fef6:	2b20      	cmp	r3, #32
 800fef8:	d802      	bhi.n	800ff00 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fefa:	f06f 0309 	mvn.w	r3, #9
 800fefe:	e04d      	b.n	800ff9c <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	2004      	movs	r0, #4
 800ff04:	f7f8 f9d9 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff08:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	2004      	movs	r0, #4
 800ff16:	f7f8 f9d0 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff1a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	3308      	adds	r3, #8
 800ff24:	4619      	mov	r1, r3
 800ff26:	2004      	movs	r0, #4
 800ff28:	f7f8 f9e4 	bl	80082f4 <VL53LX_i2c_decode_int32_t>
 800ff2c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	330c      	adds	r3, #12
 800ff36:	4619      	mov	r1, r3
 800ff38:	2004      	movs	r0, #4
 800ff3a:	f7f8 f9be 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff3e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	3310      	adds	r3, #16
 800ff48:	4619      	mov	r1, r3
 800ff4a:	2004      	movs	r0, #4
 800ff4c:	f7f8 f9b5 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff50:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	3314      	adds	r3, #20
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	2004      	movs	r0, #4
 800ff5e:	f7f8 f9ac 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff62:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	3318      	adds	r3, #24
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	2004      	movs	r0, #4
 800ff70:	f7f8 f9c0 	bl	80082f4 <VL53LX_i2c_decode_int32_t>
 800ff74:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	331c      	adds	r3, #28
 800ff7e:	4619      	mov	r1, r3
 800ff80:	2004      	movs	r0, #4
 800ff82:	f7f8 f99a 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 800ff86:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ff98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3718      	adds	r7, #24
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800ffb6:	89fb      	ldrh	r3, [r7, #14]
 800ffb8:	2b37      	cmp	r3, #55	@ 0x37
 800ffba:	d802      	bhi.n	800ffc2 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffbc:	f06f 0309 	mvn.w	r3, #9
 800ffc0:	e15e      	b.n	8010280 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800ffc2:	68b9      	ldr	r1, [r7, #8]
 800ffc4:	2002      	movs	r0, #2
 800ffc6:	f7f8 f8d9 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	3302      	adds	r3, #2
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffdc:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	3303      	adds	r3, #3
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffec:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	3304      	adds	r3, #4
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	f003 0303 	and.w	r3, r3, #3
 800fffc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	3305      	adds	r3, #5
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	3306      	adds	r3, #6
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801001c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	3307      	adds	r3, #7
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801002c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	3308      	adds	r3, #8
 8010036:	4619      	mov	r1, r3
 8010038:	2002      	movs	r0, #2
 801003a:	f7f8 f89f 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 801003e:	4603      	mov	r3, r0
 8010040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010044:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	330a      	adds	r3, #10
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	f003 0303 	and.w	r3, r3, #3
 8010054:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	330b      	adds	r3, #11
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f003 0303 	and.w	r3, r3, #3
 8010064:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	330c      	adds	r3, #12
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	f003 030f 	and.w	r3, r3, #15
 8010074:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	330d      	adds	r3, #13
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	f003 0307 	and.w	r3, r3, #7
 8010084:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	330e      	adds	r3, #14
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	f003 0301 	and.w	r3, r3, #1
 8010094:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	330f      	adds	r3, #15
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	f003 0303 	and.w	r3, r3, #3
 80100a4:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	7c1a      	ldrb	r2, [r3, #16]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	7c5a      	ldrb	r2, [r3, #17]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	3312      	adds	r3, #18
 80100be:	4619      	mov	r1, r3
 80100c0:	2002      	movs	r0, #2
 80100c2:	f7f8 f85b 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 80100c6:	4603      	mov	r3, r0
 80100c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100cc:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	3316      	adds	r3, #22
 80100d6:	4619      	mov	r1, r3
 80100d8:	2002      	movs	r0, #2
 80100da:	f7f8 f84f 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	3318      	adds	r3, #24
 80100ea:	4619      	mov	r1, r3
 80100ec:	2002      	movs	r0, #2
 80100ee:	f7f8 f845 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	331a      	adds	r3, #26
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 0301 	and.w	r3, r3, #1
 8010104:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	331b      	adds	r3, #27
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	7f1a      	ldrb	r2, [r3, #28]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	7f5a      	ldrb	r2, [r3, #29]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	331e      	adds	r3, #30
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010134:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	331f      	adds	r3, #31
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010144:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	3320      	adds	r3, #32
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	f003 0303 	and.w	r3, r3, #3
 8010154:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	3321      	adds	r3, #33	@ 0x21
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	f003 030f 	and.w	r3, r3, #15
 8010164:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	3325      	adds	r3, #37	@ 0x25
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f003 0301 	and.w	r3, r3, #1
 8010198:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	3326      	adds	r3, #38	@ 0x26
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	f003 0303 	and.w	r3, r3, #3
 80101aa:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	3327      	adds	r3, #39	@ 0x27
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	f003 031f 	and.w	r3, r3, #31
 80101bc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	3328      	adds	r3, #40	@ 0x28
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 031f 	and.w	r3, r3, #31
 80101ce:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	3329      	adds	r3, #41	@ 0x29
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	f003 031f 	and.w	r3, r3, #31
 80101e0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	332a      	adds	r3, #42	@ 0x2a
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	332b      	adds	r3, #43	@ 0x2b
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f003 0301 	and.w	r3, r3, #1
 8010204:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	332c      	adds	r3, #44	@ 0x2c
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	f003 0303 	and.w	r3, r3, #3
 8010216:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	332d      	adds	r3, #45	@ 0x2d
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010228:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	332e      	adds	r3, #46	@ 0x2e
 8010234:	4619      	mov	r1, r3
 8010236:	2004      	movs	r0, #4
 8010238:	f7f8 f83f 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 801023c:	4603      	mov	r3, r0
 801023e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	3332      	adds	r3, #50	@ 0x32
 801024a:	4619      	mov	r1, r3
 801024c:	2004      	movs	r0, #4
 801024e:	f7f8 f834 	bl	80082ba <VL53LX_i2c_decode_uint32_t>
 8010252:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	3336      	adds	r3, #54	@ 0x36
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	3337      	adds	r3, #55	@ 0x37
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	f003 0301 	and.w	r3, r3, #1
 8010274:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 801027c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3718      	adds	r7, #24
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
 8010294:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010296:	2300      	movs	r3, #0
 8010298:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801029a:	89fb      	ldrh	r3, [r7, #14]
 801029c:	2b30      	cmp	r3, #48	@ 0x30
 801029e:	d802      	bhi.n	80102a6 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80102a0:	f06f 0309 	mvn.w	r3, #9
 80102a4:	e112      	b.n	80104cc <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	785a      	ldrb	r2, [r3, #1]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	789a      	ldrb	r2, [r3, #2]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	3303      	adds	r3, #3
 80102c2:	4619      	mov	r1, r3
 80102c4:	2002      	movs	r0, #2
 80102c6:	f7f7 ff59 	bl	800817c <VL53LX_i2c_decode_uint16_t>
 80102ca:	4603      	mov	r3, r0
 80102cc:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	3305      	adds	r3, #5
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	3306      	adds	r3, #6
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	f003 0307 	and.w	r3, r3, #7
 80102ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	3307      	adds	r3, #7
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	f003 0307 	and.w	r3, r3, #7
 80102fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	3308      	adds	r3, #8
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801030c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	3309      	adds	r3, #9
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801031c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	330a      	adds	r3, #10
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f003 0301 	and.w	r3, r3, #1
 801032c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	330b      	adds	r3, #11
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801033c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	330c      	adds	r3, #12
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	f003 0301 	and.w	r3, r3, #1
 801034c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	330d      	adds	r3, #13
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801035c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	330e      	adds	r3, #14
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801036c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	7bda      	ldrb	r2, [r3, #15]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	7c1a      	ldrb	r2, [r3, #16]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	7c5a      	ldrb	r2, [r3, #17]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	7c9a      	ldrb	r2, [r3, #18]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	7cda      	ldrb	r2, [r3, #19]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	7d1a      	ldrb	r2, [r3, #20]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	7d5a      	ldrb	r2, [r3, #21]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	7d9a      	ldrb	r2, [r3, #22]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	7dda      	ldrb	r2, [r3, #23]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	7e1a      	ldrb	r2, [r3, #24]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	7e5a      	ldrb	r2, [r3, #25]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	7e9a      	ldrb	r2, [r3, #26]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	7eda      	ldrb	r2, [r3, #27]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	7f1a      	ldrb	r2, [r3, #28]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	7f5a      	ldrb	r2, [r3, #29]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	7f9a      	ldrb	r2, [r3, #30]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	7fda      	ldrb	r2, [r3, #31]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80104c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b090      	sub	sp, #64	@ 0x40
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104de:	2300      	movs	r3, #0
 80104e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80104e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10a      	bne.n	8010502 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80104ec:	f107 020c 	add.w	r2, r7, #12
 80104f0:	2331      	movs	r3, #49	@ 0x31
 80104f2:	f240 110f 	movw	r1, #271	@ 0x10f
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 fffe 	bl	80114f8 <VL53LX_ReadMulti>
 80104fc:	4603      	mov	r3, r0
 80104fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010502:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010506:	2b00      	cmp	r3, #0
 8010508:	d109      	bne.n	801051e <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 801050a:	f107 030c 	add.w	r3, r7, #12
 801050e:	683a      	ldr	r2, [r7, #0]
 8010510:	4619      	mov	r1, r3
 8010512:	2031      	movs	r0, #49	@ 0x31
 8010514:	f7ff feb8 	bl	8010288 <VL53LX_i2c_decode_nvm_copy_data>
 8010518:	4603      	mov	r3, r0
 801051a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801051e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8010522:	4618      	mov	r0, r3
 8010524:	3740      	adds	r7, #64	@ 0x40
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}

0801052a <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801052a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801052e:	b0d6      	sub	sp, #344	@ 0x158
 8010530:	af00      	add	r7, sp, #0
 8010532:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8010536:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801053a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801053e:	4603      	mov	r3, r0
 8010540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010544:	23f1      	movs	r3, #241	@ 0xf1
 8010546:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 801054a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801054e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 8010552:	2300      	movs	r3, #0
 8010554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8010558:	f04f 0200 	mov.w	r2, #0
 801055c:	f04f 0300 	mov.w	r3, #0
 8010560:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 8010564:	f04f 0200 	mov.w	r2, #0
 8010568:	f04f 0300 	mov.w	r3, #0
 801056c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 8010570:	f04f 0200 	mov.w	r2, #0
 8010574:	f04f 0300 	mov.w	r3, #0
 8010578:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 801057c:	f04f 0200 	mov.w	r2, #0
 8010580:	f04f 0300 	mov.w	r3, #0
 8010584:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 8010588:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801058c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010590:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010592:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 8322 	beq.w	8010be0 <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 801059c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fb f9da 	bl	800b95a <VL53LX_calc_pll_period_mm>
 80105a6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 80105aa:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80105ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d91a      	bls.n	80105ec <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105ba:	2200      	movs	r2, #0
 80105bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80105c0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80105c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105c8:	2200      	movs	r2, #0
 80105ca:	4698      	mov	r8, r3
 80105cc:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80105d2:	460b      	mov	r3, r1
 80105d4:	ebb3 0308 	subs.w	r3, r3, r8
 80105d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105da:	4613      	mov	r3, r2
 80105dc:	eb63 0309 	sbc.w	r3, r3, r9
 80105e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80105e6:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 80105ea:	e013      	b.n	8010614 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80105ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105f0:	2200      	movs	r2, #0
 80105f2:	469a      	mov	sl, r3
 80105f4:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 80105f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105fa:	2200      	movs	r2, #0
 80105fc:	461c      	mov	r4, r3
 80105fe:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010600:	ebba 0304 	subs.w	r3, sl, r4
 8010604:	633b      	str	r3, [r7, #48]	@ 0x30
 8010606:	eb6b 0305 	sbc.w	r3, fp, r5
 801060a:	637b      	str	r3, [r7, #52]	@ 0x34
 801060c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8010610:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8010614:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8010618:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801061c:	429a      	cmp	r2, r3
 801061e:	d91f      	bls.n	8010660 <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010620:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010624:	2200      	movs	r2, #0
 8010626:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801062a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 801062e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010632:	2200      	movs	r2, #0
 8010634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010638:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801063c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8010640:	4623      	mov	r3, r4
 8010642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010646:	4602      	mov	r2, r0
 8010648:	1a9b      	subs	r3, r3, r2
 801064a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801064c:	462b      	mov	r3, r5
 801064e:	460a      	mov	r2, r1
 8010650:	eb63 0302 	sbc.w	r3, r3, r2
 8010654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010656:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801065a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 801065e:	e01e      	b.n	801069e <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010660:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010664:	2200      	movs	r2, #0
 8010666:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801066a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 801066e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010672:	2200      	movs	r2, #0
 8010674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010678:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801067c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8010680:	4623      	mov	r3, r4
 8010682:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010686:	4602      	mov	r2, r0
 8010688:	1a9b      	subs	r3, r3, r2
 801068a:	623b      	str	r3, [r7, #32]
 801068c:	462b      	mov	r3, r5
 801068e:	460a      	mov	r2, r1
 8010690:	eb63 0302 	sbc.w	r3, r3, r2
 8010694:	627b      	str	r3, [r7, #36]	@ 0x24
 8010696:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801069a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 801069e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80106a2:	4313      	orrs	r3, r2
 80106a4:	f000 829c 	beq.w	8010be0 <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106ac:	2200      	movs	r2, #0
 80106ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80106b2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80106b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80106ba:	2200      	movs	r2, #0
 80106bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80106c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80106c4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80106c8:	4623      	mov	r3, r4
 80106ca:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80106ce:	4602      	mov	r2, r0
 80106d0:	189b      	adds	r3, r3, r2
 80106d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80106d6:	460b      	mov	r3, r1
 80106d8:	462a      	mov	r2, r5
 80106da:	eb42 0303 	adc.w	r3, r2, r3
 80106de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 80106e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80106e6:	2200      	movs	r2, #0
 80106e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80106ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106f0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80106f4:	4623      	mov	r3, r4
 80106f6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80106fa:	4602      	mov	r2, r0
 80106fc:	189b      	adds	r3, r3, r2
 80106fe:	61bb      	str	r3, [r7, #24]
 8010700:	460b      	mov	r3, r1
 8010702:	462a      	mov	r2, r5
 8010704:	eb42 0303 	adc.w	r3, r2, r3
 8010708:	61fb      	str	r3, [r7, #28]
 801070a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801070e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 8010712:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010716:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 801071a:	f173 0300 	sbcs.w	r3, r3, #0
 801071e:	d305      	bcc.n	801072c <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 8010720:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8010724:	f04f 0300 	mov.w	r3, #0
 8010728:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 801072c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010730:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010734:	fb03 f102 	mul.w	r1, r3, r2
 8010738:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801073c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010740:	fb02 f303 	mul.w	r3, r2, r3
 8010744:	18ca      	adds	r2, r1, r3
 8010746:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801074a:	fba3 1303 	umull	r1, r3, r3, r3
 801074e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010752:	460b      	mov	r3, r1
 8010754:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801075c:	18d3      	adds	r3, r2, r3
 801075e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010762:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8010766:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 801076a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 801076e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010772:	f04f 0000 	mov.w	r0, #0
 8010776:	f04f 0100 	mov.w	r1, #0
 801077a:	0219      	lsls	r1, r3, #8
 801077c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010780:	0210      	lsls	r0, r2, #8
 8010782:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 8010786:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 801078a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801078e:	d305      	bcc.n	801079c <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010798:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801079c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107a0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107a4:	f7ef fd8c 	bl	80002c0 <__aeabi_uldivmod>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80107b0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107b4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107b8:	f7ef fd82 	bl	80002c0 <__aeabi_uldivmod>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80107c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80107c8:	2b80      	cmp	r3, #128	@ 0x80
 80107ca:	d305      	bcc.n	80107d8 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 80107cc:	f04f 32ff 	mov.w	r2, #4294967295
 80107d0:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 80107d4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 80107d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80107dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107e0:	fb03 f102 	mul.w	r1, r3, r2
 80107e4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80107e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80107ec:	fb02 f303 	mul.w	r3, r2, r3
 80107f0:	4419      	add	r1, r3
 80107f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80107f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107fa:	fba2 2303 	umull	r2, r3, r2, r3
 80107fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010802:	4613      	mov	r3, r2
 8010804:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8010808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801080c:	18cb      	adds	r3, r1, r3
 801080e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010812:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8010816:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801081a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801081e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010822:	2200      	movs	r2, #0
 8010824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010828:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801082c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8010830:	2200      	movs	r2, #0
 8010832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010836:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801083a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801083e:	4623      	mov	r3, r4
 8010840:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8010844:	4602      	mov	r2, r0
 8010846:	189b      	adds	r3, r3, r2
 8010848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801084c:	460b      	mov	r3, r1
 801084e:	462a      	mov	r2, r5
 8010850:	eb42 0303 	adc.w	r3, r2, r3
 8010854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010858:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801085c:	2200      	movs	r2, #0
 801085e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010860:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010862:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8010866:	4623      	mov	r3, r4
 8010868:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801086c:	4602      	mov	r2, r0
 801086e:	189b      	adds	r3, r3, r2
 8010870:	673b      	str	r3, [r7, #112]	@ 0x70
 8010872:	460b      	mov	r3, r1
 8010874:	462a      	mov	r2, r5
 8010876:	eb42 0303 	adc.w	r3, r2, r3
 801087a:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801087c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8010880:	2200      	movs	r2, #0
 8010882:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010884:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010886:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 801088a:	4623      	mov	r3, r4
 801088c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010890:	4602      	mov	r2, r0
 8010892:	189b      	adds	r3, r3, r2
 8010894:	613b      	str	r3, [r7, #16]
 8010896:	460b      	mov	r3, r1
 8010898:	462a      	mov	r2, r5
 801089a:	eb42 0303 	adc.w	r3, r2, r3
 801089e:	617b      	str	r3, [r7, #20]
 80108a0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80108a4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 80108a8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108ac:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80108b0:	f173 0300 	sbcs.w	r3, r3, #0
 80108b4:	d305      	bcc.n	80108c2 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 80108b6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80108ba:	f04f 0300 	mov.w	r3, #0
 80108be:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 80108c2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108c6:	f04f 0000 	mov.w	r0, #0
 80108ca:	f04f 0100 	mov.w	r1, #0
 80108ce:	0219      	lsls	r1, r3, #8
 80108d0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80108d4:	0210      	lsls	r0, r2, #8
 80108d6:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 80108da:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80108de:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108e2:	1884      	adds	r4, r0, r2
 80108e4:	60bc      	str	r4, [r7, #8]
 80108e6:	eb41 0303 	adc.w	r3, r1, r3
 80108ea:	60fb      	str	r3, [r7, #12]
 80108ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80108f0:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80108f4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	da05      	bge.n	8010908 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 80108fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010900:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010904:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010908:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 801090c:	2b01      	cmp	r3, #1
 801090e:	d331      	bcc.n	8010974 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010910:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010914:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010918:	f7ef fcd2 	bl	80002c0 <__aeabi_uldivmod>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010928:	2200      	movs	r2, #0
 801092a:	663b      	str	r3, [r7, #96]	@ 0x60
 801092c:	667a      	str	r2, [r7, #100]	@ 0x64
 801092e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010932:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010936:	4622      	mov	r2, r4
 8010938:	fb02 f203 	mul.w	r2, r2, r3
 801093c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010940:	4629      	mov	r1, r5
 8010942:	fb01 f303 	mul.w	r3, r1, r3
 8010946:	441a      	add	r2, r3
 8010948:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801094c:	4621      	mov	r1, r4
 801094e:	fba3 1301 	umull	r1, r3, r3, r1
 8010952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010956:	460b      	mov	r3, r1
 8010958:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801095c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010960:	18d3      	adds	r3, r2, r3
 8010962:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010966:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 801096a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801096e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010972:	e030      	b.n	80109d6 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010974:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010978:	2200      	movs	r2, #0
 801097a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801097c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801097e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010982:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8010986:	4622      	mov	r2, r4
 8010988:	fb02 f203 	mul.w	r2, r2, r3
 801098c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010990:	4629      	mov	r1, r5
 8010992:	fb01 f303 	mul.w	r3, r1, r3
 8010996:	441a      	add	r2, r3
 8010998:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801099c:	4621      	mov	r1, r4
 801099e:	fba3 1301 	umull	r1, r3, r3, r1
 80109a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109a6:	460b      	mov	r3, r1
 80109a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80109ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80109b0:	18d3      	adds	r3, r2, r3
 80109b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109b6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80109ba:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80109be:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109c2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109c6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109ca:	f7ef fc79 	bl	80002c0 <__aeabi_uldivmod>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80109d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109da:	2b00      	cmp	r3, #0
 80109dc:	da05      	bge.n	80109ea <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 80109de:	f04f 32ff 	mov.w	r2, #4294967295
 80109e2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80109e6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80109ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d33d      	bcc.n	8010a6e <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109f2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109f6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109fa:	f7ef fc61 	bl	80002c0 <__aeabi_uldivmod>
 80109fe:	4602      	mov	r2, r0
 8010a00:	460b      	mov	r3, r1
 8010a02:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010a06:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	f04f 0300 	mov.w	r3, #0
 8010a12:	0882      	lsrs	r2, r0, #2
 8010a14:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010a18:	088b      	lsrs	r3, r1, #2
 8010a1a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010a1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a22:	2200      	movs	r2, #0
 8010a24:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a26:	657a      	str	r2, [r7, #84]	@ 0x54
 8010a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a2c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010a30:	4622      	mov	r2, r4
 8010a32:	fb02 f203 	mul.w	r2, r2, r3
 8010a36:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	fb01 f303 	mul.w	r3, r1, r3
 8010a40:	4413      	add	r3, r2
 8010a42:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a46:	4621      	mov	r1, r4
 8010a48:	fba2 1201 	umull	r1, r2, r2, r1
 8010a4c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8010a50:	460a      	mov	r2, r1
 8010a52:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8010a56:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010a60:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8010a64:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a68:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a6c:	e03c      	b.n	8010ae8 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a72:	2200      	movs	r2, #0
 8010a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a7c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010a80:	4622      	mov	r2, r4
 8010a82:	fb02 f203 	mul.w	r2, r2, r3
 8010a86:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	fb01 f303 	mul.w	r3, r1, r3
 8010a90:	4413      	add	r3, r2
 8010a92:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a96:	4621      	mov	r1, r4
 8010a98:	fba2 1201 	umull	r1, r2, r2, r1
 8010a9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010aa0:	460a      	mov	r2, r1
 8010aa2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8010aa6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8010aaa:	4413      	add	r3, r2
 8010aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010ab0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8010ab4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010ab8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010abc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010ac0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ac4:	f7ef fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010ad0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ad4:	f04f 0200 	mov.w	r2, #0
 8010ad8:	f04f 0300 	mov.w	r3, #0
 8010adc:	0882      	lsrs	r2, r0, #2
 8010ade:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010ae2:	088b      	lsrs	r3, r1, #2
 8010ae4:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010ae8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	da05      	bge.n	8010afc <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010af0:	f04f 32ff 	mov.w	r2, #4294967295
 8010af4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010af8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8010afc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b00:	f04f 0200 	mov.w	r2, #0
 8010b04:	f04f 0300 	mov.w	r3, #0
 8010b08:	0882      	lsrs	r2, r0, #2
 8010b0a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010b0e:	088b      	lsrs	r3, r1, #2
 8010b10:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010b14:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d305      	bcc.n	8010b28 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b20:	f04f 0300 	mov.w	r3, #0
 8010b24:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b30:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b32:	f04f 0200 	mov.w	r2, #0
 8010b36:	f04f 0300 	mov.w	r3, #0
 8010b3a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010b3e:	4629      	mov	r1, r5
 8010b40:	01cb      	lsls	r3, r1, #7
 8010b42:	4621      	mov	r1, r4
 8010b44:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010b48:	4621      	mov	r1, r4
 8010b4a:	01ca      	lsls	r2, r1, #7
 8010b4c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 8010b50:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b54:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8010b58:	fb03 f202 	mul.w	r2, r3, r2
 8010b5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010b64:	fb01 f303 	mul.w	r3, r1, r3
 8010b68:	441a      	add	r2, r3
 8010b6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010b6e:	fba3 1303 	umull	r1, r3, r3, r3
 8010b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b76:	460b      	mov	r3, r1
 8010b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b80:	18d3      	adds	r3, r2, r3
 8010b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b86:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8010b8a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010b8e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 8010b92:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b96:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010b9a:	1884      	adds	r4, r0, r2
 8010b9c:	603c      	str	r4, [r7, #0]
 8010b9e:	eb41 0303 	adc.w	r3, r1, r3
 8010ba2:	607b      	str	r3, [r7, #4]
 8010ba4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010ba8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010bac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d305      	bcc.n	8010bc0 <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb8:	f04f 0300 	mov.w	r3, #0
 8010bbc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010bc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fa fd61 	bl	800b68c <VL53LX_isqrt>
 8010bca:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8010bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8010bd8:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 8010be0:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8010bea:	46bd      	mov	sp, r7
 8010bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010bf0 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3318      	adds	r3, #24
 8010c00:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d107      	bne.n	8010c1e <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010c0e:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f88b 	bl	8010d2e <VL53LX_poll_for_range_completion>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	75fb      	strb	r3, [r7, #23]
 8010c1c:	e01b      	b.n	8010c56 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c22:	e011      	b.n	8010c48 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010c24:	f107 030f 	add.w	r3, r7, #15
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 f819 	bl	8010c62 <VL53LX_is_new_data_ready>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d105      	bne.n	8010c48 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fd72 	bl	8011728 <VL53LX_WaitMs>
 8010c44:	4603      	mov	r3, r0
 8010c46:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d103      	bne.n	8010c56 <VL53LX_wait_for_test_completion+0x66>
 8010c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0e6      	beq.n	8010c24 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3718      	adds	r7, #24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b086      	sub	sp, #24
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	3318      	adds	r3, #24
 8010c74:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010c88:	f003 0310 	and.w	r3, r3, #16
 8010c8c:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010c8e:	7bfb      	ldrb	r3, [r7, #15]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d102      	bne.n	8010c9a <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010c94:	2301      	movs	r3, #1
 8010c96:	75fb      	strb	r3, [r7, #23]
 8010c98:	e001      	b.n	8010c9e <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010c9e:	f107 030e 	add.w	r3, r7, #14
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	2131      	movs	r1, #49	@ 0x31
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fcb8 	bl	801161c <VL53LX_RdByte>
 8010cac:	4603      	mov	r3, r0
 8010cae:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010cb0:	7bbb      	ldrb	r3, [r7, #14]
 8010cb2:	f003 0201 	and.w	r2, r3, #1
 8010cb6:	7dfb      	ldrb	r3, [r7, #23]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d103      	bne.n	8010cc4 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	701a      	strb	r2, [r3, #0]
 8010cc2:	e002      	b.n	8010cca <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010cca:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3718      	adds	r7, #24
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b086      	sub	sp, #24
 8010cda:	af02      	add	r7, sp, #8
 8010cdc:	6078      	str	r0, [r7, #4]
 8010cde:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010ce4:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fd2d 	bl	8011748 <VL53LX_WaitUs>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10b      	bne.n	8010d12 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	9301      	str	r3, [sp, #4]
 8010cfe:	2301      	movs	r3, #1
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	2301      	movs	r3, #1
 8010d04:	22e5      	movs	r2, #229	@ 0xe5
 8010d06:	6839      	ldr	r1, [r7, #0]
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 fd35 	bl	8011778 <VL53LX_WaitValueMaskEx>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d103      	bne.n	8010d22 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010d1a:	2103      	movs	r1, #3
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f6 fc0f 	bl	8007540 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b088      	sub	sp, #32
 8010d32:	af02      	add	r7, sp, #8
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	3318      	adds	r3, #24
 8010d40:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010d46:	2300      	movs	r3, #0
 8010d48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010d50:	f003 0310 	and.w	r3, r3, #16
 8010d54:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010d56:	7bfb      	ldrb	r3, [r7, #15]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d102      	bne.n	8010d62 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	75fb      	strb	r3, [r7, #23]
 8010d60:	e001      	b.n	8010d66 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010d62:	2300      	movs	r3, #0
 8010d64:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010d66:	7dfb      	ldrb	r3, [r7, #23]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	9201      	str	r2, [sp, #4]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	9200      	str	r2, [sp, #0]
 8010d70:	2231      	movs	r2, #49	@ 0x31
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fcff 	bl	8011778 <VL53LX_WaitValueMaskEx>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010d7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3718      	adds	r7, #24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010d8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d8e:	b0c0      	sub	sp, #256	@ 0x100
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8010d96:	4618      	mov	r0, r3
 8010d98:	460b      	mov	r3, r1
 8010d9a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8010d9e:	4613      	mov	r3, r2
 8010da0:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8010da4:	4603      	mov	r3, r0
 8010da6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 8010db0:	2300      	movs	r3, #0
 8010db2:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 8010dd4:	f04f 0200 	mov.w	r2, #0
 8010dd8:	f04f 0300 	mov.w	r3, #0
 8010ddc:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 8010de0:	f04f 0200 	mov.w	r2, #0
 8010de4:	f04f 0300 	mov.w	r3, #0
 8010de8:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 8010dec:	f04f 0200 	mov.w	r2, #0
 8010df0:	f04f 0300 	mov.w	r3, #0
 8010df4:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8010df8:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d108      	bne.n	8010e12 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8010e00:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8010e04:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8010e08:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fb f81f 	bl	800be50 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010e12:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d162      	bne.n	8010ee0 <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010e1a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e1e:	091b      	lsrs	r3, r3, #4
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	f003 0301 	and.w	r3, r3, #1
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00d      	beq.n	8010e46 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010e2a:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e2e:	461a      	mov	r2, r3
 8010e30:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e34:	095b      	lsrs	r3, r3, #5
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8010e44:	e00a      	b.n	8010e5c <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010e46:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e50:	095b      	lsrs	r3, r3, #5
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010e5c:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e60:	461a      	mov	r2, r3
 8010e62:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e66:	095b      	lsrs	r3, r3, #5
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	4413      	add	r3, r2
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010e72:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d011      	beq.n	8010ea2 <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 8010e7e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010e82:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010e84:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e88:	f003 020f 	and.w	r2, r3, #15
 8010e8c:	0fd3      	lsrs	r3, r2, #31
 8010e8e:	4413      	add	r3, r2
 8010e90:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	1acb      	subs	r3, r1, r3
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	3b01      	subs	r3, #1
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8010ea0:	e00f      	b.n	8010ec2 <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 8010ea2:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010ea6:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010ea8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010eac:	f003 020f 	and.w	r2, r3, #15
 8010eb0:	0fd3      	lsrs	r3, r2, #31
 8010eb2:	4413      	add	r3, r2
 8010eb4:	105b      	asrs	r3, r3, #1
 8010eb6:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	440b      	add	r3, r1
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 8010ec2:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010ec6:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010ec8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010ecc:	f003 020f 	and.w	r2, r3, #15
 8010ed0:	0fd3      	lsrs	r3, r2, #31
 8010ed2:	4413      	add	r3, r2
 8010ed4:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	440b      	add	r3, r1
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010ee0:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d133      	bne.n	8010f50 <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010ee8:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8010ef2:	4413      	add	r3, r2
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	3b0f      	subs	r3, #15
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010f02:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8010f0c:	4413      	add	r3, r2
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	005b      	lsls	r3, r3, #1
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	3b0f      	subs	r3, #15
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010f1c:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8010f26:	4413      	add	r3, r2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	3b0f      	subs	r3, #15
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010f36:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8010f40:	4413      	add	r3, r2
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	3b0f      	subs	r3, #15
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010f50:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f040 8135 	bne.w	80111c4 <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f5a:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8010f5e:	17da      	asrs	r2, r3, #31
 8010f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010f64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010f68:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8010f6c:	17da      	asrs	r2, r3, #31
 8010f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010f72:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f76:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010f80:	fb02 f203 	mul.w	r2, r2, r3
 8010f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010f88:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 8010f8c:	4601      	mov	r1, r0
 8010f8e:	fb01 f303 	mul.w	r3, r1, r3
 8010f92:	4413      	add	r3, r2
 8010f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010f98:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8010f9c:	fba2 4501 	umull	r4, r5, r2, r1
 8010fa0:	442b      	add	r3, r5
 8010fa2:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fa4:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8010fa8:	17da      	asrs	r2, r3, #31
 8010faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010fae:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 8010fb2:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8010fb6:	17da      	asrs	r2, r3, #31
 8010fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010fca:	fb02 f203 	mul.w	r2, r2, r3
 8010fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fd2:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 8010fd6:	4601      	mov	r1, r0
 8010fd8:	fb01 f303 	mul.w	r3, r1, r3
 8010fdc:	4413      	add	r3, r2
 8010fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010fe2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010fe6:	fba2 8901 	umull	r8, r9, r2, r1
 8010fea:	444b      	add	r3, r9
 8010fec:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010fee:	eb14 0308 	adds.w	r3, r4, r8
 8010ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ff4:	eb45 0309 	adc.w	r3, r5, r9
 8010ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ffa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8010ffe:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8011002:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8011006:	1c51      	adds	r1, r2, #1
 8011008:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 801100c:	f143 0300 	adc.w	r3, r3, #0
 8011010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011018:	460b      	mov	r3, r1
 801101a:	0fdb      	lsrs	r3, r3, #31
 801101c:	2200      	movs	r2, #0
 801101e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011020:	647a      	str	r2, [r7, #68]	@ 0x44
 8011022:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011026:	4623      	mov	r3, r4
 8011028:	4602      	mov	r2, r0
 801102a:	189b      	adds	r3, r3, r2
 801102c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801102e:	460b      	mov	r3, r1
 8011030:	462a      	mov	r2, r5
 8011032:	eb42 0303 	adc.w	r3, r2, r3
 8011036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011038:	f04f 0200 	mov.w	r2, #0
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011044:	4621      	mov	r1, r4
 8011046:	084a      	lsrs	r2, r1, #1
 8011048:	4629      	mov	r1, r5
 801104a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801104e:	4629      	mov	r1, r5
 8011050:	104b      	asrs	r3, r1, #1
 8011052:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801105a:	2200      	movs	r2, #0
 801105c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011060:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011064:	f04f 0000 	mov.w	r0, #0
 8011068:	f04f 0100 	mov.w	r1, #0
 801106c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011070:	462b      	mov	r3, r5
 8011072:	0099      	lsls	r1, r3, #2
 8011074:	4623      	mov	r3, r4
 8011076:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 801107a:	4623      	mov	r3, r4
 801107c:	0098      	lsls	r0, r3, #2
 801107e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8011082:	1814      	adds	r4, r2, r0
 8011084:	633c      	str	r4, [r7, #48]	@ 0x30
 8011086:	414b      	adcs	r3, r1
 8011088:	637b      	str	r3, [r7, #52]	@ 0x34
 801108a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801108e:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011092:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 8011096:	17da      	asrs	r2, r3, #31
 8011098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801109c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110a0:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80110a4:	17da      	asrs	r2, r3, #31
 80110a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80110aa:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80110ae:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80110b2:	462b      	mov	r3, r5
 80110b4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80110b8:	4642      	mov	r2, r8
 80110ba:	fb02 f203 	mul.w	r2, r2, r3
 80110be:	464b      	mov	r3, r9
 80110c0:	4621      	mov	r1, r4
 80110c2:	fb01 f303 	mul.w	r3, r1, r3
 80110c6:	4413      	add	r3, r2
 80110c8:	4622      	mov	r2, r4
 80110ca:	4641      	mov	r1, r8
 80110cc:	fba2 ab01 	umull	sl, fp, r2, r1
 80110d0:	445b      	add	r3, fp
 80110d2:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110d4:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 80110d8:	17da      	asrs	r2, r3, #31
 80110da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80110dc:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 80110de:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80110e2:	17da      	asrs	r2, r3, #31
 80110e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80110e6:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110e8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80110ec:	462b      	mov	r3, r5
 80110ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80110f2:	4642      	mov	r2, r8
 80110f4:	fb02 f203 	mul.w	r2, r2, r3
 80110f8:	464b      	mov	r3, r9
 80110fa:	4621      	mov	r1, r4
 80110fc:	fb01 f303 	mul.w	r3, r1, r3
 8011100:	4413      	add	r3, r2
 8011102:	4622      	mov	r2, r4
 8011104:	4641      	mov	r1, r8
 8011106:	fba2 1201 	umull	r1, r2, r2, r1
 801110a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801110e:	460a      	mov	r2, r1
 8011110:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011114:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011118:	4413      	add	r3, r2
 801111a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801111e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8011122:	460b      	mov	r3, r1
 8011124:	eb1a 0303 	adds.w	r3, sl, r3
 8011128:	62bb      	str	r3, [r7, #40]	@ 0x28
 801112a:	4613      	mov	r3, r2
 801112c:	eb4b 0303 	adc.w	r3, fp, r3
 8011130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011132:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8011136:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 801113a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 801113e:	1c51      	adds	r1, r2, #1
 8011140:	66b9      	str	r1, [r7, #104]	@ 0x68
 8011142:	f143 0300 	adc.w	r3, r3, #0
 8011146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801114c:	460b      	mov	r3, r1
 801114e:	0fdb      	lsrs	r3, r3, #31
 8011150:	2200      	movs	r2, #0
 8011152:	623b      	str	r3, [r7, #32]
 8011154:	627a      	str	r2, [r7, #36]	@ 0x24
 8011156:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 801115a:	4623      	mov	r3, r4
 801115c:	4602      	mov	r2, r0
 801115e:	189b      	adds	r3, r3, r2
 8011160:	61bb      	str	r3, [r7, #24]
 8011162:	460b      	mov	r3, r1
 8011164:	462a      	mov	r2, r5
 8011166:	eb42 0303 	adc.w	r3, r2, r3
 801116a:	61fb      	str	r3, [r7, #28]
 801116c:	f04f 0200 	mov.w	r2, #0
 8011170:	f04f 0300 	mov.w	r3, #0
 8011174:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011178:	4621      	mov	r1, r4
 801117a:	084a      	lsrs	r2, r1, #1
 801117c:	4629      	mov	r1, r5
 801117e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011182:	4629      	mov	r1, r5
 8011184:	104b      	asrs	r3, r1, #1
 8011186:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801118a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801118e:	2200      	movs	r2, #0
 8011190:	663b      	str	r3, [r7, #96]	@ 0x60
 8011192:	667a      	str	r2, [r7, #100]	@ 0x64
 8011194:	f04f 0200 	mov.w	r2, #0
 8011198:	f04f 0300 	mov.w	r3, #0
 801119c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80111a0:	4629      	mov	r1, r5
 80111a2:	008b      	lsls	r3, r1, #2
 80111a4:	4621      	mov	r1, r4
 80111a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80111aa:	4621      	mov	r1, r4
 80111ac:	008a      	lsls	r2, r1, #2
 80111ae:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80111b2:	1884      	adds	r4, r0, r2
 80111b4:	613c      	str	r4, [r7, #16]
 80111b6:	eb41 0303 	adc.w	r3, r1, r3
 80111ba:	617b      	str	r3, [r7, #20]
 80111bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80111c0:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80111c4:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d132      	bne.n	8011232 <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 80111cc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80111d0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80111d4:	1884      	adds	r4, r0, r2
 80111d6:	65bc      	str	r4, [r7, #88]	@ 0x58
 80111d8:	eb41 0303 	adc.w	r3, r1, r3
 80111dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80111e2:	460b      	mov	r3, r1
 80111e4:	3301      	adds	r3, #1
 80111e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80111e8:	4613      	mov	r3, r2
 80111ea:	f143 0300 	adc.w	r3, r3, #0
 80111ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80111f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80111f4:	460b      	mov	r3, r1
 80111f6:	0fdb      	lsrs	r3, r3, #31
 80111f8:	2200      	movs	r2, #0
 80111fa:	60bb      	str	r3, [r7, #8]
 80111fc:	60fa      	str	r2, [r7, #12]
 80111fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011202:	4623      	mov	r3, r4
 8011204:	4602      	mov	r2, r0
 8011206:	189b      	adds	r3, r3, r2
 8011208:	603b      	str	r3, [r7, #0]
 801120a:	460b      	mov	r3, r1
 801120c:	462a      	mov	r2, r5
 801120e:	eb42 0303 	adc.w	r3, r2, r3
 8011212:	607b      	str	r3, [r7, #4]
 8011214:	f04f 0200 	mov.w	r2, #0
 8011218:	f04f 0300 	mov.w	r3, #0
 801121c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011220:	4621      	mov	r1, r4
 8011222:	084a      	lsrs	r2, r1, #1
 8011224:	4629      	mov	r1, r5
 8011226:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801122a:	4629      	mov	r1, r5
 801122c:	104b      	asrs	r3, r1, #1
 801122e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8011232:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011236:	2b00      	cmp	r3, #0
 8011238:	d109      	bne.n	801124e <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 801123a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 801123e:	2b00      	cmp	r3, #0
 8011240:	da05      	bge.n	801124e <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 8011242:	f04f 0200 	mov.w	r2, #0
 8011246:	f04f 0300 	mov.w	r3, #0
 801124a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801124e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011252:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011256:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011258:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 801125c:	4618      	mov	r0, r3
 801125e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011262:	46bd      	mov	sp, r7
 8011264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011268 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801126c:	b09a      	sub	sp, #104	@ 0x68
 801126e:	af00      	add	r7, sp, #0
 8011270:	6478      	str	r0, [r7, #68]	@ 0x44
 8011272:	6439      	str	r1, [r7, #64]	@ 0x40
 8011274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011276:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011278:	2300      	movs	r3, #0
 801127a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801127e:	f04f 0200 	mov.w	r2, #0
 8011282:	f04f 0300 	mov.w	r3, #0
 8011286:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 801128a:	f04f 0200 	mov.w	r2, #0
 801128e:	f04f 0300 	mov.w	r3, #0
 8011292:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 8011296:	f04f 0200 	mov.w	r2, #0
 801129a:	f04f 0300 	mov.w	r3, #0
 801129e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80112a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112aa:	2200      	movs	r2, #0
 80112ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80112ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80112b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112b6:	2200      	movs	r2, #0
 80112b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80112ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80112bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80112c0:	460b      	mov	r3, r1
 80112c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112c4:	fb02 f203 	mul.w	r2, r2, r3
 80112c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ca:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80112ce:	4601      	mov	r1, r0
 80112d0:	fb01 f303 	mul.w	r3, r1, r3
 80112d4:	4413      	add	r3, r2
 80112d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112da:	fba2 4501 	umull	r4, r5, r2, r1
 80112de:	442b      	add	r3, r5
 80112e0:	461d      	mov	r5, r3
 80112e2:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 80112e6:	623b      	str	r3, [r7, #32]
 80112e8:	f145 0300 	adc.w	r3, r5, #0
 80112ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80112ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80112f2:	f04f 0300 	mov.w	r3, #0
 80112f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80112fa:	f7ee ffe1 	bl	80002c0 <__aeabi_uldivmod>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8011306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011308:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 801130c:	b29b      	uxth	r3, r3
 801130e:	2200      	movs	r2, #0
 8011310:	61bb      	str	r3, [r7, #24]
 8011312:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8011314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011316:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801131a:	4622      	mov	r2, r4
 801131c:	fb02 f203 	mul.w	r2, r2, r3
 8011320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011322:	4629      	mov	r1, r5
 8011324:	fb01 f303 	mul.w	r3, r1, r3
 8011328:	4413      	add	r3, r2
 801132a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801132c:	4621      	mov	r1, r4
 801132e:	fba2 ab01 	umull	sl, fp, r2, r1
 8011332:	445b      	add	r3, fp
 8011334:	469b      	mov	fp, r3
 8011336:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 801133a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 801133e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8011342:	f04f 0200 	mov.w	r2, #0
 8011346:	f04f 0300 	mov.w	r3, #0
 801134a:	0a02      	lsrs	r2, r0, #8
 801134c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011350:	0a0b      	lsrs	r3, r1, #8
 8011352:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8011356:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801135a:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 801135e:	6139      	str	r1, [r7, #16]
 8011360:	f143 0300 	adc.w	r3, r3, #0
 8011364:	617b      	str	r3, [r7, #20]
 8011366:	f04f 0200 	mov.w	r2, #0
 801136a:	f04f 0300 	mov.w	r3, #0
 801136e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011372:	4621      	mov	r1, r4
 8011374:	0aca      	lsrs	r2, r1, #11
 8011376:	4629      	mov	r1, r5
 8011378:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 801137c:	4629      	mov	r1, r5
 801137e:	0acb      	lsrs	r3, r1, #11
 8011380:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8011384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8011388:	2b01      	cmp	r3, #1
 801138a:	d305      	bcc.n	8011398 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 801138c:	f04f 32ff 	mov.w	r2, #4294967295
 8011390:	f04f 0300 	mov.w	r3, #0
 8011394:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011398:	2300      	movs	r3, #0
 801139a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801139e:	e041      	b.n	8011424 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80113a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113a6:	3302      	adds	r3, #2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	4413      	add	r3, r2
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	60bb      	str	r3, [r7, #8]
 80113b2:	60fa      	str	r2, [r7, #12]
 80113b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80113ba:	4622      	mov	r2, r4
 80113bc:	fb02 f203 	mul.w	r2, r2, r3
 80113c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113c2:	4629      	mov	r1, r5
 80113c4:	fb01 f303 	mul.w	r3, r1, r3
 80113c8:	4413      	add	r3, r2
 80113ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80113cc:	4621      	mov	r1, r4
 80113ce:	fba2 8901 	umull	r8, r9, r2, r1
 80113d2:	444b      	add	r3, r9
 80113d4:	4699      	mov	r9, r3
 80113d6:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80113da:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80113de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80113e2:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 80113e6:	6039      	str	r1, [r7, #0]
 80113e8:	f143 0300 	adc.w	r3, r3, #0
 80113ec:	607b      	str	r3, [r7, #4]
 80113ee:	f04f 0200 	mov.w	r2, #0
 80113f2:	f04f 0300 	mov.w	r3, #0
 80113f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80113fa:	4621      	mov	r1, r4
 80113fc:	0a8a      	lsrs	r2, r1, #10
 80113fe:	4629      	mov	r1, r5
 8011400:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8011404:	4629      	mov	r1, r5
 8011406:	0a8b      	lsrs	r3, r1, #10
 8011408:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 801140c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011410:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011414:	3206      	adds	r2, #6
 8011416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801141a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801141e:	3301      	adds	r3, #1
 8011420:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011426:	7a9b      	ldrb	r3, [r3, #10]
 8011428:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801142c:	429a      	cmp	r2, r3
 801142e:	d3b7      	bcc.n	80113a0 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8011430:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 8011434:	4618      	mov	r0, r3
 8011436:	3768      	adds	r7, #104	@ 0x68
 8011438:	46bd      	mov	sp, r7
 801143a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801143e <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801143e:	b580      	push	{r7, lr}
 8011440:	b084      	sub	sp, #16
 8011442:	af00      	add	r7, sp, #0
 8011444:	60f8      	str	r0, [r7, #12]
 8011446:	60b9      	str	r1, [r7, #8]
 8011448:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	8910      	ldrh	r0, [r2, #8]
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	b292      	uxth	r2, r2
 8011456:	68b9      	ldr	r1, [r7, #8]
 8011458:	4798      	blx	r3
 801145a:	4603      	mov	r3, r0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	691b      	ldr	r3, [r3, #16]
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	8910      	ldrh	r0, [r2, #8]
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	b292      	uxth	r2, r2
 801147c:	68b9      	ldr	r1, [r7, #8]
 801147e:	4798      	blx	r3
 8011480:	4603      	mov	r3, r0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
	...

0801148c <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801148c:	b580      	push	{r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	603b      	str	r3, [r7, #0]
 8011498:	460b      	mov	r3, r1
 801149a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801149c:	2300      	movs	r3, #0
 801149e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	2bff      	cmp	r3, #255	@ 0xff
 80114a4:	d902      	bls.n	80114ac <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80114a6:	f06f 0303 	mvn.w	r3, #3
 80114aa:	e01d      	b.n	80114e8 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80114ac:	897b      	ldrh	r3, [r7, #10]
 80114ae:	0a1b      	lsrs	r3, r3, #8
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	4b0e      	ldr	r3, [pc, #56]	@ (80114f0 <VL53LX_WriteMulti+0x64>)
 80114b6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80114b8:	897b      	ldrh	r3, [r7, #10]
 80114ba:	b2da      	uxtb	r2, r3
 80114bc:	4b0c      	ldr	r3, [pc, #48]	@ (80114f0 <VL53LX_WriteMulti+0x64>)
 80114be:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80114c0:	683a      	ldr	r2, [r7, #0]
 80114c2:	6879      	ldr	r1, [r7, #4]
 80114c4:	480b      	ldr	r0, [pc, #44]	@ (80114f4 <VL53LX_WriteMulti+0x68>)
 80114c6:	f005 fc6a 	bl	8016d9e <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	3302      	adds	r3, #2
 80114ce:	461a      	mov	r2, r3
 80114d0:	4907      	ldr	r1, [pc, #28]	@ (80114f0 <VL53LX_WriteMulti+0x64>)
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f7ff ffb3 	bl	801143e <_I2CWrite>
 80114d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80114e0:	23f3      	movs	r3, #243	@ 0xf3
 80114e2:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80114e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3718      	adds	r7, #24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	20007328 	.word	0x20007328
 80114f4:	2000732a 	.word	0x2000732a

080114f8 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	607a      	str	r2, [r7, #4]
 8011502:	603b      	str	r3, [r7, #0]
 8011504:	460b      	mov	r3, r1
 8011506:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011508:	2300      	movs	r3, #0
 801150a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801150c:	897b      	ldrh	r3, [r7, #10]
 801150e:	0a1b      	lsrs	r3, r3, #8
 8011510:	b29b      	uxth	r3, r3
 8011512:	b2da      	uxtb	r2, r3
 8011514:	4b12      	ldr	r3, [pc, #72]	@ (8011560 <VL53LX_ReadMulti+0x68>)
 8011516:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011518:	897b      	ldrh	r3, [r7, #10]
 801151a:	b2da      	uxtb	r2, r3
 801151c:	4b10      	ldr	r3, [pc, #64]	@ (8011560 <VL53LX_ReadMulti+0x68>)
 801151e:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011520:	2202      	movs	r2, #2
 8011522:	490f      	ldr	r1, [pc, #60]	@ (8011560 <VL53LX_ReadMulti+0x68>)
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f7ff ff8a 	bl	801143e <_I2CWrite>
 801152a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011532:	23f3      	movs	r3, #243	@ 0xf3
 8011534:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011536:	e00c      	b.n	8011552 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8011538:	683a      	ldr	r2, [r7, #0]
 801153a:	6879      	ldr	r1, [r7, #4]
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f7ff ff91 	bl	8011464 <_I2CRead>
 8011542:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801154a:	23f3      	movs	r3, #243	@ 0xf3
 801154c:	75fb      	strb	r3, [r7, #23]
 801154e:	e000      	b.n	8011552 <VL53LX_ReadMulti+0x5a>
    }
done:
 8011550:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	20007328 	.word	0x20007328

08011564 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	460b      	mov	r3, r1
 801156e:	807b      	strh	r3, [r7, #2]
 8011570:	4613      	mov	r3, r2
 8011572:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011574:	2300      	movs	r3, #0
 8011576:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011578:	887b      	ldrh	r3, [r7, #2]
 801157a:	0a1b      	lsrs	r3, r3, #8
 801157c:	b29b      	uxth	r3, r3
 801157e:	b2da      	uxtb	r2, r3
 8011580:	4b0c      	ldr	r3, [pc, #48]	@ (80115b4 <VL53LX_WrByte+0x50>)
 8011582:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011584:	887b      	ldrh	r3, [r7, #2]
 8011586:	b2da      	uxtb	r2, r3
 8011588:	4b0a      	ldr	r3, [pc, #40]	@ (80115b4 <VL53LX_WrByte+0x50>)
 801158a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 801158c:	4a09      	ldr	r2, [pc, #36]	@ (80115b4 <VL53LX_WrByte+0x50>)
 801158e:	787b      	ldrb	r3, [r7, #1]
 8011590:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011592:	2203      	movs	r2, #3
 8011594:	4907      	ldr	r1, [pc, #28]	@ (80115b4 <VL53LX_WrByte+0x50>)
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7ff ff51 	bl	801143e <_I2CWrite>
 801159c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80115a4:	23f3      	movs	r3, #243	@ 0xf3
 80115a6:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80115a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	20007328 	.word	0x20007328

080115b8 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	460b      	mov	r3, r1
 80115c2:	807b      	strh	r3, [r7, #2]
 80115c4:	4613      	mov	r3, r2
 80115c6:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80115c8:	2300      	movs	r3, #0
 80115ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80115cc:	887b      	ldrh	r3, [r7, #2]
 80115ce:	0a1b      	lsrs	r3, r3, #8
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	4b10      	ldr	r3, [pc, #64]	@ (8011618 <VL53LX_WrWord+0x60>)
 80115d6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80115d8:	887b      	ldrh	r3, [r7, #2]
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011618 <VL53LX_WrWord+0x60>)
 80115de:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80115e0:	883b      	ldrh	r3, [r7, #0]
 80115e2:	0a1b      	lsrs	r3, r3, #8
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	b2da      	uxtb	r2, r3
 80115e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011618 <VL53LX_WrWord+0x60>)
 80115ea:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80115ec:	883b      	ldrh	r3, [r7, #0]
 80115ee:	b2da      	uxtb	r2, r3
 80115f0:	4b09      	ldr	r3, [pc, #36]	@ (8011618 <VL53LX_WrWord+0x60>)
 80115f2:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80115f4:	2204      	movs	r2, #4
 80115f6:	4908      	ldr	r1, [pc, #32]	@ (8011618 <VL53LX_WrWord+0x60>)
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff ff20 	bl	801143e <_I2CWrite>
 80115fe:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011606:	23f3      	movs	r3, #243	@ 0xf3
 8011608:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	20007328 	.word	0x20007328

0801161c <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	460b      	mov	r3, r1
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801162a:	2300      	movs	r3, #0
 801162c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 801162e:	897b      	ldrh	r3, [r7, #10]
 8011630:	0a1b      	lsrs	r3, r3, #8
 8011632:	b29b      	uxth	r3, r3
 8011634:	b2da      	uxtb	r2, r3
 8011636:	4b12      	ldr	r3, [pc, #72]	@ (8011680 <VL53LX_RdByte+0x64>)
 8011638:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801163a:	897b      	ldrh	r3, [r7, #10]
 801163c:	b2da      	uxtb	r2, r3
 801163e:	4b10      	ldr	r3, [pc, #64]	@ (8011680 <VL53LX_RdByte+0x64>)
 8011640:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011642:	2202      	movs	r2, #2
 8011644:	490e      	ldr	r1, [pc, #56]	@ (8011680 <VL53LX_RdByte+0x64>)
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7ff fef9 	bl	801143e <_I2CWrite>
 801164c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d002      	beq.n	801165a <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011654:	23f3      	movs	r3, #243	@ 0xf3
 8011656:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011658:	e00c      	b.n	8011674 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801165a:	2201      	movs	r2, #1
 801165c:	6879      	ldr	r1, [r7, #4]
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f7ff ff00 	bl	8011464 <_I2CRead>
 8011664:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801166c:	23f3      	movs	r3, #243	@ 0xf3
 801166e:	75fb      	strb	r3, [r7, #23]
 8011670:	e000      	b.n	8011674 <VL53LX_RdByte+0x58>
    }
done:
 8011672:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011674:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3718      	adds	r7, #24
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	20007328 	.word	0x20007328

08011684 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	460b      	mov	r3, r1
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011692:	2300      	movs	r3, #0
 8011694:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011696:	897b      	ldrh	r3, [r7, #10]
 8011698:	0a1b      	lsrs	r3, r3, #8
 801169a:	b29b      	uxth	r3, r3
 801169c:	b2da      	uxtb	r2, r3
 801169e:	4b17      	ldr	r3, [pc, #92]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116a0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80116a2:	897b      	ldrh	r3, [r7, #10]
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	4b15      	ldr	r3, [pc, #84]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116a8:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80116aa:	2202      	movs	r2, #2
 80116ac:	4913      	ldr	r1, [pc, #76]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f7ff fec5 	bl	801143e <_I2CWrite>
 80116b4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d002      	beq.n	80116c2 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116bc:	23f3      	movs	r3, #243	@ 0xf3
 80116be:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116c0:	e015      	b.n	80116ee <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80116c2:	2202      	movs	r2, #2
 80116c4:	490d      	ldr	r1, [pc, #52]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f7ff fecc 	bl	8011464 <_I2CRead>
 80116cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116d4:	23f3      	movs	r3, #243	@ 0xf3
 80116d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116d8:	e009      	b.n	80116ee <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80116da:	4b08      	ldr	r3, [pc, #32]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	021b      	lsls	r3, r3, #8
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	4a06      	ldr	r2, [pc, #24]	@ (80116fc <VL53LX_RdWord+0x78>)
 80116e4:	7852      	ldrb	r2, [r2, #1]
 80116e6:	4413      	add	r3, r2
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80116ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3718      	adds	r7, #24
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	20007328 	.word	0x20007328

08011700 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 801170a:	2300      	movs	r3, #0
 801170c:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	695b      	ldr	r3, [r3, #20]
 8011712:	4798      	blx	r3
 8011714:	4603      	mov	r3, r0
 8011716:	461a      	mov	r2, r3
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 801171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	4619      	mov	r1, r3
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 f8d2 	bl	80118e0 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
	...

08011748 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	4a07      	ldr	r2, [pc, #28]	@ (8011774 <VL53LX_WaitUs+0x2c>)
 8011756:	fb82 1203 	smull	r1, r2, r2, r3
 801175a:	1192      	asrs	r2, r2, #6
 801175c:	17db      	asrs	r3, r3, #31
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	4619      	mov	r1, r3
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f000 f8bc 	bl	80118e0 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	10624dd3 	.word	0x10624dd3

08011778 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 801177e:	af00      	add	r7, sp, #0
 8011780:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8011784:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8011788:	6020      	str	r0, [r4, #0]
 801178a:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 801178e:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8011792:	6001      	str	r1, [r0, #0]
 8011794:	4619      	mov	r1, r3
 8011796:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801179a:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801179e:	801a      	strh	r2, [r3, #0]
 80117a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117a4:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 80117a8:	460a      	mov	r2, r1
 80117aa:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80117ac:	2300      	movs	r3, #0
 80117ae:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 80117b8:	2300      	movs	r3, #0
 80117ba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 80117c4:	2300      	movs	r3, #0
 80117c6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80117d0:	f107 0310 	add.w	r3, r7, #16
 80117d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80117d8:	4940      	ldr	r1, [pc, #256]	@ (80118dc <VL53LX_WaitValueMaskEx+0x164>)
 80117da:	4618      	mov	r0, r3
 80117dc:	f005 fa58 	bl	8016c90 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80117e0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80117e4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117e8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80117ec:	4611      	mov	r1, r2
 80117ee:	6818      	ldr	r0, [r3, #0]
 80117f0:	f7ff ff86 	bl	8011700 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 80117f4:	e04e      	b.n	8011894 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 80117f6:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d110      	bne.n	8011820 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 80117fe:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8011802:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011806:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801180a:	8819      	ldrh	r1, [r3, #0]
 801180c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011810:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011814:	6818      	ldr	r0, [r3, #0]
 8011816:	f7ff ff01 	bl	801161c <VL53LX_RdByte>
 801181a:	4603      	mov	r3, r0
 801181c:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011820:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8011824:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8011828:	4013      	ands	r3, r2
 801182a:	b2db      	uxtb	r3, r3
 801182c:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8011830:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8011834:	7812      	ldrb	r2, [r2, #0]
 8011836:	429a      	cmp	r2, r3
 8011838:	d102      	bne.n	8011840 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 801183a:	2301      	movs	r3, #1
 801183c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011840:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011844:	2b00      	cmp	r3, #0
 8011846:	d114      	bne.n	8011872 <VL53LX_WaitValueMaskEx+0xfa>
 8011848:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801184c:	2b00      	cmp	r3, #0
 801184e:	d110      	bne.n	8011872 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8011850:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00c      	beq.n	8011872 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011858:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801185c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011860:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011864:	4611      	mov	r1, r2
 8011866:	6818      	ldr	r0, [r3, #0]
 8011868:	f7ff ff5e 	bl	8011728 <VL53LX_WaitMs>
 801186c:	4603      	mov	r3, r0
 801186e:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011872:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8011876:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801187a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801187e:	4611      	mov	r1, r2
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	f7ff ff3d 	bl	8011700 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011886:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801188a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8011894:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10c      	bne.n	80118b6 <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 801189c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80118a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80118a4:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d203      	bcs.n	80118b6 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 80118ae:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d09f      	beq.n	80117f6 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80118b6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d106      	bne.n	80118cc <VL53LX_WaitValueMaskEx+0x154>
 80118be:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d102      	bne.n	80118cc <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80118c6:	23f9      	movs	r3, #249	@ 0xf9
 80118c8:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 80118cc:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd90      	pop	{r4, r7, pc}
 80118da:	bf00      	nop
 80118dc:	08017854 	.word	0x08017854

080118e0 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	4798      	blx	r3
 80118f0:	4603      	mov	r3, r0
 80118f2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80118f4:	bf00      	nop
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	4798      	blx	r3
 80118fc:	4603      	mov	r3, r0
 80118fe:	461a      	mov	r2, r3
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	683a      	ldr	r2, [r7, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d8f5      	bhi.n	80118f6 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b08c      	sub	sp, #48	@ 0x30
 8011918:	af06      	add	r7, sp, #24
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011922:	2300      	movs	r3, #0
 8011924:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011928:	9304      	str	r3, [sp, #16]
 801192a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801192c:	9303      	str	r3, [sp, #12]
 801192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011930:	9302      	str	r3, [sp, #8]
 8011932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	683a      	ldr	r2, [r7, #0]
 801193e:	6879      	ldr	r1, [r7, #4]
 8011940:	68b8      	ldr	r0, [r7, #8]
 8011942:	f7fc ffad 	bl	800e8a0 <VL53LX_hist_process_data>
 8011946:	4603      	mov	r3, r0
 8011948:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801194a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b084      	sub	sp, #16
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
 801195e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d103      	bne.n	801196e <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011966:	f06f 0301 	mvn.w	r3, #1
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	e023      	b.n	80119b6 <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	685a      	ldr	r2, [r3, #4]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	891a      	ldrh	r2, [r3, #8]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	68da      	ldr	r2, [r3, #12]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	691a      	ldr	r2, [r3, #16]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	695a      	ldr	r2, [r3, #20]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4798      	blx	r3
 80119ac:	60f8      	str	r0, [r7, #12]
 80119ae:	e002      	b.n	80119b6 <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 80119b0:	f04f 33ff 	mov.w	r3, #4294967295
 80119b4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80119b6:	68fb      	ldr	r3, [r7, #12]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80119ce:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d003      	beq.n	80119de <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 80119d6:	f04f 33ff 	mov.w	r3, #4294967295
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e043      	b.n	8011a66 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7ef fd44 	bl	800146c <VL53LX_WaitDeviceBooted>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d003      	beq.n	80119f2 <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 80119ea:	f04f 33ff 	mov.w	r3, #4294967295
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	e039      	b.n	8011a66 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7ef fcdf 	bl	80013b6 <VL53LX_DataInit>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d003      	beq.n	8011a06 <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 80119fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e02f      	b.n	8011a66 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7f0 fbf0 	bl	80021ec <VL53LX_PerformRefSpadManagement>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d003      	beq.n	8011a1a <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 8011a12:	f04f 33ff 	mov.w	r3, #4294967295
 8011a16:	60fb      	str	r3, [r7, #12]
 8011a18:	e025      	b.n	8011a66 <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a20:	2200      	movs	r2, #0
 8011a22:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a66:	68fb      	ldr	r3, [r7, #12]
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 8011a78:	f04f 33ff 	mov.w	r3, #4294967295
 8011a7c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a84:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d111      	bne.n	8011ab0 <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	4798      	blx	r3
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d003      	beq.n	8011aa0 <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 8011a98:	f04f 33ff 	mov.w	r3, #4294967295
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	e007      	b.n	8011ab0 <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 8011aba:	b580      	push	{r7, lr}
 8011abc:	b084      	sub	sp, #16
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
 8011ac2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d002      	beq.n	8011ad0 <VL53L4CX_ReadID+0x16>
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d103      	bne.n	8011ad8 <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011ad0:	f06f 0301 	mvn.w	r3, #1
 8011ad4:	60fb      	str	r3, [r7, #12]
 8011ad6:	e00a      	b.n	8011aee <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2200      	movs	r2, #0
 8011adc:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	f240 110f 	movw	r1, #271	@ 0x10f
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7ff fdcd 	bl	8011684 <VL53LX_RdWord>
 8011aea:	4603      	mov	r3, r0
 8011aec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011aee:	68fb      	ldr	r3, [r7, #12]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <VL53L4CX_GetCapabilities+0x16>
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d103      	bne.n	8011b16 <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b0e:	f06f 0301 	mvn.w	r3, #1
 8011b12:	60fb      	str	r3, [r7, #12]
 8011b14:	e00d      	b.n	8011b32 <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	2204      	movs	r2, #4
 8011b20:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2201      	movs	r2, #1
 8011b26:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b32:	68fb      	ldr	r3, [r7, #12]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3714      	adds	r7, #20
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3e:	4770      	bx	lr

08011b40 <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d009      	beq.n	8011b64 <VL53L4CX_ConfigProfile+0x24>
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d006      	beq.n	8011b64 <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011b5c:	7afb      	ldrb	r3, [r7, #11]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d103      	bne.n	8011b6a <VL53L4CX_ConfigProfile+0x2a>
 8011b62:	e00c      	b.n	8011b7e <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 8011b64:	f06f 0301 	mvn.w	r3, #1
 8011b68:	e043      	b.n	8011bf2 <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011b6a:	7afb      	ldrb	r3, [r7, #11]
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d006      	beq.n	8011b7e <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8011b70:	7afb      	ldrb	r3, [r7, #11]
 8011b72:	2b03      	cmp	r3, #3
 8011b74:	d003      	beq.n	8011b7e <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b76:	f06f 0301 	mvn.w	r3, #1
 8011b7a:	60fb      	str	r3, [r7, #12]
 8011b7c:	e038      	b.n	8011bf0 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011b7e:	7afb      	ldrb	r3, [r7, #11]
 8011b80:	4619      	mov	r1, r3
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ef fd53 	bl	800162e <VL53LX_SetDistanceMode>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d003      	beq.n	8011b96 <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8011b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b92:	60fb      	str	r3, [r7, #12]
 8011b94:	e02c      	b.n	8011bf0 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011b9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011b9e:	fb02 f303 	mul.w	r3, r2, r3
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f7ef fdab 	bl	8001700 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d003      	beq.n	8011bb8 <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8011bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb4:	60fb      	str	r3, [r7, #12]
 8011bb6:	e01b      	b.n	8011bf0 <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	bf14      	ite	ne
 8011bc0:	2301      	movne	r3, #1
 8011bc2:	2300      	moveq	r3, #0
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bce:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	bf14      	ite	ne
 8011bda:	2301      	movne	r3, #1
 8011bdc:	2300      	moveq	r3, #0
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	461a      	mov	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011be8:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8011bec:	2300      	movs	r3, #0
 8011bee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3710      	adds	r7, #16
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b084      	sub	sp, #16
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d002      	beq.n	8011c10 <VL53L4CX_ConfigROI+0x16>
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c10:	f06f 0301 	mvn.w	r3, #1
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	e01a      	b.n	8011c4e <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	789b      	ldrb	r3, [r3, #2]
 8011c1c:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	78db      	ldrb	r3, [r3, #3]
 8011c22:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	785b      	ldrb	r3, [r3, #1]
 8011c2e:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011c30:	f107 0308 	add.w	r3, r7, #8
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ef fdda 	bl	80017f0 <VL53LX_SetUserROI>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d003      	beq.n	8011c4a <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 8011c42:	f04f 33ff 	mov.w	r3, #4294967295
 8011c46:	60fb      	str	r3, [r7, #12]
 8011c48:	e001      	b.n	8011c4e <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3710      	adds	r7, #16
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011c62:	f06f 0303 	mvn.w	r3, #3
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	370c      	adds	r7, #12
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr

08011c72 <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b084      	sub	sp, #16
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d002      	beq.n	8011c8c <VL53L4CX_GetDistance+0x1a>
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d103      	bne.n	8011c94 <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c8c:	f06f 0301 	mvn.w	r3, #1
 8011c90:	60fb      	str	r3, [r7, #12]
 8011c92:	e009      	b.n	8011ca8 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c9a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 8011ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca6:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d112      	bne.n	8011cd4 <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cb4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d106      	bne.n	8011cca <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011cbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f957 	bl	8011f74 <vl53l4cx_poll_for_measurement>
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	e004      	b.n	8011cd4 <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 8011cca:	2100      	movs	r1, #0
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f000 f951 	bl	8011f74 <vl53l4cx_poll_for_measurement>
 8011cd2:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d119      	bne.n	8011d0e <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 8011cda:	6839      	ldr	r1, [r7, #0]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 f977 	bl	8011fd0 <vl53l4cx_get_result>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d003      	beq.n	8011cf0 <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 8011ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cec:	60fb      	str	r3, [r7, #12]
 8011cee:	e00e      	b.n	8011d0e <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cf6:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d105      	bne.n	8011d0a <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ef fe45 	bl	800198e <VL53LX_ClearInterruptAndStartMeasurement>
 8011d04:	4603      	mov	r3, r0
 8011d06:	60fb      	str	r3, [r7, #12]
 8011d08:	e001      	b.n	8011d0e <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d103      	bne.n	8011d30 <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011d28:	f06f 0301 	mvn.w	r3, #1
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	e06e      	b.n	8011e0e <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d36:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d103      	bne.n	8011d46 <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 8011d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d42:	60fb      	str	r3, [r7, #12]
 8011d44:	e063      	b.n	8011e0e <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f7ef fdbf 	bl	80018ca <VL53LX_StartMeasurement>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d15a      	bne.n	8011e08 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d58:	2201      	movs	r2, #1
 8011d5a:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7ef fe13 	bl	800198e <VL53LX_ClearInterruptAndStartMeasurement>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	d83f      	bhi.n	8011df4 <VL53L4CX_Start+0xdc>
 8011d74:	a201      	add	r2, pc, #4	@ (adr r2, 8011d7c <VL53L4CX_Start+0x64>)
 8011d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d7a:	bf00      	nop
 8011d7c:	08011d8d 	.word	0x08011d8d
 8011d80:	08011da7 	.word	0x08011da7
 8011d84:	08011dc1 	.word	0x08011dc1
 8011d88:	08011ddb 	.word	0x08011ddb
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d9e:	2201      	movs	r2, #1
 8011da0:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011da4:	e033      	b.n	8011e0e <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011dbe:	e026      	b.n	8011e0e <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011dd8:	e019      	b.n	8011e0e <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011de0:	2200      	movs	r2, #0
 8011de2:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dec:	2200      	movs	r2, #0
 8011dee:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011df2:	e00c      	b.n	8011e0e <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 8011e00:	f06f 0301 	mvn.w	r3, #1
 8011e04:	60fb      	str	r3, [r7, #12]
      break;
 8011e06:	e002      	b.n	8011e0e <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011e08:	f04f 33ff 	mov.w	r3, #4294967295
 8011e0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d103      	bne.n	8011e2e <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011e26:	f06f 0301 	mvn.w	r3, #1
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	e01c      	b.n	8011e68 <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e34:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d103      	bne.n	8011e44 <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	e011      	b.n	8011e68 <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ef fd8e 	bl	8001966 <VL53LX_StopMeasurement>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d108      	bne.n	8011e62 <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e56:	2200      	movs	r2, #0
 8011e58:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	60fb      	str	r3, [r7, #12]
 8011e60:	e002      	b.n	8011e68 <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011e62:	f04f 33ff 	mov.w	r3, #4294967295
 8011e66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e68:	68fb      	ldr	r3, [r7, #12]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b084      	sub	sp, #16
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d103      	bne.n	8011e8a <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011e82:	f06f 0301 	mvn.w	r3, #1
 8011e86:	60fb      	str	r3, [r7, #12]
 8011e88:	e012      	b.n	8011eb0 <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	4619      	mov	r1, r3
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7ef fa69 	bl	8001368 <VL53LX_SetDeviceAddress>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d003      	beq.n	8011ea4 <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 8011e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea0:	60fb      	str	r3, [r7, #12]
 8011ea2:	e005      	b.n	8011eb0 <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b085      	sub	sp, #20
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d002      	beq.n	8011ed0 <VL53L4CX_GetAddress+0x16>
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d103      	bne.n	8011ed8 <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011ed0:	f06f 0301 	mvn.w	r3, #1
 8011ed4:	60fb      	str	r3, [r7, #12]
 8011ed6:	e006      	b.n	8011ee6 <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	891b      	ldrh	r3, [r3, #8]
 8011edc:	461a      	mov	r2, r3
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3714      	adds	r7, #20
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011efe:	f06f 0303 	mvn.w	r3, #3
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr

08011f0e <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
 8011f16:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011f18:	f06f 0303 	mvn.w	r3, #3
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <VL53L4CX_OffsetCalibration>:
  * @param pObj    vl53l4cx context object.
  * @param CalDistance    Calibration distance in mm.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_OffsetCalibration(VL53L4CX_Object_t *pObj, uint32_t CalDistance)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  VL53LX_OffsetCorrectionModes Mode = VL53LX_OFFSETCORRECTIONMODE_STANDARD;
 8011f32:	2301      	movs	r3, #1
 8011f34:	72fb      	strb	r3, [r7, #11]

  if (VL53LX_SetOffsetCorrectionMode(pObj, Mode) != VL53LX_ERROR_NONE)
 8011f36:	7afb      	ldrb	r3, [r7, #11]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7f0 fa52 	bl	80023e4 <VL53LX_SetOffsetCorrectionMode>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d003      	beq.n	8011f4e <VL53L4CX_OffsetCalibration+0x26>
  {
    ret = VL53L4CX_ERROR;
 8011f46:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4a:	60fb      	str	r3, [r7, #12]
 8011f4c:	e00d      	b.n	8011f6a <VL53L4CX_OffsetCalibration+0x42>
  }
  else if (VL53LX_PerformOffsetSimpleCalibration(pObj, (int32_t)CalDistance) != VL53LX_ERROR_NONE)
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	4619      	mov	r1, r3
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7f0 fa6c 	bl	8002430 <VL53LX_PerformOffsetSimpleCalibration>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d003      	beq.n	8011f66 <VL53L4CX_OffsetCalibration+0x3e>
  {
    ret = VL53L4CX_ERROR;
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	e001      	b.n	8011f6a <VL53L4CX_OffsetCalibration+0x42>
  }
  else
  {
    ret = VL53L4CX_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d102      	bne.n	8011f8e <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8011f88:	f06f 0301 	mvn.w	r3, #1
 8011f8c:	e01b      	b.n	8011fc6 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	695b      	ldr	r3, [r3, #20]
 8011f92:	4798      	blx	r3
 8011f94:	4603      	mov	r3, r0
 8011f96:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011f98:	f107 030b 	add.w	r3, r7, #11
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ef fd0b 	bl	80019ba <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011fa4:	7afb      	ldrb	r3, [r7, #11]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d101      	bne.n	8011fae <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 8011faa:	2300      	movs	r3, #0
 8011fac:	e00b      	b.n	8011fc6 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	695b      	ldr	r3, [r3, #20]
 8011fb2:	4798      	blx	r3
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	683a      	ldr	r2, [r7, #0]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d8ea      	bhi.n	8011f98 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 8011fc2:	f06f 0302 	mvn.w	r3, #2
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3710      	adds	r7, #16
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
	...

08011fd0 <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011fd0:	b590      	push	{r4, r7, lr}
 8011fd2:	b089      	sub	sp, #36	@ 0x24
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d002      	beq.n	8011fe6 <vl53l4cx_get_result+0x16>
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d103      	bne.n	8011fee <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011fe6:	f06f 0301 	mvn.w	r3, #1
 8011fea:	61fb      	str	r3, [r7, #28]
 8011fec:	e103      	b.n	80121f6 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011fee:	4984      	ldr	r1, [pc, #528]	@ (8012200 <vl53l4cx_get_result+0x230>)
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7f0 f8d4 	bl	800219e <VL53LX_GetMultiRangingData>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d003      	beq.n	8012004 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8011ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8012000:	61fb      	str	r3, [r7, #28]
 8012002:	e0f8      	b.n	80121f6 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8012004:	2300      	movs	r3, #0
 8012006:	76fb      	strb	r3, [r7, #27]
 8012008:	e0ec      	b.n	80121e4 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801200a:	4b7d      	ldr	r3, [pc, #500]	@ (8012200 <vl53l4cx_get_result+0x230>)
 801200c:	795b      	ldrb	r3, [r3, #5]
 801200e:	7efa      	ldrb	r2, [r7, #27]
 8012010:	4618      	mov	r0, r3
 8012012:	6839      	ldr	r1, [r7, #0]
 8012014:	4613      	mov	r3, r2
 8012016:	011b      	lsls	r3, r3, #4
 8012018:	4413      	add	r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	440b      	add	r3, r1
 801201e:	3304      	adds	r3, #4
 8012020:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012022:	2300      	movs	r3, #0
 8012024:	76bb      	strb	r3, [r7, #26]
 8012026:	e0d4      	b.n	80121d2 <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8012028:	7eba      	ldrb	r2, [r7, #26]
 801202a:	4975      	ldr	r1, [pc, #468]	@ (8012200 <vl53l4cx_get_result+0x230>)
 801202c:	4613      	mov	r3, r2
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	4413      	add	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	440b      	add	r3, r1
 8012036:	3318      	adds	r3, #24
 8012038:	f9b3 3000 	ldrsh.w	r3, [r3]
 801203c:	2b00      	cmp	r3, #0
 801203e:	da0b      	bge.n	8012058 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8012040:	7efa      	ldrb	r2, [r7, #27]
 8012042:	7eb8      	ldrb	r0, [r7, #26]
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	4613      	mov	r3, r2
 8012048:	011b      	lsls	r3, r3, #4
 801204a:	4413      	add	r3, r2
 801204c:	4403      	add	r3, r0
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	440b      	add	r3, r1
 8012052:	2200      	movs	r2, #0
 8012054:	609a      	str	r2, [r3, #8]
 8012056:	e014      	b.n	8012082 <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8012058:	7eba      	ldrb	r2, [r7, #26]
 801205a:	4969      	ldr	r1, [pc, #420]	@ (8012200 <vl53l4cx_get_result+0x230>)
 801205c:	4613      	mov	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	4413      	add	r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	440b      	add	r3, r1
 8012066:	3318      	adds	r3, #24
 8012068:	f9b3 3000 	ldrsh.w	r3, [r3]
 801206c:	7efa      	ldrb	r2, [r7, #27]
 801206e:	7eb8      	ldrb	r0, [r7, #26]
 8012070:	461c      	mov	r4, r3
 8012072:	6839      	ldr	r1, [r7, #0]
 8012074:	4613      	mov	r3, r2
 8012076:	011b      	lsls	r3, r3, #4
 8012078:	4413      	add	r3, r2
 801207a:	4403      	add	r3, r0
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	440b      	add	r3, r1
 8012080:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012088:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 801208c:	2b01      	cmp	r3, #1
 801208e:	d132      	bne.n	80120f6 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8012090:	7eba      	ldrb	r2, [r7, #26]
 8012092:	495b      	ldr	r1, [pc, #364]	@ (8012200 <vl53l4cx_get_result+0x230>)
 8012094:	4613      	mov	r3, r2
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	4413      	add	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	440b      	add	r3, r1
 801209e:	3310      	adds	r3, #16
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	ee07 3a90 	vmov	s15, r3
 80120a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80120aa:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8012204 <vl53l4cx_get_result+0x234>
 80120ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80120b2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012208 <vl53l4cx_get_result+0x238>
 80120b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120ba:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80120be:	4b50      	ldr	r3, [pc, #320]	@ (8012200 <vl53l4cx_get_result+0x230>)
 80120c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80120c4:	0a1b      	lsrs	r3, r3, #8
 80120c6:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80120c8:	8a7b      	ldrh	r3, [r7, #18]
 80120ca:	ee07 3a90 	vmov	s15, r3
 80120ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80120d2:	7efa      	ldrb	r2, [r7, #27]
 80120d4:	7eb8      	ldrb	r0, [r7, #26]
 80120d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80120da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	4613      	mov	r3, r2
 80120e2:	011b      	lsls	r3, r3, #4
 80120e4:	4413      	add	r3, r2
 80120e6:	4403      	add	r3, r0
 80120e8:	3308      	adds	r3, #8
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	440b      	add	r3, r1
 80120ee:	3308      	adds	r3, #8
 80120f0:	edc3 7a00 	vstr	s15, [r3]
 80120f4:	e00d      	b.n	8012112 <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80120f6:	7efa      	ldrb	r2, [r7, #27]
 80120f8:	7eb8      	ldrb	r0, [r7, #26]
 80120fa:	6839      	ldr	r1, [r7, #0]
 80120fc:	4613      	mov	r3, r2
 80120fe:	011b      	lsls	r3, r3, #4
 8012100:	4413      	add	r3, r2
 8012102:	4403      	add	r3, r0
 8012104:	3308      	adds	r3, #8
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	440b      	add	r3, r1
 801210a:	3308      	adds	r3, #8
 801210c:	f04f 0200 	mov.w	r2, #0
 8012110:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012118:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 801211c:	2b01      	cmp	r3, #1
 801211e:	d132      	bne.n	8012186 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8012120:	7eba      	ldrb	r2, [r7, #26]
 8012122:	4937      	ldr	r1, [pc, #220]	@ (8012200 <vl53l4cx_get_result+0x230>)
 8012124:	4613      	mov	r3, r2
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	440b      	add	r3, r1
 801212e:	330c      	adds	r3, #12
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	ee07 3a90 	vmov	s15, r3
 8012136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801213a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8012204 <vl53l4cx_get_result+0x234>
 801213e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012142:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012208 <vl53l4cx_get_result+0x238>
 8012146:	ee67 7a87 	vmul.f32	s15, s15, s14
 801214a:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801214e:	4b2c      	ldr	r3, [pc, #176]	@ (8012200 <vl53l4cx_get_result+0x230>)
 8012150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012154:	0a1b      	lsrs	r3, r3, #8
 8012156:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8012158:	8a7b      	ldrh	r3, [r7, #18]
 801215a:	ee07 3a90 	vmov	s15, r3
 801215e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012162:	7efa      	ldrb	r2, [r7, #27]
 8012164:	7eb8      	ldrb	r0, [r7, #26]
 8012166:	edd7 6a03 	vldr	s13, [r7, #12]
 801216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	4613      	mov	r3, r2
 8012172:	011b      	lsls	r3, r3, #4
 8012174:	4413      	add	r3, r2
 8012176:	4403      	add	r3, r0
 8012178:	330c      	adds	r3, #12
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	440b      	add	r3, r1
 801217e:	3308      	adds	r3, #8
 8012180:	edc3 7a00 	vstr	s15, [r3]
 8012184:	e00d      	b.n	80121a2 <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8012186:	7efa      	ldrb	r2, [r7, #27]
 8012188:	7eb8      	ldrb	r0, [r7, #26]
 801218a:	6839      	ldr	r1, [r7, #0]
 801218c:	4613      	mov	r3, r2
 801218e:	011b      	lsls	r3, r3, #4
 8012190:	4413      	add	r3, r2
 8012192:	4403      	add	r3, r0
 8012194:	330c      	adds	r3, #12
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	440b      	add	r3, r1
 801219a:	3308      	adds	r3, #8
 801219c:	f04f 0200 	mov.w	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80121a2:	7eba      	ldrb	r2, [r7, #26]
 80121a4:	4916      	ldr	r1, [pc, #88]	@ (8012200 <vl53l4cx_get_result+0x230>)
 80121a6:	4613      	mov	r3, r2
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	4413      	add	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	440b      	add	r3, r1
 80121b0:	331a      	adds	r3, #26
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	7efa      	ldrb	r2, [r7, #27]
 80121b6:	7eb8      	ldrb	r0, [r7, #26]
 80121b8:	461c      	mov	r4, r3
 80121ba:	6839      	ldr	r1, [r7, #0]
 80121bc:	4613      	mov	r3, r2
 80121be:	011b      	lsls	r3, r3, #4
 80121c0:	4413      	add	r3, r2
 80121c2:	4403      	add	r3, r0
 80121c4:	3304      	adds	r3, #4
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	440b      	add	r3, r1
 80121ca:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80121cc:	7ebb      	ldrb	r3, [r7, #26]
 80121ce:	3301      	adds	r3, #1
 80121d0:	76bb      	strb	r3, [r7, #26]
 80121d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012200 <vl53l4cx_get_result+0x230>)
 80121d4:	795b      	ldrb	r3, [r3, #5]
 80121d6:	7eba      	ldrb	r2, [r7, #26]
 80121d8:	429a      	cmp	r2, r3
 80121da:	f4ff af25 	bcc.w	8012028 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 80121de:	7efb      	ldrb	r3, [r7, #27]
 80121e0:	3301      	adds	r3, #1
 80121e2:	76fb      	strb	r3, [r7, #27]
 80121e4:	7efb      	ldrb	r3, [r7, #27]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f43f af0f 	beq.w	801200a <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	2201      	movs	r2, #1
 80121f0:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80121f6:	69fb      	ldr	r3, [r7, #28]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3724      	adds	r7, #36	@ 0x24
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd90      	pop	{r4, r7, pc}
 8012200:	20007428 	.word	0x20007428
 8012204:	47800000 	.word	0x47800000
 8012208:	447a0000 	.word	0x447a0000

0801220c <LL_AHB2_GRP1_EnableClock>:
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801221a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	4313      	orrs	r3, r2
 8012222:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012228:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	4013      	ands	r3, r2
 801222e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012230:	68fb      	ldr	r3, [r7, #12]
}
 8012232:	bf00      	nop
 8012234:	3714      	adds	r7, #20
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr

0801223e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 801223e:	b480      	push	{r7}
 8012240:	b085      	sub	sp, #20
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8012246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801224a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801224c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	4313      	orrs	r3, r2
 8012254:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8012256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801225a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4013      	ands	r3, r2
 8012260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012262:	68fb      	ldr	r3, [r7, #12]
}
 8012264:	bf00      	nop
 8012266:	3714      	adds	r7, #20
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr

08012270 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	460a      	mov	r2, r1
 801227a:	71fb      	strb	r3, [r7, #7]
 801227c:	4613      	mov	r3, r2
 801227e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8012280:	2300      	movs	r3, #0
 8012282:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	4a1f      	ldr	r2, [pc, #124]	@ (8012304 <BSP_PB_Init+0x94>)
 8012288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801228c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 801228e:	79bb      	ldrb	r3, [r7, #6]
 8012290:	2b01      	cmp	r3, #1
 8012292:	d132      	bne.n	80122fa <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8012294:	79fb      	ldrb	r3, [r7, #7]
 8012296:	00db      	lsls	r3, r3, #3
 8012298:	4a1b      	ldr	r2, [pc, #108]	@ (8012308 <BSP_PB_Init+0x98>)
 801229a:	441a      	add	r2, r3
 801229c:	79fb      	ldrb	r3, [r7, #7]
 801229e:	491b      	ldr	r1, [pc, #108]	@ (801230c <BSP_PB_Init+0x9c>)
 80122a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80122a4:	4619      	mov	r1, r3
 80122a6:	4610      	mov	r0, r2
 80122a8:	f000 fb11 	bl	80128ce <HAL_EXTI_GetHandle>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d003      	beq.n	80122ba <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80122b2:	f06f 0303 	mvn.w	r3, #3
 80122b6:	60fb      	str	r3, [r7, #12]
 80122b8:	e01f      	b.n	80122fa <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80122ba:	79fb      	ldrb	r3, [r7, #7]
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	4a12      	ldr	r2, [pc, #72]	@ (8012308 <BSP_PB_Init+0x98>)
 80122c0:	1898      	adds	r0, r3, r2
 80122c2:	79fb      	ldrb	r3, [r7, #7]
 80122c4:	4a12      	ldr	r2, [pc, #72]	@ (8012310 <BSP_PB_Init+0xa0>)
 80122c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ca:	461a      	mov	r2, r3
 80122cc:	2100      	movs	r1, #0
 80122ce:	f000 fae4 	bl	801289a <HAL_EXTI_RegisterCallback>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d003      	beq.n	80122e0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80122d8:	f06f 0303 	mvn.w	r3, #3
 80122dc:	60fb      	str	r3, [r7, #12]
 80122de:	e00c      	b.n	80122fa <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80122e0:	200a      	movs	r0, #10
 80122e2:	79fb      	ldrb	r3, [r7, #7]
 80122e4:	4a0b      	ldr	r2, [pc, #44]	@ (8012314 <BSP_PB_Init+0xa4>)
 80122e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ea:	2200      	movs	r2, #0
 80122ec:	4619      	mov	r1, r3
 80122ee:	f000 faa0 	bl	8012832 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80122f2:	230a      	movs	r3, #10
 80122f4:	4618      	mov	r0, r3
 80122f6:	f000 fab6 	bl	8012866 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80122fa:	68fb      	ldr	r3, [r7, #12]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	08017ac4 	.word	0x08017ac4
 8012308:	20000070 	.word	0x20000070
 801230c:	08017ac8 	.word	0x08017ac8
 8012310:	08017acc 	.word	0x08017acc
 8012314:	08017ad0 	.word	0x08017ad0

08012318 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 801231c:	2000      	movs	r0, #0
 801231e:	f004 fa79 	bl	8016814 <BSP_PB_Callback>
}
 8012322:	bf00      	nop
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8012328:	b580      	push	{r7, lr}
 801232a:	b086      	sub	sp, #24
 801232c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801232e:	2004      	movs	r0, #4
 8012330:	f7ff ff6c 	bl	801220c <LL_AHB2_GRP1_EnableClock>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8012334:	2200      	movs	r2, #0
 8012336:	2100      	movs	r1, #0
 8012338:	200a      	movs	r0, #10
 801233a:	f000 fa7a 	bl	8012832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801233e:	200a      	movs	r0, #10
 8012340:	f000 fa91 	bl	8012866 <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012344:	1d3b      	adds	r3, r7, #4
 8012346:	2200      	movs	r2, #0
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	605a      	str	r2, [r3, #4]
 801234c:	609a      	str	r2, [r3, #8]
 801234e:	60da      	str	r2, [r3, #12]
 8012350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012352:	2004      	movs	r0, #4
 8012354:	f7ff ff5a 	bl	801220c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8012358:	2310      	movs	r3, #16
 801235a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801235c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8012360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012362:	2301      	movs	r3, #1
 8012364:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8012366:	1d3b      	adds	r3, r7, #4
 8012368:	4619      	mov	r1, r3
 801236a:	4807      	ldr	r0, [pc, #28]	@ (8012388 <BUTTON_USER_GPIO_Init+0x60>)
 801236c:	f000 faf2 	bl	8012954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8012370:	2200      	movs	r2, #0
 8012372:	2100      	movs	r1, #0
 8012374:	200a      	movs	r0, #10
 8012376:	f000 fa5c 	bl	8012832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801237a:	200a      	movs	r0, #10
 801237c:	f000 fa73 	bl	8012866 <HAL_NVIC_EnableIRQ>

}
 8012380:	bf00      	nop
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	48000800 	.word	0x48000800

0801238c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	4603      	mov	r3, r0
 8012394:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8012396:	2300      	movs	r3, #0
 8012398:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	2b01      	cmp	r3, #1
 801239e:	d903      	bls.n	80123a8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80123a0:	f06f 0301 	mvn.w	r3, #1
 80123a4:	60fb      	str	r3, [r7, #12]
 80123a6:	e022      	b.n	80123ee <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80123a8:	79fa      	ldrb	r2, [r7, #7]
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	4912      	ldr	r1, [pc, #72]	@ (80123f8 <BSP_COM_Init+0x6c>)
 80123ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80123b2:	4912      	ldr	r1, [pc, #72]	@ (80123fc <BSP_COM_Init+0x70>)
 80123b4:	2094      	movs	r0, #148	@ 0x94
 80123b6:	fb00 f303 	mul.w	r3, r0, r3
 80123ba:	440b      	add	r3, r1
 80123bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80123be:	79fb      	ldrb	r3, [r7, #7]
 80123c0:	2294      	movs	r2, #148	@ 0x94
 80123c2:	fb02 f303 	mul.w	r3, r2, r3
 80123c6:	4a0d      	ldr	r2, [pc, #52]	@ (80123fc <BSP_COM_Init+0x70>)
 80123c8:	4413      	add	r3, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 f86a 	bl	80124a4 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80123d0:	79fb      	ldrb	r3, [r7, #7]
 80123d2:	2294      	movs	r2, #148	@ 0x94
 80123d4:	fb02 f303 	mul.w	r3, r2, r3
 80123d8:	4a08      	ldr	r2, [pc, #32]	@ (80123fc <BSP_COM_Init+0x70>)
 80123da:	4413      	add	r3, r2
 80123dc:	4618      	mov	r0, r3
 80123de:	f000 f80f 	bl	8012400 <MX_USART1_UART_Init>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d002      	beq.n	80123ee <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80123e8:	f06f 0303 	mvn.w	r3, #3
 80123ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80123ee:	68fb      	ldr	r3, [r7, #12]
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	20000078 	.word	0x20000078
 80123fc:	20007484 	.word	0x20007484

08012400 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012408:	2300      	movs	r3, #0
 801240a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4a24      	ldr	r2, [pc, #144]	@ (80124a0 <MX_USART1_UART_Init+0xa0>)
 8012410:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012418:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012420:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	220c      	movs	r2, #12
 8012432:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2200      	movs	r2, #0
 8012438:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2200      	movs	r2, #0
 801243e:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f003 fa39 	bl	80158ca <HAL_UART_Init>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 801245e:	2301      	movs	r3, #1
 8012460:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012462:	2100      	movs	r1, #0
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f003 ff0b 	bl	8016280 <HAL_UARTEx_SetTxFifoThreshold>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d001      	beq.n	8012474 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8012470:	2301      	movs	r3, #1
 8012472:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012474:	2100      	movs	r1, #0
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f003 ff40 	bl	80162fc <HAL_UARTEx_SetRxFifoThreshold>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d001      	beq.n	8012486 <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8012482:	2301      	movs	r3, #1
 8012484:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f003 fec1 	bl	801620e <HAL_UARTEx_DisableFifoMode>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d001      	beq.n	8012496 <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8012492:	2301      	movs	r3, #1
 8012494:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012496:	7bfb      	ldrb	r3, [r7, #15]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	40013800 	.word	0x40013800

080124a4 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b09c      	sub	sp, #112	@ 0x70
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80124ac:	f107 030c 	add.w	r3, r7, #12
 80124b0:	2250      	movs	r2, #80	@ 0x50
 80124b2:	2100      	movs	r1, #0
 80124b4:	4618      	mov	r0, r3
 80124b6:	f004 fbe3 	bl	8016c80 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80124ba:	2301      	movs	r3, #1
 80124bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80124be:	2300      	movs	r3, #0
 80124c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80124c2:	f107 030c 	add.w	r3, r7, #12
 80124c6:	4618      	mov	r0, r3
 80124c8:	f002 ff52 	bl	8015370 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80124cc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80124d0:	f7ff feb5 	bl	801223e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80124d4:	2002      	movs	r0, #2
 80124d6:	f7ff fe99 	bl	801220c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80124da:	2340      	movs	r3, #64	@ 0x40
 80124dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124de:	2302      	movs	r3, #2
 80124e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80124e2:	2301      	movs	r3, #1
 80124e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124e6:	2300      	movs	r3, #0
 80124e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80124ea:	2307      	movs	r3, #7
 80124ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80124ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80124f2:	4619      	mov	r1, r3
 80124f4:	480b      	ldr	r0, [pc, #44]	@ (8012524 <USART1_MspInit+0x80>)
 80124f6:	f000 fa2d 	bl	8012954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80124fa:	2380      	movs	r3, #128	@ 0x80
 80124fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124fe:	2302      	movs	r3, #2
 8012500:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012502:	2301      	movs	r3, #1
 8012504:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012506:	2300      	movs	r3, #0
 8012508:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 801250a:	2307      	movs	r3, #7
 801250c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 801250e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012512:	4619      	mov	r1, r3
 8012514:	4803      	ldr	r0, [pc, #12]	@ (8012524 <USART1_MspInit+0x80>)
 8012516:	f000 fa1d 	bl	8012954 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 801251a:	bf00      	nop
 801251c:	3770      	adds	r7, #112	@ 0x70
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
 8012522:	bf00      	nop
 8012524:	48000400 	.word	0x48000400

08012528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801252e:	2300      	movs	r3, #0
 8012530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012532:	4b0c      	ldr	r3, [pc, #48]	@ (8012564 <HAL_Init+0x3c>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	4a0b      	ldr	r2, [pc, #44]	@ (8012564 <HAL_Init+0x3c>)
 8012538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801253c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801253e:	2003      	movs	r0, #3
 8012540:	f000 f96c 	bl	801281c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012544:	2000      	movs	r0, #0
 8012546:	f000 f80f 	bl	8012568 <HAL_InitTick>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d002      	beq.n	8012556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8012550:	2301      	movs	r3, #1
 8012552:	71fb      	strb	r3, [r7, #7]
 8012554:	e001      	b.n	801255a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012556:	f7ee f9fb 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801255a:	79fb      	ldrb	r3, [r7, #7]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	58004000 	.word	0x58004000

08012568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8012570:	2300      	movs	r3, #0
 8012572:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8012574:	4b17      	ldr	r3, [pc, #92]	@ (80125d4 <HAL_InitTick+0x6c>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d024      	beq.n	80125c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801257c:	f002 fc58 	bl	8014e30 <HAL_RCC_GetHCLKFreq>
 8012580:	4602      	mov	r2, r0
 8012582:	4b14      	ldr	r3, [pc, #80]	@ (80125d4 <HAL_InitTick+0x6c>)
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	4619      	mov	r1, r3
 8012588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801258c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012590:	fbb2 f3f3 	udiv	r3, r2, r3
 8012594:	4618      	mov	r0, r3
 8012596:	f000 f974 	bl	8012882 <HAL_SYSTICK_Config>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10f      	bne.n	80125c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b0f      	cmp	r3, #15
 80125a4:	d809      	bhi.n	80125ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80125a6:	2200      	movs	r2, #0
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	f04f 30ff 	mov.w	r0, #4294967295
 80125ae:	f000 f940 	bl	8012832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80125b2:	4a09      	ldr	r2, [pc, #36]	@ (80125d8 <HAL_InitTick+0x70>)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6013      	str	r3, [r2, #0]
 80125b8:	e007      	b.n	80125ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80125ba:	2301      	movs	r3, #1
 80125bc:	73fb      	strb	r3, [r7, #15]
 80125be:	e004      	b.n	80125ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80125c0:	2301      	movs	r3, #1
 80125c2:	73fb      	strb	r3, [r7, #15]
 80125c4:	e001      	b.n	80125ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80125c6:	2301      	movs	r3, #1
 80125c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80125ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3710      	adds	r7, #16
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	20000080 	.word	0x20000080
 80125d8:	2000007c 	.word	0x2000007c

080125dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80125dc:	b480      	push	{r7}
 80125de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80125e0:	4b06      	ldr	r3, [pc, #24]	@ (80125fc <HAL_IncTick+0x20>)
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	461a      	mov	r2, r3
 80125e6:	4b06      	ldr	r3, [pc, #24]	@ (8012600 <HAL_IncTick+0x24>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4413      	add	r3, r2
 80125ec:	4a04      	ldr	r2, [pc, #16]	@ (8012600 <HAL_IncTick+0x24>)
 80125ee:	6013      	str	r3, [r2, #0]
}
 80125f0:	bf00      	nop
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop
 80125fc:	20000080 	.word	0x20000080
 8012600:	20007518 	.word	0x20007518

08012604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
  return uwTick;
 8012608:	4b03      	ldr	r3, [pc, #12]	@ (8012618 <HAL_GetTick+0x14>)
 801260a:	681b      	ldr	r3, [r3, #0]
}
 801260c:	4618      	mov	r0, r3
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	20007518 	.word	0x20007518

0801261c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8012620:	4b03      	ldr	r3, [pc, #12]	@ (8012630 <HAL_GetTickPrio+0x14>)
 8012622:	681b      	ldr	r3, [r3, #0]
}
 8012624:	4618      	mov	r0, r3
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	2000007c 	.word	0x2000007c

08012634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801263c:	f7ff ffe2 	bl	8012604 <HAL_GetTick>
 8012640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264c:	d005      	beq.n	801265a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801264e:	4b0a      	ldr	r3, [pc, #40]	@ (8012678 <HAL_Delay+0x44>)
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	461a      	mov	r2, r3
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	4413      	add	r3, r2
 8012658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801265a:	bf00      	nop
 801265c:	f7ff ffd2 	bl	8012604 <HAL_GetTick>
 8012660:	4602      	mov	r2, r0
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	429a      	cmp	r2, r3
 801266a:	d8f7      	bhi.n	801265c <HAL_Delay+0x28>
  {
  }
}
 801266c:	bf00      	nop
 801266e:	bf00      	nop
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	20000080 	.word	0x20000080

0801267c <__NVIC_SetPriorityGrouping>:
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f003 0307 	and.w	r3, r3, #7
 801268a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801268c:	4b0c      	ldr	r3, [pc, #48]	@ (80126c0 <__NVIC_SetPriorityGrouping+0x44>)
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8012698:	4013      	ands	r3, r2
 801269a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80126a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80126a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80126ae:	4a04      	ldr	r2, [pc, #16]	@ (80126c0 <__NVIC_SetPriorityGrouping+0x44>)
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	60d3      	str	r3, [r2, #12]
}
 80126b4:	bf00      	nop
 80126b6:	3714      	adds	r7, #20
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr
 80126c0:	e000ed00 	.word	0xe000ed00

080126c4 <__NVIC_GetPriorityGrouping>:
{
 80126c4:	b480      	push	{r7}
 80126c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80126c8:	4b04      	ldr	r3, [pc, #16]	@ (80126dc <__NVIC_GetPriorityGrouping+0x18>)
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	0a1b      	lsrs	r3, r3, #8
 80126ce:	f003 0307 	and.w	r3, r3, #7
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr
 80126dc:	e000ed00 	.word	0xe000ed00

080126e0 <__NVIC_EnableIRQ>:
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	4603      	mov	r3, r0
 80126e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	db0b      	blt.n	801270a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	f003 021f 	and.w	r2, r3, #31
 80126f8:	4907      	ldr	r1, [pc, #28]	@ (8012718 <__NVIC_EnableIRQ+0x38>)
 80126fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126fe:	095b      	lsrs	r3, r3, #5
 8012700:	2001      	movs	r0, #1
 8012702:	fa00 f202 	lsl.w	r2, r0, r2
 8012706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801270a:	bf00      	nop
 801270c:	370c      	adds	r7, #12
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	e000e100 	.word	0xe000e100

0801271c <__NVIC_SetPriority>:
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	4603      	mov	r3, r0
 8012724:	6039      	str	r1, [r7, #0]
 8012726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801272c:	2b00      	cmp	r3, #0
 801272e:	db0a      	blt.n	8012746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	b2da      	uxtb	r2, r3
 8012734:	490c      	ldr	r1, [pc, #48]	@ (8012768 <__NVIC_SetPriority+0x4c>)
 8012736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801273a:	0112      	lsls	r2, r2, #4
 801273c:	b2d2      	uxtb	r2, r2
 801273e:	440b      	add	r3, r1
 8012740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012744:	e00a      	b.n	801275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	b2da      	uxtb	r2, r3
 801274a:	4908      	ldr	r1, [pc, #32]	@ (801276c <__NVIC_SetPriority+0x50>)
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	f003 030f 	and.w	r3, r3, #15
 8012752:	3b04      	subs	r3, #4
 8012754:	0112      	lsls	r2, r2, #4
 8012756:	b2d2      	uxtb	r2, r2
 8012758:	440b      	add	r3, r1
 801275a:	761a      	strb	r2, [r3, #24]
}
 801275c:	bf00      	nop
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr
 8012768:	e000e100 	.word	0xe000e100
 801276c:	e000ed00 	.word	0xe000ed00

08012770 <NVIC_EncodePriority>:
{
 8012770:	b480      	push	{r7}
 8012772:	b089      	sub	sp, #36	@ 0x24
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f003 0307 	and.w	r3, r3, #7
 8012782:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	f1c3 0307 	rsb	r3, r3, #7
 801278a:	2b04      	cmp	r3, #4
 801278c:	bf28      	it	cs
 801278e:	2304      	movcs	r3, #4
 8012790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	3304      	adds	r3, #4
 8012796:	2b06      	cmp	r3, #6
 8012798:	d902      	bls.n	80127a0 <NVIC_EncodePriority+0x30>
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	3b03      	subs	r3, #3
 801279e:	e000      	b.n	80127a2 <NVIC_EncodePriority+0x32>
 80127a0:	2300      	movs	r3, #0
 80127a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80127a4:	f04f 32ff 	mov.w	r2, #4294967295
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	fa02 f303 	lsl.w	r3, r2, r3
 80127ae:	43da      	mvns	r2, r3
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	401a      	ands	r2, r3
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80127b8:	f04f 31ff 	mov.w	r1, #4294967295
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	fa01 f303 	lsl.w	r3, r1, r3
 80127c2:	43d9      	mvns	r1, r3
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80127c8:	4313      	orrs	r3, r2
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3724      	adds	r7, #36	@ 0x24
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr
	...

080127d8 <SysTick_Config>:
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	3b01      	subs	r3, #1
 80127e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80127e8:	d301      	bcc.n	80127ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80127ea:	2301      	movs	r3, #1
 80127ec:	e00f      	b.n	801280e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80127ee:	4a0a      	ldr	r2, [pc, #40]	@ (8012818 <SysTick_Config+0x40>)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	3b01      	subs	r3, #1
 80127f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80127f6:	210f      	movs	r1, #15
 80127f8:	f04f 30ff 	mov.w	r0, #4294967295
 80127fc:	f7ff ff8e 	bl	801271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012800:	4b05      	ldr	r3, [pc, #20]	@ (8012818 <SysTick_Config+0x40>)
 8012802:	2200      	movs	r2, #0
 8012804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012806:	4b04      	ldr	r3, [pc, #16]	@ (8012818 <SysTick_Config+0x40>)
 8012808:	2207      	movs	r2, #7
 801280a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 801280c:	2300      	movs	r3, #0
}
 801280e:	4618      	mov	r0, r3
 8012810:	3708      	adds	r7, #8
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	e000e010 	.word	0xe000e010

0801281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff ff29 	bl	801267c <__NVIC_SetPriorityGrouping>
}
 801282a:	bf00      	nop
 801282c:	3708      	adds	r7, #8
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}

08012832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012832:	b580      	push	{r7, lr}
 8012834:	b086      	sub	sp, #24
 8012836:	af00      	add	r7, sp, #0
 8012838:	4603      	mov	r3, r0
 801283a:	60b9      	str	r1, [r7, #8]
 801283c:	607a      	str	r2, [r7, #4]
 801283e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012840:	f7ff ff40 	bl	80126c4 <__NVIC_GetPriorityGrouping>
 8012844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	68b9      	ldr	r1, [r7, #8]
 801284a:	6978      	ldr	r0, [r7, #20]
 801284c:	f7ff ff90 	bl	8012770 <NVIC_EncodePriority>
 8012850:	4602      	mov	r2, r0
 8012852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012856:	4611      	mov	r1, r2
 8012858:	4618      	mov	r0, r3
 801285a:	f7ff ff5f 	bl	801271c <__NVIC_SetPriority>
}
 801285e:	bf00      	nop
 8012860:	3718      	adds	r7, #24
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}

08012866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012866:	b580      	push	{r7, lr}
 8012868:	b082      	sub	sp, #8
 801286a:	af00      	add	r7, sp, #0
 801286c:	4603      	mov	r3, r0
 801286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff ff33 	bl	80126e0 <__NVIC_EnableIRQ>
}
 801287a:	bf00      	nop
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b082      	sub	sp, #8
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff ffa4 	bl	80127d8 <SysTick_Config>
 8012890:	4603      	mov	r3, r0
}
 8012892:	4618      	mov	r0, r3
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 801289a:	b480      	push	{r7}
 801289c:	b087      	sub	sp, #28
 801289e:	af00      	add	r7, sp, #0
 80128a0:	60f8      	str	r0, [r7, #12]
 80128a2:	460b      	mov	r3, r1
 80128a4:	607a      	str	r2, [r7, #4]
 80128a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80128a8:	2300      	movs	r3, #0
 80128aa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80128ac:	7afb      	ldrb	r3, [r7, #11]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d103      	bne.n	80128ba <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	605a      	str	r2, [r3, #4]
      break;
 80128b8:	e002      	b.n	80128c0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80128ba:	2301      	movs	r3, #1
 80128bc:	75fb      	strb	r3, [r7, #23]
      break;
 80128be:	bf00      	nop
  }

  return status;
 80128c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	371c      	adds	r7, #28
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80128ce:	b480      	push	{r7}
 80128d0:	b083      	sub	sp, #12
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
 80128d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80128de:	2301      	movs	r3, #1
 80128e0:	e003      	b.n	80128ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80128e8:	2300      	movs	r3, #0
  }
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	370c      	adds	r7, #12
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr

080128f6 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b086      	sub	sp, #24
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	0c1b      	lsrs	r3, r3, #16
 8012904:	f003 0301 	and.w	r3, r3, #1
 8012908:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f003 031f 	and.w	r3, r3, #31
 8012912:	2201      	movs	r2, #1
 8012914:	fa02 f303 	lsl.w	r3, r2, r3
 8012918:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	015b      	lsls	r3, r3, #5
 801291e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8012922:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8012926:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	693a      	ldr	r2, [r7, #16]
 801292e:	4013      	ands	r3, r2
 8012930:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d009      	beq.n	801294c <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	693a      	ldr	r2, [r7, #16]
 801293c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d002      	beq.n	801294c <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	4798      	blx	r3
    }
  }
}
 801294c:	bf00      	nop
 801294e:	3718      	adds	r7, #24
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012954:	b480      	push	{r7}
 8012956:	b087      	sub	sp, #28
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012962:	e14c      	b.n	8012bfe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	2101      	movs	r1, #1
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	fa01 f303 	lsl.w	r3, r1, r3
 8012970:	4013      	ands	r3, r2
 8012972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 813e 	beq.w	8012bf8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	f003 0303 	and.w	r3, r3, #3
 8012984:	2b01      	cmp	r3, #1
 8012986:	d005      	beq.n	8012994 <HAL_GPIO_Init+0x40>
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	f003 0303 	and.w	r3, r3, #3
 8012990:	2b02      	cmp	r3, #2
 8012992:	d130      	bne.n	80129f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	005b      	lsls	r3, r3, #1
 801299e:	2203      	movs	r2, #3
 80129a0:	fa02 f303 	lsl.w	r3, r2, r3
 80129a4:	43db      	mvns	r3, r3
 80129a6:	693a      	ldr	r2, [r7, #16]
 80129a8:	4013      	ands	r3, r2
 80129aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	68da      	ldr	r2, [r3, #12]
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	005b      	lsls	r3, r3, #1
 80129b4:	fa02 f303 	lsl.w	r3, r2, r3
 80129b8:	693a      	ldr	r2, [r7, #16]
 80129ba:	4313      	orrs	r3, r2
 80129bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	693a      	ldr	r2, [r7, #16]
 80129c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80129ca:	2201      	movs	r2, #1
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	fa02 f303 	lsl.w	r3, r2, r3
 80129d2:	43db      	mvns	r3, r3
 80129d4:	693a      	ldr	r2, [r7, #16]
 80129d6:	4013      	ands	r3, r2
 80129d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	091b      	lsrs	r3, r3, #4
 80129e0:	f003 0201 	and.w	r2, r3, #1
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	fa02 f303 	lsl.w	r3, r2, r3
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	4313      	orrs	r3, r2
 80129ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	f003 0303 	and.w	r3, r3, #3
 80129fe:	2b03      	cmp	r3, #3
 8012a00:	d017      	beq.n	8012a32 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	005b      	lsls	r3, r3, #1
 8012a0c:	2203      	movs	r2, #3
 8012a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a12:	43db      	mvns	r3, r3
 8012a14:	693a      	ldr	r2, [r7, #16]
 8012a16:	4013      	ands	r3, r2
 8012a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	689a      	ldr	r2, [r3, #8]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	fa02 f303 	lsl.w	r3, r2, r3
 8012a26:	693a      	ldr	r2, [r7, #16]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	693a      	ldr	r2, [r7, #16]
 8012a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	f003 0303 	and.w	r3, r3, #3
 8012a3a:	2b02      	cmp	r3, #2
 8012a3c:	d123      	bne.n	8012a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	08da      	lsrs	r2, r3, #3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	3208      	adds	r2, #8
 8012a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	f003 0307 	and.w	r3, r3, #7
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	220f      	movs	r2, #15
 8012a56:	fa02 f303 	lsl.w	r3, r2, r3
 8012a5a:	43db      	mvns	r3, r3
 8012a5c:	693a      	ldr	r2, [r7, #16]
 8012a5e:	4013      	ands	r3, r2
 8012a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	691a      	ldr	r2, [r3, #16]
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	f003 0307 	and.w	r3, r3, #7
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a72:	693a      	ldr	r2, [r7, #16]
 8012a74:	4313      	orrs	r3, r2
 8012a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	08da      	lsrs	r2, r3, #3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	3208      	adds	r2, #8
 8012a80:	6939      	ldr	r1, [r7, #16]
 8012a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	005b      	lsls	r3, r3, #1
 8012a90:	2203      	movs	r2, #3
 8012a92:	fa02 f303 	lsl.w	r3, r2, r3
 8012a96:	43db      	mvns	r3, r3
 8012a98:	693a      	ldr	r2, [r7, #16]
 8012a9a:	4013      	ands	r3, r2
 8012a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	f003 0203 	and.w	r2, r3, #3
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8012aae:	693a      	ldr	r2, [r7, #16]
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	693a      	ldr	r2, [r7, #16]
 8012ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f000 8098 	beq.w	8012bf8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8012ac8:	4a54      	ldr	r2, [pc, #336]	@ (8012c1c <HAL_GPIO_Init+0x2c8>)
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	089b      	lsrs	r3, r3, #2
 8012ace:	3302      	adds	r3, #2
 8012ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	f003 0303 	and.w	r3, r3, #3
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	220f      	movs	r2, #15
 8012ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ae4:	43db      	mvns	r3, r3
 8012ae6:	693a      	ldr	r2, [r7, #16]
 8012ae8:	4013      	ands	r3, r2
 8012aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012af2:	d019      	beq.n	8012b28 <HAL_GPIO_Init+0x1d4>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4a4a      	ldr	r2, [pc, #296]	@ (8012c20 <HAL_GPIO_Init+0x2cc>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d013      	beq.n	8012b24 <HAL_GPIO_Init+0x1d0>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	4a49      	ldr	r2, [pc, #292]	@ (8012c24 <HAL_GPIO_Init+0x2d0>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d00d      	beq.n	8012b20 <HAL_GPIO_Init+0x1cc>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4a48      	ldr	r2, [pc, #288]	@ (8012c28 <HAL_GPIO_Init+0x2d4>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d007      	beq.n	8012b1c <HAL_GPIO_Init+0x1c8>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4a47      	ldr	r2, [pc, #284]	@ (8012c2c <HAL_GPIO_Init+0x2d8>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d101      	bne.n	8012b18 <HAL_GPIO_Init+0x1c4>
 8012b14:	2304      	movs	r3, #4
 8012b16:	e008      	b.n	8012b2a <HAL_GPIO_Init+0x1d6>
 8012b18:	2307      	movs	r3, #7
 8012b1a:	e006      	b.n	8012b2a <HAL_GPIO_Init+0x1d6>
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	e004      	b.n	8012b2a <HAL_GPIO_Init+0x1d6>
 8012b20:	2302      	movs	r3, #2
 8012b22:	e002      	b.n	8012b2a <HAL_GPIO_Init+0x1d6>
 8012b24:	2301      	movs	r3, #1
 8012b26:	e000      	b.n	8012b2a <HAL_GPIO_Init+0x1d6>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	697a      	ldr	r2, [r7, #20]
 8012b2c:	f002 0203 	and.w	r2, r2, #3
 8012b30:	0092      	lsls	r2, r2, #2
 8012b32:	4093      	lsls	r3, r2
 8012b34:	693a      	ldr	r2, [r7, #16]
 8012b36:	4313      	orrs	r3, r2
 8012b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012b3a:	4938      	ldr	r1, [pc, #224]	@ (8012c1c <HAL_GPIO_Init+0x2c8>)
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	089b      	lsrs	r3, r3, #2
 8012b40:	3302      	adds	r3, #2
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012b48:	4b39      	ldr	r3, [pc, #228]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	43db      	mvns	r3, r3
 8012b52:	693a      	ldr	r2, [r7, #16]
 8012b54:	4013      	ands	r3, r2
 8012b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d003      	beq.n	8012b6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8012b64:	693a      	ldr	r2, [r7, #16]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012b6c:	4a30      	ldr	r2, [pc, #192]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8012b72:	4b2f      	ldr	r3, [pc, #188]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	43db      	mvns	r3, r3
 8012b7c:	693a      	ldr	r2, [r7, #16]
 8012b7e:	4013      	ands	r3, r2
 8012b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d003      	beq.n	8012b96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8012b8e:	693a      	ldr	r2, [r7, #16]
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8012b96:	4a26      	ldr	r2, [pc, #152]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012b9c:	4b24      	ldr	r3, [pc, #144]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	43db      	mvns	r3, r3
 8012ba8:	693a      	ldr	r2, [r7, #16]
 8012baa:	4013      	ands	r3, r2
 8012bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d003      	beq.n	8012bc2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8012bba:	693a      	ldr	r2, [r7, #16]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8012bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8012bca:	4b19      	ldr	r3, [pc, #100]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	43db      	mvns	r3, r3
 8012bd6:	693a      	ldr	r2, [r7, #16]
 8012bd8:	4013      	ands	r3, r2
 8012bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d003      	beq.n	8012bf0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8012be8:	693a      	ldr	r2, [r7, #16]
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	4313      	orrs	r3, r2
 8012bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8012bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8012c30 <HAL_GPIO_Init+0x2dc>)
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	fa22 f303 	lsr.w	r3, r2, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f47f aeab 	bne.w	8012964 <HAL_GPIO_Init+0x10>
  }
}
 8012c0e:	bf00      	nop
 8012c10:	bf00      	nop
 8012c12:	371c      	adds	r7, #28
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	40010000 	.word	0x40010000
 8012c20:	48000400 	.word	0x48000400
 8012c24:	48000800 	.word	0x48000800
 8012c28:	48000c00 	.word	0x48000c00
 8012c2c:	48001000 	.word	0x48001000
 8012c30:	58000800 	.word	0x58000800

08012c34 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b087      	sub	sp, #28
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8012c42:	e0bb      	b.n	8012dbc <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8012c44:	2201      	movs	r2, #1
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	fa02 f303 	lsl.w	r3, r2, r3
 8012c4c:	683a      	ldr	r2, [r7, #0]
 8012c4e:	4013      	ands	r3, r2
 8012c50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f000 80ae 	beq.w	8012db6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8012c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8012dd8 <HAL_GPIO_DeInit+0x1a4>)
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	089b      	lsrs	r3, r3, #2
 8012c60:	3302      	adds	r3, #2
 8012c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	f003 0303 	and.w	r3, r3, #3
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	220f      	movs	r2, #15
 8012c72:	fa02 f303 	lsl.w	r3, r2, r3
 8012c76:	68fa      	ldr	r2, [r7, #12]
 8012c78:	4013      	ands	r3, r2
 8012c7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012c82:	d019      	beq.n	8012cb8 <HAL_GPIO_DeInit+0x84>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4a55      	ldr	r2, [pc, #340]	@ (8012ddc <HAL_GPIO_DeInit+0x1a8>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d013      	beq.n	8012cb4 <HAL_GPIO_DeInit+0x80>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	4a54      	ldr	r2, [pc, #336]	@ (8012de0 <HAL_GPIO_DeInit+0x1ac>)
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d00d      	beq.n	8012cb0 <HAL_GPIO_DeInit+0x7c>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4a53      	ldr	r2, [pc, #332]	@ (8012de4 <HAL_GPIO_DeInit+0x1b0>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d007      	beq.n	8012cac <HAL_GPIO_DeInit+0x78>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	4a52      	ldr	r2, [pc, #328]	@ (8012de8 <HAL_GPIO_DeInit+0x1b4>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d101      	bne.n	8012ca8 <HAL_GPIO_DeInit+0x74>
 8012ca4:	2304      	movs	r3, #4
 8012ca6:	e008      	b.n	8012cba <HAL_GPIO_DeInit+0x86>
 8012ca8:	2307      	movs	r3, #7
 8012caa:	e006      	b.n	8012cba <HAL_GPIO_DeInit+0x86>
 8012cac:	2303      	movs	r3, #3
 8012cae:	e004      	b.n	8012cba <HAL_GPIO_DeInit+0x86>
 8012cb0:	2302      	movs	r3, #2
 8012cb2:	e002      	b.n	8012cba <HAL_GPIO_DeInit+0x86>
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	e000      	b.n	8012cba <HAL_GPIO_DeInit+0x86>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	697a      	ldr	r2, [r7, #20]
 8012cbc:	f002 0203 	and.w	r2, r2, #3
 8012cc0:	0092      	lsls	r2, r2, #2
 8012cc2:	4093      	lsls	r3, r2
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d136      	bne.n	8012d38 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8012cca:	4b48      	ldr	r3, [pc, #288]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012ccc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	43db      	mvns	r3, r3
 8012cd4:	4945      	ldr	r1, [pc, #276]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8012cdc:	4b43      	ldr	r3, [pc, #268]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012cde:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	43db      	mvns	r3, r3
 8012ce6:	4941      	ldr	r1, [pc, #260]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012ce8:	4013      	ands	r3, r2
 8012cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8012cee:	4b3f      	ldr	r3, [pc, #252]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012cf0:	681a      	ldr	r2, [r3, #0]
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	43db      	mvns	r3, r3
 8012cf6:	493d      	ldr	r1, [pc, #244]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8012cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	43db      	mvns	r3, r3
 8012d04:	4939      	ldr	r1, [pc, #228]	@ (8012dec <HAL_GPIO_DeInit+0x1b8>)
 8012d06:	4013      	ands	r3, r2
 8012d08:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	f003 0303 	and.w	r3, r3, #3
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	220f      	movs	r2, #15
 8012d14:	fa02 f303 	lsl.w	r3, r2, r3
 8012d18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8012d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8012dd8 <HAL_GPIO_DeInit+0x1a4>)
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	089b      	lsrs	r3, r3, #2
 8012d20:	3302      	adds	r3, #2
 8012d22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	43da      	mvns	r2, r3
 8012d2a:	482b      	ldr	r0, [pc, #172]	@ (8012dd8 <HAL_GPIO_DeInit+0x1a4>)
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	089b      	lsrs	r3, r3, #2
 8012d30:	400a      	ands	r2, r1
 8012d32:	3302      	adds	r3, #2
 8012d34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	005b      	lsls	r3, r3, #1
 8012d40:	2103      	movs	r1, #3
 8012d42:	fa01 f303 	lsl.w	r3, r1, r3
 8012d46:	431a      	orrs	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	08da      	lsrs	r2, r3, #3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	3208      	adds	r2, #8
 8012d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	f003 0307 	and.w	r3, r3, #7
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	220f      	movs	r2, #15
 8012d62:	fa02 f303 	lsl.w	r3, r2, r3
 8012d66:	43db      	mvns	r3, r3
 8012d68:	697a      	ldr	r2, [r7, #20]
 8012d6a:	08d2      	lsrs	r2, r2, #3
 8012d6c:	4019      	ands	r1, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	3208      	adds	r2, #8
 8012d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	68da      	ldr	r2, [r3, #12]
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	2103      	movs	r1, #3
 8012d80:	fa01 f303 	lsl.w	r3, r1, r3
 8012d84:	43db      	mvns	r3, r3
 8012d86:	401a      	ands	r2, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	685a      	ldr	r2, [r3, #4]
 8012d90:	2101      	movs	r1, #1
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	fa01 f303 	lsl.w	r3, r1, r3
 8012d98:	43db      	mvns	r3, r3
 8012d9a:	401a      	ands	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	689a      	ldr	r2, [r3, #8]
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	2103      	movs	r1, #3
 8012daa:	fa01 f303 	lsl.w	r3, r1, r3
 8012dae:	43db      	mvns	r3, r3
 8012db0:	401a      	ands	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	3301      	adds	r3, #1
 8012dba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f47f af3d 	bne.w	8012c44 <HAL_GPIO_DeInit+0x10>
  }
}
 8012dca:	bf00      	nop
 8012dcc:	bf00      	nop
 8012dce:	371c      	adds	r7, #28
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	40010000 	.word	0x40010000
 8012ddc:	48000400 	.word	0x48000400
 8012de0:	48000800 	.word	0x48000800
 8012de4:	48000c00 	.word	0x48000c00
 8012de8:	48001000 	.word	0x48001000
 8012dec:	58000800 	.word	0x58000800

08012df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	807b      	strh	r3, [r7, #2]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012e00:	787b      	ldrb	r3, [r7, #1]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d003      	beq.n	8012e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012e06:	887a      	ldrh	r2, [r7, #2]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012e0c:	e002      	b.n	8012e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012e0e:	887a      	ldrh	r2, [r7, #2]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	4603      	mov	r3, r0
 8012e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8012e2a:	4b08      	ldr	r3, [pc, #32]	@ (8012e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012e2c:	68da      	ldr	r2, [r3, #12]
 8012e2e:	88fb      	ldrh	r3, [r7, #6]
 8012e30:	4013      	ands	r3, r2
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d006      	beq.n	8012e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012e36:	4a05      	ldr	r2, [pc, #20]	@ (8012e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012e38:	88fb      	ldrh	r3, [r7, #6]
 8012e3a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f003 fcf8 	bl	8016834 <HAL_GPIO_EXTI_Callback>
  }
}
 8012e44:	bf00      	nop
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	58000800 	.word	0x58000800

08012e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d101      	bne.n	8012e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e08d      	b.n	8012f7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d106      	bne.n	8012e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2200      	movs	r2, #0
 8012e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 f8b4 	bl	8012fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2224      	movs	r2, #36	@ 0x24
 8012e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f022 0201 	bic.w	r2, r2, #1
 8012e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	685a      	ldr	r2, [r3, #4]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8012ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	689a      	ldr	r2, [r3, #8]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	68db      	ldr	r3, [r3, #12]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d107      	bne.n	8012eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	689a      	ldr	r2, [r3, #8]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012ec6:	609a      	str	r2, [r3, #8]
 8012ec8:	e006      	b.n	8012ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689a      	ldr	r2, [r3, #8]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8012ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68db      	ldr	r3, [r3, #12]
 8012edc:	2b02      	cmp	r3, #2
 8012ede:	d108      	bne.n	8012ef2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	685a      	ldr	r2, [r3, #4]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012eee:	605a      	str	r2, [r3, #4]
 8012ef0:	e007      	b.n	8012f02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	685a      	ldr	r2, [r3, #4]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	6812      	ldr	r2, [r2, #0]
 8012f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	68da      	ldr	r2, [r3, #12]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	691a      	ldr	r2, [r3, #16]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	695b      	ldr	r3, [r3, #20]
 8012f2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	699b      	ldr	r3, [r3, #24]
 8012f36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	430a      	orrs	r2, r1
 8012f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	69d9      	ldr	r1, [r3, #28]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6a1a      	ldr	r2, [r3, #32]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	430a      	orrs	r2, r1
 8012f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	f042 0201 	orr.w	r2, r2, #1
 8012f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2220      	movs	r2, #32
 8012f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2200      	movs	r2, #0
 8012f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3708      	adds	r7, #8
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b082      	sub	sp, #8
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d101      	bne.n	8012f98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012f94:	2301      	movs	r3, #1
 8012f96:	e021      	b.n	8012fdc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2224      	movs	r2, #36	@ 0x24
 8012f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f022 0201 	bic.w	r2, r2, #1
 8012fae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 f821 	bl	8012ff8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8012fda:	2300      	movs	r3, #0
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b083      	sub	sp, #12
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012fec:	bf00      	nop
 8012fee:	370c      	adds	r7, #12
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8013000:	bf00      	nop
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b088      	sub	sp, #32
 8013010:	af02      	add	r7, sp, #8
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	607a      	str	r2, [r7, #4]
 8013016:	461a      	mov	r2, r3
 8013018:	460b      	mov	r3, r1
 801301a:	817b      	strh	r3, [r7, #10]
 801301c:	4613      	mov	r3, r2
 801301e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013026:	b2db      	uxtb	r3, r3
 8013028:	2b20      	cmp	r3, #32
 801302a:	f040 80fd 	bne.w	8013228 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013034:	2b01      	cmp	r3, #1
 8013036:	d101      	bne.n	801303c <HAL_I2C_Master_Transmit+0x30>
 8013038:	2302      	movs	r3, #2
 801303a:	e0f6      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2201      	movs	r2, #1
 8013040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013044:	f7ff fade 	bl	8012604 <HAL_GetTick>
 8013048:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	2319      	movs	r3, #25
 8013050:	2201      	movs	r2, #1
 8013052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f000 fa24 	bl	80134a4 <I2C_WaitOnFlagUntilTimeout>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d001      	beq.n	8013066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8013062:	2301      	movs	r3, #1
 8013064:	e0e1      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2221      	movs	r2, #33	@ 0x21
 801306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2210      	movs	r2, #16
 8013072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2200      	movs	r2, #0
 801307a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	893a      	ldrh	r2, [r7, #8]
 8013086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2200      	movs	r2, #0
 801308c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013092:	b29b      	uxth	r3, r3
 8013094:	2bff      	cmp	r3, #255	@ 0xff
 8013096:	d906      	bls.n	80130a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	22ff      	movs	r2, #255	@ 0xff
 801309c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801309e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	e007      	b.n	80130b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80130b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80130b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d024      	beq.n	8013108 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130c2:	781a      	ldrb	r2, [r3, #0]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ce:	1c5a      	adds	r2, r3, #1
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130d8:	b29b      	uxth	r3, r3
 80130da:	3b01      	subs	r3, #1
 80130dc:	b29a      	uxth	r2, r3
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130e6:	3b01      	subs	r3, #1
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	3301      	adds	r3, #1
 80130f6:	b2da      	uxtb	r2, r3
 80130f8:	8979      	ldrh	r1, [r7, #10]
 80130fa:	4b4e      	ldr	r3, [pc, #312]	@ (8013234 <HAL_I2C_Master_Transmit+0x228>)
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	68f8      	ldr	r0, [r7, #12]
 8013102:	f000 fc1f 	bl	8013944 <I2C_TransferConfig>
 8013106:	e066      	b.n	80131d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801310c:	b2da      	uxtb	r2, r3
 801310e:	8979      	ldrh	r1, [r7, #10]
 8013110:	4b48      	ldr	r3, [pc, #288]	@ (8013234 <HAL_I2C_Master_Transmit+0x228>)
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f000 fc14 	bl	8013944 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801311c:	e05b      	b.n	80131d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801311e:	693a      	ldr	r2, [r7, #16]
 8013120:	6a39      	ldr	r1, [r7, #32]
 8013122:	68f8      	ldr	r0, [r7, #12]
 8013124:	f000 fa17 	bl	8013556 <I2C_WaitOnTXISFlagUntilTimeout>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 801312e:	2301      	movs	r3, #1
 8013130:	e07b      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013136:	781a      	ldrb	r2, [r3, #0]
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013142:	1c5a      	adds	r2, r3, #1
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801314c:	b29b      	uxth	r3, r3
 801314e:	3b01      	subs	r3, #1
 8013150:	b29a      	uxth	r2, r3
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801315a:	3b01      	subs	r3, #1
 801315c:	b29a      	uxth	r2, r3
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013166:	b29b      	uxth	r3, r3
 8013168:	2b00      	cmp	r3, #0
 801316a:	d034      	beq.n	80131d6 <HAL_I2C_Master_Transmit+0x1ca>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013170:	2b00      	cmp	r3, #0
 8013172:	d130      	bne.n	80131d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	6a3b      	ldr	r3, [r7, #32]
 801317a:	2200      	movs	r2, #0
 801317c:	2180      	movs	r1, #128	@ 0x80
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f000 f990 	bl	80134a4 <I2C_WaitOnFlagUntilTimeout>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e04d      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013192:	b29b      	uxth	r3, r3
 8013194:	2bff      	cmp	r3, #255	@ 0xff
 8013196:	d90e      	bls.n	80131b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	22ff      	movs	r2, #255	@ 0xff
 801319c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131a2:	b2da      	uxtb	r2, r3
 80131a4:	8979      	ldrh	r1, [r7, #10]
 80131a6:	2300      	movs	r3, #0
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f000 fbc8 	bl	8013944 <I2C_TransferConfig>
 80131b4:	e00f      	b.n	80131d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131c4:	b2da      	uxtb	r2, r3
 80131c6:	8979      	ldrh	r1, [r7, #10]
 80131c8:	2300      	movs	r3, #0
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f000 fbb7 	bl	8013944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131da:	b29b      	uxth	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d19e      	bne.n	801311e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80131e0:	693a      	ldr	r2, [r7, #16]
 80131e2:	6a39      	ldr	r1, [r7, #32]
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f000 f9fd 	bl	80135e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	e01a      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	2220      	movs	r2, #32
 80131fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	6859      	ldr	r1, [r3, #4]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	4b0c      	ldr	r3, [pc, #48]	@ (8013238 <HAL_I2C_Master_Transmit+0x22c>)
 8013208:	400b      	ands	r3, r1
 801320a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2220      	movs	r2, #32
 8013210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2200      	movs	r2, #0
 8013218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2200      	movs	r2, #0
 8013220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013224:	2300      	movs	r3, #0
 8013226:	e000      	b.n	801322a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8013228:	2302      	movs	r3, #2
  }
}
 801322a:	4618      	mov	r0, r3
 801322c:	3718      	adds	r7, #24
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	80002000 	.word	0x80002000
 8013238:	fe00e800 	.word	0xfe00e800

0801323c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b088      	sub	sp, #32
 8013240:	af02      	add	r7, sp, #8
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	607a      	str	r2, [r7, #4]
 8013246:	461a      	mov	r2, r3
 8013248:	460b      	mov	r3, r1
 801324a:	817b      	strh	r3, [r7, #10]
 801324c:	4613      	mov	r3, r2
 801324e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013256:	b2db      	uxtb	r3, r3
 8013258:	2b20      	cmp	r3, #32
 801325a:	f040 80db 	bne.w	8013414 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013264:	2b01      	cmp	r3, #1
 8013266:	d101      	bne.n	801326c <HAL_I2C_Master_Receive+0x30>
 8013268:	2302      	movs	r3, #2
 801326a:	e0d4      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013274:	f7ff f9c6 	bl	8012604 <HAL_GetTick>
 8013278:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	2319      	movs	r3, #25
 8013280:	2201      	movs	r2, #1
 8013282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013286:	68f8      	ldr	r0, [r7, #12]
 8013288:	f000 f90c 	bl	80134a4 <I2C_WaitOnFlagUntilTimeout>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d001      	beq.n	8013296 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8013292:	2301      	movs	r3, #1
 8013294:	e0bf      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2222      	movs	r2, #34	@ 0x22
 801329a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2210      	movs	r2, #16
 80132a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2200      	movs	r2, #0
 80132aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	893a      	ldrh	r2, [r7, #8]
 80132b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2200      	movs	r2, #0
 80132bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	2bff      	cmp	r3, #255	@ 0xff
 80132c6:	d90e      	bls.n	80132e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	22ff      	movs	r2, #255	@ 0xff
 80132cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132d2:	b2da      	uxtb	r2, r3
 80132d4:	8979      	ldrh	r1, [r7, #10]
 80132d6:	4b52      	ldr	r3, [pc, #328]	@ (8013420 <HAL_I2C_Master_Receive+0x1e4>)
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80132de:	68f8      	ldr	r0, [r7, #12]
 80132e0:	f000 fb30 	bl	8013944 <I2C_TransferConfig>
 80132e4:	e06d      	b.n	80133c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132f4:	b2da      	uxtb	r2, r3
 80132f6:	8979      	ldrh	r1, [r7, #10]
 80132f8:	4b49      	ldr	r3, [pc, #292]	@ (8013420 <HAL_I2C_Master_Receive+0x1e4>)
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f000 fb1f 	bl	8013944 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8013306:	e05c      	b.n	80133c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013308:	697a      	ldr	r2, [r7, #20]
 801330a:	6a39      	ldr	r1, [r7, #32]
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f000 f9ad 	bl	801366c <I2C_WaitOnRXNEFlagUntilTimeout>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8013318:	2301      	movs	r3, #1
 801331a:	e07c      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013326:	b2d2      	uxtb	r2, r2
 8013328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801332e:	1c5a      	adds	r2, r3, #1
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013338:	3b01      	subs	r3, #1
 801333a:	b29a      	uxth	r2, r3
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013344:	b29b      	uxth	r3, r3
 8013346:	3b01      	subs	r3, #1
 8013348:	b29a      	uxth	r2, r3
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013352:	b29b      	uxth	r3, r3
 8013354:	2b00      	cmp	r3, #0
 8013356:	d034      	beq.n	80133c2 <HAL_I2C_Master_Receive+0x186>
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801335c:	2b00      	cmp	r3, #0
 801335e:	d130      	bne.n	80133c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	9300      	str	r3, [sp, #0]
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	2200      	movs	r2, #0
 8013368:	2180      	movs	r1, #128	@ 0x80
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f000 f89a 	bl	80134a4 <I2C_WaitOnFlagUntilTimeout>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8013376:	2301      	movs	r3, #1
 8013378:	e04d      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801337e:	b29b      	uxth	r3, r3
 8013380:	2bff      	cmp	r3, #255	@ 0xff
 8013382:	d90e      	bls.n	80133a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	22ff      	movs	r2, #255	@ 0xff
 8013388:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801338e:	b2da      	uxtb	r2, r3
 8013390:	8979      	ldrh	r1, [r7, #10]
 8013392:	2300      	movs	r3, #0
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801339a:	68f8      	ldr	r0, [r7, #12]
 801339c:	f000 fad2 	bl	8013944 <I2C_TransferConfig>
 80133a0:	e00f      	b.n	80133c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133b0:	b2da      	uxtb	r2, r3
 80133b2:	8979      	ldrh	r1, [r7, #10]
 80133b4:	2300      	movs	r3, #0
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f000 fac1 	bl	8013944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d19d      	bne.n	8013308 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80133cc:	697a      	ldr	r2, [r7, #20]
 80133ce:	6a39      	ldr	r1, [r7, #32]
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f000 f907 	bl	80135e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d001      	beq.n	80133e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80133dc:	2301      	movs	r3, #1
 80133de:	e01a      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2220      	movs	r2, #32
 80133e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	6859      	ldr	r1, [r3, #4]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681a      	ldr	r2, [r3, #0]
 80133f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013424 <HAL_I2C_Master_Receive+0x1e8>)
 80133f4:	400b      	ands	r3, r1
 80133f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2220      	movs	r2, #32
 80133fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2200      	movs	r2, #0
 8013404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013410:	2300      	movs	r3, #0
 8013412:	e000      	b.n	8013416 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8013414:	2302      	movs	r3, #2
  }
}
 8013416:	4618      	mov	r0, r3
 8013418:	3718      	adds	r7, #24
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	80002400 	.word	0x80002400
 8013424:	fe00e800 	.word	0xfe00e800

08013428 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013436:	b2db      	uxtb	r3, r3
}
 8013438:	4618      	mov	r0, r3
 801343a:	370c      	adds	r7, #12
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr

08013444 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8013450:	4618      	mov	r0, r3
 8013452:	370c      	adds	r7, #12
 8013454:	46bd      	mov	sp, r7
 8013456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345a:	4770      	bx	lr

0801345c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	699b      	ldr	r3, [r3, #24]
 801346a:	f003 0302 	and.w	r3, r3, #2
 801346e:	2b02      	cmp	r3, #2
 8013470:	d103      	bne.n	801347a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2200      	movs	r2, #0
 8013478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	699b      	ldr	r3, [r3, #24]
 8013480:	f003 0301 	and.w	r3, r3, #1
 8013484:	2b01      	cmp	r3, #1
 8013486:	d007      	beq.n	8013498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	699a      	ldr	r2, [r3, #24]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f042 0201 	orr.w	r2, r2, #1
 8013496:	619a      	str	r2, [r3, #24]
  }
}
 8013498:	bf00      	nop
 801349a:	370c      	adds	r7, #12
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr

080134a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	603b      	str	r3, [r7, #0]
 80134b0:	4613      	mov	r3, r2
 80134b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80134b4:	e03b      	b.n	801352e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80134b6:	69ba      	ldr	r2, [r7, #24]
 80134b8:	6839      	ldr	r1, [r7, #0]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 f962 	bl	8013784 <I2C_IsErrorOccurred>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	e041      	b.n	801354e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d0:	d02d      	beq.n	801352e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134d2:	f7ff f897 	bl	8012604 <HAL_GetTick>
 80134d6:	4602      	mov	r2, r0
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d302      	bcc.n	80134e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d122      	bne.n	801352e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	699a      	ldr	r2, [r3, #24]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	4013      	ands	r3, r2
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	bf0c      	ite	eq
 80134f8:	2301      	moveq	r3, #1
 80134fa:	2300      	movne	r3, #0
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	461a      	mov	r2, r3
 8013500:	79fb      	ldrb	r3, [r7, #7]
 8013502:	429a      	cmp	r2, r3
 8013504:	d113      	bne.n	801352e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801350a:	f043 0220 	orr.w	r2, r3, #32
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2220      	movs	r2, #32
 8013516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2200      	movs	r2, #0
 801351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2200      	movs	r2, #0
 8013526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	e00f      	b.n	801354e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	699a      	ldr	r2, [r3, #24]
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	4013      	ands	r3, r2
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	429a      	cmp	r2, r3
 801353c:	bf0c      	ite	eq
 801353e:	2301      	moveq	r3, #1
 8013540:	2300      	movne	r3, #0
 8013542:	b2db      	uxtb	r3, r3
 8013544:	461a      	mov	r2, r3
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	429a      	cmp	r2, r3
 801354a:	d0b4      	beq.n	80134b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801354c:	2300      	movs	r3, #0
}
 801354e:	4618      	mov	r0, r3
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b084      	sub	sp, #16
 801355a:	af00      	add	r7, sp, #0
 801355c:	60f8      	str	r0, [r7, #12]
 801355e:	60b9      	str	r1, [r7, #8]
 8013560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8013562:	e033      	b.n	80135cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	68b9      	ldr	r1, [r7, #8]
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f000 f90b 	bl	8013784 <I2C_IsErrorOccurred>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d001      	beq.n	8013578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013574:	2301      	movs	r3, #1
 8013576:	e031      	b.n	80135dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801357e:	d025      	beq.n	80135cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013580:	f7ff f840 	bl	8012604 <HAL_GetTick>
 8013584:	4602      	mov	r2, r0
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	68ba      	ldr	r2, [r7, #8]
 801358c:	429a      	cmp	r2, r3
 801358e:	d302      	bcc.n	8013596 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d11a      	bne.n	80135cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	699b      	ldr	r3, [r3, #24]
 801359c:	f003 0302 	and.w	r3, r3, #2
 80135a0:	2b02      	cmp	r3, #2
 80135a2:	d013      	beq.n	80135cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135a8:	f043 0220 	orr.w	r2, r3, #32
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2220      	movs	r2, #32
 80135b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80135c8:	2301      	movs	r3, #1
 80135ca:	e007      	b.n	80135dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	699b      	ldr	r3, [r3, #24]
 80135d2:	f003 0302 	and.w	r3, r3, #2
 80135d6:	2b02      	cmp	r3, #2
 80135d8:	d1c4      	bne.n	8013564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3710      	adds	r7, #16
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80135f0:	e02f      	b.n	8013652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	68b9      	ldr	r1, [r7, #8]
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f000 f8c4 	bl	8013784 <I2C_IsErrorOccurred>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013602:	2301      	movs	r3, #1
 8013604:	e02d      	b.n	8013662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013606:	f7fe fffd 	bl	8012604 <HAL_GetTick>
 801360a:	4602      	mov	r2, r0
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	1ad3      	subs	r3, r2, r3
 8013610:	68ba      	ldr	r2, [r7, #8]
 8013612:	429a      	cmp	r2, r3
 8013614:	d302      	bcc.n	801361c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d11a      	bne.n	8013652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	f003 0320 	and.w	r3, r3, #32
 8013626:	2b20      	cmp	r3, #32
 8013628:	d013      	beq.n	8013652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801362e:	f043 0220 	orr.w	r2, r3, #32
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2220      	movs	r2, #32
 801363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2200      	movs	r2, #0
 801364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801364e:	2301      	movs	r3, #1
 8013650:	e007      	b.n	8013662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	699b      	ldr	r3, [r3, #24]
 8013658:	f003 0320 	and.w	r3, r3, #32
 801365c:	2b20      	cmp	r3, #32
 801365e:	d1c8      	bne.n	80135f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013660:	2300      	movs	r3, #0
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
	...

0801366c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b086      	sub	sp, #24
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 801367c:	e071      	b.n	8013762 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	68b9      	ldr	r1, [r7, #8]
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f000 f87e 	bl	8013784 <I2C_IsErrorOccurred>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d001      	beq.n	8013692 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	f003 0320 	and.w	r3, r3, #32
 801369c:	2b20      	cmp	r3, #32
 801369e:	d13b      	bne.n	8013718 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80136a0:	7dfb      	ldrb	r3, [r7, #23]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d138      	bne.n	8013718 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	f003 0304 	and.w	r3, r3, #4
 80136b0:	2b04      	cmp	r3, #4
 80136b2:	d105      	bne.n	80136c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d001      	beq.n	80136c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80136bc:	2300      	movs	r3, #0
 80136be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	699b      	ldr	r3, [r3, #24]
 80136c6:	f003 0310 	and.w	r3, r3, #16
 80136ca:	2b10      	cmp	r3, #16
 80136cc:	d121      	bne.n	8013712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2210      	movs	r2, #16
 80136d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2204      	movs	r2, #4
 80136da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2220      	movs	r2, #32
 80136e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	6859      	ldr	r1, [r3, #4]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	4b24      	ldr	r3, [pc, #144]	@ (8013780 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80136f0:	400b      	ands	r3, r1
 80136f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2220      	movs	r2, #32
 80136f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2200      	movs	r2, #0
 8013700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 801370c:	2301      	movs	r3, #1
 801370e:	75fb      	strb	r3, [r7, #23]
 8013710:	e002      	b.n	8013718 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2200      	movs	r2, #0
 8013716:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8013718:	f7fe ff74 	bl	8012604 <HAL_GetTick>
 801371c:	4602      	mov	r2, r0
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	1ad3      	subs	r3, r2, r3
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	429a      	cmp	r2, r3
 8013726:	d302      	bcc.n	801372e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d119      	bne.n	8013762 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 801372e:	7dfb      	ldrb	r3, [r7, #23]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d116      	bne.n	8013762 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	699b      	ldr	r3, [r3, #24]
 801373a:	f003 0304 	and.w	r3, r3, #4
 801373e:	2b04      	cmp	r3, #4
 8013740:	d00f      	beq.n	8013762 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013746:	f043 0220 	orr.w	r2, r3, #32
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2220      	movs	r2, #32
 8013752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2200      	movs	r2, #0
 801375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 801375e:	2301      	movs	r3, #1
 8013760:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	699b      	ldr	r3, [r3, #24]
 8013768:	f003 0304 	and.w	r3, r3, #4
 801376c:	2b04      	cmp	r3, #4
 801376e:	d002      	beq.n	8013776 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8013770:	7dfb      	ldrb	r3, [r7, #23]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d083      	beq.n	801367e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8013776:	7dfb      	ldrb	r3, [r7, #23]
}
 8013778:	4618      	mov	r0, r3
 801377a:	3718      	adds	r7, #24
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	fe00e800 	.word	0xfe00e800

08013784 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b08a      	sub	sp, #40	@ 0x28
 8013788:	af00      	add	r7, sp, #0
 801378a:	60f8      	str	r0, [r7, #12]
 801378c:	60b9      	str	r1, [r7, #8]
 801378e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	699b      	ldr	r3, [r3, #24]
 801379c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	f003 0310 	and.w	r3, r3, #16
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d068      	beq.n	8013882 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2210      	movs	r2, #16
 80137b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80137b8:	e049      	b.n	801384e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c0:	d045      	beq.n	801384e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80137c2:	f7fe ff1f 	bl	8012604 <HAL_GetTick>
 80137c6:	4602      	mov	r2, r0
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	1ad3      	subs	r3, r2, r3
 80137cc:	68ba      	ldr	r2, [r7, #8]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d302      	bcc.n	80137d8 <I2C_IsErrorOccurred+0x54>
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d13a      	bne.n	801384e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80137e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80137ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	699b      	ldr	r3, [r3, #24]
 80137f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80137f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80137fa:	d121      	bne.n	8013840 <I2C_IsErrorOccurred+0xbc>
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013802:	d01d      	beq.n	8013840 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8013804:	7cfb      	ldrb	r3, [r7, #19]
 8013806:	2b20      	cmp	r3, #32
 8013808:	d01a      	beq.n	8013840 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	685a      	ldr	r2, [r3, #4]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013818:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801381a:	f7fe fef3 	bl	8012604 <HAL_GetTick>
 801381e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013820:	e00e      	b.n	8013840 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013822:	f7fe feef 	bl	8012604 <HAL_GetTick>
 8013826:	4602      	mov	r2, r0
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	1ad3      	subs	r3, r2, r3
 801382c:	2b19      	cmp	r3, #25
 801382e:	d907      	bls.n	8013840 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013830:	6a3b      	ldr	r3, [r7, #32]
 8013832:	f043 0320 	orr.w	r3, r3, #32
 8013836:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8013838:	2301      	movs	r3, #1
 801383a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801383e:	e006      	b.n	801384e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	699b      	ldr	r3, [r3, #24]
 8013846:	f003 0320 	and.w	r3, r3, #32
 801384a:	2b20      	cmp	r3, #32
 801384c:	d1e9      	bne.n	8013822 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	699b      	ldr	r3, [r3, #24]
 8013854:	f003 0320 	and.w	r3, r3, #32
 8013858:	2b20      	cmp	r3, #32
 801385a:	d003      	beq.n	8013864 <I2C_IsErrorOccurred+0xe0>
 801385c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013860:	2b00      	cmp	r3, #0
 8013862:	d0aa      	beq.n	80137ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013868:	2b00      	cmp	r3, #0
 801386a:	d103      	bne.n	8013874 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2220      	movs	r2, #32
 8013872:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	f043 0304 	orr.w	r3, r3, #4
 801387a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801387c:	2301      	movs	r3, #1
 801387e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	699b      	ldr	r3, [r3, #24]
 8013888:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00b      	beq.n	80138ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8013894:	6a3b      	ldr	r3, [r7, #32]
 8013896:	f043 0301 	orr.w	r3, r3, #1
 801389a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80138a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138a6:	2301      	movs	r3, #1
 80138a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00b      	beq.n	80138ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	f043 0308 	orr.w	r3, r3, #8
 80138bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80138c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138c8:	2301      	movs	r3, #1
 80138ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d00b      	beq.n	80138f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	f043 0302 	orr.w	r3, r3, #2
 80138de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138ea:	2301      	movs	r3, #1
 80138ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80138f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d01c      	beq.n	8013932 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80138f8:	68f8      	ldr	r0, [r7, #12]
 80138fa:	f7ff fdaf 	bl	801345c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	6859      	ldr	r1, [r3, #4]
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	4b0d      	ldr	r3, [pc, #52]	@ (8013940 <I2C_IsErrorOccurred+0x1bc>)
 801390a:	400b      	ands	r3, r1
 801390c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013912:	6a3b      	ldr	r3, [r7, #32]
 8013914:	431a      	orrs	r2, r3
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2220      	movs	r2, #32
 801391e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2200      	movs	r2, #0
 8013926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2200      	movs	r2, #0
 801392e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8013932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013936:	4618      	mov	r0, r3
 8013938:	3728      	adds	r7, #40	@ 0x28
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	fe00e800 	.word	0xfe00e800

08013944 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013944:	b480      	push	{r7}
 8013946:	b087      	sub	sp, #28
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	607b      	str	r3, [r7, #4]
 801394e:	460b      	mov	r3, r1
 8013950:	817b      	strh	r3, [r7, #10]
 8013952:	4613      	mov	r3, r2
 8013954:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013956:	897b      	ldrh	r3, [r7, #10]
 8013958:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801395c:	7a7b      	ldrb	r3, [r7, #9]
 801395e:	041b      	lsls	r3, r3, #16
 8013960:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013964:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801396a:	6a3b      	ldr	r3, [r7, #32]
 801396c:	4313      	orrs	r3, r2
 801396e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013972:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	685a      	ldr	r2, [r3, #4]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	0d5b      	lsrs	r3, r3, #21
 801397e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8013982:	4b08      	ldr	r3, [pc, #32]	@ (80139a4 <I2C_TransferConfig+0x60>)
 8013984:	430b      	orrs	r3, r1
 8013986:	43db      	mvns	r3, r3
 8013988:	ea02 0103 	and.w	r1, r2, r3
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	697a      	ldr	r2, [r7, #20]
 8013992:	430a      	orrs	r2, r1
 8013994:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8013996:	bf00      	nop
 8013998:	371c      	adds	r7, #28
 801399a:	46bd      	mov	sp, r7
 801399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a0:	4770      	bx	lr
 80139a2:	bf00      	nop
 80139a4:	03ff63ff 	.word	0x03ff63ff

080139a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80139b8:	b2db      	uxtb	r3, r3
 80139ba:	2b20      	cmp	r3, #32
 80139bc:	d138      	bne.n	8013a30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d101      	bne.n	80139cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80139c8:	2302      	movs	r3, #2
 80139ca:	e032      	b.n	8013a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2201      	movs	r2, #1
 80139d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2224      	movs	r2, #36	@ 0x24
 80139d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f022 0201 	bic.w	r2, r2, #1
 80139ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80139fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	6819      	ldr	r1, [r3, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	430a      	orrs	r2, r1
 8013a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f042 0201 	orr.w	r2, r2, #1
 8013a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2220      	movs	r2, #32
 8013a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2200      	movs	r2, #0
 8013a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	e000      	b.n	8013a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013a30:	2302      	movs	r3, #2
  }
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	370c      	adds	r7, #12
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr

08013a3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013a3e:	b480      	push	{r7}
 8013a40:	b085      	sub	sp, #20
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
 8013a46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	2b20      	cmp	r3, #32
 8013a52:	d139      	bne.n	8013ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d101      	bne.n	8013a62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013a5e:	2302      	movs	r3, #2
 8013a60:	e033      	b.n	8013aca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2201      	movs	r2, #1
 8013a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2224      	movs	r2, #36	@ 0x24
 8013a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f022 0201 	bic.w	r2, r2, #1
 8013a80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8013a90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	021b      	lsls	r3, r3, #8
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	4313      	orrs	r3, r2
 8013a9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f042 0201 	orr.w	r2, r2, #1
 8013ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2220      	movs	r2, #32
 8013ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e000      	b.n	8013aca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8013ac8:	2302      	movs	r3, #2
  }
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3714      	adds	r7, #20
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad4:	4770      	bx	lr

08013ad6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013ad6:	b580      	push	{r7, lr}
 8013ad8:	b084      	sub	sp, #16
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e0c0      	b.n	8013c6a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d106      	bne.n	8013b02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7ec ff2f 	bl	8000960 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2203      	movs	r2, #3
 8013b06:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f002 fc80 	bl	8016414 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b14:	2300      	movs	r3, #0
 8013b16:	73fb      	strb	r3, [r7, #15]
 8013b18:	e03e      	b.n	8013b98 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013b1a:	7bfa      	ldrb	r2, [r7, #15]
 8013b1c:	6879      	ldr	r1, [r7, #4]
 8013b1e:	4613      	mov	r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	4413      	add	r3, r2
 8013b24:	00db      	lsls	r3, r3, #3
 8013b26:	440b      	add	r3, r1
 8013b28:	3311      	adds	r3, #17
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013b2e:	7bfa      	ldrb	r2, [r7, #15]
 8013b30:	6879      	ldr	r1, [r7, #4]
 8013b32:	4613      	mov	r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	4413      	add	r3, r2
 8013b38:	00db      	lsls	r3, r3, #3
 8013b3a:	440b      	add	r3, r1
 8013b3c:	3310      	adds	r3, #16
 8013b3e:	7bfa      	ldrb	r2, [r7, #15]
 8013b40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013b42:	7bfa      	ldrb	r2, [r7, #15]
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	4613      	mov	r3, r2
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	4413      	add	r3, r2
 8013b4c:	00db      	lsls	r3, r3, #3
 8013b4e:	440b      	add	r3, r1
 8013b50:	3313      	adds	r3, #19
 8013b52:	2200      	movs	r2, #0
 8013b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013b56:	7bfa      	ldrb	r2, [r7, #15]
 8013b58:	6879      	ldr	r1, [r7, #4]
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	4413      	add	r3, r2
 8013b60:	00db      	lsls	r3, r3, #3
 8013b62:	440b      	add	r3, r1
 8013b64:	3320      	adds	r3, #32
 8013b66:	2200      	movs	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013b6a:	7bfa      	ldrb	r2, [r7, #15]
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	440b      	add	r3, r1
 8013b78:	3324      	adds	r3, #36	@ 0x24
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013b7e:	7bfb      	ldrb	r3, [r7, #15]
 8013b80:	6879      	ldr	r1, [r7, #4]
 8013b82:	1c5a      	adds	r2, r3, #1
 8013b84:	4613      	mov	r3, r2
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	4413      	add	r3, r2
 8013b8a:	00db      	lsls	r3, r3, #3
 8013b8c:	440b      	add	r3, r1
 8013b8e:	2200      	movs	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b92:	7bfb      	ldrb	r3, [r7, #15]
 8013b94:	3301      	adds	r3, #1
 8013b96:	73fb      	strb	r3, [r7, #15]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	791b      	ldrb	r3, [r3, #4]
 8013b9c:	7bfa      	ldrb	r2, [r7, #15]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d3bb      	bcc.n	8013b1a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	73fb      	strb	r3, [r7, #15]
 8013ba6:	e044      	b.n	8013c32 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013ba8:	7bfa      	ldrb	r2, [r7, #15]
 8013baa:	6879      	ldr	r1, [r7, #4]
 8013bac:	4613      	mov	r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	4413      	add	r3, r2
 8013bb2:	00db      	lsls	r3, r3, #3
 8013bb4:	440b      	add	r3, r1
 8013bb6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8013bba:	2200      	movs	r2, #0
 8013bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013bbe:	7bfa      	ldrb	r2, [r7, #15]
 8013bc0:	6879      	ldr	r1, [r7, #4]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	4413      	add	r3, r2
 8013bc8:	00db      	lsls	r3, r3, #3
 8013bca:	440b      	add	r3, r1
 8013bcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013bd0:	7bfa      	ldrb	r2, [r7, #15]
 8013bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013bd4:	7bfa      	ldrb	r2, [r7, #15]
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	4613      	mov	r3, r2
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	4413      	add	r3, r2
 8013bde:	00db      	lsls	r3, r3, #3
 8013be0:	440b      	add	r3, r1
 8013be2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8013be6:	2200      	movs	r2, #0
 8013be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013bea:	7bfa      	ldrb	r2, [r7, #15]
 8013bec:	6879      	ldr	r1, [r7, #4]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4413      	add	r3, r2
 8013bf4:	00db      	lsls	r3, r3, #3
 8013bf6:	440b      	add	r3, r1
 8013bf8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013c00:	7bfa      	ldrb	r2, [r7, #15]
 8013c02:	6879      	ldr	r1, [r7, #4]
 8013c04:	4613      	mov	r3, r2
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	4413      	add	r3, r2
 8013c0a:	00db      	lsls	r3, r3, #3
 8013c0c:	440b      	add	r3, r1
 8013c0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013c12:	2200      	movs	r2, #0
 8013c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013c16:	7bfa      	ldrb	r2, [r7, #15]
 8013c18:	6879      	ldr	r1, [r7, #4]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	4413      	add	r3, r2
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	440b      	add	r3, r1
 8013c24:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8013c28:	2200      	movs	r2, #0
 8013c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013c2c:	7bfb      	ldrb	r3, [r7, #15]
 8013c2e:	3301      	adds	r3, #1
 8013c30:	73fb      	strb	r3, [r7, #15]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	791b      	ldrb	r3, [r3, #4]
 8013c36:	7bfa      	ldrb	r2, [r7, #15]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d3b5      	bcc.n	8013ba8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3304      	adds	r3, #4
 8013c44:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013c48:	f002 fbff 	bl	801644a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2201      	movs	r2, #1
 8013c56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	7a9b      	ldrb	r3, [r3, #10]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d102      	bne.n	8013c68 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 f805 	bl	8013c72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013c72:	b480      	push	{r7}
 8013c74:	b085      	sub	sp, #20
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2201      	movs	r2, #1
 8013c84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	f043 0301 	orr.w	r3, r3, #1
 8013c9c:	b29a      	uxth	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	f043 0302 	orr.w	r3, r3, #2
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr
	...

08013cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013ccc:	4b05      	ldr	r3, [pc, #20]	@ (8013ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a04      	ldr	r2, [pc, #16]	@ (8013ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8013cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013cd6:	6013      	str	r3, [r2, #0]
}
 8013cd8:	bf00      	nop
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	58000400 	.word	0x58000400

08013ce8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8013cec:	4b04      	ldr	r3, [pc, #16]	@ (8013d00 <HAL_PWREx_GetVoltageRange+0x18>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	58000400 	.word	0x58000400

08013d04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8013d04:	b480      	push	{r7}
 8013d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8013d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013d16:	d101      	bne.n	8013d1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e000      	b.n	8013d1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8013d1c:	2300      	movs	r3, #0
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <LL_RCC_HSE_Enable>:
{
 8013d28:	b480      	push	{r7}
 8013d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8013d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013d3a:	6013      	str	r3, [r2, #0]
}
 8013d3c:	bf00      	nop
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr

08013d46 <LL_RCC_HSE_Disable>:
{
 8013d46:	b480      	push	{r7}
 8013d48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8013d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013d58:	6013      	str	r3, [r2, #0]
}
 8013d5a:	bf00      	nop
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <LL_RCC_HSE_IsReady>:
{
 8013d64:	b480      	push	{r7}
 8013d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8013d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d76:	d101      	bne.n	8013d7c <LL_RCC_HSE_IsReady+0x18>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <LL_RCC_HSE_IsReady+0x1a>
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <LL_RCC_HSI_Enable>:
{
 8013d88:	b480      	push	{r7}
 8013d8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d9a:	6013      	str	r3, [r2, #0]
}
 8013d9c:	bf00      	nop
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr

08013da6 <LL_RCC_HSI_Disable>:
{
 8013da6:	b480      	push	{r7}
 8013da8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8013daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013db8:	6013      	str	r3, [r2, #0]
}
 8013dba:	bf00      	nop
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr

08013dc4 <LL_RCC_HSI_IsReady>:
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8013dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013dd6:	d101      	bne.n	8013ddc <LL_RCC_HSI_IsReady+0x18>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	e000      	b.n	8013dde <LL_RCC_HSI_IsReady+0x1a>
 8013ddc:	2300      	movs	r3, #0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8013df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	061b      	lsls	r3, r3, #24
 8013dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013e02:	4313      	orrs	r3, r2
 8013e04:	604b      	str	r3, [r1, #4]
}
 8013e06:	bf00      	nop
 8013e08:	370c      	adds	r7, #12
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr

08013e12 <LL_RCC_HSI48_Enable>:
{
 8013e12:	b480      	push	{r7}
 8013e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e22:	f043 0301 	orr.w	r3, r3, #1
 8013e26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013e2a:	bf00      	nop
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <LL_RCC_HSI48_Disable>:
{
 8013e34:	b480      	push	{r7}
 8013e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e44:	f023 0301 	bic.w	r3, r3, #1
 8013e48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013e4c:	bf00      	nop
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr

08013e56 <LL_RCC_HSI48_IsReady>:
{
 8013e56:	b480      	push	{r7}
 8013e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8013e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e62:	f003 0302 	and.w	r3, r3, #2
 8013e66:	2b02      	cmp	r3, #2
 8013e68:	d101      	bne.n	8013e6e <LL_RCC_HSI48_IsReady+0x18>
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e000      	b.n	8013e70 <LL_RCC_HSI48_IsReady+0x1a>
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr

08013e7a <LL_RCC_LSE_Enable>:
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e8a:	f043 0301 	orr.w	r3, r3, #1
 8013e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013e92:	bf00      	nop
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <LL_RCC_LSE_Disable>:
{
 8013e9c:	b480      	push	{r7}
 8013e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013eac:	f023 0301 	bic.w	r3, r3, #1
 8013eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013eb4:	bf00      	nop
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr

08013ebe <LL_RCC_LSE_EnableBypass>:
{
 8013ebe:	b480      	push	{r7}
 8013ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ece:	f043 0304 	orr.w	r3, r3, #4
 8013ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013ed6:	bf00      	nop
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ede:	4770      	bx	lr

08013ee0 <LL_RCC_LSE_DisableBypass>:
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ef0:	f023 0304 	bic.w	r3, r3, #4
 8013ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013ef8:	bf00      	nop
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8013f02:	b480      	push	{r7}
 8013f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8013f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f0e:	f003 0302 	and.w	r3, r3, #2
 8013f12:	2b02      	cmp	r3, #2
 8013f14:	d101      	bne.n	8013f1a <LL_RCC_LSE_IsReady+0x18>
 8013f16:	2301      	movs	r3, #1
 8013f18:	e000      	b.n	8013f1c <LL_RCC_LSE_IsReady+0x1a>
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr

08013f26 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8013f26:	b480      	push	{r7}
 8013f28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f36:	f043 0301 	orr.w	r3, r3, #1
 8013f3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013f3e:	bf00      	nop
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f58:	f023 0301 	bic.w	r3, r3, #1
 8013f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013f60:	bf00      	nop
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr

08013f6a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8013f6a:	b480      	push	{r7}
 8013f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8013f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f76:	f003 0302 	and.w	r3, r3, #2
 8013f7a:	2b02      	cmp	r3, #2
 8013f7c:	d101      	bne.n	8013f82 <LL_RCC_LSI1_IsReady+0x18>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	e000      	b.n	8013f84 <LL_RCC_LSI1_IsReady+0x1a>
 8013f82:	2300      	movs	r3, #0
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f9e:	f043 0304 	orr.w	r3, r3, #4
 8013fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013fa6:	bf00      	nop
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013fc0:	f023 0304 	bic.w	r3, r3, #4
 8013fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013fc8:	bf00      	nop
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr

08013fd2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8013fd2:	b480      	push	{r7}
 8013fd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8013fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fde:	f003 0308 	and.w	r3, r3, #8
 8013fe2:	2b08      	cmp	r3, #8
 8013fe4:	d101      	bne.n	8013fea <LL_RCC_LSI2_IsReady+0x18>
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e000      	b.n	8013fec <LL_RCC_LSI2_IsReady+0x1a>
 8013fea:	2300      	movs	r3, #0
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr

08013ff6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8013ff6:	b480      	push	{r7}
 8013ff8:	b083      	sub	sp, #12
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8013ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	021b      	lsls	r3, r3, #8
 801400e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014012:	4313      	orrs	r3, r2
 8014014:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8014024:	b480      	push	{r7}
 8014026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8014028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014032:	f043 0301 	orr.w	r3, r3, #1
 8014036:	6013      	str	r3, [r2, #0]
}
 8014038:	bf00      	nop
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr

08014042 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8014042:	b480      	push	{r7}
 8014044:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8014046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014050:	f023 0301 	bic.w	r3, r3, #1
 8014054:	6013      	str	r3, [r2, #0]
}
 8014056:	bf00      	nop
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr

08014060 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8014060:	b480      	push	{r7}
 8014062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8014064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f003 0302 	and.w	r3, r3, #2
 801406e:	2b02      	cmp	r3, #2
 8014070:	d101      	bne.n	8014076 <LL_RCC_MSI_IsReady+0x16>
 8014072:	2301      	movs	r3, #1
 8014074:	e000      	b.n	8014078 <LL_RCC_MSI_IsReady+0x18>
 8014076:	2300      	movs	r3, #0
}
 8014078:	4618      	mov	r0, r3
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8014082:	b480      	push	{r7}
 8014084:	b083      	sub	sp, #12
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801408a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	4313      	orrs	r3, r2
 801409c:	600b      	str	r3, [r1, #0]
}
 801409e:	bf00      	nop
 80140a0:	370c      	adds	r7, #12
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr

080140aa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80140aa:	b480      	push	{r7}
 80140ac:	b083      	sub	sp, #12
 80140ae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80140b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80140ba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2bb0      	cmp	r3, #176	@ 0xb0
 80140c0:	d901      	bls.n	80140c6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80140c2:	23b0      	movs	r3, #176	@ 0xb0
 80140c4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80140c6:	687b      	ldr	r3, [r7, #4]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	370c      	adds	r7, #12
 80140cc:	46bd      	mov	sp, r7
 80140ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d2:	4770      	bx	lr

080140d4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80140dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	021b      	lsls	r3, r3, #8
 80140ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80140ee:	4313      	orrs	r3, r2
 80140f0:	604b      	str	r3, [r1, #4]
}
 80140f2:	bf00      	nop
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80140fe:	b480      	push	{r7}
 8014100:	b083      	sub	sp, #12
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8014106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801410a:	689b      	ldr	r3, [r3, #8]
 801410c:	f023 0203 	bic.w	r2, r3, #3
 8014110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	4313      	orrs	r3, r2
 8014118:	608b      	str	r3, [r1, #8]
}
 801411a:	bf00      	nop
 801411c:	370c      	adds	r7, #12
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr

08014126 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8014126:	b480      	push	{r7}
 8014128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801412a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801412e:	689b      	ldr	r3, [r3, #8]
 8014130:	f003 030c 	and.w	r3, r3, #12
}
 8014134:	4618      	mov	r0, r3
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801413e:	b480      	push	{r7}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8014146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014150:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	4313      	orrs	r3, r2
 8014158:	608b      	str	r3, [r1, #8]
}
 801415a:	bf00      	nop
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8014166:	b480      	push	{r7}
 8014168:	b083      	sub	sp, #12
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801416e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014172:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014176:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801417a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	4313      	orrs	r3, r2
 8014182:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8014186:	bf00      	nop
 8014188:	370c      	adds	r7, #12
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr

08014192 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8014192:	b480      	push	{r7}
 8014194:	b083      	sub	sp, #12
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801419a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801419e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80141a2:	f023 020f 	bic.w	r2, r3, #15
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	091b      	lsrs	r3, r3, #4
 80141aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80141ae:	4313      	orrs	r3, r2
 80141b0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80141b4:	bf00      	nop
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80141c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80141d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	4313      	orrs	r3, r2
 80141da:	608b      	str	r3, [r1, #8]
}
 80141dc:	bf00      	nop
 80141de:	370c      	adds	r7, #12
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr

080141e8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80141f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141f4:	689b      	ldr	r3, [r3, #8]
 80141f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80141fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4313      	orrs	r3, r2
 8014202:	608b      	str	r3, [r1, #8]
}
 8014204:	bf00      	nop
 8014206:	370c      	adds	r7, #12
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr

08014210 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8014210:	b480      	push	{r7}
 8014212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8014214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014218:	689b      	ldr	r3, [r3, #8]
 801421a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801421e:	4618      	mov	r0, r3
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8014228:	b480      	push	{r7}
 801422a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801422c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014230:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014234:	011b      	lsls	r3, r3, #4
 8014236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801423a:	4618      	mov	r0, r3
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8014244:	b480      	push	{r7}
 8014246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8014248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801424c:	689b      	ldr	r3, [r3, #8]
 801424e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8014252:	4618      	mov	r0, r3
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801425c:	b480      	push	{r7}
 801425e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8014260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 801426a:	4618      	mov	r0, r3
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr

08014274 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8014274:	b480      	push	{r7}
 8014276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8014278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014286:	6013      	str	r3, [r2, #0]
}
 8014288:	bf00      	nop
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr

08014292 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8014292:	b480      	push	{r7}
 8014294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8014296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80142a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80142a4:	6013      	str	r3, [r2, #0]
}
 80142a6:	bf00      	nop
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80142b0:	b480      	push	{r7}
 80142b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80142b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80142c2:	d101      	bne.n	80142c8 <LL_RCC_PLL_IsReady+0x18>
 80142c4:	2301      	movs	r3, #1
 80142c6:	e000      	b.n	80142ca <LL_RCC_PLL_IsReady+0x1a>
 80142c8:	2300      	movs	r3, #0
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr

080142d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80142d4:	b480      	push	{r7}
 80142d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80142d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	0a1b      	lsrs	r3, r3, #8
 80142e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	46bd      	mov	sp, r7
 80142e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ec:	4770      	bx	lr

080142ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80142ee:	b480      	push	{r7}
 80142f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80142f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr

08014306 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8014306:	b480      	push	{r7}
 8014308:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801430a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8014314:	4618      	mov	r0, r3
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801431e:	b480      	push	{r7}
 8014320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8014322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	f003 0303 	and.w	r3, r3, #3
}
 801432c:	4618      	mov	r0, r3
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr

08014336 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8014336:	b480      	push	{r7}
 8014338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801433a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801433e:	689b      	ldr	r3, [r3, #8]
 8014340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014348:	d101      	bne.n	801434e <LL_RCC_IsActiveFlag_HPRE+0x18>
 801434a:	2301      	movs	r3, #1
 801434c:	e000      	b.n	8014350 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801434e:	2300      	movs	r3, #0
}
 8014350:	4618      	mov	r0, r3
 8014352:	46bd      	mov	sp, r7
 8014354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014358:	4770      	bx	lr

0801435a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801435a:	b480      	push	{r7}
 801435c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801435e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014362:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801436a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801436e:	d101      	bne.n	8014374 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8014370:	2301      	movs	r3, #1
 8014372:	e000      	b.n	8014376 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8014380:	b480      	push	{r7}
 8014382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8014384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014388:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014394:	d101      	bne.n	801439a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8014396:	2301      	movs	r3, #1
 8014398:	e000      	b.n	801439c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801439a:	2300      	movs	r3, #0
}
 801439c:	4618      	mov	r0, r3
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80143a6:	b480      	push	{r7}
 80143a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80143aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143ae:	689b      	ldr	r3, [r3, #8]
 80143b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80143b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80143b8:	d101      	bne.n	80143be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80143ba:	2301      	movs	r3, #1
 80143bc:	e000      	b.n	80143c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80143be:	2300      	movs	r3, #0
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr

080143ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80143ca:	b480      	push	{r7}
 80143cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80143ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143d2:	689b      	ldr	r3, [r3, #8]
 80143d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80143d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80143dc:	d101      	bne.n	80143e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80143de:	2301      	movs	r3, #1
 80143e0:	e000      	b.n	80143e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	46bd      	mov	sp, r7
 80143e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ec:	4770      	bx	lr
	...

080143f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80143f0:	b590      	push	{r4, r7, lr}
 80143f2:	b08d      	sub	sp, #52	@ 0x34
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d101      	bne.n	8014402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80143fe:	2301      	movs	r3, #1
 8014400:	e363      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f003 0320 	and.w	r3, r3, #32
 801440a:	2b00      	cmp	r3, #0
 801440c:	f000 808d 	beq.w	801452a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014410:	f7ff fe89 	bl	8014126 <LL_RCC_GetSysClkSource>
 8014414:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014416:	f7ff ff82 	bl	801431e <LL_RCC_PLL_GetMainSource>
 801441a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441e:	2b00      	cmp	r3, #0
 8014420:	d005      	beq.n	801442e <HAL_RCC_OscConfig+0x3e>
 8014422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014424:	2b0c      	cmp	r3, #12
 8014426:	d147      	bne.n	80144b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8014428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801442a:	2b01      	cmp	r3, #1
 801442c:	d144      	bne.n	80144b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	69db      	ldr	r3, [r3, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d101      	bne.n	801443a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8014436:	2301      	movs	r3, #1
 8014438:	e347      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801443e:	f7ff fe34 	bl	80140aa <LL_RCC_MSI_GetRange>
 8014442:	4603      	mov	r3, r0
 8014444:	429c      	cmp	r4, r3
 8014446:	d914      	bls.n	8014472 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801444c:	4618      	mov	r0, r3
 801444e:	f000 fd2f 	bl	8014eb0 <RCC_SetFlashLatencyFromMSIRange>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	e336      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014460:	4618      	mov	r0, r3
 8014462:	f7ff fe0e 	bl	8014082 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6a1b      	ldr	r3, [r3, #32]
 801446a:	4618      	mov	r0, r3
 801446c:	f7ff fe32 	bl	80140d4 <LL_RCC_MSI_SetCalibTrimming>
 8014470:	e013      	b.n	801449a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014476:	4618      	mov	r0, r3
 8014478:	f7ff fe03 	bl	8014082 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6a1b      	ldr	r3, [r3, #32]
 8014480:	4618      	mov	r0, r3
 8014482:	f7ff fe27 	bl	80140d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801448a:	4618      	mov	r0, r3
 801448c:	f000 fd10 	bl	8014eb0 <RCC_SetFlashLatencyFromMSIRange>
 8014490:	4603      	mov	r3, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d001      	beq.n	801449a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e317      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801449a:	f000 fcc9 	bl	8014e30 <HAL_RCC_GetHCLKFreq>
 801449e:	4603      	mov	r3, r0
 80144a0:	4aa4      	ldr	r2, [pc, #656]	@ (8014734 <HAL_RCC_OscConfig+0x344>)
 80144a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80144a4:	4ba4      	ldr	r3, [pc, #656]	@ (8014738 <HAL_RCC_OscConfig+0x348>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe f85d 	bl	8012568 <HAL_InitTick>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d039      	beq.n	8014528 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80144b4:	2301      	movs	r3, #1
 80144b6:	e308      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	69db      	ldr	r3, [r3, #28]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d01e      	beq.n	80144fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80144c0:	f7ff fdb0 	bl	8014024 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80144c4:	f7fe f89e 	bl	8012604 <HAL_GetTick>
 80144c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80144ca:	e008      	b.n	80144de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80144cc:	f7fe f89a 	bl	8012604 <HAL_GetTick>
 80144d0:	4602      	mov	r2, r0
 80144d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	2b02      	cmp	r3, #2
 80144d8:	d901      	bls.n	80144de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80144da:	2303      	movs	r3, #3
 80144dc:	e2f5      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80144de:	f7ff fdbf 	bl	8014060 <LL_RCC_MSI_IsReady>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d0f1      	beq.n	80144cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7ff fdc8 	bl	8014082 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6a1b      	ldr	r3, [r3, #32]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7ff fdec 	bl	80140d4 <LL_RCC_MSI_SetCalibTrimming>
 80144fc:	e015      	b.n	801452a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80144fe:	f7ff fda0 	bl	8014042 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014502:	f7fe f87f 	bl	8012604 <HAL_GetTick>
 8014506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8014508:	e008      	b.n	801451c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801450a:	f7fe f87b 	bl	8012604 <HAL_GetTick>
 801450e:	4602      	mov	r2, r0
 8014510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014512:	1ad3      	subs	r3, r2, r3
 8014514:	2b02      	cmp	r3, #2
 8014516:	d901      	bls.n	801451c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8014518:	2303      	movs	r3, #3
 801451a:	e2d6      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 801451c:	f7ff fda0 	bl	8014060 <LL_RCC_MSI_IsReady>
 8014520:	4603      	mov	r3, r0
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1f1      	bne.n	801450a <HAL_RCC_OscConfig+0x11a>
 8014526:	e000      	b.n	801452a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8014528:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	f003 0301 	and.w	r3, r3, #1
 8014532:	2b00      	cmp	r3, #0
 8014534:	d047      	beq.n	80145c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014536:	f7ff fdf6 	bl	8014126 <LL_RCC_GetSysClkSource>
 801453a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801453c:	f7ff feef 	bl	801431e <LL_RCC_PLL_GetMainSource>
 8014540:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8014542:	6a3b      	ldr	r3, [r7, #32]
 8014544:	2b08      	cmp	r3, #8
 8014546:	d005      	beq.n	8014554 <HAL_RCC_OscConfig+0x164>
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	2b0c      	cmp	r3, #12
 801454c:	d108      	bne.n	8014560 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	2b03      	cmp	r3, #3
 8014552:	d105      	bne.n	8014560 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d134      	bne.n	80145c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 801455c:	2301      	movs	r3, #1
 801455e:	e2b4      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014568:	d102      	bne.n	8014570 <HAL_RCC_OscConfig+0x180>
 801456a:	f7ff fbdd 	bl	8013d28 <LL_RCC_HSE_Enable>
 801456e:	e001      	b.n	8014574 <HAL_RCC_OscConfig+0x184>
 8014570:	f7ff fbe9 	bl	8013d46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d012      	beq.n	80145a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801457c:	f7fe f842 	bl	8012604 <HAL_GetTick>
 8014580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8014582:	e008      	b.n	8014596 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014584:	f7fe f83e 	bl	8012604 <HAL_GetTick>
 8014588:	4602      	mov	r2, r0
 801458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	2b64      	cmp	r3, #100	@ 0x64
 8014590:	d901      	bls.n	8014596 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8014592:	2303      	movs	r3, #3
 8014594:	e299      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8014596:	f7ff fbe5 	bl	8013d64 <LL_RCC_HSE_IsReady>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d0f1      	beq.n	8014584 <HAL_RCC_OscConfig+0x194>
 80145a0:	e011      	b.n	80145c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145a2:	f7fe f82f 	bl	8012604 <HAL_GetTick>
 80145a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80145a8:	e008      	b.n	80145bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80145aa:	f7fe f82b 	bl	8012604 <HAL_GetTick>
 80145ae:	4602      	mov	r2, r0
 80145b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b2:	1ad3      	subs	r3, r2, r3
 80145b4:	2b64      	cmp	r3, #100	@ 0x64
 80145b6:	d901      	bls.n	80145bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80145b8:	2303      	movs	r3, #3
 80145ba:	e286      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80145bc:	f7ff fbd2 	bl	8013d64 <LL_RCC_HSE_IsReady>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1f1      	bne.n	80145aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	f003 0302 	and.w	r3, r3, #2
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d04c      	beq.n	801466c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80145d2:	f7ff fda8 	bl	8014126 <LL_RCC_GetSysClkSource>
 80145d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80145d8:	f7ff fea1 	bl	801431e <LL_RCC_PLL_GetMainSource>
 80145dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80145de:	69bb      	ldr	r3, [r7, #24]
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	d005      	beq.n	80145f0 <HAL_RCC_OscConfig+0x200>
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	2b0c      	cmp	r3, #12
 80145e8:	d10e      	bne.n	8014608 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	2b02      	cmp	r3, #2
 80145ee:	d10b      	bne.n	8014608 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	68db      	ldr	r3, [r3, #12]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d101      	bne.n	80145fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80145f8:	2301      	movs	r3, #1
 80145fa:	e266      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	691b      	ldr	r3, [r3, #16]
 8014600:	4618      	mov	r0, r3
 8014602:	f7ff fbf1 	bl	8013de8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8014606:	e031      	b.n	801466c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d019      	beq.n	8014644 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014610:	f7ff fbba 	bl	8013d88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014614:	f7fd fff6 	bl	8012604 <HAL_GetTick>
 8014618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801461a:	e008      	b.n	801462e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801461c:	f7fd fff2 	bl	8012604 <HAL_GetTick>
 8014620:	4602      	mov	r2, r0
 8014622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	2b02      	cmp	r3, #2
 8014628:	d901      	bls.n	801462e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801462a:	2303      	movs	r3, #3
 801462c:	e24d      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801462e:	f7ff fbc9 	bl	8013dc4 <LL_RCC_HSI_IsReady>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d0f1      	beq.n	801461c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	691b      	ldr	r3, [r3, #16]
 801463c:	4618      	mov	r0, r3
 801463e:	f7ff fbd3 	bl	8013de8 <LL_RCC_HSI_SetCalibTrimming>
 8014642:	e013      	b.n	801466c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014644:	f7ff fbaf 	bl	8013da6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014648:	f7fd ffdc 	bl	8012604 <HAL_GetTick>
 801464c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801464e:	e008      	b.n	8014662 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014650:	f7fd ffd8 	bl	8012604 <HAL_GetTick>
 8014654:	4602      	mov	r2, r0
 8014656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	2b02      	cmp	r3, #2
 801465c:	d901      	bls.n	8014662 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801465e:	2303      	movs	r3, #3
 8014660:	e233      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8014662:	f7ff fbaf 	bl	8013dc4 <LL_RCC_HSI_IsReady>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	d1f1      	bne.n	8014650 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f003 0308 	and.w	r3, r3, #8
 8014674:	2b00      	cmp	r3, #0
 8014676:	d106      	bne.n	8014686 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 80a3 	beq.w	80147cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	695b      	ldr	r3, [r3, #20]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d076      	beq.n	801477c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f003 0310 	and.w	r3, r3, #16
 8014696:	2b00      	cmp	r3, #0
 8014698:	d046      	beq.n	8014728 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801469a:	f7ff fc66 	bl	8013f6a <LL_RCC_LSI1_IsReady>
 801469e:	4603      	mov	r3, r0
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d113      	bne.n	80146cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80146a4:	f7ff fc3f 	bl	8013f26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80146a8:	f7fd ffac 	bl	8012604 <HAL_GetTick>
 80146ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80146ae:	e008      	b.n	80146c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80146b0:	f7fd ffa8 	bl	8012604 <HAL_GetTick>
 80146b4:	4602      	mov	r2, r0
 80146b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d901      	bls.n	80146c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80146be:	2303      	movs	r3, #3
 80146c0:	e203      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80146c2:	f7ff fc52 	bl	8013f6a <LL_RCC_LSI1_IsReady>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d0f1      	beq.n	80146b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80146cc:	f7ff fc5f 	bl	8013f8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146d0:	f7fd ff98 	bl	8012604 <HAL_GetTick>
 80146d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80146d6:	e008      	b.n	80146ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80146d8:	f7fd ff94 	bl	8012604 <HAL_GetTick>
 80146dc:	4602      	mov	r2, r0
 80146de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	2b03      	cmp	r3, #3
 80146e4:	d901      	bls.n	80146ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80146e6:	2303      	movs	r3, #3
 80146e8:	e1ef      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80146ea:	f7ff fc72 	bl	8013fd2 <LL_RCC_LSI2_IsReady>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d0f1      	beq.n	80146d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	699b      	ldr	r3, [r3, #24]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7ff fc7c 	bl	8013ff6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80146fe:	f7ff fc23 	bl	8013f48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014702:	f7fd ff7f 	bl	8012604 <HAL_GetTick>
 8014706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014708:	e008      	b.n	801471c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801470a:	f7fd ff7b 	bl	8012604 <HAL_GetTick>
 801470e:	4602      	mov	r2, r0
 8014710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	2b02      	cmp	r3, #2
 8014716:	d901      	bls.n	801471c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8014718:	2303      	movs	r3, #3
 801471a:	e1d6      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801471c:	f7ff fc25 	bl	8013f6a <LL_RCC_LSI1_IsReady>
 8014720:	4603      	mov	r3, r0
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1f1      	bne.n	801470a <HAL_RCC_OscConfig+0x31a>
 8014726:	e051      	b.n	80147cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8014728:	f7ff fbfd 	bl	8013f26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801472c:	f7fd ff6a 	bl	8012604 <HAL_GetTick>
 8014730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014732:	e00c      	b.n	801474e <HAL_RCC_OscConfig+0x35e>
 8014734:	20000008 	.word	0x20000008
 8014738:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801473c:	f7fd ff62 	bl	8012604 <HAL_GetTick>
 8014740:	4602      	mov	r2, r0
 8014742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014744:	1ad3      	subs	r3, r2, r3
 8014746:	2b02      	cmp	r3, #2
 8014748:	d901      	bls.n	801474e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801474a:	2303      	movs	r3, #3
 801474c:	e1bd      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801474e:	f7ff fc0c 	bl	8013f6a <LL_RCC_LSI1_IsReady>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d0f1      	beq.n	801473c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8014758:	f7ff fc2a 	bl	8013fb0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801475c:	e008      	b.n	8014770 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801475e:	f7fd ff51 	bl	8012604 <HAL_GetTick>
 8014762:	4602      	mov	r2, r0
 8014764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014766:	1ad3      	subs	r3, r2, r3
 8014768:	2b03      	cmp	r3, #3
 801476a:	d901      	bls.n	8014770 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801476c:	2303      	movs	r3, #3
 801476e:	e1ac      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014770:	f7ff fc2f 	bl	8013fd2 <LL_RCC_LSI2_IsReady>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d1f1      	bne.n	801475e <HAL_RCC_OscConfig+0x36e>
 801477a:	e027      	b.n	80147cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801477c:	f7ff fc18 	bl	8013fb0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014780:	f7fd ff40 	bl	8012604 <HAL_GetTick>
 8014784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8014786:	e008      	b.n	801479a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014788:	f7fd ff3c 	bl	8012604 <HAL_GetTick>
 801478c:	4602      	mov	r2, r0
 801478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	2b03      	cmp	r3, #3
 8014794:	d901      	bls.n	801479a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8014796:	2303      	movs	r3, #3
 8014798:	e197      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801479a:	f7ff fc1a 	bl	8013fd2 <LL_RCC_LSI2_IsReady>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d1f1      	bne.n	8014788 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80147a4:	f7ff fbd0 	bl	8013f48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147a8:	f7fd ff2c 	bl	8012604 <HAL_GetTick>
 80147ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80147ae:	e008      	b.n	80147c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80147b0:	f7fd ff28 	bl	8012604 <HAL_GetTick>
 80147b4:	4602      	mov	r2, r0
 80147b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147b8:	1ad3      	subs	r3, r2, r3
 80147ba:	2b02      	cmp	r3, #2
 80147bc:	d901      	bls.n	80147c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80147be:	2303      	movs	r3, #3
 80147c0:	e183      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80147c2:	f7ff fbd2 	bl	8013f6a <LL_RCC_LSI1_IsReady>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d1f1      	bne.n	80147b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f003 0304 	and.w	r3, r3, #4
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d05b      	beq.n	8014890 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80147d8:	4ba7      	ldr	r3, [pc, #668]	@ (8014a78 <HAL_RCC_OscConfig+0x688>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d114      	bne.n	801480e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80147e4:	f7ff fa70 	bl	8013cc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80147e8:	f7fd ff0c 	bl	8012604 <HAL_GetTick>
 80147ec:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80147ee:	e008      	b.n	8014802 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80147f0:	f7fd ff08 	bl	8012604 <HAL_GetTick>
 80147f4:	4602      	mov	r2, r0
 80147f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	2b02      	cmp	r3, #2
 80147fc:	d901      	bls.n	8014802 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80147fe:	2303      	movs	r3, #3
 8014800:	e163      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014802:	4b9d      	ldr	r3, [pc, #628]	@ (8014a78 <HAL_RCC_OscConfig+0x688>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801480a:	2b00      	cmp	r3, #0
 801480c:	d0f0      	beq.n	80147f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d102      	bne.n	801481c <HAL_RCC_OscConfig+0x42c>
 8014816:	f7ff fb30 	bl	8013e7a <LL_RCC_LSE_Enable>
 801481a:	e00c      	b.n	8014836 <HAL_RCC_OscConfig+0x446>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	689b      	ldr	r3, [r3, #8]
 8014820:	2b05      	cmp	r3, #5
 8014822:	d104      	bne.n	801482e <HAL_RCC_OscConfig+0x43e>
 8014824:	f7ff fb4b 	bl	8013ebe <LL_RCC_LSE_EnableBypass>
 8014828:	f7ff fb27 	bl	8013e7a <LL_RCC_LSE_Enable>
 801482c:	e003      	b.n	8014836 <HAL_RCC_OscConfig+0x446>
 801482e:	f7ff fb35 	bl	8013e9c <LL_RCC_LSE_Disable>
 8014832:	f7ff fb55 	bl	8013ee0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	689b      	ldr	r3, [r3, #8]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d014      	beq.n	8014868 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801483e:	f7fd fee1 	bl	8012604 <HAL_GetTick>
 8014842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8014844:	e00a      	b.n	801485c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014846:	f7fd fedd 	bl	8012604 <HAL_GetTick>
 801484a:	4602      	mov	r2, r0
 801484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014854:	4293      	cmp	r3, r2
 8014856:	d901      	bls.n	801485c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8014858:	2303      	movs	r3, #3
 801485a:	e136      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801485c:	f7ff fb51 	bl	8013f02 <LL_RCC_LSE_IsReady>
 8014860:	4603      	mov	r3, r0
 8014862:	2b00      	cmp	r3, #0
 8014864:	d0ef      	beq.n	8014846 <HAL_RCC_OscConfig+0x456>
 8014866:	e013      	b.n	8014890 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014868:	f7fd fecc 	bl	8012604 <HAL_GetTick>
 801486c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801486e:	e00a      	b.n	8014886 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014870:	f7fd fec8 	bl	8012604 <HAL_GetTick>
 8014874:	4602      	mov	r2, r0
 8014876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801487e:	4293      	cmp	r3, r2
 8014880:	d901      	bls.n	8014886 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8014882:	2303      	movs	r3, #3
 8014884:	e121      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8014886:	f7ff fb3c 	bl	8013f02 <LL_RCC_LSE_IsReady>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d1ef      	bne.n	8014870 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014898:	2b00      	cmp	r3, #0
 801489a:	d02c      	beq.n	80148f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d014      	beq.n	80148ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80148a4:	f7ff fab5 	bl	8013e12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80148a8:	f7fd feac 	bl	8012604 <HAL_GetTick>
 80148ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80148ae:	e008      	b.n	80148c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148b0:	f7fd fea8 	bl	8012604 <HAL_GetTick>
 80148b4:	4602      	mov	r2, r0
 80148b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d901      	bls.n	80148c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80148be:	2303      	movs	r3, #3
 80148c0:	e103      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80148c2:	f7ff fac8 	bl	8013e56 <LL_RCC_HSI48_IsReady>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d0f1      	beq.n	80148b0 <HAL_RCC_OscConfig+0x4c0>
 80148cc:	e013      	b.n	80148f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80148ce:	f7ff fab1 	bl	8013e34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80148d2:	f7fd fe97 	bl	8012604 <HAL_GetTick>
 80148d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80148d8:	e008      	b.n	80148ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148da:	f7fd fe93 	bl	8012604 <HAL_GetTick>
 80148de:	4602      	mov	r2, r0
 80148e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	2b02      	cmp	r3, #2
 80148e6:	d901      	bls.n	80148ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80148e8:	2303      	movs	r3, #3
 80148ea:	e0ee      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80148ec:	f7ff fab3 	bl	8013e56 <LL_RCC_HSI48_IsReady>
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d1f1      	bne.n	80148da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	f000 80e4 	beq.w	8014ac8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014900:	f7ff fc11 	bl	8014126 <LL_RCC_GetSysClkSource>
 8014904:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8014906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014912:	2b02      	cmp	r3, #2
 8014914:	f040 80b4 	bne.w	8014a80 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f003 0203 	and.w	r2, r3, #3
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014922:	429a      	cmp	r2, r3
 8014924:	d123      	bne.n	801496e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014930:	429a      	cmp	r2, r3
 8014932:	d11c      	bne.n	801496e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	0a1b      	lsrs	r3, r3, #8
 8014938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014940:	429a      	cmp	r2, r3
 8014942:	d114      	bne.n	801496e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801494e:	429a      	cmp	r2, r3
 8014950:	d10d      	bne.n	801496e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801495c:	429a      	cmp	r2, r3
 801495e:	d106      	bne.n	801496e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801496a:	429a      	cmp	r2, r3
 801496c:	d05d      	beq.n	8014a2a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	2b0c      	cmp	r3, #12
 8014972:	d058      	beq.n	8014a26 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8014982:	2301      	movs	r3, #1
 8014984:	e0a1      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014986:	f7ff fc84 	bl	8014292 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801498a:	f7fd fe3b 	bl	8012604 <HAL_GetTick>
 801498e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014990:	e008      	b.n	80149a4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014992:	f7fd fe37 	bl	8012604 <HAL_GetTick>
 8014996:	4602      	mov	r2, r0
 8014998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801499a:	1ad3      	subs	r3, r2, r3
 801499c:	2b02      	cmp	r3, #2
 801499e:	d901      	bls.n	80149a4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80149a0:	2303      	movs	r3, #3
 80149a2:	e092      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80149a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1ef      	bne.n	8014992 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80149b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149b6:	68da      	ldr	r2, [r3, #12]
 80149b8:	4b30      	ldr	r3, [pc, #192]	@ (8014a7c <HAL_RCC_OscConfig+0x68c>)
 80149ba:	4013      	ands	r3, r2
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80149c4:	4311      	orrs	r1, r2
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80149ca:	0212      	lsls	r2, r2, #8
 80149cc:	4311      	orrs	r1, r2
 80149ce:	687a      	ldr	r2, [r7, #4]
 80149d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80149d2:	4311      	orrs	r1, r2
 80149d4:	687a      	ldr	r2, [r7, #4]
 80149d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80149d8:	4311      	orrs	r1, r2
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80149de:	430a      	orrs	r2, r1
 80149e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80149e4:	4313      	orrs	r3, r2
 80149e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80149e8:	f7ff fc44 	bl	8014274 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80149ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80149f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80149fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80149fc:	f7fd fe02 	bl	8012604 <HAL_GetTick>
 8014a00:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a02:	e008      	b.n	8014a16 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a04:	f7fd fdfe 	bl	8012604 <HAL_GetTick>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d901      	bls.n	8014a16 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8014a12:	2303      	movs	r3, #3
 8014a14:	e059      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d0ef      	beq.n	8014a04 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014a24:	e050      	b.n	8014ac8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014a26:	2301      	movs	r3, #1
 8014a28:	e04f      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d147      	bne.n	8014ac8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014a38:	f7ff fc1c 	bl	8014274 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014a4c:	f7fd fdda 	bl	8012604 <HAL_GetTick>
 8014a50:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a52:	e008      	b.n	8014a66 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a54:	f7fd fdd6 	bl	8012604 <HAL_GetTick>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	2b02      	cmp	r3, #2
 8014a60:	d901      	bls.n	8014a66 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8014a62:	2303      	movs	r3, #3
 8014a64:	e031      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d0ef      	beq.n	8014a54 <HAL_RCC_OscConfig+0x664>
 8014a74:	e028      	b.n	8014ac8 <HAL_RCC_OscConfig+0x6d8>
 8014a76:	bf00      	nop
 8014a78:	58000400 	.word	0x58000400
 8014a7c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	2b0c      	cmp	r3, #12
 8014a84:	d01e      	beq.n	8014ac4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014a86:	f7ff fc04 	bl	8014292 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a8a:	f7fd fdbb 	bl	8012604 <HAL_GetTick>
 8014a8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014a90:	e008      	b.n	8014aa4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a92:	f7fd fdb7 	bl	8012604 <HAL_GetTick>
 8014a96:	4602      	mov	r2, r0
 8014a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	2b02      	cmp	r3, #2
 8014a9e:	d901      	bls.n	8014aa4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8014aa0:	2303      	movs	r3, #3
 8014aa2:	e012      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d1ef      	bne.n	8014a92 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8014ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ab6:	68da      	ldr	r2, [r3, #12]
 8014ab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014abc:	4b05      	ldr	r3, [pc, #20]	@ (8014ad4 <HAL_RCC_OscConfig+0x6e4>)
 8014abe:	4013      	ands	r3, r2
 8014ac0:	60cb      	str	r3, [r1, #12]
 8014ac2:	e001      	b.n	8014ac8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	e000      	b.n	8014aca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8014ac8:	2300      	movs	r3, #0
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3734      	adds	r7, #52	@ 0x34
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd90      	pop	{r4, r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	eefefffc 	.word	0xeefefffc

08014ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e12d      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014aec:	4b98      	ldr	r3, [pc, #608]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f003 0307 	and.w	r3, r3, #7
 8014af4:	683a      	ldr	r2, [r7, #0]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d91b      	bls.n	8014b32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014afa:	4b95      	ldr	r3, [pc, #596]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f023 0207 	bic.w	r2, r3, #7
 8014b02:	4993      	ldr	r1, [pc, #588]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	4313      	orrs	r3, r2
 8014b08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b0a:	f7fd fd7b 	bl	8012604 <HAL_GetTick>
 8014b0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b10:	e008      	b.n	8014b24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014b12:	f7fd fd77 	bl	8012604 <HAL_GetTick>
 8014b16:	4602      	mov	r2, r0
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	2b02      	cmp	r3, #2
 8014b1e:	d901      	bls.n	8014b24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8014b20:	2303      	movs	r3, #3
 8014b22:	e111      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b24:	4b8a      	ldr	r3, [pc, #552]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f003 0307 	and.w	r3, r3, #7
 8014b2c:	683a      	ldr	r2, [r7, #0]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d1ef      	bne.n	8014b12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	f003 0302 	and.w	r3, r3, #2
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d016      	beq.n	8014b6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	689b      	ldr	r3, [r3, #8]
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff fafb 	bl	801413e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014b48:	f7fd fd5c 	bl	8012604 <HAL_GetTick>
 8014b4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014b4e:	e008      	b.n	8014b62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014b50:	f7fd fd58 	bl	8012604 <HAL_GetTick>
 8014b54:	4602      	mov	r2, r0
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	1ad3      	subs	r3, r2, r3
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d901      	bls.n	8014b62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8014b5e:	2303      	movs	r3, #3
 8014b60:	e0f2      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014b62:	f7ff fbe8 	bl	8014336 <LL_RCC_IsActiveFlag_HPRE>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d0f1      	beq.n	8014b50 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f003 0320 	and.w	r3, r3, #32
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d016      	beq.n	8014ba6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	695b      	ldr	r3, [r3, #20]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7ff faf2 	bl	8014166 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014b82:	f7fd fd3f 	bl	8012604 <HAL_GetTick>
 8014b86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014b88:	e008      	b.n	8014b9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014b8a:	f7fd fd3b 	bl	8012604 <HAL_GetTick>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	d901      	bls.n	8014b9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8014b98:	2303      	movs	r3, #3
 8014b9a:	e0d5      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014b9c:	f7ff fbdd 	bl	801435a <LL_RCC_IsActiveFlag_C2HPRE>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d0f1      	beq.n	8014b8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d016      	beq.n	8014be0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	699b      	ldr	r3, [r3, #24]
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7ff faeb 	bl	8014192 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014bbc:	f7fd fd22 	bl	8012604 <HAL_GetTick>
 8014bc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014bc2:	e008      	b.n	8014bd6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014bc4:	f7fd fd1e 	bl	8012604 <HAL_GetTick>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	1ad3      	subs	r3, r2, r3
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d901      	bls.n	8014bd6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	e0b8      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014bd6:	f7ff fbd3 	bl	8014380 <LL_RCC_IsActiveFlag_SHDHPRE>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d0f1      	beq.n	8014bc4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	f003 0304 	and.w	r3, r3, #4
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d016      	beq.n	8014c1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7ff fae5 	bl	80141c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014bf6:	f7fd fd05 	bl	8012604 <HAL_GetTick>
 8014bfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014bfc:	e008      	b.n	8014c10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014bfe:	f7fd fd01 	bl	8012604 <HAL_GetTick>
 8014c02:	4602      	mov	r2, r0
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	1ad3      	subs	r3, r2, r3
 8014c08:	2b02      	cmp	r3, #2
 8014c0a:	d901      	bls.n	8014c10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8014c0c:	2303      	movs	r3, #3
 8014c0e:	e09b      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014c10:	f7ff fbc9 	bl	80143a6 <LL_RCC_IsActiveFlag_PPRE1>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d0f1      	beq.n	8014bfe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f003 0308 	and.w	r3, r3, #8
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d017      	beq.n	8014c56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	691b      	ldr	r3, [r3, #16]
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7ff fadb 	bl	80141e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014c32:	f7fd fce7 	bl	8012604 <HAL_GetTick>
 8014c36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014c38:	e008      	b.n	8014c4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014c3a:	f7fd fce3 	bl	8012604 <HAL_GetTick>
 8014c3e:	4602      	mov	r2, r0
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	1ad3      	subs	r3, r2, r3
 8014c44:	2b02      	cmp	r3, #2
 8014c46:	d901      	bls.n	8014c4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8014c48:	2303      	movs	r3, #3
 8014c4a:	e07d      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014c4c:	f7ff fbbd 	bl	80143ca <LL_RCC_IsActiveFlag_PPRE2>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d0f1      	beq.n	8014c3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d043      	beq.n	8014cea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d106      	bne.n	8014c78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8014c6a:	f7ff f87b 	bl	8013d64 <LL_RCC_HSE_IsReady>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d11e      	bne.n	8014cb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014c74:	2301      	movs	r3, #1
 8014c76:	e067      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	2b03      	cmp	r3, #3
 8014c7e:	d106      	bne.n	8014c8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8014c80:	f7ff fb16 	bl	80142b0 <LL_RCC_PLL_IsReady>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d113      	bne.n	8014cb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e05c      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d106      	bne.n	8014ca4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8014c96:	f7ff f9e3 	bl	8014060 <LL_RCC_MSI_IsReady>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d108      	bne.n	8014cb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	e051      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8014ca4:	f7ff f88e 	bl	8013dc4 <LL_RCC_HSI_IsReady>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d101      	bne.n	8014cb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014cae:	2301      	movs	r3, #1
 8014cb0:	e04a      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff fa21 	bl	80140fe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014cbc:	f7fd fca2 	bl	8012604 <HAL_GetTick>
 8014cc0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cc2:	e00a      	b.n	8014cda <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014cc4:	f7fd fc9e 	bl	8012604 <HAL_GetTick>
 8014cc8:	4602      	mov	r2, r0
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	d901      	bls.n	8014cda <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8014cd6:	2303      	movs	r3, #3
 8014cd8:	e036      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cda:	f7ff fa24 	bl	8014126 <LL_RCC_GetSysClkSource>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d1ec      	bne.n	8014cc4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014cea:	4b19      	ldr	r3, [pc, #100]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f003 0307 	and.w	r3, r3, #7
 8014cf2:	683a      	ldr	r2, [r7, #0]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d21b      	bcs.n	8014d30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014cf8:	4b15      	ldr	r3, [pc, #84]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f023 0207 	bic.w	r2, r3, #7
 8014d00:	4913      	ldr	r1, [pc, #76]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	4313      	orrs	r3, r2
 8014d06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d08:	f7fd fc7c 	bl	8012604 <HAL_GetTick>
 8014d0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d0e:	e008      	b.n	8014d22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014d10:	f7fd fc78 	bl	8012604 <HAL_GetTick>
 8014d14:	4602      	mov	r2, r0
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	2b02      	cmp	r3, #2
 8014d1c:	d901      	bls.n	8014d22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8014d1e:	2303      	movs	r3, #3
 8014d20:	e012      	b.n	8014d48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d22:	4b0b      	ldr	r3, [pc, #44]	@ (8014d50 <HAL_RCC_ClockConfig+0x278>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	f003 0307 	and.w	r3, r3, #7
 8014d2a:	683a      	ldr	r2, [r7, #0]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d1ef      	bne.n	8014d10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8014d30:	f000 f87e 	bl	8014e30 <HAL_RCC_GetHCLKFreq>
 8014d34:	4603      	mov	r3, r0
 8014d36:	4a07      	ldr	r2, [pc, #28]	@ (8014d54 <HAL_RCC_ClockConfig+0x27c>)
 8014d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8014d3a:	f7fd fc6f 	bl	801261c <HAL_GetTickPrio>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7fd fc11 	bl	8012568 <HAL_InitTick>
 8014d46:	4603      	mov	r3, r0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	58004000 	.word	0x58004000
 8014d54:	20000008 	.word	0x20000008

08014d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014d58:	b590      	push	{r4, r7, lr}
 8014d5a:	b085      	sub	sp, #20
 8014d5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014d5e:	f7ff f9e2 	bl	8014126 <LL_RCC_GetSysClkSource>
 8014d62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d10a      	bne.n	8014d80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014d6a:	f7ff f99e 	bl	80140aa <LL_RCC_MSI_GetRange>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	091b      	lsrs	r3, r3, #4
 8014d72:	f003 030f 	and.w	r3, r3, #15
 8014d76:	4a2b      	ldr	r2, [pc, #172]	@ (8014e24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8014d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d7c:	60fb      	str	r3, [r7, #12]
 8014d7e:	e04b      	b.n	8014e18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b04      	cmp	r3, #4
 8014d84:	d102      	bne.n	8014d8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014d86:	4b28      	ldr	r3, [pc, #160]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	e045      	b.n	8014e18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b08      	cmp	r3, #8
 8014d90:	d10a      	bne.n	8014da8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014d92:	f7fe ffb7 	bl	8013d04 <LL_RCC_HSE_IsEnabledDiv2>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d102      	bne.n	8014da2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8014d9c:	4b22      	ldr	r3, [pc, #136]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8014d9e:	60fb      	str	r3, [r7, #12]
 8014da0:	e03a      	b.n	8014e18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8014da2:	4b22      	ldr	r3, [pc, #136]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	e037      	b.n	8014e18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8014da8:	f7ff fab9 	bl	801431e <LL_RCC_PLL_GetMainSource>
 8014dac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	2b02      	cmp	r3, #2
 8014db2:	d003      	beq.n	8014dbc <HAL_RCC_GetSysClockFreq+0x64>
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	2b03      	cmp	r3, #3
 8014db8:	d003      	beq.n	8014dc2 <HAL_RCC_GetSysClockFreq+0x6a>
 8014dba:	e00d      	b.n	8014dd8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8014dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8014dbe:	60bb      	str	r3, [r7, #8]
        break;
 8014dc0:	e015      	b.n	8014dee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014dc2:	f7fe ff9f 	bl	8013d04 <LL_RCC_HSE_IsEnabledDiv2>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d102      	bne.n	8014dd2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8014dcc:	4b16      	ldr	r3, [pc, #88]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8014dce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8014dd0:	e00d      	b.n	8014dee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8014dd2:	4b16      	ldr	r3, [pc, #88]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8014dd4:	60bb      	str	r3, [r7, #8]
        break;
 8014dd6:	e00a      	b.n	8014dee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014dd8:	f7ff f967 	bl	80140aa <LL_RCC_MSI_GetRange>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	091b      	lsrs	r3, r3, #4
 8014de0:	f003 030f 	and.w	r3, r3, #15
 8014de4:	4a0f      	ldr	r2, [pc, #60]	@ (8014e24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8014de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dea:	60bb      	str	r3, [r7, #8]
        break;
 8014dec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8014dee:	f7ff fa71 	bl	80142d4 <LL_RCC_PLL_GetN>
 8014df2:	4602      	mov	r2, r0
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	fb03 f402 	mul.w	r4, r3, r2
 8014dfa:	f7ff fa84 	bl	8014306 <LL_RCC_PLL_GetDivider>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	091b      	lsrs	r3, r3, #4
 8014e02:	3301      	adds	r3, #1
 8014e04:	fbb4 f4f3 	udiv	r4, r4, r3
 8014e08:	f7ff fa71 	bl	80142ee <LL_RCC_PLL_GetR>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	0f5b      	lsrs	r3, r3, #29
 8014e10:	3301      	adds	r3, #1
 8014e12:	fbb4 f3f3 	udiv	r3, r4, r3
 8014e16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8014e18:	68fb      	ldr	r3, [r7, #12]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd90      	pop	{r4, r7, pc}
 8014e22:	bf00      	nop
 8014e24:	08017a84 	.word	0x08017a84
 8014e28:	00f42400 	.word	0x00f42400
 8014e2c:	01e84800 	.word	0x01e84800

08014e30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014e30:	b598      	push	{r3, r4, r7, lr}
 8014e32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8014e34:	f7ff ff90 	bl	8014d58 <HAL_RCC_GetSysClockFreq>
 8014e38:	4604      	mov	r4, r0
 8014e3a:	f7ff f9e9 	bl	8014210 <LL_RCC_GetAHBPrescaler>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	091b      	lsrs	r3, r3, #4
 8014e42:	f003 030f 	and.w	r3, r3, #15
 8014e46:	4a03      	ldr	r2, [pc, #12]	@ (8014e54 <HAL_RCC_GetHCLKFreq+0x24>)
 8014e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	bd98      	pop	{r3, r4, r7, pc}
 8014e54:	08017a24 	.word	0x08017a24

08014e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014e58:	b598      	push	{r3, r4, r7, lr}
 8014e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8014e5c:	f7ff ffe8 	bl	8014e30 <HAL_RCC_GetHCLKFreq>
 8014e60:	4604      	mov	r4, r0
 8014e62:	f7ff f9ef 	bl	8014244 <LL_RCC_GetAPB1Prescaler>
 8014e66:	4603      	mov	r3, r0
 8014e68:	0a1b      	lsrs	r3, r3, #8
 8014e6a:	f003 0307 	and.w	r3, r3, #7
 8014e6e:	4a04      	ldr	r2, [pc, #16]	@ (8014e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e74:	f003 031f 	and.w	r3, r3, #31
 8014e78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	bd98      	pop	{r3, r4, r7, pc}
 8014e80:	08017a64 	.word	0x08017a64

08014e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014e84:	b598      	push	{r3, r4, r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8014e88:	f7ff ffd2 	bl	8014e30 <HAL_RCC_GetHCLKFreq>
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	f7ff f9e5 	bl	801425c <LL_RCC_GetAPB2Prescaler>
 8014e92:	4603      	mov	r3, r0
 8014e94:	0adb      	lsrs	r3, r3, #11
 8014e96:	f003 0307 	and.w	r3, r3, #7
 8014e9a:	4a04      	ldr	r2, [pc, #16]	@ (8014eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8014e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ea0:	f003 031f 	and.w	r3, r3, #31
 8014ea4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	bd98      	pop	{r3, r4, r7, pc}
 8014eac:	08017a64 	.word	0x08017a64

08014eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8014eb0:	b590      	push	{r4, r7, lr}
 8014eb2:	b085      	sub	sp, #20
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2bb0      	cmp	r3, #176	@ 0xb0
 8014ebc:	d903      	bls.n	8014ec6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8014ebe:	4b15      	ldr	r3, [pc, #84]	@ (8014f14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ec2:	60fb      	str	r3, [r7, #12]
 8014ec4:	e007      	b.n	8014ed6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	091b      	lsrs	r3, r3, #4
 8014eca:	f003 030f 	and.w	r3, r3, #15
 8014ece:	4a11      	ldr	r2, [pc, #68]	@ (8014f14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ed4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8014ed6:	f7ff f9a7 	bl	8014228 <LL_RCC_GetAHB4Prescaler>
 8014eda:	4603      	mov	r3, r0
 8014edc:	091b      	lsrs	r3, r3, #4
 8014ede:	f003 030f 	and.w	r3, r3, #15
 8014ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8014f18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8014ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ee8:	68fa      	ldr	r2, [r7, #12]
 8014eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8014eee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8014f1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8014ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8014ef8:	0c9c      	lsrs	r4, r3, #18
 8014efa:	f7fe fef5 	bl	8013ce8 <HAL_PWREx_GetVoltageRange>
 8014efe:	4603      	mov	r3, r0
 8014f00:	4619      	mov	r1, r3
 8014f02:	4620      	mov	r0, r4
 8014f04:	f000 f80c 	bl	8014f20 <RCC_SetFlashLatency>
 8014f08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3714      	adds	r7, #20
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd90      	pop	{r4, r7, pc}
 8014f12:	bf00      	nop
 8014f14:	08017a84 	.word	0x08017a84
 8014f18:	08017a24 	.word	0x08017a24
 8014f1c:	431bde83 	.word	0x431bde83

08014f20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8014f20:	b590      	push	{r4, r7, lr}
 8014f22:	b093      	sub	sp, #76	@ 0x4c
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8014f2a:	4b37      	ldr	r3, [pc, #220]	@ (8015008 <RCC_SetFlashLatency+0xe8>)
 8014f2c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8014f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8014f36:	4a35      	ldr	r2, [pc, #212]	@ (801500c <RCC_SetFlashLatency+0xec>)
 8014f38:	f107 031c 	add.w	r3, r7, #28
 8014f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8014f3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8014f42:	4b33      	ldr	r3, [pc, #204]	@ (8015010 <RCC_SetFlashLatency+0xf0>)
 8014f44:	f107 040c 	add.w	r4, r7, #12
 8014f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8014f4e:	2300      	movs	r3, #0
 8014f50:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f58:	d11a      	bne.n	8014f90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f5e:	e013      	b.n	8014f88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8014f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	3348      	adds	r3, #72	@ 0x48
 8014f66:	443b      	add	r3, r7
 8014f68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d807      	bhi.n	8014f82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f74:	009b      	lsls	r3, r3, #2
 8014f76:	3348      	adds	r3, #72	@ 0x48
 8014f78:	443b      	add	r3, r7
 8014f7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014f7e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014f80:	e020      	b.n	8014fc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f84:	3301      	adds	r3, #1
 8014f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f8a:	2b03      	cmp	r3, #3
 8014f8c:	d9e8      	bls.n	8014f60 <RCC_SetFlashLatency+0x40>
 8014f8e:	e019      	b.n	8014fc4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014f90:	2300      	movs	r3, #0
 8014f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f94:	e013      	b.n	8014fbe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8014f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	3348      	adds	r3, #72	@ 0x48
 8014f9c:	443b      	add	r3, r7
 8014f9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d807      	bhi.n	8014fb8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	3348      	adds	r3, #72	@ 0x48
 8014fae:	443b      	add	r3, r7
 8014fb0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014fb4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014fb6:	e005      	b.n	8014fc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fba:	3301      	adds	r3, #1
 8014fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fc0:	2b02      	cmp	r3, #2
 8014fc2:	d9e8      	bls.n	8014f96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8014fc4:	4b13      	ldr	r3, [pc, #76]	@ (8015014 <RCC_SetFlashLatency+0xf4>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f023 0207 	bic.w	r2, r3, #7
 8014fcc:	4911      	ldr	r1, [pc, #68]	@ (8015014 <RCC_SetFlashLatency+0xf4>)
 8014fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fd0:	4313      	orrs	r3, r2
 8014fd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014fd4:	f7fd fb16 	bl	8012604 <HAL_GetTick>
 8014fd8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014fda:	e008      	b.n	8014fee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014fdc:	f7fd fb12 	bl	8012604 <HAL_GetTick>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe4:	1ad3      	subs	r3, r2, r3
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d901      	bls.n	8014fee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8014fea:	2303      	movs	r3, #3
 8014fec:	e007      	b.n	8014ffe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014fee:	4b09      	ldr	r3, [pc, #36]	@ (8015014 <RCC_SetFlashLatency+0xf4>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	f003 0307 	and.w	r3, r3, #7
 8014ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d1ef      	bne.n	8014fdc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8014ffc:	2300      	movs	r3, #0
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	374c      	adds	r7, #76	@ 0x4c
 8015002:	46bd      	mov	sp, r7
 8015004:	bd90      	pop	{r4, r7, pc}
 8015006:	bf00      	nop
 8015008:	08017858 	.word	0x08017858
 801500c:	08017868 	.word	0x08017868
 8015010:	08017874 	.word	0x08017874
 8015014:	58004000 	.word	0x58004000

08015018 <LL_RCC_LSE_IsEnabled>:
{
 8015018:	b480      	push	{r7}
 801501a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801501c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015024:	f003 0301 	and.w	r3, r3, #1
 8015028:	2b01      	cmp	r3, #1
 801502a:	d101      	bne.n	8015030 <LL_RCC_LSE_IsEnabled+0x18>
 801502c:	2301      	movs	r3, #1
 801502e:	e000      	b.n	8015032 <LL_RCC_LSE_IsEnabled+0x1a>
 8015030:	2300      	movs	r3, #0
}
 8015032:	4618      	mov	r0, r3
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <LL_RCC_LSE_IsReady>:
{
 801503c:	b480      	push	{r7}
 801503e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8015040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015048:	f003 0302 	and.w	r3, r3, #2
 801504c:	2b02      	cmp	r3, #2
 801504e:	d101      	bne.n	8015054 <LL_RCC_LSE_IsReady+0x18>
 8015050:	2301      	movs	r3, #1
 8015052:	e000      	b.n	8015056 <LL_RCC_LSE_IsReady+0x1a>
 8015054:	2300      	movs	r3, #0
}
 8015056:	4618      	mov	r0, r3
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <LL_RCC_MSI_EnablePLLMode>:
{
 8015060:	b480      	push	{r7}
 8015062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8015064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801506e:	f043 0304 	orr.w	r3, r3, #4
 8015072:	6013      	str	r3, [r2, #0]
}
 8015074:	bf00      	nop
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr

0801507e <LL_RCC_SetRFWKPClockSource>:
{
 801507e:	b480      	push	{r7}
 8015080:	b083      	sub	sp, #12
 8015082:	af00      	add	r7, sp, #0
 8015084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8015086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801508e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8015092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	4313      	orrs	r3, r2
 801509a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 801509e:	bf00      	nop
 80150a0:	370c      	adds	r7, #12
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr

080150aa <LL_RCC_SetSMPSClockSource>:
{
 80150aa:	b480      	push	{r7}
 80150ac:	b083      	sub	sp, #12
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80150b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80150b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150b8:	f023 0203 	bic.w	r2, r3, #3
 80150bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4313      	orrs	r3, r2
 80150c4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80150c6:	bf00      	nop
 80150c8:	370c      	adds	r7, #12
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr

080150d2 <LL_RCC_SetSMPSPrescaler>:
{
 80150d2:	b480      	push	{r7}
 80150d4:	b083      	sub	sp, #12
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80150da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80150de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80150e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4313      	orrs	r3, r2
 80150ec:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80150ee:	bf00      	nop
 80150f0:	370c      	adds	r7, #12
 80150f2:	46bd      	mov	sp, r7
 80150f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f8:	4770      	bx	lr

080150fa <LL_RCC_SetUSARTClockSource>:
{
 80150fa:	b480      	push	{r7}
 80150fc:	b083      	sub	sp, #12
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8015102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801510a:	f023 0203 	bic.w	r2, r3, #3
 801510e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	4313      	orrs	r3, r2
 8015116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801511a:	bf00      	nop
 801511c:	370c      	adds	r7, #12
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <LL_RCC_SetLPUARTClockSource>:
{
 8015126:	b480      	push	{r7}
 8015128:	b083      	sub	sp, #12
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015136:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801513a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	4313      	orrs	r3, r2
 8015142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015146:	bf00      	nop
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr

08015152 <LL_RCC_SetI2CClockSource>:
{
 8015152:	b480      	push	{r7}
 8015154:	b083      	sub	sp, #12
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801515a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801515e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	091b      	lsrs	r3, r3, #4
 8015166:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 801516a:	43db      	mvns	r3, r3
 801516c:	401a      	ands	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	011b      	lsls	r3, r3, #4
 8015172:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8015176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801517a:	4313      	orrs	r3, r2
 801517c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015180:	bf00      	nop
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <LL_RCC_SetLPTIMClockSource>:
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8015194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015198:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	0c1b      	lsrs	r3, r3, #16
 80151a0:	041b      	lsls	r3, r3, #16
 80151a2:	43db      	mvns	r3, r3
 80151a4:	401a      	ands	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	041b      	lsls	r3, r3, #16
 80151aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80151ae:	4313      	orrs	r3, r2
 80151b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80151b4:	bf00      	nop
 80151b6:	370c      	adds	r7, #12
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <LL_RCC_SetSAIClockSource>:
{
 80151c0:	b480      	push	{r7}
 80151c2:	b083      	sub	sp, #12
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80151c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80151d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4313      	orrs	r3, r2
 80151dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80151e0:	bf00      	nop
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <LL_RCC_SetRNGClockSource>:
{
 80151ec:	b480      	push	{r7}
 80151ee:	b083      	sub	sp, #12
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80151f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151fc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8015200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	4313      	orrs	r3, r2
 8015208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801520c:	bf00      	nop
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr

08015218 <LL_RCC_SetCLK48ClockSource>:
{
 8015218:	b480      	push	{r7}
 801521a:	b083      	sub	sp, #12
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8015220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801522c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	4313      	orrs	r3, r2
 8015234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015238:	bf00      	nop
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr

08015244 <LL_RCC_SetUSBClockSource>:
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f7ff ffe3 	bl	8015218 <LL_RCC_SetCLK48ClockSource>
}
 8015252:	bf00      	nop
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <LL_RCC_SetADCClockSource>:
{
 801525a:	b480      	push	{r7}
 801525c:	b083      	sub	sp, #12
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8015262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801526a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801526e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	4313      	orrs	r3, r2
 8015276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801527a:	bf00      	nop
 801527c:	370c      	adds	r7, #12
 801527e:	46bd      	mov	sp, r7
 8015280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015284:	4770      	bx	lr

08015286 <LL_RCC_SetRTCClockSource>:
{
 8015286:	b480      	push	{r7}
 8015288:	b083      	sub	sp, #12
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801528e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015296:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801529a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	4313      	orrs	r3, r2
 80152a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80152a6:	bf00      	nop
 80152a8:	370c      	adds	r7, #12
 80152aa:	46bd      	mov	sp, r7
 80152ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b0:	4770      	bx	lr

080152b2 <LL_RCC_GetRTCClockSource>:
{
 80152b2:	b480      	push	{r7}
 80152b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80152b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr

080152cc <LL_RCC_ForceBackupDomainReset>:
{
 80152cc:	b480      	push	{r7}
 80152ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80152d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80152dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80152e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80152e4:	bf00      	nop
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr

080152ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80152ee:	b480      	push	{r7}
 80152f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80152f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80152fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8015306:	bf00      	nop
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <LL_RCC_PLLSAI1_Enable>:
{
 8015310:	b480      	push	{r7}
 8015312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8015314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801531e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015322:	6013      	str	r3, [r2, #0]
}
 8015324:	bf00      	nop
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr

0801532e <LL_RCC_PLLSAI1_Disable>:
{
 801532e:	b480      	push	{r7}
 8015330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8015332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801533c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8015340:	6013      	str	r3, [r2, #0]
}
 8015342:	bf00      	nop
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <LL_RCC_PLLSAI1_IsReady>:
{
 801534c:	b480      	push	{r7}
 801534e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8015350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801535a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801535e:	d101      	bne.n	8015364 <LL_RCC_PLLSAI1_IsReady+0x18>
 8015360:	2301      	movs	r3, #1
 8015362:	e000      	b.n	8015366 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b088      	sub	sp, #32
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8015378:	2300      	movs	r3, #0
 801537a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801537c:	2300      	movs	r3, #0
 801537e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015388:	2b00      	cmp	r3, #0
 801538a:	d034      	beq.n	80153f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015390:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015394:	d021      	beq.n	80153da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8015396:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801539a:	d81b      	bhi.n	80153d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801539c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80153a0:	d01d      	beq.n	80153de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80153a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80153a6:	d815      	bhi.n	80153d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d00b      	beq.n	80153c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80153ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153b0:	d110      	bne.n	80153d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80153b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153b6:	68db      	ldr	r3, [r3, #12]
 80153b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80153bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80153c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80153c2:	e00d      	b.n	80153e0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	3304      	adds	r3, #4
 80153c8:	4618      	mov	r0, r3
 80153ca:	f000 f94d 	bl	8015668 <RCCEx_PLLSAI1_ConfigNP>
 80153ce:	4603      	mov	r3, r0
 80153d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80153d2:	e005      	b.n	80153e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80153d4:	2301      	movs	r3, #1
 80153d6:	77fb      	strb	r3, [r7, #31]
        break;
 80153d8:	e002      	b.n	80153e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80153da:	bf00      	nop
 80153dc:	e000      	b.n	80153e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80153de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153e0:	7ffb      	ldrb	r3, [r7, #31]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d105      	bne.n	80153f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7ff fee8 	bl	80151c0 <LL_RCC_SetSAIClockSource>
 80153f0:	e001      	b.n	80153f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80153f2:	7ffb      	ldrb	r3, [r7, #31]
 80153f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d046      	beq.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8015402:	f7ff ff56 	bl	80152b2 <LL_RCC_GetRTCClockSource>
 8015406:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801540c:	69ba      	ldr	r2, [r7, #24]
 801540e:	429a      	cmp	r2, r3
 8015410:	d03c      	beq.n	801548c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8015412:	f7fe fc59 	bl	8013cc8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8015416:	69bb      	ldr	r3, [r7, #24]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d105      	bne.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015420:	4618      	mov	r0, r3
 8015422:	f7ff ff30 	bl	8015286 <LL_RCC_SetRTCClockSource>
 8015426:	e02e      	b.n	8015486 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8015428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015430:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8015432:	f7ff ff4b 	bl	80152cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8015436:	f7ff ff5a 	bl	80152ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015444:	4313      	orrs	r3, r2
 8015446:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8015448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8015452:	f7ff fde1 	bl	8015018 <LL_RCC_LSE_IsEnabled>
 8015456:	4603      	mov	r3, r0
 8015458:	2b01      	cmp	r3, #1
 801545a:	d114      	bne.n	8015486 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801545c:	f7fd f8d2 	bl	8012604 <HAL_GetTick>
 8015460:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8015462:	e00b      	b.n	801547c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015464:	f7fd f8ce 	bl	8012604 <HAL_GetTick>
 8015468:	4602      	mov	r2, r0
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	1ad3      	subs	r3, r2, r3
 801546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015472:	4293      	cmp	r3, r2
 8015474:	d902      	bls.n	801547c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8015476:	2303      	movs	r3, #3
 8015478:	77fb      	strb	r3, [r7, #31]
              break;
 801547a:	e004      	b.n	8015486 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801547c:	f7ff fdde 	bl	801503c <LL_RCC_LSE_IsReady>
 8015480:	4603      	mov	r3, r0
 8015482:	2b01      	cmp	r3, #1
 8015484:	d1ee      	bne.n	8015464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8015486:	7ffb      	ldrb	r3, [r7, #31]
 8015488:	77bb      	strb	r3, [r7, #30]
 801548a:	e001      	b.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801548c:	7ffb      	ldrb	r3, [r7, #31]
 801548e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f003 0301 	and.w	r3, r3, #1
 8015498:	2b00      	cmp	r3, #0
 801549a:	d004      	beq.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	699b      	ldr	r3, [r3, #24]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff fe2a 	bl	80150fa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f003 0302 	and.w	r3, r3, #2
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d004      	beq.n	80154bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	69db      	ldr	r3, [r3, #28]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff fe35 	bl	8015126 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	f003 0310 	and.w	r3, r3, #16
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d004      	beq.n	80154d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7ff fe5d 	bl	801518c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	f003 0320 	and.w	r3, r3, #32
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d004      	beq.n	80154e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7ff fe52 	bl	801518c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	f003 0304 	and.w	r3, r3, #4
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d004      	beq.n	80154fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6a1b      	ldr	r3, [r3, #32]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7ff fe2a 	bl	8015152 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	f003 0308 	and.w	r3, r3, #8
 8015506:	2b00      	cmp	r3, #0
 8015508:	d004      	beq.n	8015514 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801550e:	4618      	mov	r0, r3
 8015510:	f7ff fe1f 	bl	8015152 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801551c:	2b00      	cmp	r3, #0
 801551e:	d022      	beq.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015524:	4618      	mov	r0, r3
 8015526:	f7ff fe8d 	bl	8015244 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801552e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015532:	d107      	bne.n	8015544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8015534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801553e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015542:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801554c:	d10b      	bne.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	3304      	adds	r3, #4
 8015552:	4618      	mov	r0, r3
 8015554:	f000 f8e3 	bl	801571e <RCCEx_PLLSAI1_ConfigNQ>
 8015558:	4603      	mov	r3, r0
 801555a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801555c:	7ffb      	ldrb	r3, [r7, #31]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8015562:	7ffb      	ldrb	r3, [r7, #31]
 8015564:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801556e:	2b00      	cmp	r3, #0
 8015570:	d02b      	beq.n	80155ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801557a:	d008      	beq.n	801558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015584:	d003      	beq.n	801558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558a:	2b00      	cmp	r3, #0
 801558c:	d105      	bne.n	801559a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015592:	4618      	mov	r0, r3
 8015594:	f7ff fe2a 	bl	80151ec <LL_RCC_SetRNGClockSource>
 8015598:	e00a      	b.n	80155b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80155a2:	60fb      	str	r3, [r7, #12]
 80155a4:	2000      	movs	r0, #0
 80155a6:	f7ff fe21 	bl	80151ec <LL_RCC_SetRNGClockSource>
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f7ff fe34 	bl	8015218 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80155b8:	d107      	bne.n	80155ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80155ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80155c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80155c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d022      	beq.n	801561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155da:	4618      	mov	r0, r3
 80155dc:	f7ff fe3d 	bl	801525a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80155e8:	d107      	bne.n	80155fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80155ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80155f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80155f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015602:	d10b      	bne.n	801561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	3304      	adds	r3, #4
 8015608:	4618      	mov	r0, r3
 801560a:	f000 f8e3 	bl	80157d4 <RCCEx_PLLSAI1_ConfigNR>
 801560e:	4603      	mov	r3, r0
 8015610:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8015612:	7ffb      	ldrb	r3, [r7, #31]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d001      	beq.n	801561c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8015618:	7ffb      	ldrb	r3, [r7, #31]
 801561a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015624:	2b00      	cmp	r3, #0
 8015626:	d004      	beq.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff fd26 	bl	801507e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801563a:	2b00      	cmp	r3, #0
 801563c:	d009      	beq.n	8015652 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff fd45 	bl	80150d2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801564c:	4618      	mov	r0, r3
 801564e:	f7ff fd2c 	bl	80150aa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8015652:	7fbb      	ldrb	r3, [r7, #30]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3720      	adds	r7, #32
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8015660:	f7ff fcfe 	bl	8015060 <LL_RCC_MSI_EnablePLLMode>
}
 8015664:	bf00      	nop
 8015666:	bd80      	pop	{r7, pc}

08015668 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015670:	2300      	movs	r3, #0
 8015672:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015674:	f7ff fe5b 	bl	801532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015678:	f7fc ffc4 	bl	8012604 <HAL_GetTick>
 801567c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801567e:	e009      	b.n	8015694 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015680:	f7fc ffc0 	bl	8012604 <HAL_GetTick>
 8015684:	4602      	mov	r2, r0
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	1ad3      	subs	r3, r2, r3
 801568a:	2b02      	cmp	r3, #2
 801568c:	d902      	bls.n	8015694 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801568e:	2303      	movs	r3, #3
 8015690:	73fb      	strb	r3, [r7, #15]
      break;
 8015692:	e004      	b.n	801569e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015694:	f7ff fe5a 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 8015698:	4603      	mov	r3, r0
 801569a:	2b00      	cmp	r3, #0
 801569c:	d1f0      	bne.n	8015680 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801569e:	7bfb      	ldrb	r3, [r7, #15]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d137      	bne.n	8015714 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80156a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156a8:	691b      	ldr	r3, [r3, #16]
 80156aa:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	021b      	lsls	r3, r3, #8
 80156b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80156b8:	4313      	orrs	r3, r2
 80156ba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80156bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156c0:	691b      	ldr	r3, [r3, #16]
 80156c2:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80156ce:	4313      	orrs	r3, r2
 80156d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80156d2:	f7ff fe1d 	bl	8015310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80156d6:	f7fc ff95 	bl	8012604 <HAL_GetTick>
 80156da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80156dc:	e009      	b.n	80156f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80156de:	f7fc ff91 	bl	8012604 <HAL_GetTick>
 80156e2:	4602      	mov	r2, r0
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	2b02      	cmp	r3, #2
 80156ea:	d902      	bls.n	80156f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80156ec:	2303      	movs	r3, #3
 80156ee:	73fb      	strb	r3, [r7, #15]
        break;
 80156f0:	e004      	b.n	80156fc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80156f2:	f7ff fe2b 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d1f0      	bne.n	80156de <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80156fc:	7bfb      	ldrb	r3, [r7, #15]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d108      	bne.n	8015714 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015706:	691a      	ldr	r2, [r3, #16]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015710:	4313      	orrs	r3, r2
 8015712:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015714:	7bfb      	ldrb	r3, [r7, #15]
}
 8015716:	4618      	mov	r0, r3
 8015718:	3710      	adds	r7, #16
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}

0801571e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801571e:	b580      	push	{r7, lr}
 8015720:	b084      	sub	sp, #16
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015726:	2300      	movs	r3, #0
 8015728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801572a:	f7ff fe00 	bl	801532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801572e:	f7fc ff69 	bl	8012604 <HAL_GetTick>
 8015732:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015734:	e009      	b.n	801574a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015736:	f7fc ff65 	bl	8012604 <HAL_GetTick>
 801573a:	4602      	mov	r2, r0
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	1ad3      	subs	r3, r2, r3
 8015740:	2b02      	cmp	r3, #2
 8015742:	d902      	bls.n	801574a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8015744:	2303      	movs	r3, #3
 8015746:	73fb      	strb	r3, [r7, #15]
      break;
 8015748:	e004      	b.n	8015754 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801574a:	f7ff fdff 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 801574e:	4603      	mov	r3, r0
 8015750:	2b00      	cmp	r3, #0
 8015752:	d1f0      	bne.n	8015736 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8015754:	7bfb      	ldrb	r3, [r7, #15]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d137      	bne.n	80157ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801575a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801575e:	691b      	ldr	r3, [r3, #16]
 8015760:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	021b      	lsls	r3, r3, #8
 801576a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801576e:	4313      	orrs	r3, r2
 8015770:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8015772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015776:	691b      	ldr	r3, [r3, #16]
 8015778:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	689b      	ldr	r3, [r3, #8]
 8015780:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015784:	4313      	orrs	r3, r2
 8015786:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015788:	f7ff fdc2 	bl	8015310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801578c:	f7fc ff3a 	bl	8012604 <HAL_GetTick>
 8015790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015792:	e009      	b.n	80157a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015794:	f7fc ff36 	bl	8012604 <HAL_GetTick>
 8015798:	4602      	mov	r2, r0
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	2b02      	cmp	r3, #2
 80157a0:	d902      	bls.n	80157a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80157a2:	2303      	movs	r3, #3
 80157a4:	73fb      	strb	r3, [r7, #15]
        break;
 80157a6:	e004      	b.n	80157b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80157a8:	f7ff fdd0 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	d1f0      	bne.n	8015794 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80157b2:	7bfb      	ldrb	r3, [r7, #15]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d108      	bne.n	80157ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80157b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157bc:	691a      	ldr	r2, [r3, #16]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	691b      	ldr	r3, [r3, #16]
 80157c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80157c6:	4313      	orrs	r3, r2
 80157c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80157ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3710      	adds	r7, #16
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80157e0:	f7ff fda5 	bl	801532e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80157e4:	f7fc ff0e 	bl	8012604 <HAL_GetTick>
 80157e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80157ea:	e009      	b.n	8015800 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80157ec:	f7fc ff0a 	bl	8012604 <HAL_GetTick>
 80157f0:	4602      	mov	r2, r0
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	1ad3      	subs	r3, r2, r3
 80157f6:	2b02      	cmp	r3, #2
 80157f8:	d902      	bls.n	8015800 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80157fa:	2303      	movs	r3, #3
 80157fc:	73fb      	strb	r3, [r7, #15]
      break;
 80157fe:	e004      	b.n	801580a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015800:	f7ff fda4 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1f0      	bne.n	80157ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801580a:	7bfb      	ldrb	r3, [r7, #15]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d137      	bne.n	8015880 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015814:	691b      	ldr	r3, [r3, #16]
 8015816:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	021b      	lsls	r3, r3, #8
 8015820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015824:	4313      	orrs	r3, r2
 8015826:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8015828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801582c:	691b      	ldr	r3, [r3, #16]
 801582e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801583a:	4313      	orrs	r3, r2
 801583c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801583e:	f7ff fd67 	bl	8015310 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015842:	f7fc fedf 	bl	8012604 <HAL_GetTick>
 8015846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015848:	e009      	b.n	801585e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801584a:	f7fc fedb 	bl	8012604 <HAL_GetTick>
 801584e:	4602      	mov	r2, r0
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	1ad3      	subs	r3, r2, r3
 8015854:	2b02      	cmp	r3, #2
 8015856:	d902      	bls.n	801585e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8015858:	2303      	movs	r3, #3
 801585a:	73fb      	strb	r3, [r7, #15]
        break;
 801585c:	e004      	b.n	8015868 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801585e:	f7ff fd75 	bl	801534c <LL_RCC_PLLSAI1_IsReady>
 8015862:	4603      	mov	r3, r0
 8015864:	2b01      	cmp	r3, #1
 8015866:	d1f0      	bne.n	801584a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8015868:	7bfb      	ldrb	r3, [r7, #15]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d108      	bne.n	8015880 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801586e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015872:	691a      	ldr	r2, [r3, #16]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801587c:	4313      	orrs	r3, r2
 801587e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015880:	7bfb      	ldrb	r3, [r7, #15]
}
 8015882:	4618      	mov	r0, r3
 8015884:	3710      	adds	r7, #16
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <LL_RCC_GetUSARTClockSource>:
{
 801588a:	b480      	push	{r7}
 801588c:	b083      	sub	sp, #12
 801588e:	af00      	add	r7, sp, #0
 8015890:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8015892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015896:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4013      	ands	r3, r2
}
 801589e:	4618      	mov	r0, r3
 80158a0:	370c      	adds	r7, #12
 80158a2:	46bd      	mov	sp, r7
 80158a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a8:	4770      	bx	lr

080158aa <LL_RCC_GetLPUARTClockSource>:
{
 80158aa:	b480      	push	{r7}
 80158ac:	b083      	sub	sp, #12
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80158b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80158b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4013      	ands	r3, r2
}
 80158be:	4618      	mov	r0, r3
 80158c0:	370c      	adds	r7, #12
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr

080158ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80158ca:	b580      	push	{r7, lr}
 80158cc:	b082      	sub	sp, #8
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d101      	bne.n	80158dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80158d8:	2301      	movs	r3, #1
 80158da:	e042      	b.n	8015962 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d106      	bne.n	80158f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 f83b 	bl	801596a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2224      	movs	r2, #36	@ 0x24
 80158f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f022 0201 	bic.w	r2, r2, #1
 801590a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015910:	2b00      	cmp	r3, #0
 8015912:	d002      	beq.n	801591a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f000 fa5b 	bl	8015dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f000 f830 	bl	8015980 <UART_SetConfig>
 8015920:	4603      	mov	r3, r0
 8015922:	2b01      	cmp	r3, #1
 8015924:	d101      	bne.n	801592a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015926:	2301      	movs	r3, #1
 8015928:	e01b      	b.n	8015962 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	685a      	ldr	r2, [r3, #4]
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8015938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	689a      	ldr	r2, [r3, #8]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8015948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	681a      	ldr	r2, [r3, #0]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	f042 0201 	orr.w	r2, r2, #1
 8015958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 fada 	bl	8015f14 <UART_CheckIdleState>
 8015960:	4603      	mov	r3, r0
}
 8015962:	4618      	mov	r0, r3
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801596a:	b480      	push	{r7}
 801596c:	b083      	sub	sp, #12
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8015972:	bf00      	nop
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr
	...

08015980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015984:	b08c      	sub	sp, #48	@ 0x30
 8015986:	af00      	add	r7, sp, #0
 8015988:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801598a:	2300      	movs	r3, #0
 801598c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	689a      	ldr	r2, [r3, #8]
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	691b      	ldr	r3, [r3, #16]
 8015998:	431a      	orrs	r2, r3
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	695b      	ldr	r3, [r3, #20]
 801599e:	431a      	orrs	r2, r3
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	69db      	ldr	r3, [r3, #28]
 80159a4:	4313      	orrs	r3, r2
 80159a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	4baf      	ldr	r3, [pc, #700]	@ (8015c6c <UART_SetConfig+0x2ec>)
 80159b0:	4013      	ands	r3, r2
 80159b2:	697a      	ldr	r2, [r7, #20]
 80159b4:	6812      	ldr	r2, [r2, #0]
 80159b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159b8:	430b      	orrs	r3, r1
 80159ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	68da      	ldr	r2, [r3, #12]
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	430a      	orrs	r2, r1
 80159d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	699b      	ldr	r3, [r3, #24]
 80159d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4aa4      	ldr	r2, [pc, #656]	@ (8015c70 <UART_SetConfig+0x2f0>)
 80159de:	4293      	cmp	r3, r2
 80159e0:	d004      	beq.n	80159ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	6a1b      	ldr	r3, [r3, #32]
 80159e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159e8:	4313      	orrs	r3, r2
 80159ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	689b      	ldr	r3, [r3, #8]
 80159f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80159f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80159fa:	697a      	ldr	r2, [r7, #20]
 80159fc:	6812      	ldr	r2, [r2, #0]
 80159fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015a00:	430b      	orrs	r3, r1
 8015a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a0a:	f023 010f 	bic.w	r1, r3, #15
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	430a      	orrs	r2, r1
 8015a18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4a95      	ldr	r2, [pc, #596]	@ (8015c74 <UART_SetConfig+0x2f4>)
 8015a20:	4293      	cmp	r3, r2
 8015a22:	d125      	bne.n	8015a70 <UART_SetConfig+0xf0>
 8015a24:	2003      	movs	r0, #3
 8015a26:	f7ff ff30 	bl	801588a <LL_RCC_GetUSARTClockSource>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b03      	cmp	r3, #3
 8015a2e:	d81b      	bhi.n	8015a68 <UART_SetConfig+0xe8>
 8015a30:	a201      	add	r2, pc, #4	@ (adr r2, 8015a38 <UART_SetConfig+0xb8>)
 8015a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a36:	bf00      	nop
 8015a38:	08015a49 	.word	0x08015a49
 8015a3c:	08015a59 	.word	0x08015a59
 8015a40:	08015a51 	.word	0x08015a51
 8015a44:	08015a61 	.word	0x08015a61
 8015a48:	2301      	movs	r3, #1
 8015a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a4e:	e042      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015a50:	2302      	movs	r3, #2
 8015a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a56:	e03e      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015a58:	2304      	movs	r3, #4
 8015a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a5e:	e03a      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015a60:	2308      	movs	r3, #8
 8015a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a66:	e036      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015a68:	2310      	movs	r3, #16
 8015a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a6e:	e032      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4a7e      	ldr	r2, [pc, #504]	@ (8015c70 <UART_SetConfig+0x2f0>)
 8015a76:	4293      	cmp	r3, r2
 8015a78:	d12a      	bne.n	8015ad0 <UART_SetConfig+0x150>
 8015a7a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015a7e:	f7ff ff14 	bl	80158aa <LL_RCC_GetLPUARTClockSource>
 8015a82:	4603      	mov	r3, r0
 8015a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a88:	d01a      	beq.n	8015ac0 <UART_SetConfig+0x140>
 8015a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a8e:	d81b      	bhi.n	8015ac8 <UART_SetConfig+0x148>
 8015a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a94:	d00c      	beq.n	8015ab0 <UART_SetConfig+0x130>
 8015a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a9a:	d815      	bhi.n	8015ac8 <UART_SetConfig+0x148>
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d003      	beq.n	8015aa8 <UART_SetConfig+0x128>
 8015aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015aa4:	d008      	beq.n	8015ab8 <UART_SetConfig+0x138>
 8015aa6:	e00f      	b.n	8015ac8 <UART_SetConfig+0x148>
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015aae:	e012      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015ab0:	2302      	movs	r3, #2
 8015ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ab6:	e00e      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015ab8:	2304      	movs	r3, #4
 8015aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015abe:	e00a      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015ac0:	2308      	movs	r3, #8
 8015ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ac6:	e006      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015ac8:	2310      	movs	r3, #16
 8015aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ace:	e002      	b.n	8015ad6 <UART_SetConfig+0x156>
 8015ad0:	2310      	movs	r3, #16
 8015ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4a65      	ldr	r2, [pc, #404]	@ (8015c70 <UART_SetConfig+0x2f0>)
 8015adc:	4293      	cmp	r3, r2
 8015ade:	f040 8097 	bne.w	8015c10 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015ae6:	2b08      	cmp	r3, #8
 8015ae8:	d823      	bhi.n	8015b32 <UART_SetConfig+0x1b2>
 8015aea:	a201      	add	r2, pc, #4	@ (adr r2, 8015af0 <UART_SetConfig+0x170>)
 8015aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015af0:	08015b15 	.word	0x08015b15
 8015af4:	08015b33 	.word	0x08015b33
 8015af8:	08015b1d 	.word	0x08015b1d
 8015afc:	08015b33 	.word	0x08015b33
 8015b00:	08015b23 	.word	0x08015b23
 8015b04:	08015b33 	.word	0x08015b33
 8015b08:	08015b33 	.word	0x08015b33
 8015b0c:	08015b33 	.word	0x08015b33
 8015b10:	08015b2b 	.word	0x08015b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015b14:	f7ff f9a0 	bl	8014e58 <HAL_RCC_GetPCLK1Freq>
 8015b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015b1a:	e010      	b.n	8015b3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015b1c:	4b56      	ldr	r3, [pc, #344]	@ (8015c78 <UART_SetConfig+0x2f8>)
 8015b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015b20:	e00d      	b.n	8015b3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015b22:	f7ff f919 	bl	8014d58 <HAL_RCC_GetSysClockFreq>
 8015b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015b28:	e009      	b.n	8015b3e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015b30:	e005      	b.n	8015b3e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8015b32:	2300      	movs	r3, #0
 8015b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015b36:	2301      	movs	r3, #1
 8015b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 812b 	beq.w	8015d9c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b4a:	4a4c      	ldr	r2, [pc, #304]	@ (8015c7c <UART_SetConfig+0x2fc>)
 8015b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b50:	461a      	mov	r2, r3
 8015b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	685a      	ldr	r2, [r3, #4]
 8015b5e:	4613      	mov	r3, r2
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	4413      	add	r3, r2
 8015b64:	69ba      	ldr	r2, [r7, #24]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d305      	bcc.n	8015b76 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b70:	69ba      	ldr	r2, [r7, #24]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d903      	bls.n	8015b7e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8015b76:	2301      	movs	r3, #1
 8015b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015b7c:	e10e      	b.n	8015d9c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b80:	2200      	movs	r2, #0
 8015b82:	60bb      	str	r3, [r7, #8]
 8015b84:	60fa      	str	r2, [r7, #12]
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8015c7c <UART_SetConfig+0x2fc>)
 8015b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	2200      	movs	r2, #0
 8015b94:	603b      	str	r3, [r7, #0]
 8015b96:	607a      	str	r2, [r7, #4]
 8015b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ba0:	f7ea fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	4610      	mov	r0, r2
 8015baa:	4619      	mov	r1, r3
 8015bac:	f04f 0200 	mov.w	r2, #0
 8015bb0:	f04f 0300 	mov.w	r3, #0
 8015bb4:	020b      	lsls	r3, r1, #8
 8015bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015bba:	0202      	lsls	r2, r0, #8
 8015bbc:	6979      	ldr	r1, [r7, #20]
 8015bbe:	6849      	ldr	r1, [r1, #4]
 8015bc0:	0849      	lsrs	r1, r1, #1
 8015bc2:	2000      	movs	r0, #0
 8015bc4:	460c      	mov	r4, r1
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	eb12 0804 	adds.w	r8, r2, r4
 8015bcc:	eb43 0905 	adc.w	r9, r3, r5
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	469a      	mov	sl, r3
 8015bd8:	4693      	mov	fp, r2
 8015bda:	4652      	mov	r2, sl
 8015bdc:	465b      	mov	r3, fp
 8015bde:	4640      	mov	r0, r8
 8015be0:	4649      	mov	r1, r9
 8015be2:	f7ea fb6d 	bl	80002c0 <__aeabi_uldivmod>
 8015be6:	4602      	mov	r2, r0
 8015be8:	460b      	mov	r3, r1
 8015bea:	4613      	mov	r3, r2
 8015bec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015bee:	6a3b      	ldr	r3, [r7, #32]
 8015bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015bf4:	d308      	bcc.n	8015c08 <UART_SetConfig+0x288>
 8015bf6:	6a3b      	ldr	r3, [r7, #32]
 8015bf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015bfc:	d204      	bcs.n	8015c08 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	6a3a      	ldr	r2, [r7, #32]
 8015c04:	60da      	str	r2, [r3, #12]
 8015c06:	e0c9      	b.n	8015d9c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015c0e:	e0c5      	b.n	8015d9c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	69db      	ldr	r3, [r3, #28]
 8015c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015c18:	d16d      	bne.n	8015cf6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8015c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015c1e:	3b01      	subs	r3, #1
 8015c20:	2b07      	cmp	r3, #7
 8015c22:	d82d      	bhi.n	8015c80 <UART_SetConfig+0x300>
 8015c24:	a201      	add	r2, pc, #4	@ (adr r2, 8015c2c <UART_SetConfig+0x2ac>)
 8015c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c2a:	bf00      	nop
 8015c2c:	08015c4d 	.word	0x08015c4d
 8015c30:	08015c55 	.word	0x08015c55
 8015c34:	08015c81 	.word	0x08015c81
 8015c38:	08015c5b 	.word	0x08015c5b
 8015c3c:	08015c81 	.word	0x08015c81
 8015c40:	08015c81 	.word	0x08015c81
 8015c44:	08015c81 	.word	0x08015c81
 8015c48:	08015c63 	.word	0x08015c63
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c4c:	f7ff f91a 	bl	8014e84 <HAL_RCC_GetPCLK2Freq>
 8015c50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c52:	e01b      	b.n	8015c8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c54:	4b08      	ldr	r3, [pc, #32]	@ (8015c78 <UART_SetConfig+0x2f8>)
 8015c56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c58:	e018      	b.n	8015c8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c5a:	f7ff f87d 	bl	8014d58 <HAL_RCC_GetSysClockFreq>
 8015c5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c60:	e014      	b.n	8015c8c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c68:	e010      	b.n	8015c8c <UART_SetConfig+0x30c>
 8015c6a:	bf00      	nop
 8015c6c:	cfff69f3 	.word	0xcfff69f3
 8015c70:	40008000 	.word	0x40008000
 8015c74:	40013800 	.word	0x40013800
 8015c78:	00f42400 	.word	0x00f42400
 8015c7c:	08017ad4 	.word	0x08017ad4
      default:
        pclk = 0U;
 8015c80:	2300      	movs	r3, #0
 8015c82:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015c84:	2301      	movs	r3, #1
 8015c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f000 8084 	beq.w	8015d9c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c98:	4a4b      	ldr	r2, [pc, #300]	@ (8015dc8 <UART_SetConfig+0x448>)
 8015c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ca6:	005a      	lsls	r2, r3, #1
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	085b      	lsrs	r3, r3, #1
 8015cae:	441a      	add	r2, r3
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cb8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015cba:	6a3b      	ldr	r3, [r7, #32]
 8015cbc:	2b0f      	cmp	r3, #15
 8015cbe:	d916      	bls.n	8015cee <UART_SetConfig+0x36e>
 8015cc0:	6a3b      	ldr	r3, [r7, #32]
 8015cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cc6:	d212      	bcs.n	8015cee <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015cc8:	6a3b      	ldr	r3, [r7, #32]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	f023 030f 	bic.w	r3, r3, #15
 8015cd0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015cd2:	6a3b      	ldr	r3, [r7, #32]
 8015cd4:	085b      	lsrs	r3, r3, #1
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	f003 0307 	and.w	r3, r3, #7
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	8bfb      	ldrh	r3, [r7, #30]
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	8bfa      	ldrh	r2, [r7, #30]
 8015cea:	60da      	str	r2, [r3, #12]
 8015cec:	e056      	b.n	8015d9c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015cf4:	e052      	b.n	8015d9c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015cfa:	3b01      	subs	r3, #1
 8015cfc:	2b07      	cmp	r3, #7
 8015cfe:	d822      	bhi.n	8015d46 <UART_SetConfig+0x3c6>
 8015d00:	a201      	add	r2, pc, #4	@ (adr r2, 8015d08 <UART_SetConfig+0x388>)
 8015d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d06:	bf00      	nop
 8015d08:	08015d29 	.word	0x08015d29
 8015d0c:	08015d31 	.word	0x08015d31
 8015d10:	08015d47 	.word	0x08015d47
 8015d14:	08015d37 	.word	0x08015d37
 8015d18:	08015d47 	.word	0x08015d47
 8015d1c:	08015d47 	.word	0x08015d47
 8015d20:	08015d47 	.word	0x08015d47
 8015d24:	08015d3f 	.word	0x08015d3f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015d28:	f7ff f8ac 	bl	8014e84 <HAL_RCC_GetPCLK2Freq>
 8015d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d2e:	e010      	b.n	8015d52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015d30:	4b26      	ldr	r3, [pc, #152]	@ (8015dcc <UART_SetConfig+0x44c>)
 8015d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d34:	e00d      	b.n	8015d52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015d36:	f7ff f80f 	bl	8014d58 <HAL_RCC_GetSysClockFreq>
 8015d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d3c:	e009      	b.n	8015d52 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d44:	e005      	b.n	8015d52 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8015d46:	2300      	movs	r3, #0
 8015d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015d50:	bf00      	nop
    }

    if (pclk != 0U)
 8015d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d021      	beq.n	8015d9c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8015dc8 <UART_SetConfig+0x448>)
 8015d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d62:	461a      	mov	r2, r3
 8015d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d66:	fbb3 f2f2 	udiv	r2, r3, r2
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	085b      	lsrs	r3, r3, #1
 8015d70:	441a      	add	r2, r3
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d7c:	6a3b      	ldr	r3, [r7, #32]
 8015d7e:	2b0f      	cmp	r3, #15
 8015d80:	d909      	bls.n	8015d96 <UART_SetConfig+0x416>
 8015d82:	6a3b      	ldr	r3, [r7, #32]
 8015d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d88:	d205      	bcs.n	8015d96 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015d8a:	6a3b      	ldr	r3, [r7, #32]
 8015d8c:	b29a      	uxth	r2, r3
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	60da      	str	r2, [r3, #12]
 8015d94:	e002      	b.n	8015d9c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015d96:	2301      	movs	r3, #1
 8015d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	2201      	movs	r2, #1
 8015da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	2201      	movs	r2, #1
 8015da8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	2200      	movs	r2, #0
 8015db0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	2200      	movs	r2, #0
 8015db6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015db8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3730      	adds	r7, #48	@ 0x30
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015dc6:	bf00      	nop
 8015dc8:	08017ad4 	.word	0x08017ad4
 8015dcc:	00f42400 	.word	0x00f42400

08015dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015dd0:	b480      	push	{r7}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ddc:	f003 0308 	and.w	r3, r3, #8
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00a      	beq.n	8015dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	430a      	orrs	r2, r1
 8015df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015dfe:	f003 0301 	and.w	r3, r3, #1
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d00a      	beq.n	8015e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	430a      	orrs	r2, r1
 8015e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e20:	f003 0302 	and.w	r3, r3, #2
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00a      	beq.n	8015e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	430a      	orrs	r2, r1
 8015e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e42:	f003 0304 	and.w	r3, r3, #4
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00a      	beq.n	8015e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	430a      	orrs	r2, r1
 8015e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e64:	f003 0310 	and.w	r3, r3, #16
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00a      	beq.n	8015e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	689b      	ldr	r3, [r3, #8]
 8015e72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	430a      	orrs	r2, r1
 8015e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e86:	f003 0320 	and.w	r3, r3, #32
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00a      	beq.n	8015ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	689b      	ldr	r3, [r3, #8]
 8015e94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	430a      	orrs	r2, r1
 8015ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d01a      	beq.n	8015ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	430a      	orrs	r2, r1
 8015ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015ece:	d10a      	bne.n	8015ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	430a      	orrs	r2, r1
 8015ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d00a      	beq.n	8015f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	430a      	orrs	r2, r1
 8015f06:	605a      	str	r2, [r3, #4]
  }
}
 8015f08:	bf00      	nop
 8015f0a:	370c      	adds	r7, #12
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b098      	sub	sp, #96	@ 0x60
 8015f18:	af02      	add	r7, sp, #8
 8015f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015f24:	f7fc fb6e 	bl	8012604 <HAL_GetTick>
 8015f28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f003 0308 	and.w	r3, r3, #8
 8015f34:	2b08      	cmp	r3, #8
 8015f36:	d12f      	bne.n	8015f98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f40:	2200      	movs	r2, #0
 8015f42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 f88e 	bl	8016068 <UART_WaitOnFlagUntilTimeout>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d022      	beq.n	8015f98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f5a:	e853 3f00 	ldrex	r3, [r3]
 8015f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8015f72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015f78:	e841 2300 	strex	r3, r2, [r1]
 8015f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1e6      	bne.n	8015f52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2220      	movs	r2, #32
 8015f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f94:	2303      	movs	r3, #3
 8015f96:	e063      	b.n	8016060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	f003 0304 	and.w	r3, r3, #4
 8015fa2:	2b04      	cmp	r3, #4
 8015fa4:	d149      	bne.n	801603a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015fa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015faa:	9300      	str	r3, [sp, #0]
 8015fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fae:	2200      	movs	r2, #0
 8015fb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f000 f857 	bl	8016068 <UART_WaitOnFlagUntilTimeout>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d03c      	beq.n	801603a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc8:	e853 3f00 	ldrex	r3, [r3]
 8015fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8015fce:	6a3b      	ldr	r3, [r7, #32]
 8015fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	461a      	mov	r2, r3
 8015fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8015fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fe6:	e841 2300 	strex	r3, r2, [r1]
 8015fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d1e6      	bne.n	8015fc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	3308      	adds	r3, #8
 8015ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	e853 3f00 	ldrex	r3, [r3]
 8016000:	60fb      	str	r3, [r7, #12]
   return(result);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	f023 0301 	bic.w	r3, r3, #1
 8016008:	64bb      	str	r3, [r7, #72]	@ 0x48
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	3308      	adds	r3, #8
 8016010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016012:	61fa      	str	r2, [r7, #28]
 8016014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016016:	69b9      	ldr	r1, [r7, #24]
 8016018:	69fa      	ldr	r2, [r7, #28]
 801601a:	e841 2300 	strex	r3, r2, [r1]
 801601e:	617b      	str	r3, [r7, #20]
   return(result);
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d1e5      	bne.n	8015ff2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2220      	movs	r2, #32
 801602a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016036:	2303      	movs	r3, #3
 8016038:	e012      	b.n	8016060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2220      	movs	r2, #32
 801603e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2220      	movs	r2, #32
 8016046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2200      	movs	r2, #0
 801604e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2200      	movs	r2, #0
 8016054:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2200      	movs	r2, #0
 801605a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3758      	adds	r7, #88	@ 0x58
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	60b9      	str	r1, [r7, #8]
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	4613      	mov	r3, r2
 8016076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016078:	e04f      	b.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801607a:	69bb      	ldr	r3, [r7, #24]
 801607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016080:	d04b      	beq.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016082:	f7fc fabf 	bl	8012604 <HAL_GetTick>
 8016086:	4602      	mov	r2, r0
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	1ad3      	subs	r3, r2, r3
 801608c:	69ba      	ldr	r2, [r7, #24]
 801608e:	429a      	cmp	r2, r3
 8016090:	d302      	bcc.n	8016098 <UART_WaitOnFlagUntilTimeout+0x30>
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d101      	bne.n	801609c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016098:	2303      	movs	r3, #3
 801609a:	e04e      	b.n	801613a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	f003 0304 	and.w	r3, r3, #4
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d037      	beq.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	2b80      	cmp	r3, #128	@ 0x80
 80160ae:	d034      	beq.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	2b40      	cmp	r3, #64	@ 0x40
 80160b4:	d031      	beq.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	69db      	ldr	r3, [r3, #28]
 80160bc:	f003 0308 	and.w	r3, r3, #8
 80160c0:	2b08      	cmp	r3, #8
 80160c2:	d110      	bne.n	80160e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2208      	movs	r2, #8
 80160ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80160cc:	68f8      	ldr	r0, [r7, #12]
 80160ce:	f000 f838 	bl	8016142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2208      	movs	r2, #8
 80160d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2200      	movs	r2, #0
 80160de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80160e2:	2301      	movs	r3, #1
 80160e4:	e029      	b.n	801613a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	69db      	ldr	r3, [r3, #28]
 80160ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80160f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80160f4:	d111      	bne.n	801611a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80160fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	f000 f81e 	bl	8016142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2220      	movs	r2, #32
 801610a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8016116:	2303      	movs	r3, #3
 8016118:	e00f      	b.n	801613a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	69da      	ldr	r2, [r3, #28]
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	4013      	ands	r3, r2
 8016124:	68ba      	ldr	r2, [r7, #8]
 8016126:	429a      	cmp	r2, r3
 8016128:	bf0c      	ite	eq
 801612a:	2301      	moveq	r3, #1
 801612c:	2300      	movne	r3, #0
 801612e:	b2db      	uxtb	r3, r3
 8016130:	461a      	mov	r2, r3
 8016132:	79fb      	ldrb	r3, [r7, #7]
 8016134:	429a      	cmp	r2, r3
 8016136:	d0a0      	beq.n	801607a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016142:	b480      	push	{r7}
 8016144:	b095      	sub	sp, #84	@ 0x54
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016152:	e853 3f00 	ldrex	r3, [r3]
 8016156:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8016158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801615a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801615e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	461a      	mov	r2, r3
 8016166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016168:	643b      	str	r3, [r7, #64]	@ 0x40
 801616a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801616c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801616e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016170:	e841 2300 	strex	r3, r2, [r1]
 8016174:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016178:	2b00      	cmp	r3, #0
 801617a:	d1e6      	bne.n	801614a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	3308      	adds	r3, #8
 8016182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016184:	6a3b      	ldr	r3, [r7, #32]
 8016186:	e853 3f00 	ldrex	r3, [r3]
 801618a:	61fb      	str	r3, [r7, #28]
   return(result);
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016192:	f023 0301 	bic.w	r3, r3, #1
 8016196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	3308      	adds	r3, #8
 801619e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80161a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80161a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161a8:	e841 2300 	strex	r3, r2, [r1]
 80161ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80161ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d1e3      	bne.n	801617c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161b8:	2b01      	cmp	r3, #1
 80161ba:	d118      	bne.n	80161ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	e853 3f00 	ldrex	r3, [r3]
 80161c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	f023 0310 	bic.w	r3, r3, #16
 80161d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	461a      	mov	r2, r3
 80161d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161da:	61bb      	str	r3, [r7, #24]
 80161dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161de:	6979      	ldr	r1, [r7, #20]
 80161e0:	69ba      	ldr	r2, [r7, #24]
 80161e2:	e841 2300 	strex	r3, r2, [r1]
 80161e6:	613b      	str	r3, [r7, #16]
   return(result);
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d1e6      	bne.n	80161bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2220      	movs	r2, #32
 80161f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2200      	movs	r2, #0
 80161fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8016202:	bf00      	nop
 8016204:	3754      	adds	r7, #84	@ 0x54
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr

0801620e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801620e:	b480      	push	{r7}
 8016210:	b085      	sub	sp, #20
 8016212:	af00      	add	r7, sp, #0
 8016214:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801621c:	2b01      	cmp	r3, #1
 801621e:	d101      	bne.n	8016224 <HAL_UARTEx_DisableFifoMode+0x16>
 8016220:	2302      	movs	r3, #2
 8016222:	e027      	b.n	8016274 <HAL_UARTEx_DisableFifoMode+0x66>
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2201      	movs	r2, #1
 8016228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2224      	movs	r2, #36	@ 0x24
 8016230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	f022 0201 	bic.w	r2, r2, #1
 801624a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8016252:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	68fa      	ldr	r2, [r7, #12]
 8016260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2220      	movs	r2, #32
 8016266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	2200      	movs	r2, #0
 801626e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016272:	2300      	movs	r3, #0
}
 8016274:	4618      	mov	r0, r3
 8016276:	3714      	adds	r7, #20
 8016278:	46bd      	mov	sp, r7
 801627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627e:	4770      	bx	lr

08016280 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
 8016288:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016290:	2b01      	cmp	r3, #1
 8016292:	d101      	bne.n	8016298 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016294:	2302      	movs	r3, #2
 8016296:	e02d      	b.n	80162f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2201      	movs	r2, #1
 801629c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2224      	movs	r2, #36	@ 0x24
 80162a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	f022 0201 	bic.w	r2, r2, #1
 80162be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	689b      	ldr	r3, [r3, #8]
 80162c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	430a      	orrs	r2, r1
 80162d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f000 f84f 	bl	8016378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2220      	movs	r2, #32
 80162e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2200      	movs	r2, #0
 80162ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80162f2:	2300      	movs	r3, #0
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}

080162fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801630c:	2b01      	cmp	r3, #1
 801630e:	d101      	bne.n	8016314 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016310:	2302      	movs	r3, #2
 8016312:	e02d      	b.n	8016370 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2201      	movs	r2, #1
 8016318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2224      	movs	r2, #36	@ 0x24
 8016320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	681a      	ldr	r2, [r3, #0]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	f022 0201 	bic.w	r2, r2, #1
 801633a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	689b      	ldr	r3, [r3, #8]
 8016342:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	683a      	ldr	r2, [r7, #0]
 801634c:	430a      	orrs	r2, r1
 801634e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f000 f811 	bl	8016378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	2220      	movs	r2, #32
 8016362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016384:	2b00      	cmp	r3, #0
 8016386:	d108      	bne.n	801639a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2201      	movs	r2, #1
 801638c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2201      	movs	r2, #1
 8016394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016398:	e031      	b.n	80163fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801639a:	2308      	movs	r3, #8
 801639c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801639e:	2308      	movs	r3, #8
 80163a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	689b      	ldr	r3, [r3, #8]
 80163a8:	0e5b      	lsrs	r3, r3, #25
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	f003 0307 	and.w	r3, r3, #7
 80163b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	689b      	ldr	r3, [r3, #8]
 80163b8:	0f5b      	lsrs	r3, r3, #29
 80163ba:	b2db      	uxtb	r3, r3
 80163bc:	f003 0307 	and.w	r3, r3, #7
 80163c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163c2:	7bbb      	ldrb	r3, [r7, #14]
 80163c4:	7b3a      	ldrb	r2, [r7, #12]
 80163c6:	4911      	ldr	r1, [pc, #68]	@ (801640c <UARTEx_SetNbDataToProcess+0x94>)
 80163c8:	5c8a      	ldrb	r2, [r1, r2]
 80163ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80163ce:	7b3a      	ldrb	r2, [r7, #12]
 80163d0:	490f      	ldr	r1, [pc, #60]	@ (8016410 <UARTEx_SetNbDataToProcess+0x98>)
 80163d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80163d8:	b29a      	uxth	r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163e0:	7bfb      	ldrb	r3, [r7, #15]
 80163e2:	7b7a      	ldrb	r2, [r7, #13]
 80163e4:	4909      	ldr	r1, [pc, #36]	@ (801640c <UARTEx_SetNbDataToProcess+0x94>)
 80163e6:	5c8a      	ldrb	r2, [r1, r2]
 80163e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80163ec:	7b7a      	ldrb	r2, [r7, #13]
 80163ee:	4908      	ldr	r1, [pc, #32]	@ (8016410 <UARTEx_SetNbDataToProcess+0x98>)
 80163f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80163fe:	bf00      	nop
 8016400:	3714      	adds	r7, #20
 8016402:	46bd      	mov	sp, r7
 8016404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016408:	4770      	bx	lr
 801640a:	bf00      	nop
 801640c:	08017aec 	.word	0x08017aec
 8016410:	08017af4 	.word	0x08017af4

08016414 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801641c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8016420:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8016428:	b29a      	uxth	r2, r3
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	b29b      	uxth	r3, r3
 801642e:	43db      	mvns	r3, r3
 8016430:	b29b      	uxth	r3, r3
 8016432:	4013      	ands	r3, r2
 8016434:	b29a      	uxth	r2, r3
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801643c:	2300      	movs	r3, #0
}
 801643e:	4618      	mov	r0, r3
 8016440:	3714      	adds	r7, #20
 8016442:	46bd      	mov	sp, r7
 8016444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016448:	4770      	bx	lr

0801644a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801644a:	b480      	push	{r7}
 801644c:	b085      	sub	sp, #20
 801644e:	af00      	add	r7, sp, #0
 8016450:	60f8      	str	r0, [r7, #12]
 8016452:	1d3b      	adds	r3, r7, #4
 8016454:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	2201      	movs	r2, #1
 801645c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2200      	movs	r2, #0
 8016464:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2200      	movs	r2, #0
 801646c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8016478:	2300      	movs	r3, #0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3714      	adds	r7, #20
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr

08016486 <MX_TOF_Init>:
static void MX_53L4A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);
static int32_t decimal_part(float_t x);

void MX_TOF_Init(void)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L4A2_SimpleRanging_Init();
 801648a:	f000 f809 	bl	80164a0 <MX_53L4A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 801648e:	bf00      	nop
 8016490:	bd80      	pop	{r7, pc}

08016492 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8016492:	b580      	push	{r7, lr}
 8016494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L4A2_SimpleRanging_Process();
 8016496:	f000 f839 	bl	801650c <MX_53L4A2_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 801649a:	bf00      	nop
 801649c:	bd80      	pop	{r7, pc}
	...

080164a0 <MX_53L4A2_SimpleRanging_Init>:

static void MX_53L4A2_SimpleRanging_Init(void)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80164a4:	2000      	movs	r0, #0
 80164a6:	f7fb ff71 	bl	801238c <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80164aa:	2101      	movs	r1, #1
 80164ac:	2000      	movs	r0, #0
 80164ae:	f7fb fedf 	bl	8012270 <BSP_PB_Init>

  /* reset XSHUT (XSDN) pin */
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_RESET);
 80164b2:	2200      	movs	r2, #0
 80164b4:	2102      	movs	r1, #2
 80164b6:	4811      	ldr	r0, [pc, #68]	@ (80164fc <MX_53L4A2_SimpleRanging_Init+0x5c>)
 80164b8:	f7fc fc9a 	bl	8012df0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80164bc:	2002      	movs	r0, #2
 80164be:	f7fc f8b9 	bl	8012634 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_SET);
 80164c2:	2201      	movs	r2, #1
 80164c4:	2102      	movs	r1, #2
 80164c6:	480d      	ldr	r0, [pc, #52]	@ (80164fc <MX_53L4A2_SimpleRanging_Init+0x5c>)
 80164c8:	f7fc fc92 	bl	8012df0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80164cc:	2002      	movs	r0, #2
 80164ce:	f7fc f8b1 	bl	8012634 <HAL_Delay>

  printf("53L4A2 Simple Ranging demo application\n");
 80164d2:	480b      	ldr	r0, [pc, #44]	@ (8016500 <MX_53L4A2_SimpleRanging_Init+0x60>)
 80164d4:	f000 faf4 	bl	8016ac0 <puts>
  status = VL53L4A2_RANGING_SENSOR_Init(VL53L4A2_DEV_CENTER);
 80164d8:	2001      	movs	r0, #1
 80164da:	f7ea fd92 	bl	8001002 <VL53L4A2_RANGING_SENSOR_Init>
 80164de:	4603      	mov	r3, r0
 80164e0:	4a08      	ldr	r2, [pc, #32]	@ (8016504 <MX_53L4A2_SimpleRanging_Init+0x64>)
 80164e2:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80164e4:	4b07      	ldr	r3, [pc, #28]	@ (8016504 <MX_53L4A2_SimpleRanging_Init+0x64>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d004      	beq.n	80164f6 <MX_53L4A2_SimpleRanging_Init+0x56>
  {
    printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
 80164ec:	4806      	ldr	r0, [pc, #24]	@ (8016508 <MX_53L4A2_SimpleRanging_Init+0x68>)
 80164ee:	f000 fae7 	bl	8016ac0 <puts>
    while (1);
 80164f2:	bf00      	nop
 80164f4:	e7fd      	b.n	80164f2 <MX_53L4A2_SimpleRanging_Init+0x52>
  }
}
 80164f6:	bf00      	nop
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	48000400 	.word	0x48000400
 8016500:	08017884 	.word	0x08017884
 8016504:	20007588 	.word	0x20007588
 8016508:	080178ac 	.word	0x080178ac

0801650c <MX_53L4A2_SimpleRanging_Process>:

static void MX_53L4A2_SimpleRanging_Process(void)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
  uint8_t i;
  uint32_t cal_distance_mm = 100; /* target distance used for offset calibration */
 8016512:	2364      	movs	r3, #100	@ 0x64
 8016514:	60bb      	str	r3, [r7, #8]
  uint32_t Id;

  VL53L4A2_RANGING_SENSOR_ReadID(VL53L4A2_DEV_CENTER, &Id);
 8016516:	1d3b      	adds	r3, r7, #4
 8016518:	4619      	mov	r1, r3
 801651a:	2001      	movs	r0, #1
 801651c:	f7ea fd86 	bl	800102c <VL53L4A2_RANGING_SENSOR_ReadID>
  VL53L4A2_RANGING_SENSOR_GetCapabilities(VL53L4A2_DEV_CENTER, &Cap);
 8016520:	4941      	ldr	r1, [pc, #260]	@ (8016628 <MX_53L4A2_SimpleRanging_Process+0x11c>)
 8016522:	2001      	movs	r0, #1
 8016524:	f7ea fdaa 	bl	800107c <VL53L4A2_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8016528:	4b40      	ldr	r3, [pc, #256]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 801652a:	2202      	movs	r2, #2
 801652c:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 801652e:	4b3f      	ldr	r3, [pc, #252]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016530:	221e      	movs	r2, #30
 8016532:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 8016534:	4b3d      	ldr	r3, [pc, #244]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016536:	2200      	movs	r2, #0
 8016538:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 801653a:	4b3c      	ldr	r3, [pc, #240]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 801653c:	2201      	movs	r2, #1
 801653e:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8016540:	4b3a      	ldr	r3, [pc, #232]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016542:	2201      	movs	r2, #1
 8016544:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L4A2_RANGING_SENSOR_ConfigProfile(VL53L4A2_DEV_CENTER, &Profile);
 8016546:	4939      	ldr	r1, [pc, #228]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016548:	2001      	movs	r0, #1
 801654a:	f7ea fdbf 	bl	80010cc <VL53L4A2_RANGING_SENSOR_ConfigProfile>

  printf("--- OFFSET CALIBRATION ---\n");
 801654e:	4838      	ldr	r0, [pc, #224]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x124>)
 8016550:	f000 fab6 	bl	8016ac0 <puts>
  printf("Please put a target at %lu mm\n", (unsigned long)cal_distance_mm);
 8016554:	68b9      	ldr	r1, [r7, #8]
 8016556:	4837      	ldr	r0, [pc, #220]	@ (8016634 <MX_53L4A2_SimpleRanging_Process+0x128>)
 8016558:	f000 fa42 	bl	80169e0 <iprintf>
  printf("Press the user button to continue...\n");
 801655c:	4836      	ldr	r0, [pc, #216]	@ (8016638 <MX_53L4A2_SimpleRanging_Process+0x12c>)
 801655e:	f000 faaf 	bl	8016ac0 <puts>

  /* wait until the button is pressed */
  while (PushButtonDetected != 1);
 8016562:	bf00      	nop
 8016564:	4b35      	ldr	r3, [pc, #212]	@ (801663c <MX_53L4A2_SimpleRanging_Process+0x130>)
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	b2db      	uxtb	r3, r3
 801656a:	2b01      	cmp	r3, #1
 801656c:	d1fa      	bne.n	8016564 <MX_53L4A2_SimpleRanging_Process+0x58>
  PushButtonDetected = 0;
 801656e:	4b33      	ldr	r3, [pc, #204]	@ (801663c <MX_53L4A2_SimpleRanging_Process+0x130>)
 8016570:	2200      	movs	r2, #0
 8016572:	701a      	strb	r2, [r3, #0]

  printf("--- BEGIN OFFSET CALIBRATION ---\n");
 8016574:	4832      	ldr	r0, [pc, #200]	@ (8016640 <MX_53L4A2_SimpleRanging_Process+0x134>)
 8016576:	f000 faa3 	bl	8016ac0 <puts>
  /* make sure that a target is placed at cal_distance_mm (100 mm is the default value in this example)
   * the application will perform some measure in order to have a log of some pre-calibration values
   */
  status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 801657a:	2101      	movs	r1, #1
 801657c:	2001      	movs	r0, #1
 801657e:	f7ea fdf5 	bl	800116c <VL53L4A2_RANGING_SENSOR_Start>
 8016582:	4603      	mov	r3, r0
 8016584:	4a2f      	ldr	r2, [pc, #188]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 8016586:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8016588:	4b2e      	ldr	r3, [pc, #184]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d004      	beq.n	801659a <MX_53L4A2_SimpleRanging_Process+0x8e>
  {
    printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 8016590:	482d      	ldr	r0, [pc, #180]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x13c>)
 8016592:	f000 fa95 	bl	8016ac0 <puts>
    while (1);
 8016596:	bf00      	nop
 8016598:	e7fd      	b.n	8016596 <MX_53L4A2_SimpleRanging_Process+0x8a>
  }

  /* Pre-calibration ranging */
  for (i = 0; i < 10; i++)
 801659a:	2300      	movs	r3, #0
 801659c:	73fb      	strb	r3, [r7, #15]
 801659e:	e013      	b.n	80165c8 <MX_53L4A2_SimpleRanging_Process+0xbc>
  {
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 80165a0:	492a      	ldr	r1, [pc, #168]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x140>)
 80165a2:	2001      	movs	r0, #1
 80165a4:	f7ea fdba 	bl	800111c <VL53L4A2_RANGING_SENSOR_GetDistance>
 80165a8:	4603      	mov	r3, r0
 80165aa:	4a26      	ldr	r2, [pc, #152]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165ac:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 80165ae:	4b25      	ldr	r3, [pc, #148]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d102      	bne.n	80165bc <MX_53L4A2_SimpleRanging_Process+0xb0>
    {
      print_result(&Result);
 80165b6:	4825      	ldr	r0, [pc, #148]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x140>)
 80165b8:	f000 f84c 	bl	8016654 <print_result>
    }

    HAL_Delay(POLLING_PERIOD);
 80165bc:	20fa      	movs	r0, #250	@ 0xfa
 80165be:	f7fc f839 	bl	8012634 <HAL_Delay>
  for (i = 0; i < 10; i++)
 80165c2:	7bfb      	ldrb	r3, [r7, #15]
 80165c4:	3301      	adds	r3, #1
 80165c6:	73fb      	strb	r3, [r7, #15]
 80165c8:	7bfb      	ldrb	r3, [r7, #15]
 80165ca:	2b09      	cmp	r3, #9
 80165cc:	d9e8      	bls.n	80165a0 <MX_53L4A2_SimpleRanging_Process+0x94>
  }

  /* stop ranging and perform offset calibration */
  VL53L4A2_RANGING_SENSOR_Stop(VL53L4A2_DEV_CENTER);
 80165ce:	2001      	movs	r0, #1
 80165d0:	f7ea fdf4 	bl	80011bc <VL53L4A2_RANGING_SENSOR_Stop>
  VL53L4A2_RANGING_SENSOR_OffsetCalibration(VL53L4A2_DEV_CENTER, cal_distance_mm);
 80165d4:	68b9      	ldr	r1, [r7, #8]
 80165d6:	2001      	movs	r0, #1
 80165d8:	f7ea fe16 	bl	8001208 <VL53L4A2_RANGING_SENSOR_OffsetCalibration>
  printf("--- END OF OFFSET CALIBRATION ---\n");
 80165dc:	481c      	ldr	r0, [pc, #112]	@ (8016650 <MX_53L4A2_SimpleRanging_Process+0x144>)
 80165de:	f000 fa6f 	bl	8016ac0 <puts>

  status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80165e2:	2101      	movs	r1, #1
 80165e4:	2001      	movs	r0, #1
 80165e6:	f7ea fdc1 	bl	800116c <VL53L4A2_RANGING_SENSOR_Start>
 80165ea:	4603      	mov	r3, r0
 80165ec:	4a15      	ldr	r2, [pc, #84]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165ee:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80165f0:	4b14      	ldr	r3, [pc, #80]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d004      	beq.n	8016602 <MX_53L4A2_SimpleRanging_Process+0xf6>
  {
    printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 80165f8:	4813      	ldr	r0, [pc, #76]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x13c>)
 80165fa:	f000 fa61 	bl	8016ac0 <puts>
    while (1);
 80165fe:	bf00      	nop
 8016600:	e7fd      	b.n	80165fe <MX_53L4A2_SimpleRanging_Process+0xf2>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8016602:	4912      	ldr	r1, [pc, #72]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x140>)
 8016604:	2001      	movs	r0, #1
 8016606:	f7ea fd89 	bl	800111c <VL53L4A2_RANGING_SENSOR_GetDistance>
 801660a:	4603      	mov	r3, r0
 801660c:	4a0d      	ldr	r2, [pc, #52]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 801660e:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 8016610:	4b0c      	ldr	r3, [pc, #48]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x138>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d102      	bne.n	801661e <MX_53L4A2_SimpleRanging_Process+0x112>
    {
      print_result(&Result);
 8016618:	480c      	ldr	r0, [pc, #48]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x140>)
 801661a:	f000 f81b 	bl	8016654 <print_result>
    }

    HAL_Delay(POLLING_PERIOD);
 801661e:	20fa      	movs	r0, #250	@ 0xfa
 8016620:	f7fc f808 	bl	8012634 <HAL_Delay>
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8016624:	e7ed      	b.n	8016602 <MX_53L4A2_SimpleRanging_Process+0xf6>
 8016626:	bf00      	nop
 8016628:	2000751c 	.word	0x2000751c
 801662c:	2000752c 	.word	0x2000752c
 8016630:	080178d0 	.word	0x080178d0
 8016634:	080178ec 	.word	0x080178ec
 8016638:	0801790c 	.word	0x0801790c
 801663c:	2000758c 	.word	0x2000758c
 8016640:	08017934 	.word	0x08017934
 8016644:	20007588 	.word	0x20007588
 8016648:	08017958 	.word	0x08017958
 801664c:	20007540 	.word	0x20007540
 8016650:	08017980 	.word	0x08017980

08016654 <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8016654:	b590      	push	{r4, r7, lr}
 8016656:	ed2d 8b02 	vpush	{d8}
 801665a:	b085      	sub	sp, #20
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8016660:	2300      	movs	r3, #0
 8016662:	73fb      	strb	r3, [r7, #15]
 8016664:	e096      	b.n	8016794 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8016666:	7bfa      	ldrb	r2, [r7, #15]
 8016668:	6879      	ldr	r1, [r7, #4]
 801666a:	4613      	mov	r3, r2
 801666c:	011b      	lsls	r3, r3, #4
 801666e:	4413      	add	r3, r2
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	440b      	add	r3, r1
 8016674:	3304      	adds	r3, #4
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	4619      	mov	r1, r3
 801667a:	484d      	ldr	r0, [pc, #308]	@ (80167b0 <print_result+0x15c>)
 801667c:	f000 f9b0 	bl	80169e0 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8016680:	2300      	movs	r3, #0
 8016682:	73bb      	strb	r3, [r7, #14]
 8016684:	e076      	b.n	8016774 <print_result+0x120>
    {
      printf("\n |---> ");
 8016686:	484b      	ldr	r0, [pc, #300]	@ (80167b4 <print_result+0x160>)
 8016688:	f000 f9aa 	bl	80169e0 <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 801668c:	7bfa      	ldrb	r2, [r7, #15]
 801668e:	7bb8      	ldrb	r0, [r7, #14]
 8016690:	6879      	ldr	r1, [r7, #4]
 8016692:	4613      	mov	r3, r2
 8016694:	011b      	lsls	r3, r3, #4
 8016696:	4413      	add	r3, r2
 8016698:	4403      	add	r3, r0
 801669a:	3304      	adds	r3, #4
 801669c:	009b      	lsls	r3, r3, #2
 801669e:	440b      	add	r3, r1
 80166a0:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80166a2:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 80166a4:	7bfa      	ldrb	r2, [r7, #15]
 80166a6:	7bb8      	ldrb	r0, [r7, #14]
 80166a8:	6879      	ldr	r1, [r7, #4]
 80166aa:	4613      	mov	r3, r2
 80166ac:	011b      	lsls	r3, r3, #4
 80166ae:	4413      	add	r3, r2
 80166b0:	4403      	add	r3, r0
 80166b2:	009b      	lsls	r3, r3, #2
 80166b4:	440b      	add	r3, r1
 80166b6:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80166b8:	461a      	mov	r2, r3
 80166ba:	4621      	mov	r1, r4
 80166bc:	483e      	ldr	r0, [pc, #248]	@ (80167b8 <print_result+0x164>)
 80166be:	f000 f98f 	bl	80169e0 <iprintf>

      if (Profile.EnableAmbient)
 80166c2:	4b3e      	ldr	r3, [pc, #248]	@ (80167bc <print_result+0x168>)
 80166c4:	68db      	ldr	r3, [r3, #12]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d026      	beq.n	8016718 <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 80166ca:	7bfa      	ldrb	r2, [r7, #15]
 80166cc:	7bb8      	ldrb	r0, [r7, #14]
 80166ce:	6879      	ldr	r1, [r7, #4]
 80166d0:	4613      	mov	r3, r2
 80166d2:	011b      	lsls	r3, r3, #4
 80166d4:	4413      	add	r3, r2
 80166d6:	4403      	add	r3, r0
 80166d8:	3308      	adds	r3, #8
 80166da:	009b      	lsls	r3, r3, #2
 80166dc:	440b      	add	r3, r1
 80166de:	3308      	adds	r3, #8
 80166e0:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 80166e4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 80166e8:	7bfa      	ldrb	r2, [r7, #15]
 80166ea:	7bb8      	ldrb	r0, [r7, #14]
 80166ec:	6879      	ldr	r1, [r7, #4]
 80166ee:	4613      	mov	r3, r2
 80166f0:	011b      	lsls	r3, r3, #4
 80166f2:	4413      	add	r3, r2
 80166f4:	4403      	add	r3, r0
 80166f6:	3308      	adds	r3, #8
 80166f8:	009b      	lsls	r3, r3, #2
 80166fa:	440b      	add	r3, r1
 80166fc:	3308      	adds	r3, #8
 80166fe:	edd3 7a00 	vldr	s15, [r3]
 8016702:	eeb0 0a67 	vmov.f32	s0, s15
 8016706:	f000 f85f 	bl	80167c8 <decimal_part>
 801670a:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 801670c:	461a      	mov	r2, r3
 801670e:	ee18 1a10 	vmov	r1, s16
 8016712:	482b      	ldr	r0, [pc, #172]	@ (80167c0 <print_result+0x16c>)
 8016714:	f000 f964 	bl	80169e0 <iprintf>

      if (Profile.EnableSignal)
 8016718:	4b28      	ldr	r3, [pc, #160]	@ (80167bc <print_result+0x168>)
 801671a:	691b      	ldr	r3, [r3, #16]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d026      	beq.n	801676e <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8016720:	7bfa      	ldrb	r2, [r7, #15]
 8016722:	7bb8      	ldrb	r0, [r7, #14]
 8016724:	6879      	ldr	r1, [r7, #4]
 8016726:	4613      	mov	r3, r2
 8016728:	011b      	lsls	r3, r3, #4
 801672a:	4413      	add	r3, r2
 801672c:	4403      	add	r3, r0
 801672e:	330c      	adds	r3, #12
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	440b      	add	r3, r1
 8016734:	3308      	adds	r3, #8
 8016736:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 801673a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 801673e:	7bfa      	ldrb	r2, [r7, #15]
 8016740:	7bb8      	ldrb	r0, [r7, #14]
 8016742:	6879      	ldr	r1, [r7, #4]
 8016744:	4613      	mov	r3, r2
 8016746:	011b      	lsls	r3, r3, #4
 8016748:	4413      	add	r3, r2
 801674a:	4403      	add	r3, r0
 801674c:	330c      	adds	r3, #12
 801674e:	009b      	lsls	r3, r3, #2
 8016750:	440b      	add	r3, r1
 8016752:	3308      	adds	r3, #8
 8016754:	edd3 7a00 	vldr	s15, [r3]
 8016758:	eeb0 0a67 	vmov.f32	s0, s15
 801675c:	f000 f834 	bl	80167c8 <decimal_part>
 8016760:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 8016762:	461a      	mov	r2, r3
 8016764:	ee18 1a10 	vmov	r1, s16
 8016768:	4816      	ldr	r0, [pc, #88]	@ (80167c4 <print_result+0x170>)
 801676a:	f000 f939 	bl	80169e0 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 801676e:	7bbb      	ldrb	r3, [r7, #14]
 8016770:	3301      	adds	r3, #1
 8016772:	73bb      	strb	r3, [r7, #14]
 8016774:	7bb9      	ldrb	r1, [r7, #14]
 8016776:	7bfa      	ldrb	r2, [r7, #15]
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	4613      	mov	r3, r2
 801677c:	011b      	lsls	r3, r3, #4
 801677e:	4413      	add	r3, r2
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	4403      	add	r3, r0
 8016784:	3304      	adds	r3, #4
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4299      	cmp	r1, r3
 801678a:	f4ff af7c 	bcc.w	8016686 <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801678e:	7bfb      	ldrb	r3, [r7, #15]
 8016790:	3301      	adds	r3, #1
 8016792:	73fb      	strb	r3, [r7, #15]
 8016794:	7bfb      	ldrb	r3, [r7, #15]
 8016796:	2b00      	cmp	r3, #0
 8016798:	f43f af65 	beq.w	8016666 <print_result+0x12>
    }
  }
  printf("\n");
 801679c:	200a      	movs	r0, #10
 801679e:	f000 f931 	bl	8016a04 <putchar>
}
 80167a2:	bf00      	nop
 80167a4:	3714      	adds	r7, #20
 80167a6:	46bd      	mov	sp, r7
 80167a8:	ecbd 8b02 	vpop	{d8}
 80167ac:	bd90      	pop	{r4, r7, pc}
 80167ae:	bf00      	nop
 80167b0:	080179a4 	.word	0x080179a4
 80167b4:	080179b4 	.word	0x080179b4
 80167b8:	080179c0 	.word	0x080179c0
 80167bc:	2000752c 	.word	0x2000752c
 80167c0:	080179e4 	.word	0x080179e4
 80167c4:	08017a04 	.word	0x08017a04

080167c8 <decimal_part>:

static int32_t decimal_part(float_t x)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 80167d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80167d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167da:	ee17 3a90 	vmov	r3, s15
 80167de:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	ee07 3a90 	vmov	s15, r3
 80167e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80167ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016810 <decimal_part+0x48>
 80167f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167fe:	ee17 3a90 	vmov	r3, s15
}
 8016802:	4618      	mov	r0, r3
 8016804:	3714      	adds	r7, #20
 8016806:	46bd      	mov	sp, r7
 8016808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680c:	4770      	bx	lr
 801680e:	bf00      	nop
 8016810:	42c80000 	.word	0x42c80000

08016814 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8016814:	b480      	push	{r7}
 8016816:	b083      	sub	sp, #12
 8016818:	af00      	add	r7, sp, #0
 801681a:	4603      	mov	r3, r0
 801681c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 801681e:	4b04      	ldr	r3, [pc, #16]	@ (8016830 <BSP_PB_Callback+0x1c>)
 8016820:	2201      	movs	r2, #1
 8016822:	701a      	strb	r2, [r3, #0]
}
 8016824:	bf00      	nop
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682e:	4770      	bx	lr
 8016830:	2000758c 	.word	0x2000758c

08016834 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	4603      	mov	r3, r0
 801683c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 801683e:	88fb      	ldrh	r3, [r7, #6]
 8016840:	2b01      	cmp	r3, #1
 8016842:	d102      	bne.n	801684a <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8016844:	4b04      	ldr	r3, [pc, #16]	@ (8016858 <HAL_GPIO_EXTI_Callback+0x24>)
 8016846:	2201      	movs	r2, #1
 8016848:	701a      	strb	r2, [r3, #0]
  }
}
 801684a:	bf00      	nop
 801684c:	370c      	adds	r7, #12
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	2000758d 	.word	0x2000758d

0801685c <std>:
 801685c:	2300      	movs	r3, #0
 801685e:	b510      	push	{r4, lr}
 8016860:	4604      	mov	r4, r0
 8016862:	e9c0 3300 	strd	r3, r3, [r0]
 8016866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801686a:	6083      	str	r3, [r0, #8]
 801686c:	8181      	strh	r1, [r0, #12]
 801686e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016870:	81c2      	strh	r2, [r0, #14]
 8016872:	6183      	str	r3, [r0, #24]
 8016874:	4619      	mov	r1, r3
 8016876:	2208      	movs	r2, #8
 8016878:	305c      	adds	r0, #92	@ 0x5c
 801687a:	f000 fa01 	bl	8016c80 <memset>
 801687e:	4b0d      	ldr	r3, [pc, #52]	@ (80168b4 <std+0x58>)
 8016880:	6263      	str	r3, [r4, #36]	@ 0x24
 8016882:	4b0d      	ldr	r3, [pc, #52]	@ (80168b8 <std+0x5c>)
 8016884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016886:	4b0d      	ldr	r3, [pc, #52]	@ (80168bc <std+0x60>)
 8016888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801688a:	4b0d      	ldr	r3, [pc, #52]	@ (80168c0 <std+0x64>)
 801688c:	6323      	str	r3, [r4, #48]	@ 0x30
 801688e:	4b0d      	ldr	r3, [pc, #52]	@ (80168c4 <std+0x68>)
 8016890:	6224      	str	r4, [r4, #32]
 8016892:	429c      	cmp	r4, r3
 8016894:	d006      	beq.n	80168a4 <std+0x48>
 8016896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801689a:	4294      	cmp	r4, r2
 801689c:	d002      	beq.n	80168a4 <std+0x48>
 801689e:	33d0      	adds	r3, #208	@ 0xd0
 80168a0:	429c      	cmp	r4, r3
 80168a2:	d105      	bne.n	80168b0 <std+0x54>
 80168a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80168a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ac:	f000 ba74 	b.w	8016d98 <__retarget_lock_init_recursive>
 80168b0:	bd10      	pop	{r4, pc}
 80168b2:	bf00      	nop
 80168b4:	08016ad1 	.word	0x08016ad1
 80168b8:	08016af3 	.word	0x08016af3
 80168bc:	08016b2b 	.word	0x08016b2b
 80168c0:	08016b4f 	.word	0x08016b4f
 80168c4:	20007590 	.word	0x20007590

080168c8 <stdio_exit_handler>:
 80168c8:	4a02      	ldr	r2, [pc, #8]	@ (80168d4 <stdio_exit_handler+0xc>)
 80168ca:	4903      	ldr	r1, [pc, #12]	@ (80168d8 <stdio_exit_handler+0x10>)
 80168cc:	4803      	ldr	r0, [pc, #12]	@ (80168dc <stdio_exit_handler+0x14>)
 80168ce:	f000 b869 	b.w	80169a4 <_fwalk_sglue>
 80168d2:	bf00      	nop
 80168d4:	20000084 	.word	0x20000084
 80168d8:	08017655 	.word	0x08017655
 80168dc:	20000094 	.word	0x20000094

080168e0 <cleanup_stdio>:
 80168e0:	6841      	ldr	r1, [r0, #4]
 80168e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016914 <cleanup_stdio+0x34>)
 80168e4:	4299      	cmp	r1, r3
 80168e6:	b510      	push	{r4, lr}
 80168e8:	4604      	mov	r4, r0
 80168ea:	d001      	beq.n	80168f0 <cleanup_stdio+0x10>
 80168ec:	f000 feb2 	bl	8017654 <_fflush_r>
 80168f0:	68a1      	ldr	r1, [r4, #8]
 80168f2:	4b09      	ldr	r3, [pc, #36]	@ (8016918 <cleanup_stdio+0x38>)
 80168f4:	4299      	cmp	r1, r3
 80168f6:	d002      	beq.n	80168fe <cleanup_stdio+0x1e>
 80168f8:	4620      	mov	r0, r4
 80168fa:	f000 feab 	bl	8017654 <_fflush_r>
 80168fe:	68e1      	ldr	r1, [r4, #12]
 8016900:	4b06      	ldr	r3, [pc, #24]	@ (801691c <cleanup_stdio+0x3c>)
 8016902:	4299      	cmp	r1, r3
 8016904:	d004      	beq.n	8016910 <cleanup_stdio+0x30>
 8016906:	4620      	mov	r0, r4
 8016908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801690c:	f000 bea2 	b.w	8017654 <_fflush_r>
 8016910:	bd10      	pop	{r4, pc}
 8016912:	bf00      	nop
 8016914:	20007590 	.word	0x20007590
 8016918:	200075f8 	.word	0x200075f8
 801691c:	20007660 	.word	0x20007660

08016920 <global_stdio_init.part.0>:
 8016920:	b510      	push	{r4, lr}
 8016922:	4b0b      	ldr	r3, [pc, #44]	@ (8016950 <global_stdio_init.part.0+0x30>)
 8016924:	4c0b      	ldr	r4, [pc, #44]	@ (8016954 <global_stdio_init.part.0+0x34>)
 8016926:	4a0c      	ldr	r2, [pc, #48]	@ (8016958 <global_stdio_init.part.0+0x38>)
 8016928:	601a      	str	r2, [r3, #0]
 801692a:	4620      	mov	r0, r4
 801692c:	2200      	movs	r2, #0
 801692e:	2104      	movs	r1, #4
 8016930:	f7ff ff94 	bl	801685c <std>
 8016934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016938:	2201      	movs	r2, #1
 801693a:	2109      	movs	r1, #9
 801693c:	f7ff ff8e 	bl	801685c <std>
 8016940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016944:	2202      	movs	r2, #2
 8016946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801694a:	2112      	movs	r1, #18
 801694c:	f7ff bf86 	b.w	801685c <std>
 8016950:	200076c8 	.word	0x200076c8
 8016954:	20007590 	.word	0x20007590
 8016958:	080168c9 	.word	0x080168c9

0801695c <__sfp_lock_acquire>:
 801695c:	4801      	ldr	r0, [pc, #4]	@ (8016964 <__sfp_lock_acquire+0x8>)
 801695e:	f000 ba1c 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8016962:	bf00      	nop
 8016964:	200076d1 	.word	0x200076d1

08016968 <__sfp_lock_release>:
 8016968:	4801      	ldr	r0, [pc, #4]	@ (8016970 <__sfp_lock_release+0x8>)
 801696a:	f000 ba17 	b.w	8016d9c <__retarget_lock_release_recursive>
 801696e:	bf00      	nop
 8016970:	200076d1 	.word	0x200076d1

08016974 <__sinit>:
 8016974:	b510      	push	{r4, lr}
 8016976:	4604      	mov	r4, r0
 8016978:	f7ff fff0 	bl	801695c <__sfp_lock_acquire>
 801697c:	6a23      	ldr	r3, [r4, #32]
 801697e:	b11b      	cbz	r3, 8016988 <__sinit+0x14>
 8016980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016984:	f7ff bff0 	b.w	8016968 <__sfp_lock_release>
 8016988:	4b04      	ldr	r3, [pc, #16]	@ (801699c <__sinit+0x28>)
 801698a:	6223      	str	r3, [r4, #32]
 801698c:	4b04      	ldr	r3, [pc, #16]	@ (80169a0 <__sinit+0x2c>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d1f5      	bne.n	8016980 <__sinit+0xc>
 8016994:	f7ff ffc4 	bl	8016920 <global_stdio_init.part.0>
 8016998:	e7f2      	b.n	8016980 <__sinit+0xc>
 801699a:	bf00      	nop
 801699c:	080168e1 	.word	0x080168e1
 80169a0:	200076c8 	.word	0x200076c8

080169a4 <_fwalk_sglue>:
 80169a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169a8:	4607      	mov	r7, r0
 80169aa:	4688      	mov	r8, r1
 80169ac:	4614      	mov	r4, r2
 80169ae:	2600      	movs	r6, #0
 80169b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169b4:	f1b9 0901 	subs.w	r9, r9, #1
 80169b8:	d505      	bpl.n	80169c6 <_fwalk_sglue+0x22>
 80169ba:	6824      	ldr	r4, [r4, #0]
 80169bc:	2c00      	cmp	r4, #0
 80169be:	d1f7      	bne.n	80169b0 <_fwalk_sglue+0xc>
 80169c0:	4630      	mov	r0, r6
 80169c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169c6:	89ab      	ldrh	r3, [r5, #12]
 80169c8:	2b01      	cmp	r3, #1
 80169ca:	d907      	bls.n	80169dc <_fwalk_sglue+0x38>
 80169cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169d0:	3301      	adds	r3, #1
 80169d2:	d003      	beq.n	80169dc <_fwalk_sglue+0x38>
 80169d4:	4629      	mov	r1, r5
 80169d6:	4638      	mov	r0, r7
 80169d8:	47c0      	blx	r8
 80169da:	4306      	orrs	r6, r0
 80169dc:	3568      	adds	r5, #104	@ 0x68
 80169de:	e7e9      	b.n	80169b4 <_fwalk_sglue+0x10>

080169e0 <iprintf>:
 80169e0:	b40f      	push	{r0, r1, r2, r3}
 80169e2:	b507      	push	{r0, r1, r2, lr}
 80169e4:	4906      	ldr	r1, [pc, #24]	@ (8016a00 <iprintf+0x20>)
 80169e6:	ab04      	add	r3, sp, #16
 80169e8:	6808      	ldr	r0, [r1, #0]
 80169ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80169ee:	6881      	ldr	r1, [r0, #8]
 80169f0:	9301      	str	r3, [sp, #4]
 80169f2:	f000 fb05 	bl	8017000 <_vfiprintf_r>
 80169f6:	b003      	add	sp, #12
 80169f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80169fc:	b004      	add	sp, #16
 80169fe:	4770      	bx	lr
 8016a00:	20000090 	.word	0x20000090

08016a04 <putchar>:
 8016a04:	4b02      	ldr	r3, [pc, #8]	@ (8016a10 <putchar+0xc>)
 8016a06:	4601      	mov	r1, r0
 8016a08:	6818      	ldr	r0, [r3, #0]
 8016a0a:	6882      	ldr	r2, [r0, #8]
 8016a0c:	f000 beac 	b.w	8017768 <_putc_r>
 8016a10:	20000090 	.word	0x20000090

08016a14 <_puts_r>:
 8016a14:	6a03      	ldr	r3, [r0, #32]
 8016a16:	b570      	push	{r4, r5, r6, lr}
 8016a18:	6884      	ldr	r4, [r0, #8]
 8016a1a:	4605      	mov	r5, r0
 8016a1c:	460e      	mov	r6, r1
 8016a1e:	b90b      	cbnz	r3, 8016a24 <_puts_r+0x10>
 8016a20:	f7ff ffa8 	bl	8016974 <__sinit>
 8016a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a26:	07db      	lsls	r3, r3, #31
 8016a28:	d405      	bmi.n	8016a36 <_puts_r+0x22>
 8016a2a:	89a3      	ldrh	r3, [r4, #12]
 8016a2c:	0598      	lsls	r0, r3, #22
 8016a2e:	d402      	bmi.n	8016a36 <_puts_r+0x22>
 8016a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a32:	f000 f9b2 	bl	8016d9a <__retarget_lock_acquire_recursive>
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	0719      	lsls	r1, r3, #28
 8016a3a:	d502      	bpl.n	8016a42 <_puts_r+0x2e>
 8016a3c:	6923      	ldr	r3, [r4, #16]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d135      	bne.n	8016aae <_puts_r+0x9a>
 8016a42:	4621      	mov	r1, r4
 8016a44:	4628      	mov	r0, r5
 8016a46:	f000 f8c5 	bl	8016bd4 <__swsetup_r>
 8016a4a:	b380      	cbz	r0, 8016aae <_puts_r+0x9a>
 8016a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8016a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a52:	07da      	lsls	r2, r3, #31
 8016a54:	d405      	bmi.n	8016a62 <_puts_r+0x4e>
 8016a56:	89a3      	ldrh	r3, [r4, #12]
 8016a58:	059b      	lsls	r3, r3, #22
 8016a5a:	d402      	bmi.n	8016a62 <_puts_r+0x4e>
 8016a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a5e:	f000 f99d 	bl	8016d9c <__retarget_lock_release_recursive>
 8016a62:	4628      	mov	r0, r5
 8016a64:	bd70      	pop	{r4, r5, r6, pc}
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	da04      	bge.n	8016a74 <_puts_r+0x60>
 8016a6a:	69a2      	ldr	r2, [r4, #24]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	dc17      	bgt.n	8016aa0 <_puts_r+0x8c>
 8016a70:	290a      	cmp	r1, #10
 8016a72:	d015      	beq.n	8016aa0 <_puts_r+0x8c>
 8016a74:	6823      	ldr	r3, [r4, #0]
 8016a76:	1c5a      	adds	r2, r3, #1
 8016a78:	6022      	str	r2, [r4, #0]
 8016a7a:	7019      	strb	r1, [r3, #0]
 8016a7c:	68a3      	ldr	r3, [r4, #8]
 8016a7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a82:	3b01      	subs	r3, #1
 8016a84:	60a3      	str	r3, [r4, #8]
 8016a86:	2900      	cmp	r1, #0
 8016a88:	d1ed      	bne.n	8016a66 <_puts_r+0x52>
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	da11      	bge.n	8016ab2 <_puts_r+0x9e>
 8016a8e:	4622      	mov	r2, r4
 8016a90:	210a      	movs	r1, #10
 8016a92:	4628      	mov	r0, r5
 8016a94:	f000 f85f 	bl	8016b56 <__swbuf_r>
 8016a98:	3001      	adds	r0, #1
 8016a9a:	d0d7      	beq.n	8016a4c <_puts_r+0x38>
 8016a9c:	250a      	movs	r5, #10
 8016a9e:	e7d7      	b.n	8016a50 <_puts_r+0x3c>
 8016aa0:	4622      	mov	r2, r4
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f000 f857 	bl	8016b56 <__swbuf_r>
 8016aa8:	3001      	adds	r0, #1
 8016aaa:	d1e7      	bne.n	8016a7c <_puts_r+0x68>
 8016aac:	e7ce      	b.n	8016a4c <_puts_r+0x38>
 8016aae:	3e01      	subs	r6, #1
 8016ab0:	e7e4      	b.n	8016a7c <_puts_r+0x68>
 8016ab2:	6823      	ldr	r3, [r4, #0]
 8016ab4:	1c5a      	adds	r2, r3, #1
 8016ab6:	6022      	str	r2, [r4, #0]
 8016ab8:	220a      	movs	r2, #10
 8016aba:	701a      	strb	r2, [r3, #0]
 8016abc:	e7ee      	b.n	8016a9c <_puts_r+0x88>
	...

08016ac0 <puts>:
 8016ac0:	4b02      	ldr	r3, [pc, #8]	@ (8016acc <puts+0xc>)
 8016ac2:	4601      	mov	r1, r0
 8016ac4:	6818      	ldr	r0, [r3, #0]
 8016ac6:	f7ff bfa5 	b.w	8016a14 <_puts_r>
 8016aca:	bf00      	nop
 8016acc:	20000090 	.word	0x20000090

08016ad0 <__sread>:
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	460c      	mov	r4, r1
 8016ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad8:	f000 f910 	bl	8016cfc <_read_r>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	bfab      	itete	ge
 8016ae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ae4:	181b      	addge	r3, r3, r0
 8016ae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016aea:	bfac      	ite	ge
 8016aec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016aee:	81a3      	strhlt	r3, [r4, #12]
 8016af0:	bd10      	pop	{r4, pc}

08016af2 <__swrite>:
 8016af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af6:	461f      	mov	r7, r3
 8016af8:	898b      	ldrh	r3, [r1, #12]
 8016afa:	05db      	lsls	r3, r3, #23
 8016afc:	4605      	mov	r5, r0
 8016afe:	460c      	mov	r4, r1
 8016b00:	4616      	mov	r6, r2
 8016b02:	d505      	bpl.n	8016b10 <__swrite+0x1e>
 8016b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b08:	2302      	movs	r3, #2
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	f000 f8e4 	bl	8016cd8 <_lseek_r>
 8016b10:	89a3      	ldrh	r3, [r4, #12]
 8016b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b1a:	81a3      	strh	r3, [r4, #12]
 8016b1c:	4632      	mov	r2, r6
 8016b1e:	463b      	mov	r3, r7
 8016b20:	4628      	mov	r0, r5
 8016b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b26:	f000 b8fb 	b.w	8016d20 <_write_r>

08016b2a <__sseek>:
 8016b2a:	b510      	push	{r4, lr}
 8016b2c:	460c      	mov	r4, r1
 8016b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b32:	f000 f8d1 	bl	8016cd8 <_lseek_r>
 8016b36:	1c43      	adds	r3, r0, #1
 8016b38:	89a3      	ldrh	r3, [r4, #12]
 8016b3a:	bf15      	itete	ne
 8016b3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b46:	81a3      	strheq	r3, [r4, #12]
 8016b48:	bf18      	it	ne
 8016b4a:	81a3      	strhne	r3, [r4, #12]
 8016b4c:	bd10      	pop	{r4, pc}

08016b4e <__sclose>:
 8016b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b52:	f000 b8b1 	b.w	8016cb8 <_close_r>

08016b56 <__swbuf_r>:
 8016b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b58:	460e      	mov	r6, r1
 8016b5a:	4614      	mov	r4, r2
 8016b5c:	4605      	mov	r5, r0
 8016b5e:	b118      	cbz	r0, 8016b68 <__swbuf_r+0x12>
 8016b60:	6a03      	ldr	r3, [r0, #32]
 8016b62:	b90b      	cbnz	r3, 8016b68 <__swbuf_r+0x12>
 8016b64:	f7ff ff06 	bl	8016974 <__sinit>
 8016b68:	69a3      	ldr	r3, [r4, #24]
 8016b6a:	60a3      	str	r3, [r4, #8]
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	071a      	lsls	r2, r3, #28
 8016b70:	d501      	bpl.n	8016b76 <__swbuf_r+0x20>
 8016b72:	6923      	ldr	r3, [r4, #16]
 8016b74:	b943      	cbnz	r3, 8016b88 <__swbuf_r+0x32>
 8016b76:	4621      	mov	r1, r4
 8016b78:	4628      	mov	r0, r5
 8016b7a:	f000 f82b 	bl	8016bd4 <__swsetup_r>
 8016b7e:	b118      	cbz	r0, 8016b88 <__swbuf_r+0x32>
 8016b80:	f04f 37ff 	mov.w	r7, #4294967295
 8016b84:	4638      	mov	r0, r7
 8016b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b88:	6823      	ldr	r3, [r4, #0]
 8016b8a:	6922      	ldr	r2, [r4, #16]
 8016b8c:	1a98      	subs	r0, r3, r2
 8016b8e:	6963      	ldr	r3, [r4, #20]
 8016b90:	b2f6      	uxtb	r6, r6
 8016b92:	4283      	cmp	r3, r0
 8016b94:	4637      	mov	r7, r6
 8016b96:	dc05      	bgt.n	8016ba4 <__swbuf_r+0x4e>
 8016b98:	4621      	mov	r1, r4
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	f000 fd5a 	bl	8017654 <_fflush_r>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	d1ed      	bne.n	8016b80 <__swbuf_r+0x2a>
 8016ba4:	68a3      	ldr	r3, [r4, #8]
 8016ba6:	3b01      	subs	r3, #1
 8016ba8:	60a3      	str	r3, [r4, #8]
 8016baa:	6823      	ldr	r3, [r4, #0]
 8016bac:	1c5a      	adds	r2, r3, #1
 8016bae:	6022      	str	r2, [r4, #0]
 8016bb0:	701e      	strb	r6, [r3, #0]
 8016bb2:	6962      	ldr	r2, [r4, #20]
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d004      	beq.n	8016bc4 <__swbuf_r+0x6e>
 8016bba:	89a3      	ldrh	r3, [r4, #12]
 8016bbc:	07db      	lsls	r3, r3, #31
 8016bbe:	d5e1      	bpl.n	8016b84 <__swbuf_r+0x2e>
 8016bc0:	2e0a      	cmp	r6, #10
 8016bc2:	d1df      	bne.n	8016b84 <__swbuf_r+0x2e>
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f000 fd44 	bl	8017654 <_fflush_r>
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	d0d9      	beq.n	8016b84 <__swbuf_r+0x2e>
 8016bd0:	e7d6      	b.n	8016b80 <__swbuf_r+0x2a>
	...

08016bd4 <__swsetup_r>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	4b29      	ldr	r3, [pc, #164]	@ (8016c7c <__swsetup_r+0xa8>)
 8016bd8:	4605      	mov	r5, r0
 8016bda:	6818      	ldr	r0, [r3, #0]
 8016bdc:	460c      	mov	r4, r1
 8016bde:	b118      	cbz	r0, 8016be8 <__swsetup_r+0x14>
 8016be0:	6a03      	ldr	r3, [r0, #32]
 8016be2:	b90b      	cbnz	r3, 8016be8 <__swsetup_r+0x14>
 8016be4:	f7ff fec6 	bl	8016974 <__sinit>
 8016be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bec:	0719      	lsls	r1, r3, #28
 8016bee:	d422      	bmi.n	8016c36 <__swsetup_r+0x62>
 8016bf0:	06da      	lsls	r2, r3, #27
 8016bf2:	d407      	bmi.n	8016c04 <__swsetup_r+0x30>
 8016bf4:	2209      	movs	r2, #9
 8016bf6:	602a      	str	r2, [r5, #0]
 8016bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bfc:	81a3      	strh	r3, [r4, #12]
 8016bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8016c02:	e033      	b.n	8016c6c <__swsetup_r+0x98>
 8016c04:	0758      	lsls	r0, r3, #29
 8016c06:	d512      	bpl.n	8016c2e <__swsetup_r+0x5a>
 8016c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c0a:	b141      	cbz	r1, 8016c1e <__swsetup_r+0x4a>
 8016c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c10:	4299      	cmp	r1, r3
 8016c12:	d002      	beq.n	8016c1a <__swsetup_r+0x46>
 8016c14:	4628      	mov	r0, r5
 8016c16:	f000 f8d1 	bl	8016dbc <_free_r>
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c1e:	89a3      	ldrh	r3, [r4, #12]
 8016c20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c24:	81a3      	strh	r3, [r4, #12]
 8016c26:	2300      	movs	r3, #0
 8016c28:	6063      	str	r3, [r4, #4]
 8016c2a:	6923      	ldr	r3, [r4, #16]
 8016c2c:	6023      	str	r3, [r4, #0]
 8016c2e:	89a3      	ldrh	r3, [r4, #12]
 8016c30:	f043 0308 	orr.w	r3, r3, #8
 8016c34:	81a3      	strh	r3, [r4, #12]
 8016c36:	6923      	ldr	r3, [r4, #16]
 8016c38:	b94b      	cbnz	r3, 8016c4e <__swsetup_r+0x7a>
 8016c3a:	89a3      	ldrh	r3, [r4, #12]
 8016c3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c44:	d003      	beq.n	8016c4e <__swsetup_r+0x7a>
 8016c46:	4621      	mov	r1, r4
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f000 fd51 	bl	80176f0 <__smakebuf_r>
 8016c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c52:	f013 0201 	ands.w	r2, r3, #1
 8016c56:	d00a      	beq.n	8016c6e <__swsetup_r+0x9a>
 8016c58:	2200      	movs	r2, #0
 8016c5a:	60a2      	str	r2, [r4, #8]
 8016c5c:	6962      	ldr	r2, [r4, #20]
 8016c5e:	4252      	negs	r2, r2
 8016c60:	61a2      	str	r2, [r4, #24]
 8016c62:	6922      	ldr	r2, [r4, #16]
 8016c64:	b942      	cbnz	r2, 8016c78 <__swsetup_r+0xa4>
 8016c66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c6a:	d1c5      	bne.n	8016bf8 <__swsetup_r+0x24>
 8016c6c:	bd38      	pop	{r3, r4, r5, pc}
 8016c6e:	0799      	lsls	r1, r3, #30
 8016c70:	bf58      	it	pl
 8016c72:	6962      	ldrpl	r2, [r4, #20]
 8016c74:	60a2      	str	r2, [r4, #8]
 8016c76:	e7f4      	b.n	8016c62 <__swsetup_r+0x8e>
 8016c78:	2000      	movs	r0, #0
 8016c7a:	e7f7      	b.n	8016c6c <__swsetup_r+0x98>
 8016c7c:	20000090 	.word	0x20000090

08016c80 <memset>:
 8016c80:	4402      	add	r2, r0
 8016c82:	4603      	mov	r3, r0
 8016c84:	4293      	cmp	r3, r2
 8016c86:	d100      	bne.n	8016c8a <memset+0xa>
 8016c88:	4770      	bx	lr
 8016c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8016c8e:	e7f9      	b.n	8016c84 <memset+0x4>

08016c90 <strncpy>:
 8016c90:	b510      	push	{r4, lr}
 8016c92:	3901      	subs	r1, #1
 8016c94:	4603      	mov	r3, r0
 8016c96:	b132      	cbz	r2, 8016ca6 <strncpy+0x16>
 8016c98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c9c:	f803 4b01 	strb.w	r4, [r3], #1
 8016ca0:	3a01      	subs	r2, #1
 8016ca2:	2c00      	cmp	r4, #0
 8016ca4:	d1f7      	bne.n	8016c96 <strncpy+0x6>
 8016ca6:	441a      	add	r2, r3
 8016ca8:	2100      	movs	r1, #0
 8016caa:	4293      	cmp	r3, r2
 8016cac:	d100      	bne.n	8016cb0 <strncpy+0x20>
 8016cae:	bd10      	pop	{r4, pc}
 8016cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8016cb4:	e7f9      	b.n	8016caa <strncpy+0x1a>
	...

08016cb8 <_close_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d06      	ldr	r5, [pc, #24]	@ (8016cd4 <_close_r+0x1c>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	602b      	str	r3, [r5, #0]
 8016cc4:	f7ea f8a7 	bl	8000e16 <_close>
 8016cc8:	1c43      	adds	r3, r0, #1
 8016cca:	d102      	bne.n	8016cd2 <_close_r+0x1a>
 8016ccc:	682b      	ldr	r3, [r5, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <_close_r+0x1a>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	200076cc 	.word	0x200076cc

08016cd8 <_lseek_r>:
 8016cd8:	b538      	push	{r3, r4, r5, lr}
 8016cda:	4d07      	ldr	r5, [pc, #28]	@ (8016cf8 <_lseek_r+0x20>)
 8016cdc:	4604      	mov	r4, r0
 8016cde:	4608      	mov	r0, r1
 8016ce0:	4611      	mov	r1, r2
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	602a      	str	r2, [r5, #0]
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	f7ea f8bc 	bl	8000e64 <_lseek>
 8016cec:	1c43      	adds	r3, r0, #1
 8016cee:	d102      	bne.n	8016cf6 <_lseek_r+0x1e>
 8016cf0:	682b      	ldr	r3, [r5, #0]
 8016cf2:	b103      	cbz	r3, 8016cf6 <_lseek_r+0x1e>
 8016cf4:	6023      	str	r3, [r4, #0]
 8016cf6:	bd38      	pop	{r3, r4, r5, pc}
 8016cf8:	200076cc 	.word	0x200076cc

08016cfc <_read_r>:
 8016cfc:	b538      	push	{r3, r4, r5, lr}
 8016cfe:	4d07      	ldr	r5, [pc, #28]	@ (8016d1c <_read_r+0x20>)
 8016d00:	4604      	mov	r4, r0
 8016d02:	4608      	mov	r0, r1
 8016d04:	4611      	mov	r1, r2
 8016d06:	2200      	movs	r2, #0
 8016d08:	602a      	str	r2, [r5, #0]
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	f7ea f866 	bl	8000ddc <_read>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	d102      	bne.n	8016d1a <_read_r+0x1e>
 8016d14:	682b      	ldr	r3, [r5, #0]
 8016d16:	b103      	cbz	r3, 8016d1a <_read_r+0x1e>
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	bd38      	pop	{r3, r4, r5, pc}
 8016d1c:	200076cc 	.word	0x200076cc

08016d20 <_write_r>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	4d07      	ldr	r5, [pc, #28]	@ (8016d40 <_write_r+0x20>)
 8016d24:	4604      	mov	r4, r0
 8016d26:	4608      	mov	r0, r1
 8016d28:	4611      	mov	r1, r2
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	602a      	str	r2, [r5, #0]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	f7e9 fc94 	bl	800065c <_write>
 8016d34:	1c43      	adds	r3, r0, #1
 8016d36:	d102      	bne.n	8016d3e <_write_r+0x1e>
 8016d38:	682b      	ldr	r3, [r5, #0]
 8016d3a:	b103      	cbz	r3, 8016d3e <_write_r+0x1e>
 8016d3c:	6023      	str	r3, [r4, #0]
 8016d3e:	bd38      	pop	{r3, r4, r5, pc}
 8016d40:	200076cc 	.word	0x200076cc

08016d44 <__errno>:
 8016d44:	4b01      	ldr	r3, [pc, #4]	@ (8016d4c <__errno+0x8>)
 8016d46:	6818      	ldr	r0, [r3, #0]
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	20000090 	.word	0x20000090

08016d50 <__libc_init_array>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	4d0d      	ldr	r5, [pc, #52]	@ (8016d88 <__libc_init_array+0x38>)
 8016d54:	4c0d      	ldr	r4, [pc, #52]	@ (8016d8c <__libc_init_array+0x3c>)
 8016d56:	1b64      	subs	r4, r4, r5
 8016d58:	10a4      	asrs	r4, r4, #2
 8016d5a:	2600      	movs	r6, #0
 8016d5c:	42a6      	cmp	r6, r4
 8016d5e:	d109      	bne.n	8016d74 <__libc_init_array+0x24>
 8016d60:	4d0b      	ldr	r5, [pc, #44]	@ (8016d90 <__libc_init_array+0x40>)
 8016d62:	4c0c      	ldr	r4, [pc, #48]	@ (8016d94 <__libc_init_array+0x44>)
 8016d64:	f000 fd66 	bl	8017834 <_init>
 8016d68:	1b64      	subs	r4, r4, r5
 8016d6a:	10a4      	asrs	r4, r4, #2
 8016d6c:	2600      	movs	r6, #0
 8016d6e:	42a6      	cmp	r6, r4
 8016d70:	d105      	bne.n	8016d7e <__libc_init_array+0x2e>
 8016d72:	bd70      	pop	{r4, r5, r6, pc}
 8016d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d78:	4798      	blx	r3
 8016d7a:	3601      	adds	r6, #1
 8016d7c:	e7ee      	b.n	8016d5c <__libc_init_array+0xc>
 8016d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d82:	4798      	blx	r3
 8016d84:	3601      	adds	r6, #1
 8016d86:	e7f2      	b.n	8016d6e <__libc_init_array+0x1e>
 8016d88:	08017b38 	.word	0x08017b38
 8016d8c:	08017b38 	.word	0x08017b38
 8016d90:	08017b38 	.word	0x08017b38
 8016d94:	08017b3c 	.word	0x08017b3c

08016d98 <__retarget_lock_init_recursive>:
 8016d98:	4770      	bx	lr

08016d9a <__retarget_lock_acquire_recursive>:
 8016d9a:	4770      	bx	lr

08016d9c <__retarget_lock_release_recursive>:
 8016d9c:	4770      	bx	lr

08016d9e <memcpy>:
 8016d9e:	440a      	add	r2, r1
 8016da0:	4291      	cmp	r1, r2
 8016da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016da6:	d100      	bne.n	8016daa <memcpy+0xc>
 8016da8:	4770      	bx	lr
 8016daa:	b510      	push	{r4, lr}
 8016dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016db4:	4291      	cmp	r1, r2
 8016db6:	d1f9      	bne.n	8016dac <memcpy+0xe>
 8016db8:	bd10      	pop	{r4, pc}
	...

08016dbc <_free_r>:
 8016dbc:	b538      	push	{r3, r4, r5, lr}
 8016dbe:	4605      	mov	r5, r0
 8016dc0:	2900      	cmp	r1, #0
 8016dc2:	d041      	beq.n	8016e48 <_free_r+0x8c>
 8016dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016dc8:	1f0c      	subs	r4, r1, #4
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	bfb8      	it	lt
 8016dce:	18e4      	addlt	r4, r4, r3
 8016dd0:	f000 f8e0 	bl	8016f94 <__malloc_lock>
 8016dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8016e4c <_free_r+0x90>)
 8016dd6:	6813      	ldr	r3, [r2, #0]
 8016dd8:	b933      	cbnz	r3, 8016de8 <_free_r+0x2c>
 8016dda:	6063      	str	r3, [r4, #4]
 8016ddc:	6014      	str	r4, [r2, #0]
 8016dde:	4628      	mov	r0, r5
 8016de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016de4:	f000 b8dc 	b.w	8016fa0 <__malloc_unlock>
 8016de8:	42a3      	cmp	r3, r4
 8016dea:	d908      	bls.n	8016dfe <_free_r+0x42>
 8016dec:	6820      	ldr	r0, [r4, #0]
 8016dee:	1821      	adds	r1, r4, r0
 8016df0:	428b      	cmp	r3, r1
 8016df2:	bf01      	itttt	eq
 8016df4:	6819      	ldreq	r1, [r3, #0]
 8016df6:	685b      	ldreq	r3, [r3, #4]
 8016df8:	1809      	addeq	r1, r1, r0
 8016dfa:	6021      	streq	r1, [r4, #0]
 8016dfc:	e7ed      	b.n	8016dda <_free_r+0x1e>
 8016dfe:	461a      	mov	r2, r3
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	b10b      	cbz	r3, 8016e08 <_free_r+0x4c>
 8016e04:	42a3      	cmp	r3, r4
 8016e06:	d9fa      	bls.n	8016dfe <_free_r+0x42>
 8016e08:	6811      	ldr	r1, [r2, #0]
 8016e0a:	1850      	adds	r0, r2, r1
 8016e0c:	42a0      	cmp	r0, r4
 8016e0e:	d10b      	bne.n	8016e28 <_free_r+0x6c>
 8016e10:	6820      	ldr	r0, [r4, #0]
 8016e12:	4401      	add	r1, r0
 8016e14:	1850      	adds	r0, r2, r1
 8016e16:	4283      	cmp	r3, r0
 8016e18:	6011      	str	r1, [r2, #0]
 8016e1a:	d1e0      	bne.n	8016dde <_free_r+0x22>
 8016e1c:	6818      	ldr	r0, [r3, #0]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	6053      	str	r3, [r2, #4]
 8016e22:	4408      	add	r0, r1
 8016e24:	6010      	str	r0, [r2, #0]
 8016e26:	e7da      	b.n	8016dde <_free_r+0x22>
 8016e28:	d902      	bls.n	8016e30 <_free_r+0x74>
 8016e2a:	230c      	movs	r3, #12
 8016e2c:	602b      	str	r3, [r5, #0]
 8016e2e:	e7d6      	b.n	8016dde <_free_r+0x22>
 8016e30:	6820      	ldr	r0, [r4, #0]
 8016e32:	1821      	adds	r1, r4, r0
 8016e34:	428b      	cmp	r3, r1
 8016e36:	bf04      	itt	eq
 8016e38:	6819      	ldreq	r1, [r3, #0]
 8016e3a:	685b      	ldreq	r3, [r3, #4]
 8016e3c:	6063      	str	r3, [r4, #4]
 8016e3e:	bf04      	itt	eq
 8016e40:	1809      	addeq	r1, r1, r0
 8016e42:	6021      	streq	r1, [r4, #0]
 8016e44:	6054      	str	r4, [r2, #4]
 8016e46:	e7ca      	b.n	8016dde <_free_r+0x22>
 8016e48:	bd38      	pop	{r3, r4, r5, pc}
 8016e4a:	bf00      	nop
 8016e4c:	200076d8 	.word	0x200076d8

08016e50 <sbrk_aligned>:
 8016e50:	b570      	push	{r4, r5, r6, lr}
 8016e52:	4e0f      	ldr	r6, [pc, #60]	@ (8016e90 <sbrk_aligned+0x40>)
 8016e54:	460c      	mov	r4, r1
 8016e56:	6831      	ldr	r1, [r6, #0]
 8016e58:	4605      	mov	r5, r0
 8016e5a:	b911      	cbnz	r1, 8016e62 <sbrk_aligned+0x12>
 8016e5c:	f000 fcda 	bl	8017814 <_sbrk_r>
 8016e60:	6030      	str	r0, [r6, #0]
 8016e62:	4621      	mov	r1, r4
 8016e64:	4628      	mov	r0, r5
 8016e66:	f000 fcd5 	bl	8017814 <_sbrk_r>
 8016e6a:	1c43      	adds	r3, r0, #1
 8016e6c:	d103      	bne.n	8016e76 <sbrk_aligned+0x26>
 8016e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8016e72:	4620      	mov	r0, r4
 8016e74:	bd70      	pop	{r4, r5, r6, pc}
 8016e76:	1cc4      	adds	r4, r0, #3
 8016e78:	f024 0403 	bic.w	r4, r4, #3
 8016e7c:	42a0      	cmp	r0, r4
 8016e7e:	d0f8      	beq.n	8016e72 <sbrk_aligned+0x22>
 8016e80:	1a21      	subs	r1, r4, r0
 8016e82:	4628      	mov	r0, r5
 8016e84:	f000 fcc6 	bl	8017814 <_sbrk_r>
 8016e88:	3001      	adds	r0, #1
 8016e8a:	d1f2      	bne.n	8016e72 <sbrk_aligned+0x22>
 8016e8c:	e7ef      	b.n	8016e6e <sbrk_aligned+0x1e>
 8016e8e:	bf00      	nop
 8016e90:	200076d4 	.word	0x200076d4

08016e94 <_malloc_r>:
 8016e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e98:	1ccd      	adds	r5, r1, #3
 8016e9a:	f025 0503 	bic.w	r5, r5, #3
 8016e9e:	3508      	adds	r5, #8
 8016ea0:	2d0c      	cmp	r5, #12
 8016ea2:	bf38      	it	cc
 8016ea4:	250c      	movcc	r5, #12
 8016ea6:	2d00      	cmp	r5, #0
 8016ea8:	4606      	mov	r6, r0
 8016eaa:	db01      	blt.n	8016eb0 <_malloc_r+0x1c>
 8016eac:	42a9      	cmp	r1, r5
 8016eae:	d904      	bls.n	8016eba <_malloc_r+0x26>
 8016eb0:	230c      	movs	r3, #12
 8016eb2:	6033      	str	r3, [r6, #0]
 8016eb4:	2000      	movs	r0, #0
 8016eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016f90 <_malloc_r+0xfc>
 8016ebe:	f000 f869 	bl	8016f94 <__malloc_lock>
 8016ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ec6:	461c      	mov	r4, r3
 8016ec8:	bb44      	cbnz	r4, 8016f1c <_malloc_r+0x88>
 8016eca:	4629      	mov	r1, r5
 8016ecc:	4630      	mov	r0, r6
 8016ece:	f7ff ffbf 	bl	8016e50 <sbrk_aligned>
 8016ed2:	1c43      	adds	r3, r0, #1
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	d158      	bne.n	8016f8a <_malloc_r+0xf6>
 8016ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8016edc:	4627      	mov	r7, r4
 8016ede:	2f00      	cmp	r7, #0
 8016ee0:	d143      	bne.n	8016f6a <_malloc_r+0xd6>
 8016ee2:	2c00      	cmp	r4, #0
 8016ee4:	d04b      	beq.n	8016f7e <_malloc_r+0xea>
 8016ee6:	6823      	ldr	r3, [r4, #0]
 8016ee8:	4639      	mov	r1, r7
 8016eea:	4630      	mov	r0, r6
 8016eec:	eb04 0903 	add.w	r9, r4, r3
 8016ef0:	f000 fc90 	bl	8017814 <_sbrk_r>
 8016ef4:	4581      	cmp	r9, r0
 8016ef6:	d142      	bne.n	8016f7e <_malloc_r+0xea>
 8016ef8:	6821      	ldr	r1, [r4, #0]
 8016efa:	1a6d      	subs	r5, r5, r1
 8016efc:	4629      	mov	r1, r5
 8016efe:	4630      	mov	r0, r6
 8016f00:	f7ff ffa6 	bl	8016e50 <sbrk_aligned>
 8016f04:	3001      	adds	r0, #1
 8016f06:	d03a      	beq.n	8016f7e <_malloc_r+0xea>
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	442b      	add	r3, r5
 8016f0c:	6023      	str	r3, [r4, #0]
 8016f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8016f12:	685a      	ldr	r2, [r3, #4]
 8016f14:	bb62      	cbnz	r2, 8016f70 <_malloc_r+0xdc>
 8016f16:	f8c8 7000 	str.w	r7, [r8]
 8016f1a:	e00f      	b.n	8016f3c <_malloc_r+0xa8>
 8016f1c:	6822      	ldr	r2, [r4, #0]
 8016f1e:	1b52      	subs	r2, r2, r5
 8016f20:	d420      	bmi.n	8016f64 <_malloc_r+0xd0>
 8016f22:	2a0b      	cmp	r2, #11
 8016f24:	d917      	bls.n	8016f56 <_malloc_r+0xc2>
 8016f26:	1961      	adds	r1, r4, r5
 8016f28:	42a3      	cmp	r3, r4
 8016f2a:	6025      	str	r5, [r4, #0]
 8016f2c:	bf18      	it	ne
 8016f2e:	6059      	strne	r1, [r3, #4]
 8016f30:	6863      	ldr	r3, [r4, #4]
 8016f32:	bf08      	it	eq
 8016f34:	f8c8 1000 	streq.w	r1, [r8]
 8016f38:	5162      	str	r2, [r4, r5]
 8016f3a:	604b      	str	r3, [r1, #4]
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	f000 f82f 	bl	8016fa0 <__malloc_unlock>
 8016f42:	f104 000b 	add.w	r0, r4, #11
 8016f46:	1d23      	adds	r3, r4, #4
 8016f48:	f020 0007 	bic.w	r0, r0, #7
 8016f4c:	1ac2      	subs	r2, r0, r3
 8016f4e:	bf1c      	itt	ne
 8016f50:	1a1b      	subne	r3, r3, r0
 8016f52:	50a3      	strne	r3, [r4, r2]
 8016f54:	e7af      	b.n	8016eb6 <_malloc_r+0x22>
 8016f56:	6862      	ldr	r2, [r4, #4]
 8016f58:	42a3      	cmp	r3, r4
 8016f5a:	bf0c      	ite	eq
 8016f5c:	f8c8 2000 	streq.w	r2, [r8]
 8016f60:	605a      	strne	r2, [r3, #4]
 8016f62:	e7eb      	b.n	8016f3c <_malloc_r+0xa8>
 8016f64:	4623      	mov	r3, r4
 8016f66:	6864      	ldr	r4, [r4, #4]
 8016f68:	e7ae      	b.n	8016ec8 <_malloc_r+0x34>
 8016f6a:	463c      	mov	r4, r7
 8016f6c:	687f      	ldr	r7, [r7, #4]
 8016f6e:	e7b6      	b.n	8016ede <_malloc_r+0x4a>
 8016f70:	461a      	mov	r2, r3
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	42a3      	cmp	r3, r4
 8016f76:	d1fb      	bne.n	8016f70 <_malloc_r+0xdc>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	6053      	str	r3, [r2, #4]
 8016f7c:	e7de      	b.n	8016f3c <_malloc_r+0xa8>
 8016f7e:	230c      	movs	r3, #12
 8016f80:	6033      	str	r3, [r6, #0]
 8016f82:	4630      	mov	r0, r6
 8016f84:	f000 f80c 	bl	8016fa0 <__malloc_unlock>
 8016f88:	e794      	b.n	8016eb4 <_malloc_r+0x20>
 8016f8a:	6005      	str	r5, [r0, #0]
 8016f8c:	e7d6      	b.n	8016f3c <_malloc_r+0xa8>
 8016f8e:	bf00      	nop
 8016f90:	200076d8 	.word	0x200076d8

08016f94 <__malloc_lock>:
 8016f94:	4801      	ldr	r0, [pc, #4]	@ (8016f9c <__malloc_lock+0x8>)
 8016f96:	f7ff bf00 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8016f9a:	bf00      	nop
 8016f9c:	200076d0 	.word	0x200076d0

08016fa0 <__malloc_unlock>:
 8016fa0:	4801      	ldr	r0, [pc, #4]	@ (8016fa8 <__malloc_unlock+0x8>)
 8016fa2:	f7ff befb 	b.w	8016d9c <__retarget_lock_release_recursive>
 8016fa6:	bf00      	nop
 8016fa8:	200076d0 	.word	0x200076d0

08016fac <__sfputc_r>:
 8016fac:	6893      	ldr	r3, [r2, #8]
 8016fae:	3b01      	subs	r3, #1
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	b410      	push	{r4}
 8016fb4:	6093      	str	r3, [r2, #8]
 8016fb6:	da08      	bge.n	8016fca <__sfputc_r+0x1e>
 8016fb8:	6994      	ldr	r4, [r2, #24]
 8016fba:	42a3      	cmp	r3, r4
 8016fbc:	db01      	blt.n	8016fc2 <__sfputc_r+0x16>
 8016fbe:	290a      	cmp	r1, #10
 8016fc0:	d103      	bne.n	8016fca <__sfputc_r+0x1e>
 8016fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fc6:	f7ff bdc6 	b.w	8016b56 <__swbuf_r>
 8016fca:	6813      	ldr	r3, [r2, #0]
 8016fcc:	1c58      	adds	r0, r3, #1
 8016fce:	6010      	str	r0, [r2, #0]
 8016fd0:	7019      	strb	r1, [r3, #0]
 8016fd2:	4608      	mov	r0, r1
 8016fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fd8:	4770      	bx	lr

08016fda <__sfputs_r>:
 8016fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fdc:	4606      	mov	r6, r0
 8016fde:	460f      	mov	r7, r1
 8016fe0:	4614      	mov	r4, r2
 8016fe2:	18d5      	adds	r5, r2, r3
 8016fe4:	42ac      	cmp	r4, r5
 8016fe6:	d101      	bne.n	8016fec <__sfputs_r+0x12>
 8016fe8:	2000      	movs	r0, #0
 8016fea:	e007      	b.n	8016ffc <__sfputs_r+0x22>
 8016fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ff0:	463a      	mov	r2, r7
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	f7ff ffda 	bl	8016fac <__sfputc_r>
 8016ff8:	1c43      	adds	r3, r0, #1
 8016ffa:	d1f3      	bne.n	8016fe4 <__sfputs_r+0xa>
 8016ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017000 <_vfiprintf_r>:
 8017000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017004:	460d      	mov	r5, r1
 8017006:	b09d      	sub	sp, #116	@ 0x74
 8017008:	4614      	mov	r4, r2
 801700a:	4698      	mov	r8, r3
 801700c:	4606      	mov	r6, r0
 801700e:	b118      	cbz	r0, 8017018 <_vfiprintf_r+0x18>
 8017010:	6a03      	ldr	r3, [r0, #32]
 8017012:	b90b      	cbnz	r3, 8017018 <_vfiprintf_r+0x18>
 8017014:	f7ff fcae 	bl	8016974 <__sinit>
 8017018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801701a:	07d9      	lsls	r1, r3, #31
 801701c:	d405      	bmi.n	801702a <_vfiprintf_r+0x2a>
 801701e:	89ab      	ldrh	r3, [r5, #12]
 8017020:	059a      	lsls	r2, r3, #22
 8017022:	d402      	bmi.n	801702a <_vfiprintf_r+0x2a>
 8017024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017026:	f7ff feb8 	bl	8016d9a <__retarget_lock_acquire_recursive>
 801702a:	89ab      	ldrh	r3, [r5, #12]
 801702c:	071b      	lsls	r3, r3, #28
 801702e:	d501      	bpl.n	8017034 <_vfiprintf_r+0x34>
 8017030:	692b      	ldr	r3, [r5, #16]
 8017032:	b99b      	cbnz	r3, 801705c <_vfiprintf_r+0x5c>
 8017034:	4629      	mov	r1, r5
 8017036:	4630      	mov	r0, r6
 8017038:	f7ff fdcc 	bl	8016bd4 <__swsetup_r>
 801703c:	b170      	cbz	r0, 801705c <_vfiprintf_r+0x5c>
 801703e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017040:	07dc      	lsls	r4, r3, #31
 8017042:	d504      	bpl.n	801704e <_vfiprintf_r+0x4e>
 8017044:	f04f 30ff 	mov.w	r0, #4294967295
 8017048:	b01d      	add	sp, #116	@ 0x74
 801704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801704e:	89ab      	ldrh	r3, [r5, #12]
 8017050:	0598      	lsls	r0, r3, #22
 8017052:	d4f7      	bmi.n	8017044 <_vfiprintf_r+0x44>
 8017054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017056:	f7ff fea1 	bl	8016d9c <__retarget_lock_release_recursive>
 801705a:	e7f3      	b.n	8017044 <_vfiprintf_r+0x44>
 801705c:	2300      	movs	r3, #0
 801705e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017060:	2320      	movs	r3, #32
 8017062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017066:	f8cd 800c 	str.w	r8, [sp, #12]
 801706a:	2330      	movs	r3, #48	@ 0x30
 801706c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801721c <_vfiprintf_r+0x21c>
 8017070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017074:	f04f 0901 	mov.w	r9, #1
 8017078:	4623      	mov	r3, r4
 801707a:	469a      	mov	sl, r3
 801707c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017080:	b10a      	cbz	r2, 8017086 <_vfiprintf_r+0x86>
 8017082:	2a25      	cmp	r2, #37	@ 0x25
 8017084:	d1f9      	bne.n	801707a <_vfiprintf_r+0x7a>
 8017086:	ebba 0b04 	subs.w	fp, sl, r4
 801708a:	d00b      	beq.n	80170a4 <_vfiprintf_r+0xa4>
 801708c:	465b      	mov	r3, fp
 801708e:	4622      	mov	r2, r4
 8017090:	4629      	mov	r1, r5
 8017092:	4630      	mov	r0, r6
 8017094:	f7ff ffa1 	bl	8016fda <__sfputs_r>
 8017098:	3001      	adds	r0, #1
 801709a:	f000 80a7 	beq.w	80171ec <_vfiprintf_r+0x1ec>
 801709e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170a0:	445a      	add	r2, fp
 80170a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80170a4:	f89a 3000 	ldrb.w	r3, [sl]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	f000 809f 	beq.w	80171ec <_vfiprintf_r+0x1ec>
 80170ae:	2300      	movs	r3, #0
 80170b0:	f04f 32ff 	mov.w	r2, #4294967295
 80170b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170b8:	f10a 0a01 	add.w	sl, sl, #1
 80170bc:	9304      	str	r3, [sp, #16]
 80170be:	9307      	str	r3, [sp, #28]
 80170c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80170c6:	4654      	mov	r4, sl
 80170c8:	2205      	movs	r2, #5
 80170ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170ce:	4853      	ldr	r0, [pc, #332]	@ (801721c <_vfiprintf_r+0x21c>)
 80170d0:	f7e9 f856 	bl	8000180 <memchr>
 80170d4:	9a04      	ldr	r2, [sp, #16]
 80170d6:	b9d8      	cbnz	r0, 8017110 <_vfiprintf_r+0x110>
 80170d8:	06d1      	lsls	r1, r2, #27
 80170da:	bf44      	itt	mi
 80170dc:	2320      	movmi	r3, #32
 80170de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170e2:	0713      	lsls	r3, r2, #28
 80170e4:	bf44      	itt	mi
 80170e6:	232b      	movmi	r3, #43	@ 0x2b
 80170e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170ec:	f89a 3000 	ldrb.w	r3, [sl]
 80170f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f2:	d015      	beq.n	8017120 <_vfiprintf_r+0x120>
 80170f4:	9a07      	ldr	r2, [sp, #28]
 80170f6:	4654      	mov	r4, sl
 80170f8:	2000      	movs	r0, #0
 80170fa:	f04f 0c0a 	mov.w	ip, #10
 80170fe:	4621      	mov	r1, r4
 8017100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017104:	3b30      	subs	r3, #48	@ 0x30
 8017106:	2b09      	cmp	r3, #9
 8017108:	d94b      	bls.n	80171a2 <_vfiprintf_r+0x1a2>
 801710a:	b1b0      	cbz	r0, 801713a <_vfiprintf_r+0x13a>
 801710c:	9207      	str	r2, [sp, #28]
 801710e:	e014      	b.n	801713a <_vfiprintf_r+0x13a>
 8017110:	eba0 0308 	sub.w	r3, r0, r8
 8017114:	fa09 f303 	lsl.w	r3, r9, r3
 8017118:	4313      	orrs	r3, r2
 801711a:	9304      	str	r3, [sp, #16]
 801711c:	46a2      	mov	sl, r4
 801711e:	e7d2      	b.n	80170c6 <_vfiprintf_r+0xc6>
 8017120:	9b03      	ldr	r3, [sp, #12]
 8017122:	1d19      	adds	r1, r3, #4
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	9103      	str	r1, [sp, #12]
 8017128:	2b00      	cmp	r3, #0
 801712a:	bfbb      	ittet	lt
 801712c:	425b      	neglt	r3, r3
 801712e:	f042 0202 	orrlt.w	r2, r2, #2
 8017132:	9307      	strge	r3, [sp, #28]
 8017134:	9307      	strlt	r3, [sp, #28]
 8017136:	bfb8      	it	lt
 8017138:	9204      	strlt	r2, [sp, #16]
 801713a:	7823      	ldrb	r3, [r4, #0]
 801713c:	2b2e      	cmp	r3, #46	@ 0x2e
 801713e:	d10a      	bne.n	8017156 <_vfiprintf_r+0x156>
 8017140:	7863      	ldrb	r3, [r4, #1]
 8017142:	2b2a      	cmp	r3, #42	@ 0x2a
 8017144:	d132      	bne.n	80171ac <_vfiprintf_r+0x1ac>
 8017146:	9b03      	ldr	r3, [sp, #12]
 8017148:	1d1a      	adds	r2, r3, #4
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	9203      	str	r2, [sp, #12]
 801714e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017152:	3402      	adds	r4, #2
 8017154:	9305      	str	r3, [sp, #20]
 8017156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801722c <_vfiprintf_r+0x22c>
 801715a:	7821      	ldrb	r1, [r4, #0]
 801715c:	2203      	movs	r2, #3
 801715e:	4650      	mov	r0, sl
 8017160:	f7e9 f80e 	bl	8000180 <memchr>
 8017164:	b138      	cbz	r0, 8017176 <_vfiprintf_r+0x176>
 8017166:	9b04      	ldr	r3, [sp, #16]
 8017168:	eba0 000a 	sub.w	r0, r0, sl
 801716c:	2240      	movs	r2, #64	@ 0x40
 801716e:	4082      	lsls	r2, r0
 8017170:	4313      	orrs	r3, r2
 8017172:	3401      	adds	r4, #1
 8017174:	9304      	str	r3, [sp, #16]
 8017176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801717a:	4829      	ldr	r0, [pc, #164]	@ (8017220 <_vfiprintf_r+0x220>)
 801717c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017180:	2206      	movs	r2, #6
 8017182:	f7e8 fffd 	bl	8000180 <memchr>
 8017186:	2800      	cmp	r0, #0
 8017188:	d03f      	beq.n	801720a <_vfiprintf_r+0x20a>
 801718a:	4b26      	ldr	r3, [pc, #152]	@ (8017224 <_vfiprintf_r+0x224>)
 801718c:	bb1b      	cbnz	r3, 80171d6 <_vfiprintf_r+0x1d6>
 801718e:	9b03      	ldr	r3, [sp, #12]
 8017190:	3307      	adds	r3, #7
 8017192:	f023 0307 	bic.w	r3, r3, #7
 8017196:	3308      	adds	r3, #8
 8017198:	9303      	str	r3, [sp, #12]
 801719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801719c:	443b      	add	r3, r7
 801719e:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a0:	e76a      	b.n	8017078 <_vfiprintf_r+0x78>
 80171a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80171a6:	460c      	mov	r4, r1
 80171a8:	2001      	movs	r0, #1
 80171aa:	e7a8      	b.n	80170fe <_vfiprintf_r+0xfe>
 80171ac:	2300      	movs	r3, #0
 80171ae:	3401      	adds	r4, #1
 80171b0:	9305      	str	r3, [sp, #20]
 80171b2:	4619      	mov	r1, r3
 80171b4:	f04f 0c0a 	mov.w	ip, #10
 80171b8:	4620      	mov	r0, r4
 80171ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171be:	3a30      	subs	r2, #48	@ 0x30
 80171c0:	2a09      	cmp	r2, #9
 80171c2:	d903      	bls.n	80171cc <_vfiprintf_r+0x1cc>
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d0c6      	beq.n	8017156 <_vfiprintf_r+0x156>
 80171c8:	9105      	str	r1, [sp, #20]
 80171ca:	e7c4      	b.n	8017156 <_vfiprintf_r+0x156>
 80171cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80171d0:	4604      	mov	r4, r0
 80171d2:	2301      	movs	r3, #1
 80171d4:	e7f0      	b.n	80171b8 <_vfiprintf_r+0x1b8>
 80171d6:	ab03      	add	r3, sp, #12
 80171d8:	9300      	str	r3, [sp, #0]
 80171da:	462a      	mov	r2, r5
 80171dc:	4b12      	ldr	r3, [pc, #72]	@ (8017228 <_vfiprintf_r+0x228>)
 80171de:	a904      	add	r1, sp, #16
 80171e0:	4630      	mov	r0, r6
 80171e2:	f3af 8000 	nop.w
 80171e6:	4607      	mov	r7, r0
 80171e8:	1c78      	adds	r0, r7, #1
 80171ea:	d1d6      	bne.n	801719a <_vfiprintf_r+0x19a>
 80171ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171ee:	07d9      	lsls	r1, r3, #31
 80171f0:	d405      	bmi.n	80171fe <_vfiprintf_r+0x1fe>
 80171f2:	89ab      	ldrh	r3, [r5, #12]
 80171f4:	059a      	lsls	r2, r3, #22
 80171f6:	d402      	bmi.n	80171fe <_vfiprintf_r+0x1fe>
 80171f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171fa:	f7ff fdcf 	bl	8016d9c <__retarget_lock_release_recursive>
 80171fe:	89ab      	ldrh	r3, [r5, #12]
 8017200:	065b      	lsls	r3, r3, #25
 8017202:	f53f af1f 	bmi.w	8017044 <_vfiprintf_r+0x44>
 8017206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017208:	e71e      	b.n	8017048 <_vfiprintf_r+0x48>
 801720a:	ab03      	add	r3, sp, #12
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	462a      	mov	r2, r5
 8017210:	4b05      	ldr	r3, [pc, #20]	@ (8017228 <_vfiprintf_r+0x228>)
 8017212:	a904      	add	r1, sp, #16
 8017214:	4630      	mov	r0, r6
 8017216:	f000 f879 	bl	801730c <_printf_i>
 801721a:	e7e4      	b.n	80171e6 <_vfiprintf_r+0x1e6>
 801721c:	08017afc 	.word	0x08017afc
 8017220:	08017b06 	.word	0x08017b06
 8017224:	00000000 	.word	0x00000000
 8017228:	08016fdb 	.word	0x08016fdb
 801722c:	08017b02 	.word	0x08017b02

08017230 <_printf_common>:
 8017230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017234:	4616      	mov	r6, r2
 8017236:	4698      	mov	r8, r3
 8017238:	688a      	ldr	r2, [r1, #8]
 801723a:	690b      	ldr	r3, [r1, #16]
 801723c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017240:	4293      	cmp	r3, r2
 8017242:	bfb8      	it	lt
 8017244:	4613      	movlt	r3, r2
 8017246:	6033      	str	r3, [r6, #0]
 8017248:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801724c:	4607      	mov	r7, r0
 801724e:	460c      	mov	r4, r1
 8017250:	b10a      	cbz	r2, 8017256 <_printf_common+0x26>
 8017252:	3301      	adds	r3, #1
 8017254:	6033      	str	r3, [r6, #0]
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	0699      	lsls	r1, r3, #26
 801725a:	bf42      	ittt	mi
 801725c:	6833      	ldrmi	r3, [r6, #0]
 801725e:	3302      	addmi	r3, #2
 8017260:	6033      	strmi	r3, [r6, #0]
 8017262:	6825      	ldr	r5, [r4, #0]
 8017264:	f015 0506 	ands.w	r5, r5, #6
 8017268:	d106      	bne.n	8017278 <_printf_common+0x48>
 801726a:	f104 0a19 	add.w	sl, r4, #25
 801726e:	68e3      	ldr	r3, [r4, #12]
 8017270:	6832      	ldr	r2, [r6, #0]
 8017272:	1a9b      	subs	r3, r3, r2
 8017274:	42ab      	cmp	r3, r5
 8017276:	dc26      	bgt.n	80172c6 <_printf_common+0x96>
 8017278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801727c:	6822      	ldr	r2, [r4, #0]
 801727e:	3b00      	subs	r3, #0
 8017280:	bf18      	it	ne
 8017282:	2301      	movne	r3, #1
 8017284:	0692      	lsls	r2, r2, #26
 8017286:	d42b      	bmi.n	80172e0 <_printf_common+0xb0>
 8017288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801728c:	4641      	mov	r1, r8
 801728e:	4638      	mov	r0, r7
 8017290:	47c8      	blx	r9
 8017292:	3001      	adds	r0, #1
 8017294:	d01e      	beq.n	80172d4 <_printf_common+0xa4>
 8017296:	6823      	ldr	r3, [r4, #0]
 8017298:	6922      	ldr	r2, [r4, #16]
 801729a:	f003 0306 	and.w	r3, r3, #6
 801729e:	2b04      	cmp	r3, #4
 80172a0:	bf02      	ittt	eq
 80172a2:	68e5      	ldreq	r5, [r4, #12]
 80172a4:	6833      	ldreq	r3, [r6, #0]
 80172a6:	1aed      	subeq	r5, r5, r3
 80172a8:	68a3      	ldr	r3, [r4, #8]
 80172aa:	bf0c      	ite	eq
 80172ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172b0:	2500      	movne	r5, #0
 80172b2:	4293      	cmp	r3, r2
 80172b4:	bfc4      	itt	gt
 80172b6:	1a9b      	subgt	r3, r3, r2
 80172b8:	18ed      	addgt	r5, r5, r3
 80172ba:	2600      	movs	r6, #0
 80172bc:	341a      	adds	r4, #26
 80172be:	42b5      	cmp	r5, r6
 80172c0:	d11a      	bne.n	80172f8 <_printf_common+0xc8>
 80172c2:	2000      	movs	r0, #0
 80172c4:	e008      	b.n	80172d8 <_printf_common+0xa8>
 80172c6:	2301      	movs	r3, #1
 80172c8:	4652      	mov	r2, sl
 80172ca:	4641      	mov	r1, r8
 80172cc:	4638      	mov	r0, r7
 80172ce:	47c8      	blx	r9
 80172d0:	3001      	adds	r0, #1
 80172d2:	d103      	bne.n	80172dc <_printf_common+0xac>
 80172d4:	f04f 30ff 	mov.w	r0, #4294967295
 80172d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172dc:	3501      	adds	r5, #1
 80172de:	e7c6      	b.n	801726e <_printf_common+0x3e>
 80172e0:	18e1      	adds	r1, r4, r3
 80172e2:	1c5a      	adds	r2, r3, #1
 80172e4:	2030      	movs	r0, #48	@ 0x30
 80172e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80172ea:	4422      	add	r2, r4
 80172ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80172f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80172f4:	3302      	adds	r3, #2
 80172f6:	e7c7      	b.n	8017288 <_printf_common+0x58>
 80172f8:	2301      	movs	r3, #1
 80172fa:	4622      	mov	r2, r4
 80172fc:	4641      	mov	r1, r8
 80172fe:	4638      	mov	r0, r7
 8017300:	47c8      	blx	r9
 8017302:	3001      	adds	r0, #1
 8017304:	d0e6      	beq.n	80172d4 <_printf_common+0xa4>
 8017306:	3601      	adds	r6, #1
 8017308:	e7d9      	b.n	80172be <_printf_common+0x8e>
	...

0801730c <_printf_i>:
 801730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017310:	7e0f      	ldrb	r7, [r1, #24]
 8017312:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017314:	2f78      	cmp	r7, #120	@ 0x78
 8017316:	4691      	mov	r9, r2
 8017318:	4680      	mov	r8, r0
 801731a:	460c      	mov	r4, r1
 801731c:	469a      	mov	sl, r3
 801731e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017322:	d807      	bhi.n	8017334 <_printf_i+0x28>
 8017324:	2f62      	cmp	r7, #98	@ 0x62
 8017326:	d80a      	bhi.n	801733e <_printf_i+0x32>
 8017328:	2f00      	cmp	r7, #0
 801732a:	f000 80d2 	beq.w	80174d2 <_printf_i+0x1c6>
 801732e:	2f58      	cmp	r7, #88	@ 0x58
 8017330:	f000 80b9 	beq.w	80174a6 <_printf_i+0x19a>
 8017334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801733c:	e03a      	b.n	80173b4 <_printf_i+0xa8>
 801733e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017342:	2b15      	cmp	r3, #21
 8017344:	d8f6      	bhi.n	8017334 <_printf_i+0x28>
 8017346:	a101      	add	r1, pc, #4	@ (adr r1, 801734c <_printf_i+0x40>)
 8017348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801734c:	080173a5 	.word	0x080173a5
 8017350:	080173b9 	.word	0x080173b9
 8017354:	08017335 	.word	0x08017335
 8017358:	08017335 	.word	0x08017335
 801735c:	08017335 	.word	0x08017335
 8017360:	08017335 	.word	0x08017335
 8017364:	080173b9 	.word	0x080173b9
 8017368:	08017335 	.word	0x08017335
 801736c:	08017335 	.word	0x08017335
 8017370:	08017335 	.word	0x08017335
 8017374:	08017335 	.word	0x08017335
 8017378:	080174b9 	.word	0x080174b9
 801737c:	080173e3 	.word	0x080173e3
 8017380:	08017473 	.word	0x08017473
 8017384:	08017335 	.word	0x08017335
 8017388:	08017335 	.word	0x08017335
 801738c:	080174db 	.word	0x080174db
 8017390:	08017335 	.word	0x08017335
 8017394:	080173e3 	.word	0x080173e3
 8017398:	08017335 	.word	0x08017335
 801739c:	08017335 	.word	0x08017335
 80173a0:	0801747b 	.word	0x0801747b
 80173a4:	6833      	ldr	r3, [r6, #0]
 80173a6:	1d1a      	adds	r2, r3, #4
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	6032      	str	r2, [r6, #0]
 80173ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80173b4:	2301      	movs	r3, #1
 80173b6:	e09d      	b.n	80174f4 <_printf_i+0x1e8>
 80173b8:	6833      	ldr	r3, [r6, #0]
 80173ba:	6820      	ldr	r0, [r4, #0]
 80173bc:	1d19      	adds	r1, r3, #4
 80173be:	6031      	str	r1, [r6, #0]
 80173c0:	0606      	lsls	r6, r0, #24
 80173c2:	d501      	bpl.n	80173c8 <_printf_i+0xbc>
 80173c4:	681d      	ldr	r5, [r3, #0]
 80173c6:	e003      	b.n	80173d0 <_printf_i+0xc4>
 80173c8:	0645      	lsls	r5, r0, #25
 80173ca:	d5fb      	bpl.n	80173c4 <_printf_i+0xb8>
 80173cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80173d0:	2d00      	cmp	r5, #0
 80173d2:	da03      	bge.n	80173dc <_printf_i+0xd0>
 80173d4:	232d      	movs	r3, #45	@ 0x2d
 80173d6:	426d      	negs	r5, r5
 80173d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80173dc:	4859      	ldr	r0, [pc, #356]	@ (8017544 <_printf_i+0x238>)
 80173de:	230a      	movs	r3, #10
 80173e0:	e011      	b.n	8017406 <_printf_i+0xfa>
 80173e2:	6821      	ldr	r1, [r4, #0]
 80173e4:	6833      	ldr	r3, [r6, #0]
 80173e6:	0608      	lsls	r0, r1, #24
 80173e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80173ec:	d402      	bmi.n	80173f4 <_printf_i+0xe8>
 80173ee:	0649      	lsls	r1, r1, #25
 80173f0:	bf48      	it	mi
 80173f2:	b2ad      	uxthmi	r5, r5
 80173f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80173f6:	4853      	ldr	r0, [pc, #332]	@ (8017544 <_printf_i+0x238>)
 80173f8:	6033      	str	r3, [r6, #0]
 80173fa:	bf14      	ite	ne
 80173fc:	230a      	movne	r3, #10
 80173fe:	2308      	moveq	r3, #8
 8017400:	2100      	movs	r1, #0
 8017402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017406:	6866      	ldr	r6, [r4, #4]
 8017408:	60a6      	str	r6, [r4, #8]
 801740a:	2e00      	cmp	r6, #0
 801740c:	bfa2      	ittt	ge
 801740e:	6821      	ldrge	r1, [r4, #0]
 8017410:	f021 0104 	bicge.w	r1, r1, #4
 8017414:	6021      	strge	r1, [r4, #0]
 8017416:	b90d      	cbnz	r5, 801741c <_printf_i+0x110>
 8017418:	2e00      	cmp	r6, #0
 801741a:	d04b      	beq.n	80174b4 <_printf_i+0x1a8>
 801741c:	4616      	mov	r6, r2
 801741e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017422:	fb03 5711 	mls	r7, r3, r1, r5
 8017426:	5dc7      	ldrb	r7, [r0, r7]
 8017428:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801742c:	462f      	mov	r7, r5
 801742e:	42bb      	cmp	r3, r7
 8017430:	460d      	mov	r5, r1
 8017432:	d9f4      	bls.n	801741e <_printf_i+0x112>
 8017434:	2b08      	cmp	r3, #8
 8017436:	d10b      	bne.n	8017450 <_printf_i+0x144>
 8017438:	6823      	ldr	r3, [r4, #0]
 801743a:	07df      	lsls	r7, r3, #31
 801743c:	d508      	bpl.n	8017450 <_printf_i+0x144>
 801743e:	6923      	ldr	r3, [r4, #16]
 8017440:	6861      	ldr	r1, [r4, #4]
 8017442:	4299      	cmp	r1, r3
 8017444:	bfde      	ittt	le
 8017446:	2330      	movle	r3, #48	@ 0x30
 8017448:	f806 3c01 	strble.w	r3, [r6, #-1]
 801744c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017450:	1b92      	subs	r2, r2, r6
 8017452:	6122      	str	r2, [r4, #16]
 8017454:	f8cd a000 	str.w	sl, [sp]
 8017458:	464b      	mov	r3, r9
 801745a:	aa03      	add	r2, sp, #12
 801745c:	4621      	mov	r1, r4
 801745e:	4640      	mov	r0, r8
 8017460:	f7ff fee6 	bl	8017230 <_printf_common>
 8017464:	3001      	adds	r0, #1
 8017466:	d14a      	bne.n	80174fe <_printf_i+0x1f2>
 8017468:	f04f 30ff 	mov.w	r0, #4294967295
 801746c:	b004      	add	sp, #16
 801746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017472:	6823      	ldr	r3, [r4, #0]
 8017474:	f043 0320 	orr.w	r3, r3, #32
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	4833      	ldr	r0, [pc, #204]	@ (8017548 <_printf_i+0x23c>)
 801747c:	2778      	movs	r7, #120	@ 0x78
 801747e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017482:	6823      	ldr	r3, [r4, #0]
 8017484:	6831      	ldr	r1, [r6, #0]
 8017486:	061f      	lsls	r7, r3, #24
 8017488:	f851 5b04 	ldr.w	r5, [r1], #4
 801748c:	d402      	bmi.n	8017494 <_printf_i+0x188>
 801748e:	065f      	lsls	r7, r3, #25
 8017490:	bf48      	it	mi
 8017492:	b2ad      	uxthmi	r5, r5
 8017494:	6031      	str	r1, [r6, #0]
 8017496:	07d9      	lsls	r1, r3, #31
 8017498:	bf44      	itt	mi
 801749a:	f043 0320 	orrmi.w	r3, r3, #32
 801749e:	6023      	strmi	r3, [r4, #0]
 80174a0:	b11d      	cbz	r5, 80174aa <_printf_i+0x19e>
 80174a2:	2310      	movs	r3, #16
 80174a4:	e7ac      	b.n	8017400 <_printf_i+0xf4>
 80174a6:	4827      	ldr	r0, [pc, #156]	@ (8017544 <_printf_i+0x238>)
 80174a8:	e7e9      	b.n	801747e <_printf_i+0x172>
 80174aa:	6823      	ldr	r3, [r4, #0]
 80174ac:	f023 0320 	bic.w	r3, r3, #32
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	e7f6      	b.n	80174a2 <_printf_i+0x196>
 80174b4:	4616      	mov	r6, r2
 80174b6:	e7bd      	b.n	8017434 <_printf_i+0x128>
 80174b8:	6833      	ldr	r3, [r6, #0]
 80174ba:	6825      	ldr	r5, [r4, #0]
 80174bc:	6961      	ldr	r1, [r4, #20]
 80174be:	1d18      	adds	r0, r3, #4
 80174c0:	6030      	str	r0, [r6, #0]
 80174c2:	062e      	lsls	r6, r5, #24
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	d501      	bpl.n	80174cc <_printf_i+0x1c0>
 80174c8:	6019      	str	r1, [r3, #0]
 80174ca:	e002      	b.n	80174d2 <_printf_i+0x1c6>
 80174cc:	0668      	lsls	r0, r5, #25
 80174ce:	d5fb      	bpl.n	80174c8 <_printf_i+0x1bc>
 80174d0:	8019      	strh	r1, [r3, #0]
 80174d2:	2300      	movs	r3, #0
 80174d4:	6123      	str	r3, [r4, #16]
 80174d6:	4616      	mov	r6, r2
 80174d8:	e7bc      	b.n	8017454 <_printf_i+0x148>
 80174da:	6833      	ldr	r3, [r6, #0]
 80174dc:	1d1a      	adds	r2, r3, #4
 80174de:	6032      	str	r2, [r6, #0]
 80174e0:	681e      	ldr	r6, [r3, #0]
 80174e2:	6862      	ldr	r2, [r4, #4]
 80174e4:	2100      	movs	r1, #0
 80174e6:	4630      	mov	r0, r6
 80174e8:	f7e8 fe4a 	bl	8000180 <memchr>
 80174ec:	b108      	cbz	r0, 80174f2 <_printf_i+0x1e6>
 80174ee:	1b80      	subs	r0, r0, r6
 80174f0:	6060      	str	r0, [r4, #4]
 80174f2:	6863      	ldr	r3, [r4, #4]
 80174f4:	6123      	str	r3, [r4, #16]
 80174f6:	2300      	movs	r3, #0
 80174f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80174fc:	e7aa      	b.n	8017454 <_printf_i+0x148>
 80174fe:	6923      	ldr	r3, [r4, #16]
 8017500:	4632      	mov	r2, r6
 8017502:	4649      	mov	r1, r9
 8017504:	4640      	mov	r0, r8
 8017506:	47d0      	blx	sl
 8017508:	3001      	adds	r0, #1
 801750a:	d0ad      	beq.n	8017468 <_printf_i+0x15c>
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	079b      	lsls	r3, r3, #30
 8017510:	d413      	bmi.n	801753a <_printf_i+0x22e>
 8017512:	68e0      	ldr	r0, [r4, #12]
 8017514:	9b03      	ldr	r3, [sp, #12]
 8017516:	4298      	cmp	r0, r3
 8017518:	bfb8      	it	lt
 801751a:	4618      	movlt	r0, r3
 801751c:	e7a6      	b.n	801746c <_printf_i+0x160>
 801751e:	2301      	movs	r3, #1
 8017520:	4632      	mov	r2, r6
 8017522:	4649      	mov	r1, r9
 8017524:	4640      	mov	r0, r8
 8017526:	47d0      	blx	sl
 8017528:	3001      	adds	r0, #1
 801752a:	d09d      	beq.n	8017468 <_printf_i+0x15c>
 801752c:	3501      	adds	r5, #1
 801752e:	68e3      	ldr	r3, [r4, #12]
 8017530:	9903      	ldr	r1, [sp, #12]
 8017532:	1a5b      	subs	r3, r3, r1
 8017534:	42ab      	cmp	r3, r5
 8017536:	dcf2      	bgt.n	801751e <_printf_i+0x212>
 8017538:	e7eb      	b.n	8017512 <_printf_i+0x206>
 801753a:	2500      	movs	r5, #0
 801753c:	f104 0619 	add.w	r6, r4, #25
 8017540:	e7f5      	b.n	801752e <_printf_i+0x222>
 8017542:	bf00      	nop
 8017544:	08017b0d 	.word	0x08017b0d
 8017548:	08017b1e 	.word	0x08017b1e

0801754c <__sflush_r>:
 801754c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017554:	0716      	lsls	r6, r2, #28
 8017556:	4605      	mov	r5, r0
 8017558:	460c      	mov	r4, r1
 801755a:	d454      	bmi.n	8017606 <__sflush_r+0xba>
 801755c:	684b      	ldr	r3, [r1, #4]
 801755e:	2b00      	cmp	r3, #0
 8017560:	dc02      	bgt.n	8017568 <__sflush_r+0x1c>
 8017562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017564:	2b00      	cmp	r3, #0
 8017566:	dd48      	ble.n	80175fa <__sflush_r+0xae>
 8017568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801756a:	2e00      	cmp	r6, #0
 801756c:	d045      	beq.n	80175fa <__sflush_r+0xae>
 801756e:	2300      	movs	r3, #0
 8017570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017574:	682f      	ldr	r7, [r5, #0]
 8017576:	6a21      	ldr	r1, [r4, #32]
 8017578:	602b      	str	r3, [r5, #0]
 801757a:	d030      	beq.n	80175de <__sflush_r+0x92>
 801757c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801757e:	89a3      	ldrh	r3, [r4, #12]
 8017580:	0759      	lsls	r1, r3, #29
 8017582:	d505      	bpl.n	8017590 <__sflush_r+0x44>
 8017584:	6863      	ldr	r3, [r4, #4]
 8017586:	1ad2      	subs	r2, r2, r3
 8017588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801758a:	b10b      	cbz	r3, 8017590 <__sflush_r+0x44>
 801758c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801758e:	1ad2      	subs	r2, r2, r3
 8017590:	2300      	movs	r3, #0
 8017592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017594:	6a21      	ldr	r1, [r4, #32]
 8017596:	4628      	mov	r0, r5
 8017598:	47b0      	blx	r6
 801759a:	1c43      	adds	r3, r0, #1
 801759c:	89a3      	ldrh	r3, [r4, #12]
 801759e:	d106      	bne.n	80175ae <__sflush_r+0x62>
 80175a0:	6829      	ldr	r1, [r5, #0]
 80175a2:	291d      	cmp	r1, #29
 80175a4:	d82b      	bhi.n	80175fe <__sflush_r+0xb2>
 80175a6:	4a2a      	ldr	r2, [pc, #168]	@ (8017650 <__sflush_r+0x104>)
 80175a8:	410a      	asrs	r2, r1
 80175aa:	07d6      	lsls	r6, r2, #31
 80175ac:	d427      	bmi.n	80175fe <__sflush_r+0xb2>
 80175ae:	2200      	movs	r2, #0
 80175b0:	6062      	str	r2, [r4, #4]
 80175b2:	04d9      	lsls	r1, r3, #19
 80175b4:	6922      	ldr	r2, [r4, #16]
 80175b6:	6022      	str	r2, [r4, #0]
 80175b8:	d504      	bpl.n	80175c4 <__sflush_r+0x78>
 80175ba:	1c42      	adds	r2, r0, #1
 80175bc:	d101      	bne.n	80175c2 <__sflush_r+0x76>
 80175be:	682b      	ldr	r3, [r5, #0]
 80175c0:	b903      	cbnz	r3, 80175c4 <__sflush_r+0x78>
 80175c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80175c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175c6:	602f      	str	r7, [r5, #0]
 80175c8:	b1b9      	cbz	r1, 80175fa <__sflush_r+0xae>
 80175ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175ce:	4299      	cmp	r1, r3
 80175d0:	d002      	beq.n	80175d8 <__sflush_r+0x8c>
 80175d2:	4628      	mov	r0, r5
 80175d4:	f7ff fbf2 	bl	8016dbc <_free_r>
 80175d8:	2300      	movs	r3, #0
 80175da:	6363      	str	r3, [r4, #52]	@ 0x34
 80175dc:	e00d      	b.n	80175fa <__sflush_r+0xae>
 80175de:	2301      	movs	r3, #1
 80175e0:	4628      	mov	r0, r5
 80175e2:	47b0      	blx	r6
 80175e4:	4602      	mov	r2, r0
 80175e6:	1c50      	adds	r0, r2, #1
 80175e8:	d1c9      	bne.n	801757e <__sflush_r+0x32>
 80175ea:	682b      	ldr	r3, [r5, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d0c6      	beq.n	801757e <__sflush_r+0x32>
 80175f0:	2b1d      	cmp	r3, #29
 80175f2:	d001      	beq.n	80175f8 <__sflush_r+0xac>
 80175f4:	2b16      	cmp	r3, #22
 80175f6:	d11e      	bne.n	8017636 <__sflush_r+0xea>
 80175f8:	602f      	str	r7, [r5, #0]
 80175fa:	2000      	movs	r0, #0
 80175fc:	e022      	b.n	8017644 <__sflush_r+0xf8>
 80175fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017602:	b21b      	sxth	r3, r3
 8017604:	e01b      	b.n	801763e <__sflush_r+0xf2>
 8017606:	690f      	ldr	r7, [r1, #16]
 8017608:	2f00      	cmp	r7, #0
 801760a:	d0f6      	beq.n	80175fa <__sflush_r+0xae>
 801760c:	0793      	lsls	r3, r2, #30
 801760e:	680e      	ldr	r6, [r1, #0]
 8017610:	bf08      	it	eq
 8017612:	694b      	ldreq	r3, [r1, #20]
 8017614:	600f      	str	r7, [r1, #0]
 8017616:	bf18      	it	ne
 8017618:	2300      	movne	r3, #0
 801761a:	eba6 0807 	sub.w	r8, r6, r7
 801761e:	608b      	str	r3, [r1, #8]
 8017620:	f1b8 0f00 	cmp.w	r8, #0
 8017624:	dde9      	ble.n	80175fa <__sflush_r+0xae>
 8017626:	6a21      	ldr	r1, [r4, #32]
 8017628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801762a:	4643      	mov	r3, r8
 801762c:	463a      	mov	r2, r7
 801762e:	4628      	mov	r0, r5
 8017630:	47b0      	blx	r6
 8017632:	2800      	cmp	r0, #0
 8017634:	dc08      	bgt.n	8017648 <__sflush_r+0xfc>
 8017636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801763a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801763e:	81a3      	strh	r3, [r4, #12]
 8017640:	f04f 30ff 	mov.w	r0, #4294967295
 8017644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017648:	4407      	add	r7, r0
 801764a:	eba8 0800 	sub.w	r8, r8, r0
 801764e:	e7e7      	b.n	8017620 <__sflush_r+0xd4>
 8017650:	dfbffffe 	.word	0xdfbffffe

08017654 <_fflush_r>:
 8017654:	b538      	push	{r3, r4, r5, lr}
 8017656:	690b      	ldr	r3, [r1, #16]
 8017658:	4605      	mov	r5, r0
 801765a:	460c      	mov	r4, r1
 801765c:	b913      	cbnz	r3, 8017664 <_fflush_r+0x10>
 801765e:	2500      	movs	r5, #0
 8017660:	4628      	mov	r0, r5
 8017662:	bd38      	pop	{r3, r4, r5, pc}
 8017664:	b118      	cbz	r0, 801766e <_fflush_r+0x1a>
 8017666:	6a03      	ldr	r3, [r0, #32]
 8017668:	b90b      	cbnz	r3, 801766e <_fflush_r+0x1a>
 801766a:	f7ff f983 	bl	8016974 <__sinit>
 801766e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d0f3      	beq.n	801765e <_fflush_r+0xa>
 8017676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017678:	07d0      	lsls	r0, r2, #31
 801767a:	d404      	bmi.n	8017686 <_fflush_r+0x32>
 801767c:	0599      	lsls	r1, r3, #22
 801767e:	d402      	bmi.n	8017686 <_fflush_r+0x32>
 8017680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017682:	f7ff fb8a 	bl	8016d9a <__retarget_lock_acquire_recursive>
 8017686:	4628      	mov	r0, r5
 8017688:	4621      	mov	r1, r4
 801768a:	f7ff ff5f 	bl	801754c <__sflush_r>
 801768e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017690:	07da      	lsls	r2, r3, #31
 8017692:	4605      	mov	r5, r0
 8017694:	d4e4      	bmi.n	8017660 <_fflush_r+0xc>
 8017696:	89a3      	ldrh	r3, [r4, #12]
 8017698:	059b      	lsls	r3, r3, #22
 801769a:	d4e1      	bmi.n	8017660 <_fflush_r+0xc>
 801769c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801769e:	f7ff fb7d 	bl	8016d9c <__retarget_lock_release_recursive>
 80176a2:	e7dd      	b.n	8017660 <_fflush_r+0xc>

080176a4 <__swhatbuf_r>:
 80176a4:	b570      	push	{r4, r5, r6, lr}
 80176a6:	460c      	mov	r4, r1
 80176a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176ac:	2900      	cmp	r1, #0
 80176ae:	b096      	sub	sp, #88	@ 0x58
 80176b0:	4615      	mov	r5, r2
 80176b2:	461e      	mov	r6, r3
 80176b4:	da0d      	bge.n	80176d2 <__swhatbuf_r+0x2e>
 80176b6:	89a3      	ldrh	r3, [r4, #12]
 80176b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176bc:	f04f 0100 	mov.w	r1, #0
 80176c0:	bf14      	ite	ne
 80176c2:	2340      	movne	r3, #64	@ 0x40
 80176c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176c8:	2000      	movs	r0, #0
 80176ca:	6031      	str	r1, [r6, #0]
 80176cc:	602b      	str	r3, [r5, #0]
 80176ce:	b016      	add	sp, #88	@ 0x58
 80176d0:	bd70      	pop	{r4, r5, r6, pc}
 80176d2:	466a      	mov	r2, sp
 80176d4:	f000 f87c 	bl	80177d0 <_fstat_r>
 80176d8:	2800      	cmp	r0, #0
 80176da:	dbec      	blt.n	80176b6 <__swhatbuf_r+0x12>
 80176dc:	9901      	ldr	r1, [sp, #4]
 80176de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176e6:	4259      	negs	r1, r3
 80176e8:	4159      	adcs	r1, r3
 80176ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176ee:	e7eb      	b.n	80176c8 <__swhatbuf_r+0x24>

080176f0 <__smakebuf_r>:
 80176f0:	898b      	ldrh	r3, [r1, #12]
 80176f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f4:	079d      	lsls	r5, r3, #30
 80176f6:	4606      	mov	r6, r0
 80176f8:	460c      	mov	r4, r1
 80176fa:	d507      	bpl.n	801770c <__smakebuf_r+0x1c>
 80176fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017700:	6023      	str	r3, [r4, #0]
 8017702:	6123      	str	r3, [r4, #16]
 8017704:	2301      	movs	r3, #1
 8017706:	6163      	str	r3, [r4, #20]
 8017708:	b003      	add	sp, #12
 801770a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801770c:	ab01      	add	r3, sp, #4
 801770e:	466a      	mov	r2, sp
 8017710:	f7ff ffc8 	bl	80176a4 <__swhatbuf_r>
 8017714:	9f00      	ldr	r7, [sp, #0]
 8017716:	4605      	mov	r5, r0
 8017718:	4639      	mov	r1, r7
 801771a:	4630      	mov	r0, r6
 801771c:	f7ff fbba 	bl	8016e94 <_malloc_r>
 8017720:	b948      	cbnz	r0, 8017736 <__smakebuf_r+0x46>
 8017722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017726:	059a      	lsls	r2, r3, #22
 8017728:	d4ee      	bmi.n	8017708 <__smakebuf_r+0x18>
 801772a:	f023 0303 	bic.w	r3, r3, #3
 801772e:	f043 0302 	orr.w	r3, r3, #2
 8017732:	81a3      	strh	r3, [r4, #12]
 8017734:	e7e2      	b.n	80176fc <__smakebuf_r+0xc>
 8017736:	89a3      	ldrh	r3, [r4, #12]
 8017738:	6020      	str	r0, [r4, #0]
 801773a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801773e:	81a3      	strh	r3, [r4, #12]
 8017740:	9b01      	ldr	r3, [sp, #4]
 8017742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017746:	b15b      	cbz	r3, 8017760 <__smakebuf_r+0x70>
 8017748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801774c:	4630      	mov	r0, r6
 801774e:	f000 f851 	bl	80177f4 <_isatty_r>
 8017752:	b128      	cbz	r0, 8017760 <__smakebuf_r+0x70>
 8017754:	89a3      	ldrh	r3, [r4, #12]
 8017756:	f023 0303 	bic.w	r3, r3, #3
 801775a:	f043 0301 	orr.w	r3, r3, #1
 801775e:	81a3      	strh	r3, [r4, #12]
 8017760:	89a3      	ldrh	r3, [r4, #12]
 8017762:	431d      	orrs	r5, r3
 8017764:	81a5      	strh	r5, [r4, #12]
 8017766:	e7cf      	b.n	8017708 <__smakebuf_r+0x18>

08017768 <_putc_r>:
 8017768:	b570      	push	{r4, r5, r6, lr}
 801776a:	460d      	mov	r5, r1
 801776c:	4614      	mov	r4, r2
 801776e:	4606      	mov	r6, r0
 8017770:	b118      	cbz	r0, 801777a <_putc_r+0x12>
 8017772:	6a03      	ldr	r3, [r0, #32]
 8017774:	b90b      	cbnz	r3, 801777a <_putc_r+0x12>
 8017776:	f7ff f8fd 	bl	8016974 <__sinit>
 801777a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801777c:	07d8      	lsls	r0, r3, #31
 801777e:	d405      	bmi.n	801778c <_putc_r+0x24>
 8017780:	89a3      	ldrh	r3, [r4, #12]
 8017782:	0599      	lsls	r1, r3, #22
 8017784:	d402      	bmi.n	801778c <_putc_r+0x24>
 8017786:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017788:	f7ff fb07 	bl	8016d9a <__retarget_lock_acquire_recursive>
 801778c:	68a3      	ldr	r3, [r4, #8]
 801778e:	3b01      	subs	r3, #1
 8017790:	2b00      	cmp	r3, #0
 8017792:	60a3      	str	r3, [r4, #8]
 8017794:	da05      	bge.n	80177a2 <_putc_r+0x3a>
 8017796:	69a2      	ldr	r2, [r4, #24]
 8017798:	4293      	cmp	r3, r2
 801779a:	db12      	blt.n	80177c2 <_putc_r+0x5a>
 801779c:	b2eb      	uxtb	r3, r5
 801779e:	2b0a      	cmp	r3, #10
 80177a0:	d00f      	beq.n	80177c2 <_putc_r+0x5a>
 80177a2:	6823      	ldr	r3, [r4, #0]
 80177a4:	1c5a      	adds	r2, r3, #1
 80177a6:	6022      	str	r2, [r4, #0]
 80177a8:	701d      	strb	r5, [r3, #0]
 80177aa:	b2ed      	uxtb	r5, r5
 80177ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177ae:	07da      	lsls	r2, r3, #31
 80177b0:	d405      	bmi.n	80177be <_putc_r+0x56>
 80177b2:	89a3      	ldrh	r3, [r4, #12]
 80177b4:	059b      	lsls	r3, r3, #22
 80177b6:	d402      	bmi.n	80177be <_putc_r+0x56>
 80177b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177ba:	f7ff faef 	bl	8016d9c <__retarget_lock_release_recursive>
 80177be:	4628      	mov	r0, r5
 80177c0:	bd70      	pop	{r4, r5, r6, pc}
 80177c2:	4629      	mov	r1, r5
 80177c4:	4622      	mov	r2, r4
 80177c6:	4630      	mov	r0, r6
 80177c8:	f7ff f9c5 	bl	8016b56 <__swbuf_r>
 80177cc:	4605      	mov	r5, r0
 80177ce:	e7ed      	b.n	80177ac <_putc_r+0x44>

080177d0 <_fstat_r>:
 80177d0:	b538      	push	{r3, r4, r5, lr}
 80177d2:	4d07      	ldr	r5, [pc, #28]	@ (80177f0 <_fstat_r+0x20>)
 80177d4:	2300      	movs	r3, #0
 80177d6:	4604      	mov	r4, r0
 80177d8:	4608      	mov	r0, r1
 80177da:	4611      	mov	r1, r2
 80177dc:	602b      	str	r3, [r5, #0]
 80177de:	f7e9 fb26 	bl	8000e2e <_fstat>
 80177e2:	1c43      	adds	r3, r0, #1
 80177e4:	d102      	bne.n	80177ec <_fstat_r+0x1c>
 80177e6:	682b      	ldr	r3, [r5, #0]
 80177e8:	b103      	cbz	r3, 80177ec <_fstat_r+0x1c>
 80177ea:	6023      	str	r3, [r4, #0]
 80177ec:	bd38      	pop	{r3, r4, r5, pc}
 80177ee:	bf00      	nop
 80177f0:	200076cc 	.word	0x200076cc

080177f4 <_isatty_r>:
 80177f4:	b538      	push	{r3, r4, r5, lr}
 80177f6:	4d06      	ldr	r5, [pc, #24]	@ (8017810 <_isatty_r+0x1c>)
 80177f8:	2300      	movs	r3, #0
 80177fa:	4604      	mov	r4, r0
 80177fc:	4608      	mov	r0, r1
 80177fe:	602b      	str	r3, [r5, #0]
 8017800:	f7e9 fb25 	bl	8000e4e <_isatty>
 8017804:	1c43      	adds	r3, r0, #1
 8017806:	d102      	bne.n	801780e <_isatty_r+0x1a>
 8017808:	682b      	ldr	r3, [r5, #0]
 801780a:	b103      	cbz	r3, 801780e <_isatty_r+0x1a>
 801780c:	6023      	str	r3, [r4, #0]
 801780e:	bd38      	pop	{r3, r4, r5, pc}
 8017810:	200076cc 	.word	0x200076cc

08017814 <_sbrk_r>:
 8017814:	b538      	push	{r3, r4, r5, lr}
 8017816:	4d06      	ldr	r5, [pc, #24]	@ (8017830 <_sbrk_r+0x1c>)
 8017818:	2300      	movs	r3, #0
 801781a:	4604      	mov	r4, r0
 801781c:	4608      	mov	r0, r1
 801781e:	602b      	str	r3, [r5, #0]
 8017820:	f7e9 fb2e 	bl	8000e80 <_sbrk>
 8017824:	1c43      	adds	r3, r0, #1
 8017826:	d102      	bne.n	801782e <_sbrk_r+0x1a>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	b103      	cbz	r3, 801782e <_sbrk_r+0x1a>
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	bd38      	pop	{r3, r4, r5, pc}
 8017830:	200076cc 	.word	0x200076cc

08017834 <_init>:
 8017834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017836:	bf00      	nop
 8017838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801783a:	bc08      	pop	{r3}
 801783c:	469e      	mov	lr, r3
 801783e:	4770      	bx	lr

08017840 <_fini>:
 8017840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017842:	bf00      	nop
 8017844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017846:	bc08      	pop	{r3}
 8017848:	469e      	mov	lr, r3
 801784a:	4770      	bx	lr
