
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017710  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08017850  08017850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b34  08017b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b3c  08017b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b40  08017b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  20000008  08017b44  00019008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000075fc  200000e0  08017c1c  000190e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200076dc  08017c1c  000196dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000190e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000555a8  00000000  00000000  00019110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064fb  00000000  00000000  0006e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002930  00000000  00000000  00074bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f8d  00000000  00000000  000774e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002cae6  00000000  00000000  00079475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034377  00000000  00000000  000a5f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010c6e3  00000000  00000000  000da2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e69b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b6ec  00000000  00000000  001e69f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001f20e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08017838 	.word	0x08017838

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	08017838 	.word	0x08017838

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9b5 	b.w	80005ac <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	f023 0218 	bic.w	r2, r3, #24
 8000612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e009      	b.n	8000682 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff9a 	bl	80005b0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbf1      	blt.n	800066e <_write+0x12>
}
return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f011 ff48 	bl	801252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80c 	bl	80006b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a0:	f000 f880 	bl	80007a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f8c4 	bl	8000830 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006a8:	f000 f89a 	bl	80007e0 <MX_USB_PCD_Init>
  MX_TOF_Init();
 80006ac:	f015 feed 	bl	801648a <MX_TOF_Init>
  while (1)
  {

    /* USER CODE END WHILE */

  MX_TOF_Process();
 80006b0:	f015 fef1 	bl	8016496 <MX_TOF_Process>
 80006b4:	e7fc      	b.n	80006b0 <main+0x1c>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09a      	sub	sp, #104	@ 0x68
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2248      	movs	r2, #72	@ 0x48
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f016 fadc 	bl	8016c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006ec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	f023 0303 	bic.w	r3, r3, #3
 80006f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000702:	f013 fae3 	bl	8013ccc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff79 	bl	80005fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xe8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000714:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <SystemClock_Config+0xe8>)
 8000716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <SystemClock_Config+0xe8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000728:	2327      	movs	r3, #39	@ 0x27
 800072a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f013 fe4d 	bl	80143f4 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 f8c0 	bl	80008e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000764:	236f      	movs	r3, #111	@ 0x6f
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f014 f9a9 	bl	8014adc <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000790:	f000 f8a8 	bl	80008e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000794:	f014 ff64 	bl	8015660 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000798:	bf00      	nop
 800079a:	3768      	adds	r7, #104	@ 0x68
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000400 	.word	0x58000400

080007a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2250      	movs	r2, #80	@ 0x50
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f016 fa67 	bl	8016c84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f014 fdd4 	bl	8015374 <HAL_RCCEx_PeriphCLKConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007d2:	f000 f887 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007e6:	4a11      	ldr	r2, [pc, #68]	@ (800082c <MX_USB_PCD_Init+0x4c>)
 80007e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 80007fe:	2200      	movs	r2, #0
 8000800:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000804:	2200      	movs	r2, #0
 8000806:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 800080a:	2200      	movs	r2, #0
 800080c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000810:	2200      	movs	r2, #0
 8000812:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_USB_PCD_Init+0x48>)
 8000816:	f013 f960 	bl	8013ada <HAL_PCD_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000820:	f000 f860 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000fc 	.word	0x200000fc
 800082c:	40006800 	.word	0x40006800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	2004      	movs	r0, #4
 8000846:	f7ff fef0 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff feea 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2008      	movs	r0, #8
 8000858:	f7ff fee7 	bl	800062a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2123      	movs	r1, #35	@ 0x23
 8000860:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <MX_GPIO_Init+0xa8>)
 8000862:	f012 fac7 	bl	8012df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2310      	movs	r3, #16
 8000868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4818      	ldr	r0, [pc, #96]	@ (80008dc <MX_GPIO_Init+0xac>)
 800087a:	f012 f86d 	bl	8012958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800087e:	2323      	movs	r3, #35	@ 0x23
 8000880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <MX_GPIO_Init+0xa8>)
 8000894:	f012 f860 	bl	8012958 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000898:	2302      	movs	r3, #2
 800089a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_GPIO_Init+0xb0>)
 80008aa:	f012 f855 	bl	8012958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2006      	movs	r0, #6
 80008b4:	f011 ffbf 	bl	8012836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f011 ffd6 	bl	801286a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	200a      	movs	r0, #10
 80008c4:	f011 ffb7 	bl	8012836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f011 ffce 	bl	801286a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800
 80008e0:	48000c00 	.word	0x48000c00

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <LL_AHB2_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800092a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800093a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4013      	ands	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09c      	sub	sp, #112	@ 0x70
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2250      	movs	r2, #80	@ 0x50
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f016 f97d 	bl	8016c84 <memset>
  if(hpcd->Instance==USB)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <HAL_PCD_MspInit+0xa8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d136      	bne.n	8000a02 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000994:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000998:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800099a:	2318      	movs	r3, #24
 800099c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800099e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80009a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80009aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80009b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f014 fcd7 	bl	8015374 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80009cc:	f7ff ff8a 	bl	80008e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ff8d 	bl	80008f0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009e8:	230a      	movs	r3, #10
 80009ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f011 ffaf 	bl	8012958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009fa:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80009fe:	f7ff ff90 	bl	8000922 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	3770      	adds	r7, #112	@ 0x70
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40006800 	.word	0x40006800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f011 fdbb 	bl	80125e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <EXTI0_IRQHandler+0x10>)
 8000a76:	f011 ff40 	bl	80128fa <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000070 	.word	0x20000070

08000a84 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a88:	2010      	movs	r0, #16
 8000a8a:	f012 f9cb 	bl	8012e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <LL_AHB2_GRP1_EnableClock>:
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_APB1_GRP1_EnableClock>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ad0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ae0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <BSP_I2C1_Init+0x70>)
 8000b28:	4a19      	ldr	r2, [pc, #100]	@ (8000b90 <BSP_I2C1_Init+0x74>)
 8000b2a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <BSP_I2C1_Init+0x78>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	4918      	ldr	r1, [pc, #96]	@ (8000b94 <BSP_I2C1_Init+0x78>)
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d122      	bne.n	8000b80 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000b3a:	4814      	ldr	r0, [pc, #80]	@ (8000b8c <BSP_I2C1_Init+0x70>)
 8000b3c:	f012 fc76 	bl	801342c <HAL_I2C_GetState>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11c      	bne.n	8000b80 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b46:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <BSP_I2C1_Init+0x70>)
 8000b48:	f000 f8ee 	bl	8000d28 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d116      	bne.n	8000b80 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <BSP_I2C1_Init+0x70>)
 8000b54:	f000 f8a4 	bl	8000ca0 <MX_I2C1_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b5e:	f06f 0307 	mvn.w	r3, #7
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	e00c      	b.n	8000b80 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <BSP_I2C1_Init+0x70>)
 8000b6a:	f012 ff1f 	bl	80139ac <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b74:	f06f 0307 	mvn.w	r3, #7
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e001      	b.n	8000b80 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200003d8 	.word	0x200003d8
 8000b90:	40005400 	.word	0x40005400
 8000b94:	2000042c 	.word	0x2000042c

08000b98 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <BSP_I2C1_DeInit+0x48>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d014      	beq.n	8000bd4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <BSP_I2C1_DeInit+0x48>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000be0 <BSP_I2C1_DeInit+0x48>)
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <BSP_I2C1_DeInit+0x48>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10b      	bne.n	8000bd4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000bbc:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <BSP_I2C1_DeInit+0x4c>)
 8000bbe:	f000 f8f7 	bl	8000db0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <BSP_I2C1_DeInit+0x4c>)
 8000bc4:	f012 f9e1 	bl	8012f8a <HAL_I2C_DeInit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000bce:	f06f 0307 	mvn.w	r3, #7
 8000bd2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000042c 	.word	0x2000042c
 8000be4:	200003d8 	.word	0x200003d8

08000be8 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	88f9      	ldrh	r1, [r7, #6]
 8000c00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <BSP_I2C1_Send+0x50>)
 8000c0a:	f012 fa01 	bl	8013010 <HAL_I2C_Master_Transmit>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00c      	beq.n	8000c2e <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <BSP_I2C1_Send+0x50>)
 8000c16:	f012 fc17 	bl	8013448 <HAL_I2C_GetError>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d003      	beq.n	8000c28 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c20:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e002      	b.n	8000c2e <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c28:	f06f 0303 	mvn.w	r3, #3
 8000c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200003d8 	.word	0x200003d8

08000c3c <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	88f9      	ldrh	r1, [r7, #6]
 8000c54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <BSP_I2C1_Recv+0x50>)
 8000c5e:	f012 faef 	bl	8013240 <HAL_I2C_Master_Receive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00c      	beq.n	8000c82 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c68:	4808      	ldr	r0, [pc, #32]	@ (8000c8c <BSP_I2C1_Recv+0x50>)
 8000c6a:	f012 fbed 	bl	8013448 <HAL_I2C_GetError>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d003      	beq.n	8000c7c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c74:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e002      	b.n	8000c82 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c7c:	f06f 0303 	mvn.w	r3, #3
 8000c80:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200003d8 	.word	0x200003d8

08000c90 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c94:	f011 fcb8 	bl	8012608 <HAL_GetTick>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_I2C1_Init+0x80>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <MX_I2C1_Init+0x84>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f012 f8b6 	bl	8012e54 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f012 fe59 	bl	80139ac <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f012 fe9b 	bl	8013a42 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40005400 	.word	0x40005400
 8000d24:	00b07cb4 	.word	0x00b07cb4

08000d28 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	@ 0x70
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2250      	movs	r2, #80	@ 0x50
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f015 ffa3 	bl	8016c84 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d42:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f014 fb11 	bl	8015374 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff fe9d 	bl	8000a92 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <I2C1_MspInit+0x84>)
 8000d76:	f011 fdef 	bl	8012958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <I2C1_MspInit+0x84>)
 8000d98:	f011 fdde 	bl	8012958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000da0:	f7ff fe90 	bl	8000ac4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	3770      	adds	r7, #112	@ 0x70
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	48000400 	.word	0x48000400

08000db0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000db8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000dbc:	f7ff fe9b 	bl	8000af6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <I2C1_MspDeInit+0x2c>)
 8000dc6:	f011 ff37 	bl	8012c38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <I2C1_MspDeInit+0x2c>)
 8000dd0:	f011 ff32 	bl	8012c38 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	48000400 	.word	0x48000400

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f015 ff48 	bl	8016d48 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20030000 	.word	0x20030000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000430 	.word	0x20000430
 8000eec:	200076e0 	.word	0x200076e0

08000ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <SystemInit+0x98>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a23      	ldr	r2, [pc, #140]	@ (8000f88 <SystemInit+0x98>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f18:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <SystemInit+0x9c>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f3a:	f023 0305 	bic.w	r3, r3, #5
 8000f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <SystemInit+0xa0>)
 8000f5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f62:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <SystemInit+0xa0>)
 8000f64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	faf6fefb 	.word	0xfaf6fefb
 8000f90:	22041000 	.word	0x22041000

08000f94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f98:	3304      	adds	r3, #4

08000f9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f9e:	d3f9      	bcc.n	8000f94 <CopyDataInit>
  bx lr
 8000fa0:	4770      	bx	lr

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fa2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fa4:	3004      	adds	r0, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fa6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>
  bx lr
 8000faa:	4770      	bx	lr

08000fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff ff9e 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <LoopForever+0x6>)
 8000fb6:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <LoopForever+0xa>)
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <LoopForever+0xe>)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f7ff ffed 	bl	8000f9a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <LoopForever+0x12>)
 8000fc2:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <LoopForever+0x16>)
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <LoopForever+0x1a>)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f7ff ffe7 	bl	8000f9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <LoopForever+0x1e>)
 8000fce:	490c      	ldr	r1, [pc, #48]	@ (8001000 <LoopForever+0x22>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f7ff ffe8 	bl	8000fa6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f015 febd 	bl	8016d54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fda:	f7ff fb5b 	bl	8000694 <main>

08000fde <LoopForever>:

LoopForever:
  b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	08017b44 	.word	0x08017b44
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ff0:	20030000 	.word	0x20030000
 8000ff4:	20030000 	.word	0x20030000
 8000ff8:	08017c1c 	.word	0x08017c1c
  INIT_BSS _sbss, _ebss
 8000ffc:	200000e0 	.word	0x200000e0
 8001000:	200076dc 	.word	0x200076dc

08001004 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_IRQHandler>

08001006 <VL53L4A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d903      	bls.n	800101c <VL53L4A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001014:	f06f 0301 	mvn.w	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e003      	b.n	8001024 <VL53L4A2_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L4CX_Probe(Instance);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f919 	bl	8001254 <VL53L4CX_Probe>
 8001022:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <VL53L4A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d903      	bls.n	8001048 <VL53L4A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001040:	f06f 0301 	mvn.w	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e012      	b.n	800106e <VL53L4A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ReadID(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <VL53L4A2_RANGING_SENSOR_ReadID+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	490b      	ldr	r1, [pc, #44]	@ (800107c <VL53L4A2_RANGING_SENSOR_ReadID+0x4c>)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001056:	6839      	ldr	r1, [r7, #0]
 8001058:	4610      	mov	r0, r2
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	da03      	bge.n	800106a <VL53L4A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001062:	f06f 0304 	mvn.w	r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e001      	b.n	800106e <VL53L4A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000440 	.word	0x20000440
 800107c:	20000434 	.word	0x20000434

08001080 <VL53L4A2_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d903      	bls.n	8001098 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001090:	f06f 0301 	mvn.w	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e012      	b.n	80010be <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x48>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	490b      	ldr	r1, [pc, #44]	@ (80010cc <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x4c>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4798      	blx	r3
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da03      	bge.n	80010ba <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80010b2:	f06f 0304 	mvn.w	r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e001      	b.n	80010be <VL53L4A2_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000440 	.word	0x20000440
 80010cc:	20000434 	.word	0x20000434

080010d0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d903      	bls.n	80010e8 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010e0:	f06f 0301 	mvn.w	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e012      	b.n	800110e <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	490b      	ldr	r1, [pc, #44]	@ (800111c <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	4798      	blx	r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da03      	bge.n	800110a <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001102:	f06f 0304 	mvn.w	r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e001      	b.n	800110e <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000440 	.word	0x20000440
 800111c:	20000434 	.word	0x20000434

08001120 <VL53L4A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d903      	bls.n	8001138 <VL53L4A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001130:	f06f 0301 	mvn.w	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e012      	b.n	800115e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetDistance(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <VL53L4A2_RANGING_SENSOR_GetDistance+0x48>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	490b      	ldr	r1, [pc, #44]	@ (800116c <VL53L4A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4610      	mov	r0, r2
 800114a:	4798      	blx	r3
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	da03      	bge.n	800115a <VL53L4A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001152:	f06f 0304 	mvn.w	r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e001      	b.n	800115e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000440 	.word	0x20000440
 800116c:	20000434 	.word	0x20000434

08001170 <VL53L4A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d903      	bls.n	8001188 <VL53L4A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001180:	f06f 0301 	mvn.w	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e012      	b.n	80011ae <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Start(VL53L4A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <VL53L4A2_RANGING_SENSOR_Start+0x48>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	490b      	ldr	r1, [pc, #44]	@ (80011bc <VL53L4A2_RANGING_SENSOR_Start+0x4c>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	4610      	mov	r0, r2
 800119a:	4798      	blx	r3
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da03      	bge.n	80011aa <VL53L4A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80011a2:	f06f 0304 	mvn.w	r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e001      	b.n	80011ae <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000440 	.word	0x20000440
 80011bc:	20000434 	.word	0x20000434

080011c0 <VL53L4A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d903      	bls.n	80011d6 <VL53L4A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011ce:	f06f 0301 	mvn.w	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e011      	b.n	80011fa <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Stop(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <VL53L4A2_RANGING_SENSOR_Stop+0x44>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	490a      	ldr	r1, [pc, #40]	@ (8001208 <VL53L4A2_RANGING_SENSOR_Stop+0x48>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e4:	4610      	mov	r0, r2
 80011e6:	4798      	blx	r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da03      	bge.n	80011f6 <VL53L4A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80011ee:	f06f 0304 	mvn.w	r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e001      	b.n	80011fa <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000440 	.word	0x20000440
 8001208:	20000434 	.word	0x20000434

0800120c <VL53L4A2_RANGING_SENSOR_OffsetCalibration>:
  * @param Instance    Ranging sensor instance.
  * @param CalDistance   Calibration distance in mm.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_OffsetCalibration(uint32_t Instance, uint32_t CalDistance)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d903      	bls.n	8001224 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800121c:	f06f 0301 	mvn.w	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e010      	b.n	8001246 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else if (VL53L4CX_OffsetCalibration(VL53L4A2_RANGING_SENSOR_CompObj[Instance], CalDistance) < 0)
 8001224:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x44>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f010 fe7c 	bl	8011f2c <VL53L4CX_OffsetCalibration>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	da03      	bge.n	8001242 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e001      	b.n	8001246 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000434 	.word	0x20000434

08001254 <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 800125c:	2352      	movs	r3, #82	@ 0x52
 800125e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L4A2_I2C_INIT;
 8001260:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <VL53L4CX_Probe+0xf0>)
 8001262:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L4A2_I2C_DEINIT;
 8001264:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <VL53L4CX_Probe+0xf4>)
 8001266:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L4A2_I2C_WRITEREG;
 8001268:	4b38      	ldr	r3, [pc, #224]	@ (800134c <VL53L4CX_Probe+0xf8>)
 800126a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L4A2_I2C_READREG;
 800126c:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <VL53L4CX_Probe+0xfc>)
 800126e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L4A2_GETTICK;
 8001270:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <VL53L4CX_Probe+0x100>)
 8001272:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&(VL53L4CXObj[Instance]), &IOCtx) != VL53L4CX_OK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	4a36      	ldr	r2, [pc, #216]	@ (8001358 <VL53L4CX_Probe+0x104>)
 8001280:	4413      	add	r3, r2
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f010 fb66 	bl	801195a <VL53L4CX_RegisterBusIO>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <VL53L4CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001294:	f06f 0304 	mvn.w	r3, #4
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
 800129a:	e04d      	b.n	8001338 <VL53L4CX_Probe+0xe4>
  }
  else
  {
    VL53L4A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <VL53L4CX_Probe+0x108>)
 800129e:	4a30      	ldr	r2, [pc, #192]	@ (8001360 <VL53L4CX_Probe+0x10c>)
 80012a0:	601a      	str	r2, [r3, #0]
    VL53L4A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L4CXObj[Instance]);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001358 <VL53L4CX_Probe+0x104>)
 80012ae:	441a      	add	r2, r3
 80012b0:	492c      	ldr	r1, [pc, #176]	@ (8001364 <VL53L4CX_Probe+0x110>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L4CX_ReadID(&(VL53L4CXObj[Instance]), &id) != VL53L4CX_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <VL53L4CX_Probe+0x104>)
 80012c4:	4413      	add	r3, r2
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f010 fbf6 	bl	8011abe <VL53L4CX_ReadID>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <VL53L4CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012d8:	f06f 0304 	mvn.w	r3, #4
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012de:	e02b      	b.n	8001338 <VL53L4CX_Probe+0xe4>
    }
    else if (id != VL53L4CX_ID)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d003      	beq.n	80012f2 <VL53L4CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80012ea:	f06f 0306 	mvn.w	r3, #6
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f0:	e022      	b.n	8001338 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->Init(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) != VL53L4CX_OK)
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <VL53L4CX_Probe+0x108>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	491a      	ldr	r1, [pc, #104]	@ (8001364 <VL53L4CX_Probe+0x110>)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001300:	4610      	mov	r0, r2
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <VL53L4CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800130a:	f06f 0304 	mvn.w	r3, #4
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001310:	e012      	b.n	8001338 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance],
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <VL53L4CX_Probe+0x108>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4912      	ldr	r1, [pc, #72]	@ (8001364 <VL53L4CX_Probe+0x110>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001320:	4911      	ldr	r1, [pc, #68]	@ (8001368 <VL53L4CX_Probe+0x114>)
 8001322:	4610      	mov	r0, r2
 8001324:	4798      	blx	r3
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <VL53L4CX_Probe+0xe0>
                                                          &VL53L4A2_RANGING_SENSOR_Cap) != VL53L4CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800132c:	f06f 0304 	mvn.w	r3, #4
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
 8001332:	e001      	b.n	8001338 <VL53L4CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800133a:	4618      	mov	r0, r3
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	08000b1d 	.word	0x08000b1d
 8001348:	08000b99 	.word	0x08000b99
 800134c:	08000be9 	.word	0x08000be9
 8001350:	08000c3d 	.word	0x08000c3d
 8001354:	08000c91 	.word	0x08000c91
 8001358:	20000458 	.word	0x20000458
 800135c:	20000440 	.word	0x20000440
 8001360:	20000038 	.word	0x20000038
 8001364:	20000434 	.word	0x20000434
 8001368:	20000444 	.word	0x20000444

0800136c <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3318      	adds	r3, #24
 8001380:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001388:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	2101      	movs	r1, #1
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f010 f8e7 	bl	8011568 <VL53LX_WrByte>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80013ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 80013c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 80013ce:	2101      	movs	r1, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 fe7a 	bl	80030ca <VL53LX_data_init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 80013e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e6:	2102      	movs	r1, #2
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f885 	bl	80014f8 <SetPresetModeL3CX>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 80013f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80013fa:	f248 2135 	movw	r1, #33333	@ 0x8235
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f980 	bl	8001704 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10a      	bne.n	8001426 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3318      	adds	r3, #24
 8001414:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 800141c:	220c      	movs	r2, #12
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f015 fc2f 	bl	8016c84 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800142e:	2102      	movs	r1, #2
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f004 f86e 	bl	8005512 <VL53LX_set_dmax_mode>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 800143a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001442:	2100      	movs	r1, #0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 ff57 	bl	80022f8 <VL53LX_SmudgeCorrectionEnable>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800144e:	2320      	movs	r3, #32
 8001450:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800145e:	2202      	movs	r2, #2
 8001460:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 800147c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f00f fc2a 	bl	8010cda <VL53LX_poll_for_boot_completion>
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 80014a8:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <ComputeDevicePresetMode+0x5c>)
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4611      	mov	r1, r2
 80014b2:	8019      	strh	r1, [r3, #0]
 80014b4:	3302      	adds	r3, #2
 80014b6:	0c12      	lsrs	r2, r2, #16
 80014b8:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d002      	beq.n	80014c6 <ComputeDevicePresetMode+0x2e>
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d003      	beq.n	80014cc <ComputeDevicePresetMode+0x34>
 80014c4:	e005      	b.n	80014d2 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
		break;
 80014ca:	e004      	b.n	80014d6 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
		break;
 80014d0:	e001      	b.n	80014d6 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3310      	adds	r3, #16
 80014da:	443b      	add	r3, r7
 80014dc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	701a      	strb	r2, [r3, #0]

	return Status;
 80014e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	08017850 	.word	0x08017850

080014f8 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	460b      	mov	r3, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800151c:	2320      	movs	r3, #32
 800151e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001522:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ffb4 	bl	8001498 <ComputeDevicePresetMode>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001536:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800153a:	2b00      	cmp	r3, #0
 800153c:	d112      	bne.n	8001564 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 800153e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8001542:	f107 001c 	add.w	r0, r7, #28
 8001546:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4603      	mov	r3, r0
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f002 fa19 	bl	8003990 <VL53LX_get_preset_mode_timing_cfg>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001564:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001568:	2b00      	cmp	r3, #0
 800156a:	d112      	bne.n	8001592 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 800156c:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8001570:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8001572:	69fd      	ldr	r5, [r7, #28]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	9102      	str	r1, [sp, #8]
 800157c:	9201      	str	r2, [sp, #4]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	462b      	mov	r3, r5
 8001582:	4622      	mov	r2, r4
 8001584:	4601      	mov	r1, r0
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f002 fa63 	bl	8003a52 <VL53LX_set_preset_mode>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001592:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015a0:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80015a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}

080015ae <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3318      	adds	r3, #24
 80015be:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 80015c6:	2baa      	cmp	r3, #170	@ 0xaa
 80015c8:	d106      	bne.n	80015d8 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80015d0:	2beb      	cmp	r3, #235	@ 0xeb
 80015d2:	d101      	bne.n	80015d8 <IsL4+0x2a>
		devL4 = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
	return devL4;
 80015d8:	68fb      	ldr	r3, [r7, #12]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80015f2:	793b      	ldrb	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d808      	bhi.n	800160a <CheckValidRectRoi+0x24>
 80015f8:	797b      	ldrb	r3, [r7, #5]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	d805      	bhi.n	800160a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80015fe:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d802      	bhi.n	800160a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d901      	bls.n	800160e <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800160a:	23fc      	movs	r3, #252	@ 0xfc
 800160c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800160e:	793a      	ldrb	r2, [r7, #4]
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	429a      	cmp	r2, r3
 8001614:	d803      	bhi.n	800161e <CheckValidRectRoi+0x38>
 8001616:	797a      	ldrb	r2, [r7, #5]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	429a      	cmp	r2, r3
 800161c:	d201      	bcs.n	8001622 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800161e:	23fc      	movs	r3, #252	@ 0xfc
 8001620:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b088      	sub	sp, #32
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d008      	beq.n	8001666 <VL53LX_SetDistanceMode+0x34>
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d005      	beq.n	8001666 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d002      	beq.n	8001666 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001660:	f06f 0303 	mvn.w	r3, #3
 8001664:	e049      	b.n	80016fa <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa1 	bl	80015ae <IsL4>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <VL53LX_SetDistanceMode+0x4c>
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001678:	f06f 0303 	mvn.w	r3, #3
 800167c:	e03d      	b.n	80016fa <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001684:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	f107 0210 	add.w	r2, r7, #16
 8001694:	f107 010c 	add.w	r1, r7, #12
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f002 f854 	bl	8003746 <VL53LX_get_timeouts_us>
 800169e:	4603      	mov	r3, r0
 80016a0:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 80016a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff21 	bl	80014f8 <SetPresetModeL3CX>
 80016b6:	4603      	mov	r3, r0
 80016b8:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 80016ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016c8:	461a      	mov	r2, r3
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80016d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10e      	bne.n	80016f6 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f001 fff8 	bl	80036d4 <VL53LX_set_timeouts_us>
 80016e4:	4603      	mov	r3, r0
 80016e6:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 80016e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001722:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4a31      	ldr	r2, [pc, #196]	@ (80017ec <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d902      	bls.n	8001732 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800172c:	23fc      	movs	r3, #252	@ 0xfc
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001732:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	f107 0210 	add.w	r2, r7, #16
 8001742:	f107 010c 	add.w	r1, r7, #12
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 fffd 	bl	8003746 <VL53LX_get_timeouts_us>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001752:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8001756:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001758:	2306      	movs	r3, #6
 800175a:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff26 	bl	80015ae <IsL4>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 800176a:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	429a      	cmp	r2, r3
 8001772:	d803      	bhi.n	800177c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001774:	23fc      	movs	r3, #252	@ 0xfc
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800177a:	e003      	b.n	8001784 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001782:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001784:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11c      	bne.n	80017c6 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	429a      	cmp	r2, r3
 8001792:	d203      	bcs.n	800179c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001794:	23fc      	movs	r3, #252	@ 0xfc
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800179a:	e00d      	b.n	80017b8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 ff91 	bl	80036d4 <VL53LX_set_timeouts_us>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80017b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80017c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80017dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	00086470 	.word	0x00086470
 80017ec:	00989680 	.word	0x00989680
 80017f0:	00030d40 	.word	0x00030d40

080017f4 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b092      	sub	sp, #72	@ 0x48
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff feeb 	bl	80015e6 <CheckValidRectRoi>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001816:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 800181e:	f06f 0303 	mvn.w	r3, #3
 8001822:	e050      	b.n	80018c6 <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	789b      	ldrb	r3, [r3, #2]
 8001828:	461a      	mov	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	3301      	adds	r3, #1
 8001832:	0fda      	lsrs	r2, r3, #31
 8001834:	4413      	add	r3, r2
 8001836:	105b      	asrs	r3, r3, #1
 8001838:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	461a      	mov	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	78db      	ldrb	r3, [r3, #3]
 8001846:	4413      	add	r3, r2
 8001848:	3301      	adds	r3, #1
 800184a:	0fda      	lsrs	r2, r3, #31
 800184c:	4413      	add	r3, r2
 800184e:	105b      	asrs	r3, r3, #1
 8001850:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	789a      	ldrb	r2, [r3, #2]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785a      	ldrb	r2, [r3, #1]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001878:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800187c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001880:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001884:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8001888:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800188c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 8001890:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8001898:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800189c:	2b02      	cmp	r3, #2
 800189e:	d903      	bls.n	80018a8 <VL53LX_SetUserROI+0xb4>
 80018a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d803      	bhi.n	80018b0 <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80018a8:	23fc      	movs	r3, #252	@ 0xfc
 80018aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80018ae:	e008      	b.n	80018c2 <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 f827 	bl	800390a <VL53LX_set_zone_config>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 80018c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3748      	adds	r7, #72	@ 0x48
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3318      	adds	r3, #24
 80018de:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f001 fa8f 	bl	8002e04 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	75bb      	strb	r3, [r7, #22]
 80018ea:	e01a      	b.n	8001922 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80018ec:	7dbb      	ldrb	r3, [r7, #22]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80018f4:	3308      	adds	r3, #8
 80018f6:	2100      	movs	r1, #0
 80018f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001906:	3318      	adds	r3, #24
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001916:	331c      	adds	r3, #28
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800191c:	7dbb      	ldrb	r3, [r7, #22]
 800191e:	3301      	adds	r3, #1
 8001920:	75bb      	strb	r3, [r7, #22]
 8001922:	7dbb      	ldrb	r3, [r7, #22]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d9e1      	bls.n	80018ec <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800192e:	2200      	movs	r2, #0
 8001930:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800193a:	2200      	movs	r2, #0
 800193c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7edb      	ldrb	r3, [r3, #27]
 8001944:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2206      	movs	r2, #6
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f002 f93f 	bl	8003bd8 <VL53LX_init_and_start_range>
 800195a:	4603      	mov	r3, r0
 800195c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 800195e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f002 fbfc 	bl	8004174 <VL53LX_stop_range>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f001 fb6d 	bl	8003060 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7edb      	ldrb	r3, [r3, #27]
 80019a2:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 80019a4:	7bbb      	ldrb	r3, [r7, #14]
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f003 f8fa 	bl	8004ba2 <VL53LX_clear_interrupt_and_enable_next_range>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f00f f949 	bl	8010c66 <VL53LX_is_new_data_ready>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <VL53LX_WaitMeasurementDataReady>:

VL53LX_Error VL53LX_WaitMeasurementDataReady(VL53LX_DEV Dev)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	Status = VL53LX_poll_for_range_completion(Dev,
 80019f0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f00f f99c 	bl	8010d32 <VL53LX_poll_for_range_completion>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <ConvertStatusHisto>:

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	3b05      	subs	r3, #5
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d840      	bhi.n	8001aa0 <ConvertStatusHisto+0x94>
 8001a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <ConvertStatusHisto+0x18>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a71 	.word	0x08001a71
 8001a28:	08001a77 	.word	0x08001a77
 8001a2c:	08001a83 	.word	0x08001a83
 8001a30:	08001aa1 	.word	0x08001aa1
 8001a34:	08001a9b 	.word	0x08001a9b
 8001a38:	08001aa1 	.word	0x08001aa1
 8001a3c:	08001aa1 	.word	0x08001aa1
 8001a40:	08001aa1 	.word	0x08001aa1
 8001a44:	08001aa1 	.word	0x08001aa1
 8001a48:	08001aa1 	.word	0x08001aa1
 8001a4c:	08001aa1 	.word	0x08001aa1
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001aa1 	.word	0x08001aa1
 8001a58:	08001aa1 	.word	0x08001aa1
 8001a5c:	08001a7d 	.word	0x08001a7d
 8001a60:	08001a8f 	.word	0x08001a8f
 8001a64:	08001aa1 	.word	0x08001aa1
 8001a68:	08001a95 	.word	0x08001a95
 8001a6c:	08001a89 	.word	0x08001a89
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001a70:	2304      	movs	r3, #4
 8001a72:	73fb      	strb	r3, [r7, #15]
		break;
 8001a74:	e016      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
		break;
 8001a7a:	e013      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8001a80:	e010      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001a82:	2307      	movs	r3, #7
 8001a84:	73fb      	strb	r3, [r7, #15]
		break;
 8001a86:	e00d      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	73fb      	strb	r3, [r7, #15]
		break;
 8001a8c:	e00a      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	73fb      	strb	r3, [r7, #15]
		break;
 8001a92:	e007      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001a94:	230b      	movs	r3, #11
 8001a96:	73fb      	strb	r3, [r7, #15]
		break;
 8001a98:	e004      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a9e:	e001      	b.n	8001aa4 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8001aa0:	23ff      	movs	r3, #255	@ 0xff
 8001aa2:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop

08001ab4 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	@ 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	70fb      	strb	r3, [r7, #3]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70bb      	strb	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	33f8      	adds	r3, #248	@ 0xf8
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b02:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b10:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b1e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8001b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b24:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b28:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8001b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2e:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8001b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b38:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8001b3a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	d009      	beq.n	8001b56 <SetTargetData+0xa2>
 8001b42:	2b11      	cmp	r3, #17
 8001b44:	dc0f      	bgt.n	8001b66 <SetTargetData+0xb2>
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	dc02      	bgt.n	8001b50 <SetTargetData+0x9c>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc03      	bgt.n	8001b56 <SetTargetData+0xa2>
 8001b4e:	e00a      	b.n	8001b66 <SetTargetData+0xb2>
 8001b50:	2b0d      	cmp	r3, #13
 8001b52:	d004      	beq.n	8001b5e <SetTargetData+0xaa>
 8001b54:	e007      	b.n	8001b66 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b58:	2205      	movs	r2, #5
 8001b5a:	749a      	strb	r2, [r3, #18]
		break;
 8001b5c:	e006      	b.n	8001b6c <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b60:	220d      	movs	r2, #13
 8001b62:	749a      	strb	r2, [r3, #18]
		break;
 8001b64:	e002      	b.n	8001b6c <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b68:	2200      	movs	r2, #0
 8001b6a:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b6e:	7c9b      	ldrb	r3, [r3, #18]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d117      	bne.n	8001ba4 <SetTargetData+0xf0>
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d114      	bne.n	8001ba4 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7c:	22ff      	movs	r2, #255	@ 0xff
 8001b7e:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8001b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8001b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8e:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b92:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b9a:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8001b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b9e:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ba2:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	7c9b      	ldrb	r3, [r3, #18]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d108      	bne.n	8001bbe <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8001bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff2b 	bl	8001a0c <ConvertStatusHisto>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8001bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bbc:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f248 0191 	movw	r1, #32913	@ 0x8091
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f003 fcf9 	bl	80055c0 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bde:	8a1b      	ldrh	r3, [r3, #16]
 8001be0:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 8001be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be8:	2200      	movs	r2, #0
 8001bea:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8001bec:	f107 030b 	add.w	r3, r7, #11
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f009 fc03 	bl	800b3fe <VL53LX_compute_histo_merge_nb>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d109      	bne.n	8001c18 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8001c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 81db 	beq.w	8001fda <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 8001c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c26:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d004      	beq.n	8001c36 <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8001c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c2e:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	f040 81d2 	bne.w	8001fda <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8001c36:	787b      	ldrb	r3, [r7, #1]
 8001c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c40:	3318      	adds	r3, #24
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b07      	cmp	r3, #7
 8001c46:	d01c      	beq.n	8001c82 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c52:	3318      	adds	r3, #24
 8001c54:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d013      	beq.n	8001c82 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8001c5a:	787b      	ldrb	r3, [r7, #1]
 8001c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c64:	3318      	adds	r3, #24
 8001c66:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 81b6 	bne.w	8001fda <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001c78:	331c      	adds	r3, #28
 8001c7a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f040 81ac 	bne.w	8001fda <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c88:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001c8c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8001c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c90:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8001c94:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d00c      	beq.n	8001cb4 <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ca0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001ca4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8001ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca8:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8001cac:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f040 816b 	bne.w	8001f8a <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cba:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cc0:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001cca:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8001cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b21      	cmp	r3, #33	@ 0x21
 8001cde:	d008      	beq.n	8001cf2 <SetTargetData+0x23e>
 8001ce0:	2b21      	cmp	r3, #33	@ 0x21
 8001ce2:	f300 814e 	bgt.w	8001f82 <SetTargetData+0x4ce>
 8001ce6:	2b1b      	cmp	r3, #27
 8001ce8:	f000 80d7 	beq.w	8001e9a <SetTargetData+0x3e6>
 8001cec:	2b1e      	cmp	r3, #30
 8001cee:	d004      	beq.n	8001cfa <SetTargetData+0x246>
 8001cf0:	e147      	b.n	8001f82 <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001cf8:	e147      	b.n	8001f8a <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8001d00:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dd0e      	ble.n	8001d26 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001d0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	da07      	bge.n	8001d26 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d104      	bne.n	8001d26 <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8001d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8001d22:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d24:	e0b8      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8001d30:	425b      	negs	r3, r3
 8001d32:	429a      	cmp	r2, r3
 8001d34:	da0f      	bge.n	8001d56 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 8001d40:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dd07      	ble.n	8001d56 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8001d52:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d54:	e0a0      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d58:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8001d5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dd0e      	ble.n	8001d82 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d66:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	da07      	bge.n	8001d82 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 8001d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8001d7e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001d80:	e08a      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d82:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d88:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8001d8c:	425b      	negs	r3, r3
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	da0f      	bge.n	8001db2 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d98:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8001d9c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dd07      	ble.n	8001db2 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d104      	bne.n	8001db2 <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 8001da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001daa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8001dae:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001db0:	e072      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001db8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dd0e      	ble.n	8001dde <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc2:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001dc6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	da07      	bge.n	8001dde <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d104      	bne.n	8001dde <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8001dda:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001ddc:	e05c      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001dde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001de8:	425b      	negs	r3, r3
 8001dea:	429a      	cmp	r2, r3
 8001dec:	da0f      	bge.n	8001e0e <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001dee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8001df8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dd07      	ble.n	8001e0e <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e06:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8001e0a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e0c:	e044      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e10:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001e14:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dd0e      	ble.n	8001e3a <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001e22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	da07      	bge.n	8001e3a <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8001e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e32:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8001e36:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e38:	e02e      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001e3a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e40:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001e44:	425b      	negs	r3, r3
 8001e46:	429a      	cmp	r2, r3
 8001e48:	da0f      	bge.n	8001e6a <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001e4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8001e54:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dd07      	ble.n	8001e6a <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d104      	bne.n	8001e6a <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8001e66:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e68:	e016      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8001e70:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	da0b      	bge.n	8001e90 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8001e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001e7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dd04      	ble.n	8001e90 <SetTargetData+0x3dc>
					AddOffset =
 8001e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e88:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001e8c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e8e:	e003      	b.n	8001e98 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001e96:	e078      	b.n	8001f8a <SetTargetData+0x4d6>
 8001e98:	e077      	b.n	8001f8a <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001ea0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dd0e      	ble.n	8001ec6 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eaa:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001eae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	da07      	bge.n	8001ec6 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8001ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebe:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8001ec2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001ec4:	e05c      	b.n	8001f80 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001ec6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ecc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	da0f      	bge.n	8001ef6 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001ed6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001edc:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8001ee0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dd07      	ble.n	8001ef6 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d104      	bne.n	8001ef6 <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8001ef2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001ef4:	e044      	b.n	8001f80 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001efc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dd0e      	ble.n	8001f22 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001f0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	da07      	bge.n	8001f22 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001f1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f20:	e02e      	b.n	8001f80 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001f22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f28:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	da0f      	bge.n	8001f52 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001f32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8001f3c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dd07      	ble.n	8001f52 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8001f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8001f4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f50:	e016      	b.n	8001f80 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f54:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8001f58:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	da0b      	bge.n	8001f78 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001f66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dd04      	ble.n	8001f78 <SetTargetData+0x4c4>
					AddOffset =
 8001f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f70:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8001f74:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f76:	e003      	b.n	8001f80 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001f7e:	e004      	b.n	8001f8a <SetTargetData+0x4d6>
 8001f80:	e003      	b.n	8001f8a <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001f88:	bf00      	nop
			}
		}

		if (uwr_status) {
 8001f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 8001f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f94:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa4:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb8:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fcc:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8001fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8001fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001fda:	787b      	ldrb	r3, [r7, #1]
 8001fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fde:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	8ab9      	ldrh	r1, [r7, #20]
 8001fe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001fea:	787b      	ldrb	r3, [r7, #1]
 8001fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fee:	7c91      	ldrb	r1, [r2, #18]
 8001ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001ffe:	787b      	ldrb	r3, [r7, #1]
 8002000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002002:	7cd1      	ldrb	r1, [r2, #19]
 8002004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002006:	4413      	add	r3, r2
 8002008:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800200c:	331c      	adds	r3, #28
 800200e:	460a      	mov	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002018:	461a      	mov	r2, r3
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 8002020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002022:	8a1b      	ldrh	r3, [r3, #16]
 8002024:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002028:	7c9b      	ldrb	r3, [r3, #18]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d110      	bne.n	8002050 <SetTargetData+0x59c>
 800202e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da0c      	bge.n	8002050 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002036:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <SetTargetData+0x5a8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	da03      	bge.n	800204a <SetTargetData+0x596>
			pRangeData->RangeStatus =
 8002042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002044:	220e      	movs	r2, #14
 8002046:	749a      	strb	r2, [r3, #18]
 8002048:	e002      	b.n	8002050 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800204a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204c:	2200      	movs	r2, #0
 800204e:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 8002054:	4618      	mov	r0, r3
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000000c 	.word	0x2000000c

08002060 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b08f      	sub	sp, #60	@ 0x3c
 8002064:	af04      	add	r7, sp, #16
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3318      	adds	r3, #24
 8002070:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	7c9a      	ldrb	r2, [r3, #18]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	78da      	ldrb	r2, [r3, #3]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	7c9b      	ldrb	r3, [r3, #18]
 800209e:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <SetMeasurementData+0x4e>

		iteration = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020ac:	e002      	b.n	80020b4 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020ba:	e035      	b.n	8002128 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80020bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3308      	adds	r3, #8
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80020d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d4:	224c      	movs	r2, #76	@ 0x4c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	3310      	adds	r3, #16
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80020e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d113      	bne.n	8002114 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7918      	ldrb	r0, [r3, #4]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	7c1b      	ldrb	r3, [r3, #16]
 80020f4:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80020f8:	7ff9      	ldrb	r1, [r7, #31]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4623      	mov	r3, r4
 8002106:	4602      	mov	r2, r0
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fcd3 	bl	8001ab4 <SetTargetData>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 800211e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002122:	3301      	adds	r3, #1
 8002124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002128:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800212c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002130:	429a      	cmp	r2, r3
 8002132:	d3c3      	bcc.n	80020bc <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002140:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800214c:	e01f      	b.n	800218e <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800214e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002158:	3308      	adds	r3, #8
 800215a:	2100      	movs	r1, #0
 800215c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	4413      	add	r3, r2
 8002168:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800216c:	3318      	adds	r3, #24
 800216e:	22ff      	movs	r2, #255	@ 0xff
 8002170:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002176:	6a3a      	ldr	r2, [r7, #32]
 8002178:	4413      	add	r3, r2
 800217a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800217e:	331c      	adds	r3, #28
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002188:	3301      	adds	r3, #1
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800218e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002192:	2b03      	cmp	r3, #3
 8002194:	d9db      	bls.n	800214e <SetMeasurementData+0xee>
	}

	return Status;
 8002196:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 800219a:	4618      	mov	r0, r3
 800219c:	372c      	adds	r7, #44	@ 0x2c
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}

080021a2 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3318      	adds	r3, #24
 80021b4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80021bc:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80021be:	225c      	movs	r2, #92	@ 0x5c
 80021c0:	21ff      	movs	r1, #255	@ 0xff
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f014 fd5e 	bl	8016c84 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	2102      	movs	r1, #2
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f002 f8e0 	bl	8004392 <VL53LX_get_device_results>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff40 	bl	8002060 <SetMeasurementData>
 80021e0:	4603      	mov	r3, r0
 80021e2:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 80021e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b090      	sub	sp, #64	@ 0x40
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80021fe:	f240 3305 	movw	r3, #773	@ 0x305
 8002202:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3318      	adds	r3, #24
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	3348      	adds	r3, #72	@ 0x48
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002216:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 800221a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 800221e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002226:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa45 	bl	80026bc <VL53LX_run_ref_spad_char>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002238:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800223c:	f113 0f1d 	cmn.w	r3, #29
 8002240:	d14e      	bne.n	80022e0 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	2206      	movs	r2, #6
 8002248:	2128      	movs	r1, #40	@ 0x28
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f00c ff58 	bl	800f100 <VL53LX_read_nvm_raw_data>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002256:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	2302      	movs	r3, #2
 8002264:	2114      	movs	r1, #20
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f00f f912 	bl	8011490 <VL53LX_WriteMulti>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002272:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 800227a:	7b3a      	ldrb	r2, [r7, #12]
 800227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227e:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002280:	7b7a      	ldrb	r2, [r7, #13]
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002284:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	3310      	adds	r3, #16
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 800228e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 8002296:	2306      	movs	r3, #6
 8002298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800229a:	210d      	movs	r1, #13
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f00f f8f7 	bl	8011490 <VL53LX_WriteMulti>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80022a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d117      	bne.n	80022e0 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80022b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ba:	785a      	ldrb	r2, [r3, #1]
 80022bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022be:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c2:	789a      	ldrb	r2, [r3, #2]
 80022c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c6:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80022c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ca:	78da      	ldrb	r2, [r3, #3]
 80022cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ce:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80022d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d2:	791a      	ldrb	r2, [r3, #4]
 80022d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d6:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	795a      	ldrb	r2, [r3, #5]
 80022dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022de:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 80022e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff f9a3 	bl	8001632 <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 80022ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3740      	adds	r7, #64	@ 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002310:	2300      	movs	r3, #0
 8002312:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d84a      	bhi.n	80023b0 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800231a:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <VL53LX_SmudgeCorrectionEnable+0x28>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002351 	.word	0x08002351
 8002328:	08002371 	.word	0x08002371
 800232c:	08002391 	.word	0x08002391
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f004 f850 	bl	80063d6 <VL53LX_dynamic_xtalk_correction_disable>
 8002336:	4603      	mov	r3, r0
 8002338:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 f862 	bl	8006404 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002340:	4603      	mov	r3, r0
 8002342:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f004 f88b 	bl	8006460 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800234a:	4603      	mov	r3, r0
 800234c:	733b      	strb	r3, [r7, #12]
		break;
 800234e:	e032      	b.n	80023b6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f004 f829 	bl	80063a8 <VL53LX_dynamic_xtalk_correction_enable>
 8002356:	4603      	mov	r3, r0
 8002358:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f004 f897 	bl	800648e <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002360:	4603      	mov	r3, r0
 8002362:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f004 f87b 	bl	8006460 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800236a:	4603      	mov	r3, r0
 800236c:	733b      	strb	r3, [r7, #12]
		break;
 800236e:	e022      	b.n	80023b6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f004 f819 	bl	80063a8 <VL53LX_dynamic_xtalk_correction_enable>
 8002376:	4603      	mov	r3, r0
 8002378:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 f887 	bl	800648e <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002380:	4603      	mov	r3, r0
 8002382:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f004 f854 	bl	8006432 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 800238a:	4603      	mov	r3, r0
 800238c:	733b      	strb	r3, [r7, #12]
		break;
 800238e:	e012      	b.n	80023b6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f004 f809 	bl	80063a8 <VL53LX_dynamic_xtalk_correction_enable>
 8002396:	4603      	mov	r3, r0
 8002398:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f004 f832 	bl	8006404 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80023a0:	4603      	mov	r3, r0
 80023a2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f004 f85b 	bl	8006460 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80023aa:	4603      	mov	r3, r0
 80023ac:	733b      	strb	r3, [r7, #12]
		break;
 80023ae:	e002      	b.n	80023b6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80023b0:	23fc      	movs	r3, #252	@ 0xfc
 80023b2:	73fb      	strb	r3, [r7, #15]
		break;
 80023b4:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80023ca:	7b7b      	ldrb	r3, [r7, #13]
 80023cc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80023d6:	7b3b      	ldrb	r3, [r7, #12]
 80023d8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop

080023e8 <VL53LX_SetOffsetCorrectionMode>:
}


VL53LX_Error VL53LX_SetOffsetCorrectionMode(VL53LX_DEV Dev,
		VL53LX_OffsetCorrectionModes OffsetCorrectionMode)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
	VL53LX_OffsetCorrectionMode offset_cor_mode;

	LOG_FUNCTION_START("");

	if (OffsetCorrectionMode ==
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d102      	bne.n	8002404 <VL53LX_SetOffsetCorrectionMode+0x1c>
		VL53LX_OFFSETCORRECTIONMODE_PERVCSEL)
		offset_cor_mode =
 80023fe:	2303      	movs	r3, #3
 8002400:	73bb      	strb	r3, [r7, #14]
 8002402:	e006      	b.n	8002412 <VL53LX_SetOffsetCorrectionMode+0x2a>
				VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS;
	else {
		offset_cor_mode =
 8002404:	2301      	movs	r3, #1
 8002406:	73bb      	strb	r3, [r7, #14]
			VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
		if (OffsetCorrectionMode !=
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <VL53LX_SetOffsetCorrectionMode+0x2a>
			VL53LX_OFFSETCORRECTIONMODE_STANDARD)
			Status = VL53LX_ERROR_INVALID_PARAMS;
 800240e:	23fc      	movs	r3, #252	@ 0xfc
 8002410:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53LX_ERROR_NONE)
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <VL53LX_SetOffsetCorrectionMode+0x40>
		Status =  VL53LX_set_offset_correction_mode(Dev,
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f003 f8b7 	bl	8005592 <VL53LX_set_offset_correction_mode>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
				offset_cor_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <VL53LX_PerformOffsetSimpleCalibration>:


VL53LX_Error VL53LX_PerformOffsetSimpleCalibration(VL53LX_DEV Dev,
	int32_t CalDistanceMilliMeter)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a6      	sub	sp, #152	@ 0x98
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	int16_t meanDistance_mm;
	int16_t offset;
	VL53LX_MultiRangingData_t RangingMeasurementData;
	VL53LX_LLDriverData_t *pdev;
	uint8_t goodmeas;
	VL53LX_Error SmudgeStatus = VL53LX_ERROR_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	uint8_t smudge_corr_en;
	VL53LX_TargetRangeData_t *pRange;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3318      	adds	r3, #24
 800244e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	smudge_corr_en = pdev->smudge_correct_config.smudge_corr_enabled;
 8002450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002456:	f893 3394 	ldrb.w	r3, [r3, #916]	@ 0x394
 800245a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	SmudgeStatus = VL53LX_dynamic_xtalk_correction_disable(Dev);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f003 ffb9 	bl	80063d6 <VL53LX_dynamic_xtalk_correction_disable>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	pdev->customer.algo__part_to_part_range_offset_mm = 0;
 800246a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800246c:	2200      	movs	r2, #0
 800246e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	pdev->customer.mm_config__inner_offset_mm = 0;
 8002472:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002474:	2200      	movs	r2, #0
 8002476:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	pdev->customer.mm_config__outer_offset_mm = 0;
 800247a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800247c:	2200      	movs	r2, #0
 800247e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	memset(&pdev->per_vcsel_cal_data, 0, sizeof(pdev->per_vcsel_cal_data));
 8002482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002484:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002488:	220c      	movs	r2, #12
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f014 fbf9 	bl	8016c84 <memset>
	Repeat = BDTable[VL53LX_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT];
 8002492:	4b89      	ldr	r3, [pc, #548]	@ (80026b8 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	Max = BDTable[
 800249a:	4b87      	ldr	r3, [pc, #540]	@ (80026b8 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		VL53LX_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER];
	UnderMax = 1 + (Max / 2);
 80024a2:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80024a6:	0fda      	lsrs	r2, r3, #31
 80024a8:	4413      	add	r3, r2
 80024aa:	105b      	asrs	r3, r3, #1
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	OverMax = Max + (Max / 2);
 80024b8:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80024bc:	0fda      	lsrs	r2, r3, #31
 80024be:	4413      	add	r3, r2
 80024c0:	105b      	asrs	r3, r3, #1
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80024ca:	4413      	add	r3, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	sum_ranging = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	total_count = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80024de:	e087      	b.n	80025f0 <VL53LX_PerformOffsetSimpleCalibration+0x1bc>
		Status = VL53LX_StartMeasurement(Dev);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff f9f4 	bl	80018ce <VL53LX_StartMeasurement>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		if (Status == VL53LX_ERROR_NONE) {
 80024ec:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <VL53LX_PerformOffsetSimpleCalibration+0xd8>
			VL53LX_WaitMeasurementDataReady(Dev);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fa75 	bl	80019e4 <VL53LX_WaitMeasurementDataReady>
			VL53LX_GetMultiRangingData(Dev,
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fe4e 	bl	80021a2 <VL53LX_GetMultiRangingData>
				&RangingMeasurementData);
			VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fa43 	bl	8001992 <VL53LX_ClearInterruptAndStartMeasurement>
		}

		inloopcount = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		offset_meas = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8002518:	e040      	b.n	800259c <VL53LX_PerformOffsetSimpleCalibration+0x168>
				(offset_meas < OverMax)) {
			Status = VL53LX_WaitMeasurementDataReady(Dev);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fa62 	bl	80019e4 <VL53LX_WaitMeasurementDataReady>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (Status == VL53LX_ERROR_NONE)
 8002526:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <VL53LX_PerformOffsetSimpleCalibration+0x10c>
				Status = VL53LX_GetMultiRangingData(Dev,
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fe34 	bl	80021a2 <VL53LX_GetMultiRangingData>
 800253a:	4603      	mov	r3, r0
 800253c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						&RangingMeasurementData);
			pRange = &(RangingMeasurementData.RangeData[0]);
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	3308      	adds	r3, #8
 8002546:	673b      	str	r3, [r7, #112]	@ 0x70
			goodmeas = (pRange->RangeStatus ==
 8002548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800254a:	7c9b      	ldrb	r3, [r3, #18]
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				VL53LX_RANGESTATUS_RANGE_VALID);
			if ((Status == VL53LX_ERROR_NONE) && goodmeas) {
 800255a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800255e:	2b00      	cmp	r3, #0
 8002560:	d111      	bne.n	8002586 <VL53LX_PerformOffsetSimpleCalibration+0x152>
 8002562:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <VL53LX_PerformOffsetSimpleCalibration+0x152>
				sum_ranging += pRange->RangeMilliMeter;
 800256a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800256c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002570:	461a      	mov	r2, r3
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002576:	4413      	add	r3, r2
 8002578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				inloopcount++;
 800257c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002580:	3301      	adds	r3, #1
 8002582:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			}
			Status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fa03 	bl	8001992 <VL53LX_ClearInterruptAndStartMeasurement>
 800258c:	4603      	mov	r3, r0
 800258e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			offset_meas++;
 8002592:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002596:	3301      	adds	r3, #1
 8002598:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 800259c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <VL53LX_PerformOffsetSimpleCalibration+0x188>
 80025a4:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80025a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80025ac:	429a      	cmp	r2, r3
 80025ae:	da05      	bge.n	80025bc <VL53LX_PerformOffsetSimpleCalibration+0x188>
				(offset_meas < OverMax)) {
 80025b0:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80025b4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbae      	blt.n	800251a <VL53LX_PerformOffsetSimpleCalibration+0xe6>
		}
		total_count += inloopcount;
 80025bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80025c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c4:	4413      	add	r3, r2
 80025c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


		if (inloopcount < UnderMax)
 80025ca:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80025ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80025d2:	429a      	cmp	r2, r3
 80025d4:	da02      	bge.n	80025dc <VL53LX_PerformOffsetSimpleCalibration+0x1a8>
			Status = VL53LX_ERROR_OFFSET_CAL_NO_SAMPLE_FAIL;
 80025d6:	23e8      	movs	r3, #232	@ 0xe8
 80025d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		VL53LX_StopMeasurement(Dev);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff f9c4 	bl	800196a <VL53LX_StopMeasurement>

		Repeat--;
 80025e2:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80025f0:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	dd04      	ble.n	8002602 <VL53LX_PerformOffsetSimpleCalibration+0x1ce>
 80025f8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f43f af6f 	beq.w	80024e0 <VL53LX_PerformOffsetSimpleCalibration+0xac>

	}

	if ((SmudgeStatus == VL53LX_ERROR_NONE) && (smudge_corr_en == 1))
 8002602:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
 800260a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800260e:	2b01      	cmp	r3, #1
 8002610:	d105      	bne.n	800261e <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
		SmudgeStatus = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f003 fec8 	bl	80063a8 <VL53LX_dynamic_xtalk_correction_enable>
 8002618:	4603      	mov	r3, r0
 800261a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	if ((sum_ranging < 0) ||
 800261e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002622:	2b00      	cmp	r3, #0
 8002624:	db08      	blt.n	8002638 <VL53LX_PerformOffsetSimpleCalibration+0x204>
		(sum_ranging > ((int32_t) total_count * 0xffff)))
 8002626:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800262a:	4613      	mov	r3, r2
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	1a9b      	subs	r3, r3, r2
	if ((sum_ranging < 0) ||
 8002630:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002634:	429a      	cmp	r2, r3
 8002636:	dd02      	ble.n	800263e <VL53LX_PerformOffsetSimpleCalibration+0x20a>
		Status = VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH;
 8002638:	23e0      	movs	r3, #224	@ 0xe0
 800263a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	if ((Status == VL53LX_ERROR_NONE) && (total_count > 0)) {
 800263e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002642:	2b00      	cmp	r3, #0
 8002644:	d132      	bne.n	80026ac <VL53LX_PerformOffsetSimpleCalibration+0x278>
 8002646:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800264a:	2b00      	cmp	r3, #0
 800264c:	dd2e      	ble.n	80026ac <VL53LX_PerformOffsetSimpleCalibration+0x278>
		IncRounding = total_count / 2;
 800264e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002652:	0fda      	lsrs	r2, r3, #31
 8002654:	4413      	add	r3, r2
 8002656:	105b      	asrs	r3, r3, #1
 8002658:	66bb      	str	r3, [r7, #104]	@ 0x68
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 800265a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800265e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002660:	441a      	add	r2, r3
				/ total_count);
 8002662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002666:	fb92 f3f3 	sdiv	r3, r2, r3
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 800266a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		offset = (int16_t)CalDistanceMilliMeter - meanDistance_mm;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		pdev->customer.algo__part_to_part_range_offset_mm = 0;
 800267e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002680:	2200      	movs	r2, #0
 8002682:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		pdev->customer.mm_config__inner_offset_mm = offset;
 8002686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002688:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800268c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		pdev->customer.mm_config__outer_offset_mm = offset;
 8002690:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002692:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002696:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

		Status = VL53LX_set_customer_nvm_managed(Dev,
 800269a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800269c:	3348      	adds	r3, #72	@ 0x48
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f00c ffe8 	bl	800f676 <VL53LX_set_customer_nvm_managed>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				&(pdev->customer));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026ac:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3798      	adds	r7, #152	@ 0x98
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000000c 	.word	0x2000000c

080026bc <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b08c      	sub	sp, #48	@ 0x30
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3318      	adds	r3, #24
 80026ce:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80026d6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80026d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f005 feaa 	bl	800843a <VL53LX_enable_powerforce>
 80026e6:	4603      	mov	r3, r0
 80026e8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80026ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d117      	bne.n	8002722 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	7858      	ldrb	r0, [r3, #1]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	685c      	ldr	r4, [r3, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	891d      	ldrh	r5, [r3, #8]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	899b      	ldrh	r3, [r3, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	8952      	ldrh	r2, [r2, #10]
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 800270c:	9102      	str	r1, [sp, #8]
 800270e:	9201      	str	r2, [sp, #4]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	462b      	mov	r3, r5
 8002714:	4622      	mov	r2, r4
 8002716:	4601      	mov	r1, r0
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f007 fd7d 	bl	800a218 <VL53LX_set_ref_spad_char_config>
 800271e:	4603      	mov	r3, r0
 8002720:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f890 	bl	8002856 <VL53LX_run_device_test>
 8002736:	4603      	mov	r3, r0
 8002738:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 800273a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002742:	f107 020c 	add.w	r2, r7, #12
 8002746:	2302      	movs	r3, #2
 8002748:	21d9      	movs	r1, #217	@ 0xd9
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f00e fed6 	bl	80114fc <VL53LX_ReadMulti>
 8002750:	4603      	mov	r3, r0
 8002752:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002754:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 800275c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002764:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002768:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002770:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8002774:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	2302      	movs	r3, #2
 8002782:	2114      	movs	r1, #20
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f00e fe83 	bl	8011490 <VL53LX_WriteMulti>
 800278a:	4603      	mov	r3, r0
 800278c:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 800278e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002796:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800279e:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 80027a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 80027ae:	f107 020c 	add.w	r2, r7, #12
 80027b2:	2306      	movs	r3, #6
 80027b4:	21ac      	movs	r1, #172	@ 0xac
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f00e fea0 	bl	80114fc <VL53LX_ReadMulti>
 80027bc:	4603      	mov	r3, r0
 80027be:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 80027c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	2306      	movs	r3, #6
 80027ce:	210d      	movs	r1, #13
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f00e fe5d 	bl	8011490 <VL53LX_WriteMulti>
 80027d6:	4603      	mov	r3, r0
 80027d8:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 80027da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d117      	bne.n	8002812 <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 80027e2:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 80027ea:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 80027f2:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002802:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800280a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002812:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002820:	2b10      	cmp	r3, #16
 8002822:	d00c      	beq.n	800283e <VL53LX_run_ref_spad_char+0x182>
 8002824:	2b10      	cmp	r3, #16
 8002826:	dc0d      	bgt.n	8002844 <VL53LX_run_ref_spad_char+0x188>
 8002828:	2b0e      	cmp	r3, #14
 800282a:	d002      	beq.n	8002832 <VL53LX_run_ref_spad_char+0x176>
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d003      	beq.n	8002838 <VL53LX_run_ref_spad_char+0x17c>
 8002830:	e008      	b.n	8002844 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002832:	23e4      	movs	r3, #228	@ 0xe4
 8002834:	77fb      	strb	r3, [r7, #31]
			break;
 8002836:	e005      	b.n	8002844 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002838:	23e3      	movs	r3, #227	@ 0xe3
 800283a:	77fb      	strb	r3, [r7, #31]
			break;
 800283c:	e002      	b.n	8002844 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800283e:	23e2      	movs	r3, #226	@ 0xe2
 8002840:	77fb      	strb	r3, [r7, #31]
			break;
 8002842:	bf00      	nop
		}
	}



	*pcal_status = status;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	7ffa      	ldrb	r2, [r7, #31]
 8002848:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 800284a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bdb0      	pop	{r4, r5, r7, pc}

08002856 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3318      	adds	r3, #24
 800286a:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002878:	f107 030b 	add.w	r3, r7, #11
 800287c:	461a      	mov	r2, r3
 800287e:	2130      	movs	r1, #48	@ 0x30
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f00e fecd 	bl	8011620 <VL53LX_RdByte>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 800288a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002892:	7afa      	ldrb	r2, [r7, #11]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 800289a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 fd4b 	bl	8008342 <VL53LX_start_test>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 80028b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f00e f99b 	bl	8010bf4 <VL53LX_wait_for_test_completion>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80028c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 80028ca:	f107 020c 	add.w	r2, r7, #12
 80028ce:	2302      	movs	r3, #2
 80028d0:	2189      	movs	r1, #137	@ 0x89
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f00e fe12 	bl	80114fc <VL53LX_ReadMulti>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80028dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 80028e4:	7b3a      	ldrb	r2, [r7, #12]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 80028ec:	7b7a      	ldrb	r2, [r7, #13]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 800290e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fdb3 	bl	8008482 <VL53LX_clear_interrupt>
 800291c:	4603      	mov	r3, r0
 800291e:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002928:	2100      	movs	r1, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f005 fd09 	bl	8008342 <VL53LX_start_test>
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b21      	cmp	r3, #33	@ 0x21
 8002954:	d006      	beq.n	8002964 <select_offset_per_vcsel+0x24>
 8002956:	2b21      	cmp	r3, #33	@ 0x21
 8002958:	dc2b      	bgt.n	80029b2 <select_offset_per_vcsel+0x72>
 800295a:	2b1b      	cmp	r3, #27
 800295c:	d01c      	beq.n	8002998 <select_offset_per_vcsel+0x58>
 800295e:	2b1e      	cmp	r3, #30
 8002960:	d00d      	beq.n	800297e <select_offset_per_vcsel+0x3e>
 8002962:	e026      	b.n	80029b2 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 800296e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002976:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 800297a:	817b      	strh	r3, [r7, #10]
		break;
 800297c:	e02b      	b.n	80029d6 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002984:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8002988:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8002994:	817b      	strh	r3, [r7, #10]
		break;
 8002996:	e01e      	b.n	80029d6 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 80029a2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029aa:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 80029ae:	817b      	strh	r3, [r7, #10]
		break;
 80029b0:	e011      	b.n	80029d6 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b8:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 80029bc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c4:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 80029c8:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80029ca:	23fc      	movs	r3, #252	@ 0xfc
 80029cc:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]
		break;
 80029d4:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80029dc:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 80029e6:	7a7b      	ldrb	r3, [r7, #9]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <select_offset_per_vcsel+0xb6>
 80029f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029f4:	e001      	b.n	80029fa <select_offset_per_vcsel+0xba>
 80029f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	8013      	strh	r3, [r2, #0]

	return status;
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002a0e:	b490      	push	{r4, r7}
 8002a10:	b08a      	sub	sp, #40	@ 0x28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	71fb      	strb	r3, [r7, #7]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a40:	e021      	b.n	8002a86 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002a42:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	441a      	add	r2, r3
 8002a52:	00d3      	lsls	r3, r2, #3
 8002a54:	461a      	mov	r2, r3
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	4423      	add	r3, r4
 8002a62:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002a66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002a70:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3206      	adds	r2, #6
 8002a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a82:	3301      	adds	r3, #1
 8002a84:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a86:	79bb      	ldrb	r3, [r7, #6]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3d8      	bcc.n	8002a42 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d047      	beq.n	8002b26 <vl53lx_diff_histo_stddev+0x118>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d044      	beq.n	8002b26 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002aa4:	e03a      	b.n	8002b1c <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002aa6:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	0052      	lsls	r2, r2, #1
 8002ab4:	441a      	add	r2, r3
 8002ab6:	00d3      	lsls	r3, r2, #3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4423      	add	r3, r4
 8002ac6:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002aca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ad6:	fb03 f202 	mul.w	r2, r3, r2
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae0:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002ae2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3206      	adds	r2, #6
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002af0:	fb03 f202 	mul.w	r2, r3, r2
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002b06:	69b8      	ldr	r0, [r7, #24]
 8002b08:	6979      	ldr	r1, [r7, #20]
 8002b0a:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	441a      	add	r2, r3
 8002b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b14:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002b16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b18:	3301      	adds	r3, #1
 8002b1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3bf      	bcc.n	8002aa6 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	@ 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc90      	pop	{r4, r7}
 8002b2e:	4770      	bx	lr

08002b30 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b08c      	sub	sp, #48	@ 0x30
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002b60:	2318      	movs	r3, #24
 8002b62:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f248 018f 	movw	r1, #32911	@ 0x808f
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f002 fd26 	bl	80055c0 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f248 018e 	movw	r1, #32910	@ 0x808e
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f002 fd1e 	bl	80055c0 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8a:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 811a 	bne.w	8002dc8 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002bae:	7efb      	ldrb	r3, [r7, #27]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	7eba      	ldrb	r2, [r7, #26]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc0:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bce:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd8:	e004      	b.n	8002be4 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002be4:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002be8:	7efb      	ldrb	r3, [r7, #27]
 8002bea:	69f8      	ldr	r0, [r7, #28]
 8002bec:	461a      	mov	r2, r3
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	441a      	add	r2, r3
 8002bf2:	0153      	lsls	r3, r2, #5
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	440b      	add	r3, r1
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	4413      	add	r3, r2
 8002c00:	4403      	add	r3, r0
 8002c02:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	dd0c      	ble.n	8002c26 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002c0c:	7e79      	ldrb	r1, [r7, #25]
 8002c0e:	7efa      	ldrb	r2, [r7, #27]
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	69f8      	ldr	r0, [r7, #28]
 8002c22:	f7ff fef4 	bl	8002a0e <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	db23      	blt.n	8002c76 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002c34:	3310      	adds	r3, #16
 8002c36:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f014 f821 	bl	8016c84 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 8002c54:	7efb      	ldrb	r3, [r7, #27]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c60:	2206      	movs	r2, #6
 8002c62:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002c66:	e034      	b.n	8002cd2 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6e:	2207      	movs	r2, #7
 8002c70:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002c74:	e02d      	b.n	8002cd2 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7c:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002c80:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002c88:	e01e      	b.n	8002cc8 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002c8a:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002c8e:	7e39      	ldrb	r1, [r7, #24]
 8002c90:	7efb      	ldrb	r3, [r7, #27]
 8002c92:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	3006      	adds	r0, #6
 8002c9a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002c9e:	69f8      	ldr	r0, [r7, #28]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	0052      	lsls	r2, r2, #1
 8002ca4:	441a      	add	r2, r3
 8002ca6:	00d3      	lsls	r3, r2, #3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	460b      	mov	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	442b      	add	r3, r5
 8002cb6:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002cba:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8002cbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002cc8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002ccc:	7ebb      	ldrb	r3, [r7, #26]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3db      	bcc.n	8002c8a <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd8:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002cdc:	461a      	mov	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d109      	bne.n	8002cfa <vl53lx_histo_merge+0x1ca>
 8002ce6:	7efb      	ldrb	r3, [r7, #27]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d106      	bne.n	8002cfa <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8002cf8:	e00e      	b.n	8002d18 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8002cfa:	7efb      	ldrb	r3, [r7, #27]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10b      	bne.n	8002d18 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d06:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d14:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d102      	bne.n	8002d26 <vl53lx_histo_merge+0x1f6>
 8002d20:	7efb      	ldrb	r3, [r7, #27]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d069      	beq.n	8002dfa <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2c:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d162      	bne.n	8002dfa <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d38:	e008      	b.n	8002d4c <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002d3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3206      	adds	r2, #6
 8002d40:	2100      	movs	r1, #0
 8002d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002d46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d48:	3301      	adds	r3, #1
 8002d4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d4c:	7ebb      	ldrb	r3, [r7, #26]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3f1      	bcc.n	8002d3a <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d5a:	e02f      	b.n	8002dbc <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002d62:	e023      	b.n	8002dac <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002d64:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	3206      	adds	r2, #6
 8002d6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8002d6e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002d72:	7efb      	ldrb	r3, [r7, #27]
 8002d74:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 8002d76:	69fc      	ldr	r4, [r7, #28]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	0052      	lsls	r2, r2, #1
 8002d7c:	441a      	add	r2, r3
 8002d7e:	00d3      	lsls	r3, r2, #3
 8002d80:	461a      	mov	r2, r3
 8002d82:	460b      	mov	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	440b      	add	r3, r1
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	442b      	add	r3, r5
 8002d8e:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002d92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002d96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d98:	18c1      	adds	r1, r0, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3206      	adds	r2, #6
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8002da2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002da6:	3301      	adds	r3, #1
 8002da8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002dac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	dbd6      	blt.n	8002d64 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8002db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002db8:	3301      	adds	r3, #1
 8002dba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002dbc:	7ebb      	ldrb	r3, [r7, #26]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3ca      	bcc.n	8002d5c <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8002dc6:	e018      	b.n	8002dfa <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dce:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ddc:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de6:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002dea:	2bff      	cmp	r3, #255	@ 0xff
 8002dec:	d105      	bne.n	8002dfa <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e04 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b0c6      	sub	sp, #280	@ 0x118
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e12:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8002e20:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8002e28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e30:	2200      	movs	r2, #0
 8002e32:	2185      	movs	r1, #133	@ 0x85
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f00e fb97 	bl	8011568 <VL53LX_WrByte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8002e40:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8002e48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f005 faf2 	bl	800843a <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8002e56:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002e5a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e62:	f248 018c 	movw	r1, #32908	@ 0x808c
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	f002 fbaa 	bl	80055c0 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8002e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d81b      	bhi.n	8002eac <VL53LX_load_patch+0xa8>
 8002e74:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <VL53LX_load_patch+0x78>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e95 	.word	0x08002e95
 8002e84:	08002e9d 	.word	0x08002e9d
 8002e88:	08002ea5 	.word	0x08002ea5
	case 0:
		patch_power = 0x00;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002e92:	e00e      	b.n	8002eb2 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8002e94:	2310      	movs	r3, #16
 8002e96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002e9a:	e00a      	b.n	8002eb2 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002ea2:	e006      	b.n	8002eb2 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8002ea4:	2340      	movs	r3, #64	@ 0x40
 8002ea6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002eaa:	e002      	b.n	8002eb2 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8002eb2:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d134      	bne.n	8002f24 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8002eba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ec2:	2229      	movs	r2, #41	@ 0x29
 8002ec4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8002ec6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002eca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ece:	22c9      	movs	r2, #201	@ 0xc9
 8002ed0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8002ed2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ed6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002eda:	220e      	movs	r2, #14
 8002edc:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8002ede:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ee2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ee6:	2240      	movs	r2, #64	@ 0x40
 8002ee8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8002eea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ef2:	2228      	movs	r2, #40	@ 0x28
 8002ef4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8002ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f04:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8002f06:	f107 020c 	add.w	r2, r7, #12
 8002f0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f0e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002f12:	2306      	movs	r3, #6
 8002f14:	f240 4176 	movw	r1, #1142	@ 0x476
 8002f18:	6800      	ldr	r0, [r0, #0]
 8002f1a:	f00e fab9 	bl	8011490 <VL53LX_WriteMulti>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002f24:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d132      	bne.n	8002f92 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8002f2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f34:	2203      	movs	r2, #3
 8002f36:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8002f38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f40:	226d      	movs	r2, #109	@ 0x6d
 8002f42:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8002f44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8002f50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f58:	226f      	movs	r2, #111	@ 0x6f
 8002f5a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8002f5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f64:	2207      	movs	r2, #7
 8002f66:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8002f68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f70:	2229      	movs	r2, #41	@ 0x29
 8002f72:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f7c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002f80:	2306      	movs	r3, #6
 8002f82:	f240 4196 	movw	r1, #1174	@ 0x496
 8002f86:	6800      	ldr	r0, [r0, #0]
 8002f88:	f00e fa82 	bl	8011490 <VL53LX_WriteMulti>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002f92:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11a      	bne.n	8002fd0 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8002f9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002fa6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002faa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fae:	2207      	movs	r2, #7
 8002fb0:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002fb2:	f107 020c 	add.w	r2, r7, #12
 8002fb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fba:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f240 4172 	movw	r1, #1138	@ 0x472
 8002fc4:	6800      	ldr	r0, [r0, #0]
 8002fc6:	f00e fa63 	bl	8011490 <VL53LX_WriteMulti>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002fd0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11a      	bne.n	800300e <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8002fd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002fe4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fe8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fec:	2207      	movs	r2, #7
 8002fee:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ff8:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f240 4174 	movw	r1, #1140	@ 0x474
 8003002:	6800      	ldr	r0, [r0, #0]
 8003004:	f00e fa44 	bl	8011490 <VL53LX_WriteMulti>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800300e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8003016:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800301a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800301e:	2201      	movs	r2, #1
 8003020:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f00e fa9f 	bl	8011568 <VL53LX_WrByte>
 800302a:	4603      	mov	r3, r0
 800302c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003030:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8003038:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800303c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003040:	2201      	movs	r2, #1
 8003042:	2185      	movs	r1, #133	@ 0x85
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f00e fa8f 	bl	8011568 <VL53LX_WrByte>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003050:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8003054:	4618      	mov	r0, r3
 8003056:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop

08003060 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 800306c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003074:	2200      	movs	r2, #0
 8003076:	2185      	movs	r1, #133	@ 0x85
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f00e fa75 	bl	8011568 <VL53LX_WrByte>
 800307e:	4603      	mov	r3, r0
 8003080:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f005 f9e7 	bl	800845e <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f00e fa62 	bl	8011568 <VL53LX_WrByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 80030b0:	2201      	movs	r2, #1
 80030b2:	2185      	movs	r1, #133	@ 0x85
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f00e fa57 	bl	8011568 <VL53LX_WrByte>
 80030ba:	4603      	mov	r3, r0
 80030bc:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80030ca:	b5b0      	push	{r4, r5, r7, lr}
 80030cc:	b08a      	sub	sp, #40	@ 0x28
 80030ce:	af04      	add	r7, sp, #16
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3318      	adds	r3, #24
 80030de:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80030e6:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80030ec:	2162      	movs	r1, #98	@ 0x62
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f004 fa28 	bl	8007544 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2204      	movs	r2, #4
 80030f8:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2205      	movs	r2, #5
 8003104:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003110:	2300      	movs	r3, #0
 8003112:	75bb      	strb	r3, [r7, #22]
 8003114:	e01b      	b.n	800314e <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003116:	7dba      	ldrb	r2, [r7, #22]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	3308      	adds	r3, #8
 800312a:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003148:	7dbb      	ldrb	r3, [r7, #22]
 800314a:	3301      	adds	r3, #1
 800314c:	75bb      	strb	r3, [r7, #22]
 800314e:	7dbb      	ldrb	r3, [r7, #22]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d9e0      	bls.n	8003116 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2205      	movs	r2, #5
 8003158:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2205      	movs	r2, #5
 8003168:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003174:	2300      	movs	r3, #0
 8003176:	75bb      	strb	r3, [r7, #22]
 8003178:	e039      	b.n	80031ee <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 800317a:	7dba      	ldrb	r2, [r7, #22]
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003190:	7dba      	ldrb	r2, [r7, #22]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 80031a6:	7dba      	ldrb	r2, [r7, #22]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 80031bc:	7dba      	ldrb	r2, [r7, #22]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80031d2:	7dba      	ldrb	r2, [r7, #22]
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80031e8:	7dbb      	ldrb	r3, [r7, #22]
 80031ea:	3301      	adds	r3, #1
 80031ec:	75bb      	strb	r3, [r7, #22]
 80031ee:	7dbb      	ldrb	r3, [r7, #22]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d9c2      	bls.n	800317a <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	221e      	movs	r2, #30
 80031fe:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2200      	movs	r2, #0
 8003204:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2200      	movs	r2, #0
 800320a:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2201      	movs	r2, #1
 8003210:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2201      	movs	r2, #1
 8003216:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2201      	movs	r2, #1
 800321c:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003224:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800322c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8003234:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2264      	movs	r2, #100	@ 0x64
 800323a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003242:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003252:	2203      	movs	r2, #3
 8003254:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325e:	2200      	movs	r2, #0
 8003260:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f240 72db 	movw	r2, #2011	@ 0x7db
 800326a:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8003274:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f004 f947 	bl	800750c <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8003284:	3310      	adds	r3, #16
 8003286:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f013 fcf9 	bl	8016c84 <memset>
	pdev->bin_rec_pos = 0;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <VL53LX_data_init+0x1f8>
 80032b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8b7 	bl	800342c <VL53LX_read_p2p_data>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80032c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 f8f3 	bl	80064bc <VL53LX_init_refspadchar_config_struct>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80032da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 f90b 	bl	8006504 <VL53LX_init_ssc_config_struct>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80032f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f003 f91c 	bl	8006546 <VL53LX_init_xtalk_config_struct>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8003320:	4618      	mov	r0, r3
 8003322:	f003 f983 	bl	800662c <VL53LX_init_xtalk_extract_config_struct>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 800332a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003338:	4618      	mov	r0, r3
 800333a:	f003 f9a6 	bl	800668a <VL53LX_init_offset_cal_config_struct>
 800333e:	4603      	mov	r3, r0
 8003340:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003350:	4618      	mov	r0, r3
 8003352:	f003 f9c1 	bl	80066d8 <VL53LX_init_zone_cal_config_struct>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800335a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f003 f9d5 	bl	8006720 <VL53LX_init_hist_post_process_config_struct>
 8003376:	4603      	mov	r3, r0
 8003378:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 800337a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fbd4 	bl	8006b36 <VL53LX_init_hist_gen3_dmax_config_struct>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	33f8      	adds	r3, #248	@ 0xf8
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fa2d 	bl	80067fe <VL53LX_init_tuning_parm_storage_struct>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 80033a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	7858      	ldrb	r0, [r3, #1]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	8b1c      	ldrh	r4, [r3, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	689d      	ldr	r5, [r3, #8]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	6912      	ldr	r2, [r2, #16]
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	6949      	ldr	r1, [r1, #20]
 80033c8:	9102      	str	r1, [sp, #8]
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	462b      	mov	r3, r5
 80033d0:	4622      	mov	r2, r4
 80033d2:	4601      	mov	r1, r0
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb3c 	bl	8003a52 <VL53LX_set_preset_mode>
 80033da:	4603      	mov	r3, r0
 80033dc:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80033e4:	461a      	mov	r2, r3
 80033e6:	2118      	movs	r1, #24
 80033e8:	2000      	movs	r0, #0
 80033ea:	f008 fc8a 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80033f4:	461a      	mov	r2, r3
 80033f6:	2118      	movs	r1, #24
 80033f8:	2000      	movs	r0, #0
 80033fa:	f008 fc82 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 8003404:	461a      	mov	r2, r3
 8003406:	210c      	movs	r1, #12
 8003408:	2000      	movs	r0, #0
 800340a:	f004 fe3b 	bl	8008084 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f007 fe5b 	bl	800b0ca <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f007 fd61 	bl	800aedc <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f007 fe80 	bl	800b120 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8003420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}

0800342c <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b091      	sub	sp, #68	@ 0x44
 8003430:	af04      	add	r7, sp, #16
 8003432:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3318      	adds	r3, #24
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	3348      	adds	r3, #72	@ 0x48
 800344c:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	339c      	adds	r3, #156	@ 0x9c
 8003452:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003454:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f00b ffc8 	bl	800f3fa <VL53LX_get_static_nvm_managed>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003470:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	3348      	adds	r3, #72	@ 0x48
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f00c f920 	bl	800f6c4 <VL53LX_get_customer_nvm_managed>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 800348a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800348e:	2b00      	cmp	r3, #0
 8003490:	d117      	bne.n	80034c2 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	f203 3392 	addw	r3, r3, #914	@ 0x392
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f00d f81c 	bl	80104d8 <VL53LX_get_nvm_copy_data>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 80034a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	f203 3292 	addw	r2, r3, #914	@ 0x392
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f004 fb37 	bl	8007b30 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 80034c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	895b      	ldrh	r3, [r3, #10]
 80034ce:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80034e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80034f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f2:	33c0      	adds	r3, #192	@ 0xc0
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f00b fe33 	bl	800f162 <VL53LX_read_nvm_optical_centre>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003502:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	3360      	adds	r3, #96	@ 0x60
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f00b fe49 	bl	800f1a8 <VL53LX_read_nvm_cal_peak_rate_map>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 800351c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003520:	2b00      	cmp	r3, #0
 8003522:	d12d      	bne.n	8003580 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	339c      	adds	r3, #156	@ 0x9c
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f00b fe62 	bl	800f1f4 <VL53LX_read_nvm_additional_offset_cal_data>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d120      	bne.n	8003580 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11c      	bne.n	8003580 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2280      	movs	r2, #128	@ 0x80
 800354a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003552:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003556:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	69f9      	ldr	r1, [r7, #28]
 800356a:	3102      	adds	r1, #2
 800356c:	9103      	str	r1, [sp, #12]
 800356e:	9202      	str	r2, [sp, #8]
 8003570:	2238      	movs	r2, #56	@ 0x38
 8003572:	9201      	str	r2, [sp, #4]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	23ff      	movs	r3, #255	@ 0xff
 8003578:	22c7      	movs	r2, #199	@ 0xc7
 800357a:	4621      	mov	r1, r4
 800357c:	f006 fb46 	bl	8009c0c <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003580:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12f      	bne.n	80035e8 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	461a      	mov	r2, r3
 800358e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f00b fe51 	bl	800f23a <VL53LX_read_nvm_fmt_range_results_data>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800359e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d120      	bne.n	80035e8 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80035a6:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80035ae:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80035b6:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d006      	beq.n	80035d6 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 80035d4:	e003      	b.n	80035de <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	2214      	movs	r2, #20
 80035da:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035e4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80035e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 80035f6:	3304      	adds	r3, #4
 80035f8:	461a      	mov	r2, r3
 80035fa:	21de      	movs	r1, #222	@ 0xde
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f00e f843 	bl	8011688 <VL53LX_RdWord>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003612:	d204      	bcs.n	800361e <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800361a:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 800361e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003622:	2b00      	cmp	r3, #0
 8003624:	d108      	bne.n	8003638 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	33bc      	adds	r3, #188	@ 0xbc
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f918 	bl	8003862 <VL53LX_get_mode_mitigation_roi>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d114      	bne.n	800366c <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003658:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003668:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 800366c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003670:	4618      	mov	r0, r3
 8003672:	3734      	adds	r7, #52	@ 0x34
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3318      	adds	r3, #24
 800368a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003692:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800369a:	23f1      	movs	r3, #241	@ 0xf1
 800369c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10e      	bne.n	80036c4 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b2:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 80036b6:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80036c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3318      	adds	r3, #24
 80036ea:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80036f6:	23f1      	movs	r3, #241	@ 0xf1
 80036f8:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80036fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11b      	bne.n	800373a <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8003726:	9201      	str	r2, [sp, #4]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	460b      	mov	r3, r1
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68b8      	ldr	r0, [r7, #8]
 8003732:	f005 f84a 	bl	80087ca <VL53LX_calc_timeout_register_values>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800373a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b088      	sub	sp, #32
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3318      	adds	r3, #24
 800375c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003770:	23f1      	movs	r3, #241	@ 0xf1
 8003772:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003774:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d148      	bne.n	800380e <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f004 fe96 	bl	80084bc <VL53LX_calc_macro_period_us>
 8003790:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8003798:	6979      	ldr	r1, [r7, #20]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 ff55 	bl	800864a <VL53LX_calc_timeout_us>
 80037a0:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 80037ac:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80037ae:	8a7b      	ldrh	r3, [r7, #18]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 80037ba:	4413      	add	r3, r2
 80037bc:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80037be:	8a7b      	ldrh	r3, [r7, #18]
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 ffa8 	bl	8008718 <VL53LX_calc_decoded_timeout_us>
 80037c8:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 80037d4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80037d6:	8a7b      	ldrh	r3, [r7, #18]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 80037e2:	4413      	add	r3, r2
 80037e4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80037e6:	8a7b      	ldrh	r3, [r7, #18]
 80037e8:	6979      	ldr	r1, [r7, #20]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 ff94 	bl	8008718 <VL53LX_calc_decoded_timeout_us>
 80037f0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800380e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3318      	adds	r3, #24
 800382c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	7858      	ldrb	r0, [r3, #1]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	7819      	ldrb	r1, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 800383c:	461a      	mov	r2, r3
 800383e:	f006 f864 	bl	800990a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	7898      	ldrb	r0, [r3, #2]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	78d9      	ldrb	r1, [r3, #3]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003850:	461a      	mov	r2, r3
 8003852:	f006 f899 	bl	8009988 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3318      	adds	r3, #24
 8003874:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8003888:	f107 020e 	add.w	r2, r7, #14
 800388c:	f107 010d 	add.w	r1, r7, #13
 8003890:	4618      	mov	r0, r3
 8003892:	f008 fadf 	bl	800be54 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003896:	7bba      	ldrb	r2, [r7, #14]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800389c:	7b7a      	ldrb	r2, [r7, #13]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 80038a8:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80038c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e008      	b.n	80038f0 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	3301      	adds	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3f1      	bcc.n	80038de <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80038fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3318      	adds	r3, #24
 800391c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	331c      	adds	r3, #28
 8003928:	2214      	movs	r2, #20
 800392a:	4619      	mov	r1, r3
 800392c:	f013 fa39 	bl	8016da2 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	785a      	ldrb	r2, [r3, #1]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	33c2      	adds	r3, #194	@ 0xc2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ffbf 	bl	80038cc <VL53LX_init_zone_config_histogram_bins>
 800394e:	4603      	mov	r3, r0
 8003950:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003962:	e00f      	b.n	8003984 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d807      	bhi.n	800397c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	3301      	adds	r3, #1
 8003972:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 800397a:	e003      	b.n	8003984 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2206      	movs	r2, #6
 8003980:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003984:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	460b      	mov	r3, r1
 800399e:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3318      	adds	r3, #24
 80039a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	2b21      	cmp	r3, #33	@ 0x21
 80039ae:	d030      	beq.n	8003a12 <VL53LX_get_preset_mode_timing_cfg+0x82>
 80039b0:	2b21      	cmp	r3, #33	@ 0x21
 80039b2:	dc43      	bgt.n	8003a3c <VL53LX_get_preset_mode_timing_cfg+0xac>
 80039b4:	2b1b      	cmp	r3, #27
 80039b6:	d002      	beq.n	80039be <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80039b8:	2b1e      	cmp	r3, #30
 80039ba:	d015      	beq.n	80039e8 <VL53LX_get_preset_mode_timing_cfg+0x58>
 80039bc:	e03e      	b.n	8003a3c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	601a      	str	r2, [r3, #0]

	break;
 80039e6:	e02c      	b.n	8003a42 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	601a      	str	r2, [r3, #0]
	break;
 8003a10:	e017      	b.n	8003a42 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	601a      	str	r2, [r3, #0]
	break;
 8003a3a:	e002      	b.n	8003a42 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003a3c:	23fc      	movs	r3, #252	@ 0xfc
 8003a3e:	75fb      	strb	r3, [r7, #23]
		break;
 8003a40:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b096      	sub	sp, #88	@ 0x58
 8003a56:	af06      	add	r7, sp, #24
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	72fb      	strb	r3, [r7, #11]
 8003a60:	4613      	mov	r3, r2
 8003a62:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003a76:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003a9e:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa2:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003aa6:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003aae:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	33c2      	adds	r3, #194	@ 0xc2
 8003ab4:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	33f8      	adds	r3, #248	@ 0xf8
 8003aba:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abe:	7afa      	ldrb	r2, [r7, #11]
 8003ac0:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ac6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003acc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ad2:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f003 fd34 	bl	8007544 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	2b21      	cmp	r3, #33	@ 0x21
 8003ae0:	d02e      	beq.n	8003b40 <VL53LX_set_preset_mode+0xee>
 8003ae2:	2b21      	cmp	r3, #33	@ 0x21
 8003ae4:	dc40      	bgt.n	8003b68 <VL53LX_set_preset_mode+0x116>
 8003ae6:	2b1b      	cmp	r3, #27
 8003ae8:	d002      	beq.n	8003af0 <VL53LX_set_preset_mode+0x9e>
 8003aea:	2b1e      	cmp	r3, #30
 8003aec:	d014      	beq.n	8003b18 <VL53LX_set_preset_mode+0xc6>
 8003aee:	e03b      	b.n	8003b68 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	9302      	str	r3, [sp, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b0c:	f003 fa57 	bl	8006fbe <VL53LX_preset_mode_histogram_long_range>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b16:	e02b      	b.n	8003b70 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b34:	f003 fae1 	bl	80070fa <VL53LX_preset_mode_histogram_medium_range>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b3e:	e017      	b.n	8003b70 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	9302      	str	r3, [sp, #8]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b5c:	f003 fb6b 	bl	8007236 <VL53LX_preset_mode_histogram_short_range>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003b66:	e003      	b.n	8003b70 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003b68:	23fc      	movs	r3, #252	@ 0xfc
 8003b6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8003b6e:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003b70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	893a      	ldrh	r2, [r7, #8]
 8003b7c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003b84:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fd9e 	bl	80036d4 <VL53LX_set_timeouts_us>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003b9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003ba6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fd65 	bl	8003678 <VL53LX_set_inter_measurement_period_ms>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc0:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f004 f8d2 	bl	8007d70 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003bcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3740      	adds	r7, #64	@ 0x40
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0d2      	sub	sp, #328	@ 0x148
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003be2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003be6:	6018      	str	r0, [r3, #0]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bf0:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bfc:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003c00:	460a      	mov	r2, r1
 8003c02:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3318      	adds	r3, #24
 8003c16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003c1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003c28:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003c2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c30:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8003c34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c3c:	3348      	adds	r3, #72	@ 0x48
 8003c3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003c42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c46:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003c4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003c4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c52:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003c56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003c5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c5e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003c62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003c66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c6a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003c6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003c72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c76:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003c7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c82:	332c      	adds	r3, #44	@ 0x2c
 8003c84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003c88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c8c:	3348      	adds	r3, #72	@ 0x48
 8003c8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003c92:	f107 030c 	add.w	r3, r7, #12
 8003c96:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cb6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003cba:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003cd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003cd4:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003ce6:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003ce8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8003cf0:	3336      	adds	r3, #54	@ 0x36
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003cf8:	4413      	add	r3, r2
 8003cfa:	1d9a      	adds	r2, r3, #6
 8003cfc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d00:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d04:	4611      	mov	r1, r2
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	f7ff fd87 	bl	800381a <VL53LX_set_user_zone>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d16:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d019      	beq.n	8003d52 <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003d1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d26:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003d34:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003d38:	4413      	add	r3, r2
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d40:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d44:	4611      	mov	r1, r2
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f001 fbbc 	bl	80054c4 <VL53LX_set_zone_dss_config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003d52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d56:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003d62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003d6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d72:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003d76:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d7a:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d86:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8003d8a:	2bff      	cmp	r3, #255	@ 0xff
 8003d8c:	d106      	bne.n	8003d9c <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003d8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003d9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da4:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d139      	bne.n	8003e20 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003dac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db4:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d131      	bne.n	8003e20 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003dbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dc0:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8003dc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dcc:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003dd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8003dda:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dde:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 8003de2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8003dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003df2:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dfa:	825a      	strh	r2, [r3, #18]
 8003dfc:	e003      	b.n	8003e06 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e02:	2200      	movs	r2, #0
 8003e04:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8003e06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e0a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d805      	bhi.n	8003e20 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003e14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e18:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e28:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d117      	bne.n	8003e60 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003e30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e38:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10f      	bne.n	8003e60 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003e40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e48:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003e4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e50:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8003e54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e58:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e5c:	2206      	movs	r2, #6
 8003e5e:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003e60:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8003e68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e6c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	f006 f835 	bl	8009ee0 <VL53LX_save_cfg_data>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 8003e7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e80:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d827      	bhi.n	8003edc <VL53LX_init_and_start_range+0x304>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <VL53LX_init_and_start_range+0x2bc>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ebd 	.word	0x08003ebd
 8003ea4:	08003eb5 	.word	0x08003eb5
 8003ea8:	08003ead 	.word	0x08003ead
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eb2:	e017      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003eb4:	230d      	movs	r3, #13
 8003eb6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eba:	e013      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8003ebc:	2324      	movs	r3, #36	@ 0x24
 8003ebe:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ec2:	e00f      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8003ec4:	2344      	movs	r3, #68	@ 0x44
 8003ec6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eca:	e00b      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8003ecc:	235a      	movs	r3, #90	@ 0x5a
 8003ece:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ed2:	e007      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8003ed4:	2371      	movs	r3, #113	@ 0x71
 8003ed6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003eda:	e003      	b.n	8003ee4 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8003edc:	2383      	movs	r3, #131	@ 0x83
 8003ede:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003ee2:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8003ee4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003ee8:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8003eec:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8003efe:	e00b      	b.n	8003f18 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8003f00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003f0e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8003f12:	3301      	adds	r3, #1
 8003f14:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8003f18:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8003f1c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3ed      	bcc.n	8003f00 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8003f24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f28:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d917      	bls.n	8003f62 <VL53LX_init_and_start_range+0x38a>
 8003f32:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d113      	bne.n	8003f62 <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f3a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003f3e:	f1c3 0301 	rsb	r3, r3, #1
 8003f42:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003f46:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8003f4a:	f107 020c 	add.w	r2, r7, #12
 8003f4e:	4413      	add	r3, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	210b      	movs	r1, #11
 8003f54:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8003f58:	f00b f99a 	bl	800f290 <VL53LX_i2c_encode_static_nvm_managed>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003f62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f66:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d917      	bls.n	8003fa0 <VL53LX_init_and_start_range+0x3c8>
 8003f70:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d113      	bne.n	8003fa0 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f78:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003f7c:	f1c3 030d 	rsb	r3, r3, #13
 8003f80:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003f84:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8003f88:	f107 020c 	add.w	r2, r7, #12
 8003f8c:	4413      	add	r3, r2
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2117      	movs	r1, #23
 8003f92:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8003f96:	f00b fa57 	bl	800f448 <VL53LX_i2c_encode_customer_nvm_managed>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003fa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fa4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d917      	bls.n	8003fde <VL53LX_init_and_start_range+0x406>
 8003fae:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003fb6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003fba:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003fbe:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003fc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 8003fc6:	f107 020c 	add.w	r2, r7, #12
 8003fca:	4413      	add	r3, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2120      	movs	r1, #32
 8003fd0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8003fd4:	f00b fbc1 	bl	800f75a <VL53LX_i2c_encode_static_config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8003fde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fe2:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d917      	bls.n	800401c <VL53LX_init_and_start_range+0x444>
 8003fec:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d113      	bne.n	800401c <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003ff4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003ff8:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8003ffc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004000:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 8004004:	f107 020c 	add.w	r2, r7, #12
 8004008:	4413      	add	r3, r2
 800400a:	461a      	mov	r2, r3
 800400c:	2116      	movs	r1, #22
 800400e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004012:	f00b fc85 	bl	800f920 <VL53LX_i2c_encode_general_config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800401c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004020:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d917      	bls.n	800405a <VL53LX_init_and_start_range+0x482>
 800402a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004032:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004036:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800403a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800403e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 8004042:	f107 020c 	add.w	r2, r7, #12
 8004046:	4413      	add	r3, r2
 8004048:	461a      	mov	r2, r3
 800404a:	2117      	movs	r1, #23
 800404c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8004050:	f00b fcea 	bl	800fa28 <VL53LX_i2c_encode_timing_config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800405a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800405e:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d036      	beq.n	80040d6 <VL53LX_init_and_start_range+0x4fe>
 8004068:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800406c:	2b00      	cmp	r3, #0
 800406e:	d132      	bne.n	80040d6 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004070:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004074:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8004078:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800407c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004080:	791b      	ldrb	r3, [r3, #4]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800409a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ac:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80040b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80040be:	f107 020c 	add.w	r2, r7, #12
 80040c2:	4413      	add	r3, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	2112      	movs	r1, #18
 80040c8:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80040cc:	f00b fd2e 	bl	800fb2c <VL53LX_i2c_encode_dynamic_config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80040d6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80040de:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80040e2:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80040e6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 80040ee:	f107 020c 	add.w	r2, r7, #12
 80040f2:	4413      	add	r3, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	2105      	movs	r1, #5
 80040f8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80040fc:	f00b fd9b 	bl	800fc36 <VL53LX_i2c_encode_system_control>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004106:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 800410e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8004112:	f107 020c 	add.w	r2, r7, #12
 8004116:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800411a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800411e:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 8004122:	6800      	ldr	r0, [r0, #0]
 8004124:	f00d f9b4 	bl	8011490 <VL53LX_WriteMulti>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 800412e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004136:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800413a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	f003 fa30 	bl	80075a4 <VL53LX_update_ll_driver_rd_state>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 800414a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8004152:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004156:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	f003 fbc2 	bl	80078e4 <VL53LX_update_ll_driver_cfg_state>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004166:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800416a:	4618      	mov	r0, r3
 800416c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3318      	adds	r3, #24
 8004184:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800418c:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004194:	b25b      	sxtb	r3, r3
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800419c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f00b fd7a 	bl	800fcac <VL53LX_set_system_control>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80041ce:	2103      	movs	r1, #3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f003 f9b7 	bl	8007544 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 80041dc:	3301      	adds	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f003 fdc1 	bl	8007d70 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f003 fdf3 	bl	8007dda <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fa:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f006 ffd4 	bl	800b1b0 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004208:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b0c8      	sub	sp, #288	@ 0x120
 8004218:	af00      	add	r7, sp, #0
 800421a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800421e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004222:	6018      	str	r0, [r3, #0]
 8004224:	460a      	mov	r2, r1
 8004226:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800422a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800422e:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004236:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800423a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3318      	adds	r3, #24
 8004242:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004246:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800424a:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800424e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004252:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004256:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 800425a:	3318      	adds	r3, #24
 800425c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004260:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004264:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004268:	331c      	adds	r3, #28
 800426a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 800426e:	2388      	movs	r3, #136	@ 0x88
 8004270:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004280:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004284:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d008      	beq.n	80042a0 <VL53LX_get_measurement_results+0x8c>
 800428e:	2b02      	cmp	r3, #2
 8004290:	d10d      	bne.n	80042ae <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004292:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004296:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 800429a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800429e:	e00a      	b.n	80042b6 <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80042a0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80042a4:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80042a8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80042ac:	e003      	b.n	80042b6 <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 80042ae:	232c      	movs	r3, #44	@ 0x2c
 80042b0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80042b4:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80042b6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 80042be:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80042c2:	f107 0208 	add.w	r2, r7, #8
 80042c6:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80042ca:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80042ce:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	f00d f912 	bl	80114fc <VL53LX_ReadMulti>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80042de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80042e2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d917      	bls.n	800431c <VL53LX_get_measurement_results+0x108>
 80042ec:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80042f8:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 80042fc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004300:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 8004304:	f107 0208 	add.w	r2, r7, #8
 8004308:	4413      	add	r3, r2
 800430a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800430e:	4619      	mov	r1, r3
 8004310:	2038      	movs	r0, #56	@ 0x38
 8004312:	f00b fe49 	bl	800ffa8 <VL53LX_i2c_decode_debug_results>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 800431c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004320:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d017      	beq.n	800435a <VL53LX_get_measurement_results+0x146>
 800432a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004332:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004336:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800433a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800433e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 8004342:	f107 0208 	add.w	r2, r7, #8
 8004346:	4413      	add	r3, r2
 8004348:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800434c:	4619      	mov	r1, r3
 800434e:	2021      	movs	r0, #33	@ 0x21
 8004350:	f00b fdc9 	bl	800fee6 <VL53LX_i2c_decode_core_results>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 800435a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004368:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 800436c:	f107 0208 	add.w	r2, r7, #8
 8004370:	4413      	add	r3, r2
 8004372:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004376:	4619      	mov	r1, r3
 8004378:	202c      	movs	r0, #44	@ 0x2c
 800437a:	f00b fcbe 	bl	800fcfa <VL53LX_i2c_decode_system_results>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004384:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8004388:	4618      	mov	r0, r3
 800438a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	b0a0      	sub	sp, #128	@ 0x80
 8004398:	af06      	add	r7, sp, #24
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	460b      	mov	r3, r1
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3318      	adds	r3, #24
 80043ac:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80043b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80043b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b8:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80043ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043bc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80043c0:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80043c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c4:	332c      	adds	r3, #44	@ 0x2c
 80043c6:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80043c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ca:	33c2      	adds	r3, #194	@ 0xc2
 80043cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80043ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d0:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80043dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043de:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80043e2:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80043e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e6:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80043ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ee:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 80043f2:	3310      	adds	r3, #16
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80043f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80043fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004400:	3348      	adds	r3, #72	@ 0x48
 8004402:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004406:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800440c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800440e:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004412:	331c      	adds	r3, #28
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004418:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8296 	beq.w	8004952 <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004428:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800442c:	4619      	mov	r1, r3
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fbd2 	bl	8004bd8 <VL53LX_get_histogram_bin_data>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 800443a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004446:	2b00      	cmp	r3, #0
 8004448:	d114      	bne.n	8004474 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 800444a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800444c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445c:	4413      	add	r3, r2
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004462:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f004 fa27 	bl	80088bc <VL53LX_hist_copy_and_scale_ambient_info>
 800446e:	4603      	mov	r3, r0
 8004470:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004474:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8206 	bne.w	800488a <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800447e:	f107 0313 	add.w	r3, r7, #19
 8004482:	4619      	mov	r1, r3
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f006 ffba 	bl	800b3fe <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004490:	2301      	movs	r3, #1
 8004492:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	3b01      	subs	r3, #1
 8004498:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 800449c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449e:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80044a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	3202      	adds	r2, #2
 80044ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80044b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b8:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 80044bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044be:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f004 f8fd 	bl	80086cc <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80044d2:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80044d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80044de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e0:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80044e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80044e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ea:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80044ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ee:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80044f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044f2:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80044f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f8:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80044fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044fc:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004502:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004506:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800450a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800450c:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004512:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004518:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800451c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800451e:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004524:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800452a:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800452c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004534:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004538:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800453a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453c:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004540:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004544:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004548:	f203 3292 	addw	r2, r3, #914	@ 0x392
 800454c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800454e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f003 faeb 	bl	8007b30 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800455a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455c:	795b      	ldrb	r3, [r3, #5]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d002      	beq.n	8004568 <VL53LX_get_device_results+0x1d6>
 8004562:	2b03      	cmp	r3, #3
 8004564:	d02e      	beq.n	80045c4 <VL53LX_get_device_results+0x232>
 8004566:	e03d      	b.n	80045e4 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800456a:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 800456e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800457e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004580:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 8004584:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004586:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004592:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 8004596:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004598:	319c      	adds	r1, #156	@ 0x9c
 800459a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800459c:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 80045a0:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 80045a4:	b2a4      	uxth	r4, r4
 80045a6:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 80045a8:	351c      	adds	r5, #28
 80045aa:	9505      	str	r5, [sp, #20]
 80045ac:	9404      	str	r4, [sp, #16]
 80045ae:	9003      	str	r0, [sp, #12]
 80045b0:	9102      	str	r1, [sp, #8]
 80045b2:	9201      	str	r2, [sp, #4]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4643      	mov	r3, r8
 80045b8:	4672      	mov	r2, lr
 80045ba:	4661      	mov	r1, ip
 80045bc:	4630      	mov	r0, r6
 80045be:	f005 f8f4 	bl	80097aa <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80045c2:	e013      	b.n	80045ec <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80045c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c6:	331c      	adds	r3, #28
 80045c8:	4619      	mov	r1, r3
 80045ca:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80045cc:	f7fe f9b8 	bl	8002940 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80045d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	b29b      	uxth	r3, r3
 80045dc:	b21a      	sxth	r2, r3
 80045de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e0:	839a      	strh	r2, [r3, #28]
		break;
 80045e2:	e003      	b.n	80045ec <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 80045e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e6:	2200      	movs	r2, #0
 80045e8:	839a      	strh	r2, [r3, #28]
		break;
 80045ea:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 80045ec:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 814c 	bne.w	800488e <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8004602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004604:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800460a:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 800460e:	461c      	mov	r4, r3
 8004610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004612:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4623      	mov	r3, r4
 800461a:	f005 fa69 	bl	8009af0 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800461e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004620:	799b      	ldrb	r3, [r3, #6]
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	4619      	mov	r1, r3
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 ff89 	bl	800553e <VL53LX_get_dmax_calibration_data>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004632:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 812b 	bne.w	8004892 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800463c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800463e:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 8004642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004644:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 8004648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800464a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800464e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004650:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004654:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004656:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 800465a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800465c:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004660:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8004662:	9405      	str	r4, [sp, #20]
 8004664:	f107 0413 	add.w	r4, r7, #19
 8004668:	9404      	str	r4, [sp, #16]
 800466a:	9003      	str	r0, [sp, #12]
 800466c:	9102      	str	r1, [sp, #8]
 800466e:	9201      	str	r2, [sp, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4633      	mov	r3, r6
 8004674:	462a      	mov	r2, r5
 8004676:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f00d f94d 	bl	8011918 <VL53LX_ipp_hist_process_data>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004686:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d150      	bne.n	8004730 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 800468e:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004690:	2b01      	cmp	r3, #1
 8004692:	d94d      	bls.n	8004730 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800469a:	e045      	b.n	8004728 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 800469c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80046a0:	224c      	movs	r2, #76	@ 0x4c
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	3310      	adds	r3, #16
 80046a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046aa:	4413      	add	r3, r2
 80046ac:	3304      	adds	r3, #4
 80046ae:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	7cfa      	ldrb	r2, [r7, #19]
 80046b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	7cfa      	ldrb	r2, [r7, #19]
 80046c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	7cfa      	ldrb	r2, [r7, #19]
 80046d2:	fb93 f2f2 	sdiv	r2, r3, r2
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80046de:	461a      	mov	r2, r3
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046f0:	461a      	mov	r2, r3
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004702:	461a      	mov	r2, r3
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	fb92 f3f3 	sdiv	r3, r2, r3
 800470a:	b29a      	uxth	r2, r3
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	7cfa      	ldrb	r2, [r7, #19]
 8004716:	fbb3 f2f2 	udiv	r2, r3, r2
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800471e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004722:	3301      	adds	r3, #1
 8004724:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004728:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800472c:	2b03      	cmp	r3, #3
 800472e:	d9b5      	bls.n	800469c <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004730:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 80ae 	bne.w	8004896 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 800473a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800473c:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8004740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004742:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 8004746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004748:	330e      	adds	r3, #14
 800474a:	461a      	mov	r2, r3
 800474c:	f004 fff7 	bl	800973e <VL53LX_hist_wrap_dmax>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004756:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 809d 	bne.w	800489a <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004762:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800476a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004772:	4413      	add	r3, r2
 8004774:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004776:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004786:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004788:	4413      	add	r3, r2
 800478a:	f103 0208 	add.w	r2, r3, #8
 800478e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f004 faf2 	bl	8008d7a <VL53LX_hist_phase_consistency_check>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 800479c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d17c      	bne.n	800489e <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80047a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80047ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b6:	4413      	add	r3, r2
 80047b8:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80047ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80047ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047cc:	4413      	add	r3, r2
 80047ce:	f103 0208 	add.w	r2, r3, #8
 80047d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047d4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f004 ff58 	bl	800968e <VL53LX_hist_xmonitor_consistency_check>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 80047e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d15a      	bne.n	80048a2 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80047ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	2205      	movs	r2, #5
 80047fa:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80047fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047fe:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004802:	3301      	adds	r3, #1
 8004804:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800480a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004810:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004814:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 8004818:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800481c:	429a      	cmp	r2, r3
 800481e:	d222      	bcs.n	8004866 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800482e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004830:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004834:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004838:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800483a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483c:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004846:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484a:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 800484e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004850:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004854:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8004858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800485a:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800485c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 8004862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004864:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004866:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11b      	bne.n	80048a6 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 800486e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004870:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8004874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004876:	f203 3266 	addw	r2, r3, #870	@ 0x366
 800487a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800487c:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004880:	3318      	adds	r3, #24
 8004882:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004884:	f005 fa91 	bl	8009daa <VL53LX_hist_copy_results_to_sys_and_core>
 8004888:	e00e      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800488a:	bf00      	nop
 800488c:	e00c      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800488e:	bf00      	nop
 8004890:	e00a      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004892:	bf00      	nop
 8004894:	e008      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004896:	bf00      	nop
 8004898:	e006      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80048a6:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80048a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d036      	beq.n	800491e <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80048b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b2:	79db      	ldrb	r3, [r3, #7]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d00a      	beq.n	80048ce <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80048b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80048c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f005 fb45 	bl	8009f52 <VL53LX_dynamic_zone_update>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80048d4:	e015      	b.n	8004902 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80048d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 80048dc:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <VL53LX_get_device_results+0x556>
 80048e4:	2103      	movs	r1, #3
 80048e6:	e000      	b.n	80048ea <VL53LX_get_device_results+0x558>
 80048e8:	2101      	movs	r1, #1
 80048ea:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048f0:	4413      	add	r3, r2
 80048f2:	460a      	mov	r2, r1
 80048f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80048f8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048fc:	3301      	adds	r3, #1
 80048fe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004902:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004906:	2b04      	cmp	r3, #4
 8004908:	d9e5      	bls.n	80048d6 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 800490a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f005 fb97 	bl	800a046 <VL53LX_multizone_hist_bins_update>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800491e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f006 f832 	bl	800a990 <VL53LX_dynamic_xtalk_correction_corrector>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004934:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d157      	bne.n	80049ec <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 800493c:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d054      	beq.n	80049ec <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 8004942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	7cfa      	ldrb	r2, [r7, #19]
 8004948:	fbb3 f2f2 	udiv	r2, r3, r2
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e04c      	b.n	80049ec <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004952:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004956:	2b00      	cmp	r3, #0
 8004958:	d107      	bne.n	800496a <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	4619      	mov	r1, r3
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff fc58 	bl	8004214 <VL53LX_get_measurement_results>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 800496a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004974:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004978:	4618      	mov	r0, r3
 800497a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800497c:	f203 3166 	addw	r1, r3, #870	@ 0x366
 8004980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004982:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8004986:	3218      	adds	r2, #24
 8004988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800498a:	f000 fc27 	bl	80051dc <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12a      	bne.n	80049ec <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 8004996:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f006 fc4e 	bl	800b248 <VL53LX_low_power_auto_setup_manual_calibration>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	2201      	movs	r2, #1
 80049b6:	709a      	strb	r2, [r3, #2]
 80049b8:	e00a      	b.n	80049d0 <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 80049ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2202      	movs	r2, #2
 80049ce:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	2bff      	cmp	r3, #255	@ 0xff
 80049d6:	d009      	beq.n	80049ec <VL53LX_get_device_results+0x65a>
 80049d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f006 fc83 	bl	800b2ec <VL53LX_low_power_auto_update_DSS>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80049ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80049f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80049f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f8:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80049fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049fe:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a02:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a08:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004a0a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 80b0 	bne.w	8004b74 <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a16:	2205      	movs	r2, #5
 8004a18:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004a22:	3301      	adds	r3, #1
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a28:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8004a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a38:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8004a3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004a40:	429a      	cmp	r2, r3
 8004a42:	f080 8097 	bcs.w	8004b74 <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004a46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004a56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a58:	4413      	add	r3, r2
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a60:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a64:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a68:	785a      	ldrb	r2, [r3, #1]
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6c:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a70:	789a      	ldrb	r2, [r3, #2]
 8004a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a74:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a78:	78da      	ldrb	r2, [r3, #3]
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004a7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a80:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a8a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a94:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa0:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aac:	7c5a      	ldrb	r2, [r3, #17]
 8004aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab0:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ab4:	7c9a      	ldrb	r2, [r3, #18]
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004ac0:	e052      	b.n	8004b68 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004ac2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ac6:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004aca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004acc:	204c      	movs	r0, #76	@ 0x4c
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3338      	adds	r3, #56	@ 0x38
 8004ad6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ad8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004ada:	4613      	mov	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4403      	add	r3, r0
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004ae8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004aec:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004af0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004af2:	204c      	movs	r0, #76	@ 0x4c
 8004af4:	fb00 f303 	mul.w	r3, r0, r3
 8004af8:	440b      	add	r3, r1
 8004afa:	333c      	adds	r3, #60	@ 0x3c
 8004afc:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004afe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004b00:	4613      	mov	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4403      	add	r3, r0
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004b0e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004b12:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004b16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b18:	204c      	movs	r0, #76	@ 0x4c
 8004b1a:	fb00 f303 	mul.w	r3, r0, r3
 8004b1e:	440b      	add	r3, r1
 8004b20:	3354      	adds	r3, #84	@ 0x54
 8004b22:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3310      	adds	r3, #16
 8004b32:	4602      	mov	r2, r0
 8004b34:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004b36:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004b3a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8004b3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b40:	204c      	movs	r0, #76	@ 0x4c
 8004b42:	fb00 f303 	mul.w	r3, r0, r3
 8004b46:	440b      	add	r3, r1
 8004b48:	335e      	adds	r3, #94	@ 0x5e
 8004b4a:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3312      	adds	r3, #18
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004b5e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b62:	3301      	adds	r3, #1
 8004b64:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b6a:	7c9b      	ldrb	r3, [r3, #18]
 8004b6c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3a6      	bcc.n	8004ac2 <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 8004b74:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004b78:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f012 f911 	bl	8016da2 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004b80:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f002 fdf9 	bl	8007780 <VL53LX_check_ll_driver_rd_state>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004b94:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3768      	adds	r7, #104	@ 0x68
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ba2 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff f809 	bl	8003bd8 <VL53LX_init_and_start_range>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b0d2      	sub	sp, #328	@ 0x148
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004be2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004be6:	6018      	str	r0, [r3, #0]
 8004be8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004bf0:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8004bf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bfc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3318      	adds	r3, #24
 8004c04:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004c08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c0c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004c16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004c1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c1e:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8004c22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c2a:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8004c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c36:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004c3a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004c3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c42:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004c46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004c4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004c4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 8004c84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004c90:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8004c98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c9c:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8004ca0:	2353      	movs	r3, #83	@ 0x53
 8004ca2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004ca6:	2188      	movs	r1, #136	@ 0x88
 8004ca8:	6800      	ldr	r0, [r0, #0]
 8004caa:	f00c fc27 	bl	80114fc <VL53LX_ReadMulti>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004cb4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004cc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004ccc:	785a      	ldrb	r2, [r3, #1]
 8004cce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cd2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004cdc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004ce0:	789a      	ldrb	r2, [r3, #2]
 8004ce2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ce6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004cf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004cf4:	78da      	ldrb	r2, [r3, #3]
 8004cf6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cfa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004d04:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	2002      	movs	r0, #2
 8004d0e:	f003 fa37 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004d16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d1a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8004d24:	234e      	movs	r3, #78	@ 0x4e
 8004d26:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004d2a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004d2e:	f107 020c 	add.w	r2, r7, #12
 8004d32:	4413      	add	r3, r2
 8004d34:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004d38:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004d3c:	2002      	movs	r0, #2
 8004d3e:	f003 fa1f 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004d46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d4a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8004d54:	2350      	movs	r3, #80	@ 0x50
 8004d56:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004d5a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004d5e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004d62:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004d66:	5cd2      	ldrb	r2, [r2, r3]
 8004d68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004d76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d7a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d8c:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004d90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004d9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da6:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 8004daa:	2351      	movs	r3, #81	@ 0x51
 8004dac:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004db0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004db4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004db8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004dbc:	5cd3      	ldrb	r3, [r2, r3]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004dc4:	2352      	movs	r3, #82	@ 0x52
 8004dc6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004dca:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004dce:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004dd2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004dd6:	5cd2      	ldrb	r2, [r2, r3]
 8004dd8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004ddc:	4413      	add	r3, r2
 8004dde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004de2:	234d      	movs	r3, #77	@ 0x4d
 8004de4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004de8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004dec:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004df0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004df4:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8004df8:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004e00:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004e04:	f107 020c 	add.w	r2, r7, #12
 8004e08:	4413      	add	r3, r2
 8004e0a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004e14:	e01a      	b.n	8004e4c <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004e16:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	f003 fa4f 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 8004e20:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004e22:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004e26:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004e28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3206      	adds	r2, #6
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004e38:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004e42:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004e46:	3301      	adds	r3, #1
 8004e48:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004e4c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004e50:	2b17      	cmp	r3, #23
 8004e52:	d9e0      	bls.n	8004e16 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8004e54:	f107 0208 	add.w	r2, r7, #8
 8004e58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e60:	f248 018d 	movw	r1, #32909	@ 0x808d
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f000 fbab 	bl	80055c0 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8004e6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e6e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d118      	bne.n	8004eae <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e80:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8004e84:	3310      	adds	r3, #16
 8004e86:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f011 fef9 	bl	8016c84 <memset>
		pdev->bin_rec_pos = 0;
 8004e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 8004ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 8004eae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eb2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10b      	bne.n	8004ed4 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 8004ebc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ec0:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004ec4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ec8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	f7fd fe2e 	bl	8002b30 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8004ed4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ed8:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004edc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ee0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8004ee8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004ef6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004efa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2218      	movs	r2, #24
 8004f02:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004f04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2218      	movs	r2, #24
 8004f10:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8004f12:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f16:	78da      	ldrb	r2, [r3, #3]
 8004f18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f1c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8004f26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f2a:	799b      	ldrb	r3, [r3, #6]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8004f30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8004f3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f42:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004f4c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004f50:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 8004f52:	4413      	add	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f5a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8004f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f68:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8004f6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f6e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8004f78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f7c:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004f80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f84:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	f003 fd97 	bl	8008abe <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8004f90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d115      	bne.n	8004fc8 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8004f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fa0:	791b      	ldrb	r3, [r3, #4]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8004fa6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004faa:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 8004fac:	4413      	add	r3, r2
 8004fae:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8004fb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fb6:	799a      	ldrb	r2, [r3, #6]
 8004fb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8004fc6:	e014      	b.n	8004ff2 <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8004fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fcc:	79db      	ldrb	r3, [r3, #7]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8004fd2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004fd6:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 8004fd8:	4413      	add	r3, r2
 8004fda:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8004fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fe2:	7a5a      	ldrb	r2, [r3, #9]
 8004fe4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fe8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8004ff2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ff6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005000:	2300      	movs	r3, #0
 8005002:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005006:	e01f      	b.n	8005048 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005008:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800500c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005010:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4413      	add	r3, r2
 8005018:	7b1b      	ldrb	r3, [r3, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b07      	cmp	r3, #7
 8005020:	d10d      	bne.n	800503e <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8005022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005026:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	7adb      	ldrb	r3, [r3, #11]
 800502e:	3304      	adds	r3, #4
 8005030:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005032:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005036:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800503e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005042:	3301      	adds	r3, #1
 8005044:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005048:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800504c:	2b05      	cmp	r3, #5
 800504e:	d9db      	bls.n	8005008 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005050:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005054:	4618      	mov	r0, r3
 8005056:	f003 fba2 	bl	800879e <VL53LX_decode_timeout>
 800505a:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800505c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005060:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 800506a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800506e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005078:	4618      	mov	r0, r3
 800507a:	f006 fa00 	bl	800b47e <VL53LX_calc_pll_period_us>
 800507e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005086:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	3301      	adds	r3, #1
 8005092:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005096:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800509a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 80050a4:	4619      	mov	r1, r3
 80050a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80050aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ae:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80050b2:	f006 f9fb 	bl	800b4ac <VL53LX_duration_maths>
 80050b6:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80050b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80050c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ca:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80050d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	f006 fb0a 	bl	800b6f8 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80050e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f006 ff22 	bl	800bf36 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80050f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050f6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80050fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005106:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800510a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800510e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005112:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800511a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800511e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	789b      	ldrb	r3, [r3, #2]
 8005126:	461a      	mov	r2, r3
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005134:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005138:	4413      	add	r3, r2
 800513a:	3302      	adds	r3, #2
 800513c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005144:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005146:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800514a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005158:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800515a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800515e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800516c:	2200      	movs	r2, #0
 800516e:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005170:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005174:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2b11      	cmp	r3, #17
 8005184:	bf8c      	ite	hi
 8005186:	2201      	movhi	r2, #1
 8005188:	2200      	movls	r2, #0
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	2a00      	cmp	r2, #0
 800518e:	d11c      	bne.n	80051ca <VL53LX_get_histogram_bin_data+0x5f2>
 8005190:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <VL53LX_get_histogram_bin_data+0x600>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80051a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80051c2:	23fa      	movs	r3, #250	@ 0xfa
 80051c4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 80051c8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80051ca:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	0002200e 	.word	0x0002200e

080051dc <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80051dc:	b480      	push	{r7}
 80051de:	b08b      	sub	sp, #44	@ 0x2c
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	78da      	ldrb	r2, [r3, #3]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2204      	movs	r2, #4
 8005210:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	8a1b      	ldrh	r3, [r3, #16]
 800521c:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	8a9b      	ldrh	r3, [r3, #20]
 8005222:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	8a5b      	ldrh	r3, [r3, #18]
 8005228:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005230:	e00b      	b.n	800524a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	2200      	movs	r2, #0
 800523e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005244:	3301      	adds	r3, #1
 8005246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800524a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800524e:	2b04      	cmp	r3, #4
 8005250:	d9ef      	bls.n	8005232 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800525e:	e0fe      	b.n	800545e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005266:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2200      	movs	r2, #0
 800526c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	78db      	ldrb	r3, [r3, #3]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800527e:	2b09      	cmp	r3, #9
 8005280:	d104      	bne.n	800528c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2213      	movs	r2, #19
 8005286:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 800528a:	e007      	b.n	800529c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2200      	movs	r2, #0
 80052a0:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2200      	movs	r2, #0
 80052a6:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2200      	movs	r2, #0
 80052ac:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	2200      	movs	r2, #0
 80052b2:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2200      	movs	r2, #0
 80052b8:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2200      	movs	r2, #0
 80052be:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80052c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d05c      	beq.n	8005386 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80052cc:	e0a8      	b.n	8005420 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	789b      	ldrb	r3, [r3, #2]
 80052d2:	2b07      	cmp	r3, #7
 80052d4:	d103      	bne.n	80052de <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	8a7a      	ldrh	r2, [r7, #18]
 80052da:	82da      	strh	r2, [r3, #22]
 80052dc:	e00b      	b.n	80052f6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	789b      	ldrb	r3, [r3, #2]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d103      	bne.n	80052ee <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	8aba      	ldrh	r2, [r7, #20]
 80052ea:	82da      	strh	r2, [r3, #22]
 80052ec:	e003      	b.n	80052f6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	8afa      	ldrh	r2, [r7, #22]
 80052fa:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	895b      	ldrh	r3, [r3, #10]
 8005310:	015b      	lsls	r3, r3, #5
 8005312:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531a:	d302      	bcc.n	8005322 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800531c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005320:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	b29a      	uxth	r2, r3
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005338:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800534a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da01      	bge.n	8005356 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005352:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005356:	12db      	asrs	r3, r3, #11
 8005358:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	b21a      	sxth	r2, r3
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8005384:	e04c      	b.n	8005420 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800539c:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	8bdb      	ldrh	r3, [r3, #30]
 80053aa:	015b      	lsls	r3, r3, #5
 80053ac:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b4:	d302      	bcc.n	80053bc <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80053b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053ba:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 80053d2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da01      	bge.n	80053f0 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80053ec:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80053f0:	12db      	asrs	r3, r3, #11
 80053f2:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 800541e:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	334c      	adds	r3, #76	@ 0x4c
 8005452:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005458:	3301      	adds	r3, #1
 800545a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800545e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005462:	2b01      	cmp	r3, #1
 8005464:	f67f aefc 	bls.w	8005260 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2b11      	cmp	r3, #17
 8005478:	bf8c      	ite	hi
 800547a:	2201      	movhi	r2, #1
 800547c:	2200      	movls	r2, #0
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	2a00      	cmp	r2, #0
 8005482:	d117      	bne.n	80054b4 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 8005484:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80054b2:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80054b4:	bf00      	nop
 80054b6:	372c      	adds	r7, #44	@ 0x2c
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	0002200e 	.word	0x0002200e

080054c4 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3318      	adds	r3, #24
 80054d6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	332c      	adds	r3, #44	@ 0x2c
 80054dc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d109      	bne.n	80054fa <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 80054f8:	e003      	b.n	8005502 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8005502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005506:	4618      	mov	r0, r3
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3318      	adds	r3, #24
 8005526:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800552e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	460b      	mov	r3, r1
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800554c:	2300      	movs	r3, #0
 800554e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3318      	adds	r3, #24
 8005554:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d009      	beq.n	8005570 <VL53LX_get_dmax_calibration_data+0x32>
 800555c:	2b02      	cmp	r3, #2
 800555e:	d10f      	bne.n	8005580 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 8005564:	220a      	movs	r2, #10
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f011 fc1a 	bl	8016da2 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800556e:	e00a      	b.n	8005586 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8005574:	220a      	movs	r2, #10
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f011 fc12 	bl	8016da2 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800557e:	e002      	b.n	8005586 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005580:	23fc      	movs	r3, #252	@ 0xfc
 8005582:	75fb      	strb	r3, [r7, #23]
	break;
 8005584:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <VL53LX_set_offset_correction_mode>:


VL53LX_Error VL53LX_set_offset_correction_mode(
	VL53LX_DEV                     Dev,
	VL53LX_OffsetCorrectionMode    offset_cor_mode)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3318      	adds	r3, #24
 80055a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->offset_correction_mode = offset_cor_mode;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	715a      	strb	r2, [r3, #5]

	LOG_FUNCTION_END(status);

	return status;
 80055ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	@ 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	460b      	mov	r3, r1
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3318      	adds	r3, #24
 80055d6:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80055de:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80055e6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80055ee:	2bb9      	cmp	r3, #185	@ 0xb9
 80055f0:	f200 86ca 	bhi.w	8006388 <VL53LX_get_tuning_parm+0xdc8>
 80055f4:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <VL53LX_get_tuning_parm+0x3c>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	080058e5 	.word	0x080058e5
 8005600:	080058f5 	.word	0x080058f5
 8005604:	08005905 	.word	0x08005905
 8005608:	08005915 	.word	0x08005915
 800560c:	08005923 	.word	0x08005923
 8005610:	08005931 	.word	0x08005931
 8005614:	0800593f 	.word	0x0800593f
 8005618:	0800594d 	.word	0x0800594d
 800561c:	0800595b 	.word	0x0800595b
 8005620:	08005969 	.word	0x08005969
 8005624:	08005977 	.word	0x08005977
 8005628:	08005983 	.word	0x08005983
 800562c:	08005991 	.word	0x08005991
 8005630:	0800599f 	.word	0x0800599f
 8005634:	080059ab 	.word	0x080059ab
 8005638:	080059b9 	.word	0x080059b9
 800563c:	080059c7 	.word	0x080059c7
 8005640:	080059d7 	.word	0x080059d7
 8005644:	080059e7 	.word	0x080059e7
 8005648:	080059f5 	.word	0x080059f5
 800564c:	08005a05 	.word	0x08005a05
 8005650:	08005a13 	.word	0x08005a13
 8005654:	08005a23 	.word	0x08005a23
 8005658:	08005a33 	.word	0x08005a33
 800565c:	08005a43 	.word	0x08005a43
 8005660:	08005a53 	.word	0x08005a53
 8005664:	08005a63 	.word	0x08005a63
 8005668:	08005a73 	.word	0x08005a73
 800566c:	08005a83 	.word	0x08005a83
 8005670:	08005a93 	.word	0x08005a93
 8005674:	08005aa3 	.word	0x08005aa3
 8005678:	08005ab1 	.word	0x08005ab1
 800567c:	08005ac1 	.word	0x08005ac1
 8005680:	08005ad1 	.word	0x08005ad1
 8005684:	08005ae1 	.word	0x08005ae1
 8005688:	08005af1 	.word	0x08005af1
 800568c:	08005b01 	.word	0x08005b01
 8005690:	08005b11 	.word	0x08005b11
 8005694:	08005b21 	.word	0x08005b21
 8005698:	08005b31 	.word	0x08005b31
 800569c:	08005b41 	.word	0x08005b41
 80056a0:	08005b51 	.word	0x08005b51
 80056a4:	08005b61 	.word	0x08005b61
 80056a8:	08005b71 	.word	0x08005b71
 80056ac:	08005b81 	.word	0x08005b81
 80056b0:	08005b91 	.word	0x08005b91
 80056b4:	08005b9f 	.word	0x08005b9f
 80056b8:	08005bad 	.word	0x08005bad
 80056bc:	08005bbb 	.word	0x08005bbb
 80056c0:	08005bc9 	.word	0x08005bc9
 80056c4:	08005bd7 	.word	0x08005bd7
 80056c8:	08005be5 	.word	0x08005be5
 80056cc:	08005bf3 	.word	0x08005bf3
 80056d0:	08005c01 	.word	0x08005c01
 80056d4:	08005c0f 	.word	0x08005c0f
 80056d8:	08005c1d 	.word	0x08005c1d
 80056dc:	08005c2b 	.word	0x08005c2b
 80056e0:	08005c39 	.word	0x08005c39
 80056e4:	08005c47 	.word	0x08005c47
 80056e8:	08005c55 	.word	0x08005c55
 80056ec:	08005c63 	.word	0x08005c63
 80056f0:	08005c71 	.word	0x08005c71
 80056f4:	08005c7f 	.word	0x08005c7f
 80056f8:	08005c8d 	.word	0x08005c8d
 80056fc:	08005c9b 	.word	0x08005c9b
 8005700:	08005ca9 	.word	0x08005ca9
 8005704:	08005cb7 	.word	0x08005cb7
 8005708:	08005cc5 	.word	0x08005cc5
 800570c:	08005cd3 	.word	0x08005cd3
 8005710:	08005ce1 	.word	0x08005ce1
 8005714:	08005cef 	.word	0x08005cef
 8005718:	08005cfd 	.word	0x08005cfd
 800571c:	08005d0b 	.word	0x08005d0b
 8005720:	08005d19 	.word	0x08005d19
 8005724:	08005d25 	.word	0x08005d25
 8005728:	08005d33 	.word	0x08005d33
 800572c:	08005d41 	.word	0x08005d41
 8005730:	08005d4d 	.word	0x08005d4d
 8005734:	08005d59 	.word	0x08005d59
 8005738:	08005d65 	.word	0x08005d65
 800573c:	08005d71 	.word	0x08005d71
 8005740:	08005d7d 	.word	0x08005d7d
 8005744:	08005d89 	.word	0x08005d89
 8005748:	08005d97 	.word	0x08005d97
 800574c:	08005da5 	.word	0x08005da5
 8005750:	08005db3 	.word	0x08005db3
 8005754:	08005dc1 	.word	0x08005dc1
 8005758:	08005dcf 	.word	0x08005dcf
 800575c:	08005ddd 	.word	0x08005ddd
 8005760:	08005deb 	.word	0x08005deb
 8005764:	08005df9 	.word	0x08005df9
 8005768:	08005e07 	.word	0x08005e07
 800576c:	08005e15 	.word	0x08005e15
 8005770:	08005e23 	.word	0x08005e23
 8005774:	08005e31 	.word	0x08005e31
 8005778:	08005e3f 	.word	0x08005e3f
 800577c:	08005e4d 	.word	0x08005e4d
 8005780:	08005e5b 	.word	0x08005e5b
 8005784:	08005e69 	.word	0x08005e69
 8005788:	08005e77 	.word	0x08005e77
 800578c:	08005e85 	.word	0x08005e85
 8005790:	08005e93 	.word	0x08005e93
 8005794:	08005ea1 	.word	0x08005ea1
 8005798:	08005eaf 	.word	0x08005eaf
 800579c:	08005ebd 	.word	0x08005ebd
 80057a0:	08005ecb 	.word	0x08005ecb
 80057a4:	08005ed9 	.word	0x08005ed9
 80057a8:	08005ee7 	.word	0x08005ee7
 80057ac:	08005ef5 	.word	0x08005ef5
 80057b0:	08005f03 	.word	0x08005f03
 80057b4:	08005f11 	.word	0x08005f11
 80057b8:	08005f1f 	.word	0x08005f1f
 80057bc:	08005f2d 	.word	0x08005f2d
 80057c0:	08005f3b 	.word	0x08005f3b
 80057c4:	08005f49 	.word	0x08005f49
 80057c8:	08005f57 	.word	0x08005f57
 80057cc:	08005f65 	.word	0x08005f65
 80057d0:	08005f73 	.word	0x08005f73
 80057d4:	08005f81 	.word	0x08005f81
 80057d8:	08005f93 	.word	0x08005f93
 80057dc:	08005fa5 	.word	0x08005fa5
 80057e0:	08005fb7 	.word	0x08005fb7
 80057e4:	08005fc9 	.word	0x08005fc9
 80057e8:	08005fdb 	.word	0x08005fdb
 80057ec:	08005fed 	.word	0x08005fed
 80057f0:	08005fff 	.word	0x08005fff
 80057f4:	08006011 	.word	0x08006011
 80057f8:	08006023 	.word	0x08006023
 80057fc:	08006035 	.word	0x08006035
 8005800:	08006047 	.word	0x08006047
 8005804:	08006059 	.word	0x08006059
 8005808:	0800606b 	.word	0x0800606b
 800580c:	0800607d 	.word	0x0800607d
 8005810:	0800608f 	.word	0x0800608f
 8005814:	080060a1 	.word	0x080060a1
 8005818:	080060b3 	.word	0x080060b3
 800581c:	080060c5 	.word	0x080060c5
 8005820:	080060d7 	.word	0x080060d7
 8005824:	080060e5 	.word	0x080060e5
 8005828:	080060f3 	.word	0x080060f3
 800582c:	08006101 	.word	0x08006101
 8005830:	0800610f 	.word	0x0800610f
 8005834:	0800611d 	.word	0x0800611d
 8005838:	0800612b 	.word	0x0800612b
 800583c:	08006139 	.word	0x08006139
 8005840:	0800614b 	.word	0x0800614b
 8005844:	08006159 	.word	0x08006159
 8005848:	08006167 	.word	0x08006167
 800584c:	08006175 	.word	0x08006175
 8005850:	08006183 	.word	0x08006183
 8005854:	08006191 	.word	0x08006191
 8005858:	0800619f 	.word	0x0800619f
 800585c:	080061ad 	.word	0x080061ad
 8005860:	080061bb 	.word	0x080061bb
 8005864:	080061c9 	.word	0x080061c9
 8005868:	080061d7 	.word	0x080061d7
 800586c:	080061e5 	.word	0x080061e5
 8005870:	080061f3 	.word	0x080061f3
 8005874:	08006201 	.word	0x08006201
 8005878:	0800620f 	.word	0x0800620f
 800587c:	0800621d 	.word	0x0800621d
 8005880:	0800622b 	.word	0x0800622b
 8005884:	08006239 	.word	0x08006239
 8005888:	08006247 	.word	0x08006247
 800588c:	08006255 	.word	0x08006255
 8005890:	08006263 	.word	0x08006263
 8005894:	08006271 	.word	0x08006271
 8005898:	0800627f 	.word	0x0800627f
 800589c:	0800628d 	.word	0x0800628d
 80058a0:	0800629b 	.word	0x0800629b
 80058a4:	080062a9 	.word	0x080062a9
 80058a8:	080062b7 	.word	0x080062b7
 80058ac:	080062c5 	.word	0x080062c5
 80058b0:	080062d3 	.word	0x080062d3
 80058b4:	080062e1 	.word	0x080062e1
 80058b8:	080062ef 	.word	0x080062ef
 80058bc:	080062fd 	.word	0x080062fd
 80058c0:	0800630b 	.word	0x0800630b
 80058c4:	08006319 	.word	0x08006319
 80058c8:	08006327 	.word	0x08006327
 80058cc:	08006335 	.word	0x08006335
 80058d0:	08006343 	.word	0x08006343
 80058d4:	08006351 	.word	0x08006351
 80058d8:	0800635f 	.word	0x0800635f
 80058dc:	0800636d 	.word	0x0800636d
 80058e0:	0800637b 	.word	0x0800637b

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80058ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
	break;
 80058f0:	f000 bd51 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80058fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
	break;
 8005900:	f000 bd49 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800590a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
	break;
 8005910:	f000 bd41 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
	break;
 800591e:	f000 bd3a 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
	break;
 800592c:	f000 bd33 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
	break;
 800593a:	f000 bd2c 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]
	break;
 8005948:	f000 bd25 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	791b      	ldrb	r3, [r3, #4]
 8005950:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
	break;
 8005956:	f000 bd1e 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	795b      	ldrb	r3, [r3, #5]
 800595e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
	break;
 8005964:	f000 bd17 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	799b      	ldrb	r3, [r3, #6]
 800596c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
	break;
 8005972:	f000 bd10 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
	break;
 800597e:	f000 bd0a 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	891b      	ldrh	r3, [r3, #8]
 8005986:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
	break;
 800598c:	f000 bd03 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	8a1b      	ldrh	r3, [r3, #16]
 8005994:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	601a      	str	r2, [r3, #0]
	break;
 800599a:	f000 bcfc 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
	break;
 80059a6:	f000 bcf6 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	7e1b      	ldrb	r3, [r3, #24]
 80059ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
	break;
 80059b4:	f000 bcef 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	8b5b      	ldrh	r3, [r3, #26]
 80059bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
	break;
 80059c2:	f000 bce8 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80059cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	break;
 80059d2:	f000 bce0 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80059dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
	break;
 80059e2:	f000 bcd8 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
	break;
 80059f0:	f000 bcd1 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80059fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]
	break;
 8005a00:	f000 bcc9 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
	break;
 8005a0e:	f000 bcc2 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8005a18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
	break;
 8005a1e:	f000 bcba 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005a28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
	break;
 8005a2e:	f000 bcb2 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
	break;
 8005a3e:	f000 bcaa 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8005a48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
	break;
 8005a4e:	f000 bca2 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005a58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
	break;
 8005a5e:	f000 bc9a 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8005a68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
	break;
 8005a6e:	f000 bc92 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
	break;
 8005a7e:	f000 bc8a 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
	break;
 8005a8e:	f000 bc82 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8005a98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
	break;
 8005a9e:	f000 bc7a 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	601a      	str	r2, [r3, #0]
	break;
 8005aac:	f000 bc73 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]
	break;
 8005abc:	f000 bc6b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	601a      	str	r2, [r3, #0]
	break;
 8005acc:	f000 bc63 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 8005ad6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]
	break;
 8005adc:	f000 bc5b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8005ae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
	break;
 8005aec:	f000 bc53 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8005af6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]
	break;
 8005afc:	f000 bc4b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8005b06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
	break;
 8005b0c:	f000 bc43 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
	break;
 8005b1c:	f000 bc3b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8005b26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]
	break;
 8005b2c:	f000 bc33 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8005b36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
	break;
 8005b3c:	f000 bc2b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8005b46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
	break;
 8005b4c:	f000 bc23 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8005b56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	601a      	str	r2, [r3, #0]
	break;
 8005b5c:	f000 bc1b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
	break;
 8005b6c:	f000 bc13 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8005b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
	break;
 8005b7c:	f000 bc0b 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	601a      	str	r2, [r3, #0]
	break;
 8005b8c:	f000 bc03 	b.w	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
	break;
 8005b9c:	e3fb      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005ba4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	601a      	str	r2, [r3, #0]
	break;
 8005baa:	e3f4      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8005bb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
	break;
 8005bb8:	e3ed      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8005bc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
	break;
 8005bc6:	e3e6      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8005bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
	break;
 8005bd4:	e3df      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8005bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
	break;
 8005be2:	e3d8      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8005bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
	break;
 8005bf0:	e3d1      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8005bf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
	break;
 8005bfe:	e3ca      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8005c06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
	break;
 8005c0c:	e3c3      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8005c14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]
	break;
 8005c1a:	e3bc      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8005c22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
	break;
 8005c28:	e3b5      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8005c30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
	break;
 8005c36:	e3ae      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005c3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
	break;
 8005c44:	e3a7      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8005c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
	break;
 8005c52:	e3a0      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	break;
 8005c60:	e399      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8005c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
	break;
 8005c6e:	e392      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 8005c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	break;
 8005c7c:	e38b      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 8005c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
	break;
 8005c8a:	e384      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
	break;
 8005c98:	e37d      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 8005ca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
	break;
 8005ca6:	e376      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 8005cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
	break;
 8005cb4:	e36f      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8005cbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
	break;
 8005cc2:	e368      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8005cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
	break;
 8005cd0:	e361      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8005cd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
	break;
 8005cde:	e35a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8005ce6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
	break;
 8005cec:	e353      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8005cf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
	break;
 8005cfa:	e34c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8005d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	break;
 8005d08:	e345      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8005d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
	break;
 8005d16:	e33e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	7c1b      	ldrb	r3, [r3, #16]
 8005d1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
	break;
 8005d22:	e338      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
	break;
 8005d30:	e331      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005d38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	break;
 8005d3e:	e32a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
	break;
 8005d4a:	e324      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
	break;
 8005d56:	e31e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	8adb      	ldrh	r3, [r3, #22]
 8005d5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
	break;
 8005d62:	e318      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	8b1b      	ldrh	r3, [r3, #24]
 8005d68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
	break;
 8005d6e:	e312      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
	break;
 8005d7a:	e30c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	break;
 8005d86:	e306      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	break;
 8005d94:	e2ff      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	break;
 8005da2:	e2f8      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005daa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
	break;
 8005db0:	e2f1      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
	break;
 8005dbe:	e2ea      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8005dc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
	break;
 8005dcc:	e2e3      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8005dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	break;
 8005dda:	e2dc      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 8005de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
	break;
 8005de8:	e2d5      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8005df0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
	break;
 8005df6:	e2ce      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
	break;
 8005e04:	e2c7      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8005e0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
	break;
 8005e12:	e2c0      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8005e1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
	break;
 8005e20:	e2b9      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8005e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	break;
 8005e2e:	e2b2      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 8005e36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
	break;
 8005e3c:	e2ab      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005e44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
	break;
 8005e4a:	e2a4      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8005e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	break;
 8005e58:	e29d      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8005e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	break;
 8005e66:	e296      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8005e6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
	break;
 8005e74:	e28f      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8005e7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
	break;
 8005e82:	e288      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8005e8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
	break;
 8005e90:	e281      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 8005e98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
	break;
 8005e9e:	e27a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8005ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
	break;
 8005eac:	e273      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8005eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	break;
 8005eba:	e26c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8005ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	break;
 8005ec8:	e265      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8005ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
	break;
 8005ed6:	e25e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	break;
 8005ee4:	e257      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8005eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
	break;
 8005ef2:	e250      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
	break;
 8005f00:	e249      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8005f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
	break;
 8005f0e:	e242      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005f16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	break;
 8005f1c:	e23b      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005f24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
	break;
 8005f2a:	e234      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
	break;
 8005f38:	e22d      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8005f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	break;
 8005f46:	e226      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8005f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	break;
 8005f54:	e21f      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8005f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	break;
 8005f62:	e218      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8005f6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
	break;
 8005f70:	e211      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8005f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	break;
 8005f7e:	e20a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f86:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 8005f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	601a      	str	r2, [r3, #0]
	break;
 8005f90:	e201      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f98:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 8005f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
	break;
 8005fa2:	e1f8      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005faa:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005fae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
	break;
 8005fb4:	e1ef      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fbc:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8005fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
	break;
 8005fc6:	e1e6      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fce:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 8005fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
	break;
 8005fd8:	e1dd      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe0:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8005fe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
	break;
 8005fea:	e1d4      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff2:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8005ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
	break;
 8005ffc:	e1cb      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006004:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8006008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	break;
 800600e:	e1c2      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006016:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800601a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	break;
 8006020:	e1b9      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006028:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 800602c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
	break;
 8006032:	e1b0      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 800603e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
	break;
 8006044:	e1a7      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800604c:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8006050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
	break;
 8006056:	e19e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800605e:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 8006062:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
	break;
 8006068:	e195      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006070:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	break;
 800607a:	e18c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006086:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
	break;
 800608c:	e183      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006094:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	break;
 800609e:	e17a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80060aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
	break;
 80060b0:	e171      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b8:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 80060bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
	break;
 80060c2:	e168      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ca:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 80060ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
	break;
 80060d4:	e15f      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80060dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
	break;
 80060e2:	e158      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80060ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
	break;
 80060f0:	e151      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 80060f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
	break;
 80060fe:	e14a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8006106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
	break;
 800610c:	e143      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8006114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
	break;
 800611a:	e13c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	break;
 8006128:	e135      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8006130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
	break;
 8006136:	e12e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
	break;
 8006148:	e125      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8006150:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
	break;
 8006156:	e11e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 800615e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
	break;
 8006164:	e117      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 800616c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
	break;
 8006172:	e110      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 800617a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
	break;
 8006180:	e109      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 8006188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
	break;
 800618e:	e102      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 8006196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	break;
 800619c:	e0fb      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 80061a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
	break;
 80061aa:	e0f4      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 80061b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
	break;
 80061b8:	e0ed      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 80061c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	break;
 80061c6:	e0e6      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 80061ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	break;
 80061d4:	e0df      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 80061dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	break;
 80061e2:	e0d8      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e0d1      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 80061f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	break;
 80061fe:	e0ca      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e0c3      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 8006214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
	break;
 800621a:	e0bc      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 8006222:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	break;
 8006228:	e0b5      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 8006230:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	break;
 8006236:	e0ae      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 800623e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
	break;
 8006244:	e0a7      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 800624c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
	break;
 8006252:	e0a0      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 800625a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	break;
 8006260:	e099      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 8006268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
	break;
 800626e:	e092      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 8006276:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	break;
 800627c:	e08b      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 8006284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	break;
 800628a:	e084      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 8006292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
	break;
 8006298:	e07d      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 80062a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	break;
 80062a6:	e076      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 80062ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	break;
 80062b4:	e06f      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 80062bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	break;
 80062c2:	e068      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 80062ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
	break;
 80062d0:	e061      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 80062d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	break;
 80062de:	e05a      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 80062e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
	break;
 80062ec:	e053      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 80062f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	break;
 80062fa:	e04c      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 8006302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
	break;
 8006308:	e045      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8006310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	break;
 8006316:	e03e      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 800631e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	break;
 8006324:	e037      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 800632c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	break;
 8006332:	e030      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 800633a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	break;
 8006340:	e029      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 8006348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	break;
 800634e:	e022      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 8006356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	break;
 800635c:	e01b      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 8006364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
	break;
 800636a:	e014      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 8006372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
	break;
 8006378:	e00d      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 8006380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	break;
 8006386:	e006      	b.n	8006396 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800638e:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006390:	23fc      	movs	r3, #252	@ 0xfc
 8006392:	77fb      	strb	r3, [r7, #31]
	break;
 8006394:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006396:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3724      	adds	r7, #36	@ 0x24
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3318      	adds	r3, #24
 80063b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80063c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3318      	adds	r3, #24
 80063e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80063f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3318      	adds	r3, #24
 8006414:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8006422:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3318      	adds	r3, #24
 8006442:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8006450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3318      	adds	r3, #24
 8006470:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3318      	adds	r3, #24
 800649e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 80064ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2208      	movs	r2, #8
 80064cc:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	220b      	movs	r2, #11
 80064d2:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064da:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80064e2:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80064ea:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80064f2:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80064f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2212      	movs	r2, #18
 800651a:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	220f      	movs	r2, #15
 8006520:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800652e:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	220c      	movs	r2, #12
 8006534:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	895b      	ldrh	r3, [r3, #10]
 8006558:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	895b      	ldrh	r3, [r3, #10]
 8006576:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2200      	movs	r2, #0
 800659a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2240      	movs	r2, #64	@ 0x40
 80065a0:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10d      	bne.n	80065c6 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d108      	bne.n	80065c6 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2200      	movs	r2, #0
 80065c2:	741a      	strb	r2, [r3, #16]
 80065c4:	e002      	b.n	80065cc <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d114      	bne.n	80065fe <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d110      	bne.n	80065fe <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	7d9b      	ldrb	r3, [r3, #22]
 80065f0:	f001 ff94 	bl	800851c <VL53LX_calc_range_ignore_threshold>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	831a      	strh	r2, [r3, #24]
 80065fc:	e002      	b.n	8006604 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800660a:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2232      	movs	r2, #50	@ 0x32
 8006610:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006618:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	228c      	movs	r2, #140	@ 0x8c
 800661e:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006620:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800663e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006646:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2207      	movs	r2, #7
 800664c:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006654:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f242 7210 	movw	r2, #10000	@ 0x2710
 800665c:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8006664:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2246      	movs	r2, #70	@ 0x46
 800666a:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006672:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	228c      	movs	r2, #140	@ 0x8c
 8006678:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800669c:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80066a4:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80066ac:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80066b4:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2208      	movs	r2, #8
 80066ba:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2228      	movs	r2, #40	@ 0x28
 80066c0:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2209      	movs	r2, #9
 80066c6:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80066c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80066ea:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80066f2:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066fa:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006702:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2210      	movs	r2, #16
 8006708:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2208      	movs	r2, #8
 800670e:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2204      	movs	r2, #4
 8006734:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2202      	movs	r2, #2
 8006746:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2250      	movs	r2, #80	@ 0x50
 8006752:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2264      	movs	r2, #100	@ 0x64
 8006758:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f241 023d 	movw	r2, #4157	@ 0x103d
 8006760:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2210      	movs	r2, #16
 8006766:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2232      	movs	r2, #50	@ 0x32
 800676c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2264      	movs	r2, #100	@ 0x64
 8006772:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	22b4      	movs	r2, #180	@ 0xb4
 800677e:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 800678c:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2288      	movs	r2, #136	@ 0x88
 800679a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2208      	movs	r2, #8
 80067a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b4:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2200      	movs	r2, #0
 80067ba:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	79fa      	ldrb	r2, [r7, #7]
 80067c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 80067ca:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2232      	movs	r2, #50	@ 0x32
 80067d0:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067d8:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	228c      	movs	r2, #140	@ 0x8c
 80067de:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2250      	movs	r2, #80	@ 0x50
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2232      	movs	r2, #50	@ 0x32
 80067ec:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80067ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	221e      	movs	r2, #30
 800680e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	220e      	movs	r2, #14
 8006814:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f642 7294 	movw	r2, #12180	@ 0x2f94
 800681c:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220e      	movs	r2, #14
 8006822:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	220a      	movs	r2, #10
 8006828:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2206      	movs	r2, #6
 800682e:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	220e      	movs	r2, #14
 8006834:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	220a      	movs	r2, #10
 800683a:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2206      	movs	r2, #6
 8006840:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2209      	movs	r2, #9
 8006846:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2205      	movs	r2, #5
 800684c:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2203      	movs	r2, #3
 8006852:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2206      	movs	r2, #6
 8006858:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2206      	movs	r2, #6
 800685e:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2206      	movs	r2, #6
 8006864:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2221      	movs	r2, #33	@ 0x21
 8006870:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	223c      	movs	r2, #60	@ 0x3c
 8006882:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	223c      	movs	r2, #60	@ 0x3c
 8006888:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	223c      	movs	r2, #60	@ 0x3c
 800688e:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2280      	movs	r2, #128	@ 0x80
 8006894:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2280      	movs	r2, #128	@ 0x80
 800689a:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2280      	movs	r2, #128	@ 0x80
 80068a0:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2210      	movs	r2, #16
 80068ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80068e8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f640 22be 	movw	r2, #2750	@ 0xabe
 80068f2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	22fa      	movs	r2, #250	@ 0xfa
 80068fa:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006904:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800690e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006918:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006922:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800692c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006936:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	22c8      	movs	r2, #200	@ 0xc8
 800693e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f640 1238 	movw	r2, #2360	@ 0x938
 8006948:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f640 1247 	movw	r2, #2375	@ 0x947
 800695a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f640 4235 	movw	r2, #3125	@ 0xc35
 8006964:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f241 2270 	movw	r2, #4720	@ 0x1270
 800696e:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8006978:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f241 228e 	movw	r2, #4750	@ 0x128e
 8006982:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 800698c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	22fa      	movs	r2, #250	@ 0xfa
 80069a4:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80069ae:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 80069b8:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f241 1294 	movw	r2, #4500	@ 0x1194
 80069c2:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f64f 7238 	movw	r2, #65336	@ 0xff38
 80069cc:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	22c8      	movs	r2, #200	@ 0xc8
 80069d4:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f640 720a 	movw	r2, #3850	@ 0xf0a
 80069fe:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8006a08:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006a12:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a54:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006a64:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006a6c:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a74:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a84:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a8c:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a94:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f241 7270 	movw	r2, #6000	@ 0x1770
 8006aa4:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aac:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ab4:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ac4:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006acc:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006ad4:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006adc:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ae4:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006aec:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006afa:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8006b02:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2206      	movs	r2, #6
 8006b22:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006b48:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2238      	movs	r2, #56	@ 0x38
 8006b4e:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2270      	movs	r2, #112	@ 0x70
 8006b5a:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2210      	movs	r2, #16
 8006b60:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2264      	movs	r2, #100	@ 0x64
 8006b66:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b6e:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220f      	movs	r2, #15
 8006b74:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2234      	movs	r2, #52	@ 0x34
 8006b7a:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22c8      	movs	r2, #200	@ 0xc8
 8006b80:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006b88:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006b90:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bba:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2211      	movs	r2, #17
 8006bfc:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2202      	movs	r2, #2
 8006c02:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2208      	movs	r2, #8
 8006c14:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c28:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	22ff      	movs	r2, #255	@ 0xff
 8006c56:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	220b      	movs	r2, #11
 8006c90:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	220d      	movs	r2, #13
 8006ca4:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8006ccc:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2238      	movs	r2, #56	@ 0x38
 8006cd8:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	22ff      	movs	r2, #255	@ 0xff
 8006cde:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	221a      	movs	r2, #26
 8006cf0:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2201      	movs	r2, #1
 8006d02:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	22cc      	movs	r2, #204	@ 0xcc
 8006d08:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	220b      	movs	r2, #11
 8006d0e:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	22f5      	movs	r2, #245	@ 0xf5
 8006d1a:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2209      	movs	r2, #9
 8006d20:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2208      	movs	r2, #8
 8006d36:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2278      	movs	r2, #120	@ 0x78
 8006d3c:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2200      	movs	r2, #0
 8006d42:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2221      	movs	r2, #33	@ 0x21
 8006d54:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2243      	movs	r2, #67	@ 0x43
 8006d5a:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2232      	movs	r2, #50	@ 0x32
 8006d66:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2254      	movs	r2, #84	@ 0x54
 8006d6c:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2207      	movs	r2, #7
 8006d72:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2221      	movs	r2, #33	@ 0x21
 8006d78:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2243      	movs	r2, #67	@ 0x43
 8006d7e:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2210      	movs	r2, #16
 8006d84:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2243      	movs	r2, #67	@ 0x43
 8006d90:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2205      	movs	r2, #5
 8006d96:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2207      	movs	r2, #7
 8006da2:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2221      	movs	r2, #33	@ 0x21
 8006da8:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2243      	movs	r2, #67	@ 0x43
 8006dae:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2210      	movs	r2, #16
 8006db4:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2232      	movs	r2, #50	@ 0x32
 8006dba:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2254      	movs	r2, #84	@ 0x54
 8006dc0:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006dc8:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006dd0:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	2205      	movs	r2, #5
 8006ddc:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	2200      	movs	r2, #0
 8006de2:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	220f      	movs	r2, #15
 8006de8:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	220f      	movs	r2, #15
 8006dee:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	2208      	movs	r2, #8
 8006df4:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df8:	2208      	movs	r2, #8
 8006dfa:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	2200      	movs	r2, #0
 8006e06:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	2200      	movs	r2, #0
 8006e12:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	220b      	movs	r2, #11
 8006e22:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2209      	movs	r2, #9
 8006e28:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	22c7      	movs	r2, #199	@ 0xc7
 8006e58:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	22ff      	movs	r2, #255	@ 0xff
 8006e5e:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	22db      	movs	r2, #219	@ 0xdb
 8006e64:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	2200      	movs	r2, #0
 8006e70:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	2201      	movs	r2, #1
 8006e76:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b090      	sub	sp, #64	@ 0x40
 8006e98:	af0a      	add	r7, sp, #40	@ 0x28
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	9302      	str	r3, [sp, #8]
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	68b8      	ldr	r0, [r7, #8]
 8006ebe:	f7ff fe70 	bl	8006ba2 <VL53LX_preset_mode_standard_ranging>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d171      	bne.n	8006fb2 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006ed4:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	9308      	str	r3, [sp, #32]
 8006eda:	2305      	movs	r3, #5
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	2304      	movs	r3, #4
 8006ee0:	9306      	str	r3, [sp, #24]
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	9304      	str	r3, [sp, #16]
 8006eea:	2301      	movs	r3, #1
 8006eec:	9303      	str	r3, [sp, #12]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9302      	str	r3, [sp, #8]
 8006ef2:	2304      	movs	r3, #4
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2302      	movs	r3, #2
 8006efc:	2201      	movs	r2, #1
 8006efe:	2100      	movs	r1, #0
 8006f00:	2007      	movs	r0, #7
 8006f02:	f000 ff9f 	bl	8007e44 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	3302      	adds	r3, #2
 8006f0a:	9308      	str	r3, [sp, #32]
 8006f0c:	2305      	movs	r3, #5
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	2304      	movs	r3, #4
 8006f12:	9306      	str	r3, [sp, #24]
 8006f14:	2303      	movs	r3, #3
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	2300      	movs	r3, #0
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	2304      	movs	r3, #4
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	2303      	movs	r3, #3
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2100      	movs	r1, #0
 8006f32:	2007      	movs	r0, #7
 8006f34:	f001 f816 	bl	8007f64 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2209      	movs	r2, #9
 8006f3c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	220b      	movs	r2, #11
 8006f42:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	2209      	movs	r2, #9
 8006f48:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	220b      	movs	r2, #11
 8006f4e:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	221a      	movs	r2, #26
 8006f66:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	2228      	movs	r2, #40	@ 0x28
 8006f72:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2200      	movs	r2, #0
 8006f78:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2221      	movs	r2, #33	@ 0x21
 8006f7e:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	22f5      	movs	r2, #245	@ 0xf5
 8006f84:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2288      	movs	r2, #136	@ 0x88
 8006f92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9e6 	bl	8007372 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	229b      	movs	r2, #155	@ 0x9b
 8006faa:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fae:	2226      	movs	r2, #38	@ 0x26
 8006fb0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b090      	sub	sp, #64	@ 0x40
 8006fc2:	af0a      	add	r7, sp, #40	@ 0x28
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff ff52 	bl	8006e94 <VL53LX_preset_mode_histogram_ranging>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d178      	bne.n	80070ee <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	9308      	str	r3, [sp, #32]
 8007000:	2305      	movs	r3, #5
 8007002:	9307      	str	r3, [sp, #28]
 8007004:	2304      	movs	r3, #4
 8007006:	9306      	str	r3, [sp, #24]
 8007008:	2303      	movs	r3, #3
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	2302      	movs	r3, #2
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	2301      	movs	r3, #1
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	2300      	movs	r3, #0
 8007016:	9302      	str	r3, [sp, #8]
 8007018:	2304      	movs	r3, #4
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	2303      	movs	r3, #3
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2302      	movs	r3, #2
 8007022:	2201      	movs	r2, #1
 8007024:	2100      	movs	r1, #0
 8007026:	2007      	movs	r0, #7
 8007028:	f000 ff0c 	bl	8007e44 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	3302      	adds	r3, #2
 8007030:	9308      	str	r3, [sp, #32]
 8007032:	2305      	movs	r3, #5
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	2304      	movs	r3, #4
 8007038:	9306      	str	r3, [sp, #24]
 800703a:	2303      	movs	r3, #3
 800703c:	9305      	str	r3, [sp, #20]
 800703e:	2302      	movs	r3, #2
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	2301      	movs	r3, #1
 8007044:	9303      	str	r3, [sp, #12]
 8007046:	2300      	movs	r3, #0
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	2304      	movs	r3, #4
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	2303      	movs	r3, #3
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2302      	movs	r3, #2
 8007054:	2201      	movs	r2, #1
 8007056:	2100      	movs	r1, #0
 8007058:	2007      	movs	r0, #7
 800705a:	f000 ff83 	bl	8007f64 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f982 	bl	8007372 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2209      	movs	r2, #9
 8007072:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	220b      	movs	r2, #11
 8007078:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2221      	movs	r2, #33	@ 0x21
 8007084:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	2200      	movs	r2, #0
 800708a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	221b      	movs	r2, #27
 8007090:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	2200      	movs	r2, #0
 8007096:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	2229      	movs	r2, #41	@ 0x29
 800709c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2200      	movs	r2, #0
 80070a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	2222      	movs	r2, #34	@ 0x22
 80070a8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2209      	movs	r2, #9
 80070ae:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	22f5      	movs	r2, #245	@ 0xf5
 80070b4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	2209      	movs	r2, #9
 80070ba:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	220b      	movs	r2, #11
 80070c0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80070ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070cc:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2208      	movs	r2, #8
 80070d6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2288      	movs	r2, #136	@ 0x88
 80070de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	229b      	movs	r2, #155	@ 0x9b
 80070e6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	2226      	movs	r2, #38	@ 0x26
 80070ec:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80070ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b090      	sub	sp, #64	@ 0x40
 80070fe:	af0a      	add	r7, sp, #40	@ 0x28
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	9304      	str	r3, [sp, #16]
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	9302      	str	r3, [sp, #8]
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff feb4 	bl	8006e94 <VL53LX_preset_mode_histogram_ranging>
 800712c:	4603      	mov	r3, r0
 800712e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d178      	bne.n	800722a <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	9308      	str	r3, [sp, #32]
 800713c:	2303      	movs	r3, #3
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	2302      	movs	r3, #2
 8007142:	9306      	str	r3, [sp, #24]
 8007144:	2301      	movs	r3, #1
 8007146:	9305      	str	r3, [sp, #20]
 8007148:	2302      	movs	r3, #2
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	2301      	movs	r3, #1
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	2300      	movs	r3, #0
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	2302      	movs	r3, #2
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	2302      	movs	r3, #2
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2301      	movs	r3, #1
 800715e:	2201      	movs	r2, #1
 8007160:	2100      	movs	r1, #0
 8007162:	2007      	movs	r0, #7
 8007164:	f000 fe6e 	bl	8007e44 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	3302      	adds	r3, #2
 800716c:	9308      	str	r3, [sp, #32]
 800716e:	2303      	movs	r3, #3
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	2302      	movs	r3, #2
 8007174:	9306      	str	r3, [sp, #24]
 8007176:	2301      	movs	r3, #1
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	2302      	movs	r3, #2
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	2301      	movs	r3, #1
 8007180:	9303      	str	r3, [sp, #12]
 8007182:	2300      	movs	r3, #0
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	2302      	movs	r3, #2
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	2302      	movs	r3, #2
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	2301      	movs	r3, #1
 8007190:	2201      	movs	r2, #1
 8007192:	2100      	movs	r1, #0
 8007194:	2007      	movs	r0, #7
 8007196:	f000 fee5 	bl	8007f64 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8e4 	bl	8007372 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2205      	movs	r2, #5
 80071ae:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	2207      	movs	r2, #7
 80071b4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	2200      	movs	r2, #0
 80071ba:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2236      	movs	r2, #54	@ 0x36
 80071c0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	2200      	movs	r2, #0
 80071c6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2228      	movs	r2, #40	@ 0x28
 80071cc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	2200      	movs	r2, #0
 80071d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2244      	movs	r2, #68	@ 0x44
 80071d8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	2200      	movs	r2, #0
 80071de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2233      	movs	r2, #51	@ 0x33
 80071e4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2205      	movs	r2, #5
 80071ea:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	22f5      	movs	r2, #245	@ 0xf5
 80071f0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	2205      	movs	r2, #5
 80071f6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	2207      	movs	r2, #7
 80071fc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2208      	movs	r2, #8
 8007212:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2248      	movs	r2, #72	@ 0x48
 800721a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	229b      	movs	r2, #155	@ 0x9b
 8007222:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	2226      	movs	r2, #38	@ 0x26
 8007228:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800722a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b090      	sub	sp, #64	@ 0x40
 800723a:	af0a      	add	r7, sp, #40	@ 0x28
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007244:	2300      	movs	r3, #0
 8007246:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724e:	9303      	str	r3, [sp, #12]
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff fe16 	bl	8006e94 <VL53LX_preset_mode_histogram_ranging>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800726c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d178      	bne.n	8007366 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	2302      	movs	r3, #2
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	2302      	movs	r3, #2
 800727e:	9306      	str	r3, [sp, #24]
 8007280:	2301      	movs	r3, #1
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	2301      	movs	r3, #1
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	2301      	movs	r3, #1
 800728a:	9303      	str	r3, [sp, #12]
 800728c:	2300      	movs	r3, #0
 800728e:	9302      	str	r3, [sp, #8]
 8007290:	2301      	movs	r3, #1
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	2301      	movs	r3, #1
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2301      	movs	r3, #1
 800729a:	2200      	movs	r2, #0
 800729c:	2107      	movs	r1, #7
 800729e:	2007      	movs	r0, #7
 80072a0:	f000 fdd0 	bl	8007e44 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a6:	3302      	adds	r3, #2
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	2302      	movs	r3, #2
 80072ac:	9307      	str	r3, [sp, #28]
 80072ae:	2302      	movs	r3, #2
 80072b0:	9306      	str	r3, [sp, #24]
 80072b2:	2301      	movs	r3, #1
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	2301      	movs	r3, #1
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	2301      	movs	r3, #1
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	2300      	movs	r3, #0
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	2301      	movs	r3, #1
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	2301      	movs	r3, #1
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2301      	movs	r3, #1
 80072cc:	2200      	movs	r2, #0
 80072ce:	2107      	movs	r1, #7
 80072d0:	2007      	movs	r0, #7
 80072d2:	f000 fe47 	bl	8007f64 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f846 	bl	8007372 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2203      	movs	r2, #3
 80072ea:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2205      	movs	r2, #5
 80072f0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2252      	movs	r2, #82	@ 0x52
 80072fc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2200      	movs	r2, #0
 8007302:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2237      	movs	r2, #55	@ 0x37
 8007308:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	2200      	movs	r2, #0
 800730e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2266      	movs	r2, #102	@ 0x66
 8007314:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	2200      	movs	r2, #0
 800731a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	2244      	movs	r2, #68	@ 0x44
 8007320:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2203      	movs	r2, #3
 8007326:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	22f5      	movs	r2, #245	@ 0xf5
 800732c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	2203      	movs	r2, #3
 8007332:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	2205      	movs	r2, #5
 8007338:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2208      	movs	r2, #8
 800734e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2228      	movs	r2, #40	@ 0x28
 8007356:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	22bb      	movs	r2, #187	@ 0xbb
 800735e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	2226      	movs	r2, #38	@ 0x26
 8007364:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	7a12      	ldrb	r2, [r2, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	7892      	ldrb	r2, [r2, #2]
 8007400:	4413      	add	r3, r2
 8007402:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	7912      	ldrb	r2, [r2, #4]
 8007414:	4413      	add	r3, r2
 8007416:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	7a12      	ldrb	r2, [r2, #8]
 8007498:	4413      	add	r3, r2
 800749a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	7892      	ldrb	r2, [r2, #2]
 80074d4:	4413      	add	r3, r2
 80074d6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	7912      	ldrb	r2, [r2, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3318      	adds	r3, #24
 8007518:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3318      	adds	r3, #24
 8007554:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	332c      	adds	r3, #44	@ 0x2c
 800755a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2202      	movs	r2, #2
 800756c:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2200      	movs	r2, #0
 8007584:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2202      	movs	r2, #2
 800758a:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	735a      	strb	r2, [r3, #13]

}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3318      	adds	r3, #24
 80075b4:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	332c      	adds	r3, #44	@ 0x2c
 80075ba:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80075c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d115      	bne.n	80075f6 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2203      	movs	r2, #3
 80075ce:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2202      	movs	r2, #2
 80075e6:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	735a      	strb	r2, [r3, #13]
 80075f4:	e0be      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	7a1b      	ldrb	r3, [r3, #8]
 80075fa:	2bff      	cmp	r3, #255	@ 0xff
 80075fc:	d103      	bne.n	8007606 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2280      	movs	r2, #128	@ 0x80
 8007602:	721a      	strb	r2, [r3, #8]
 8007604:	e005      	b.n	8007612 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	7a1b      	ldrb	r3, [r3, #8]
 800760a:	3301      	adds	r3, #1
 800760c:	b2da      	uxtb	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	7a19      	ldrb	r1, [r3, #8]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f103 0209 	add.w	r2, r3, #9
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	330a      	adds	r3, #10
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f002 fdba 	bl	800a19a <VL53LX_update_internal_stream_counters>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	7adb      	ldrb	r3, [r3, #11]
 800762e:	f083 0302 	eor.w	r3, r3, #2
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	79db      	ldrb	r3, [r3, #7]
 800763c:	3b03      	subs	r3, #3
 800763e:	2b05      	cmp	r3, #5
 8007640:	f200 8082 	bhi.w	8007748 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007665 	.word	0x08007665
 8007650:	08007749 	.word	0x08007749
 8007654:	08007749 	.word	0x08007749
 8007658:	080076b7 	.word	0x080076b7
 800765c:	080076ed 	.word	0x080076ed
 8007660:	08007717 	.word	0x08007717

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	dd03      	ble.n	800767a <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2206      	movs	r2, #6
 8007676:	71da      	strb	r2, [r3, #7]
 8007678:	e00d      	b.n	8007696 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8007684:	429a      	cmp	r2, r3
 8007686:	d303      	bcc.n	8007690 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2208      	movs	r2, #8
 800768c:	71da      	strb	r2, [r3, #7]
 800768e:	e002      	b.n	8007696 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2207      	movs	r2, #7
 8007694:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	735a      	strb	r2, [r3, #13]

			break;
 80076b4:	e05e      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80076d8:	429a      	cmp	r2, r3
 80076da:	d303      	bcc.n	80076e4 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2208      	movs	r2, #8
 80076e0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80076e2:	e047      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2207      	movs	r2, #7
 80076e8:	71da      	strb	r2, [r3, #7]
			break;
 80076ea:	e043      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	7b5b      	ldrb	r3, [r3, #13]
 80076f0:	3301      	adds	r3, #1
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007702:	429a      	cmp	r2, r3
 8007704:	d303      	bcc.n	800770e <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2208      	movs	r2, #8
 800770a:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800770c:	e032      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2207      	movs	r2, #7
 8007712:	71da      	strb	r2, [r3, #7]
			break;
 8007714:	e02e      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	7b1b      	ldrb	r3, [r3, #12]
 8007720:	f083 0301 	eor.w	r3, r3, #1
 8007724:	b2da      	uxtb	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007734:	429a      	cmp	r2, r3
 8007736:	d303      	bcc.n	8007740 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2208      	movs	r2, #8
 800773c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800773e:	e019      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2207      	movs	r2, #7
 8007744:	71da      	strb	r2, [r3, #7]
			break;
 8007746:	e015      	b.n	8007774 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2203      	movs	r2, #3
 800774c:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2202      	movs	r2, #2
 8007764:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	735a      	strb	r2, [r3, #13]
			break;
 8007772:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007780:	b480      	push	{r7}
 8007782:	b08d      	sub	sp, #52	@ 0x34
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007788:	2300      	movs	r3, #0
 800778a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3318      	adds	r3, #24
 8007792:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	332c      	adds	r3, #44	@ 0x2c
 80077a0:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	f203 3366 	addw	r3, r3, #870	@ 0x366
 80077a8:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80077aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ac:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80077b0:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80077b8:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80077e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e6:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80077ea:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
	histogram_mode =
 80077f8:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80077fe:	111b      	asrs	r3, r3, #4
 8007800:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 800780a:	7c7b      	ldrb	r3, [r7, #17]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007816:	111b      	asrs	r3, r3, #4
 8007818:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d04e      	beq.n	80078ce <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	79db      	ldrb	r3, [r3, #7]
 8007834:	2b06      	cmp	r3, #6
 8007836:	d109      	bne.n	800784c <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007838:	7c7b      	ldrb	r3, [r7, #17]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d14a      	bne.n	80078d4 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800783e:	7cfb      	ldrb	r3, [r7, #19]
 8007840:	2b12      	cmp	r3, #18
 8007842:	d047      	beq.n	80078d4 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007844:	23ef      	movs	r3, #239	@ 0xef
 8007846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800784a:	e043      	b.n	80078d4 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	7a1b      	ldrb	r3, [r3, #8]
 8007850:	7cba      	ldrb	r2, [r7, #18]
 8007852:	429a      	cmp	r2, r3
 8007854:	d002      	beq.n	800785c <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007856:	23ee      	movs	r3, #238	@ 0xee
 8007858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	7adb      	ldrb	r3, [r3, #11]
 8007860:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007864:	429a      	cmp	r2, r3
 8007866:	d002      	beq.n	800786e <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007868:	23ed      	movs	r3, #237	@ 0xed
 800786a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	7b5b      	ldrb	r3, [r3, #13]
 8007872:	4619      	mov	r1, r3
		expected_stream_count =
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	460b      	mov	r3, r1
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4413      	add	r3, r2
 8007880:	3302      	adds	r3, #2
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	7b5b      	ldrb	r3, [r3, #13]
 800788a:	4619      	mov	r1, r3
		expected_gph_id =
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	460b      	mov	r3, r1
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	440b      	add	r3, r1
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	3303      	adds	r3, #3
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800789e:	7c3a      	ldrb	r2, [r7, #16]
 80078a0:	7cbb      	ldrb	r3, [r7, #18]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d00a      	beq.n	80078bc <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <VL53LX_check_ll_driver_rd_state+0x136>
 80078b0:	7cbb      	ldrb	r3, [r7, #18]
 80078b2:	2bff      	cmp	r3, #255	@ 0xff
 80078b4:	d002      	beq.n	80078bc <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 80078b6:	23ec      	movs	r3, #236	@ 0xec
 80078b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 80078bc:	7bfa      	ldrb	r2, [r7, #15]
 80078be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d005      	beq.n	80078d2 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80078c6:	23eb      	movs	r3, #235	@ 0xeb
 80078c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80078cc:	e002      	b.n	80078d4 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 80078d2:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80078d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3734      	adds	r7, #52	@ 0x34
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3318      	adds	r3, #24
 80078f4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80078fc:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	332c      	adds	r3, #44	@ 0x2c
 8007902:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800790a:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d11b      	bne.n	8007952 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2203      	movs	r2, #3
 800791e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2200      	movs	r2, #0
 8007924:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2200      	movs	r2, #0
 800792a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2200      	movs	r2, #0
 8007930:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2202      	movs	r2, #2
 8007936:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2200      	movs	r2, #0
 8007942:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	773b      	strb	r3, [r7, #28]
 8007950:	e0b1      	b.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	799b      	ldrb	r3, [r3, #6]
 800795c:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2bff      	cmp	r3, #255	@ 0xff
 800796a:	d103      	bne.n	8007974 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2280      	movs	r2, #128	@ 0x80
 8007970:	705a      	strb	r2, [r3, #1]
 8007972:	e005      	b.n	8007980 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	7859      	ldrb	r1, [r3, #1]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	3303      	adds	r3, #3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 fc04 	bl	800a19a <VL53LX_update_internal_stream_counters>
 8007992:	4603      	mov	r3, r0
 8007994:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	f083 0302 	eor.w	r3, r3, #2
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b05      	cmp	r3, #5
 80079aa:	d053      	beq.n	8007a54 <VL53LX_update_ll_driver_cfg_state+0x170>
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	dc69      	bgt.n	8007a84 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d002      	beq.n	80079ba <VL53LX_update_ll_driver_cfg_state+0xd6>
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d02d      	beq.n	8007a14 <VL53LX_update_ll_driver_cfg_state+0x130>
 80079b8:	e064      	b.n	8007a84 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2201      	movs	r2, #1
 80079be:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d909      	bls.n	80079e2 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2200      	movs	r2, #0
 80079d2:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	795b      	ldrb	r3, [r3, #5]
 80079d8:	f083 0301 	eor.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2201      	movs	r2, #1
 80079e6:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2201      	movs	r2, #1
 80079f6:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2200      	movs	r2, #0
 80079fc:	70da      	strb	r2, [r3, #3]
 80079fe:	e005      	b.n	8007a0c <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2200      	movs	r2, #0
 8007a04:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2204      	movs	r2, #4
 8007a10:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007a12:	e050      	b.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	799b      	ldrb	r3, [r3, #6]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d940      	bls.n	8007ab0 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2200      	movs	r2, #0
 8007a32:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	795b      	ldrb	r3, [r3, #5]
 8007a38:	f083 0301 	eor.w	r3, r3, #1
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d031      	beq.n	8007ab0 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2205      	movs	r2, #5
 8007a50:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007a52:	e02d      	b.n	8007ab0 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	799b      	ldrb	r3, [r3, #6]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d922      	bls.n	8007ab4 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2200      	movs	r2, #0
 8007a72:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	795b      	ldrb	r3, [r3, #5]
 8007a78:	f083 0301 	eor.w	r3, r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007a82:	e017      	b.n	8007ab4 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2203      	movs	r2, #3
 8007a88:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2200      	movs	r2, #0
 8007a94:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	719a      	strb	r2, [r3, #6]
			break;
 8007aae:	e002      	b.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007ab4:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11d      	bne.n	8007afc <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007ac0:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007ac2:	7f3b      	ldrb	r3, [r7, #28]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b2d8      	uxtb	r0, r3
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	7b5b      	ldrb	r3, [r3, #13]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	7f7b      	ldrb	r3, [r7, #29]
 8007ae2:	f083 0302 	eor.w	r3, r3, #2
 8007ae6:	b2d8      	uxtb	r0, r3
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	460b      	mov	r3, r1
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	4413      	add	r3, r2
 8007af4:	3303      	adds	r3, #3
 8007af6:	4602      	mov	r2, r0
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e013      	b.n	8007b24 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007afc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007afe:	68f9      	ldr	r1, [r7, #12]
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	440b      	add	r3, r1
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	7f3a      	ldrb	r2, [r7, #28]
 8007b0e:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007b10:	7fba      	ldrb	r2, [r7, #30]
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3303      	adds	r3, #3
 8007b20:	7f7a      	ldrb	r2, [r7, #29]
 8007b22:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3720      	adds	r7, #32
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7c1a      	ldrb	r2, [r3, #16]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	7c52      	ldrb	r2, [r2, #17]
 8007b4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	7c92      	ldrb	r2, [r2, #18]
 8007b54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	3303      	adds	r3, #3
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	7cd2      	ldrb	r2, [r2, #19]
 8007b5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	3304      	adds	r3, #4
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7d12      	ldrb	r2, [r2, #20]
 8007b68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	3305      	adds	r3, #5
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	7d52      	ldrb	r2, [r2, #21]
 8007b72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	3306      	adds	r3, #6
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7d92      	ldrb	r2, [r2, #22]
 8007b7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	3307      	adds	r3, #7
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	7dd2      	ldrb	r2, [r2, #23]
 8007b86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7e12      	ldrb	r2, [r2, #24]
 8007b90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3309      	adds	r3, #9
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	7e52      	ldrb	r2, [r2, #25]
 8007b9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	330a      	adds	r3, #10
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7e92      	ldrb	r2, [r2, #26]
 8007ba4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	330b      	adds	r3, #11
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	7ed2      	ldrb	r2, [r2, #27]
 8007bae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7f12      	ldrb	r2, [r2, #28]
 8007bb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	330d      	adds	r3, #13
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	7f52      	ldrb	r2, [r2, #29]
 8007bc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	330e      	adds	r3, #14
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7f92      	ldrb	r2, [r2, #30]
 8007bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	330f      	adds	r3, #15
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	7fd2      	ldrb	r2, [r2, #31]
 8007bd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	3310      	adds	r3, #16
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007be2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	3311      	adds	r3, #17
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007bee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3312      	adds	r3, #18
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007bfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	3313      	adds	r3, #19
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007c06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007c12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	3315      	adds	r3, #21
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	3316      	adds	r3, #22
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007c2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	3317      	adds	r3, #23
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007c36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3318      	adds	r3, #24
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007c42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	3319      	adds	r3, #25
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007c4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	331a      	adds	r3, #26
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	331b      	adds	r3, #27
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007c66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	331c      	adds	r3, #28
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007c72:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	331d      	adds	r3, #29
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007c7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	331e      	adds	r3, #30
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007c8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	331f      	adds	r3, #31
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007c96:	701a      	strb	r2, [r3, #0]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	22ff      	movs	r2, #255	@ 0xff
 8007cb0:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	22ff      	movs	r2, #255	@ 0xff
 8007cb6:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	22ff      	movs	r2, #255	@ 0xff
 8007cbc:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	22ff      	movs	r2, #255	@ 0xff
 8007cc2:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cca:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cd2:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cda:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ce2:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cea:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cf2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cfa:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d02:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d0a:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d12:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d1a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d22:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d2a:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d32:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d3a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d42:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d4a:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d52:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	22ff      	movs	r2, #255	@ 0xff
 8007d60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2205      	movs	r2, #5
 8007d84:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	e017      	b.n	8007dc2 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	4613      	mov	r3, r2
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3304      	adds	r3, #4
 8007da2:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2203      	movs	r2, #3
 8007dae:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2204      	movs	r2, #4
 8007db4:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	7bfa      	ldrb	r2, [r7, #15]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d3e2      	bcc.n	8007d92 <V53L1_init_zone_results_structure+0x22>
	}
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b087      	sub	sp, #28
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007de8:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007dee:	2305      	movs	r3, #5
 8007df0:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007df8:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]
 8007dfe:	e016      	b.n	8007e2e <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007e00:	7dfa      	ldrb	r2, [r7, #23]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3304      	adds	r3, #4
 8007e10:	2201      	movs	r2, #1
 8007e12:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007e14:	7dfa      	ldrb	r2, [r7, #23]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	440b      	add	r3, r1
 8007e22:	3306      	adds	r3, #6
 8007e24:	2200      	movs	r2, #0
 8007e26:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	75fb      	strb	r3, [r7, #23]
 8007e2e:	7dfa      	ldrb	r2, [r7, #23]
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d3e4      	bcc.n	8007e00 <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007e44:	b490      	push	{r4, r7}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4623      	mov	r3, r4
 8007e54:	71fb      	strb	r3, [r7, #7]
 8007e56:	4603      	mov	r3, r0
 8007e58:	71bb      	strb	r3, [r7, #6]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	717b      	strb	r3, [r7, #5]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007e62:	79bb      	ldrb	r3, [r7, #6]
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007e72:	793b      	ldrb	r3, [r7, #4]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	797b      	ldrb	r3, [r7, #5]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007e82:	7d3b      	ldrb	r3, [r7, #20]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	7c3b      	ldrb	r3, [r7, #16]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007e92:	7f3b      	ldrb	r3, [r7, #28]
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	7e3b      	ldrb	r3, [r7, #24]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007eae:	4413      	add	r3, r2
 8007eb0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ec2:	4413      	add	r3, r2
 8007ec4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee4:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ef0:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007efe:	4413      	add	r3, r2
 8007f00:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007f0c:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f10:	2200      	movs	r2, #0
 8007f12:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f4a:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f52:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]

}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc90      	pop	{r4, r7}
 8007f62:	4770      	bx	lr

08007f64 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f64:	b490      	push	{r4, r7}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	71fb      	strb	r3, [r7, #7]
 8007f76:	4603      	mov	r3, r0
 8007f78:	71bb      	strb	r3, [r7, #6]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	717b      	strb	r3, [r7, #5]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f82:	79bb      	ldrb	r3, [r7, #6]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007f92:	793b      	ldrb	r3, [r7, #4]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	797b      	ldrb	r3, [r7, #5]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007fa2:	7d3b      	ldrb	r3, [r7, #20]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	7c3b      	ldrb	r3, [r7, #16]
 8007faa:	4413      	add	r3, r2
 8007fac:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	789a      	ldrb	r2, [r3, #2]
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	78da      	ldrb	r2, [r3, #3]
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	789a      	ldrb	r2, [r3, #2]
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	78da      	ldrb	r2, [r3, #3]
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	791a      	ldrb	r2, [r3, #4]
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ff0:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ffe:	4413      	add	r3, r2
 8008000:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800800c:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	2200      	movs	r2, #0
 8008012:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008014:	7f3b      	ldrb	r3, [r7, #28]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	b2da      	uxtb	r2, r3
 800801a:	7e3b      	ldrb	r3, [r7, #24]
 800801c:	4413      	add	r3, r2
 800801e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008024:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	b2da      	uxtb	r2, r3
 800802c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008030:	4413      	add	r3, r2
 8008032:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008038:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	b2da      	uxtb	r2, r3
 8008040:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008044:	4413      	add	r3, r2
 8008046:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	7bda      	ldrb	r2, [r3, #15]
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	7c1a      	ldrb	r2, [r3, #16]
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	7c5a      	ldrb	r2, [r3, #17]
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800806a:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008072:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bc90      	pop	{r4, r7}
 8008082:	4770      	bx	lr

08008084 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	460b      	mov	r3, r1
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220c      	movs	r2, #12
 80080ac:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80080ae:	897b      	ldrh	r3, [r7, #10]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80080e4:	2300      	movs	r3, #0
 80080e6:	82fb      	strh	r3, [r7, #22]
 80080e8:	e015      	b.n	8008116 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80080ea:	8afa      	ldrh	r2, [r7, #22]
 80080ec:	897b      	ldrh	r3, [r7, #10]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d207      	bcs.n	8008102 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80080f2:	8afb      	ldrh	r3, [r7, #22]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	3302      	adds	r3, #2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	e006      	b.n	8008110 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008102:	8afb      	ldrh	r3, [r7, #22]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	3302      	adds	r3, #2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	2200      	movs	r2, #0
 800810e:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008110:	8afb      	ldrh	r3, [r7, #22]
 8008112:	3301      	adds	r3, #1
 8008114:	82fb      	strh	r3, [r7, #22]
 8008116:	8afb      	ldrh	r3, [r7, #22]
 8008118:	2b0b      	cmp	r3, #11
 800811a:	d9e6      	bls.n	80080ea <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	4603      	mov	r3, r0
 8008132:	603a      	str	r2, [r7, #0]
 8008134:	80fb      	strh	r3, [r7, #6]
 8008136:	460b      	mov	r3, r1
 8008138:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008146:	2300      	movs	r3, #0
 8008148:	81fb      	strh	r3, [r7, #14]
 800814a:	e00e      	b.n	800816a <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800814c:	88ba      	ldrh	r2, [r7, #4]
 800814e:	89fb      	ldrh	r3, [r7, #14]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4413      	add	r3, r2
 8008158:	89ba      	ldrh	r2, [r7, #12]
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800815e:	89bb      	ldrh	r3, [r7, #12]
 8008160:	0a1b      	lsrs	r3, r3, #8
 8008162:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008164:	89fb      	ldrh	r3, [r7, #14]
 8008166:	3301      	adds	r3, #1
 8008168:	81fb      	strh	r3, [r7, #14]
 800816a:	89fa      	ldrh	r2, [r7, #14]
 800816c:	88bb      	ldrh	r3, [r7, #4]
 800816e:	429a      	cmp	r2, r3
 8008170:	d3ec      	bcc.n	800814c <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800818c:	2300      	movs	r3, #0
 800818e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008190:	e00a      	b.n	80081a8 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008192:	89fb      	ldrh	r3, [r7, #14]
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	b21a      	sxth	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	1c59      	adds	r1, r3, #1
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b21b      	sxth	r3, r3
 80081a2:	4313      	orrs	r3, r2
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	1e5a      	subs	r2, r3, #1
 80081ac:	80fa      	strh	r2, [r7, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1ef      	bne.n	8008192 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80081b2:	89fb      	ldrh	r3, [r7, #14]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	603a      	str	r2, [r7, #0]
 80081ca:	80fb      	strh	r3, [r7, #6]
 80081cc:	460b      	mov	r3, r1
 80081ce:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80081dc:	2300      	movs	r3, #0
 80081de:	81fb      	strh	r3, [r7, #14]
 80081e0:	e00f      	b.n	8008202 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80081e2:	88ba      	ldrh	r2, [r7, #4]
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4413      	add	r3, r2
 80081ee:	89ba      	ldrh	r2, [r7, #12]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80081f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80081f8:	121b      	asrs	r3, r3, #8
 80081fa:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80081fc:	89fb      	ldrh	r3, [r7, #14]
 80081fe:	3301      	adds	r3, #1
 8008200:	81fb      	strh	r3, [r7, #14]
 8008202:	89fa      	ldrh	r2, [r7, #14]
 8008204:	88bb      	ldrh	r3, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d3eb      	bcc.n	80081e2 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008224:	2300      	movs	r3, #0
 8008226:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b25b      	sxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	da0e      	bge.n	8008250 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8008232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008236:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008238:	e00a      	b.n	8008250 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800823a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	b21a      	sxth	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	6039      	str	r1, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b21b      	sxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	1e5a      	subs	r2, r3, #1
 8008254:	80fa      	strh	r2, [r7, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1ef      	bne.n	800823a <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 800825a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800826a:	b480      	push	{r7}
 800826c:	b087      	sub	sp, #28
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	460b      	mov	r3, r1
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008284:	2300      	movs	r3, #0
 8008286:	82fb      	strh	r3, [r7, #22]
 8008288:	e00e      	b.n	80082a8 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800828a:	897a      	ldrh	r2, [r7, #10]
 800828c:	8afb      	ldrh	r3, [r7, #22]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	4413      	add	r3, r2
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80082a2:	8afb      	ldrh	r3, [r7, #22]
 80082a4:	3301      	adds	r3, #1
 80082a6:	82fb      	strh	r3, [r7, #22]
 80082a8:	8afa      	ldrh	r2, [r7, #22]
 80082aa:	897b      	ldrh	r3, [r7, #10]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d3ec      	bcc.n	800828a <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	4603      	mov	r3, r0
 80082c6:	6039      	str	r1, [r7, #0]
 80082c8:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80082ce:	e007      	b.n	80082e0 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	1e5a      	subs	r2, r3, #1
 80082e4:	80fa      	strh	r2, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1f2      	bne.n	80082d0 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80082ea:	68fb      	ldr	r3, [r7, #12]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b25b      	sxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	da0b      	bge.n	800832a <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
 8008316:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008318:	e007      	b.n	800832a <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	021a      	lsls	r2, r3, #8
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	1c59      	adds	r1, r3, #1
 8008322:	6039      	str	r1, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	80fa      	strh	r2, [r7, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f2      	bne.n	800831a <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008334:	68fb      	ldr	r3, [r7, #12]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 8008352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d107      	bne.n	800836a <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	461a      	mov	r2, r3
 800835e:	2127      	movs	r1, #39	@ 0x27
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f009 f901 	bl	8011568 <VL53LX_WrByte>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800836a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	460b      	mov	r3, r1
 8008380:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3318      	adds	r3, #24
 800838a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 800839a:	461a      	mov	r2, r3
 800839c:	2185      	movs	r1, #133	@ 0x85
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f009 f8e2 	bl	8011568 <VL53LX_WrByte>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80083a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff ffd7 	bl	8008376 <VL53LX_set_firmware_enable_register>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80083cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80083e4:	2100      	movs	r1, #0
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff ffc5 	bl	8008376 <VL53LX_set_firmware_enable_register>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80083f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3318      	adds	r3, #24
 8008410:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8008420:	461a      	mov	r2, r3
 8008422:	2183      	movs	r1, #131	@ 0x83
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f009 f89f 	bl	8011568 <VL53LX_WrByte>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800842e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008446:	2101      	movs	r1, #1
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff ffd7 	bl	80083fc <VL53LX_set_powerforce_register>
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ffc5 	bl	80083fc <VL53LX_set_powerforce_register>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3318      	adds	r3, #24
 8008492:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 80084a2:	461a      	mov	r2, r3
 80084a4:	2186      	movs	r1, #134	@ 0x86
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f009 f85e 	bl	8011568 <VL53LX_WrByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	460a      	mov	r2, r1
 80084c6:	80fb      	strh	r3, [r7, #6]
 80084c8:	4613      	mov	r3, r2
 80084ca:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80084d8:	88fb      	ldrh	r3, [r7, #6]
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 ffcf 	bl	800b47e <VL53LX_calc_pll_period_us>
 80084e0:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80084e2:	797b      	ldrb	r3, [r7, #5]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f003 fbbb 	bl	800bc60 <VL53LX_decode_vcsel_period>
 80084ea:	4603      	mov	r3, r0
 80084ec:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4413      	add	r3, r2
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	099b      	lsrs	r3, r3, #6
 80084fe:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008500:	7cfa      	ldrb	r2, [r7, #19]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	fb02 f303 	mul.w	r3, r2, r3
 8008508:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	099b      	lsrs	r3, r3, #6
 800850e:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008510:	68fb      	ldr	r3, [r7, #12]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800851c:	b480      	push	{r7}
 800851e:	b089      	sub	sp, #36	@ 0x24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	4608      	mov	r0, r1
 8008526:	4611      	mov	r1, r2
 8008528:	461a      	mov	r2, r3
 800852a:	4603      	mov	r3, r0
 800852c:	817b      	strh	r3, [r7, #10]
 800852e:	460b      	mov	r3, r1
 8008530:	813b      	strh	r3, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	4a23      	ldr	r2, [pc, #140]	@ (80085dc <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008550:	fb82 1203 	smull	r1, r2, r2, r3
 8008554:	1192      	asrs	r2, r2, #6
 8008556:	17db      	asrs	r3, r3, #31
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800855c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008560:	2b00      	cmp	r3, #0
 8008562:	da03      	bge.n	800856c <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008564:	897b      	ldrh	r3, [r7, #10]
 8008566:	425b      	negs	r3, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800856c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da03      	bge.n	800857c <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008574:	893b      	ldrh	r3, [r7, #8]
 8008576:	425b      	negs	r3, r3
 8008578:	b29b      	uxth	r3, r3
 800857a:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800857c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008580:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008584:	4413      	add	r3, r2
 8008586:	015b      	lsls	r3, r3, #5
 8008588:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	4a13      	ldr	r2, [pc, #76]	@ (80085dc <VL53LX_calc_range_ignore_threshold+0xc0>)
 800858e:	fb82 1203 	smull	r1, r2, r2, r3
 8008592:	1192      	asrs	r2, r2, #6
 8008594:	17db      	asrs	r3, r3, #31
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80085a2:	79fa      	ldrb	r2, [r7, #7]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3310      	adds	r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da00      	bge.n	80085b6 <VL53LX_calc_range_ignore_threshold+0x9a>
 80085b4:	331f      	adds	r3, #31
 80085b6:	115b      	asrs	r3, r3, #5
 80085b8:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c0:	db03      	blt.n	80085ca <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80085c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085c6:	83fb      	strh	r3, [r7, #30]
 80085c8:	e001      	b.n	80085ce <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80085ce:	8bfb      	ldrh	r3, [r7, #30]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3724      	adds	r7, #36	@ 0x24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	10624dd3 	.word	0x10624dd3

080085e0 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e008      	b.n	800860c <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	031a      	lsls	r2, r3, #12
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	441a      	add	r2, r3
		timeout_mclks   =
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ffd6 	bl	80085e0 <VL53LX_calc_timeout_mclks>
 8008634:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f887 	bl	800874a <VL53LX_encode_timeout>
 800863c:	4603      	mov	r3, r0
 800863e:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008640:	897b      	ldrh	r3, [r7, #10]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800864a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008656:	2100      	movs	r1, #0
 8008658:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800865a:	f04f 0000 	mov.w	r0, #0
 800865e:	f04f 0100 	mov.w	r1, #0
 8008662:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	2000      	movs	r0, #0
 800866a:	4688      	mov	r8, r1
 800866c:	4681      	mov	r9, r0
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	2000      	movs	r0, #0
 8008672:	460c      	mov	r4, r1
 8008674:	4605      	mov	r5, r0
 8008676:	fb04 f009 	mul.w	r0, r4, r9
 800867a:	fb08 f105 	mul.w	r1, r8, r5
 800867e:	4401      	add	r1, r0
 8008680:	fba8 2304 	umull	r2, r3, r8, r4
 8008684:	4419      	add	r1, r3
 8008686:	460b      	mov	r3, r1
 8008688:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800868c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008694:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008698:	f143 0b00 	adc.w	fp, r3, #0
 800869c:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80086a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	0b02      	lsrs	r2, r0, #12
 80086ae:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80086b2:	0b0b      	lsrs	r3, r1, #12
 80086b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 80086bc:	697b      	ldr	r3, [r7, #20]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80086c8:	4770      	bx	lr
	...

080086cc <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80086e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80086e4:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80086e6:	4413      	add	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da02      	bge.n	80086f6 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e005      	b.n	8008702 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086fc:	db01      	blt.n	8008702 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80086fe:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008700:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008706:	68bb      	ldr	r3, [r7, #8]

}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	0003ffff 	.word	0x0003ffff

08008718 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 800872c:	88fb      	ldrh	r3, [r7, #6]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f835 	bl	800879e <VL53LX_decode_timeout>
 8008734:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ff86 	bl	800864a <VL53LX_calc_timeout_us>
 800873e:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008740:	68bb      	ldr	r3, [r7, #8]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 800874a:	b480      	push	{r7}
 800874c:	b087      	sub	sp, #28
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d015      	beq.n	8008790 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3b01      	subs	r3, #1
 8008768:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800876a:	e005      	b.n	8008778 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008772:	89fb      	ldrh	r3, [r7, #14]
 8008774:	3301      	adds	r3, #1
 8008776:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2bff      	cmp	r3, #255	@ 0xff
 800877c:	d8f6      	bhi.n	800876c <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800877e:	89fb      	ldrh	r3, [r7, #14]
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	b29b      	uxth	r3, r3
 8008788:	b2db      	uxtb	r3, r3
 800878a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800878c:	4413      	add	r3, r2
 800878e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008790:	8afb      	ldrh	r3, [r7, #22]
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	4603      	mov	r3, r0
 80087a6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	0a12      	lsrs	r2, r2, #8
 80087b4:	b292      	uxth	r2, r2
 80087b6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80087b8:	3301      	adds	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80087bc:	68fb      	ldr	r3, [r7, #12]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b088      	sub	sp, #32
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80087d8:	2300      	movs	r3, #0
 80087da:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80087e8:	887b      	ldrh	r3, [r7, #2]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80087ee:	23f1      	movs	r3, #241	@ 0xf1
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	e05d      	b.n	80088b0 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	799a      	ldrb	r2, [r3, #6]
 80087f8:	887b      	ldrh	r3, [r7, #2]
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fe5d 	bl	80084bc <VL53LX_calc_macro_period_us>
 8008802:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008804:	6979      	ldr	r1, [r7, #20]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff feea 	bl	80085e0 <VL53LX_calc_timeout_mclks>
 800880c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2bff      	cmp	r3, #255	@ 0xff
 8008812:	d901      	bls.n	8008818 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008814:	23ff      	movs	r3, #255	@ 0xff
 8008816:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008820:	6979      	ldr	r1, [r7, #20]
 8008822:	68b8      	ldr	r0, [r7, #8]
 8008824:	f7ff fef9 	bl	800861a <VL53LX_calc_encoded_timeout>
 8008828:	4603      	mov	r3, r0
 800882a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800882c:	8a7b      	ldrh	r3, [r7, #18]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008838:	8a7b      	ldrh	r3, [r7, #18]
 800883a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800883c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fee9 	bl	800861a <VL53LX_calc_encoded_timeout>
 8008848:	4603      	mov	r3, r0
 800884a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800884c:	8a7b      	ldrh	r3, [r7, #18]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b29b      	uxth	r3, r3
 8008852:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008856:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008858:	8a7b      	ldrh	r3, [r7, #18]
 800885a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008862:	7a5a      	ldrb	r2, [r3, #9]
 8008864:	887b      	ldrh	r3, [r7, #2]
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fe27 	bl	80084bc <VL53LX_calc_macro_period_us>
 800886e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008870:	6979      	ldr	r1, [r7, #20]
 8008872:	68b8      	ldr	r0, [r7, #8]
 8008874:	f7ff fed1 	bl	800861a <VL53LX_calc_encoded_timeout>
 8008878:	4603      	mov	r3, r0
 800887a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800887c:	8a7b      	ldrh	r3, [r7, #18]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	b29b      	uxth	r3, r3
 8008882:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008886:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008888:	8a7b      	ldrh	r3, [r7, #18]
 800888a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff fec1 	bl	800861a <VL53LX_calc_encoded_timeout>
 8008898:	4603      	mov	r3, r0
 800889a:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800889c:	8a7b      	ldrh	r3, [r7, #18]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80088a8:	8a7b      	ldrh	r3, [r7, #18]
 80088aa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80088ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ae:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80088b0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80088bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088c0:	b09e      	sub	sp, #120	@ 0x78
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6578      	str	r0, [r7, #84]	@ 0x54
 80088c6:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80088f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80088fa:	23f1      	movs	r3, #241	@ 0xf1
 80088fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008900:	e0d6      	b.n	8008ab0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 80d2 	beq.w	8008ab0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800890c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 80cd 	bne.w	8008ab0 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891c:	2200      	movs	r2, #0
 800891e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008920:	647a      	str	r2, [r7, #68]	@ 0x44
 8008922:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008926:	460b      	mov	r3, r1
 8008928:	3301      	adds	r3, #1
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	4613      	mov	r3, r2
 800892e:	f143 0300 	adc.w	r3, r3, #0
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
 8008934:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008938:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800893c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800893e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008942:	b29b      	uxth	r3, r3
 8008944:	2200      	movs	r2, #0
 8008946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008948:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 800894a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800894c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008950:	4602      	mov	r2, r0
 8008952:	fb02 f203 	mul.w	r2, r2, r3
 8008956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008958:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	441a      	add	r2, r3
 8008962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008964:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008966:	fba3 4501 	umull	r4, r5, r3, r1
 800896a:	1953      	adds	r3, r2, r5
 800896c:	461d      	mov	r5, r3
 800896e:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 8008972:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2200      	movs	r2, #0
 800897c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800897e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008980:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008984:	460b      	mov	r3, r1
 8008986:	3301      	adds	r3, #1
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	4613      	mov	r3, r2
 800898c:	f143 0300 	adc.w	r3, r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008996:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800899a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	2200      	movs	r2, #0
 80089a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089a4:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 80089a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80089ac:	4622      	mov	r2, r4
 80089ae:	fb02 f203 	mul.w	r2, r2, r3
 80089b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b4:	4629      	mov	r1, r5
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	441a      	add	r2, r3
 80089bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089be:	4621      	mov	r1, r4
 80089c0:	fba3 ab01 	umull	sl, fp, r3, r1
 80089c4:	eb02 030b 	add.w	r3, r2, fp
 80089c8:	469b      	mov	fp, r3
 80089ca:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 80089ce:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 80089d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	17da      	asrs	r2, r3, #31
 80089d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089da:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 80089dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80089e2:	4622      	mov	r2, r4
 80089e4:	fb02 f203 	mul.w	r2, r2, r3
 80089e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089ea:	4629      	mov	r1, r5
 80089ec:	fb01 f303 	mul.w	r3, r1, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089f4:	4621      	mov	r1, r4
 80089f6:	fba2 8901 	umull	r8, r9, r2, r1
 80089fa:	444b      	add	r3, r9
 80089fc:	4699      	mov	r9, r3
 80089fe:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 8008a02:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 8008a06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a0a:	0fd9      	lsrs	r1, r3, #31
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	6139      	str	r1, [r7, #16]
 8008a10:	6178      	str	r0, [r7, #20]
 8008a12:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008a16:	4621      	mov	r1, r4
 8008a18:	1889      	adds	r1, r1, r2
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	eb43 0101 	adc.w	r1, r3, r1
 8008a22:	60f9      	str	r1, [r7, #12]
 8008a24:	f04f 0200 	mov.w	r2, #0
 8008a28:	f04f 0300 	mov.w	r3, #0
 8008a2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008a30:	4621      	mov	r1, r4
 8008a32:	084a      	lsrs	r2, r1, #1
 8008a34:	4629      	mov	r1, r5
 8008a36:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	104b      	asrs	r3, r1, #1
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4619      	mov	r1, r3
 8008a42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a46:	1814      	adds	r4, r2, r0
 8008a48:	603c      	str	r4, [r7, #0]
 8008a4a:	414b      	adcs	r3, r1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008a52:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 8008a56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	d009      	beq.n	8008a72 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8008a5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008a66:	f7f7 fbdb 	bl	8000220 <__aeabi_ldivmod>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8008a72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8008a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8008a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008a8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a8e:	7852      	ldrb	r2, [r2, #1]
 8008a90:	0852      	lsrs	r2, r2, #1
 8008a92:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008a94:	441a      	add	r2, r3
 8008a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8008a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008aa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008aa4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008aa6:	fb93 f2f2 	sdiv	r2, r3, r2
 8008aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008ab0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3778      	adds	r7, #120	@ 0x78
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008abe <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b087      	sub	sp, #28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3318      	adds	r3, #24
 8008acc:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 8008ae0:	029b      	lsls	r3, r3, #10
 8008ae2:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 8008aea:	029b      	lsls	r3, r3, #10
 8008aec:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 8095 	bne.w	8008c28 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 8008b04:	091b      	lsrs	r3, r3, #4
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 8008b22:	091b      	lsrs	r3, r3, #4
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	da2c      	bge.n	8008bbe <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 8008b6a:	091b      	lsrs	r3, r3, #4
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 8008b88:	091b      	lsrs	r3, r3, #4
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	f340 80c2 	ble.w	8008d50 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 8008bf0:	091b      	lsrs	r3, r3, #4
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	731a      	strb	r2, [r3, #12]
 8008c26:	e093      	b.n	8008d50 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 8008c6c:	091b      	lsrs	r3, r3, #4
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	da2c      	bge.n	8008cea <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 8008c96:	091b      	lsrs	r3, r3, #4
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 8008cb4:	091b      	lsrs	r3, r3, #4
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	dd2c      	ble.n	8008d50 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 8008cfc:	091b      	lsrs	r3, r3, #4
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 8008d1a:	091b      	lsrs	r3, r3, #4
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 8008d38:	091b      	lsrs	r3, r3, #4
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
 8008d54:	e007      	b.n	8008d66 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	3301      	adds	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b05      	cmp	r3, #5
 8008d6a:	d9f4      	bls.n	8008d56 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008d6c:	bf00      	nop
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008d7a:	b590      	push	{r4, r7, lr}
 8008d7c:	b093      	sub	sp, #76	@ 0x4c
 8008d7e:	af04      	add	r7, sp, #16
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3318      	adds	r3, #24
 8008d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8008dba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8008dc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc8:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 8008dcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 8008dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 8008dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ddc:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008dde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	d006      	beq.n	8008dfa <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d002      	beq.n	8008dfa <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008df4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008df8:	e0ec      	b.n	8008fd4 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008dfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008e00:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008e04:	e0e6      	b.n	8008fd4 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008e0c:	e0d9      	b.n	8008fc2 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	214c      	movs	r1, #76	@ 0x4c
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	335e      	adds	r3, #94	@ 0x5e
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d00b      	beq.n	8008e3c <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008e24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	214c      	movs	r1, #76	@ 0x4c
 8008e2c:	fb01 f303 	mul.w	r3, r1, r3
 8008e30:	4413      	add	r3, r2
 8008e32:	335e      	adds	r3, #94	@ 0x5e
 8008e34:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e36:	2b13      	cmp	r3, #19
 8008e38:	f040 80bd 	bne.w	8008fb6 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	795b      	ldrb	r3, [r3, #5]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008e44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	214c      	movs	r1, #76	@ 0x4c
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	4413      	add	r3, r2
 8008e52:	335e      	adds	r3, #94	@ 0x5e
 8008e54:	2217      	movs	r2, #23
 8008e56:	701a      	strb	r2, [r3, #0]
 8008e58:	e009      	b.n	8008e6e <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008e5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	214c      	movs	r1, #76	@ 0x4c
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	335e      	adds	r3, #94	@ 0x5e
 8008e6a:	2207      	movs	r2, #7
 8008e6c:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008e74:	e097      	b.n	8008fa6 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008e76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	214c      	movs	r1, #76	@ 0x4c
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	3354      	adds	r3, #84	@ 0x54
 8008e86:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008e88:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4403      	add	r3, r0
 8008e98:	3310      	adds	r3, #16
 8008e9a:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008e9c:	4299      	cmp	r1, r3
 8008e9e:	d915      	bls.n	8008ecc <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008ea0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	214c      	movs	r1, #76	@ 0x4c
 8008ea8:	fb01 f303 	mul.w	r3, r1, r3
 8008eac:	4413      	add	r3, r2
 8008eae:	3354      	adds	r3, #84	@ 0x54
 8008eb0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008eb2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4403      	add	r3, r0
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008ec6:	1acb      	subs	r3, r1, r3
 8008ec8:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008eca:	e014      	b.n	8008ef6 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008ecc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	3310      	adds	r3, #16
 8008ede:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008ee0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	204c      	movs	r0, #76	@ 0x4c
 8008ee8:	fb00 f303 	mul.w	r3, r0, r3
 8008eec:	440b      	add	r3, r1
 8008eee:	3354      	adds	r3, #84	@ 0x54
 8008ef0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 8008ef6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008ef8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d24e      	bcs.n	8008f9c <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8008efe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d125      	bne.n	8008f52 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8008f06:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	3308      	adds	r3, #8
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8008f18:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 8008f1c:	224c      	movs	r2, #76	@ 0x4c
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
 8008f22:	3310      	adds	r3, #16
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	4413      	add	r3, r2
 8008f28:	3304      	adds	r3, #4
 8008f2a:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8008f2c:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 8008f30:	f107 0217 	add.w	r2, r7, #23
 8008f34:	9203      	str	r2, [sp, #12]
 8008f36:	f107 021c 	add.w	r2, r7, #28
 8008f3a:	9202      	str	r2, [sp, #8]
 8008f3c:	f107 0218 	add.w	r2, r7, #24
 8008f40:	9201      	str	r2, [sp, #4]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	4623      	mov	r3, r4
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	f000 f848 	bl	8008fdc <VL53LX_hist_events_consistency_check>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008f52:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d115      	bne.n	8008f86 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d112      	bne.n	8008f86 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008f60:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008f64:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 8008f68:	224c      	movs	r2, #76	@ 0x4c
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
 8008f6e:	3310      	adds	r3, #16
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	4413      	add	r3, r2
 8008f74:	3304      	adds	r3, #4
 8008f76:	f107 0217 	add.w	r2, r7, #23
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	f000 fb44 	bl	8009608 <VL53LX_hist_merged_pulse_check>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8008f86:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f8a:	7df8      	ldrb	r0, [r7, #23]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	214c      	movs	r1, #76	@ 0x4c
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	335e      	adds	r3, #94	@ 0x5e
 8008f98:	4602      	mov	r2, r0
 8008f9a:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008f9c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	795b      	ldrb	r3, [r3, #5]
 8008faa:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	f4ff af61 	bcc.w	8008e76 <VL53LX_hist_phase_consistency_check+0xfc>
 8008fb4:	e000      	b.n	8008fb8 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8008fb6:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008fb8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	7c9b      	ldrb	r3, [r3, #18]
 8008fc6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f4ff af1f 	bcc.w	8008e0e <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8008fd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	373c      	adds	r7, #60	@ 0x3c
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd90      	pop	{r4, r7, pc}

08008fdc <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8008fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fe0:	b0d4      	sub	sp, #336	@ 0x150
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8008fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	f04f 0300 	mov.w	r3, #0
 8009006:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f04f 0300 	mov.w	r3, #0
 800901e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	f04f 0300 	mov.w	r3, #0
 800904e:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 800906a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009072:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8009076:	2209      	movs	r2, #9
 8009078:	701a      	strb	r2, [r3, #0]
		return status;
 800907a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800907e:	e2bd      	b.n	80095fc <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009080:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800908c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009090:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009094:	460b      	mov	r3, r1
 8009096:	3301      	adds	r3, #1
 8009098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800909c:	4613      	mov	r3, r2
 800909e:	f143 0300 	adc.w	r3, r3, #0
 80090a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80090aa:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80090ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090b2:	885b      	ldrh	r3, [r3, #2]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2200      	movs	r2, #0
 80090b8:	469a      	mov	sl, r3
 80090ba:	4693      	mov	fp, r2
 80090bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80090c0:	fb0a f203 	mul.w	r2, sl, r3
 80090c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80090c8:	fb0b f303 	mul.w	r3, fp, r3
 80090cc:	441a      	add	r2, r3
 80090ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80090d2:	fba3 450a 	umull	r4, r5, r3, sl
 80090d6:	1953      	adds	r3, r2, r5
 80090d8:	461d      	mov	r5, r3
 80090da:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 80090de:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80090e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ee:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090f6:	460b      	mov	r3, r1
 80090f8:	3301      	adds	r3, #1
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090fe:	4613      	mov	r3, r2
 8009100:	f143 0300 	adc.w	r3, r3, #0
 8009104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009108:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800910c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009110:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009114:	8adb      	ldrh	r3, [r3, #22]
 8009116:	b29b      	uxth	r3, r3
 8009118:	2200      	movs	r2, #0
 800911a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800911e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009122:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009126:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800912a:	4622      	mov	r2, r4
 800912c:	fb02 f203 	mul.w	r2, r2, r3
 8009130:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009134:	4629      	mov	r1, r5
 8009136:	fb01 f303 	mul.w	r3, r1, r3
 800913a:	441a      	add	r2, r3
 800913c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009140:	4621      	mov	r1, r4
 8009142:	fba3 8901 	umull	r8, r9, r3, r1
 8009146:	eb02 0309 	add.w	r3, r2, r9
 800914a:	4699      	mov	r9, r3
 800914c:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 8009150:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 8009154:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8009158:	f04f 0000 	mov.w	r0, #0
 800915c:	f04f 0100 	mov.w	r1, #0
 8009160:	0319      	lsls	r1, r3, #12
 8009162:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009166:	0310      	lsls	r0, r2, #12
 8009168:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 800916c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009170:	4313      	orrs	r3, r2
 8009172:	d035      	beq.n	80091e0 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 8009174:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009178:	0fd9      	lsrs	r1, r3, #31
 800917a:	2000      	movs	r0, #0
 800917c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009180:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8009184:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8009188:	4621      	mov	r1, r4
 800918a:	1889      	adds	r1, r1, r2
 800918c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8009190:	4629      	mov	r1, r5
 8009192:	eb43 0101 	adc.w	r1, r3, r1
 8009196:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80091a6:	4621      	mov	r1, r4
 80091a8:	084a      	lsrs	r2, r1, #1
 80091aa:	4629      	mov	r1, r5
 80091ac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80091b0:	4629      	mov	r1, r5
 80091b2:	104b      	asrs	r3, r1, #1
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80091bc:	1814      	adds	r4, r2, r0
 80091be:	67bc      	str	r4, [r7, #120]	@ 0x78
 80091c0:	414b      	adcs	r3, r1
 80091c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091c4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80091c8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 80091cc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80091d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80091d4:	f7f7 f824 	bl	8000220 <__aeabi_ldivmod>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80091e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80091e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091e8:	fb03 f102 	mul.w	r1, r3, r2
 80091ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80091f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091f4:	fb02 f303 	mul.w	r3, r2, r3
 80091f8:	18ca      	adds	r2, r1, r3
 80091fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80091fe:	fba3 1303 	umull	r1, r3, r3, r3
 8009202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009206:	460b      	mov	r3, r1
 8009208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800920c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009210:	18d3      	adds	r3, r2, r3
 8009212:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009216:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800921a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 800921e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 8009222:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009226:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800922a:	6739      	str	r1, [r7, #112]	@ 0x70
 800922c:	f143 0300 	adc.w	r3, r3, #0
 8009230:	677b      	str	r3, [r7, #116]	@ 0x74
 8009232:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8009236:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 800923a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800923e:	2b00      	cmp	r3, #0
 8009240:	da08      	bge.n	8009254 <VL53LX_hist_events_consistency_check+0x278>
 8009242:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009246:	1851      	adds	r1, r2, r1
 8009248:	66b9      	str	r1, [r7, #104]	@ 0x68
 800924a:	f143 0300 	adc.w	r3, r3, #0
 800924e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009250:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009254:	f04f 0000 	mov.w	r0, #0
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	0b10      	lsrs	r0, r2, #12
 800925e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009262:	1319      	asrs	r1, r3, #12
 8009264:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009268:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800926c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926e:	2200      	movs	r2, #0
 8009270:	663b      	str	r3, [r7, #96]	@ 0x60
 8009272:	667a      	str	r2, [r7, #100]	@ 0x64
 8009274:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8009278:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800927c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009282:	2200      	movs	r2, #0
 8009284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009288:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800928c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009290:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8009294:	4621      	mov	r1, r4
 8009296:	1a51      	subs	r1, r2, r1
 8009298:	65b9      	str	r1, [r7, #88]	@ 0x58
 800929a:	4629      	mov	r1, r5
 800929c:	eb63 0301 	sbc.w	r3, r3, r1
 80092a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092a2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80092a6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 80092aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80092ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80092b2:	fb03 f102 	mul.w	r1, r3, r2
 80092b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80092ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	4419      	add	r1, r3
 80092c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80092c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80092cc:	fba2 2303 	umull	r2, r3, r2, r3
 80092d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092d4:	4613      	mov	r3, r2
 80092d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092de:	18cb      	adds	r3, r1, r3
 80092e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092e4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80092e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80092ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 80092f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80092f4:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80092f8:	6539      	str	r1, [r7, #80]	@ 0x50
 80092fa:	f143 0300 	adc.w	r3, r3, #0
 80092fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009300:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8009304:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 8009308:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800930c:	2b00      	cmp	r3, #0
 800930e:	da08      	bge.n	8009322 <VL53LX_hist_events_consistency_check+0x346>
 8009310:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009314:	1851      	adds	r1, r2, r1
 8009316:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009318:	f143 0300 	adc.w	r3, r3, #0
 800931c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800931e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009322:	f04f 0000 	mov.w	r0, #0
 8009326:	f04f 0100 	mov.w	r1, #0
 800932a:	0b10      	lsrs	r0, r2, #12
 800932c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009330:	1319      	asrs	r1, r3, #12
 8009332:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009336:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800933a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800933e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009344:	2200      	movs	r2, #0
 8009346:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800934a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800934e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009352:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8009356:	4622      	mov	r2, r4
 8009358:	fb02 f203 	mul.w	r2, r2, r3
 800935c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009360:	4629      	mov	r1, r5
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	441a      	add	r2, r3
 8009368:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800936c:	4621      	mov	r1, r4
 800936e:	fba3 1301 	umull	r1, r3, r3, r1
 8009372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009376:	460b      	mov	r3, r1
 8009378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800937c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009380:	18d3      	adds	r3, r2, r3
 8009382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009386:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800938a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800938e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 8009392:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009396:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800939a:	6439      	str	r1, [r7, #64]	@ 0x40
 800939c:	f143 0300 	adc.w	r3, r3, #0
 80093a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80093a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 80093aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da08      	bge.n	80093c4 <VL53LX_hist_events_consistency_check+0x3e8>
 80093b2:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093ba:	f143 0300 	adc.w	r3, r3, #0
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80093c4:	f04f 0000 	mov.w	r0, #0
 80093c8:	f04f 0100 	mov.w	r1, #0
 80093cc:	0b10      	lsrs	r0, r2, #12
 80093ce:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80093d2:	1319      	asrs	r1, r3, #12
 80093d4:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80093d8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80093dc:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80093e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80093f8:	4622      	mov	r2, r4
 80093fa:	fb02 f203 	mul.w	r2, r2, r3
 80093fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009402:	4629      	mov	r1, r5
 8009404:	fb01 f303 	mul.w	r3, r1, r3
 8009408:	441a      	add	r2, r3
 800940a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800940e:	4621      	mov	r1, r4
 8009410:	fba3 1301 	umull	r1, r3, r3, r1
 8009414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009418:	460b      	mov	r3, r1
 800941a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800941e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009422:	18d3      	adds	r3, r2, r3
 8009424:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009428:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800942c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8009430:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 8009434:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009438:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800943c:	6339      	str	r1, [r7, #48]	@ 0x30
 800943e:	f143 0300 	adc.w	r3, r3, #0
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
 8009444:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009448:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 800944c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009450:	4610      	mov	r0, r2
 8009452:	4619      	mov	r1, r3
 8009454:	2900      	cmp	r1, #0
 8009456:	da08      	bge.n	800946a <VL53LX_hist_events_consistency_check+0x48e>
 8009458:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800945c:	18c3      	adds	r3, r0, r3
 800945e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009460:	f141 0300 	adc.w	r3, r1, #0
 8009464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	0b02      	lsrs	r2, r0, #12
 8009474:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009478:	130b      	asrs	r3, r1, #12
 800947a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 800947e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009482:	1c91      	adds	r1, r2, #2
 8009484:	6239      	str	r1, [r7, #32]
 8009486:	f143 0300 	adc.w	r3, r3, #0
 800948a:	627b      	str	r3, [r7, #36]	@ 0x24
 800948c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009490:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 8009494:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009498:	2b00      	cmp	r3, #0
 800949a:	da06      	bge.n	80094aa <VL53LX_hist_events_consistency_check+0x4ce>
 800949c:	1cd1      	adds	r1, r2, #3
 800949e:	61b9      	str	r1, [r7, #24]
 80094a0:	f143 0300 	adc.w	r3, r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094aa:	f04f 0000 	mov.w	r0, #0
 80094ae:	f04f 0100 	mov.w	r1, #0
 80094b2:	0890      	lsrs	r0, r2, #2
 80094b4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80094b8:	1099      	asrs	r1, r3, #2
 80094ba:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80094be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c2:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80094c4:	2200      	movs	r2, #0
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	617a      	str	r2, [r7, #20]
 80094ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80094ce:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 80094d2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80094d6:	1c91      	adds	r1, r2, #2
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	f143 0300 	adc.w	r3, r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80094e4:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 80094e8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da06      	bge.n	80094fe <VL53LX_hist_events_consistency_check+0x522>
 80094f0:	1cd1      	adds	r1, r2, #3
 80094f2:	6039      	str	r1, [r7, #0]
 80094f4:	f143 0300 	adc.w	r3, r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fe:	f04f 0000 	mov.w	r0, #0
 8009502:	f04f 0100 	mov.w	r1, #0
 8009506:	0890      	lsrs	r0, r2, #2
 8009508:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800950c:	1099      	asrs	r1, r3, #2
 800950e:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009516:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009518:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800951c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800951e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 8009522:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009524:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 8009528:	4413      	add	r3, r2
 800952a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800952e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f002 f8ab 	bl	800b690 <VL53LX_isqrt>
 800953a:	4603      	mov	r3, r0
 800953c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800953e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009542:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009544:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800954e:	fb03 f202 	mul.w	r2, r3, r2
 8009552:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009556:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009558:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f103 0220 	add.w	r2, r3, #32
 8009562:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009566:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009568:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	da00      	bge.n	8009574 <VL53LX_hist_events_consistency_check+0x598>
 8009572:	333f      	adds	r3, #63	@ 0x3f
 8009574:	119b      	asrs	r3, r3, #6
 8009576:	461a      	mov	r2, r3
 8009578:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800957c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800959a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800959e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80095a2:	429a      	cmp	r2, r3
 80095a4:	da08      	bge.n	80095b8 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80095a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80095aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ae:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80095b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	e007      	b.n	80095c8 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80095b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80095c0:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80095c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095c6:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80095c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	dd0b      	ble.n	80095f0 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80095d8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80095dc:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80095de:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d204      	bcs.n	80095f0 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80095e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80095ea:	2214      	movs	r2, #20
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e003      	b.n	80095f8 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80095f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80095f4:	2209      	movs	r2, #9
 80095f6:	701a      	strb	r2, [r3, #0]





	return status;
 80095f8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8009602:	46bd      	mov	sp, r7
 8009604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009608 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009616:	2300      	movs	r3, #0
 8009618:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800962a:	429a      	cmp	r2, r3
 800962c:	dd0b      	ble.n	8009646 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009634:	b29a      	uxth	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800963c:	b29b      	uxth	r3, r3
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	b29b      	uxth	r3, r3
		delta_mm =
 8009642:	82fb      	strh	r3, [r7, #22]
 8009644:	e00a      	b.n	800965c <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800964c:	b29a      	uxth	r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009654:	b29b      	uxth	r3, r3
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	b29b      	uxth	r3, r3
		delta_mm =
 800965a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800965c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009660:	2b00      	cmp	r3, #0
 8009662:	dd09      	ble.n	8009678 <VL53LX_hist_merged_pulse_check+0x70>
 8009664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800966c:	429a      	cmp	r2, r3
 800966e:	dd03      	ble.n	8009678 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2216      	movs	r2, #22
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	e002      	b.n	800967e <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2209      	movs	r2, #9
 800967c:	701a      	strb	r2, [r3, #0]

	return status;
 800967e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b08e      	sub	sp, #56	@ 0x38
 8009692:	af04      	add	r7, sp, #16
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	607a      	str	r2, [r7, #4]
 800969a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800969c:	2300      	movs	r3, #0
 800969e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3318      	adds	r3, #24
 80096a6:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 80096b6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 80096be:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d009      	beq.n	80096de <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096d0:	2b13      	cmp	r3, #19
 80096d2:	d004      	beq.n	80096de <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80096da:	2b14      	cmp	r3, #20
 80096dc:	d129      	bne.n	8009732 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d009      	beq.n	80096fc <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80096ee:	2b13      	cmp	r3, #19
 80096f0:	d004      	beq.n	80096fc <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80096f8:	2b14      	cmp	r3, #20
 80096fa:	d11a      	bne.n	8009732 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2209      	movs	r2, #9
 8009700:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 800970e:	8bb9      	ldrh	r1, [r7, #28]
 8009710:	7ff8      	ldrb	r0, [r7, #31]
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	f107 0318 	add.w	r3, r7, #24
 8009718:	9302      	str	r3, [sp, #8]
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	f7ff fc58 	bl	8008fdc <VL53LX_hist_events_consistency_check>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 8009732:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009736:	4618      	mov	r0, r3
 8009738:	3728      	adds	r7, #40	@ 0x28
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b088      	sub	sp, #32
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800974a:	2300      	movs	r3, #0
 800974c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009766:	2b00      	cmp	r3, #0
 8009768:	d019      	beq.n	800979e <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009770:	4618      	mov	r0, r3
 8009772:	f002 f8f4 	bl	800b95e <VL53LX_calc_pll_period_mm>
 8009776:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009792:	0bdb      	lsrs	r3, r3, #15
 8009794:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	b21a      	sxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800979e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3720      	adds	r7, #32
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80097aa:	b590      	push	{r4, r7, lr}
 80097ac:	b08d      	sub	sp, #52	@ 0x34
 80097ae:	af04      	add	r7, sp, #16
 80097b0:	4604      	mov	r4, r0
 80097b2:	4608      	mov	r0, r1
 80097b4:	4611      	mov	r1, r2
 80097b6:	461a      	mov	r2, r3
 80097b8:	4623      	mov	r3, r4
 80097ba:	80fb      	strh	r3, [r7, #6]
 80097bc:	4603      	mov	r3, r0
 80097be:	80bb      	strh	r3, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
 80097c4:	4613      	mov	r3, r2
 80097c6:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 80097e8:	78b9      	ldrb	r1, [r7, #2]
 80097ea:	78f8      	ldrb	r0, [r7, #3]
 80097ec:	f107 030c 	add.w	r3, r7, #12
 80097f0:	9303      	str	r3, [sp, #12]
 80097f2:	f107 030e 	add.w	r3, r7, #14
 80097f6:	9302      	str	r3, [sp, #8]
 80097f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	23ff      	movs	r3, #255	@ 0xff
 8009804:	22c7      	movs	r2, #199	@ 0xc7
 8009806:	f000 fa01 	bl	8009c0c <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800980a:	89fb      	ldrh	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d050      	beq.n	80098b2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009810:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009812:	2b00      	cmp	r3, #0
 8009814:	d04d      	beq.n	80098b2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009816:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 800981a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800981e:	78b9      	ldrb	r1, [r7, #2]
 8009820:	78f8      	ldrb	r0, [r7, #3]
 8009822:	f107 0308 	add.w	r3, r7, #8
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	f107 030a 	add.w	r3, r7, #10
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4623      	mov	r3, r4
 800983a:	f000 f9e7 	bl	8009c0c <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009842:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009844:	897b      	ldrh	r3, [r7, #10]
 8009846:	461a      	mov	r2, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	fb02 f303 	mul.w	r3, r2, r3
 800984e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009850:	89fb      	ldrh	r3, [r7, #14]
 8009852:	461a      	mov	r2, r3
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	fbb3 f3f2 	udiv	r3, r3, r2
 800985a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800985c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009860:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009862:	893b      	ldrh	r3, [r7, #8]
 8009864:	461a      	mov	r2, r3
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	fb02 f303 	mul.w	r3, r2, r3
 800986c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	461a      	mov	r2, r3
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	fbb3 f3f2 	udiv	r3, r3, r2
 8009878:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800987a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	fb02 f303 	mul.w	r3, r2, r3
 8009884:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	fb02 f303 	mul.w	r3, r2, r3
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009896:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009898:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800989a:	4413      	add	r3, r2
 800989c:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	009a      	lsls	r2, r3, #2
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e002      	b.n	80098b8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 80098b6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	b21a      	sxth	r2, r3
 80098bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098be:	801a      	strh	r2, [r3, #0]

}
 80098c0:	bf00      	nop
 80098c2:	3724      	adds	r7, #36	@ 0x24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	08db      	lsrs	r3, r3, #3
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	2301      	movs	r3, #1
 80098f6:	4093      	lsls	r3, r2
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	701a      	strb	r2, [r3, #0]

}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	4603      	mov	r3, r0
 8009912:	603a      	str	r2, [r7, #0]
 8009914:	71fb      	strb	r3, [r7, #7]
 8009916:	460b      	mov	r3, r1
 8009918:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b07      	cmp	r3, #7
 800991e:	d90a      	bls.n	8009936 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009920:	79bb      	ldrb	r3, [r7, #6]
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	b2da      	uxtb	r2, r3
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	b2db      	uxtb	r3, r3
 800992c:	3b71      	subs	r3, #113	@ 0x71
 800992e:	b2da      	uxtb	r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009934:	e00a      	b.n	800994c <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009936:	79bb      	ldrb	r3, [r7, #6]
 8009938:	f1c3 030f 	rsb	r3, r3, #15
 800993c:	b2db      	uxtb	r3, r3
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	b2da      	uxtb	r2, r3
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	4413      	add	r3, r2
 8009946:	b2da      	uxtb	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	701a      	strb	r2, [r3, #0]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	091b      	lsrs	r3, r3, #4
 800996a:	b2da      	uxtb	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	b2da      	uxtb	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	701a      	strb	r2, [r3, #0]

}
 800997c:	bf00      	nop
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	603a      	str	r2, [r7, #0]
 8009992:	71fb      	strb	r3, [r7, #7]
 8009994:	460b      	mov	r3, r1
 8009996:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009998:	79bb      	ldrb	r3, [r7, #6]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	b2da      	uxtb	r2, r3
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	4413      	add	r3, r2
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	701a      	strb	r2, [r3, #0]

}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60ba      	str	r2, [r7, #8]
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	460b      	mov	r3, r1
 80099c4:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 80099d6:	f107 0217 	add.w	r2, r7, #23
 80099da:	f107 0116 	add.w	r1, r7, #22
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f002 fa37 	bl	800be54 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 80099e6:	f107 0214 	add.w	r2, r7, #20
 80099ea:	f107 0115 	add.w	r1, r7, #21
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff ffb1 	bl	8009958 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	4619      	mov	r1, r3
 80099fa:	7d7b      	ldrb	r3, [r7, #21]
 80099fc:	3301      	adds	r3, #1
 80099fe:	0fda      	lsrs	r2, r3, #31
 8009a00:	4413      	add	r3, r2
 8009a02:	105b      	asrs	r3, r3, #1
 8009a04:	425b      	negs	r3, r3
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	440b      	add	r3, r1
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b21a      	sxth	r2, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da02      	bge.n	8009a22 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	7d7a      	ldrb	r2, [r7, #21]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	b21a      	sxth	r2, r3
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a3c:	2b0f      	cmp	r3, #15
 8009a3e:	dd02      	ble.n	8009a46 <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	220f      	movs	r2, #15
 8009a44:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009a46:	7dbb      	ldrb	r3, [r7, #22]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	7d3b      	ldrb	r3, [r7, #20]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	0fda      	lsrs	r2, r3, #31
 8009a50:	4413      	add	r3, r2
 8009a52:	105b      	asrs	r3, r3, #1
 8009a54:	425b      	negs	r3, r3
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	440b      	add	r3, r1
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	b21a      	sxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da02      	bge.n	8009a72 <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	7d3a      	ldrb	r2, [r7, #20]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	b21a      	sxth	r2, r3
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a8c:	2b0f      	cmp	r3, #15
 8009a8e:	dd02      	ble.n	8009a96 <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	220f      	movs	r2, #15
 8009a94:	801a      	strh	r2, [r3, #0]
}
 8009a96:	bf00      	nop
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	460a      	mov	r2, r1
 8009aa8:	71fb      	strb	r3, [r7, #7]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009aba:	79bb      	ldrb	r3, [r7, #6]
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <VL53LX_is_aperture_location+0x34>
 8009ac8:	7b7b      	ldrb	r3, [r7, #13]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d101      	bne.n	8009ad2 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d104      	bne.n	8009ae2 <VL53LX_is_aperture_location+0x44>
 8009ad8:	7b7b      	ldrb	r3, [r7, #13]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b08b      	sub	sp, #44	@ 0x2c
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	603a      	str	r2, [r7, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
 8009afe:	460b      	mov	r3, r1
 8009b00:	71bb      	strb	r3, [r7, #6]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009b32:	f107 0416 	add.w	r4, r7, #22
 8009b36:	f107 0218 	add.w	r2, r7, #24
 8009b3a:	79b9      	ldrb	r1, [r7, #6]
 8009b3c:	79f8      	ldrb	r0, [r7, #7]
 8009b3e:	f107 0312 	add.w	r3, r7, #18
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	f107 0314 	add.w	r3, r7, #20
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	f7ff ff32 	bl	80099b4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	2200      	movs	r2, #0
 8009b54:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009b56:	8afb      	ldrh	r3, [r7, #22]
 8009b58:	83bb      	strh	r3, [r7, #28]
 8009b5a:	e04c      	b.n	8009bf6 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009b5c:	8b3b      	ldrh	r3, [r7, #24]
 8009b5e:	83fb      	strh	r3, [r7, #30]
 8009b60:	e03d      	b.n	8009bde <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009b62:	8bbb      	ldrh	r3, [r7, #28]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	8bfa      	ldrh	r2, [r7, #30]
 8009b68:	b2d1      	uxtb	r1, r2
 8009b6a:	f107 0211 	add.w	r2, r7, #17
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fecb 	bl	800990a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009b74:	7c78      	ldrb	r0, [r7, #17]
 8009b76:	f107 030e 	add.w	r3, r7, #14
 8009b7a:	f107 020f 	add.w	r2, r7, #15
 8009b7e:	f107 0110 	add.w	r1, r7, #16
 8009b82:	f7ff fea1 	bl	80098c8 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009b86:	7c3b      	ldrb	r3, [r7, #16]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	4013      	ands	r3, r2
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01b      	beq.n	8009bd2 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009b9a:	8bbb      	ldrh	r3, [r7, #28]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	8bfa      	ldrh	r2, [r7, #30]
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff ff7a 	bl	8009a9e <VL53LX_is_aperture_location>
 8009baa:	4603      	mov	r3, r0
 8009bac:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009bae:	7efb      	ldrb	r3, [r7, #27]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	881a      	ldrh	r2, [r3, #0]
 8009bb8:	88bb      	ldrh	r3, [r7, #4]
 8009bba:	4413      	add	r3, r2
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	801a      	strh	r2, [r3, #0]
 8009bc2:	e006      	b.n	8009bd2 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009bd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	83fb      	strh	r3, [r7, #30]
 8009bde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009be2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	ddbb      	ble.n	8009b62 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009bea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	83bb      	strh	r3, [r7, #28]
 8009bf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bfa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	ddac      	ble.n	8009b5c <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	3724      	adds	r7, #36	@ 0x24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd90      	pop	{r4, r7, pc}

08009c0c <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009c0c:	b590      	push	{r4, r7, lr}
 8009c0e:	b08d      	sub	sp, #52	@ 0x34
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	4611      	mov	r1, r2
 8009c18:	461a      	mov	r2, r3
 8009c1a:	4623      	mov	r3, r4
 8009c1c:	71fb      	strb	r3, [r7, #7]
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71bb      	strb	r3, [r7, #6]
 8009c22:	460b      	mov	r3, r1
 8009c24:	717b      	strb	r3, [r7, #5]
 8009c26:	4613      	mov	r3, r2
 8009c28:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 8009c6c:	f107 041c 	add.w	r4, r7, #28
 8009c70:	f107 021e 	add.w	r2, r7, #30
 8009c74:	79b9      	ldrb	r1, [r7, #6]
 8009c76:	79f8      	ldrb	r0, [r7, #7]
 8009c78:	f107 0318 	add.w	r3, r7, #24
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	f107 031a 	add.w	r3, r7, #26
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	4623      	mov	r3, r4
 8009c86:	f7ff fe95 	bl	80099b4 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009c8a:	f107 0414 	add.w	r4, r7, #20
 8009c8e:	f107 0216 	add.w	r2, r7, #22
 8009c92:	7939      	ldrb	r1, [r7, #4]
 8009c94:	7978      	ldrb	r0, [r7, #5]
 8009c96:	f107 0310 	add.w	r3, r7, #16
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	f107 0312 	add.w	r3, r7, #18
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	f7ff fe86 	bl	80099b4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009caa:	2200      	movs	r2, #0
 8009cac:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009cb4:	8abb      	ldrh	r3, [r7, #20]
 8009cb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009cb8:	e06c      	b.n	8009d94 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009cbe:	e05d      	b.n	8009d7c <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009cc6:	b2d1      	uxtb	r1, r2
 8009cc8:	f107 020f 	add.w	r2, r7, #15
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff fe1c 	bl	800990a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009cd2:	7bf8      	ldrb	r0, [r7, #15]
 8009cd4:	f107 030c 	add.w	r3, r7, #12
 8009cd8:	f107 020d 	add.w	r2, r7, #13
 8009cdc:	f107 010e 	add.w	r1, r7, #14
 8009ce0:	f7ff fdf2 	bl	80098c8 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	4413      	add	r3, r2
 8009cec:	781a      	ldrb	r2, [r3, #0]
 8009cee:	7b3b      	ldrb	r3, [r7, #12]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d03b      	beq.n	8009d70 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fecb 	bl	8009a9e <VL53LX_is_aperture_location>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009d0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009d16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d18:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d1a:	e002      	b.n	8009d22 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d20:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009d22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d26:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	db19      	blt.n	8009d62 <VL53LX_calc_mm_effective_spads+0x156>
 8009d2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009d32:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d36:	429a      	cmp	r2, r3
 8009d38:	dc13      	bgt.n	8009d62 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009d3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009d3e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d42:	429a      	cmp	r2, r3
 8009d44:	db0d      	blt.n	8009d62 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009d46:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d4a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	dc07      	bgt.n	8009d62 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d54:	881a      	ldrh	r2, [r3, #0]
 8009d56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d58:	4413      	add	r3, r2
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	e006      	b.n	8009d70 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d64:	881a      	ldrh	r2, [r3, #0]
 8009d66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d68:	4413      	add	r3, r2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6e:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3301      	adds	r3, #1
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d80:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009d84:	429a      	cmp	r2, r3
 8009d86:	dd9b      	ble.n	8009cc0 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	3301      	adds	r3, #1
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009d98:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	dd8c      	ble.n	8009cba <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	372c      	adds	r7, #44	@ 0x2c
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd90      	pop	{r4, r7, pc}

08009daa <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b086      	sub	sp, #24
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7fd ff71 	bl	8007ca4 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	7c9a      	ldrb	r2, [r3, #18]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3314      	adds	r3, #20
 8009dec:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009dee:	2300      	movs	r3, #0
 8009df0:	75fb      	strb	r3, [r7, #23]
 8009df2:	e06b      	b.n	8009ecc <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d034      	beq.n	8009e68 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009dfe:	e05f      	b.n	8009ec0 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009e38:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	8a9a      	ldrh	r2, [r3, #20]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	601a      	str	r2, [r3, #0]

			break;
 8009e66:	e02b      	b.n	8009ec0 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009e98:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	611a      	str	r2, [r3, #16]
			break;
 8009ebe:	bf00      	nop
		}

		pdata++;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	334c      	adds	r3, #76	@ 0x4c
 8009ec4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	7c9b      	ldrb	r3, [r3, #18]
 8009ed0:	7dfa      	ldrb	r2, [r7, #23]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d38e      	bcc.n	8009df4 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b089      	sub	sp, #36	@ 0x24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3318      	adds	r3, #24
 8009ef0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009ef8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8009f00:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f08:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	4413      	add	r3, r2
 8009f1a:	3302      	adds	r3, #2
 8009f1c:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8009f42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3724      	adds	r7, #36	@ 0x24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b08b      	sub	sp, #44	@ 0x2c
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3318      	adds	r3, #24
 8009f64:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009f6c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009f74:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 8009f84:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f8a:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009f8c:	7bfa      	ldrb	r2, [r7, #15]
 8009f8e:	6939      	ldr	r1, [r7, #16]
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	440b      	add	r3, r1
 8009f9a:	3306      	adds	r3, #6
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009fa6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fae:	e01a      	b.n	8009fe6 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	214c      	movs	r1, #76	@ 0x4c
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	334a      	adds	r3, #74	@ 0x4a
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d209      	bcs.n	8009fdc <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	214c      	movs	r1, #76	@ 0x4c
 8009fd0:	fb01 f303 	mul.w	r3, r1, r3
 8009fd4:	4413      	add	r3, r2
 8009fd6:	334a      	adds	r3, #74	@ 0x4a
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 8009fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	7c9b      	ldrb	r3, [r3, #18]
 8009fea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d3de      	bcc.n	8009fb0 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ffc:	623b      	str	r3, [r7, #32]
 8009ffe:	e00e      	b.n	800a01e <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a000:	89bb      	ldrh	r3, [r7, #12]
 800a002:	039b      	lsls	r3, r3, #14
 800a004:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a008:	6a3a      	ldr	r2, [r7, #32]
 800a00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a00e:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a016:	d302      	bcc.n	800a01e <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a01c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a01e:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a024:	6939      	ldr	r1, [r7, #16]
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	440b      	add	r3, r1
 800a030:	3306      	adds	r3, #6
 800a032:	4602      	mov	r2, r0
 800a034:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a036:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	372c      	adds	r7, #44	@ 0x2c
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b08a      	sub	sp, #40	@ 0x28
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a04e:	2300      	movs	r3, #0
 800a050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3318      	adds	r3, #24
 800a058:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	332c      	adds	r3, #44	@ 0x2c
 800a05e:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	33c2      	adds	r3, #194	@ 0xc2
 800a064:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800a06c:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	3302      	adds	r3, #2
 800a072:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	785b      	ldrb	r3, [r3, #1]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a084:	461a      	mov	r2, r3
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	4413      	add	r3, r2
 800a08a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d11e      	bne.n	800a0d0 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d05d      	beq.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	719a      	strb	r2, [r3, #6]
 800a0ce:	e050      	b.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d11e      	bne.n	800a122 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d034      	beq.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	719a      	strb	r2, [r3, #6]
 800a120:	e027      	b.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a128:	461a      	mov	r2, r3
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	4413      	add	r3, r2
 800a12e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a132:	2b03      	cmp	r3, #3
 800a134:	d11d      	bne.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00b      	beq.n	800a172 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a172:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800a186:	461a      	mov	r2, r3
 800a188:	6978      	ldr	r0, [r7, #20]
 800a18a:	f7fd f961 	bl	8007450 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a18e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a192:	4618      	mov	r0, r3
 800a194:	3728      	adds	r7, #40	@ 0x28
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b089      	sub	sp, #36	@ 0x24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3318      	adds	r3, #24
 800a1b2:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a1ba:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7afa      	ldrb	r2, [r7, #11]
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e01e      	b.n	800a208 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d111      	bne.n	800a1fc <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2bff      	cmp	r3, #255	@ 0xff
 800a1de:	d103      	bne.n	800a1e8 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2280      	movs	r2, #128	@ 0x80
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	e005      	b.n	800a1f4 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	e005      	b.n	800a208 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	b2da      	uxtb	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a208:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3724      	adds	r7, #36	@ 0x24
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	@ 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	607a      	str	r2, [r7, #4]
 800a222:	461a      	mov	r2, r3
 800a224:	460b      	mov	r3, r1
 800a226:	72fb      	strb	r3, [r7, #11]
 800a228:	4613      	mov	r3, r2
 800a22a:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3318      	adds	r3, #24
 800a236:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a240:	7afa      	ldrb	r2, [r7, #11]
 800a242:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe f938 	bl	80084bc <VL53LX_calc_macro_period_us>
 800a24c:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a254:	2301      	movs	r3, #1
 800a256:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	031b      	lsls	r3, r3, #12
 800a25c:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	085b      	lsrs	r3, r3, #1
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	4413      	add	r3, r2
 800a266:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a270:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2bff      	cmp	r3, #255	@ 0xff
 800a276:	d904      	bls.n	800a282 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	22ff      	movs	r2, #255	@ 0xff
 800a27c:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800a280:	e004      	b.n	800a28c <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	7afa      	ldrb	r2, [r7, #11]
 800a290:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a294:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	214b      	movs	r1, #75	@ 0x4b
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f007 f95e 	bl	8011568 <VL53LX_WrByte>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a2b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	2160      	movs	r1, #96	@ 0x60
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f007 f94f 	bl	8011568 <VL53LX_WrByte>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2d6:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a2de:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a2e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d109      	bne.n	800a2fc <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a2e8:	f107 0214 	add.w	r2, r7, #20
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	2178      	movs	r1, #120	@ 0x78
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f007 f8cd 	bl	8011490 <VL53LX_WriteMulti>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	893a      	ldrh	r2, [r7, #8]
 800a300:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a304:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a30c:	893b      	ldrh	r3, [r7, #8]
 800a30e:	461a      	mov	r2, r3
 800a310:	211c      	movs	r1, #28
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f007 f952 	bl	80115bc <VL53LX_WrWord>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a31e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a322:	2b00      	cmp	r3, #0
 800a324:	d108      	bne.n	800a338 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a326:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a328:	461a      	mov	r2, r3
 800a32a:	2164      	movs	r1, #100	@ 0x64
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f007 f945 	bl	80115bc <VL53LX_WrWord>
 800a332:	4603      	mov	r3, r0
 800a334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d108      	bne.n	800a352 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a340:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a342:	461a      	mov	r2, r3
 800a344:	2166      	movs	r1, #102	@ 0x66
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f007 f938 	bl	80115bc <VL53LX_WrWord>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a352:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a356:	4618      	mov	r0, r3
 800a358:	3728      	adds	r7, #40	@ 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a35e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a362:	b0a2      	sub	sp, #136	@ 0x88
 800a364:	af00      	add	r7, sp, #0
 800a366:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a36e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a370:	3318      	adds	r3, #24
 800a372:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a376:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a37a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800a37c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a37e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a382:	3314      	adds	r3, #20
 800a384:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a388:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a38c:	3318      	adds	r3, #24
 800a38e:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a392:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a396:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a39a:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a39c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a3a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800a3a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a3ac:	4413      	add	r3, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	461c      	mov	r4, r3
 800a3b2:	4615      	mov	r5, r2
 800a3b4:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800a3b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800a3c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a3c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a3c8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f04f 0000 	mov.w	r0, #0
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	0159      	lsls	r1, r3, #5
 800a3da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3de:	0150      	lsls	r0, r2, #5
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	ebb2 0804 	subs.w	r8, r2, r4
 800a3e8:	eb63 0905 	sbc.w	r9, r3, r5
 800a3ec:	f04f 0200 	mov.w	r2, #0
 800a3f0:	f04f 0300 	mov.w	r3, #0
 800a3f4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a3f8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800a3fc:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a400:	4690      	mov	r8, r2
 800a402:	4699      	mov	r9, r3
 800a404:	eb18 0304 	adds.w	r3, r8, r4
 800a408:	633b      	str	r3, [r7, #48]	@ 0x30
 800a40a:	eb49 0305 	adc.w	r3, r9, r5
 800a40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	f04f 0300 	mov.w	r3, #0
 800a418:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a41c:	4629      	mov	r1, r5
 800a41e:	00cb      	lsls	r3, r1, #3
 800a420:	4621      	mov	r1, r4
 800a422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a426:	4621      	mov	r1, r4
 800a428:	00ca      	lsls	r2, r1, #3
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a432:	2200      	movs	r2, #0
 800a434:	643b      	str	r3, [r7, #64]	@ 0x40
 800a436:	647a      	str	r2, [r7, #68]	@ 0x44
 800a438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a43c:	f7f5 ff40 	bl	80002c0 <__aeabi_uldivmod>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a448:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	f04f 0000 	mov.w	r0, #0
 800a454:	f04f 0100 	mov.w	r1, #0
 800a458:	0159      	lsls	r1, r3, #5
 800a45a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a45e:	0150      	lsls	r0, r2, #5
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	ebb2 0a04 	subs.w	sl, r2, r4
 800a468:	eb63 0b05 	sbc.w	fp, r3, r5
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a478:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800a47c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a480:	4692      	mov	sl, r2
 800a482:	469b      	mov	fp, r3
 800a484:	eb1a 0304 	adds.w	r3, sl, r4
 800a488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a48a:	eb4b 0305 	adc.w	r3, fp, r5
 800a48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	f04f 0300 	mov.w	r3, #0
 800a498:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a49c:	4629      	mov	r1, r5
 800a49e:	00cb      	lsls	r3, r1, #3
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	00ca      	lsls	r2, r1, #3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a4b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a4bc:	f7f5 ff00 	bl	80002c0 <__aeabi_uldivmod>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a4c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4ce:	8ad2      	ldrh	r2, [r2, #22]
 800a4d0:	fb02 f303 	mul.w	r3, r2, r3
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	623b      	str	r3, [r7, #32]
 800a4d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a4de:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800a4e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	d105      	bne.n	800a4f6 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800a4ea:	f04f 0201 	mov.w	r2, #1
 800a4ee:	f04f 0300 	mov.w	r3, #0
 800a4f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800a4f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	f04f 0400 	mov.w	r4, #0
 800a502:	f04f 0500 	mov.w	r5, #0
 800a506:	015d      	lsls	r5, r3, #5
 800a508:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a50c:	0154      	lsls	r4, r2, #5
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	1a14      	subs	r4, r2, r0
 800a514:	61bc      	str	r4, [r7, #24]
 800a516:	eb63 0301 	sbc.w	r3, r3, r1
 800a51a:	61fb      	str	r3, [r7, #28]
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a528:	464c      	mov	r4, r9
 800a52a:	00a3      	lsls	r3, r4, #2
 800a52c:	4644      	mov	r4, r8
 800a52e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a532:	4644      	mov	r4, r8
 800a534:	00a2      	lsls	r2, r4, #2
 800a536:	4614      	mov	r4, r2
 800a538:	461d      	mov	r5, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	181b      	adds	r3, r3, r0
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	462b      	mov	r3, r5
 800a542:	eb41 0303 	adc.w	r3, r1, r3
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	f04f 0200 	mov.w	r2, #0
 800a54c:	f04f 0300 	mov.w	r3, #0
 800a550:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a554:	4629      	mov	r1, r5
 800a556:	02cb      	lsls	r3, r1, #11
 800a558:	4621      	mov	r1, r4
 800a55a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a55e:	4621      	mov	r1, r4
 800a560:	02ca      	lsls	r2, r1, #11
 800a562:	461c      	mov	r4, r3
 800a564:	4613      	mov	r3, r2
 800a566:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a56a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a56e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a572:	f7f5 fea5 	bl	80002c0 <__aeabi_uldivmod>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800a57e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	f04f 0400 	mov.w	r4, #0
 800a58a:	f04f 0500 	mov.w	r5, #0
 800a58e:	015d      	lsls	r5, r3, #5
 800a590:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a594:	0154      	lsls	r4, r2, #5
 800a596:	4622      	mov	r2, r4
 800a598:	462b      	mov	r3, r5
 800a59a:	1a14      	subs	r4, r2, r0
 800a59c:	60bc      	str	r4, [r7, #8]
 800a59e:	eb63 0301 	sbc.w	r3, r3, r1
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	f04f 0300 	mov.w	r3, #0
 800a5ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a5b0:	464c      	mov	r4, r9
 800a5b2:	00a3      	lsls	r3, r4, #2
 800a5b4:	4644      	mov	r4, r8
 800a5b6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a5ba:	4644      	mov	r4, r8
 800a5bc:	00a2      	lsls	r2, r4, #2
 800a5be:	4614      	mov	r4, r2
 800a5c0:	461d      	mov	r5, r3
 800a5c2:	4623      	mov	r3, r4
 800a5c4:	181b      	adds	r3, r3, r0
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	eb41 0303 	adc.w	r3, r1, r3
 800a5ce:	607b      	str	r3, [r7, #4]
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a5dc:	4629      	mov	r1, r5
 800a5de:	02cb      	lsls	r3, r1, #11
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	02ca      	lsls	r2, r1, #11
 800a5ea:	461c      	mov	r4, r3
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a5f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a5f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a5fa:	f7f5 fe61 	bl	80002c0 <__aeabi_uldivmod>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800a606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a60a:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a60c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d802      	bhi.n	800a61a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800a614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a616:	2202      	movs	r2, #2
 800a618:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a61a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3788      	adds	r7, #136	@ 0x88
 800a622:	46bd      	mov	sp, r7
 800a624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a628 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b096      	sub	sp, #88	@ 0x58
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a636:	2300      	movs	r3, #0
 800a638:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3318      	adds	r3, #24
 800a640:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a644:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a648:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64c:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800a650:	331c      	adds	r3, #28
 800a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a654:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d107      	bne.n	800a66c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	889b      	ldrh	r3, [r3, #4]
 800a660:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	609a      	str	r2, [r3, #8]
 800a66a:	e002      	b.n	800a672 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	899b      	ldrh	r3, [r3, #12]
 800a67c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	89db      	ldrh	r3, [r3, #14]
 800a684:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d126      	bne.n	800a6ea <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69e:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d022      	beq.n	800a6ea <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a6a4:	f107 0317 	add.w	r3, r7, #23
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 fea7 	bl	800b3fe <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6bc:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d003      	beq.n	800a6cc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6ca:	e006      	b.n	800a6da <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d2:	3202      	adds	r2, #2
 800a6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d8:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a6f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	795b      	ldrb	r3, [r3, #5]
 800a700:	f043 0301 	orr.w	r3, r3, #1
 800a704:	b2da      	uxtb	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a714:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	795b      	ldrb	r3, [r3, #5]
 800a720:	f043 0302 	orr.w	r3, r3, #2
 800a724:	b2da      	uxtb	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a72a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a730:	2301      	movs	r3, #1
 800a732:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d108      	bne.n	800a750 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a742:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a74a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a74e:	e017      	b.n	800a780 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a750:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a754:	019a      	lsls	r2, r3, #6
 800a756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a758:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800a766:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a768:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a76c:	019a      	lsls	r2, r3, #6
 800a76e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a77e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d12a      	bne.n	800a7e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800a792:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a796:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a79a:	119b      	asrs	r3, r3, #6
 800a79c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a4:	db02      	blt.n	800a7ac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800a7a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7aa:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a7ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ae:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800a7bc:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a7c0:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c4:	119b      	asrs	r3, r3, #6
 800a7c6:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ce:	db02      	blt.n	800a7d6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800a7d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7d4:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d8:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	81da      	strh	r2, [r3, #14]
 800a7de:	e042      	b.n	800a866 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d13d      	bne.n	800a866 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a7ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a7f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	da00      	bge.n	800a7fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800a7fa:	330f      	adds	r3, #15
 800a7fc:	111b      	asrs	r3, r3, #4
 800a7fe:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a806:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a80c:	4413      	add	r3, r2
 800a80e:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a816:	db02      	blt.n	800a81e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800a818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a81c:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a820:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a82a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a832:	4a55      	ldr	r2, [pc, #340]	@ (800a988 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800a834:	fb82 1203 	smull	r1, r2, r2, r3
 800a838:	1152      	asrs	r2, r2, #5
 800a83a:	17db      	asrs	r3, r3, #31
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a846:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84c:	4413      	add	r3, r2
 800a84e:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a856:	db02      	blt.n	800a85e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800a858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a85c:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a860:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d17f      	bne.n	800a96e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800a86e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a872:	2b01      	cmp	r3, #1
 800a874:	d07b      	beq.n	800a96e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2201      	movs	r2, #1
 800a87a:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a882:	f107 0317 	add.w	r3, r7, #23
 800a886:	4619      	mov	r1, r3
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fdb8 	bl	800b3fe <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a890:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a898:	3308      	adds	r3, #8
 800a89a:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d049      	beq.n	800a936 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a4:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d144      	bne.n	800a936 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d041      	beq.n	800a936 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800a8b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da01      	bge.n	800a8c6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800a8c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a8c6:	125b      	asrs	r3, r3, #9
 800a8c8:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d4:	461a      	mov	r2, r3
			if ((max ==  0)||
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	db03      	blt.n	800a8e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	719a      	strb	r2, [r3, #6]
 800a8e2:	e028      	b.n	800a936 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800a8e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a8f8:	e014      	b.n	800a924 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800a8fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	4413      	add	r3, r2
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800a902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a904:	4a21      	ldr	r2, [pc, #132]	@ (800a98c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	095a      	lsrs	r2, r3, #5
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	441a      	add	r2, r3
 800a910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a912:	601a      	str	r2, [r3, #0]
					pcpo++;
 800a914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a916:	3304      	adds	r3, #4
 800a918:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800a91a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a91e:	3301      	adds	r3, #1
 800a920:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a924:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	3b01      	subs	r3, #1
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d3e4      	bcc.n	800a8fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800a930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a934:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	799b      	ldrb	r3, [r3, #6]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d017      	beq.n	800a96e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800a942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a944:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	789b      	ldrb	r3, [r3, #2]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d105      	bne.n	800a96e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800a96e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a972:	2b01      	cmp	r3, #1
 800a974:	d002      	beq.n	800a97c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a97c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800a980:	4618      	mov	r0, r3
 800a982:	3758      	adds	r7, #88	@ 0x58
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	66666667 	.word	0x66666667
 800a98c:	51eb851f 	.word	0x51eb851f

0800a990 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800a990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a994:	b0a2      	sub	sp, #136	@ 0x88
 800a996:	af02      	add	r7, sp, #8
 800a998:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	3318      	adds	r3, #24
 800a9a4:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a9ac:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800a9ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a9b4:	3314      	adds	r3, #20
 800a9b6:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a9b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9ba:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a9be:	3318      	adds	r3, #24
 800a9c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800a9c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a9c8:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800a9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9cc:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a9ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9d0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a9d4:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aa20:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800aa24:	4619      	mov	r1, r3
 800aa26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa28:	f000 fce9 	bl	800b3fe <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800aa2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800aa34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa36:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d002      	beq.n	800aa44 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800aa44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800aa46:	f000 fb10 	bl	800b06a <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aa4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00a      	beq.n	800aa68 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800aa52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa5a:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800aa5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa60:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d901      	bls.n	800aa6c <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e000      	b.n	800aa6e <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800aa72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa74:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d106      	bne.n	800aa8a <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800aa7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa7e:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800aa82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d101      	bne.n	800aa8e <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e000      	b.n	800aa90 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800aa8e:	2300      	movs	r3, #0
	merging_complete =
 800aa90:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800aa94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa96:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d10e      	bne.n	800aaba <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800aa9c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00a      	beq.n	800aaba <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800aaa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa6:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800aaaa:	2b09      	cmp	r3, #9
 800aaac:	d105      	bne.n	800aaba <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aaae:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e000      	b.n	800aabc <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800aaba:	2300      	movs	r3, #0
	run_smudge_detection =
 800aabc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800aac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aac2:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800aac6:	2b09      	cmp	r3, #9
 800aac8:	f000 80a6 	beq.w	800ac18 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800aacc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aace:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	f040 80a1 	bne.w	800ac18 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800aad6:	2302      	movs	r3, #2
 800aad8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800aadc:	2300      	movs	r3, #0
 800aade:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800aae2:	e02d      	b.n	800ab40 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800aae4:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800aae8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aaea:	234c      	movs	r3, #76	@ 0x4c
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	335e      	adds	r3, #94	@ 0x5e
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d11d      	bne.n	800ab36 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800aafa:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800aafe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab00:	234c      	movs	r3, #76	@ 0x4c
 800ab02:	fb01 f303 	mul.w	r3, r1, r3
 800ab06:	4413      	add	r3, r2
 800ab08:	335a      	adds	r3, #90	@ 0x5a
 800ab0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab0e:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ab10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab12:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ab14:	429a      	cmp	r2, r3
 800ab16:	dc03      	bgt.n	800ab20 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ab1e:	e00a      	b.n	800ab36 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800ab20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d106      	bne.n	800ab36 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800ab2e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab32:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ab36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ab40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab42:	7c9a      	ldrb	r2, [r3, #18]
 800ab44:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d3cb      	bcc.n	800aae4 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ab4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d102      	bne.n	800ab5a <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ab5a:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800ab5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab60:	234c      	movs	r3, #76	@ 0x4c
 800ab62:	fb01 f303 	mul.w	r3, r1, r3
 800ab66:	4413      	add	r3, r2
 800ab68:	3348      	adds	r3, #72	@ 0x48
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800ab6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d150      	bne.n	800ac18 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800ab76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab78:	2200      	movs	r2, #0
 800ab7a:	469a      	mov	sl, r3
 800ab7c:	4693      	mov	fp, r2
 800ab7e:	4652      	mov	r2, sl
 800ab80:	465b      	mov	r3, fp
 800ab82:	f04f 0000 	mov.w	r0, #0
 800ab86:	f04f 0100 	mov.w	r1, #0
 800ab8a:	0159      	lsls	r1, r3, #5
 800ab8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab90:	0150      	lsls	r0, r2, #5
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	ebb2 040a 	subs.w	r4, r2, sl
 800ab9a:	eb63 050b 	sbc.w	r5, r3, fp
 800ab9e:	f04f 0200 	mov.w	r2, #0
 800aba2:	f04f 0300 	mov.w	r3, #0
 800aba6:	00ab      	lsls	r3, r5, #2
 800aba8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800abac:	00a2      	lsls	r2, r4, #2
 800abae:	4614      	mov	r4, r2
 800abb0:	461d      	mov	r5, r3
 800abb2:	eb14 080a 	adds.w	r8, r4, sl
 800abb6:	eb45 090b 	adc.w	r9, r5, fp
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abce:	4690      	mov	r8, r2
 800abd0:	4699      	mov	r9, r3
 800abd2:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800abd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	024b      	lsls	r3, r1, #9
 800abe4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800abe8:	0242      	lsls	r2, r0, #9
 800abea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800abee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf2:	2200      	movs	r2, #0
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	61fa      	str	r2, [r7, #28]
 800abf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abfc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ac00:	4621      	mov	r1, r4
 800ac02:	428a      	cmp	r2, r1
 800ac04:	4629      	mov	r1, r5
 800ac06:	418b      	sbcs	r3, r1
 800ac08:	d203      	bcs.n	800ac12 <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ac10:	e002      	b.n	800ac18 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800ac18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 810b 	beq.w	800ae38 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800ac22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac24:	2200      	movs	r2, #0
 800ac26:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ac28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac2a:	f7ff fb98 	bl	800a35e <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac30:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ac36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ac42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac44:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ac4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac52:	4413      	add	r3, r2
 800ac54:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ac56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	da02      	bge.n	800ac62 <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800ac5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac5e:	425b      	negs	r3, r3
 800ac60:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ac62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	461a      	mov	r2, r3
 800ac68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	dd0c      	ble.n	800ac88 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ac6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ac70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ac72:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ac74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac76:	429a      	cmp	r2, r3
 800ac78:	da03      	bge.n	800ac82 <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800ac7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	709a      	strb	r2, [r3, #2]
 800ac80:	e002      	b.n	800ac88 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ac82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac84:	2202      	movs	r2, #2
 800ac86:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ac88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac90:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ac92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d906      	bls.n	800acac <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800ac9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aca0:	2201      	movs	r2, #1
 800aca2:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800aca4:	2302      	movs	r3, #2
 800aca6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800acaa:	e014      	b.n	800acd6 <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800acac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800acb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb4:	2000      	movs	r0, #0
 800acb6:	6139      	str	r1, [r7, #16]
 800acb8:	6178      	str	r0, [r7, #20]
 800acba:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800acbe:	4621      	mov	r1, r4
 800acc0:	1851      	adds	r1, r2, r1
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	4629      	mov	r1, r5
 800acc6:	eb43 0101 	adc.w	r1, r3, r1
 800acca:	60f9      	str	r1, [r7, #12]
 800accc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800acd2:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800acd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d202      	bcs.n	800ace8 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ace8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800acee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	603b      	str	r3, [r7, #0]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfc:	f7f5 fae0 	bl	80002c0 <__aeabi_uldivmod>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ad04:	4613      	mov	r3, r2
 800ad06:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ad08:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0c:	1ad2      	subs	r2, r2, r3
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad10:	4413      	add	r3, r2
 800ad12:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ad14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da02      	bge.n	800ad20 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800ad1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad1c:	425b      	negs	r3, r3
 800ad1e:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ad20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d112      	bne.n	800ad4e <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ad28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ad2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad30:	4293      	cmp	r3, r2
 800ad32:	db0c      	blt.n	800ad4e <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ad34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800ad36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ad38:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ad3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	da03      	bge.n	800ad48 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800ad40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad42:	2201      	movs	r2, #1
 800ad44:	70da      	strb	r2, [r3, #3]
 800ad46:	e002      	b.n	800ad4e <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ad48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ad4e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d108      	bne.n	800ad68 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ad56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ad5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	da02      	bge.n	800ad68 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800ad62:	2302      	movs	r3, #2
 800ad64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800ad68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ad6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d112      	bne.n	800ad9c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ad76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad78:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00e      	beq.n	800ad9c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ad7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ad86:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ad8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d905      	bls.n	800ad9c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800ad90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad92:	2201      	movs	r2, #1
 800ad94:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ad96:	2302      	movs	r3, #2
 800ad98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ad9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad9e:	7c1b      	ldrb	r3, [r3, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ada4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ada6:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ada8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adaa:	429a      	cmp	r2, r3
 800adac:	d902      	bls.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800adae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800adb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adb6:	7c1b      	ldrb	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d107      	bne.n	800adcc <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800adbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adbe:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800adc0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d202      	bcs.n	800adcc <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800adc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800adcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adce:	089b      	lsrs	r3, r3, #2
 800add0:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800add2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800add8:	d301      	bcc.n	800adde <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800adda:	4b3f      	ldr	r3, [pc, #252]	@ (800aed8 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800addc:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800adde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10d      	bne.n	800ae02 <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ade6:	2300      	movs	r3, #0
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	2301      	movs	r3, #1
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800adf2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800adf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800adf6:	f7ff fc17 	bl	800a628 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800adfa:	2302      	movs	r3, #2
 800adfc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ae00:	e009      	b.n	800ae16 <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ae02:	2301      	movs	r3, #1
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	2301      	movs	r3, #1
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae0e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ae10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae12:	f7ff fc09 	bl	800a628 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ae16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d10c      	bne.n	800ae38 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800ae1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ae20:	f04f 0200 	mov.w	r2, #0
 800ae24:	f04f 0300 	mov.w	r3, #0
 800ae28:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ae2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ae32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae34:	2200      	movs	r2, #0
 800ae36:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800ae3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d140      	bne.n	800aec8 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800ae46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae4e:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800ae50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d202      	bcs.n	800ae62 <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800ae62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae66:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800ae68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d110      	bne.n	800ae92 <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ae70:	2300      	movs	r3, #0
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	2300      	movs	r3, #0
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae7c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ae7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae80:	f7ff fbd2 	bl	800a628 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ae84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae86:	2202      	movs	r2, #2
 800ae88:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ae90:	e009      	b.n	800aea6 <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ae92:	2301      	movs	r3, #1
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	2300      	movs	r3, #0
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae9e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800aea0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aea2:	f7ff fbc1 	bl	800a628 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800aea6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d10c      	bne.n	800aec8 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800aeae:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800aeb0:	f04f 0200 	mov.w	r2, #0
 800aeb4:	f04f 0300 	mov.w	r3, #0
 800aeb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800aebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800aec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aec4:	2200      	movs	r2, #0
 800aec6:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800aec8:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3780      	adds	r7, #128	@ 0x80
 800aed0:	46bd      	mov	sp, r7
 800aed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aed6:	bf00      	nop
 800aed8:	0003ffff 	.word	0x0003ffff

0800aedc <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3318      	adds	r3, #24
 800aeec:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800aef4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af20:	2200      	movs	r2, #0
 800af22:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af2c:	461a      	mov	r2, r3
 800af2e:	2364      	movs	r3, #100	@ 0x64
 800af30:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af3a:	461a      	mov	r2, r3
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af54:	461a      	mov	r2, r3
 800af56:	23c8      	movs	r3, #200	@ 0xc8
 800af58:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af62:	461a      	mov	r2, r3
 800af64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af68:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af72:	461a      	mov	r2, r3
 800af74:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800af78:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af82:	461a      	mov	r2, r3
 800af84:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800af88:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af92:	461a      	mov	r2, r3
 800af94:	2380      	movs	r3, #128	@ 0x80
 800af96:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afb0:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afbe:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afd4:	461a      	mov	r2, r3
 800afd6:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800afda:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe4:	461a      	mov	r2, r3
 800afe6:	2328      	movs	r3, #40	@ 0x28
 800afe8:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aff2:	461a      	mov	r2, r3
 800aff4:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800aff8:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b002:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b006:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b010:	461a      	mov	r2, r3
 800b012:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b016:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b020:	461a      	mov	r2, r3
 800b022:	2300      	movs	r3, #0
 800b024:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b02e:	461a      	mov	r2, r3
 800b030:	2300      	movs	r3, #0
 800b032:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800b03c:	4619      	mov	r1, r3
 800b03e:	f04f 0200 	mov.w	r2, #0
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b050:	461a      	mov	r2, r3
 800b052:	2300      	movs	r3, #0
 800b054:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f806 	bl	800b06a <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b07c:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2200      	movs	r2, #0
 800b08e:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2200      	movs	r2, #0
 800b094:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2200      	movs	r2, #0
 800b09a:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3318      	adds	r3, #24
 800b0da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800b108:	3304      	adds	r3, #4
 800b10a:	2218      	movs	r2, #24
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f00b fdb8 	bl	8016c84 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3318      	adds	r3, #24
 800b130:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b138:	2203      	movs	r2, #3
 800b13a:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b144:	2200      	movs	r2, #0
 800b146:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b150:	2200      	movs	r2, #0
 800b152:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b174:	2200      	movs	r2, #0
 800b176:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b180:	2200      	movs	r2, #0
 800b182:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b18c:	461a      	mov	r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800b1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3318      	adds	r3, #24
 800b1c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1c8:	22ff      	movs	r2, #255	@ 0xff
 800b1ca:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d007      	beq.n	800b212 <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b208:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b218:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b226:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3318      	adds	r3, #24
 800b254:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b256:	2300      	movs	r3, #0
 800b258:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b266:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b276:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800b280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b284:	b2da      	uxtb	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800b292:	f003 0303 	and.w	r3, r3, #3
 800b296:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b29e:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b2a6:	4413      	add	r3, r2
 800b2a8:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2be:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2c8:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2d2:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b2dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3318      	adds	r3, #24
 800b2f8:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800b300:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b302:	2300      	movs	r3, #0
 800b304:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	8a1b      	ldrh	r3, [r3, #16]
 800b30a:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	891b      	ldrh	r3, [r3, #8]
 800b310:	4413      	add	r3, r2
	utemp32a =
 800b312:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b31a:	d302      	bcc.n	800b322 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b31c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b320:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	041b      	lsls	r3, r3, #16
 800b326:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b332:	23f1      	movs	r3, #241	@ 0xf1
 800b334:	75fb      	strb	r3, [r7, #23]
 800b336:	e040      	b.n	800b3ba <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b33e:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	fbb3 f3f2 	udiv	r3, r3, r2
 800b346:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b34e:	461a      	mov	r2, r3
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b35c:	041b      	lsls	r3, r3, #16
 800b35e:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b366:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b36e:	23f1      	movs	r3, #241	@ 0xf1
 800b370:	75fb      	strb	r3, [r7, #23]
 800b372:	e022      	b.n	800b3ba <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	fbb2 f3f3 	udiv	r3, r2, r3
 800b384:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b38c:	d302      	bcc.n	800b394 <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800b38e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b392:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39e:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a8:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3be:	f113 0f0f 	cmn.w	r3, #15
 800b3c2:	d114      	bne.n	800b3ee <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b3ce:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d8:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b087      	sub	sp, #28
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3318      	adds	r3, #24
 800b40c:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800b41c:	2b07      	cmp	r3, #7
 800b41e:	bf0c      	ite	eq
 800b420:	2301      	moveq	r3, #1
 800b422:	2300      	movne	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
 800b42c:	e019      	b.n	800b462 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b42e:	7df9      	ldrb	r1, [r7, #23]
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	6938      	ldr	r0, [r7, #16]
 800b434:	461a      	mov	r2, r3
 800b436:	0052      	lsls	r2, r2, #1
 800b438:	441a      	add	r2, r3
 800b43a:	0153      	lsls	r3, r2, #5
 800b43c:	461a      	mov	r2, r3
 800b43e:	460b      	mov	r3, r1
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	440b      	add	r3, r1
 800b444:	019b      	lsls	r3, r3, #6
 800b446:	4413      	add	r3, r2
 800b448:	4403      	add	r3, r0
 800b44a:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b44e:	330c      	adds	r3, #12
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	dd02      	ble.n	800b45c <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b456:	7dbb      	ldrb	r3, [r7, #22]
 800b458:	3301      	adds	r3, #1
 800b45a:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	3301      	adds	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	2b05      	cmp	r3, #5
 800b466:	d9e2      	bls.n	800b42e <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	7dba      	ldrb	r2, [r7, #22]
 800b46c:	701a      	strb	r2, [r3, #0]

	return status;
 800b46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b47e:	b480      	push	{r7}
 800b480:	b085      	sub	sp, #20
 800b482:	af00      	add	r7, sp, #0
 800b484:	4603      	mov	r3, r0
 800b486:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d005      	beq.n	800b49e <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b492:	88fb      	ldrh	r3, [r7, #6]
 800b494:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b498:	fb92 f3f3 	sdiv	r3, r2, r3
 800b49c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b4ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4b0:	b089      	sub	sp, #36	@ 0x24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	607a      	str	r2, [r7, #4]
 800b4ba:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b4bc:	f04f 0200 	mov.w	r2, #0
 800b4c0:	f04f 0300 	mov.w	r3, #0
 800b4c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	fb02 f303 	mul.w	r3, r2, r3
 800b4d4:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	0b1b      	lsrs	r3, r3, #12
 800b4da:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	4693      	mov	fp, r2
 800b4e4:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	fb02 f303 	mul.w	r3, r2, r3
 800b4f0:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	091b      	lsrs	r3, r3, #4
 800b4f6:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4698      	mov	r8, r3
 800b4fe:	4691      	mov	r9, r2
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	fb08 f203 	mul.w	r2, r8, r3
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	fb09 f303 	mul.w	r3, r9, r3
 800b50c:	4413      	add	r3, r2
 800b50e:	69ba      	ldr	r2, [r7, #24]
 800b510:	fba2 4508 	umull	r4, r5, r2, r8
 800b514:	442b      	add	r3, r5
 800b516:	461d      	mov	r5, r3
 800b518:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800b51c:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b520:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b524:	f04f 0200 	mov.w	r2, #0
 800b528:	f04f 0300 	mov.w	r3, #0
 800b52c:	0b02      	lsrs	r2, r0, #12
 800b52e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b532:	0b0b      	lsrs	r3, r1, #12
 800b534:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d305      	bcc.n	800b54c <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800b540:	f04f 32ff 	mov.w	r2, #4294967295
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b550:	697b      	ldr	r3, [r7, #20]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3724      	adds	r7, #36	@ 0x24
 800b556:	46bd      	mov	sp, r7
 800b558:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b55c:	4770      	bx	lr

0800b55e <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b55e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b562:	b096      	sub	sp, #88	@ 0x58
 800b564:	af00      	add	r7, sp, #0
 800b566:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b568:	460b      	mov	r3, r1
 800b56a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b56c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800b56e:	f04f 0200 	mov.w	r2, #0
 800b572:	f04f 0300 	mov.w	r3, #0
 800b576:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58c:	17da      	asrs	r2, r3, #31
 800b58e:	469a      	mov	sl, r3
 800b590:	4693      	mov	fp, r2
 800b592:	4652      	mov	r2, sl
 800b594:	465b      	mov	r3, fp
 800b596:	f04f 0000 	mov.w	r0, #0
 800b59a:	f04f 0100 	mov.w	r1, #0
 800b59e:	0159      	lsls	r1, r3, #5
 800b5a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b5a4:	0150      	lsls	r0, r2, #5
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	ebb2 040a 	subs.w	r4, r2, sl
 800b5ae:	eb63 050b 	sbc.w	r5, r3, fp
 800b5b2:	f04f 0200 	mov.w	r2, #0
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	00ab      	lsls	r3, r5, #2
 800b5bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b5c0:	00a2      	lsls	r2, r4, #2
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	461d      	mov	r5, r3
 800b5c6:	eb14 080a 	adds.w	r8, r4, sl
 800b5ca:	eb45 090b 	adc.w	r9, r5, fp
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b5da:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800b5de:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800b5e2:	4690      	mov	r8, r2
 800b5e4:	4699      	mov	r9, r3
 800b5e6:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800b5ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00d      	beq.n	800b60c <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800b5f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	61fa      	str	r2, [r7, #28]
 800b5f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b600:	f7f4 fe5e 	bl	80002c0 <__aeabi_uldivmod>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d02a      	beq.n	800b668 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b612:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	f04f 0300 	mov.w	r3, #0
 800b61e:	02cb      	lsls	r3, r1, #11
 800b620:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b624:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b628:	0849      	lsrs	r1, r1, #1
 800b62a:	2000      	movs	r0, #0
 800b62c:	6139      	str	r1, [r7, #16]
 800b62e:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b630:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b634:	4621      	mov	r1, r4
 800b636:	1851      	adds	r1, r2, r1
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	4629      	mov	r1, r5
 800b63c:	eb43 0101 	adc.w	r1, r3, r1
 800b640:	6079      	str	r1, [r7, #4]
 800b642:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b646:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	2200      	movs	r2, #0
 800b64e:	60bb      	str	r3, [r7, #8]
 800b650:	60fa      	str	r2, [r7, #12]
 800b652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b656:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b65a:	f7f4 fe31 	bl	80002c0 <__aeabi_uldivmod>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800b666:	e00b      	b.n	800b680 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b668:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	02cb      	lsls	r3, r1, #11
 800b676:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b67a:	02c2      	lsls	r2, r0, #11
 800b67c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b682:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800b684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b686:	4618      	mov	r0, r3
 800b688:	3758      	adds	r7, #88	@ 0x58
 800b68a:	46bd      	mov	sp, r7
 800b68c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b690 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b69c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b6a0:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b6a2:	e002      	b.n	800b6aa <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	089b      	lsrs	r3, r3, #2
 800b6a8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d8f8      	bhi.n	800b6a4 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b6b2:	e017      	b.n	800b6e4 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d30b      	bcc.n	800b6d8 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	085b      	lsrs	r3, r3, #1
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	e002      	b.n	800b6de <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	085b      	lsrs	r3, r3, #1
 800b6dc:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	089b      	lsrs	r3, r3, #2
 800b6e2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e4      	bne.n	800b6b4 <VL53LX_isqrt+0x24>
	}

	return res;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 faa6 	bl	800bc60 <VL53LX_decode_vcsel_period>
 800b714:	4603      	mov	r3, r0
	period = 2048 *
 800b716:	02db      	lsls	r3, r3, #11
 800b718:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800b724:	461a      	mov	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4413      	add	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b732:	02db      	lsls	r3, r3, #11
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4413      	add	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b740:	02db      	lsls	r3, r3, #11
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	fbb3 f2f2 	udiv	r2, r3, r2
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	fb01 f202 	mul.w	r2, r1, r2
 800b75c:	1a9b      	subs	r3, r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	e001      	b.n	800b766 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	b29a      	uxth	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800b770:	bf00      	nop
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b78a:	6838      	ldr	r0, [r7, #0]
 800b78c:	f000 fb91 	bl	800beb2 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff ff7a 	bl	800b690 <VL53LX_isqrt>
 800b79c:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b79e:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	fb02 f303 	mul.w	r3, r2, r3
 800b7a8:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	3307      	adds	r3, #7
 800b7ae:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	111b      	asrs	r3, r3, #4
 800b7b4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	4413      	add	r3, r2
 800b7c0:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
 800b7d6:	e01e      	b.n	800b816 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b7d8:	7bfa      	ldrb	r2, [r7, #15]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	3206      	adds	r2, #6
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	dd13      	ble.n	800b810 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b7ee:	7bf9      	ldrb	r1, [r7, #15]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	3106      	adds	r1, #6
 800b7f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7f8:	441a      	add	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b806:	3301      	adds	r3, #1
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b810:	7bfb      	ldrb	r3, [r7, #15]
 800b812:	3301      	adds	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	7a9b      	ldrb	r3, [r3, #10]
 800b81a:	7bfa      	ldrb	r2, [r7, #15]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d3db      	bcc.n	800b7d8 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b826:	2b00      	cmp	r3, #0
 800b828:	d01c      	beq.n	800b864 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800b842:	0852      	lsrs	r2, r2, #1
 800b844:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b846:	441a      	add	r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800b85a:	fb93 f2f2 	sdiv	r2, r3, r2
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b864:	bf00      	nop
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7b1b      	ldrb	r3, [r3, #12]
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	2b07      	cmp	r3, #7
 800b88a:	d13a      	bne.n	800b902 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b890:	2300      	movs	r3, #0
 800b892:	73bb      	strb	r3, [r7, #14]
 800b894:	e01f      	b.n	800b8d6 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	4413      	add	r3, r2
 800b89c:	7b1b      	ldrb	r3, [r3, #12]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	2b07      	cmp	r3, #7
 800b8a4:	d014      	beq.n	800b8d0 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b8a6:	7bba      	ldrb	r2, [r7, #14]
 800b8a8:	7b7b      	ldrb	r3, [r7, #13]
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	440a      	add	r2, r1
 800b8ae:	7b11      	ldrb	r1, [r2, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	460a      	mov	r2, r1
 800b8b6:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b8b8:	7bba      	ldrb	r2, [r7, #14]
 800b8ba:	7b7b      	ldrb	r3, [r7, #13]
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	440a      	add	r2, r1
 800b8c0:	7c91      	ldrb	r1, [r2, #18]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	460a      	mov	r2, r1
 800b8c8:	749a      	strb	r2, [r3, #18]
				i++;
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	73bb      	strb	r3, [r7, #14]
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	2b05      	cmp	r3, #5
 800b8da:	d9dc      	bls.n	800b896 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8dc:	7b7b      	ldrb	r3, [r7, #13]
 800b8de:	73bb      	strb	r3, [r7, #14]
 800b8e0:	e00c      	b.n	800b8fc <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	2210      	movs	r2, #16
 800b8ea:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	73bb      	strb	r3, [r7, #14]
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	2b05      	cmp	r3, #5
 800b900:	d9ef      	bls.n	800b8e2 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7adb      	ldrb	r3, [r3, #11]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d023      	beq.n	800b952 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	7adb      	ldrb	r3, [r3, #11]
 800b90e:	73fb      	strb	r3, [r7, #15]
 800b910:	e00f      	b.n	800b932 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b912:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	7ad2      	ldrb	r2, [r2, #11]
 800b91a:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3106      	adds	r1, #6
 800b920:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3206      	adds	r2, #6
 800b928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	3301      	adds	r3, #1
 800b930:	73fb      	strb	r3, [r7, #15]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	7a5b      	ldrb	r3, [r3, #9]
 800b936:	7bfa      	ldrb	r2, [r7, #15]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d3ea      	bcc.n	800b912 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	72da      	strb	r2, [r3, #11]
	}
}
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	4603      	mov	r3, r0
 800b966:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fd83 	bl	800b47e <VL53LX_calc_pll_period_us>
 800b978:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800b97e:	f249 2257 	movw	r2, #37463	@ 0x9257
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b98e:	0c1b      	lsrs	r3, r3, #16
 800b990:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800b992:	68bb      	ldr	r3, [r7, #8]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800b9aa:	2307      	movs	r3, #7
 800b9ac:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9b8:	db03      	blt.n	800b9c2 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800b9ba:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e004      	b.n	800b9cc <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dd01      	ble.n	800b9cc <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9d2:	dd02      	ble.n	800b9da <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	e001      	b.n	800b9de <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800b9da:	2307      	movs	r3, #7
 800b9dc:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d009      	beq.n	800b9f8 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	409a      	lsls	r2, r3
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	085b      	lsrs	r3, r3, #1
 800b9ee:	441a      	add	r2, r3
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f6:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9fe:	dd02      	ble.n	800ba06 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba0c:	d302      	bcc.n	800ba14 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ba0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba12:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ba18:	89fb      	ldrh	r3, [r7, #14]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b087      	sub	sp, #28
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	4613      	mov	r3, r2
 800ba34:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d010      	beq.n	800ba66 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	021a      	lsls	r2, r3, #8
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4e:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	085b      	lsrs	r3, r3, #1
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ba5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e004      	b.n	800ba70 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba6e:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d901      	bls.n	800ba7c <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ba80:	8a7b      	ldrh	r3, [r7, #18]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	b093      	sub	sp, #76	@ 0x4c
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	461e      	mov	r6, r3
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ba9e:	460b      	mov	r3, r1
 800baa0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800baa2:	4613      	mov	r3, r2
 800baa4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800baa6:	4633      	mov	r3, r6
 800baa8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bac4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fcd9 	bl	800b47e <VL53LX_calc_pll_period_us>
 800bacc:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bace:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bad0:	2200      	movs	r2, #0
 800bad2:	623b      	str	r3, [r7, #32]
 800bad4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bad6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bad8:	2200      	movs	r2, #0
 800bada:	61bb      	str	r3, [r7, #24]
 800badc:	61fa      	str	r2, [r7, #28]
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bae4:	4602      	mov	r2, r0
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baec:	460a      	mov	r2, r1
 800baee:	eb63 0302 	sbc.w	r3, r3, r2
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800baf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bafc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bafe:	2200      	movs	r2, #0
 800bb00:	469a      	mov	sl, r3
 800bb02:	4693      	mov	fp, r2
 800bb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb06:	fb0a f203 	mul.w	r2, sl, r3
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	fb0b f303 	mul.w	r3, fp, r3
 800bb10:	4413      	add	r3, r2
 800bb12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb14:	fba2 890a 	umull	r8, r9, r2, sl
 800bb18:	444b      	add	r3, r9
 800bb1a:	4699      	mov	r9, r3
 800bb1c:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800bb20:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bb24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da08      	bge.n	800bb3e <VL53LX_range_maths+0xae>
 800bb2c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800bb30:	1851      	adds	r1, r2, r1
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	f143 0300 	adc.w	r3, r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb3e:	f04f 0000 	mov.w	r0, #0
 800bb42:	f04f 0100 	mov.w	r1, #0
 800bb46:	0a50      	lsrs	r0, r2, #9
 800bb48:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bb4c:	1259      	asrs	r1, r3, #9
 800bb4e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bb52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb54:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bb58:	fb03 f202 	mul.w	r2, r3, r2
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5e:	2100      	movs	r1, #0
 800bb60:	fb01 f303 	mul.w	r3, r1, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb68:	f249 2157 	movw	r1, #37463	@ 0x9257
 800bb6c:	fba2 4501 	umull	r4, r5, r2, r1
 800bb70:	442b      	add	r3, r5
 800bb72:	461d      	mov	r5, r3
 800bb74:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800bb78:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bb7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da07      	bge.n	800bb94 <VL53LX_range_maths+0x104>
 800bb84:	4934      	ldr	r1, [pc, #208]	@ (800bc58 <VL53LX_range_maths+0x1c8>)
 800bb86:	1851      	adds	r1, r2, r1
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	f143 0300 	adc.w	r3, r3, #0
 800bb8e:	607b      	str	r3, [r7, #4]
 800bb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb94:	f04f 0000 	mov.w	r0, #0
 800bb98:	f04f 0100 	mov.w	r1, #0
 800bb9c:	0d90      	lsrs	r0, r2, #22
 800bb9e:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bba2:	1599      	asrs	r1, r3, #22
 800bba4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bbac:	4413      	add	r3, r2
 800bbae:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800bbb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bbb4:	fb02 f303 	mul.w	r3, r2, r3
 800bbb8:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800bbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bbc0:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800bbc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	da01      	bge.n	800bbcc <VL53LX_range_maths+0x13c>
 800bbc8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800bbcc:	12db      	asrs	r3, r3, #11
 800bbce:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800bbd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d130      	bne.n	800bc3a <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800bbd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da00      	bge.n	800bbec <VL53LX_range_maths+0x15c>
 800bbea:	3303      	adds	r3, #3
 800bbec:	109b      	asrs	r3, r3, #2
 800bbee:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800bbf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bbf2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc5c <VL53LX_range_maths+0x1cc>)
 800bbf4:	fb83 2301 	smull	r2, r3, r3, r1
 800bbf8:	109a      	asrs	r2, r3, #2
 800bbfa:	17cb      	asrs	r3, r1, #31
 800bbfc:	1ad2      	subs	r2, r2, r3
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	1aca      	subs	r2, r1, r3
 800bc08:	2a04      	cmp	r2, #4
 800bc0a:	dc09      	bgt.n	800bc20 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0e:	4a13      	ldr	r2, [pc, #76]	@ (800bc5c <VL53LX_range_maths+0x1cc>)
 800bc10:	fb82 1203 	smull	r1, r2, r2, r3
 800bc14:	1092      	asrs	r2, r2, #2
 800bc16:	17db      	asrs	r3, r3, #31
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	b21b      	sxth	r3, r3
 800bc1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc1e:	e015      	b.n	800bc4c <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc22:	4a0e      	ldr	r2, [pc, #56]	@ (800bc5c <VL53LX_range_maths+0x1cc>)
 800bc24:	fb82 1203 	smull	r1, r2, r2, r3
 800bc28:	1092      	asrs	r2, r2, #2
 800bc2a:	17db      	asrs	r3, r3, #31
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3301      	adds	r3, #1
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	b21b      	sxth	r3, r3
 800bc36:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc38:	e008      	b.n	800bc4c <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800bc3a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d104      	bne.n	800bc4c <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800bc42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc44:	0fda      	lsrs	r2, r3, #31
 800bc46:	4413      	add	r3, r2
 800bc48:	105b      	asrs	r3, r3, #1
 800bc4a:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800bc4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	374c      	adds	r7, #76	@ 0x4c
 800bc52:	46bd      	mov	sp, r7
 800bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc58:	003fffff 	.word	0x003fffff
 800bc5c:	66666667 	.word	0x66666667

0800bc60 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	3301      	adds	r3, #1
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	781a      	ldrb	r2, [r3, #0]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7a5a      	ldrb	r2, [r3, #9]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	605a      	str	r2, [r3, #4]
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b087      	sub	sp, #28
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	60f8      	str	r0, [r7, #12]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	607a      	str	r2, [r7, #4]
 800bd0e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2203      	movs	r2, #3
 800bd18:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2203      	movs	r2, #3
 800bd1e:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2218      	movs	r2, #24
 800bd36:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bd38:	897b      	ldrh	r3, [r7, #10]
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	82fb      	strh	r3, [r7, #22]
 800bdda:	e009      	b.n	800bdf0 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bddc:	8afb      	ldrh	r3, [r7, #22]
 800bdde:	8afa      	ldrh	r2, [r7, #22]
 800bde0:	b2d1      	uxtb	r1, r2
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4413      	add	r3, r2
 800bde6:	460a      	mov	r2, r1
 800bde8:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdea:	8afb      	ldrh	r3, [r7, #22]
 800bdec:	3301      	adds	r3, #1
 800bdee:	82fb      	strh	r3, [r7, #22]
 800bdf0:	8afb      	ldrh	r3, [r7, #22]
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d9f2      	bls.n	800bddc <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	82fb      	strh	r3, [r7, #22]
 800bdfa:	e007      	b.n	800be0c <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bdfc:	8afb      	ldrh	r3, [r7, #22]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	2201      	movs	r2, #1
 800be04:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be06:	8afb      	ldrh	r3, [r7, #22]
 800be08:	3301      	adds	r3, #1
 800be0a:	82fb      	strh	r3, [r7, #22]
 800be0c:	8afb      	ldrh	r3, [r7, #22]
 800be0e:	2b05      	cmp	r3, #5
 800be10:	d9f4      	bls.n	800bdfc <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800be12:	2300      	movs	r3, #0
 800be14:	82fb      	strh	r3, [r7, #22]
 800be16:	e013      	b.n	800be40 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800be18:	8afa      	ldrh	r2, [r7, #22]
 800be1a:	897b      	ldrh	r3, [r7, #10]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d206      	bcs.n	800be2e <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800be20:	8afa      	ldrh	r2, [r7, #22]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3206      	adds	r2, #6
 800be26:	68f9      	ldr	r1, [r7, #12]
 800be28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be2c:	e005      	b.n	800be3a <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800be2e:	8afa      	ldrh	r2, [r7, #22]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3206      	adds	r2, #6
 800be34:	2100      	movs	r1, #0
 800be36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800be3a:	8afb      	ldrh	r3, [r7, #22]
 800be3c:	3301      	adds	r3, #1
 800be3e:	82fb      	strh	r3, [r7, #22]
 800be40:	8afb      	ldrh	r3, [r7, #22]
 800be42:	2b17      	cmp	r3, #23
 800be44:	d9e8      	bls.n	800be18 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800be62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be66:	2b00      	cmp	r3, #0
 800be68:	da10      	bge.n	800be8c <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	43db      	mvns	r3, r3
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	f003 0307 	and.w	r3, r3, #7
 800be74:	b2db      	uxtb	r3, r3
 800be76:	3308      	adds	r3, #8
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	3b80      	subs	r3, #128	@ 0x80
 800be82:	10db      	asrs	r3, r3, #3
 800be84:	b2da      	uxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800be8a:	e00c      	b.n	800bea6 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	b2da      	uxtb	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800be9e:	10db      	asrs	r3, r3, #3
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	701a      	strb	r2, [r3, #0]
}
 800bea6:	bf00      	nop
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
 800bec2:	e02c      	b.n	800bf1e <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d009      	beq.n	800bede <VL53LX_hist_find_min_max_bin_values+0x2c>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800bed0:	7bf9      	ldrb	r1, [r7, #15]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3106      	adds	r1, #6
 800bed6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beda:	429a      	cmp	r2, r3
 800bedc:	db07      	blt.n	800beee <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bede:	7bfa      	ldrb	r2, [r7, #15]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3206      	adds	r2, #6
 800bee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d009      	beq.n	800bf08 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800befa:	7bf9      	ldrb	r1, [r7, #15]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3106      	adds	r1, #6
 800bf00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	dc07      	bgt.n	800bf18 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bf08:	7bfa      	ldrb	r2, [r7, #15]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3206      	adds	r2, #6
 800bf0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	73fb      	strb	r3, [r7, #15]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7a9b      	ldrb	r3, [r3, #10]
 800bf22:	7bfa      	ldrb	r2, [r7, #15]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d3cd      	bcc.n	800bec4 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7adb      	ldrb	r3, [r3, #11]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d03a      	beq.n	800bfc0 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e00e      	b.n	800bf80 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bf68:	7bf9      	ldrb	r1, [r7, #15]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3106      	adds	r1, #6
 800bf6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf72:	441a      	add	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	73fb      	strb	r3, [r7, #15]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7adb      	ldrb	r3, [r3, #11]
 800bf84:	7bfa      	ldrb	r2, [r7, #15]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d3eb      	bcc.n	800bf62 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	7ad2      	ldrb	r2, [r2, #11]
 800bfa0:	0852      	lsrs	r2, r2, #1
 800bfa2:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bfa4:	441a      	add	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800bfb6:	fb93 f2f2 	sdiv	r2, r3, r2
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800bfcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfd0:	b0ca      	sub	sp, #296	@ 0x128
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800bfd8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800bfdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800bffe:	f04f 0200 	mov.w	r2, #0
 800c002:	f04f 0300 	mov.w	r3, #0
 800c006:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c010:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c014:	2300      	movs	r3, #0
 800c016:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c018:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c01c:	2300      	movs	r3, #0
 800c01e:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c020:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c024:	2300      	movs	r3, #0
 800c026:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c028:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c02c:	2300      	movs	r3, #0
 800c02e:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c030:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c034:	2300      	movs	r3, #0
 800c036:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c038:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c03c:	2300      	movs	r3, #0
 800c03e:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c040:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c044:	2300      	movs	r3, #0
 800c046:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800c048:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c04c:	2300      	movs	r3, #0
 800c04e:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800c050:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c054:	2300      	movs	r3, #0
 800c056:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c058:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c05c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80e1 	beq.w	800c228 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800c066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80da 	beq.w	800c228 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c078:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7ff f9fe 	bl	800b47e <VL53LX_calc_pll_period_us>
 800c082:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c08e:	3301      	adds	r3, #1
 800c090:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c098:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c09c:	2110      	movs	r1, #16
 800c09e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800c0a2:	f7ff fa03 	bl	800b4ac <VL53LX_duration_maths>
 800c0a6:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c0a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0ac:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c0ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c0b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f7ff fc6c 	bl	800b99c <VL53LX_rate_maths>
 800c0c4:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c0c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0ca:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c0cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0d0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800c0d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0d8:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800c0dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f7ff fa3b 	bl	800b55e <VL53LX_events_per_spad_maths>
 800c0e8:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c0ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c0ee:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c0f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0f4:	8adb      	ldrh	r3, [r3, #22]
 800c0f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0fa:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c0fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c100:	8adb      	ldrh	r3, [r3, #22]
 800c102:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c106:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c108:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 808a 	beq.w	800c228 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c118:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2200      	movs	r2, #0
 800c11e:	461c      	mov	r4, r3
 800c120:	4615      	mov	r5, r2
 800c122:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800c126:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c12a:	4622      	mov	r2, r4
 800c12c:	462b      	mov	r3, r5
 800c12e:	f04f 0000 	mov.w	r0, #0
 800c132:	f04f 0100 	mov.w	r1, #0
 800c136:	0159      	lsls	r1, r3, #5
 800c138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c13c:	0150      	lsls	r0, r2, #5
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	ebb2 0804 	subs.w	r8, r2, r4
 800c146:	eb63 0905 	sbc.w	r9, r3, r5
 800c14a:	f04f 0200 	mov.w	r2, #0
 800c14e:	f04f 0300 	mov.w	r3, #0
 800c152:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c156:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c15a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c15e:	4690      	mov	r8, r2
 800c160:	4699      	mov	r9, r3
 800c162:	eb18 0a04 	adds.w	sl, r8, r4
 800c166:	eb49 0b05 	adc.w	fp, r9, r5
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c176:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c17a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c17e:	4692      	mov	sl, r2
 800c180:	469b      	mov	fp, r3
 800c182:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800c186:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c18a:	f04f 0000 	mov.w	r0, #0
 800c18e:	f04f 0100 	mov.w	r1, #0
 800c192:	0319      	lsls	r1, r3, #12
 800c194:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c198:	0310      	lsls	r0, r2, #12
 800c19a:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800c19e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	085b      	lsrs	r3, r3, #1
 800c1a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800c1aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c1b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c1bc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	1851      	adds	r1, r2, r1
 800c1c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	eb43 0101 	adc.w	r1, r3, r1
 800c1cc:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800c1ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c1d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800c1d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1e2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c1e6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c1ea:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c1ee:	f7f4 f867 	bl	80002c0 <__aeabi_uldivmod>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1fe:	8adb      	ldrh	r3, [r3, #22]
 800c200:	b29b      	uxth	r3, r3
 800c202:	2200      	movs	r2, #0
 800c204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c208:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c20c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c210:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c214:	4621      	mov	r1, r4
 800c216:	428a      	cmp	r2, r1
 800c218:	4629      	mov	r1, r5
 800c21a:	418b      	sbcs	r3, r1
 800c21c:	d204      	bcs.n	800c228 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c21e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c222:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c226:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c228:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 82e9 	beq.w	800c806 <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800c234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c238:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 82e2 	beq.w	800c806 <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800c242:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c246:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 82dc 	beq.w	800c806 <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800c24e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 82d5 	beq.w	800c806 <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c25c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c260:	885b      	ldrh	r3, [r3, #2]
 800c262:	b29b      	uxth	r3, r3
 800c264:	2200      	movs	r2, #0
 800c266:	653b      	str	r3, [r7, #80]	@ 0x50
 800c268:	657a      	str	r2, [r7, #84]	@ 0x54
 800c26a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800c26e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800c272:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c276:	4622      	mov	r2, r4
 800c278:	462b      	mov	r3, r5
 800c27a:	f04f 0000 	mov.w	r0, #0
 800c27e:	f04f 0100 	mov.w	r1, #0
 800c282:	0159      	lsls	r1, r3, #5
 800c284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c288:	0150      	lsls	r0, r2, #5
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	1b11      	subs	r1, r2, r4
 800c290:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c292:	eb63 0305 	sbc.w	r3, r3, r5
 800c296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c298:	f04f 0200 	mov.w	r2, #0
 800c29c:	f04f 0300 	mov.w	r3, #0
 800c2a0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	008b      	lsls	r3, r1, #2
 800c2a8:	4641      	mov	r1, r8
 800c2aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2ae:	4641      	mov	r1, r8
 800c2b0:	008a      	lsls	r2, r1, #2
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	191b      	adds	r3, r3, r4
 800c2ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2bc:	4613      	mov	r3, r2
 800c2be:	eb45 0303 	adc.w	r3, r5, r3
 800c2c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	02cb      	lsls	r3, r1, #11
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c2da:	4621      	mov	r1, r4
 800c2dc:	02ca      	lsls	r2, r1, #11
 800c2de:	461c      	mov	r4, r3
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c2e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800c2f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2fe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c302:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c306:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800c30a:	4621      	mov	r1, r4
 800c30c:	1851      	adds	r1, r2, r1
 800c30e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c310:	4629      	mov	r1, r5
 800c312:	eb43 0101 	adc.w	r1, r3, r1
 800c316:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c318:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c31c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c320:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29b      	uxth	r3, r3
 800c328:	2200      	movs	r2, #0
 800c32a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c32e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c332:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c336:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c33a:	f7f3 ffc1 	bl	80002c0 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c346:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c34a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c34e:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c350:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	011a      	lsls	r2, r3, #4
 800c358:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c35c:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c35e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2200      	movs	r2, #0
 800c366:	633b      	str	r3, [r7, #48]	@ 0x30
 800c368:	637a      	str	r2, [r7, #52]	@ 0x34
 800c36a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c36e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c372:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	2200      	movs	r2, #0
 800c37a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c37e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c386:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c38a:	4622      	mov	r2, r4
 800c38c:	fb02 f203 	mul.w	r2, r2, r3
 800c390:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c394:	4629      	mov	r1, r5
 800c396:	fb01 f303 	mul.w	r3, r1, r3
 800c39a:	441a      	add	r2, r3
 800c39c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	fba3 1301 	umull	r1, r3, r3, r1
 800c3a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c3b4:	18d3      	adds	r3, r2, r3
 800c3b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c3ba:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800c3be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c3c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c3c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c3ca:	8b5b      	ldrh	r3, [r3, #26]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c3dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	fb02 f203 	mul.w	r2, r2, r3
 800c3e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	441a      	add	r2, r3
 800c3f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	fba3 1301 	umull	r1, r3, r3, r1
 800c3fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c400:	460b      	mov	r3, r1
 800c402:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c40a:	18d3      	adds	r3, r2, r3
 800c40c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c410:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800c414:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c418:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c41c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c420:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c424:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c426:	f143 0300 	adc.w	r3, r3, #0
 800c42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c42c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c430:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c434:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c438:	f04f 0000 	mov.w	r0, #0
 800c43c:	f04f 0100 	mov.w	r1, #0
 800c440:	0cd0      	lsrs	r0, r2, #19
 800c442:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c446:	0cd9      	lsrs	r1, r3, #19
 800c448:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800c44c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c450:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c454:	6239      	str	r1, [r7, #32]
 800c456:	f143 0300 	adc.w	r3, r3, #0
 800c45a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c45c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c460:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800c464:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	f7f3 ff26 	bl	80002c0 <__aeabi_uldivmod>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c47c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c480:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c484:	f173 0300 	sbcs.w	r3, r3, #0
 800c488:	d305      	bcc.n	800c496 <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800c48a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c496:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c49a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c49e:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c4a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	61bb      	str	r3, [r7, #24]
 800c4aa:	61fa      	str	r2, [r7, #28]
 800c4ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c4b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c4b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c4c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c4c8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	fb02 f203 	mul.w	r2, r2, r3
 800c4d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	fb01 f303 	mul.w	r3, r1, r3
 800c4dc:	441a      	add	r2, r3
 800c4de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	fba3 1301 	umull	r1, r3, r3, r1
 800c4e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c4f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4f6:	18d3      	adds	r3, r2, r3
 800c4f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4fc:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800c500:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c504:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c508:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c50c:	8b5b      	ldrh	r3, [r3, #26]
 800c50e:	b29b      	uxth	r3, r3
 800c510:	2200      	movs	r2, #0
 800c512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c516:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c51a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c51e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c522:	4622      	mov	r2, r4
 800c524:	fb02 f203 	mul.w	r2, r2, r3
 800c528:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c52c:	4629      	mov	r1, r5
 800c52e:	fb01 f303 	mul.w	r3, r1, r3
 800c532:	441a      	add	r2, r3
 800c534:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c538:	4621      	mov	r1, r4
 800c53a:	fba3 1301 	umull	r1, r3, r3, r1
 800c53e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c542:	460b      	mov	r3, r1
 800c544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c54c:	18d3      	adds	r3, r2, r3
 800c54e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c552:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800c556:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c55a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c55e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c562:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c566:	6139      	str	r1, [r7, #16]
 800c568:	f143 0300 	adc.w	r3, r3, #0
 800c56c:	617b      	str	r3, [r7, #20]
 800c56e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c572:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c576:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c57a:	f04f 0000 	mov.w	r0, #0
 800c57e:	f04f 0100 	mov.w	r1, #0
 800c582:	0cd0      	lsrs	r0, r2, #19
 800c584:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c588:	0cd9      	lsrs	r1, r3, #19
 800c58a:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800c58e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800c592:	2200      	movs	r2, #0
 800c594:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c596:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800c598:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c59c:	891b      	ldrh	r3, [r3, #8]
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c5a4:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800c5a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	fb02 f203 	mul.w	r2, r2, r3
 800c5b6:	464b      	mov	r3, r9
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	fb01 f303 	mul.w	r3, r1, r3
 800c5be:	4413      	add	r3, r2
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	fba2 1201 	umull	r1, r2, r2, r1
 800c5c8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c5cc:	460a      	mov	r2, r1
 800c5ce:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c5d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c5dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c5e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	fb02 f203 	mul.w	r2, r2, r3
 800c5ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	fba2 1201 	umull	r1, r2, r2, r1
 800c600:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c604:	460a      	mov	r2, r1
 800c606:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800c60a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c60e:	4413      	add	r3, r2
 800c610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c614:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800c618:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c61c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c620:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c624:	88db      	ldrh	r3, [r3, #6]
 800c626:	b29b      	uxth	r3, r3
 800c628:	2200      	movs	r2, #0
 800c62a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c62c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c62e:	f04f 0200 	mov.w	r2, #0
 800c632:	f04f 0300 	mov.w	r3, #0
 800c636:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c63a:	4629      	mov	r1, r5
 800c63c:	01cb      	lsls	r3, r1, #7
 800c63e:	4621      	mov	r1, r4
 800c640:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800c644:	4621      	mov	r1, r4
 800c646:	01ca      	lsls	r2, r1, #7
 800c648:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c64c:	1884      	adds	r4, r0, r2
 800c64e:	60bc      	str	r4, [r7, #8]
 800c650:	eb41 0303 	adc.w	r3, r1, r3
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c65a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c65e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c662:	88db      	ldrh	r3, [r3, #6]
 800c664:	b29b      	uxth	r3, r3
 800c666:	2200      	movs	r2, #0
 800c668:	663b      	str	r3, [r7, #96]	@ 0x60
 800c66a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c66c:	f04f 0200 	mov.w	r2, #0
 800c670:	f04f 0300 	mov.w	r3, #0
 800c674:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c678:	4629      	mov	r1, r5
 800c67a:	020b      	lsls	r3, r1, #8
 800c67c:	4621      	mov	r1, r4
 800c67e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800c682:	4621      	mov	r1, r4
 800c684:	020a      	lsls	r2, r1, #8
 800c686:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c68a:	f7f3 fe19 	bl	80002c0 <__aeabi_uldivmod>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c696:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c69a:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c69e:	6039      	str	r1, [r7, #0]
 800c6a0:	f143 0300 	adc.w	r3, r3, #0
 800c6a4:	607b      	str	r3, [r7, #4]
 800c6a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c6aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800c6ae:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c6b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c6b6:	f04f 0300 	mov.w	r3, #0
 800c6ba:	f7f3 fe01 	bl	80002c0 <__aeabi_uldivmod>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c6c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c6ca:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c6ce:	f173 0300 	sbcs.w	r3, r3, #0
 800c6d2:	d305      	bcc.n	800c6e0 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800c6d4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c6d8:	f04f 0300 	mov.w	r3, #0
 800c6dc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c6e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c6e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c6e8:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c6ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe ffcc 	bl	800b690 <VL53LX_isqrt>
 800c6f8:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c6fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	461a      	mov	r2, r3
 800c704:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c708:	fb02 f303 	mul.w	r3, r2, r3
 800c70c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800c710:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c714:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c716:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c71a:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d218      	bcs.n	800c752 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c728:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c72c:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800c734:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c738:	021b      	lsls	r3, r3, #8
 800c73a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800c73e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c742:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c746:	429a      	cmp	r2, r3
 800c748:	d203      	bcs.n	800c752 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800c74a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c74e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c752:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c756:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c758:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c75c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c75e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c764:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c766:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800c76a:	f000 f854 	bl	800c816 <VL53LX_f_002>
 800c76e:	4603      	mov	r3, r0
 800c770:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c772:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c776:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c778:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c786:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800c78a:	461a      	mov	r2, r3
 800c78c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c790:	fb02 f303 	mul.w	r3, r2, r3
 800c794:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800c798:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c79c:	3308      	adds	r3, #8
 800c79e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800c7a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c7a6:	091b      	lsrs	r3, r3, #4
 800c7a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7b0:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c7b2:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c7b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c7b8:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c7ba:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c7bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7c0:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c7c2:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800c7c6:	f000 f826 	bl	800c816 <VL53LX_f_002>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c7ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7d2:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c7d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7d8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c7dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7e0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	da07      	bge.n	800c7f8 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c7e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7ec:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c7f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c7f4:	801a      	strh	r2, [r3, #0]
 800c7f6:	e006      	b.n	800c806 <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c7f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7fc:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800c800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c804:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c806:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800c80a:	4618      	mov	r0, r3
 800c80c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c810:	46bd      	mov	sp, r7
 800c812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c816 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b086      	sub	sp, #24
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	60f8      	str	r0, [r7, #12]
 800c81e:	60b9      	str	r1, [r7, #8]
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	fb03 f303 	mul.w	r3, r3, r3
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	4413      	add	r3, r2
 800c83c:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f7fe ff26 	bl	800b690 <VL53LX_isqrt>
 800c844:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	4413      	add	r3, r2
 800c84c:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe ff1c 	bl	800b690 <VL53LX_isqrt>
 800c858:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	fb02 f303 	mul.w	r3, r2, r3
 800c862:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d009      	beq.n	800c87e <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4413      	add	r3, r2
 800c870:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87c:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c87e:	697b      	ldr	r3, [r7, #20]

}
 800c880:	4618      	mov	r0, r3
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2218      	movs	r2, #24
 800c898:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	73fb      	strb	r3, [r7, #15]
 800c8be:	e01f      	b.n	800c900 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	4413      	add	r3, r2
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c8e2:	7bfa      	ldrb	r2, [r7, #15]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	322e      	adds	r2, #46	@ 0x2e
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c8ee:	7bfa      	ldrb	r2, [r7, #15]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3246      	adds	r2, #70	@ 0x46
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	73fb      	strb	r3, [r7, #15]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	785b      	ldrb	r3, [r3, #1]
 800c904:	7bfa      	ldrb	r2, [r7, #15]
 800c906:	429a      	cmp	r2, r3
 800c908:	d3da      	bcc.n	800c8c0 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2208      	movs	r2, #8
 800c916:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c928:	461a      	mov	r2, r3
 800c92a:	2118      	movs	r1, #24
 800c92c:	2000      	movs	r0, #0
 800c92e:	f7ff f9e8 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800c938:	461a      	mov	r2, r3
 800c93a:	2118      	movs	r1, #24
 800c93c:	2000      	movs	r0, #0
 800c93e:	f7ff f9e0 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c948:	461a      	mov	r2, r3
 800c94a:	2118      	movs	r1, #24
 800c94c:	2000      	movs	r0, #0
 800c94e:	f7ff f9d8 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800c958:	461a      	mov	r2, r3
 800c95a:	2118      	movs	r1, #24
 800c95c:	2000      	movs	r0, #0
 800c95e:	f7ff f9d0 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800c968:	461a      	mov	r2, r3
 800c96a:	2118      	movs	r1, #24
 800c96c:	2000      	movs	r0, #0
 800c96e:	f7ff f9c8 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c97a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c97e:	b090      	sub	sp, #64	@ 0x40
 800c980:	af00      	add	r7, sp, #0
 800c982:	61b9      	str	r1, [r7, #24]
 800c984:	617a      	str	r2, [r7, #20]
 800c986:	461a      	mov	r2, r3
 800c988:	4603      	mov	r3, r0
 800c98a:	83fb      	strh	r3, [r7, #30]
 800c98c:	4613      	mov	r3, r2
 800c98e:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c990:	2300      	movs	r3, #0
 800c992:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800c9a2:	f04f 0200 	mov.w	r2, #0
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c9ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9bc:	7a5a      	ldrb	r2, [r3, #9]
 800c9be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9c0:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9c4:	7a1a      	ldrb	r2, [r3, #8]
 800c9c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9c8:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c9ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9cc:	7a9a      	ldrb	r2, [r3, #10]
 800c9ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9d0:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c9d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c9d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9da:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c9dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff f93c 	bl	800bc60 <VL53LX_decode_vcsel_period>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c9ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9ee:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c9f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c9f6:	17da      	asrs	r2, r3, #31
 800c9f8:	60bb      	str	r3, [r7, #8]
 800c9fa:	60fa      	str	r2, [r7, #12]
 800c9fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca00:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800ca04:	8bfb      	ldrh	r3, [r7, #30]
 800ca06:	2200      	movs	r2, #0
 800ca08:	4698      	mov	r8, r3
 800ca0a:	4691      	mov	r9, r2
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0e:	fb08 f203 	mul.w	r2, r8, r3
 800ca12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca14:	fb09 f303 	mul.w	r3, r9, r3
 800ca18:	4413      	add	r3, r2
 800ca1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca1c:	fba2 4508 	umull	r4, r5, r2, r8
 800ca20:	442b      	add	r3, r5
 800ca22:	461d      	mov	r5, r3
 800ca24:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800ca28:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800ca2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca30:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800ca34:	f143 0b00 	adc.w	fp, r3, #0
 800ca38:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800ca3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	da08      	bge.n	800ca56 <VL53LX_f_006+0xdc>
 800ca44:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800ca48:	1851      	adds	r1, r2, r1
 800ca4a:	6039      	str	r1, [r7, #0]
 800ca4c:	f143 0300 	adc.w	r3, r3, #0
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca56:	f04f 0000 	mov.w	r0, #0
 800ca5a:	f04f 0100 	mov.w	r1, #0
 800ca5e:	0b10      	lsrs	r0, r2, #12
 800ca60:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ca64:	1319      	asrs	r1, r3, #12
 800ca66:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800ca6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ca74:	e062      	b.n	800cb3c <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800ca76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca7a:	089b      	lsrs	r3, r3, #2
 800ca7c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800ca80:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ca84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca86:	4413      	add	r3, r2
 800ca88:	7c9b      	ldrb	r3, [r3, #18]
 800ca8a:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800ca8c:	6a3b      	ldr	r3, [r7, #32]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd4f      	ble.n	800cb32 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800ca92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca94:	7a9b      	ldrb	r3, [r3, #10]
 800ca96:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d20f      	bcs.n	800cabe <VL53LX_f_006+0x144>
 800ca9e:	7f7b      	ldrb	r3, [r7, #29]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00c      	beq.n	800cabe <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800caa4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800caa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caaa:	3206      	adds	r2, #6
 800caac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	441a      	add	r2, r3
 800cab4:	6a3b      	ldr	r3, [r7, #32]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cabc:	e004      	b.n	800cac8 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cac2:	fb02 f303 	mul.w	r3, r2, r3
 800cac6:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fde0 	bl	800b690 <VL53LX_isqrt>
 800cad0:	4603      	mov	r3, r0
 800cad2:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	0fda      	lsrs	r2, r3, #31
 800cad8:	4413      	add	r3, r2
 800cada:	105b      	asrs	r3, r3, #1
 800cadc:	461a      	mov	r2, r3
 800cade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae0:	4413      	add	r3, r2
 800cae2:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800cae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	fb92 f3f3 	sdiv	r3, r2, r3
 800caec:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	fb02 f303 	mul.w	r3, r2, r3
 800caf6:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafa:	3308      	adds	r3, #8
 800cafc:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800cafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	da00      	bge.n	800cb06 <VL53LX_f_006+0x18c>
 800cb04:	330f      	adds	r3, #15
 800cb06:	111b      	asrs	r3, r3, #4
 800cb08:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800cb0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0e:	4413      	add	r3, r2
 800cb10:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cb12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	da01      	bge.n	800cb1e <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cb1e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb24:	3216      	adds	r2, #22
 800cb26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cb2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb30:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cb32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb36:	3301      	adds	r3, #1
 800cb38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb3e:	7a9b      	ldrb	r3, [r3, #10]
 800cb40:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d396      	bcc.n	800ca76 <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800cb48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cb4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb50:	7a1b      	ldrb	r3, [r3, #8]
 800cb52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb56:	e033      	b.n	800cbc0 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cb58:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb5e:	3206      	adds	r2, #6
 800cb60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb64:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800cb68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb6a:	3116      	adds	r1, #22
 800cb6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	dd13      	ble.n	800cb9c <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800cb74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb7a:	4413      	add	r3, r2
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cb80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb86:	4413      	add	r3, r2
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800cb8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb90:	791b      	ldrb	r3, [r3, #4]
 800cb92:	3301      	adds	r3, #1
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb98:	711a      	strb	r2, [r3, #4]
 800cb9a:	e00c      	b.n	800cbb6 <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cb9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cba0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cba2:	4413      	add	r3, r2
 800cba4:	2200      	movs	r2, #0
 800cba6:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cba8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbae:	4413      	add	r3, r2
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cbb6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbba:	3301      	adds	r3, #1
 800cbbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cbc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbc2:	7a9b      	ldrb	r3, [r3, #10]
 800cbc4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d3c5      	bcc.n	800cb58 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3740      	adds	r7, #64	@ 0x40
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cbda <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b085      	sub	sp, #20
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
 800cbfe:	e02d      	b.n	800cc5c <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	3301      	adds	r3, #1
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	78d2      	ldrb	r2, [r2, #3]
 800cc08:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc0c:	fb01 f202 	mul.w	r2, r1, r2
 800cc10:	1a9b      	subs	r3, r3, r2
 800cc12:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	789b      	ldrb	r3, [r3, #2]
 800cc18:	7bfa      	ldrb	r2, [r7, #15]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d21b      	bcs.n	800cc56 <VL53LX_f_007+0x7c>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	789b      	ldrb	r3, [r3, #2]
 800cc22:	7b3a      	ldrb	r2, [r7, #12]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d216      	bcs.n	800cc56 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10f      	bne.n	800cc56 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc36:	7b3b      	ldrb	r3, [r7, #12]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d108      	bne.n	800cc56 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d105      	bne.n	800cc56 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7bfa      	ldrb	r2, [r7, #15]
 800cc4e:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800cc52:	2301      	movs	r3, #1
 800cc54:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	73fb      	strb	r3, [r7, #15]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	78db      	ldrb	r3, [r3, #3]
 800cc60:	7bfa      	ldrb	r2, [r7, #15]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d3cc      	bcc.n	800cc00 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc66:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cc94:	73fb      	strb	r3, [r7, #15]
 800cc96:	e05a      	b.n	800cd4e <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	78da      	ldrb	r2, [r3, #3]
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cca2:	fb01 f202 	mul.w	r2, r1, r2
 800cca6:	1a9b      	subs	r3, r3, r2
 800cca8:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
 800ccac:	3301      	adds	r3, #1
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	78d2      	ldrb	r2, [r2, #3]
 800ccb2:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccb6:	fb01 f202 	mul.w	r2, r1, r2
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	789b      	ldrb	r3, [r3, #2]
 800ccc2:	7b7a      	ldrb	r2, [r7, #13]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d23f      	bcs.n	800cd48 <VL53LX_f_008+0xd2>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	789b      	ldrb	r3, [r3, #2]
 800cccc:	7b3a      	ldrb	r2, [r7, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d23a      	bcs.n	800cd48 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800ccd2:	7b7b      	ldrb	r3, [r7, #13]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10e      	bne.n	800ccfe <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800cce0:	7b3b      	ldrb	r3, [r7, #12]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4413      	add	r3, r2
 800cce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d107      	bne.n	800ccfe <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d905      	bls.n	800cd1a <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cd1a:	7b7b      	ldrb	r3, [r7, #13]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cd28:	7b7b      	ldrb	r3, [r7, #13]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	4413      	add	r3, r2
 800cd34:	460a      	mov	r2, r1
 800cd36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd3a:	e005      	b.n	800cd48 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cd3c:	7b7b      	ldrb	r3, [r7, #13]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	4413      	add	r3, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cd4e:	7bfa      	ldrb	r2, [r7, #15]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cd56:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cd5c:	440b      	add	r3, r1
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	db9a      	blt.n	800cc98 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cd62:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b087      	sub	sp, #28
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	78db      	ldrb	r3, [r3, #3]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cd9a:	7cbb      	ldrb	r3, [r7, #18]
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cda6:	75fb      	strb	r3, [r7, #23]
 800cda8:	e0a2      	b.n	800cef0 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	78da      	ldrb	r2, [r3, #3]
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdb4:	fb01 f202 	mul.w	r2, r1, r2
 800cdb8:	1a9b      	subs	r3, r3, r2
 800cdba:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	78d2      	ldrb	r2, [r2, #3]
 800cdc4:	fb93 f1f2 	sdiv	r1, r3, r2
 800cdc8:	fb01 f202 	mul.w	r2, r1, r2
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	789b      	ldrb	r3, [r3, #2]
 800cdd4:	7d7a      	ldrb	r2, [r7, #21]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	f080 8087 	bcs.w	800ceea <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cde0:	7d3a      	ldrb	r2, [r7, #20]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	f080 8081 	bcs.w	800ceea <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cde8:	7d7b      	ldrb	r3, [r7, #21]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	4413      	add	r3, r2
 800cdee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d12f      	bne.n	800ce56 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cdf6:	7d3b      	ldrb	r3, [r7, #20]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d028      	beq.n	800ce56 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800ce04:	7d3b      	ldrb	r3, [r7, #20]
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	4413      	add	r3, r2
 800ce0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ce18:	7cfa      	ldrb	r2, [r7, #19]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d21b      	bcs.n	800ce56 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce1e:	7cfa      	ldrb	r2, [r7, #19]
 800ce20:	4613      	mov	r3, r2
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	4413      	add	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	4413      	add	r3, r2
 800ce30:	3304      	adds	r3, #4
 800ce32:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	7dfa      	ldrb	r2, [r7, #23]
 800ce38:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	22ff      	movs	r2, #255	@ 0xff
 800ce48:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2200      	movs	r2, #0
 800ce54:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ce56:	7d7b      	ldrb	r3, [r7, #21]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d042      	beq.n	800ceea <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ce64:	7d3b      	ldrb	r3, [r7, #20]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d13b      	bne.n	800ceea <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ce72:	7d7b      	ldrb	r3, [r7, #21]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	4413      	add	r3, r2
 800ce78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ce86:	7cfa      	ldrb	r2, [r7, #19]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d22e      	bcs.n	800ceea <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce8c:	7cfa      	ldrb	r2, [r7, #19]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	4413      	add	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	3304      	adds	r3, #4
 800cea0:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	7dfa      	ldrb	r2, [r7, #23]
 800cea6:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800cea8:	7dfb      	ldrb	r3, [r7, #23]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	3301      	adds	r3, #1
 800cec0:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	3301      	adds	r3, #1
 800ced4:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	799b      	ldrb	r3, [r3, #6]
 800cede:	7cba      	ldrb	r2, [r7, #18]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d202      	bcs.n	800ceea <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	7cba      	ldrb	r2, [r7, #18]
 800cee8:	719a      	strb	r2, [r3, #6]
		blb++) {
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	3301      	adds	r3, #1
 800ceee:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cef0:	7dfa      	ldrb	r2, [r7, #23]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cef8:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cefe:	440b      	add	r3, r1
 800cf00:	429a      	cmp	r2, r3
 800cf02:	f6ff af52 	blt.w	800cdaa <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf06:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b090      	sub	sp, #64	@ 0x40
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	6039      	str	r1, [r7, #0]
 800cf20:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf22:	2300      	movs	r3, #0
 800cf24:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cf28:	f107 030c 	add.w	r3, r7, #12
 800cf2c:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800cf34:	2301      	movs	r3, #1
 800cf36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d965      	bls.n	800d010 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cf44:	e05f      	b.n	800d006 <VL53LX_f_016+0xf0>

		swapped = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cf52:	e051      	b.n	800cff8 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cf54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf58:	1e5a      	subs	r2, r3, #1
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	4413      	add	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4413      	add	r3, r2
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cf6e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cf72:	4613      	mov	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	4413      	add	r3, r2
 800cf82:	3304      	adds	r3, #4
 800cf84:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d118      	bne.n	800cfbe <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8e:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf92:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cf94:	429a      	cmp	r2, r3
 800cf96:	da2a      	bge.n	800cfee <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cf98:	2224      	movs	r2, #36	@ 0x24
 800cf9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf9e:	f009 ff00 	bl	8016da2 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cfa2:	2224      	movs	r2, #36	@ 0x24
 800cfa4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfa8:	f009 fefb 	bl	8016da2 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cfac:	2224      	movs	r2, #36	@ 0x24
 800cfae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cfb0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfb2:	f009 fef6 	bl	8016da2 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800cfbc:	e017      	b.n	800cfee <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800cfbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc0:	699a      	ldr	r2, [r3, #24]
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc4:	699b      	ldr	r3, [r3, #24]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d911      	bls.n	800cfee <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cfca:	2224      	movs	r2, #36	@ 0x24
 800cfcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cfce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cfd0:	f009 fee7 	bl	8016da2 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cfd4:	2224      	movs	r2, #36	@ 0x24
 800cfd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfda:	f009 fee2 	bl	8016da2 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cfde:	2224      	movs	r2, #36	@ 0x24
 800cfe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cfe2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfe4:	f009 fedd 	bl	8016da2 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cfee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cff2:	3301      	adds	r3, #1
 800cff4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cffe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d002:	429a      	cmp	r2, r3
 800d004:	d3a6      	bcc.n	800cf54 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d006:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d19b      	bne.n	800cf46 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d00e:	e000      	b.n	800d012 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d010:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d012:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800d016:	4618      	mov	r0, r3
 800d018:	3740      	adds	r7, #64	@ 0x40
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d01e:	b480      	push	{r7}
 800d020:	b087      	sub	sp, #28
 800d022:	af00      	add	r7, sp, #0
 800d024:	4603      	mov	r3, r0
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	607a      	str	r2, [r7, #4]
 800d02a:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d038:	7bfa      	ldrb	r2, [r7, #15]
 800d03a:	4613      	mov	r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	4413      	add	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	4413      	add	r3, r2
 800d04a:	3304      	adds	r3, #4
 800d04c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	2200      	movs	r2, #0
 800d052:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2200      	movs	r2, #0
 800d058:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	75fb      	strb	r3, [r7, #23]
 800d060:	e01c      	b.n	800d09c <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	78da      	ldrb	r2, [r3, #3]
 800d066:	7dfb      	ldrb	r3, [r7, #23]
 800d068:	fbb3 f1f2 	udiv	r1, r3, r2
 800d06c:	fb01 f202 	mul.w	r2, r1, r2
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	68da      	ldr	r2, [r3, #12]
 800d078:	7d79      	ldrb	r1, [r7, #21]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	3106      	adds	r1, #6
 800d07e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d082:	441a      	add	r2, r3
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	441a      	add	r2, r3
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	3301      	adds	r3, #1
 800d09a:	75fb      	strb	r3, [r7, #23]
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	791b      	ldrb	r3, [r3, #4]
 800d0a0:	7dfa      	ldrb	r2, [r7, #23]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d9dd      	bls.n	800d062 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	68da      	ldr	r2, [r3, #12]
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d0b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	371c      	adds	r7, #28
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d0c4:	b590      	push	{r4, r7, lr}
 800d0c6:	b08d      	sub	sp, #52	@ 0x34
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	60ba      	str	r2, [r7, #8]
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d0f2:	7bfa      	ldrb	r2, [r7, #15]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	4413      	add	r3, r2
 800d104:	3304      	adds	r3, #4
 800d106:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	789b      	ldrb	r3, [r3, #2]
 800d10c:	2bff      	cmp	r3, #255	@ 0xff
 800d10e:	d102      	bne.n	800d116 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2201      	movs	r2, #1
 800d114:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	789b      	ldrb	r3, [r3, #2]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	78d2      	ldrb	r2, [r2, #3]
 800d11e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d122:	fb01 f202 	mul.w	r2, r1, r2
 800d126:	1a9b      	subs	r3, r3, r2
 800d128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800d12c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d130:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	461a      	mov	r2, r3
 800d138:	8c3b      	ldrh	r3, [r7, #32]
 800d13a:	4413      	add	r3, r2
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d140:	8c3b      	ldrh	r3, [r7, #32]
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	7892      	ldrb	r2, [r2, #2]
 800d146:	1a9b      	subs	r3, r3, r2
 800d148:	b29b      	uxth	r3, r3
 800d14a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d14c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d150:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	791b      	ldrb	r3, [r3, #4]
 800d156:	461a      	mov	r2, r3
 800d158:	8bfb      	ldrh	r3, [r7, #30]
 800d15a:	4413      	add	r3, r2
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d160:	8bfb      	ldrh	r3, [r7, #30]
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	7892      	ldrb	r2, [r2, #2]
 800d166:	1a9b      	subs	r3, r3, r2
 800d168:	b29b      	uxth	r3, r3
 800d16a:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d16c:	8bfa      	ldrh	r2, [r7, #30]
 800d16e:	8c3b      	ldrh	r3, [r7, #32]
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	b29b      	uxth	r3, r3
 800d174:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800d176:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	dd01      	ble.n	800d182 <VL53LX_f_015+0xbe>
		window_width = 3;
 800d17e:	2303      	movs	r3, #3
 800d180:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d182:	8c3a      	ldrh	r2, [r7, #32]
 800d184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d186:	4413      	add	r3, r2
 800d188:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d18a:	b219      	sxth	r1, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	78da      	ldrb	r2, [r3, #3]
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	3314      	adds	r3, #20
 800d194:	7bbc      	ldrb	r4, [r7, #14]
 800d196:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	4623      	mov	r3, r4
 800d1a2:	f000 f846 	bl	800d232 <VL53LX_f_020>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d1ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d114      	bne.n	800d1de <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d1b4:	8bfa      	ldrh	r2, [r7, #30]
 800d1b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d1bc:	b218      	sxth	r0, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	78da      	ldrb	r2, [r3, #3]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	331c      	adds	r3, #28
 800d1c6:	7bbc      	ldrb	r4, [r7, #14]
 800d1c8:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	4623      	mov	r3, r4
 800d1d4:	f000 f82d 	bl	800d232 <VL53LX_f_020>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	695a      	ldr	r2, [r3, #20]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d909      	bls.n	800d1fe <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	69da      	ldr	r2, [r3, #28]
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	69ba      	ldr	r2, [r7, #24]
 800d1fc:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	699a      	ldr	r2, [r3, #24]
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	695b      	ldr	r3, [r3, #20]
 800d206:	429a      	cmp	r2, r3
 800d208:	d203      	bcs.n	800d212 <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	699a      	ldr	r2, [r3, #24]
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	699a      	ldr	r2, [r3, #24]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d903      	bls.n	800d226 <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d226:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	372c      	adds	r7, #44	@ 0x2c
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd90      	pop	{r4, r7, pc}

0800d232 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d236:	b09d      	sub	sp, #116	@ 0x74
 800d238:	af00      	add	r7, sp, #0
 800d23a:	461c      	mov	r4, r3
 800d23c:	4603      	mov	r3, r0
 800d23e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d242:	460b      	mov	r3, r1
 800d244:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d248:	4613      	mov	r3, r2
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24e:	4623      	mov	r3, r4
 800d250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d254:	2300      	movs	r3, #0
 800d256:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800d266:	f04f 0200 	mov.w	r2, #0
 800d26a:	f04f 0300 	mov.w	r3, #0
 800d26e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800d272:	f04f 0200 	mov.w	r2, #0
 800d276:	f04f 0300 	mov.w	r3, #0
 800d27a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800d27e:	f04f 0200 	mov.w	r2, #0
 800d282:	f04f 0300 	mov.w	r3, #0
 800d286:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d28a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d28e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d292:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800d294:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 809c 	beq.w	800d3d6 <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d29e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d2a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d2a6:	e08f      	b.n	800d3c8 <VL53LX_f_020+0x196>

		if (lb < 0)
 800d2a8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	da09      	bge.n	800d2c4 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800d2b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d2ba:	4413      	add	r3, r2
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d2c2:	e00a      	b.n	800d2da <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d2c4:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800d2c8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d2cc:	fb91 f3f2 	sdiv	r3, r1, r2
 800d2d0:	fb02 f303 	mul.w	r3, r2, r3
 800d2d4:	1acb      	subs	r3, r1, r3
 800d2d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d2da:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	db6b      	blt.n	800d3ba <VL53LX_f_020+0x188>
 800d2e2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2e6:	2b17      	cmp	r3, #23
 800d2e8:	dc67      	bgt.n	800d3ba <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d2ea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d2ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d2f2:	3306      	adds	r3, #6
 800d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f8:	17da      	asrs	r2, r3, #31
 800d2fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2fc:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800d2fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d306:	17da      	asrs	r2, r3, #31
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d30a:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d312:	4602      	mov	r2, r0
 800d314:	1a9b      	subs	r3, r3, r2
 800d316:	623b      	str	r3, [r7, #32]
 800d318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d31a:	460a      	mov	r2, r1
 800d31c:	eb63 0302 	sbc.w	r3, r3, r2
 800d320:	627b      	str	r3, [r7, #36]	@ 0x24
 800d322:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d326:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d32a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d009      	beq.n	800d346 <VL53LX_f_020+0x114>
 800d332:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d336:	2b00      	cmp	r3, #0
 800d338:	da05      	bge.n	800d346 <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800d33a:	f04f 0200 	mov.w	r2, #0
 800d33e:	f04f 0300 	mov.w	r3, #0
 800d342:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800d346:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800d34a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d34e:	1884      	adds	r4, r0, r2
 800d350:	61bc      	str	r4, [r7, #24]
 800d352:	eb41 0303 	adc.w	r3, r1, r3
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d35c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d360:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d364:	17da      	asrs	r2, r3, #31
 800d366:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d374:	02cb      	lsls	r3, r1, #11
 800d376:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d378:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d37c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d37e:	02ca      	lsls	r2, r1, #11
 800d380:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800d384:	f143 0600 	adc.w	r6, r3, #0
 800d388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d38a:	fb06 f203 	mul.w	r2, r6, r3
 800d38e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d390:	fb05 f303 	mul.w	r3, r5, r3
 800d394:	441a      	add	r2, r3
 800d396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d398:	fba3 ab05 	umull	sl, fp, r3, r5
 800d39c:	eb02 030b 	add.w	r3, r2, fp
 800d3a0:	469b      	mov	fp, r3
			weighted_sum +=
 800d3a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d3a6:	eb12 010a 	adds.w	r1, r2, sl
 800d3aa:	6139      	str	r1, [r7, #16]
 800d3ac:	eb43 030b 	adc.w	r3, r3, fp
 800d3b0:	617b      	str	r3, [r7, #20]
 800d3b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d3b6:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d3ba:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d3c8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800d3cc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	f77f af69 	ble.w	800d2a8 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d3d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3da:	2a01      	cmp	r2, #1
 800d3dc:	f173 0300 	sbcs.w	r3, r3, #0
 800d3e0:	db3b      	blt.n	800d45a <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800d3e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3e6:	0fd9      	lsrs	r1, r3, #31
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	eb11 0802 	adds.w	r8, r1, r2
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	eb41 0903 	adc.w	r9, r1, r3
 800d3fe:	f04f 0200 	mov.w	r2, #0
 800d402:	f04f 0300 	mov.w	r3, #0
 800d406:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d40a:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d40e:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d412:	4610      	mov	r0, r2
 800d414:	4619      	mov	r1, r3
 800d416:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d41a:	1814      	adds	r4, r2, r0
 800d41c:	603c      	str	r4, [r7, #0]
 800d41e:	414b      	adcs	r3, r1
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d426:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d42a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d42e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d432:	f7f2 fef5 	bl	8000220 <__aeabi_ldivmod>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800d43e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d442:	2b00      	cmp	r3, #0
 800d444:	da05      	bge.n	800d452 <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	f04f 0300 	mov.w	r3, #0
 800d44e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800d452:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d458:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d45a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3774      	adds	r7, #116	@ 0x74
 800d462:	46bd      	mov	sp, r7
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d468 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	607a      	str	r2, [r7, #4]
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d478:	2300      	movs	r3, #0
 800d47a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d484:	7bfa      	ldrb	r2, [r7, #15]
 800d486:	4613      	mov	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	4413      	add	r3, r2
 800d496:	3304      	adds	r3, #4
 800d498:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d49a:	22ac      	movs	r2, #172	@ 0xac
 800d49c:	68b9      	ldr	r1, [r7, #8]
 800d49e:	6a38      	ldr	r0, [r7, #32]
 800d4a0:	f009 fc7f 	bl	8016da2 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d4aa:	75fb      	strb	r3, [r7, #23]
 800d4ac:	e020      	b.n	800d4f0 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	7dfa      	ldrb	r2, [r7, #23]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d304      	bcc.n	800d4c2 <VL53LX_f_011+0x5a>
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	791b      	ldrb	r3, [r3, #4]
 800d4bc:	7dfa      	ldrb	r2, [r7, #23]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d913      	bls.n	800d4ea <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	78da      	ldrb	r2, [r3, #3]
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
 800d4c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4cc:	fb01 f202 	mul.w	r2, r1, r2
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	7a9b      	ldrb	r3, [r3, #10]
 800d4d8:	7d7a      	ldrb	r2, [r7, #21]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d205      	bcs.n	800d4ea <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d4de:	7d7a      	ldrb	r2, [r7, #21]
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	3206      	adds	r2, #6
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d4f0:	7dfa      	ldrb	r2, [r7, #23]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d4f8:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d4fe:	440b      	add	r3, r1
 800d500:	429a      	cmp	r2, r3
 800d502:	dbd4      	blt.n	800d4ae <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d504:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d514:	b096      	sub	sp, #88	@ 0x58
 800d516:	af08      	add	r7, sp, #32
 800d518:	4604      	mov	r4, r0
 800d51a:	4608      	mov	r0, r1
 800d51c:	4611      	mov	r1, r2
 800d51e:	461a      	mov	r2, r3
 800d520:	4623      	mov	r3, r4
 800d522:	73fb      	strb	r3, [r7, #15]
 800d524:	4603      	mov	r3, r0
 800d526:	73bb      	strb	r3, [r7, #14]
 800d528:	460b      	mov	r3, r1
 800d52a:	737b      	strb	r3, [r7, #13]
 800d52c:	4613      	mov	r3, r2
 800d52e:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d530:	2300      	movs	r3, #0
 800d532:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d536:	2300      	movs	r3, #0
 800d538:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800d546:	2300      	movs	r3, #0
 800d548:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d562:	7b7b      	ldrb	r3, [r7, #13]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d56a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d56e:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d570:	f06f 030e 	mvn.w	r3, #14
 800d574:	e06f      	b.n	800d656 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	7b7a      	ldrb	r2, [r7, #13]
 800d57a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d57e:	fb01 f202 	mul.w	r2, r1, r2
 800d582:	1a9b      	subs	r3, r3, r2
 800d584:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800d588:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d58c:	7b39      	ldrb	r1, [r7, #12]
 800d58e:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d592:	f107 0320 	add.w	r3, r7, #32
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5a2:	f000 fddb 	bl	800e15c <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d5a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d5aa:	7b39      	ldrb	r1, [r7, #12]
 800d5ac:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d5b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5c0:	f000 fdcc 	bl	800e15c <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d5c4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00e      	beq.n	800d5ea <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d5cc:	f107 021c 	add.w	r2, r7, #28
 800d5d0:	7b39      	ldrb	r1, [r7, #12]
 800d5d2:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d5d6:	f107 0314 	add.w	r3, r7, #20
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	f107 0318 	add.w	r3, r7, #24
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d5e6:	f000 fdb9 	bl	800e15c <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	469c      	mov	ip, r3
 800d5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	4698      	mov	r8, r3
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	461c      	mov	r4, r3
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	461d      	mov	r5, r3
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	461e      	mov	r6, r3
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d60a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d60c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800d610:	607b      	str	r3, [r7, #4]
 800d612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d614:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d618:	7bb8      	ldrb	r0, [r7, #14]
 800d61a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d61c:	9207      	str	r2, [sp, #28]
 800d61e:	9306      	str	r3, [sp, #24]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	9205      	str	r2, [sp, #20]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	9603      	str	r6, [sp, #12]
 800d62a:	9502      	str	r5, [sp, #8]
 800d62c:	9401      	str	r4, [sp, #4]
 800d62e:	9100      	str	r1, [sp, #0]
 800d630:	4643      	mov	r3, r8
 800d632:	4672      	mov	r2, lr
 800d634:	4661      	mov	r1, ip
 800d636:	f002 ff7a 	bl	801052e <VL53LX_f_023>
 800d63a:	4603      	mov	r3, r0
 800d63c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d640:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800d644:	f113 0f0f 	cmn.w	r3, #15
 800d648:	d103      	bne.n	800d652 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d64a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d64c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d650:	801a      	strh	r2, [r3, #0]


	return status;
 800d652:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d656:	4618      	mov	r0, r3
 800d658:	3738      	adds	r7, #56	@ 0x38
 800d65a:	46bd      	mov	sp, r7
 800d65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d660 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d660:	b490      	push	{r4, r7}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	4611      	mov	r1, r2
 800d66c:	461a      	mov	r2, r3
 800d66e:	4623      	mov	r3, r4
 800d670:	71fb      	strb	r3, [r7, #7]
 800d672:	4603      	mov	r3, r0
 800d674:	71bb      	strb	r3, [r7, #6]
 800d676:	460b      	mov	r3, r1
 800d678:	717b      	strb	r3, [r7, #5]
 800d67a:	4613      	mov	r3, r2
 800d67c:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	79fa      	ldrb	r2, [r7, #7]
 800d68a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	2200      	movs	r2, #0
 800d690:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	781a      	ldrb	r2, [r3, #0]
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	785a      	ldrb	r2, [r3, #1]
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	789a      	ldrb	r2, [r3, #2]
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	78da      	ldrb	r2, [r3, #3]
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	791a      	ldrb	r2, [r3, #4]
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	795a      	ldrb	r2, [r3, #5]
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	791a      	ldrb	r2, [r3, #4]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	8c1a      	ldrh	r2, [r3, #32]
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	695b      	ldr	r3, [r3, #20]
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	69db      	ldr	r3, [r3, #28]
 800d702:	b29a      	uxth	r2, r3
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	461a      	mov	r2, r3
 800d710:	6a3b      	ldr	r3, [r7, #32]
 800d712:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	461a      	mov	r2, r3
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	2213      	movs	r2, #19
 800d734:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800d738:	887b      	ldrh	r3, [r7, #2]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00a      	beq.n	800d754 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	8c1b      	ldrh	r3, [r3, #32]
 800d742:	461a      	mov	r2, r3
 800d744:	887b      	ldrh	r3, [r7, #2]
 800d746:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d748:	429a      	cmp	r2, r3
 800d74a:	d903      	bls.n	800d754 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	2206      	movs	r2, #6
 800d750:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d754:	79bb      	ldrb	r3, [r7, #6]
 800d756:	b29b      	uxth	r3, r3
 800d758:	021b      	lsls	r3, r3, #8
 800d75a:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	8a9b      	ldrh	r3, [r3, #20]
 800d760:	89fa      	ldrh	r2, [r7, #14]
 800d762:	429a      	cmp	r2, r3
 800d764:	d205      	bcs.n	800d772 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d76a:	89fb      	ldrh	r3, [r7, #14]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	81fb      	strh	r3, [r7, #14]
 800d770:	e001      	b.n	800d776 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d776:	797b      	ldrb	r3, [r7, #5]
 800d778:	b29b      	uxth	r3, r3
 800d77a:	021b      	lsls	r3, r3, #8
 800d77c:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d784:	89bb      	ldrh	r3, [r7, #12]
 800d786:	4413      	add	r3, r2
 800d788:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d790:	89fa      	ldrh	r2, [r7, #14]
 800d792:	429a      	cmp	r2, r3
 800d794:	d805      	bhi.n	800d7a2 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d79c:	89ba      	ldrh	r2, [r7, #12]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d203      	bcs.n	800d7aa <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	2205      	movs	r2, #5
 800d7a6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800d7aa:	bf00      	nop
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bc90      	pop	{r4, r7}
 800d7b2:	4770      	bx	lr

0800d7b4 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b6:	b08f      	sub	sp, #60	@ 0x3c
 800d7b8:	af06      	add	r7, sp, #24
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7cc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d7d0:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d7d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d7d4:	f7ff f858 	bl	800c888 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7da:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800d7de:	22ac      	movs	r2, #172	@ 0xac
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f009 fadd 	bl	8016da2 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7ee:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	785a      	ldrb	r2, [r3, #1]
 800d7f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7f6:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	789a      	ldrb	r2, [r3, #2]
 800d7fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7fe:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800d806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d808:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d80a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d80c:	2200      	movs	r2, #0
 800d80e:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d812:	2204      	movs	r2, #4
 800d814:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d818:	2200      	movs	r2, #0
 800d81a:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d81c:	2300      	movs	r3, #0
 800d81e:	77bb      	strb	r3, [r7, #30]
 800d820:	e008      	b.n	800d834 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d822:	7fbb      	ldrb	r3, [r7, #30]
 800d824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	4413      	add	r3, r2
 800d82a:	2200      	movs	r2, #0
 800d82c:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d82e:	7fbb      	ldrb	r3, [r7, #30]
 800d830:	3301      	adds	r3, #1
 800d832:	77bb      	strb	r3, [r7, #30]
 800d834:	7fbb      	ldrb	r3, [r7, #30]
 800d836:	2b04      	cmp	r3, #4
 800d838:	d9f3      	bls.n	800d822 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d83c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd ff59 	bl	800b6f8 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d84a:	461a      	mov	r2, r3
 800d84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d852:	4619      	mov	r1, r3
 800d854:	4610      	mov	r0, r2
 800d856:	f7fd ff8f 	bl	800b778 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d85c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fb68 	bl	800bf36 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d868:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fd fffd 	bl	800b86c <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d009      	beq.n	800d890 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d87e:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d884:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800d888:	461a      	mov	r2, r3
 800d88a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d88c:	f000 fdae 	bl	800e3ec <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d898:	2300      	movs	r3, #0
 800d89a:	77bb      	strb	r3, [r7, #30]
 800d89c:	e01e      	b.n	800d8dc <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d89e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d117      	bne.n	800d8d6 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d8a6:	7fbb      	ldrb	r3, [r7, #30]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	4413      	add	r3, r2
 800d8b0:	8898      	ldrh	r0, [r3, #4]
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d8b8:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8be:	4413      	add	r3, r2
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	68f9      	ldr	r1, [r7, #12]
 800d8ce:	f7fe fb7d 	bl	800bfcc <VL53LX_f_001>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d8d6:	7fbb      	ldrb	r3, [r7, #30]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	77bb      	strb	r3, [r7, #30]
 800d8dc:	7fbb      	ldrb	r3, [r7, #30]
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	d9dd      	bls.n	800d89e <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d8e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d11a      	bne.n	800d920 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d8f2:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800d8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d900:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d906:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800d90a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d90c:	9102      	str	r1, [sp, #8]
 800d90e:	9201      	str	r2, [sp, #4]
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	462b      	mov	r3, r5
 800d914:	4622      	mov	r2, r4
 800d916:	4631      	mov	r1, r6
 800d918:	f7ff f82f 	bl	800c97a <VL53LX_f_006>
 800d91c:	4603      	mov	r3, r0
 800d91e:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d920:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d104      	bne.n	800d932 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d928:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d92a:	f7ff f956 	bl	800cbda <VL53LX_f_007>
 800d92e:	4603      	mov	r3, r0
 800d930:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d932:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d104      	bne.n	800d944 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d93a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d93c:	f7ff f99b 	bl	800cc76 <VL53LX_f_008>
 800d940:	4603      	mov	r3, r0
 800d942:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d104      	bne.n	800d956 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d94c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d94e:	f7ff fa10 	bl	800cd72 <VL53LX_f_009>
 800d952:	4603      	mov	r3, r0
 800d954:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d956:	2300      	movs	r3, #0
 800d958:	77bb      	strb	r3, [r7, #30]
 800d95a:	e0a6      	b.n	800daaa <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d95c:	7fba      	ldrb	r2, [r7, #30]
 800d95e:	4613      	mov	r3, r2
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	4413      	add	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d96a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d96c:	4413      	add	r3, r2
 800d96e:	3304      	adds	r3, #4
 800d970:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d109      	bne.n	800d98e <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d97c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d980:	7fbb      	ldrb	r3, [r7, #30]
 800d982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff fb4a 	bl	800d01e <VL53LX_f_010>
 800d98a:	4603      	mov	r3, r0
 800d98c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d98e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d110      	bne.n	800d9b8 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d998:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800d9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a4:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800d9a8:	7fb8      	ldrb	r0, [r7, #30]
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9b0:	f7ff fd5a 	bl	800d468 <VL53LX_f_011>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d9b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10d      	bne.n	800d9dc <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c2:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c8:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800d9cc:	7fb8      	ldrb	r0, [r7, #30]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9d4:	f7ff fd48 	bl	800d468 <VL53LX_f_011>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d9dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10d      	bne.n	800da00 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e6:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800d9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ec:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800d9f0:	7fb8      	ldrb	r0, [r7, #30]
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9f8:	f7ff fd36 	bl	800d468 <VL53LX_f_011>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800da00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d109      	bne.n	800da1c <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800da08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da0a:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800da0e:	7fb8      	ldrb	r0, [r7, #30]
 800da10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da14:	f000 f8dd 	bl	800dbd2 <VL53LX_f_026>
 800da18:	4603      	mov	r3, r0
 800da1a:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800da1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d108      	bne.n	800da36 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8a19      	ldrh	r1, [r3, #16]
 800da28:	7fb8      	ldrb	r0, [r7, #30]
 800da2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da2e:	f000 f95c 	bl	800dcea <VL53LX_f_027>
 800da32:	4603      	mov	r3, r0
 800da34:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800da36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d124      	bne.n	800da88 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	789d      	ldrb	r5, [r3, #2]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7e1e      	ldrb	r6, [r3, #24]
 800da46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da48:	f893 c003 	ldrb.w	ip, [r3, #3]
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f893 e006 	ldrb.w	lr, [r3, #6]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da5a:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800da5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da60:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800da64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da66:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800da6a:	697c      	ldr	r4, [r7, #20]
 800da6c:	3420      	adds	r4, #32
 800da6e:	9404      	str	r4, [sp, #16]
 800da70:	9003      	str	r0, [sp, #12]
 800da72:	9102      	str	r1, [sp, #8]
 800da74:	9201      	str	r2, [sp, #4]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4673      	mov	r3, lr
 800da7a:	4662      	mov	r2, ip
 800da7c:	4631      	mov	r1, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	f7ff fd46 	bl	800d510 <VL53LX_f_014>
 800da84:	4603      	mov	r3, r0
 800da86:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800da88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d109      	bne.n	800daa4 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800da90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da92:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800da96:	7fb8      	ldrb	r0, [r7, #30]
 800da98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9a:	2101      	movs	r1, #1
 800da9c:	f7ff fb12 	bl	800d0c4 <VL53LX_f_015>
 800daa0:	4603      	mov	r3, r0
 800daa2:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800daa4:	7fbb      	ldrb	r3, [r7, #30]
 800daa6:	3301      	adds	r3, #1
 800daa8:	77bb      	strb	r3, [r7, #30]
 800daaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daac:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dab0:	7fba      	ldrb	r2, [r7, #30]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	f4ff af52 	bcc.w	800d95c <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d107      	bne.n	800dad0 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fa25 	bl	800cf16 <VL53LX_f_016>
 800dacc:	4603      	mov	r3, r0
 800dace:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dad0:	2300      	movs	r3, #0
 800dad2:	77bb      	strb	r3, [r7, #30]
 800dad4:	e071      	b.n	800dbba <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dad6:	7fba      	ldrb	r2, [r7, #30]
 800dad8:	4613      	mov	r3, r2
 800dada:	00db      	lsls	r3, r3, #3
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dae6:	4413      	add	r3, r2
 800dae8:	3304      	adds	r3, #4
 800daea:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800daec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daee:	7c9a      	ldrb	r2, [r3, #18]
 800daf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daf2:	7c5b      	ldrb	r3, [r3, #17]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d25c      	bcs.n	800dbb2 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800db00:	429a      	cmp	r2, r3
 800db02:	dd57      	ble.n	800dbb4 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800db08:	2bff      	cmp	r3, #255	@ 0xff
 800db0a:	d053      	beq.n	800dbb4 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800db0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db0e:	7c9b      	ldrb	r3, [r3, #18]
 800db10:	461a      	mov	r2, r3
			prange_data =
 800db12:	234c      	movs	r3, #76	@ 0x4c
 800db14:	fb02 f303 	mul.w	r3, r2, r3
 800db18:	3310      	adds	r3, #16
 800db1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db1c:	4413      	add	r3, r2
 800db1e:	3304      	adds	r3, #4
 800db20:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800db22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d115      	bne.n	800db56 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800db2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db2c:	7c98      	ldrb	r0, [r3, #18]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 1020 	ldrb.w	r1, [r3, #32]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8b5d      	ldrh	r5, [r3, #26]
 800db3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db40:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	9202      	str	r2, [sp, #8]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	9201      	str	r2, [sp, #4]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	462b      	mov	r3, r5
 800db50:	4622      	mov	r2, r4
 800db52:	f7ff fd85 	bl	800d660 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800db56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d115      	bne.n	800db8a <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800db76:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800db7a:	9301      	str	r3, [sp, #4]
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	4623      	mov	r3, r4
 800db82:	f000 fb44 	bl	800e20e <VL53LX_f_018>
 800db86:	4603      	mov	r3, r0
 800db88:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800db8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d108      	bne.n	800dba4 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8bd8      	ldrh	r0, [r3, #30]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800db9c:	693a      	ldr	r2, [r7, #16]
 800db9e:	4619      	mov	r1, r3
 800dba0:	f000 fbda 	bl	800e358 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba6:	7c9b      	ldrb	r3, [r3, #18]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbae:	749a      	strb	r2, [r3, #18]
 800dbb0:	e000      	b.n	800dbb4 <VL53LX_f_025+0x400>
			continue;
 800dbb2:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dbb4:	7fbb      	ldrb	r3, [r7, #30]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	77bb      	strb	r3, [r7, #30]
 800dbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbbc:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dbc0:	7fba      	ldrb	r2, [r7, #30]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d387      	bcc.n	800dad6 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dbc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3724      	adds	r7, #36	@ 0x24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbd2 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b08c      	sub	sp, #48	@ 0x30
 800dbd6:	af02      	add	r7, sp, #8
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	603b      	str	r3, [r7, #0]
 800dbde:	4603      	mov	r3, r0
 800dbe0:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dbe8:	7bfa      	ldrb	r2, [r7, #15]
 800dbea:	4613      	mov	r3, r2
 800dbec:	00db      	lsls	r3, r3, #3
 800dbee:	4413      	add	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	785a      	ldrb	r2, [r3, #1]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	781a      	ldrb	r2, [r3, #0]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	789a      	ldrb	r2, [r3, #2]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc34:	e04d      	b.n	800dcd2 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	78da      	ldrb	r2, [r3, #3]
 800dc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc42:	fb01 f202 	mul.w	r2, r1, r2
 800dc46:	1a9b      	subs	r3, r3, r2
 800dc48:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	7999      	ldrb	r1, [r3, #6]
 800dc4e:	f107 0218 	add.w	r2, r7, #24
 800dc52:	7ff8      	ldrb	r0, [r7, #31]
 800dc54:	f107 0310 	add.w	r3, r7, #16
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	f107 0314 	add.w	r3, r7, #20
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	4613      	mov	r3, r2
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	f000 fa7a 	bl	800e15c <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800dc68:	7ffb      	ldrb	r3, [r7, #31]
 800dc6a:	69ba      	ldr	r2, [r7, #24]
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	440b      	add	r3, r1
 800dc72:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800dc74:	7ffb      	ldrb	r3, [r7, #31]
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	3318      	adds	r3, #24
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	440b      	add	r3, r1
 800dc80:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dc82:	7ffb      	ldrb	r3, [r7, #31]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	3330      	adds	r3, #48	@ 0x30
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	440b      	add	r3, r1
 800dc8e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800dc9e:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800dca0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	3348      	adds	r3, #72	@ 0x48
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	440b      	add	r3, r1
 800dcaa:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800dcac:	697a      	ldr	r2, [r7, #20]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	689a      	ldr	r2, [r3, #8]
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800dcba:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800dcbc:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	3360      	adds	r3, #96	@ 0x60
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	440b      	add	r3, r1
 800dcc6:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dccc:	3301      	adds	r3, #1
 800dcce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	791b      	ldrb	r3, [r3, #4]
 800dcd6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d9ab      	bls.n	800dc36 <VL53LX_f_026+0x64>
	}

	return status;
 800dcde:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3728      	adds	r7, #40	@ 0x28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800dcea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcec:	b08f      	sub	sp, #60	@ 0x3c
 800dcee:	af06      	add	r7, sp, #24
 800dcf0:	60ba      	str	r2, [r7, #8]
 800dcf2:	607b      	str	r3, [r7, #4]
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800dd00:	2300      	movs	r3, #0
 800dd02:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dd04:	7bfa      	ldrb	r2, [r7, #15]
 800dd06:	4613      	mov	r3, r2
 800dd08:	00db      	lsls	r3, r3, #3
 800dd0a:	4413      	add	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	4413      	add	r3, r2
 800dd16:	3304      	adds	r3, #4
 800dd18:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	77fb      	strb	r3, [r7, #31]
 800dd2c:	e0b9      	b.n	800dea2 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	78da      	ldrb	r2, [r3, #3]
 800dd32:	7ffb      	ldrb	r3, [r7, #31]
 800dd34:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd38:	fb01 f202 	mul.w	r2, r1, r2
 800dd3c:	1a9b      	subs	r3, r3, r2
 800dd3e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800dd40:	7ffb      	ldrb	r3, [r7, #31]
 800dd42:	3301      	adds	r3, #1
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	78d2      	ldrb	r2, [r2, #3]
 800dd48:	fb93 f1f2 	sdiv	r1, r3, r2
 800dd4c:	fb01 f202 	mul.w	r2, r1, r2
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	789b      	ldrb	r3, [r3, #2]
 800dd58:	7dfa      	ldrb	r2, [r7, #23]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	f080 809e 	bcs.w	800de9c <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800dd64:	7dba      	ldrb	r2, [r7, #22]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	f080 8098 	bcs.w	800de9c <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	3348      	adds	r3, #72	@ 0x48
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10e      	bne.n	800dd9a <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800dd7c:	7dfb      	ldrb	r3, [r7, #23]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	3360      	adds	r3, #96	@ 0x60
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d106      	bne.n	800dd9a <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	4413      	add	r3, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800dd98:	e043      	b.n	800de22 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	3348      	adds	r3, #72	@ 0x48
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	db0e      	blt.n	800ddc8 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800ddaa:	7dfb      	ldrb	r3, [r7, #23]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	3360      	adds	r3, #96	@ 0x60
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	db06      	blt.n	800ddc8 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800ddc6:	e02c      	b.n	800de22 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	3348      	adds	r3, #72	@ 0x48
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	da1e      	bge.n	800de16 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddd8:	7dfb      	ldrb	r3, [r7, #23]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	3360      	adds	r3, #96	@ 0x60
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	db16      	blt.n	800de16 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dde8:	7dbb      	ldrb	r3, [r7, #22]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	3348      	adds	r3, #72	@ 0x48
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	db0e      	blt.n	800de16 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ddf8:	7dbb      	ldrb	r3, [r7, #22]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	3360      	adds	r3, #96	@ 0x60
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800de04:	2b00      	cmp	r3, #0
 800de06:	da06      	bge.n	800de16 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	4413      	add	r3, r2
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800de14:	e005      	b.n	800de22 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800de16:	7dfb      	ldrb	r3, [r7, #23]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	4413      	add	r3, r2
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800de22:	7dfb      	ldrb	r3, [r7, #23]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	4413      	add	r3, r2
 800de28:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d035      	beq.n	800de9c <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	7ffa      	ldrb	r2, [r7, #31]
 800de34:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	685c      	ldr	r4, [r3, #4]
 800de40:	7dfb      	ldrb	r3, [r7, #23]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	3318      	adds	r3, #24
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	685d      	ldr	r5, [r3, #4]
 800de4c:	7dfb      	ldrb	r3, [r7, #23]
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	3330      	adds	r3, #48	@ 0x30
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	685e      	ldr	r6, [r3, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	78d2      	ldrb	r2, [r2, #3]
 800de60:	69b9      	ldr	r1, [r7, #24]
 800de62:	3118      	adds	r1, #24
 800de64:	7ff8      	ldrb	r0, [r7, #31]
 800de66:	9105      	str	r1, [sp, #20]
 800de68:	9204      	str	r2, [sp, #16]
 800de6a:	9303      	str	r3, [sp, #12]
 800de6c:	2300      	movs	r3, #0
 800de6e:	9302      	str	r3, [sp, #8]
 800de70:	2300      	movs	r3, #0
 800de72:	9301      	str	r3, [sp, #4]
 800de74:	2300      	movs	r3, #0
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	4633      	mov	r3, r6
 800de7a:	462a      	mov	r2, r5
 800de7c:	4621      	mov	r1, r4
 800de7e:	f000 f81c 	bl	800deba <VL53LX_f_028>
 800de82:	4603      	mov	r3, r0
 800de84:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800de86:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de8a:	f113 0f0f 	cmn.w	r3, #15
 800de8e:	d105      	bne.n	800de9c <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	4413      	add	r3, r2
 800de96:	2200      	movs	r2, #0
 800de98:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800de9c:	7ffb      	ldrb	r3, [r7, #31]
 800de9e:	3301      	adds	r3, #1
 800dea0:	77fb      	strb	r3, [r7, #31]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	791b      	ldrb	r3, [r3, #4]
 800dea6:	7ffa      	ldrb	r2, [r7, #31]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	f4ff af40 	bcc.w	800dd2e <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800deae:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3724      	adds	r7, #36	@ 0x24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800deba <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800deba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800debe:	b0b2      	sub	sp, #200	@ 0xc8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800dec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800deca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ded4:	23f1      	movs	r3, #241	@ 0xf1
 800ded6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800deda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dede:	f04f 0300 	mov.w	r3, #0
 800dee2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800dee6:	f04f 0200 	mov.w	r2, #0
 800deea:	f04f 0300 	mov.w	r3, #0
 800deee:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800defe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df02:	17da      	asrs	r2, r3, #31
 800df04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800df10:	17da      	asrs	r2, r3, #31
 800df12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800df16:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800df22:	4602      	mov	r2, r0
 800df24:	ebb3 0802 	subs.w	r8, r3, r2
 800df28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df2c:	460a      	mov	r2, r1
 800df2e:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800df36:	17da      	asrs	r2, r3, #31
 800df38:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800df3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800df40:	460b      	mov	r3, r1
 800df42:	ebb8 0a03 	subs.w	sl, r8, r3
 800df46:	4613      	mov	r3, r2
 800df48:	eb69 0b03 	sbc.w	fp, r9, r3
 800df4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df50:	17da      	asrs	r2, r3, #31
 800df52:	673b      	str	r3, [r7, #112]	@ 0x70
 800df54:	677a      	str	r2, [r7, #116]	@ 0x74
 800df56:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800df5a:	460b      	mov	r3, r1
 800df5c:	ebba 0403 	subs.w	r4, sl, r3
 800df60:	4613      	mov	r3, r2
 800df62:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df66:	f04f 0200 	mov.w	r2, #0
 800df6a:	f04f 0300 	mov.w	r3, #0
 800df6e:	032b      	lsls	r3, r5, #12
 800df70:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800df74:	0322      	lsls	r2, r4, #12
 800df76:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df7e:	17da      	asrs	r2, r3, #31
 800df80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800df82:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800df84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800df88:	17da      	asrs	r2, r3, #31
 800df8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800df8c:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df8e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800df92:	4623      	mov	r3, r4
 800df94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800df98:	4602      	mov	r2, r0
 800df9a:	1a9b      	subs	r3, r3, r2
 800df9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df9e:	462b      	mov	r3, r5
 800dfa0:	460a      	mov	r2, r1
 800dfa2:	eb63 0302 	sbc.w	r3, r3, r2
 800dfa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dfa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfac:	17da      	asrs	r2, r3, #31
 800dfae:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfb0:	657a      	str	r2, [r7, #84]	@ 0x54
 800dfb2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800dfb6:	4623      	mov	r3, r4
 800dfb8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	1a9b      	subs	r3, r3, r2
 800dfc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfc2:	462b      	mov	r3, r5
 800dfc4:	460a      	mov	r2, r1
 800dfc6:	eb63 0302 	sbc.w	r3, r3, r2
 800dfca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dfcc:	f04f 0200 	mov.w	r2, #0
 800dfd0:	f04f 0300 	mov.w	r3, #0
 800dfd4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800dfd8:	4629      	mov	r1, r5
 800dfda:	030b      	lsls	r3, r1, #12
 800dfdc:	4621      	mov	r1, r4
 800dfde:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800dfe2:	4621      	mov	r1, r4
 800dfe4:	030a      	lsls	r2, r1, #12
 800dfe6:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800dfea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800dfee:	4313      	orrs	r3, r2
 800dff0:	f000 80a8 	beq.w	800e144 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800dff4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800dff8:	f04f 0000 	mov.w	r0, #0
 800dffc:	f04f 0100 	mov.w	r1, #0
 800e000:	0319      	lsls	r1, r3, #12
 800e002:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e006:	0310      	lsls	r0, r2, #12
 800e008:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e00c:	1814      	adds	r4, r2, r0
 800e00e:	633c      	str	r4, [r7, #48]	@ 0x30
 800e010:	414b      	adcs	r3, r1
 800e012:	637b      	str	r3, [r7, #52]	@ 0x34
 800e014:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e018:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e01c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e020:	1891      	adds	r1, r2, r2
 800e022:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e024:	415b      	adcs	r3, r3
 800e026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e02c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e030:	f7f2 f8f6 	bl	8000220 <__aeabi_ldivmod>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800e03c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e040:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800e044:	6239      	str	r1, [r7, #32]
 800e046:	f143 0300 	adc.w	r3, r3, #0
 800e04a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e04c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e050:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800e054:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e058:	2200      	movs	r2, #0
 800e05a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e05c:	647a      	str	r2, [r7, #68]	@ 0x44
 800e05e:	f04f 0200 	mov.w	r2, #0
 800e062:	f04f 0300 	mov.w	r3, #0
 800e066:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e06a:	4629      	mov	r1, r5
 800e06c:	030b      	lsls	r3, r1, #12
 800e06e:	4621      	mov	r1, r4
 800e070:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e074:	4621      	mov	r1, r4
 800e076:	030a      	lsls	r2, r1, #12
 800e078:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e07c:	1884      	adds	r4, r0, r2
 800e07e:	61bc      	str	r4, [r7, #24]
 800e080:	eb41 0303 	adc.w	r3, r1, r3
 800e084:	61fb      	str	r3, [r7, #28]
 800e086:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e08a:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e08e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e092:	1c51      	adds	r1, r2, #1
 800e094:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e096:	f143 0300 	adc.w	r3, r3, #0
 800e09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e09c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	0fdb      	lsrs	r3, r3, #31
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	613b      	str	r3, [r7, #16]
 800e0a8:	617a      	str	r2, [r7, #20]
 800e0aa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	189b      	adds	r3, r3, r2
 800e0b4:	60bb      	str	r3, [r7, #8]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	462a      	mov	r2, r5
 800e0ba:	eb42 0303 	adc.w	r3, r2, r3
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	f04f 0200 	mov.w	r2, #0
 800e0c4:	f04f 0300 	mov.w	r3, #0
 800e0c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	084a      	lsrs	r2, r1, #1
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	104b      	asrs	r3, r1, #1
 800e0da:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800e0de:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	da05      	bge.n	800e0f2 <VL53LX_f_028+0x238>
			mean_phase = 0;
 800e0e6:	f04f 0200 	mov.w	r2, #0
 800e0ea:	f04f 0300 	mov.w	r3, #0
 800e0ee:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e0f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e0f6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e0fa:	f173 0300 	sbcs.w	r3, r3, #0
 800e0fe:	db05      	blt.n	800e10c <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e104:	f04f 0300 	mov.w	r3, #0
 800e108:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800e10c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e110:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e114:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800e118:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e11a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e11e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e122:	fb01 f202 	mul.w	r2, r1, r2
 800e126:	1a9b      	subs	r3, r3, r2
 800e128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800e12c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e130:	17da      	asrs	r2, r3, #31
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e13a:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800e13e:	2300      	movs	r3, #0
 800e140:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e144:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e14c:	601a      	str	r2, [r3, #0]

	return status;
 800e14e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800e152:	4618      	mov	r0, r3
 800e154:	37c8      	adds	r7, #200	@ 0xc8
 800e156:	46bd      	mov	sp, r7
 800e158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e15c <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b087      	sub	sp, #28
 800e160:	af00      	add	r7, sp, #0
 800e162:	60ba      	str	r2, [r7, #8]
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	4603      	mov	r3, r0
 800e168:	73fb      	strb	r3, [r7, #15]
 800e16a:	460b      	mov	r3, r1
 800e16c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e17c:	7bfa      	ldrb	r2, [r7, #15]
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	3206      	adds	r2, #6
 800e182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e190:	2300      	movs	r3, #0
 800e192:	75fb      	strb	r3, [r7, #23]
 800e194:	e02f      	b.n	800e1f6 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e196:	7bfa      	ldrb	r2, [r7, #15]
 800e198:	7dfb      	ldrb	r3, [r7, #23]
 800e19a:	4413      	add	r3, r2
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	7a92      	ldrb	r2, [r2, #10]
 800e1a0:	441a      	add	r2, r3
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
 800e1a4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	7a92      	ldrb	r2, [r2, #10]
 800e1aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e1ae:	fb01 f202 	mul.w	r2, r1, r2
 800e1b2:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e1b4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e1b6:	7dfa      	ldrb	r2, [r7, #23]
 800e1b8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d20a      	bcs.n	800e1d4 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	7db9      	ldrb	r1, [r7, #22]
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	3106      	adds	r1, #6
 800e1c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1cc:	441a      	add	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	e00d      	b.n	800e1f0 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e1d4:	7dfa      	ldrb	r2, [r7, #23]
 800e1d6:	7bbb      	ldrb	r3, [r7, #14]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d909      	bls.n	800e1f0 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	7db9      	ldrb	r1, [r7, #22]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	3106      	adds	r1, #6
 800e1e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1ea:	441a      	add	r2, r3
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ee:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	75fb      	strb	r3, [r7, #23]
 800e1f6:	7bbb      	ldrb	r3, [r7, #14]
 800e1f8:	005a      	lsls	r2, r3, #1
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	daca      	bge.n	800e196 <VL53LX_f_022+0x3a>
	}
}
 800e200:	bf00      	nop
 800e202:	bf00      	nop
 800e204:	371c      	adds	r7, #28
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b088      	sub	sp, #32
 800e212:	af00      	add	r7, sp, #0
 800e214:	60ba      	str	r2, [r7, #8]
 800e216:	461a      	mov	r2, r3
 800e218:	4603      	mov	r3, r0
 800e21a:	81fb      	strh	r3, [r7, #14]
 800e21c:	460b      	mov	r3, r1
 800e21e:	81bb      	strh	r3, [r7, #12]
 800e220:	4613      	mov	r3, r2
 800e222:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e224:	2300      	movs	r3, #0
 800e226:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e230:	2300      	movs	r3, #0
 800e232:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e236:	89fa      	ldrh	r2, [r7, #14]
 800e238:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23c:	89ba      	ldrh	r2, [r7, #12]
 800e23e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e248:	88fa      	ldrh	r2, [r7, #6]
 800e24a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24e:	8a5b      	ldrh	r3, [r3, #18]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e254:	23f1      	movs	r3, #241	@ 0xf1
 800e256:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e260:	23f1      	movs	r3, #241	@ 0xf1
 800e262:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d16f      	bne.n	800e34c <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26e:	8a5b      	ldrh	r3, [r3, #18]
 800e270:	4618      	mov	r0, r3
 800e272:	f7fd f904 	bl	800b47e <VL53LX_calc_pll_period_us>
 800e276:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	3301      	adds	r3, #1
 800e27e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e282:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e284:	4619      	mov	r1, r3
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e28c:	6978      	ldr	r0, [r7, #20]
 800e28e:	f7fd f90d 	bl	800b4ac <VL53LX_duration_maths>
 800e292:	4602      	mov	r2, r0
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e29c:	0119      	lsls	r1, r3, #4
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2a4:	6978      	ldr	r0, [r7, #20]
 800e2a6:	f7fd f901 	bl	800b4ac <VL53LX_duration_maths>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f7fd fb6e 	bl	800b99c <VL53LX_rate_maths>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c6:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ce:	6a1b      	ldr	r3, [r3, #32]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7fd fb62 	bl	800b99c <VL53LX_rate_maths>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	461a      	mov	r2, r3
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f7fd fb55 	bl	800b99c <VL53LX_rate_maths>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f8:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e2fe:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800e304:	4413      	add	r3, r2
 800e306:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e308:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d905      	bls.n	800e31c <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e310:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	fbb2 f3f3 	udiv	r3, r2, r3
 800e31a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31e:	8ada      	ldrh	r2, [r3, #22]
 800e320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e324:	69b9      	ldr	r1, [r7, #24]
 800e326:	2006      	movs	r0, #6
 800e328:	f7fd fb7d 	bl	800ba26 <VL53LX_rate_per_spad_maths>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e332:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33a:	8ad9      	ldrh	r1, [r3, #22]
 800e33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33e:	69db      	ldr	r3, [r3, #28]
 800e340:	461a      	mov	r2, r3
 800e342:	f7fd f90c 	bl	800b55e <VL53LX_events_per_spad_maths>
 800e346:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34a:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e34c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e358:	b590      	push	{r4, r7, lr}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af02      	add	r7, sp, #8
 800e35e:	4603      	mov	r3, r0
 800e360:	603a      	str	r2, [r7, #0]
 800e362:	80fb      	strh	r3, [r7, #6]
 800e364:	460b      	mov	r3, r1
 800e366:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	8a58      	ldrh	r0, [r3, #18]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	8a9c      	ldrh	r4, [r3, #20]
 800e374:	88fb      	ldrh	r3, [r7, #6]
 800e376:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e37a:	9201      	str	r2, [sp, #4]
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	2300      	movs	r3, #0
 800e380:	4622      	mov	r2, r4
 800e382:	f7fd fb85 	bl	800ba90 <VL53LX_range_maths>
 800e386:	4603      	mov	r3, r0
 800e388:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	8a58      	ldrh	r0, [r3, #18]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	8a9c      	ldrh	r4, [r3, #20]
 800e39e:	88fb      	ldrh	r3, [r7, #6]
 800e3a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e3a4:	9201      	str	r2, [sp, #4]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	f7fd fb70 	bl	800ba90 <VL53LX_range_maths>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	8a58      	ldrh	r0, [r3, #18]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	8a9c      	ldrh	r4, [r3, #20]
 800e3c8:	88fb      	ldrh	r3, [r7, #6]
 800e3ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	f7fd fb5b 	bl	800ba90 <VL53LX_range_maths>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd90      	pop	{r4, r7, pc}

0800e3ec <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e408:	22ac      	movs	r2, #172	@ 0xac
 800e40a:	68b9      	ldr	r1, [r7, #8]
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f008 fcc8 	bl	8016da2 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e412:	2300      	movs	r3, #0
 800e414:	75fb      	strb	r3, [r7, #23]
 800e416:	e008      	b.n	800e42a <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e418:	7dfa      	ldrb	r2, [r7, #23]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	3206      	adds	r2, #6
 800e41e:	2100      	movs	r1, #0
 800e420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	3301      	adds	r3, #1
 800e428:	75fb      	strb	r3, [r7, #23]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7a5b      	ldrb	r3, [r3, #9]
 800e42e:	7dfa      	ldrb	r2, [r7, #23]
 800e430:	429a      	cmp	r2, r3
 800e432:	d3f1      	bcc.n	800e418 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e434:	68f9      	ldr	r1, [r7, #12]
 800e436:	68b8      	ldr	r0, [r7, #8]
 800e438:	f000 f878 	bl	800e52c <VL53LX_f_030>
 800e43c:	4603      	mov	r3, r0
 800e43e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	7a9a      	ldrb	r2, [r3, #10]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	7a9b      	ldrb	r3, [r3, #10]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d203      	bcs.n	800e454 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	7a9b      	ldrb	r3, [r3, #10]
 800e450:	75bb      	strb	r3, [r7, #22]
 800e452:	e002      	b.n	800e45a <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	7a9b      	ldrb	r3, [r3, #10]
 800e458:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e45a:	2300      	movs	r3, #0
 800e45c:	75fb      	strb	r3, [r7, #23]
 800e45e:	e05c      	b.n	800e51a <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e460:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e464:	2b00      	cmp	r3, #0
 800e466:	db0f      	blt.n	800e488 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e46c:	461a      	mov	r2, r3
 800e46e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e472:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	7a92      	ldrb	r2, [r2, #10]
 800e478:	b252      	sxtb	r2, r2
 800e47a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e47e:	fb01 f202 	mul.w	r2, r1, r2
 800e482:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e484:	757b      	strb	r3, [r7, #21]
 800e486:	e013      	b.n	800e4b0 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	7a9b      	ldrb	r3, [r3, #10]
 800e48c:	b25b      	sxtb	r3, r3
 800e48e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e494:	4619      	mov	r1, r3
 800e496:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e49a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e49c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	7a92      	ldrb	r2, [r2, #10]
 800e4a2:	b252      	sxtb	r2, r2
 800e4a4:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4a8:	fb01 f202 	mul.w	r2, r1, r2
 800e4ac:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e4ae:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e4b0:	7d7b      	ldrb	r3, [r7, #21]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	3206      	adds	r2, #6
 800e4b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e4bc:	7df9      	ldrb	r1, [r7, #23]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3106      	adds	r1, #6
 800e4c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	dd12      	ble.n	800e4f0 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e4ca:	7d7b      	ldrb	r3, [r7, #21]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	3206      	adds	r2, #6
 800e4d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e4d6:	7df9      	ldrb	r1, [r7, #23]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3106      	adds	r1, #6
 800e4dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e4e0:	7d79      	ldrb	r1, [r7, #21]
 800e4e2:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e4e4:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	1d82      	adds	r2, r0, #6
 800e4ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e4ee:	e006      	b.n	800e4fe <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e4f0:	7d7b      	ldrb	r3, [r7, #21]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	3206      	adds	r2, #6
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e4fe:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e500:	7d7b      	ldrb	r3, [r7, #21]
 800e502:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3206      	adds	r2, #6
 800e508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	1d82      	adds	r2, r0, #6
 800e510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	3301      	adds	r3, #1
 800e518:	75fb      	strb	r3, [r7, #23]
 800e51a:	7dfa      	ldrb	r2, [r7, #23]
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d39e      	bcc.n	800e460 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fd fb87 	bl	800bc60 <VL53LX_decode_vcsel_period>
 800e552:	4603      	mov	r3, r0
	period = 2048 *
 800e554:	02db      	lsls	r3, r3, #11
 800e556:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00a      	beq.n	800e574 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	fbb3 f2f2 	udiv	r2, r3, r2
 800e56a:	68b9      	ldr	r1, [r7, #8]
 800e56c:	fb01 f202 	mul.w	r2, r1, r2
 800e570:	1a9b      	subs	r3, r3, r2
 800e572:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800e57a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e57c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd09      	ble.n	800e59c <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e58e:	2b00      	cmp	r3, #0
 800e590:	da01      	bge.n	800e596 <VL53LX_f_030+0x6a>
 800e592:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e596:	12db      	asrs	r3, r3, #11
 800e598:	75fb      	strb	r3, [r7, #23]
 800e59a:	e008      	b.n	800e5ae <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	da01      	bge.n	800e5aa <VL53LX_f_030+0x7e>
 800e5a6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e5aa:	12db      	asrs	r3, r3, #11
 800e5ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b08e      	sub	sp, #56	@ 0x38
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e5ec:	22ac      	movs	r2, #172	@ 0xac
 800e5ee:	6879      	ldr	r1, [r7, #4]
 800e5f0:	6838      	ldr	r0, [r7, #0]
 800e5f2:	f008 fbd6 	bl	8016da2 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e602:	e00a      	b.n	800e61a <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e604:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	4413      	add	r3, r2
 800e60c:	2210      	movs	r2, #16
 800e60e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e610:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e614:	3301      	adds	r3, #1
 800e616:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e61a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e61e:	2b05      	cmp	r3, #5
 800e620:	d9f0      	bls.n	800e604 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e622:	2300      	movs	r3, #0
 800e624:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e628:	e00b      	b.n	800e642 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e62a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	3206      	adds	r2, #6
 800e632:	2100      	movs	r1, #0
 800e634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e638:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e63c:	3301      	adds	r3, #1
 800e63e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	7a5b      	ldrb	r3, [r3, #9]
 800e646:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d3ed      	bcc.n	800e62a <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e64e:	2300      	movs	r3, #0
 800e650:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e654:	e012      	b.n	800e67c <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800e656:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e65a:	3338      	adds	r3, #56	@ 0x38
 800e65c:	443b      	add	r3, r7
 800e65e:	2200      	movs	r2, #0
 800e660:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e664:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e668:	3338      	adds	r3, #56	@ 0x38
 800e66a:	443b      	add	r3, r7
 800e66c:	2200      	movs	r2, #0
 800e66e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e672:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e676:	3301      	adds	r3, #1
 800e678:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e67c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e680:	2b0f      	cmp	r3, #15
 800e682:	d9e8      	bls.n	800e656 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e684:	2300      	movs	r3, #0
 800e686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e68a:	2300      	movs	r3, #0
 800e68c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e690:	e068      	b.n	800e764 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800e692:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	4413      	add	r3, r2
 800e69a:	7b1b      	ldrb	r3, [r3, #12]
 800e69c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e6a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6a4:	3338      	adds	r3, #56	@ 0x38
 800e6a6:	443b      	add	r3, r7
 800e6a8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d115      	bne.n	800e6dc <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e6b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6b4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e6b8:	0092      	lsls	r2, r2, #2
 800e6ba:	b2d2      	uxtb	r2, r2
 800e6bc:	3338      	adds	r3, #56	@ 0x38
 800e6be:	443b      	add	r3, r7
 800e6c0:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e6c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800e6d0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e6dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e6e4:	443a      	add	r2, r7
 800e6e6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e6ea:	3201      	adds	r2, #1
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	3338      	adds	r3, #56	@ 0x38
 800e6f0:	443b      	add	r3, r7
 800e6f2:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e6f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6fa:	3338      	adds	r3, #56	@ 0x38
 800e6fc:	443b      	add	r3, r7
 800e6fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e706:	2300      	movs	r3, #0
 800e708:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e70c:	e021      	b.n	800e752 <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800e70e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e712:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e716:	441a      	add	r2, r3
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	3206      	adds	r2, #6
 800e71c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e720:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e724:	009a      	lsls	r2, r3, #2
 800e726:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e72a:	441a      	add	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3206      	adds	r2, #6
 800e730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e734:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800e738:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800e73c:	4402      	add	r2, r0
 800e73e:	4419      	add	r1, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	3206      	adds	r2, #6
 800e744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e748:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e74c:	3301      	adds	r3, #1
 800e74e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e752:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e756:	2b03      	cmp	r3, #3
 800e758:	d9d9      	bls.n	800e70e <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e75a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e75e:	3301      	adds	r3, #1
 800e760:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e764:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d992      	bls.n	800e692 <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e772:	e022      	b.n	800e7ba <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800e774:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e778:	683a      	ldr	r2, [r7, #0]
 800e77a:	4413      	add	r3, r2
 800e77c:	7b1b      	ldrb	r3, [r3, #12]
 800e77e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e782:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e786:	2b0f      	cmp	r3, #15
 800e788:	d80c      	bhi.n	800e7a4 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e78a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800e78e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800e792:	3238      	adds	r2, #56	@ 0x38
 800e794:	443a      	add	r2, r7
 800e796:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	4413      	add	r3, r2
 800e79e:	460a      	mov	r2, r1
 800e7a0:	749a      	strb	r2, [r3, #18]
 800e7a2:	e005      	b.n	800e7b0 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800e7a4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e7b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7be:	2b05      	cmp	r3, #5
 800e7c0:	d9d8      	bls.n	800e774 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e7c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7d4:	e050      	b.n	800e878 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e7d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7da:	3338      	adds	r3, #56	@ 0x38
 800e7dc:	443b      	add	r3, r7
 800e7de:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800e7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dd41      	ble.n	800e86e <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800e7ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7ee:	3338      	adds	r3, #56	@ 0x38
 800e7f0:	443b      	add	r3, r7
 800e7f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e800:	e031      	b.n	800e866 <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800e802:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e806:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e80a:	441a      	add	r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	3206      	adds	r2, #6
 800e810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e816:	0fda      	lsrs	r2, r3, #31
 800e818:	4413      	add	r3, r2
 800e81a:	105b      	asrs	r3, r3, #1
 800e81c:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e81e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e822:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e826:	441a      	add	r2, r3
 800e828:	4401      	add	r1, r0
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	3206      	adds	r2, #6
 800e82e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e832:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e836:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e83a:	441a      	add	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	3206      	adds	r2, #6
 800e840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e844:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e848:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e84c:	441a      	add	r2, r3
 800e84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e850:	fb91 f1f3 	sdiv	r1, r1, r3
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	3206      	adds	r2, #6
 800e858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e85c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e860:	3301      	adds	r3, #1
 800e862:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e866:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d9c9      	bls.n	800e802 <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e86e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e872:	3301      	adds	r3, #1
 800e874:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e878:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e87c:	2b0f      	cmp	r3, #15
 800e87e:	d9aa      	bls.n	800e7d6 <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2200      	movs	r2, #0
 800e884:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d002      	beq.n	800e898 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2204      	movs	r2, #4
 800e896:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e898:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3738      	adds	r7, #56	@ 0x38
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a6:	b0cb      	sub	sp, #300	@ 0x12c
 800e8a8:	af06      	add	r7, sp, #24
 800e8aa:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800e8ae:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800e8b2:	6020      	str	r0, [r4, #0]
 800e8b4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800e8b8:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800e8bc:	6001      	str	r1, [r0, #0]
 800e8be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800e8c2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800e8c6:	600a      	str	r2, [r1, #0]
 800e8c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800e8cc:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800e8d0:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e8e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e8e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e8e8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800e8ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e8f0:	f107 0318 	add.w	r3, r7, #24
 800e8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e902:	2300      	movs	r3, #0
 800e904:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e924:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e928:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f7ff fe44 	bl	800e5ba <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e936:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e938:	4619      	mov	r1, r3
 800e93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e93e:	3348      	adds	r3, #72	@ 0x48
 800e940:	461a      	mov	r2, r3
 800e942:	2000      	movs	r0, #0
 800e944:	f7fd f9dd 	bl	800bd02 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e948:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e94c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e950:	3348      	adds	r3, #72	@ 0x48
 800e952:	4619      	mov	r1, r3
 800e954:	4610      	mov	r0, r2
 800e956:	f7fd f996 	bl	800bc86 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e95a:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d142      	bne.n	800e9e8 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e962:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e966:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e970:	2b00      	cmp	r3, #0
 800e972:	d039      	beq.n	800e9e8 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800e974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e978:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800e980:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e984:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800e98e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e992:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800e99c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800e9aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800e9ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800e9b8:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800e9bc:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800e9c0:	6809      	ldr	r1, [r1, #0]
 800e9c2:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800e9c6:	f107 0014 	add.w	r0, r7, #20
 800e9ca:	9004      	str	r0, [sp, #16]
 800e9cc:	9103      	str	r1, [sp, #12]
 800e9ce:	9202      	str	r2, [sp, #8]
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	4632      	mov	r2, r6
 800e9da:	4629      	mov	r1, r5
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f002 f9d6 	bl	8010d8e <VL53LX_f_032>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e9e8:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d115      	bne.n	800ea1c <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e9f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00c      	beq.n	800ea1c <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800ea02:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea0c:	3348      	adds	r3, #72	@ 0x48
 800ea0e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800ea12:	f002 fc2b 	bl	801126c <VL53LX_f_033>
 800ea16:	4603      	mov	r3, r0
 800ea18:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800ea1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800ea24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800ea2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea30:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800ea34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea38:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800ea3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea40:	2200      	movs	r2, #0
 800ea42:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800ea46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800ea50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ea5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800ea6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ea82:	2300      	movs	r3, #0
 800ea84:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ea88:	e108      	b.n	800ec9c <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800ea8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ea98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800ea9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaa0:	3348      	adds	r3, #72	@ 0x48
 800eaa2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800eaa6:	7814      	ldrb	r4, [r2, #0]
 800eaa8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800eaac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800eab0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800eab4:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800eab8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800eabc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eac0:	9405      	str	r4, [sp, #20]
 800eac2:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800eac6:	9404      	str	r4, [sp, #16]
 800eac8:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800eacc:	9403      	str	r4, [sp, #12]
 800eace:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800ead2:	9402      	str	r4, [sp, #8]
 800ead4:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800ead8:	9401      	str	r4, [sp, #4]
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eae0:	6812      	ldr	r2, [r2, #0]
 800eae2:	6809      	ldr	r1, [r1, #0]
 800eae4:	6800      	ldr	r0, [r0, #0]
 800eae6:	f7fe fe65 	bl	800d7b4 <VL53LX_f_025>
 800eaea:	4603      	mov	r3, r0
 800eaec:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800eaf0:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f040 80cb 	bne.w	800ec90 <VL53LX_hist_process_data+0x3ec>
 800eafa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f040 80c6 	bne.w	800ec90 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800eb04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb08:	7c9b      	ldrb	r3, [r3, #18]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d110      	bne.n	800eb30 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800eb0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb12:	3314      	adds	r3, #20
 800eb14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800eb18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb1c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800eb1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb22:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800eb24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb28:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800eb2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb2e:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800eb30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800eb3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800eb40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb4c:	fb02 f303 	mul.w	r3, r2, r3
 800eb50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800eb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800eb64:	e08b      	b.n	800ec7e <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800eb66:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800eb6a:	224c      	movs	r2, #76	@ 0x4c
 800eb6c:	fb02 f303 	mul.w	r3, r2, r3
 800eb70:	3310      	adds	r3, #16
 800eb72:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800eb76:	4413      	add	r3, r2
 800eb78:	3304      	adds	r3, #4
 800eb7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800eb7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb82:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800eb86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb8a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	dd0e      	ble.n	800ebb0 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800eb92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb96:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800eb9a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800eb9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eba0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800eba4:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	b29b      	uxth	r3, r3
				delta_mm =
 800ebaa:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800ebae:	e00d      	b.n	800ebcc <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800ebb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebb4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ebb8:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800ebba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebbe:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ebc2:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	b29b      	uxth	r3, r3
				delta_mm =
 800ebc8:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800ebcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800ebd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ebdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebe8:	fb02 f303 	mul.w	r3, r2, r3
 800ebec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800ebf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebf4:	015b      	lsls	r3, r3, #5
 800ebf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800ebfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebfe:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ec02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800ec10:	429a      	cmp	r2, r3
 800ec12:	dd2f      	ble.n	800ec74 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800ec14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec18:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ec1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	da22      	bge.n	800ec74 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800ec2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ec34:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d91b      	bls.n	800ec74 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ec3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec40:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800ec42:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800ec44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d913      	bls.n	800ec74 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800ec4c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800ec50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ec54:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800ec58:	6812      	ldr	r2, [r2, #0]
 800ec5a:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	da09      	bge.n	800ec74 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800ec60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec64:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800ec68:	224c      	movs	r2, #76	@ 0x4c
 800ec6a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f008 f897 	bl	8016da2 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800ec74:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ec78:	3301      	adds	r3, #1
 800ec7a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ec7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec82:	7c9b      	ldrb	r3, [r3, #18]
 800ec84:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	f4ff af6c 	bcc.w	800eb66 <VL53LX_hist_process_data+0x2c2>
 800ec8e:	e000      	b.n	800ec92 <VL53LX_hist_process_data+0x3ee>
			continue;
 800ec90:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ec92:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800ec96:	3301      	adds	r3, #1
 800ec98:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ec9c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800eca0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800eca4:	429a      	cmp	r2, r3
 800eca6:	f67f aef0 	bls.w	800ea8a <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ecaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ecae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800ecb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ecbc:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecca <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b086      	sub	sp, #24
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	607a      	str	r2, [r7, #4]
 800ecd6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ecdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d104      	bne.n	800ecee <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7f9 fb77 	bl	80083d8 <VL53LX_disable_firmware>
 800ecea:	4603      	mov	r3, r0
 800ecec:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ecee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d104      	bne.n	800ed00 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7f9 fb9f 	bl	800843a <VL53LX_enable_powerforce>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ed00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ed08:	21fa      	movs	r1, #250	@ 0xfa
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f002 fd1e 	bl	801174c <VL53LX_WaitUs>
 800ed10:	4603      	mov	r3, r0
 800ed12:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ed14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d107      	bne.n	800ed2c <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f240 7181 	movw	r1, #1921	@ 0x781
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f002 fc20 	bl	8011568 <VL53LX_WrByte>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ed2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d107      	bne.n	800ed44 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800ed34:	2205      	movs	r2, #5
 800ed36:	f240 6183 	movw	r1, #1667	@ 0x683
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f002 fc14 	bl	8011568 <VL53LX_WrByte>
 800ed40:	4603      	mov	r3, r0
 800ed42:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800ed44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d105      	bne.n	800ed58 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ed4c:	6879      	ldr	r1, [r7, #4]
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f002 fcfc 	bl	801174c <VL53LX_WaitUs>
 800ed54:	4603      	mov	r3, r0
 800ed56:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800ed58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d107      	bne.n	800ed70 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ed60:	2201      	movs	r2, #1
 800ed62:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f002 fbfe 	bl	8011568 <VL53LX_WrByte>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800ed70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d108      	bne.n	800ed8a <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800ed78:	897b      	ldrh	r3, [r7, #10]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f240 7184 	movw	r1, #1924	@ 0x784
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f002 fc1b 	bl	80115bc <VL53LX_WrWord>
 800ed86:	4603      	mov	r3, r0
 800ed88:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800ed8a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	60f8      	str	r0, [r7, #12]
 800ed9e:	607b      	str	r3, [r7, #4]
 800eda0:	460b      	mov	r3, r1
 800eda2:	72fb      	strb	r3, [r7, #11]
 800eda4:	4613      	mov	r3, r2
 800eda6:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eda8:	2300      	movs	r3, #0
 800edaa:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800edb0:	7afb      	ldrb	r3, [r7, #11]
 800edb2:	75bb      	strb	r3, [r7, #22]
 800edb4:	e041      	b.n	800ee3a <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800edb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d108      	bne.n	800edd0 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800edbe:	7dbb      	ldrb	r3, [r7, #22]
 800edc0:	461a      	mov	r2, r3
 800edc2:	f240 7194 	movw	r1, #1940	@ 0x794
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f002 fbce 	bl	8011568 <VL53LX_WrByte>
 800edcc:	4603      	mov	r3, r0
 800edce:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800edd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d107      	bne.n	800ede8 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800edd8:	2200      	movs	r2, #0
 800edda:	f240 7183 	movw	r1, #1923	@ 0x783
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f002 fbc2 	bl	8011568 <VL53LX_WrByte>
 800ede4:	4603      	mov	r3, r0
 800ede6:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ede8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d105      	bne.n	800edfc <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800edf0:	2105      	movs	r1, #5
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f002 fcaa 	bl	801174c <VL53LX_WaitUs>
 800edf8:	4603      	mov	r3, r0
 800edfa:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800edfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d107      	bne.n	800ee14 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800ee04:	2201      	movs	r2, #1
 800ee06:	f240 7183 	movw	r1, #1923	@ 0x783
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f002 fbac 	bl	8011568 <VL53LX_WrByte>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800ee14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d108      	bne.n	800ee2e <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800ee1c:	2304      	movs	r3, #4
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f002 fb69 	bl	80114fc <VL53LX_ReadMulti>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3304      	adds	r3, #4
 800ee32:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800ee34:	7dbb      	ldrb	r3, [r7, #22]
 800ee36:	3301      	adds	r3, #1
 800ee38:	75bb      	strb	r3, [r7, #22]
 800ee3a:	7dba      	ldrb	r2, [r7, #22]
 800ee3c:	7af9      	ldrb	r1, [r7, #11]
 800ee3e:	7abb      	ldrb	r3, [r7, #10]
 800ee40:	440b      	add	r3, r1
 800ee42:	429a      	cmp	r2, r3
 800ee44:	dbb7      	blt.n	800edb6 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ee46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b084      	sub	sp, #16
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ee5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d107      	bne.n	800ee76 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ee66:	2201      	movs	r2, #1
 800ee68:	f240 7183 	movw	r1, #1923	@ 0x783
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f002 fb7b 	bl	8011568 <VL53LX_WrByte>
 800ee72:	4603      	mov	r3, r0
 800ee74:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ee76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f240 7181 	movw	r1, #1921	@ 0x781
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f002 fb6f 	bl	8011568 <VL53LX_WrByte>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ee8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d104      	bne.n	800eea0 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7f9 fae1 	bl	800845e <VL53LX_disable_powerforce>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800eea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d104      	bne.n	800eeb2 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7f9 fa83 	bl	80083b4 <VL53LX_enable_firmware>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800eeb2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b087      	sub	sp, #28
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	4603      	mov	r3, r0
 800eec6:	60b9      	str	r1, [r7, #8]
 800eec8:	607a      	str	r2, [r7, #4]
 800eeca:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eecc:	2300      	movs	r3, #0
 800eece:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800eed4:	89fb      	ldrh	r3, [r7, #14]
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d802      	bhi.n	800eee0 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eeda:	f06f 0308 	mvn.w	r3, #8
 800eede:	e017      	b.n	800ef10 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800eee0:	23f0      	movs	r3, #240	@ 0xf0
 800eee2:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	3302      	adds	r3, #2
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	8afb      	ldrh	r3, [r7, #22]
 800eeee:	1a9b      	subs	r3, r3, r2
 800eef0:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800eef2:	8afb      	ldrh	r3, [r7, #22]
 800eef4:	2bff      	cmp	r3, #255	@ 0xff
 800eef6:	d901      	bls.n	800eefc <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800eefc:	8afb      	ldrh	r3, [r7, #22]
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	78da      	ldrb	r2, [r3, #3]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	705a      	strb	r2, [r3, #1]

	return status;
 800ef0c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800ef1c:	b590      	push	{r4, r7, lr}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ef36:	89fb      	ldrh	r3, [r7, #14]
 800ef38:	2b37      	cmp	r3, #55	@ 0x37
 800ef3a:	d802      	bhi.n	800ef42 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef3c:	f06f 0308 	mvn.w	r3, #8
 800ef40:	e03e      	b.n	800efc0 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ef42:	68b9      	ldr	r1, [r7, #8]
 800ef44:	2002      	movs	r0, #2
 800ef46:	f7f9 f91b 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	3302      	adds	r3, #2
 800ef56:	4619      	mov	r1, r3
 800ef58:	2002      	movs	r0, #2
 800ef5a:	f7f9 f911 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ef6a:	099b      	lsrs	r3, r3, #6
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2219      	movs	r2, #25
 800ef76:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2205      	movs	r2, #5
 800ef7c:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2205      	movs	r2, #5
 800ef82:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	3304      	adds	r3, #4
 800ef88:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	74fb      	strb	r3, [r7, #19]
 800ef8e:	e012      	b.n	800efb6 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ef90:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ef92:	6979      	ldr	r1, [r7, #20]
 800ef94:	2002      	movs	r0, #2
 800ef96:	f7f9 f8f3 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	1d23      	adds	r3, r4, #4
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	4413      	add	r3, r2
 800efa6:	460a      	mov	r2, r1
 800efa8:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	3302      	adds	r3, #2
 800efae:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800efb0:	7cfb      	ldrb	r3, [r7, #19]
 800efb2:	3301      	adds	r3, #1
 800efb4:	74fb      	strb	r3, [r7, #19]
 800efb6:	7cfb      	ldrb	r3, [r7, #19]
 800efb8:	2b18      	cmp	r3, #24
 800efba:	d9e9      	bls.n	800ef90 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800efbc:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	371c      	adds	r7, #28
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd90      	pop	{r4, r7, pc}

0800efc8 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800efd6:	2300      	movs	r3, #0
 800efd8:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800efda:	89fb      	ldrh	r3, [r7, #14]
 800efdc:	2b07      	cmp	r3, #7
 800efde:	d802      	bhi.n	800efe6 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800efe0:	f06f 0308 	mvn.w	r3, #8
 800efe4:	e027      	b.n	800f036 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800efe6:	68b9      	ldr	r1, [r7, #8]
 800efe8:	2002      	movs	r0, #2
 800efea:	f7f9 f8c9 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800efee:	4603      	mov	r3, r0
 800eff0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	3302      	adds	r3, #2
 800effa:	4619      	mov	r1, r3
 800effc:	2002      	movs	r0, #2
 800effe:	f7f9 f8bf 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f002:	4603      	mov	r3, r0
 800f004:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	3304      	adds	r3, #4
 800f00e:	4619      	mov	r1, r3
 800f010:	2002      	movs	r0, #2
 800f012:	f7f9 f8b5 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f016:	4603      	mov	r3, r0
 800f018:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	3306      	adds	r3, #6
 800f022:	4619      	mov	r1, r3
 800f024:	2002      	movs	r0, #2
 800f026:	f7f9 f8ab 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f02a:	4603      	mov	r3, r0
 800f02c:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	80da      	strh	r2, [r3, #6]

	return status;
 800f032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3718      	adds	r7, #24
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b086      	sub	sp, #24
 800f042:	af00      	add	r7, sp, #0
 800f044:	4603      	mov	r3, r0
 800f046:	60b9      	str	r1, [r7, #8]
 800f048:	607a      	str	r2, [r7, #4]
 800f04a:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f04c:	2300      	movs	r3, #0
 800f04e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	2b0f      	cmp	r3, #15
 800f054:	d802      	bhi.n	800f05c <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f056:	f06f 0308 	mvn.w	r3, #8
 800f05a:	e04d      	b.n	800f0f8 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f05c:	68b9      	ldr	r1, [r7, #8]
 800f05e:	2002      	movs	r0, #2
 800f060:	f7f9 f88e 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f064:	4603      	mov	r3, r0
 800f066:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	789a      	ldrb	r2, [r3, #2]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	78da      	ldrb	r2, [r3, #3]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	3304      	adds	r3, #4
 800f080:	4619      	mov	r1, r3
 800f082:	2002      	movs	r0, #2
 800f084:	f7f9 f87c 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	3306      	adds	r3, #6
 800f094:	4619      	mov	r1, r3
 800f096:	2002      	movs	r0, #2
 800f098:	f7f9 f872 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f09c:	4603      	mov	r3, r0
 800f09e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	2002      	movs	r0, #2
 800f0ac:	f7f9 f868 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	330a      	adds	r3, #10
 800f0bc:	4619      	mov	r1, r3
 800f0be:	2002      	movs	r0, #2
 800f0c0:	f7f9 f85e 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	330c      	adds	r3, #12
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	2002      	movs	r0, #2
 800f0d4:	f7f9 f854 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	330e      	adds	r3, #14
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	2002      	movs	r0, #2
 800f0e8:	f7f9 f84a 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	81da      	strh	r2, [r3, #14]

	return status;
 800f0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3718      	adds	r7, #24
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	607b      	str	r3, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	72fb      	strb	r3, [r7, #11]
 800f10e:	4613      	mov	r3, r2
 800f110:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f112:	2300      	movs	r3, #0
 800f114:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d106      	bne.n	800f12c <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f11e:	2232      	movs	r2, #50	@ 0x32
 800f120:	2104      	movs	r1, #4
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f7ff fdd1 	bl	800ecca <VL53LX_nvm_enable>
 800f128:	4603      	mov	r3, r0
 800f12a:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f12c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d107      	bne.n	800f144 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f134:	7aba      	ldrb	r2, [r7, #10]
 800f136:	7af9      	ldrb	r1, [r7, #11]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff fe2b 	bl	800ed96 <VL53LX_nvm_read>
 800f140:	4603      	mov	r3, r0
 800f142:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d104      	bne.n	800f156 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fe80 	bl	800ee52 <VL53LX_nvm_disable>
 800f152:	4603      	mov	r3, r0
 800f154:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f156:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f16c:	2300      	movs	r3, #0
 800f16e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	2201      	movs	r2, #1
 800f176:	212e      	movs	r1, #46	@ 0x2e
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ffc1 	bl	800f100 <VL53LX_read_nvm_raw_data>
 800f17e:	4603      	mov	r3, r0
 800f180:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d108      	bne.n	800f19c <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f18a:	f107 0308 	add.w	r3, r7, #8
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	4619      	mov	r1, r3
 800f192:	2004      	movs	r0, #4
 800f194:	f7ff fe93 	bl	800eebe <VL53LX_nvm_decode_optical_centre>
 800f198:	4603      	mov	r3, r0
 800f19a:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b092      	sub	sp, #72	@ 0x48
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f1b8:	f107 030c 	add.w	r3, r7, #12
 800f1bc:	220e      	movs	r2, #14
 800f1be:	2157      	movs	r1, #87	@ 0x57
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7ff ff9d 	bl	800f100 <VL53LX_read_nvm_raw_data>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f1cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d109      	bne.n	800f1e8 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f1d4:	f107 030c 	add.w	r3, r7, #12
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	2038      	movs	r0, #56	@ 0x38
 800f1de:	f7ff fe9d 	bl	800ef1c <VL53LX_nvm_decode_cal_peak_rate_map>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f1e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3748      	adds	r7, #72	@ 0x48
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1fe:	2300      	movs	r3, #0
 800f200:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f202:	f107 030c 	add.w	r3, r7, #12
 800f206:	2202      	movs	r2, #2
 800f208:	2165      	movs	r1, #101	@ 0x65
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff ff78 	bl	800f100 <VL53LX_read_nvm_raw_data>
 800f210:	4603      	mov	r3, r0
 800f212:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d108      	bne.n	800f22e <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f21c:	f107 030c 	add.w	r3, r7, #12
 800f220:	683a      	ldr	r2, [r7, #0]
 800f222:	4619      	mov	r1, r3
 800f224:	2008      	movs	r0, #8
 800f226:	f7ff fecf 	bl	800efc8 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f22a:	4603      	mov	r3, r0
 800f22c:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f22e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f232:	4618      	mov	r0, r3
 800f234:	3718      	adds	r7, #24
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b08a      	sub	sp, #40	@ 0x28
 800f23e:	af00      	add	r7, sp, #0
 800f240:	60f8      	str	r0, [r7, #12]
 800f242:	460b      	mov	r3, r1
 800f244:	607a      	str	r2, [r7, #4]
 800f246:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f248:	2300      	movs	r3, #0
 800f24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f24e:	897b      	ldrh	r3, [r7, #10]
 800f250:	089b      	lsrs	r3, r3, #2
 800f252:	b29b      	uxth	r3, r3
 800f254:	b2d9      	uxtb	r1, r3
 800f256:	f107 0314 	add.w	r3, r7, #20
 800f25a:	2204      	movs	r2, #4
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f7ff ff4f 	bl	800f100 <VL53LX_read_nvm_raw_data>
 800f262:	4603      	mov	r3, r0
 800f264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f268:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d109      	bne.n	800f284 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f270:	f107 0314 	add.w	r3, r7, #20
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	4619      	mov	r1, r3
 800f278:	2010      	movs	r0, #16
 800f27a:	f7ff fee0 	bl	800f03e <VL53LX_nvm_decode_fmt_range_results_data>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f284:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800f288:	4618      	mov	r0, r3
 800f28a:	3728      	adds	r7, #40	@ 0x28
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	460b      	mov	r3, r1
 800f29a:	607a      	str	r2, [r7, #4]
 800f29c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f2a2:	897b      	ldrh	r3, [r7, #10]
 800f2a4:	2b0a      	cmp	r3, #10
 800f2a6:	d802      	bhi.n	800f2ae <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2a8:	f06f 0309 	mvn.w	r3, #9
 800f2ac:	e047      	b.n	800f33e <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2b6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f2c4:	f002 020f 	and.w	r2, r2, #15
 800f2c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f2ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f2d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f2d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f2da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f2e4:	f002 0203 	and.w	r2, r2, #3
 800f2e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f2ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f2f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f2f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f2fa:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	88d8      	ldrh	r0, [r3, #6]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	3305      	adds	r3, #5
 800f304:	461a      	mov	r2, r3
 800f306:	2102      	movs	r1, #2
 800f308:	f7f8 ff0f 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f314:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f31e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f328:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f32c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f32e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f338:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3718      	adds	r7, #24
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b086      	sub	sp, #24
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	4603      	mov	r3, r0
 800f34e:	60b9      	str	r1, [r7, #8]
 800f350:	607a      	str	r2, [r7, #4]
 800f352:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f354:	2300      	movs	r3, #0
 800f356:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f358:	89fb      	ldrh	r3, [r7, #14]
 800f35a:	2b0a      	cmp	r3, #10
 800f35c:	d802      	bhi.n	800f364 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f35e:	f06f 0309 	mvn.w	r3, #9
 800f362:	e046      	b.n	800f3f2 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f36c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	3301      	adds	r3, #1
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	f003 030f 	and.w	r3, r3, #15
 800f37c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	3302      	adds	r3, #2
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f38c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	3303      	adds	r3, #3
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	f003 0303 	and.w	r3, r3, #3
 800f39c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	3305      	adds	r3, #5
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	2002      	movs	r0, #2
 800f3ba:	f7f8 fee1 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	79da      	ldrb	r2, [r3, #7]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	7a1a      	ldrb	r2, [r3, #8]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	3309      	adds	r3, #9
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3e0:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	7a9a      	ldrb	r2, [r3, #10]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b086      	sub	sp, #24
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f404:	2300      	movs	r3, #0
 800f406:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d108      	bne.n	800f422 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f410:	f107 020c 	add.w	r2, r7, #12
 800f414:	230b      	movs	r3, #11
 800f416:	2101      	movs	r1, #1
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f002 f86f 	bl	80114fc <VL53LX_ReadMulti>
 800f41e:	4603      	mov	r3, r0
 800f420:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d108      	bne.n	800f43c <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f42a:	f107 030c 	add.w	r3, r7, #12
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	4619      	mov	r1, r3
 800f432:	200b      	movs	r0, #11
 800f434:	f7ff ff87 	bl	800f346 <VL53LX_i2c_decode_static_nvm_managed>
 800f438:	4603      	mov	r3, r0
 800f43a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f43c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	460b      	mov	r3, r1
 800f452:	607a      	str	r2, [r7, #4]
 800f454:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f456:	2300      	movs	r3, #0
 800f458:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f45a:	897b      	ldrh	r3, [r7, #10]
 800f45c:	2b16      	cmp	r3, #22
 800f45e:	d802      	bhi.n	800f466 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f460:	f06f 0309 	mvn.w	r3, #9
 800f464:	e076      	b.n	800f554 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f476:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f480:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f48a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f494:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f49e:	f002 020f 	and.w	r2, r2, #15
 800f4a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f4a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f4ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f4b8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f4bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f4be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f4c8:	f002 0203 	and.w	r2, r2, #3
 800f4cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f4ce:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	8958      	ldrh	r0, [r3, #10]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	3309      	adds	r3, #9
 800f4d8:	461a      	mov	r2, r3
 800f4da:	2102      	movs	r1, #2
 800f4dc:	f7f8 fe25 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	330b      	adds	r3, #11
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	2102      	movs	r1, #2
 800f4ee:	f7f8 fe67 	bl	80081c0 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	330d      	adds	r3, #13
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	2102      	movs	r1, #2
 800f500:	f7f8 fe5e 	bl	80081c0 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	8a18      	ldrh	r0, [r3, #16]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	330f      	adds	r3, #15
 800f50c:	461a      	mov	r2, r3
 800f50e:	2102      	movs	r1, #2
 800f510:	f7f8 fe0b 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f51a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f51e:	b218      	sxth	r0, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3311      	adds	r3, #17
 800f524:	461a      	mov	r2, r3
 800f526:	2102      	movs	r1, #2
 800f528:	f7f8 fe4a 	bl	80081c0 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3313      	adds	r3, #19
 800f536:	461a      	mov	r2, r3
 800f538:	2102      	movs	r1, #2
 800f53a:	f7f8 fe41 	bl	80081c0 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3315      	adds	r3, #21
 800f548:	461a      	mov	r2, r3
 800f54a:	2102      	movs	r1, #2
 800f54c:	f7f8 fe38 	bl	80081c0 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
 800f568:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f56a:	2300      	movs	r3, #0
 800f56c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f56e:	89fb      	ldrh	r3, [r7, #14]
 800f570:	2b16      	cmp	r3, #22
 800f572:	d802      	bhi.n	800f57a <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f574:	f06f 0309 	mvn.w	r3, #9
 800f578:	e079      	b.n	800f66e <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	785a      	ldrb	r2, [r3, #1]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	789a      	ldrb	r2, [r3, #2]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	78da      	ldrb	r2, [r3, #3]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	791a      	ldrb	r2, [r3, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	3305      	adds	r3, #5
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 030f 	and.w	r3, r3, #15
 800f5ac:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	799a      	ldrb	r2, [r3, #6]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	3307      	adds	r3, #7
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5c4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	f003 0303 	and.w	r3, r3, #3
 800f5d4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	3309      	adds	r3, #9
 800f5de:	4619      	mov	r1, r3
 800f5e0:	2002      	movs	r0, #2
 800f5e2:	f7f8 fdcd 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	330b      	adds	r3, #11
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	2002      	movs	r0, #2
 800f5f6:	f7f8 fe0f 	bl	8008218 <VL53LX_i2c_decode_int16_t>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	330d      	adds	r3, #13
 800f606:	4619      	mov	r1, r3
 800f608:	2002      	movs	r0, #2
 800f60a:	f7f8 fe05 	bl	8008218 <VL53LX_i2c_decode_int16_t>
 800f60e:	4603      	mov	r3, r0
 800f610:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	330f      	adds	r3, #15
 800f61a:	4619      	mov	r1, r3
 800f61c:	2002      	movs	r0, #2
 800f61e:	f7f8 fdaf 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800f622:	4603      	mov	r3, r0
 800f624:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	3311      	adds	r3, #17
 800f62e:	4619      	mov	r1, r3
 800f630:	2002      	movs	r0, #2
 800f632:	f7f8 fdf1 	bl	8008218 <VL53LX_i2c_decode_int16_t>
 800f636:	4603      	mov	r3, r0
 800f638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f63c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	3313      	adds	r3, #19
 800f646:	4619      	mov	r1, r3
 800f648:	2002      	movs	r0, #2
 800f64a:	f7f8 fde5 	bl	8008218 <VL53LX_i2c_decode_int16_t>
 800f64e:	4603      	mov	r3, r0
 800f650:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	3315      	adds	r3, #21
 800f65a:	4619      	mov	r1, r3
 800f65c:	2002      	movs	r0, #2
 800f65e:	f7f8 fddb 	bl	8008218 <VL53LX_i2c_decode_int16_t>
 800f662:	4603      	mov	r3, r0
 800f664:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <VL53LX_set_customer_nvm_managed>:


VL53LX_Error VL53LX_set_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b088      	sub	sp, #32
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f680:	2300      	movs	r3, #0
 800f682:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f684:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d108      	bne.n	800f69e <VL53LX_set_customer_nvm_managed+0x28>
		status = VL53LX_i2c_encode_customer_nvm_managed(
 800f68c:	f107 0308 	add.w	r3, r7, #8
 800f690:	461a      	mov	r2, r3
 800f692:	2117      	movs	r1, #23
 800f694:	6838      	ldr	r0, [r7, #0]
 800f696:	f7ff fed7 	bl	800f448 <VL53LX_i2c_encode_customer_nvm_managed>
 800f69a:	4603      	mov	r3, r0
 800f69c:	77fb      	strb	r3, [r7, #31]
			pdata,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f69e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d108      	bne.n	800f6b8 <VL53LX_set_customer_nvm_managed+0x42>
		status = VL53LX_WriteMulti(
 800f6a6:	f107 0208 	add.w	r2, r7, #8
 800f6aa:	2317      	movs	r3, #23
 800f6ac:	210d      	movs	r1, #13
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f001 feee 	bl	8011490 <VL53LX_WriteMulti>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f6b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3720      	adds	r7, #32
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08a      	sub	sp, #40	@ 0x28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d109      	bne.n	800f6f0 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f6dc:	f107 020c 	add.w	r2, r7, #12
 800f6e0:	2317      	movs	r3, #23
 800f6e2:	210d      	movs	r1, #13
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f001 ff09 	bl	80114fc <VL53LX_ReadMulti>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f6f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d109      	bne.n	800f70c <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f6f8:	f107 030c 	add.w	r3, r7, #12
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	4619      	mov	r1, r3
 800f700:	2017      	movs	r0, #23
 800f702:	f7ff ff2b 	bl	800f55c <VL53LX_i2c_decode_customer_nvm_managed>
 800f706:	4603      	mov	r3, r0
 800f708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f70c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f710:	2b00      	cmp	r3, #0
 800f712:	d11c      	bne.n	800f74e <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	8a5b      	ldrh	r3, [r3, #18]
 800f718:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800f71a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f71e:	2b00      	cmp	r3, #0
 800f720:	da00      	bge.n	800f724 <VL53LX_get_customer_nvm_managed+0x60>
 800f722:	3303      	adds	r3, #3
 800f724:	109b      	asrs	r3, r3, #2
 800f726:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800f728:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f72c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f730:	db04      	blt.n	800f73c <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f734:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800f738:	b29b      	uxth	r3, r3
 800f73a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	2200      	movs	r2, #0
 800f740:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f746:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f74c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f74e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f752:	4618      	mov	r0, r3
 800f754:	3728      	adds	r7, #40	@ 0x28
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b086      	sub	sp, #24
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	460b      	mov	r3, r1
 800f764:	607a      	str	r2, [r7, #4]
 800f766:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f768:	2300      	movs	r3, #0
 800f76a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f76c:	897b      	ldrh	r3, [r7, #10]
 800f76e:	2b1f      	cmp	r3, #31
 800f770:	d802      	bhi.n	800f778 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f772:	f06f 0309 	mvn.w	r3, #9
 800f776:	e0cf      	b.n	800f918 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	881b      	ldrh	r3, [r3, #0]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	2102      	movs	r1, #2
 800f780:	4618      	mov	r0, r3
 800f782:	f7f8 fcd2 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f78e:	f002 0201 	and.w	r2, r2, #1
 800f792:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f794:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f79e:	f002 020f 	and.w	r2, r2, #15
 800f7a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f7a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f7ae:	f002 020f 	and.w	r2, r2, #15
 800f7b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f7b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f7be:	f002 021f 	and.w	r2, r2, #31
 800f7c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f7c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f7ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f7d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f7d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f7de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f7e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f7e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f7ee:	f002 0201 	and.w	r2, r2, #1
 800f7f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f7f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f7fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f808:	f002 0201 	and.w	r2, r2, #1
 800f80c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f80e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f818:	f002 0203 	and.w	r2, r2, #3
 800f81c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f81e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f828:	f002 021f 	and.w	r2, r2, #31
 800f82c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f82e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f838:	f002 0203 	and.w	r2, r2, #3
 800f83c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f83e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f848:	f002 0203 	and.w	r2, r2, #3
 800f84c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f84e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f858:	f002 0207 	and.w	r2, r2, #7
 800f85c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f85e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f868:	f002 021f 	and.w	r2, r2, #31
 800f86c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f86e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f878:	f002 0201 	and.w	r2, r2, #1
 800f87c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f87e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f892:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f89c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f8a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f8b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f8ba:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	8b18      	ldrh	r0, [r3, #24]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	3318      	adds	r3, #24
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	2102      	movs	r1, #2
 800f8c8:	f7f8 fc2f 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f8d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f8de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f8e8:	f002 020f 	and.w	r2, r2, #15
 800f8ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f8ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f8f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f902:	f002 020f 	and.w	r2, r2, #15
 800f906:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f912:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	460b      	mov	r3, r1
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f92e:	2300      	movs	r3, #0
 800f930:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f932:	897b      	ldrh	r3, [r7, #10]
 800f934:	2b15      	cmp	r3, #21
 800f936:	d802      	bhi.n	800f93e <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f938:	f06f 0309 	mvn.w	r3, #9
 800f93c:	e070      	b.n	800fa20 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f94e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f958:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f962:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f966:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f968:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f96e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f972:	b298      	uxth	r0, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	3304      	adds	r3, #4
 800f978:	461a      	mov	r2, r3
 800f97a:	2102      	movs	r1, #2
 800f97c:	f7f8 fbd5 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f98c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f98e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f998:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f9a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f9ac:	f002 0201 	and.w	r2, r2, #1
 800f9b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f9b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f9bc:	f002 0207 	and.w	r2, r2, #7
 800f9c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f9c2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	8998      	ldrh	r0, [r3, #12]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	330c      	adds	r3, #12
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	2102      	movs	r1, #2
 800f9d0:	f7f8 fbab 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	89d8      	ldrh	r0, [r3, #14]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	330e      	adds	r3, #14
 800f9dc:	461a      	mov	r2, r3
 800f9de:	2102      	movs	r1, #2
 800f9e0:	f7f8 fba3 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	8a18      	ldrh	r0, [r3, #16]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3310      	adds	r3, #16
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	2102      	movs	r1, #2
 800f9f0:	f7f8 fb9b 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f9fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fa06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fa10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fa1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	460b      	mov	r3, r1
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa36:	2300      	movs	r3, #0
 800fa38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800fa3a:	897b      	ldrh	r3, [r7, #10]
 800fa3c:	2b16      	cmp	r3, #22
 800fa3e:	d802      	bhi.n	800fa46 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa40:	f06f 0309 	mvn.w	r3, #9
 800fa44:	e06e      	b.n	800fb24 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	f003 030f 	and.w	r3, r3, #15
 800fa4e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fa5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fa66:	f002 020f 	and.w	r2, r2, #15
 800fa6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fa6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fa76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fa80:	f002 020f 	and.w	r2, r2, #15
 800fa84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fa86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fa90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fa9a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fa9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800faa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800faaa:	f002 020f 	and.w	r2, r2, #15
 800faae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800faba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fac4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fac8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800faca:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	8958      	ldrh	r0, [r3, #10]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	330a      	adds	r3, #10
 800fad4:	461a      	mov	r2, r3
 800fad6:	2102      	movs	r1, #2
 800fad8:	f7f8 fb27 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	8998      	ldrh	r0, [r3, #12]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	330c      	adds	r3, #12
 800fae4:	461a      	mov	r2, r3
 800fae6:	2102      	movs	r1, #2
 800fae8:	f7f8 fb1f 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800faf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800fafe:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6918      	ldr	r0, [r3, #16]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3312      	adds	r3, #18
 800fb08:	461a      	mov	r2, r3
 800fb0a:	2104      	movs	r1, #4
 800fb0c:	f7f8 fbad 	bl	800826a <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800fb18:	f002 0201 	and.w	r2, r2, #1
 800fb1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800fb1e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	460b      	mov	r3, r1
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fb3e:	897b      	ldrh	r3, [r7, #10]
 800fb40:	2b11      	cmp	r3, #17
 800fb42:	d802      	bhi.n	800fb4a <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb44:	f06f 0309 	mvn.w	r3, #9
 800fb48:	e071      	b.n	800fc2e <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 0303 	and.w	r3, r3, #3
 800fb52:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	8858      	ldrh	r0, [r3, #2]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	461a      	mov	r2, r3
 800fb62:	2102      	movs	r1, #2
 800fb64:	f7f8 fae1 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	8898      	ldrh	r0, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	3303      	adds	r3, #3
 800fb70:	461a      	mov	r2, r3
 800fb72:	2102      	movs	r1, #2
 800fb74:	f7f8 fad9 	bl	800812a <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fb80:	f002 0201 	and.w	r2, r2, #1
 800fb84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fb86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fb90:	f002 0207 	and.w	r2, r2, #7
 800fb94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fb96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fbaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fbb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fbba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fbc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fbca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fbd4:	f002 0203 	and.w	r2, r2, #3
 800fbd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fbda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fbe4:	f002 0203 	and.w	r2, r2, #3
 800fbe8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fbea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fbf4:	f002 020f 	and.w	r2, r2, #15
 800fbf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fbfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fc04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800fc0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800fc18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fc22:	f002 0203 	and.w	r2, r2, #3
 800fc26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fc28:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fc36:	b480      	push	{r7}
 800fc38:	b087      	sub	sp, #28
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	60f8      	str	r0, [r7, #12]
 800fc3e:	460b      	mov	r3, r1
 800fc40:	607a      	str	r2, [r7, #4]
 800fc42:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc44:	2300      	movs	r3, #0
 800fc46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fc48:	897b      	ldrh	r3, [r7, #10]
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	d802      	bhi.n	800fc54 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc4e:	f06f 0309 	mvn.w	r3, #9
 800fc52:	e025      	b.n	800fca0 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fc6a:	f002 0201 	and.w	r2, r2, #1
 800fc6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fc70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fc7a:	f002 0201 	and.w	r2, r2, #1
 800fc7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fc80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fc8a:	f002 0203 	and.w	r2, r2, #3
 800fc8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fc90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fc9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	371c      	adds	r7, #28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fcba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d108      	bne.n	800fcd4 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800fcc2:	f107 0308 	add.w	r3, r7, #8
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	2105      	movs	r1, #5
 800fcca:	6838      	ldr	r0, [r7, #0]
 800fccc:	f7ff ffb3 	bl	800fc36 <VL53LX_i2c_encode_system_control>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800fcd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d108      	bne.n	800fcee <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fcdc:	f107 0208 	add.w	r2, r7, #8
 800fce0:	2305      	movs	r3, #5
 800fce2:	2183      	movs	r1, #131	@ 0x83
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f001 fbd3 	bl	8011490 <VL53LX_WriteMulti>
 800fcea:	4603      	mov	r3, r0
 800fcec:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b086      	sub	sp, #24
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	4603      	mov	r3, r0
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	607a      	str	r2, [r7, #4]
 800fd06:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd10:	d802      	bhi.n	800fd18 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd12:	f06f 0309 	mvn.w	r3, #9
 800fd16:	e0e2      	b.n	800fede <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd20:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	785a      	ldrb	r2, [r3, #1]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	3302      	adds	r3, #2
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	f003 030f 	and.w	r3, r3, #15
 800fd38:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	78da      	ldrb	r2, [r3, #3]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	3304      	adds	r3, #4
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	2002      	movs	r0, #2
 800fd4e:	f7f8 fa17 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	3306      	adds	r3, #6
 800fd5e:	4619      	mov	r1, r3
 800fd60:	2002      	movs	r0, #2
 800fd62:	f7f8 fa0d 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fd66:	4603      	mov	r3, r0
 800fd68:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	3308      	adds	r3, #8
 800fd72:	4619      	mov	r1, r3
 800fd74:	2002      	movs	r0, #2
 800fd76:	f7f8 fa03 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	330a      	adds	r3, #10
 800fd86:	4619      	mov	r1, r3
 800fd88:	2002      	movs	r0, #2
 800fd8a:	f7f8 f9f9 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	330c      	adds	r3, #12
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	2002      	movs	r0, #2
 800fd9e:	f7f8 f9ef 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fda2:	4603      	mov	r3, r0
 800fda4:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	330e      	adds	r3, #14
 800fdae:	4619      	mov	r1, r3
 800fdb0:	2002      	movs	r0, #2
 800fdb2:	f7f8 f9e5 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	3310      	adds	r3, #16
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	2002      	movs	r0, #2
 800fdc6:	f7f8 f9db 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	3312      	adds	r3, #18
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	2002      	movs	r0, #2
 800fdda:	f7f8 f9d1 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	3314      	adds	r3, #20
 800fdea:	4619      	mov	r1, r3
 800fdec:	2002      	movs	r0, #2
 800fdee:	f7f8 f9c7 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	3316      	adds	r3, #22
 800fdfe:	4619      	mov	r1, r3
 800fe00:	2002      	movs	r0, #2
 800fe02:	f7f8 f9bd 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe06:	4603      	mov	r3, r0
 800fe08:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	3318      	adds	r3, #24
 800fe12:	4619      	mov	r1, r3
 800fe14:	2002      	movs	r0, #2
 800fe16:	f7f8 f9b3 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	331a      	adds	r3, #26
 800fe26:	4619      	mov	r1, r3
 800fe28:	2002      	movs	r0, #2
 800fe2a:	f7f8 f9a9 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	331c      	adds	r3, #28
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	2002      	movs	r0, #2
 800fe3e:	f7f8 f99f 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe42:	4603      	mov	r3, r0
 800fe44:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	331e      	adds	r3, #30
 800fe4e:	4619      	mov	r1, r3
 800fe50:	2002      	movs	r0, #2
 800fe52:	f7f8 f995 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe56:	4603      	mov	r3, r0
 800fe58:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	3320      	adds	r3, #32
 800fe62:	4619      	mov	r1, r3
 800fe64:	2002      	movs	r0, #2
 800fe66:	f7f8 f98b 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	3322      	adds	r3, #34	@ 0x22
 800fe76:	4619      	mov	r1, r3
 800fe78:	2002      	movs	r0, #2
 800fe7a:	f7f8 f981 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	3324      	adds	r3, #36	@ 0x24
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	2002      	movs	r0, #2
 800fe8e:	f7f8 f977 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fe92:	4603      	mov	r3, r0
 800fe94:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	3326      	adds	r3, #38	@ 0x26
 800fe9e:	4619      	mov	r1, r3
 800fea0:	2002      	movs	r0, #2
 800fea2:	f7f8 f96d 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800fea6:	4603      	mov	r3, r0
 800fea8:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	3328      	adds	r3, #40	@ 0x28
 800feb2:	4619      	mov	r1, r3
 800feb4:	2002      	movs	r0, #2
 800feb6:	f7f8 f963 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800feba:	4603      	mov	r3, r0
 800febc:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800feda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b086      	sub	sp, #24
 800feea:	af00      	add	r7, sp, #0
 800feec:	4603      	mov	r3, r0
 800feee:	60b9      	str	r1, [r7, #8]
 800fef0:	607a      	str	r2, [r7, #4]
 800fef2:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fef4:	2300      	movs	r3, #0
 800fef6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fef8:	89fb      	ldrh	r3, [r7, #14]
 800fefa:	2b20      	cmp	r3, #32
 800fefc:	d802      	bhi.n	800ff04 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fefe:	f06f 0309 	mvn.w	r3, #9
 800ff02:	e04d      	b.n	800ffa0 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800ff04:	68b9      	ldr	r1, [r7, #8]
 800ff06:	2004      	movs	r0, #4
 800ff08:	f7f8 f9d9 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff0c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	3304      	adds	r3, #4
 800ff16:	4619      	mov	r1, r3
 800ff18:	2004      	movs	r0, #4
 800ff1a:	f7f8 f9d0 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff1e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	3308      	adds	r3, #8
 800ff28:	4619      	mov	r1, r3
 800ff2a:	2004      	movs	r0, #4
 800ff2c:	f7f8 f9e4 	bl	80082f8 <VL53LX_i2c_decode_int32_t>
 800ff30:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	330c      	adds	r3, #12
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	2004      	movs	r0, #4
 800ff3e:	f7f8 f9be 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff42:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	3310      	adds	r3, #16
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	2004      	movs	r0, #4
 800ff50:	f7f8 f9b5 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff54:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	3314      	adds	r3, #20
 800ff5e:	4619      	mov	r1, r3
 800ff60:	2004      	movs	r0, #4
 800ff62:	f7f8 f9ac 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff66:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	3318      	adds	r3, #24
 800ff70:	4619      	mov	r1, r3
 800ff72:	2004      	movs	r0, #4
 800ff74:	f7f8 f9c0 	bl	80082f8 <VL53LX_i2c_decode_int32_t>
 800ff78:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	331c      	adds	r3, #28
 800ff82:	4619      	mov	r1, r3
 800ff84:	2004      	movs	r0, #4
 800ff86:	f7f8 f99a 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 800ff8a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ff9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
 800ffb4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800ffba:	89fb      	ldrh	r3, [r7, #14]
 800ffbc:	2b37      	cmp	r3, #55	@ 0x37
 800ffbe:	d802      	bhi.n	800ffc6 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffc0:	f06f 0309 	mvn.w	r3, #9
 800ffc4:	e15e      	b.n	8010284 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800ffc6:	68b9      	ldr	r1, [r7, #8]
 800ffc8:	2002      	movs	r0, #2
 800ffca:	f7f8 f8d9 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	3302      	adds	r3, #2
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffe0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	3303      	adds	r3, #3
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fff0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	3304      	adds	r3, #4
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 0303 	and.w	r3, r3, #3
 8010000:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	3305      	adds	r3, #5
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	f003 0301 	and.w	r3, r3, #1
 8010010:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	3306      	adds	r3, #6
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010020:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	3307      	adds	r3, #7
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010030:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	3308      	adds	r3, #8
 801003a:	4619      	mov	r1, r3
 801003c:	2002      	movs	r0, #2
 801003e:	f7f8 f89f 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 8010042:	4603      	mov	r3, r0
 8010044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010048:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	330a      	adds	r3, #10
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	f003 0303 	and.w	r3, r3, #3
 8010058:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	330b      	adds	r3, #11
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 0303 	and.w	r3, r3, #3
 8010068:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	330c      	adds	r3, #12
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	f003 030f 	and.w	r3, r3, #15
 8010078:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	330d      	adds	r3, #13
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	f003 0307 	and.w	r3, r3, #7
 8010088:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	330e      	adds	r3, #14
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	330f      	adds	r3, #15
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f003 0303 	and.w	r3, r3, #3
 80100a8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	7c1a      	ldrb	r2, [r3, #16]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	7c5a      	ldrb	r2, [r3, #17]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	3312      	adds	r3, #18
 80100c2:	4619      	mov	r1, r3
 80100c4:	2002      	movs	r0, #2
 80100c6:	f7f8 f85b 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 80100ca:	4603      	mov	r3, r0
 80100cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100d0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	3316      	adds	r3, #22
 80100da:	4619      	mov	r1, r3
 80100dc:	2002      	movs	r0, #2
 80100de:	f7f8 f84f 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 80100e2:	4603      	mov	r3, r0
 80100e4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	3318      	adds	r3, #24
 80100ee:	4619      	mov	r1, r3
 80100f0:	2002      	movs	r0, #2
 80100f2:	f7f8 f845 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 80100f6:	4603      	mov	r3, r0
 80100f8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	331a      	adds	r3, #26
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	331b      	adds	r3, #27
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f003 0307 	and.w	r3, r3, #7
 8010118:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	7f1a      	ldrb	r2, [r3, #28]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	7f5a      	ldrb	r2, [r3, #29]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	331e      	adds	r3, #30
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010138:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	331f      	adds	r3, #31
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010148:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	3320      	adds	r3, #32
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f003 0303 	and.w	r3, r3, #3
 8010158:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	3321      	adds	r3, #33	@ 0x21
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f003 030f 	and.w	r3, r3, #15
 8010168:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	3325      	adds	r3, #37	@ 0x25
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	3326      	adds	r3, #38	@ 0x26
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0303 	and.w	r3, r3, #3
 80101ae:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	3327      	adds	r3, #39	@ 0x27
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 031f 	and.w	r3, r3, #31
 80101c0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	3328      	adds	r3, #40	@ 0x28
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	f003 031f 	and.w	r3, r3, #31
 80101d2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	3329      	adds	r3, #41	@ 0x29
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	f003 031f 	and.w	r3, r3, #31
 80101e4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	332a      	adds	r3, #42	@ 0x2a
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	f003 0301 	and.w	r3, r3, #1
 80101f6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	332b      	adds	r3, #43	@ 0x2b
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	332c      	adds	r3, #44	@ 0x2c
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	f003 0303 	and.w	r3, r3, #3
 801021a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	332d      	adds	r3, #45	@ 0x2d
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801022c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	332e      	adds	r3, #46	@ 0x2e
 8010238:	4619      	mov	r1, r3
 801023a:	2004      	movs	r0, #4
 801023c:	f7f8 f83f 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 8010240:	4603      	mov	r3, r0
 8010242:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	3332      	adds	r3, #50	@ 0x32
 801024e:	4619      	mov	r1, r3
 8010250:	2004      	movs	r0, #4
 8010252:	f7f8 f834 	bl	80082be <VL53LX_i2c_decode_uint32_t>
 8010256:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	3336      	adds	r3, #54	@ 0x36
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	3337      	adds	r3, #55	@ 0x37
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8010280:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801029a:	2300      	movs	r3, #0
 801029c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801029e:	89fb      	ldrh	r3, [r7, #14]
 80102a0:	2b30      	cmp	r3, #48	@ 0x30
 80102a2:	d802      	bhi.n	80102aa <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80102a4:	f06f 0309 	mvn.w	r3, #9
 80102a8:	e112      	b.n	80104d0 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	785a      	ldrb	r2, [r3, #1]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	789a      	ldrb	r2, [r3, #2]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	3303      	adds	r3, #3
 80102c6:	4619      	mov	r1, r3
 80102c8:	2002      	movs	r0, #2
 80102ca:	f7f7 ff59 	bl	8008180 <VL53LX_i2c_decode_uint16_t>
 80102ce:	4603      	mov	r3, r0
 80102d0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	3305      	adds	r3, #5
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	3306      	adds	r3, #6
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f003 0307 	and.w	r3, r3, #7
 80102f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	3307      	adds	r3, #7
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	f003 0307 	and.w	r3, r3, #7
 8010300:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	3308      	adds	r3, #8
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010310:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	3309      	adds	r3, #9
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010320:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	330a      	adds	r3, #10
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f003 0301 	and.w	r3, r3, #1
 8010330:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	330b      	adds	r3, #11
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010340:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	330c      	adds	r3, #12
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	330d      	adds	r3, #13
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010360:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	330e      	adds	r3, #14
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010370:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	7bda      	ldrb	r2, [r3, #15]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	7c1a      	ldrb	r2, [r3, #16]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	7c5a      	ldrb	r2, [r3, #17]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	7c9a      	ldrb	r2, [r3, #18]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	7cda      	ldrb	r2, [r3, #19]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	7d1a      	ldrb	r2, [r3, #20]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	7d5a      	ldrb	r2, [r3, #21]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	7d9a      	ldrb	r2, [r3, #22]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	7dda      	ldrb	r2, [r3, #23]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	7e1a      	ldrb	r2, [r3, #24]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	7e5a      	ldrb	r2, [r3, #25]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	7e9a      	ldrb	r2, [r3, #26]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	7eda      	ldrb	r2, [r3, #27]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	7f1a      	ldrb	r2, [r3, #28]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	7f5a      	ldrb	r2, [r3, #29]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	7f9a      	ldrb	r2, [r3, #30]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	7fda      	ldrb	r2, [r3, #31]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80104cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b090      	sub	sp, #64	@ 0x40
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104e2:	2300      	movs	r3, #0
 80104e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80104e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10a      	bne.n	8010506 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80104f0:	f107 020c 	add.w	r2, r7, #12
 80104f4:	2331      	movs	r3, #49	@ 0x31
 80104f6:	f240 110f 	movw	r1, #271	@ 0x10f
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fffe 	bl	80114fc <VL53LX_ReadMulti>
 8010500:	4603      	mov	r3, r0
 8010502:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010506:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801050a:	2b00      	cmp	r3, #0
 801050c:	d109      	bne.n	8010522 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 801050e:	f107 030c 	add.w	r3, r7, #12
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	4619      	mov	r1, r3
 8010516:	2031      	movs	r0, #49	@ 0x31
 8010518:	f7ff feb8 	bl	801028c <VL53LX_i2c_decode_nvm_copy_data>
 801051c:	4603      	mov	r3, r0
 801051e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010522:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8010526:	4618      	mov	r0, r3
 8010528:	3740      	adds	r7, #64	@ 0x40
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801052e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010532:	b0d6      	sub	sp, #344	@ 0x158
 8010534:	af00      	add	r7, sp, #0
 8010536:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 801053a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801053e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8010542:	4603      	mov	r3, r0
 8010544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010548:	23f1      	movs	r3, #241	@ 0xf1
 801054a:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 801054e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010552:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 801055c:	f04f 0200 	mov.w	r2, #0
 8010560:	f04f 0300 	mov.w	r3, #0
 8010564:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 8010568:	f04f 0200 	mov.w	r2, #0
 801056c:	f04f 0300 	mov.w	r3, #0
 8010570:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 8010574:	f04f 0200 	mov.w	r2, #0
 8010578:	f04f 0300 	mov.w	r3, #0
 801057c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 8010580:	f04f 0200 	mov.w	r2, #0
 8010584:	f04f 0300 	mov.w	r3, #0
 8010588:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 801058c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8010590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010594:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010596:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 801059a:	2b00      	cmp	r3, #0
 801059c:	f000 8322 	beq.w	8010be4 <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 80105a0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fb f9da 	bl	800b95e <VL53LX_calc_pll_period_mm>
 80105aa:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 80105ae:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80105b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d91a      	bls.n	80105f0 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105be:	2200      	movs	r2, #0
 80105c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80105c4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80105c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105cc:	2200      	movs	r2, #0
 80105ce:	4698      	mov	r8, r3
 80105d0:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80105d6:	460b      	mov	r3, r1
 80105d8:	ebb3 0308 	subs.w	r3, r3, r8
 80105dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105de:	4613      	mov	r3, r2
 80105e0:	eb63 0309 	sbc.w	r3, r3, r9
 80105e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80105ea:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 80105ee:	e013      	b.n	8010618 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80105f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105f4:	2200      	movs	r2, #0
 80105f6:	469a      	mov	sl, r3
 80105f8:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 80105fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105fe:	2200      	movs	r2, #0
 8010600:	461c      	mov	r4, r3
 8010602:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010604:	ebba 0304 	subs.w	r3, sl, r4
 8010608:	633b      	str	r3, [r7, #48]	@ 0x30
 801060a:	eb6b 0305 	sbc.w	r3, fp, r5
 801060e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010610:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8010614:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8010618:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801061c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010620:	429a      	cmp	r2, r3
 8010622:	d91f      	bls.n	8010664 <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010624:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010628:	2200      	movs	r2, #0
 801062a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801062e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 8010632:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010636:	2200      	movs	r2, #0
 8010638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801063c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010640:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8010644:	4623      	mov	r3, r4
 8010646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801064a:	4602      	mov	r2, r0
 801064c:	1a9b      	subs	r3, r3, r2
 801064e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010650:	462b      	mov	r3, r5
 8010652:	460a      	mov	r2, r1
 8010654:	eb63 0302 	sbc.w	r3, r3, r2
 8010658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801065a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801065e:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8010662:	e01e      	b.n	80106a2 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010664:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010668:	2200      	movs	r2, #0
 801066a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801066e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 8010672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010676:	2200      	movs	r2, #0
 8010678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801067c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010680:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8010684:	4623      	mov	r3, r4
 8010686:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 801068a:	4602      	mov	r2, r0
 801068c:	1a9b      	subs	r3, r3, r2
 801068e:	623b      	str	r3, [r7, #32]
 8010690:	462b      	mov	r3, r5
 8010692:	460a      	mov	r2, r1
 8010694:	eb63 0302 	sbc.w	r3, r3, r2
 8010698:	627b      	str	r3, [r7, #36]	@ 0x24
 801069a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801069e:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 80106a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80106a6:	4313      	orrs	r3, r2
 80106a8:	f000 829c 	beq.w	8010be4 <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106b0:	2200      	movs	r2, #0
 80106b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80106b6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80106ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80106be:	2200      	movs	r2, #0
 80106c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80106c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80106c8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80106cc:	4623      	mov	r3, r4
 80106ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80106d2:	4602      	mov	r2, r0
 80106d4:	189b      	adds	r3, r3, r2
 80106d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80106da:	460b      	mov	r3, r1
 80106dc:	462a      	mov	r2, r5
 80106de:	eb42 0303 	adc.w	r3, r2, r3
 80106e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 80106e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80106ea:	2200      	movs	r2, #0
 80106ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80106f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106f4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80106f8:	4623      	mov	r3, r4
 80106fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80106fe:	4602      	mov	r2, r0
 8010700:	189b      	adds	r3, r3, r2
 8010702:	61bb      	str	r3, [r7, #24]
 8010704:	460b      	mov	r3, r1
 8010706:	462a      	mov	r2, r5
 8010708:	eb42 0303 	adc.w	r3, r2, r3
 801070c:	61fb      	str	r3, [r7, #28]
 801070e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010712:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 8010716:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 801071a:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 801071e:	f173 0300 	sbcs.w	r3, r3, #0
 8010722:	d305      	bcc.n	8010730 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 8010724:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8010728:	f04f 0300 	mov.w	r3, #0
 801072c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010730:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010734:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010738:	fb03 f102 	mul.w	r1, r3, r2
 801073c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010740:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010744:	fb02 f303 	mul.w	r3, r2, r3
 8010748:	18ca      	adds	r2, r1, r3
 801074a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801074e:	fba3 1303 	umull	r1, r3, r3, r3
 8010752:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010756:	460b      	mov	r3, r1
 8010758:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801075c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010760:	18d3      	adds	r3, r2, r3
 8010762:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010766:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 801076a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 801076e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 8010772:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010776:	f04f 0000 	mov.w	r0, #0
 801077a:	f04f 0100 	mov.w	r1, #0
 801077e:	0219      	lsls	r1, r3, #8
 8010780:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010784:	0210      	lsls	r0, r2, #8
 8010786:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 801078a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 801078e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010792:	d305      	bcc.n	80107a0 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8010794:	f04f 32ff 	mov.w	r2, #4294967295
 8010798:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801079c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80107a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107a8:	f7ef fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80107b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107b8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107bc:	f7ef fd80 	bl	80002c0 <__aeabi_uldivmod>
 80107c0:	4602      	mov	r2, r0
 80107c2:	460b      	mov	r3, r1
 80107c4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80107c8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80107cc:	2b80      	cmp	r3, #128	@ 0x80
 80107ce:	d305      	bcc.n	80107dc <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 80107d0:	f04f 32ff 	mov.w	r2, #4294967295
 80107d4:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 80107d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 80107dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80107e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107e4:	fb03 f102 	mul.w	r1, r3, r2
 80107e8:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80107ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80107f0:	fb02 f303 	mul.w	r3, r2, r3
 80107f4:	4419      	add	r1, r3
 80107f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80107fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010802:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010806:	4613      	mov	r3, r2
 8010808:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801080c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010810:	18cb      	adds	r3, r1, r3
 8010812:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010816:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 801081a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801081e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010822:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010826:	2200      	movs	r2, #0
 8010828:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801082c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010830:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8010834:	2200      	movs	r2, #0
 8010836:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801083a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801083e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010842:	4623      	mov	r3, r4
 8010844:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8010848:	4602      	mov	r2, r0
 801084a:	189b      	adds	r3, r3, r2
 801084c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010850:	460b      	mov	r3, r1
 8010852:	462a      	mov	r2, r5
 8010854:	eb42 0303 	adc.w	r3, r2, r3
 8010858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801085c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8010860:	2200      	movs	r2, #0
 8010862:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010864:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010866:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801086a:	4623      	mov	r3, r4
 801086c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010870:	4602      	mov	r2, r0
 8010872:	189b      	adds	r3, r3, r2
 8010874:	673b      	str	r3, [r7, #112]	@ 0x70
 8010876:	460b      	mov	r3, r1
 8010878:	462a      	mov	r2, r5
 801087a:	eb42 0303 	adc.w	r3, r2, r3
 801087e:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010880:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8010884:	2200      	movs	r2, #0
 8010886:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010888:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801088a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 801088e:	4623      	mov	r3, r4
 8010890:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010894:	4602      	mov	r2, r0
 8010896:	189b      	adds	r3, r3, r2
 8010898:	613b      	str	r3, [r7, #16]
 801089a:	460b      	mov	r3, r1
 801089c:	462a      	mov	r2, r5
 801089e:	eb42 0303 	adc.w	r3, r2, r3
 80108a2:	617b      	str	r3, [r7, #20]
 80108a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80108a8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 80108ac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108b0:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80108b4:	f173 0300 	sbcs.w	r3, r3, #0
 80108b8:	d305      	bcc.n	80108c6 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 80108ba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80108be:	f04f 0300 	mov.w	r3, #0
 80108c2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 80108c6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108ca:	f04f 0000 	mov.w	r0, #0
 80108ce:	f04f 0100 	mov.w	r1, #0
 80108d2:	0219      	lsls	r1, r3, #8
 80108d4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80108d8:	0210      	lsls	r0, r2, #8
 80108da:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 80108de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80108e2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108e6:	1884      	adds	r4, r0, r2
 80108e8:	60bc      	str	r4, [r7, #8]
 80108ea:	eb41 0303 	adc.w	r3, r1, r3
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80108f4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80108f8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	da05      	bge.n	801090c <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010900:	f04f 32ff 	mov.w	r2, #4294967295
 8010904:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010908:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801090c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010910:	2b01      	cmp	r3, #1
 8010912:	d331      	bcc.n	8010978 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010914:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010918:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801091c:	f7ef fcd0 	bl	80002c0 <__aeabi_uldivmod>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801092c:	2200      	movs	r2, #0
 801092e:	663b      	str	r3, [r7, #96]	@ 0x60
 8010930:	667a      	str	r2, [r7, #100]	@ 0x64
 8010932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010936:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 801093a:	4622      	mov	r2, r4
 801093c:	fb02 f203 	mul.w	r2, r2, r3
 8010940:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010944:	4629      	mov	r1, r5
 8010946:	fb01 f303 	mul.w	r3, r1, r3
 801094a:	441a      	add	r2, r3
 801094c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010950:	4621      	mov	r1, r4
 8010952:	fba3 1301 	umull	r1, r3, r3, r1
 8010956:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801095a:	460b      	mov	r3, r1
 801095c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010964:	18d3      	adds	r3, r2, r3
 8010966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801096a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 801096e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010972:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010976:	e030      	b.n	80109da <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010978:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801097c:	2200      	movs	r2, #0
 801097e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010980:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010986:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 801098a:	4622      	mov	r2, r4
 801098c:	fb02 f203 	mul.w	r2, r2, r3
 8010990:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010994:	4629      	mov	r1, r5
 8010996:	fb01 f303 	mul.w	r3, r1, r3
 801099a:	441a      	add	r2, r3
 801099c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80109a0:	4621      	mov	r1, r4
 80109a2:	fba3 1301 	umull	r1, r3, r3, r1
 80109a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109aa:	460b      	mov	r3, r1
 80109ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80109b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80109b4:	18d3      	adds	r3, r2, r3
 80109b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109ba:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80109be:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80109c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109c6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109ca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109ce:	f7ef fc77 	bl	80002c0 <__aeabi_uldivmod>
 80109d2:	4602      	mov	r2, r0
 80109d4:	460b      	mov	r3, r1
 80109d6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80109da:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109de:	2b00      	cmp	r3, #0
 80109e0:	da05      	bge.n	80109ee <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 80109e2:	f04f 32ff 	mov.w	r2, #4294967295
 80109e6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80109ea:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80109ee:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d33d      	bcc.n	8010a72 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109f6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109fa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109fe:	f7ef fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010a0a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010a0e:	f04f 0200 	mov.w	r2, #0
 8010a12:	f04f 0300 	mov.w	r3, #0
 8010a16:	0882      	lsrs	r2, r0, #2
 8010a18:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010a1c:	088b      	lsrs	r3, r1, #2
 8010a1e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a26:	2200      	movs	r2, #0
 8010a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a2a:	657a      	str	r2, [r7, #84]	@ 0x54
 8010a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010a34:	4622      	mov	r2, r4
 8010a36:	fb02 f203 	mul.w	r2, r2, r3
 8010a3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a3e:	4629      	mov	r1, r5
 8010a40:	fb01 f303 	mul.w	r3, r1, r3
 8010a44:	4413      	add	r3, r2
 8010a46:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a4a:	4621      	mov	r1, r4
 8010a4c:	fba2 1201 	umull	r1, r2, r2, r1
 8010a50:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8010a54:	460a      	mov	r2, r1
 8010a56:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8010a5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010a5e:	4413      	add	r3, r2
 8010a60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010a64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8010a68:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a6c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a70:	e03c      	b.n	8010aec <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a76:	2200      	movs	r2, #0
 8010a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a7a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010a84:	4622      	mov	r2, r4
 8010a86:	fb02 f203 	mul.w	r2, r2, r3
 8010a8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a8e:	4629      	mov	r1, r5
 8010a90:	fb01 f303 	mul.w	r3, r1, r3
 8010a94:	4413      	add	r3, r2
 8010a96:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a9a:	4621      	mov	r1, r4
 8010a9c:	fba2 1201 	umull	r1, r2, r2, r1
 8010aa0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010aa4:	460a      	mov	r2, r1
 8010aa6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8010aaa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8010aae:	4413      	add	r3, r2
 8010ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010ab4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8010ab8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010abc:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010ac0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010ac4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ac8:	f7ef fbfa 	bl	80002c0 <__aeabi_uldivmod>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010ad4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ad8:	f04f 0200 	mov.w	r2, #0
 8010adc:	f04f 0300 	mov.w	r3, #0
 8010ae0:	0882      	lsrs	r2, r0, #2
 8010ae2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010ae6:	088b      	lsrs	r3, r1, #2
 8010ae8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010aec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	da05      	bge.n	8010b00 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010af4:	f04f 32ff 	mov.w	r2, #4294967295
 8010af8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010afc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8010b00:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b04:	f04f 0200 	mov.w	r2, #0
 8010b08:	f04f 0300 	mov.w	r3, #0
 8010b0c:	0882      	lsrs	r2, r0, #2
 8010b0e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010b12:	088b      	lsrs	r3, r1, #2
 8010b14:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010b18:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d305      	bcc.n	8010b2c <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010b20:	f04f 32ff 	mov.w	r2, #4294967295
 8010b24:	f04f 0300 	mov.w	r3, #0
 8010b28:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b30:	2200      	movs	r2, #0
 8010b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b34:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b36:	f04f 0200 	mov.w	r2, #0
 8010b3a:	f04f 0300 	mov.w	r3, #0
 8010b3e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010b42:	4629      	mov	r1, r5
 8010b44:	01cb      	lsls	r3, r1, #7
 8010b46:	4621      	mov	r1, r4
 8010b48:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	01ca      	lsls	r2, r1, #7
 8010b50:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 8010b54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b58:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8010b5c:	fb03 f202 	mul.w	r2, r3, r2
 8010b60:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b64:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010b68:	fb01 f303 	mul.w	r3, r1, r3
 8010b6c:	441a      	add	r2, r3
 8010b6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010b72:	fba3 1303 	umull	r1, r3, r3, r3
 8010b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b84:	18d3      	adds	r3, r2, r3
 8010b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b8a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8010b8e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010b92:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 8010b96:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b9a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010b9e:	1884      	adds	r4, r0, r2
 8010ba0:	603c      	str	r4, [r7, #0]
 8010ba2:	eb41 0303 	adc.w	r3, r1, r3
 8010ba6:	607b      	str	r3, [r7, #4]
 8010ba8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010bac:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010bb0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d305      	bcc.n	8010bc4 <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bbc:	f04f 0300 	mov.w	r3, #0
 8010bc0:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010bc4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fa fd61 	bl	800b690 <VL53LX_isqrt>
 8010bce:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8010bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8010bdc:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010bde:	2300      	movs	r3, #0
 8010be0:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 8010be4:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010bf4 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b086      	sub	sp, #24
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	3318      	adds	r3, #24
 8010c04:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d107      	bne.n	8010c22 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010c12:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 f88b 	bl	8010d32 <VL53LX_poll_for_range_completion>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	75fb      	strb	r3, [r7, #23]
 8010c20:	e01b      	b.n	8010c5a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c26:	e011      	b.n	8010c4c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010c28:	f107 030f 	add.w	r3, r7, #15
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 f819 	bl	8010c66 <VL53LX_is_new_data_ready>
 8010c34:	4603      	mov	r3, r0
 8010c36:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d105      	bne.n	8010c4c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010c40:	2101      	movs	r1, #1
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fd72 	bl	801172c <VL53LX_WaitMs>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d103      	bne.n	8010c5a <VL53LX_wait_for_test_completion+0x66>
 8010c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d0e6      	beq.n	8010c28 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3718      	adds	r7, #24
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b086      	sub	sp, #24
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
 8010c6e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	3318      	adds	r3, #24
 8010c78:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010c82:	2300      	movs	r3, #0
 8010c84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010c8c:	f003 0310 	and.w	r3, r3, #16
 8010c90:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010c92:	7bfb      	ldrb	r3, [r7, #15]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d102      	bne.n	8010c9e <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	75fb      	strb	r3, [r7, #23]
 8010c9c:	e001      	b.n	8010ca2 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010ca2:	f107 030e 	add.w	r3, r7, #14
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	2131      	movs	r1, #49	@ 0x31
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fcb8 	bl	8011620 <VL53LX_RdByte>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010cb4:	7bbb      	ldrb	r3, [r7, #14]
 8010cb6:	f003 0201 	and.w	r2, r3, #1
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d103      	bne.n	8010cc8 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	701a      	strb	r2, [r3, #0]
 8010cc6:	e002      	b.n	8010cce <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010cce:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b086      	sub	sp, #24
 8010cde:	af02      	add	r7, sp, #8
 8010ce0:	6078      	str	r0, [r7, #4]
 8010ce2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010ce8:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fd2d 	bl	801174c <VL53LX_WaitUs>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10b      	bne.n	8010d16 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010cfe:	2301      	movs	r3, #1
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	2301      	movs	r3, #1
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	2301      	movs	r3, #1
 8010d08:	22e5      	movs	r2, #229	@ 0xe5
 8010d0a:	6839      	ldr	r1, [r7, #0]
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 fd35 	bl	801177c <VL53LX_WaitValueMaskEx>
 8010d12:	4603      	mov	r3, r0
 8010d14:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d103      	bne.n	8010d26 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010d1e:	2103      	movs	r1, #3
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7f6 fc0f 	bl	8007544 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b088      	sub	sp, #32
 8010d36:	af02      	add	r7, sp, #8
 8010d38:	6078      	str	r0, [r7, #4]
 8010d3a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3318      	adds	r3, #24
 8010d44:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010d46:	2300      	movs	r3, #0
 8010d48:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010d54:	f003 0310 	and.w	r3, r3, #16
 8010d58:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010d5a:	7bfb      	ldrb	r3, [r7, #15]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d102      	bne.n	8010d66 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010d60:	2301      	movs	r3, #1
 8010d62:	75fb      	strb	r3, [r7, #23]
 8010d64:	e001      	b.n	8010d6a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	9201      	str	r2, [sp, #4]
 8010d70:	2201      	movs	r2, #1
 8010d72:	9200      	str	r2, [sp, #0]
 8010d74:	2231      	movs	r2, #49	@ 0x31
 8010d76:	6839      	ldr	r1, [r7, #0]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 fcff 	bl	801177c <VL53LX_WaitValueMaskEx>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010d82:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3718      	adds	r7, #24
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010d8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d92:	b0c0      	sub	sp, #256	@ 0x100
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8010da2:	4613      	mov	r3, r2
 8010da4:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8010da8:	4603      	mov	r3, r0
 8010daa:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010dae:	2300      	movs	r3, #0
 8010db0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 8010db4:	2300      	movs	r3, #0
 8010db6:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 8010dd8:	f04f 0200 	mov.w	r2, #0
 8010ddc:	f04f 0300 	mov.w	r3, #0
 8010de0:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 8010de4:	f04f 0200 	mov.w	r2, #0
 8010de8:	f04f 0300 	mov.w	r3, #0
 8010dec:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 8010df0:	f04f 0200 	mov.w	r2, #0
 8010df4:	f04f 0300 	mov.w	r3, #0
 8010df8:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8010dfc:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d108      	bne.n	8010e16 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8010e04:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8010e08:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8010e0c:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fb f81f 	bl	800be54 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010e16:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d162      	bne.n	8010ee4 <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010e1e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e22:	091b      	lsrs	r3, r3, #4
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00d      	beq.n	8010e4a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010e2e:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e32:	461a      	mov	r2, r3
 8010e34:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e38:	095b      	lsrs	r3, r3, #5
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	3b01      	subs	r3, #1
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8010e48:	e00a      	b.n	8010e60 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010e4a:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e4e:	461a      	mov	r2, r3
 8010e50:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e54:	095b      	lsrs	r3, r3, #5
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010e60:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010e64:	461a      	mov	r2, r3
 8010e66:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e6a:	095b      	lsrs	r3, r3, #5
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	4413      	add	r3, r2
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010e76:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e7a:	f003 0301 	and.w	r3, r3, #1
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d011      	beq.n	8010ea6 <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 8010e82:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010e86:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010e88:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010e8c:	f003 020f 	and.w	r2, r3, #15
 8010e90:	0fd3      	lsrs	r3, r2, #31
 8010e92:	4413      	add	r3, r2
 8010e94:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	1acb      	subs	r3, r1, r3
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8010ea4:	e00f      	b.n	8010ec6 <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 8010ea6:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010eaa:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010eac:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010eb0:	f003 020f 	and.w	r2, r3, #15
 8010eb4:	0fd3      	lsrs	r3, r2, #31
 8010eb6:	4413      	add	r3, r2
 8010eb8:	105b      	asrs	r3, r3, #1
 8010eba:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	440b      	add	r3, r1
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 8010ec6:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010eca:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010ecc:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010ed0:	f003 020f 	and.w	r2, r3, #15
 8010ed4:	0fd3      	lsrs	r3, r2, #31
 8010ed6:	4413      	add	r3, r2
 8010ed8:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	440b      	add	r3, r1
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010ee4:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d133      	bne.n	8010f54 <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010eec:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8010ef6:	4413      	add	r3, r2
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	3b0f      	subs	r3, #15
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010f06:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8010f10:	4413      	add	r3, r2
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	3b0f      	subs	r3, #15
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010f20:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8010f2a:	4413      	add	r3, r2
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	3b0f      	subs	r3, #15
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010f3a:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8010f44:	4413      	add	r3, r2
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	005b      	lsls	r3, r3, #1
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	3b0f      	subs	r3, #15
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010f54:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f040 8135 	bne.w	80111c8 <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f5e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8010f62:	17da      	asrs	r2, r3, #31
 8010f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010f6c:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8010f70:	17da      	asrs	r2, r3, #31
 8010f72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010f76:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f7a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010f84:	fb02 f203 	mul.w	r2, r2, r3
 8010f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010f8c:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 8010f90:	4601      	mov	r1, r0
 8010f92:	fb01 f303 	mul.w	r3, r1, r3
 8010f96:	4413      	add	r3, r2
 8010f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010f9c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8010fa0:	fba2 4501 	umull	r4, r5, r2, r1
 8010fa4:	442b      	add	r3, r5
 8010fa6:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fa8:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8010fac:	17da      	asrs	r2, r3, #31
 8010fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010fb2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 8010fb6:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8010fba:	17da      	asrs	r2, r3, #31
 8010fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fc4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010fce:	fb02 f203 	mul.w	r2, r2, r3
 8010fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fd6:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 8010fda:	4601      	mov	r1, r0
 8010fdc:	fb01 f303 	mul.w	r3, r1, r3
 8010fe0:	4413      	add	r3, r2
 8010fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010fe6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010fea:	fba2 8901 	umull	r8, r9, r2, r1
 8010fee:	444b      	add	r3, r9
 8010ff0:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010ff2:	eb14 0308 	adds.w	r3, r4, r8
 8010ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ff8:	eb45 0309 	adc.w	r3, r5, r9
 8010ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ffe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8011002:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8011006:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 801100a:	1c51      	adds	r1, r2, #1
 801100c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8011010:	f143 0300 	adc.w	r3, r3, #0
 8011014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801101c:	460b      	mov	r3, r1
 801101e:	0fdb      	lsrs	r3, r3, #31
 8011020:	2200      	movs	r2, #0
 8011022:	643b      	str	r3, [r7, #64]	@ 0x40
 8011024:	647a      	str	r2, [r7, #68]	@ 0x44
 8011026:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 801102a:	4623      	mov	r3, r4
 801102c:	4602      	mov	r2, r0
 801102e:	189b      	adds	r3, r3, r2
 8011030:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011032:	460b      	mov	r3, r1
 8011034:	462a      	mov	r2, r5
 8011036:	eb42 0303 	adc.w	r3, r2, r3
 801103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801103c:	f04f 0200 	mov.w	r2, #0
 8011040:	f04f 0300 	mov.w	r3, #0
 8011044:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011048:	4621      	mov	r1, r4
 801104a:	084a      	lsrs	r2, r1, #1
 801104c:	4629      	mov	r1, r5
 801104e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011052:	4629      	mov	r1, r5
 8011054:	104b      	asrs	r3, r1, #1
 8011056:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801105a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801105e:	2200      	movs	r2, #0
 8011060:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011064:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011068:	f04f 0000 	mov.w	r0, #0
 801106c:	f04f 0100 	mov.w	r1, #0
 8011070:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011074:	462b      	mov	r3, r5
 8011076:	0099      	lsls	r1, r3, #2
 8011078:	4623      	mov	r3, r4
 801107a:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 801107e:	4623      	mov	r3, r4
 8011080:	0098      	lsls	r0, r3, #2
 8011082:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8011086:	1814      	adds	r4, r2, r0
 8011088:	633c      	str	r4, [r7, #48]	@ 0x30
 801108a:	414b      	adcs	r3, r1
 801108c:	637b      	str	r3, [r7, #52]	@ 0x34
 801108e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8011092:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011096:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 801109a:	17da      	asrs	r2, r3, #31
 801109c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80110a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110a4:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80110a8:	17da      	asrs	r2, r3, #31
 80110aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80110ae:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80110b2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80110b6:	462b      	mov	r3, r5
 80110b8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80110bc:	4642      	mov	r2, r8
 80110be:	fb02 f203 	mul.w	r2, r2, r3
 80110c2:	464b      	mov	r3, r9
 80110c4:	4621      	mov	r1, r4
 80110c6:	fb01 f303 	mul.w	r3, r1, r3
 80110ca:	4413      	add	r3, r2
 80110cc:	4622      	mov	r2, r4
 80110ce:	4641      	mov	r1, r8
 80110d0:	fba2 ab01 	umull	sl, fp, r2, r1
 80110d4:	445b      	add	r3, fp
 80110d6:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110d8:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 80110dc:	17da      	asrs	r2, r3, #31
 80110de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80110e0:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 80110e2:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80110e6:	17da      	asrs	r2, r3, #31
 80110e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80110ea:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110ec:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80110f0:	462b      	mov	r3, r5
 80110f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80110f6:	4642      	mov	r2, r8
 80110f8:	fb02 f203 	mul.w	r2, r2, r3
 80110fc:	464b      	mov	r3, r9
 80110fe:	4621      	mov	r1, r4
 8011100:	fb01 f303 	mul.w	r3, r1, r3
 8011104:	4413      	add	r3, r2
 8011106:	4622      	mov	r2, r4
 8011108:	4641      	mov	r1, r8
 801110a:	fba2 1201 	umull	r1, r2, r2, r1
 801110e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011112:	460a      	mov	r2, r1
 8011114:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011118:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801111c:	4413      	add	r3, r2
 801111e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011122:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8011126:	460b      	mov	r3, r1
 8011128:	eb1a 0303 	adds.w	r3, sl, r3
 801112c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801112e:	4613      	mov	r3, r2
 8011130:	eb4b 0303 	adc.w	r3, fp, r3
 8011134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011136:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801113a:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 801113e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8011142:	1c51      	adds	r1, r2, #1
 8011144:	66b9      	str	r1, [r7, #104]	@ 0x68
 8011146:	f143 0300 	adc.w	r3, r3, #0
 801114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801114c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011150:	460b      	mov	r3, r1
 8011152:	0fdb      	lsrs	r3, r3, #31
 8011154:	2200      	movs	r2, #0
 8011156:	623b      	str	r3, [r7, #32]
 8011158:	627a      	str	r2, [r7, #36]	@ 0x24
 801115a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 801115e:	4623      	mov	r3, r4
 8011160:	4602      	mov	r2, r0
 8011162:	189b      	adds	r3, r3, r2
 8011164:	61bb      	str	r3, [r7, #24]
 8011166:	460b      	mov	r3, r1
 8011168:	462a      	mov	r2, r5
 801116a:	eb42 0303 	adc.w	r3, r2, r3
 801116e:	61fb      	str	r3, [r7, #28]
 8011170:	f04f 0200 	mov.w	r2, #0
 8011174:	f04f 0300 	mov.w	r3, #0
 8011178:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801117c:	4621      	mov	r1, r4
 801117e:	084a      	lsrs	r2, r1, #1
 8011180:	4629      	mov	r1, r5
 8011182:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011186:	4629      	mov	r1, r5
 8011188:	104b      	asrs	r3, r1, #1
 801118a:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801118e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011192:	2200      	movs	r2, #0
 8011194:	663b      	str	r3, [r7, #96]	@ 0x60
 8011196:	667a      	str	r2, [r7, #100]	@ 0x64
 8011198:	f04f 0200 	mov.w	r2, #0
 801119c:	f04f 0300 	mov.w	r3, #0
 80111a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80111a4:	4629      	mov	r1, r5
 80111a6:	008b      	lsls	r3, r1, #2
 80111a8:	4621      	mov	r1, r4
 80111aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80111ae:	4621      	mov	r1, r4
 80111b0:	008a      	lsls	r2, r1, #2
 80111b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80111b6:	1884      	adds	r4, r0, r2
 80111b8:	613c      	str	r4, [r7, #16]
 80111ba:	eb41 0303 	adc.w	r3, r1, r3
 80111be:	617b      	str	r3, [r7, #20]
 80111c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80111c4:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80111c8:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d132      	bne.n	8011236 <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 80111d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80111d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80111d8:	1884      	adds	r4, r0, r2
 80111da:	65bc      	str	r4, [r7, #88]	@ 0x58
 80111dc:	eb41 0303 	adc.w	r3, r1, r3
 80111e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80111e6:	460b      	mov	r3, r1
 80111e8:	3301      	adds	r3, #1
 80111ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80111ec:	4613      	mov	r3, r2
 80111ee:	f143 0300 	adc.w	r3, r3, #0
 80111f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80111f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80111f8:	460b      	mov	r3, r1
 80111fa:	0fdb      	lsrs	r3, r3, #31
 80111fc:	2200      	movs	r2, #0
 80111fe:	60bb      	str	r3, [r7, #8]
 8011200:	60fa      	str	r2, [r7, #12]
 8011202:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011206:	4623      	mov	r3, r4
 8011208:	4602      	mov	r2, r0
 801120a:	189b      	adds	r3, r3, r2
 801120c:	603b      	str	r3, [r7, #0]
 801120e:	460b      	mov	r3, r1
 8011210:	462a      	mov	r2, r5
 8011212:	eb42 0303 	adc.w	r3, r2, r3
 8011216:	607b      	str	r3, [r7, #4]
 8011218:	f04f 0200 	mov.w	r2, #0
 801121c:	f04f 0300 	mov.w	r3, #0
 8011220:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011224:	4621      	mov	r1, r4
 8011226:	084a      	lsrs	r2, r1, #1
 8011228:	4629      	mov	r1, r5
 801122a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801122e:	4629      	mov	r1, r5
 8011230:	104b      	asrs	r3, r1, #1
 8011232:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8011236:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 801123a:	2b00      	cmp	r3, #0
 801123c:	d109      	bne.n	8011252 <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 801123e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8011242:	2b00      	cmp	r3, #0
 8011244:	da05      	bge.n	8011252 <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 8011246:	f04f 0200 	mov.w	r2, #0
 801124a:	f04f 0300 	mov.w	r3, #0
 801124e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8011252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011256:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801125a:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801125c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 8011260:	4618      	mov	r0, r3
 8011262:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011266:	46bd      	mov	sp, r7
 8011268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801126c <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 801126c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011270:	b09a      	sub	sp, #104	@ 0x68
 8011272:	af00      	add	r7, sp, #0
 8011274:	6478      	str	r0, [r7, #68]	@ 0x44
 8011276:	6439      	str	r1, [r7, #64]	@ 0x40
 8011278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801127a:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 801127c:	2300      	movs	r3, #0
 801127e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8011282:	f04f 0200 	mov.w	r2, #0
 8011286:	f04f 0300 	mov.w	r3, #0
 801128a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 801128e:	f04f 0200 	mov.w	r2, #0
 8011292:	f04f 0300 	mov.w	r3, #0
 8011296:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 801129a:	f04f 0200 	mov.w	r2, #0
 801129e:	f04f 0300 	mov.w	r3, #0
 80112a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80112ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ae:	2200      	movs	r2, #0
 80112b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80112b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80112b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112ba:	2200      	movs	r2, #0
 80112bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80112be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80112c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80112c4:	460b      	mov	r3, r1
 80112c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112c8:	fb02 f203 	mul.w	r2, r2, r3
 80112cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ce:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80112d2:	4601      	mov	r1, r0
 80112d4:	fb01 f303 	mul.w	r3, r1, r3
 80112d8:	4413      	add	r3, r2
 80112da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112de:	fba2 4501 	umull	r4, r5, r2, r1
 80112e2:	442b      	add	r3, r5
 80112e4:	461d      	mov	r5, r3
 80112e6:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 80112ea:	623b      	str	r3, [r7, #32]
 80112ec:	f145 0300 	adc.w	r3, r5, #0
 80112f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80112f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80112f6:	f04f 0300 	mov.w	r3, #0
 80112fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80112fe:	f7ee ffdf 	bl	80002c0 <__aeabi_uldivmod>
 8011302:	4602      	mov	r2, r0
 8011304:	460b      	mov	r3, r1
 8011306:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801130a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801130c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8011310:	b29b      	uxth	r3, r3
 8011312:	2200      	movs	r2, #0
 8011314:	61bb      	str	r3, [r7, #24]
 8011316:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8011318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801131a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801131e:	4622      	mov	r2, r4
 8011320:	fb02 f203 	mul.w	r2, r2, r3
 8011324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011326:	4629      	mov	r1, r5
 8011328:	fb01 f303 	mul.w	r3, r1, r3
 801132c:	4413      	add	r3, r2
 801132e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011330:	4621      	mov	r1, r4
 8011332:	fba2 ab01 	umull	sl, fp, r2, r1
 8011336:	445b      	add	r3, fp
 8011338:	469b      	mov	fp, r3
 801133a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 801133e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011342:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8011346:	f04f 0200 	mov.w	r2, #0
 801134a:	f04f 0300 	mov.w	r3, #0
 801134e:	0a02      	lsrs	r2, r0, #8
 8011350:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011354:	0a0b      	lsrs	r3, r1, #8
 8011356:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801135a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801135e:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 8011362:	6139      	str	r1, [r7, #16]
 8011364:	f143 0300 	adc.w	r3, r3, #0
 8011368:	617b      	str	r3, [r7, #20]
 801136a:	f04f 0200 	mov.w	r2, #0
 801136e:	f04f 0300 	mov.w	r3, #0
 8011372:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011376:	4621      	mov	r1, r4
 8011378:	0aca      	lsrs	r2, r1, #11
 801137a:	4629      	mov	r1, r5
 801137c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8011380:	4629      	mov	r1, r5
 8011382:	0acb      	lsrs	r3, r1, #11
 8011384:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8011388:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801138c:	2b01      	cmp	r3, #1
 801138e:	d305      	bcc.n	801139c <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8011390:	f04f 32ff 	mov.w	r2, #4294967295
 8011394:	f04f 0300 	mov.w	r3, #0
 8011398:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801139c:	2300      	movs	r3, #0
 801139e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80113a2:	e041      	b.n	8011428 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80113a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113aa:	3302      	adds	r3, #2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	4413      	add	r3, r2
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	60bb      	str	r3, [r7, #8]
 80113b6:	60fa      	str	r2, [r7, #12]
 80113b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80113be:	4622      	mov	r2, r4
 80113c0:	fb02 f203 	mul.w	r2, r2, r3
 80113c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113c6:	4629      	mov	r1, r5
 80113c8:	fb01 f303 	mul.w	r3, r1, r3
 80113cc:	4413      	add	r3, r2
 80113ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80113d0:	4621      	mov	r1, r4
 80113d2:	fba2 8901 	umull	r8, r9, r2, r1
 80113d6:	444b      	add	r3, r9
 80113d8:	4699      	mov	r9, r3
 80113da:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80113de:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80113e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80113e6:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 80113ea:	6039      	str	r1, [r7, #0]
 80113ec:	f143 0300 	adc.w	r3, r3, #0
 80113f0:	607b      	str	r3, [r7, #4]
 80113f2:	f04f 0200 	mov.w	r2, #0
 80113f6:	f04f 0300 	mov.w	r3, #0
 80113fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80113fe:	4621      	mov	r1, r4
 8011400:	0a8a      	lsrs	r2, r1, #10
 8011402:	4629      	mov	r1, r5
 8011404:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8011408:	4629      	mov	r1, r5
 801140a:	0a8b      	lsrs	r3, r1, #10
 801140c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8011410:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011414:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011418:	3206      	adds	r2, #6
 801141a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801141e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011422:	3301      	adds	r3, #1
 8011424:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801142a:	7a9b      	ldrb	r3, [r3, #10]
 801142c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011430:	429a      	cmp	r2, r3
 8011432:	d3b7      	bcc.n	80113a4 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8011434:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 8011438:	4618      	mov	r0, r3
 801143a:	3768      	adds	r7, #104	@ 0x68
 801143c:	46bd      	mov	sp, r7
 801143e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011442 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	60f8      	str	r0, [r7, #12]
 801144a:	60b9      	str	r1, [r7, #8]
 801144c:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	8910      	ldrh	r0, [r2, #8]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	b292      	uxth	r2, r2
 801145a:	68b9      	ldr	r1, [r7, #8]
 801145c:	4798      	blx	r3
 801145e:	4603      	mov	r3, r0
}
 8011460:	4618      	mov	r0, r3
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	8910      	ldrh	r0, [r2, #8]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	b292      	uxth	r2, r2
 8011480:	68b9      	ldr	r1, [r7, #8]
 8011482:	4798      	blx	r3
 8011484:	4603      	mov	r3, r0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
	...

08011490 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	607a      	str	r2, [r7, #4]
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	460b      	mov	r3, r1
 801149e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80114a0:	2300      	movs	r3, #0
 80114a2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	2bff      	cmp	r3, #255	@ 0xff
 80114a8:	d902      	bls.n	80114b0 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80114aa:	f06f 0303 	mvn.w	r3, #3
 80114ae:	e01d      	b.n	80114ec <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80114b0:	897b      	ldrh	r3, [r7, #10]
 80114b2:	0a1b      	lsrs	r3, r3, #8
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	b2da      	uxtb	r2, r3
 80114b8:	4b0e      	ldr	r3, [pc, #56]	@ (80114f4 <VL53LX_WriteMulti+0x64>)
 80114ba:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80114bc:	897b      	ldrh	r3, [r7, #10]
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	4b0c      	ldr	r3, [pc, #48]	@ (80114f4 <VL53LX_WriteMulti+0x64>)
 80114c2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	6879      	ldr	r1, [r7, #4]
 80114c8:	480b      	ldr	r0, [pc, #44]	@ (80114f8 <VL53LX_WriteMulti+0x68>)
 80114ca:	f005 fc6a 	bl	8016da2 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	3302      	adds	r3, #2
 80114d2:	461a      	mov	r2, r3
 80114d4:	4907      	ldr	r1, [pc, #28]	@ (80114f4 <VL53LX_WriteMulti+0x64>)
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f7ff ffb3 	bl	8011442 <_I2CWrite>
 80114dc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d001      	beq.n	80114e8 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80114e4:	23f3      	movs	r3, #243	@ 0xf3
 80114e6:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80114e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	20007328 	.word	0x20007328
 80114f8:	2000732a 	.word	0x2000732a

080114fc <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	607a      	str	r2, [r7, #4]
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	460b      	mov	r3, r1
 801150a:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801150c:	2300      	movs	r3, #0
 801150e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011510:	897b      	ldrh	r3, [r7, #10]
 8011512:	0a1b      	lsrs	r3, r3, #8
 8011514:	b29b      	uxth	r3, r3
 8011516:	b2da      	uxtb	r2, r3
 8011518:	4b12      	ldr	r3, [pc, #72]	@ (8011564 <VL53LX_ReadMulti+0x68>)
 801151a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801151c:	897b      	ldrh	r3, [r7, #10]
 801151e:	b2da      	uxtb	r2, r3
 8011520:	4b10      	ldr	r3, [pc, #64]	@ (8011564 <VL53LX_ReadMulti+0x68>)
 8011522:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011524:	2202      	movs	r2, #2
 8011526:	490f      	ldr	r1, [pc, #60]	@ (8011564 <VL53LX_ReadMulti+0x68>)
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f7ff ff8a 	bl	8011442 <_I2CWrite>
 801152e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d002      	beq.n	801153c <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011536:	23f3      	movs	r3, #243	@ 0xf3
 8011538:	75fb      	strb	r3, [r7, #23]
        goto done;
 801153a:	e00c      	b.n	8011556 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801153c:	683a      	ldr	r2, [r7, #0]
 801153e:	6879      	ldr	r1, [r7, #4]
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff ff91 	bl	8011468 <_I2CRead>
 8011546:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801154e:	23f3      	movs	r3, #243	@ 0xf3
 8011550:	75fb      	strb	r3, [r7, #23]
 8011552:	e000      	b.n	8011556 <VL53LX_ReadMulti+0x5a>
    }
done:
 8011554:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801155a:	4618      	mov	r0, r3
 801155c:	3718      	adds	r7, #24
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	20007328 	.word	0x20007328

08011568 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	460b      	mov	r3, r1
 8011572:	807b      	strh	r3, [r7, #2]
 8011574:	4613      	mov	r3, r2
 8011576:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011578:	2300      	movs	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801157c:	887b      	ldrh	r3, [r7, #2]
 801157e:	0a1b      	lsrs	r3, r3, #8
 8011580:	b29b      	uxth	r3, r3
 8011582:	b2da      	uxtb	r2, r3
 8011584:	4b0c      	ldr	r3, [pc, #48]	@ (80115b8 <VL53LX_WrByte+0x50>)
 8011586:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011588:	887b      	ldrh	r3, [r7, #2]
 801158a:	b2da      	uxtb	r2, r3
 801158c:	4b0a      	ldr	r3, [pc, #40]	@ (80115b8 <VL53LX_WrByte+0x50>)
 801158e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011590:	4a09      	ldr	r2, [pc, #36]	@ (80115b8 <VL53LX_WrByte+0x50>)
 8011592:	787b      	ldrb	r3, [r7, #1]
 8011594:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011596:	2203      	movs	r2, #3
 8011598:	4907      	ldr	r1, [pc, #28]	@ (80115b8 <VL53LX_WrByte+0x50>)
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff ff51 	bl	8011442 <_I2CWrite>
 80115a0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80115a8:	23f3      	movs	r3, #243	@ 0xf3
 80115aa:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80115ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	20007328 	.word	0x20007328

080115bc <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	807b      	strh	r3, [r7, #2]
 80115c8:	4613      	mov	r3, r2
 80115ca:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80115cc:	2300      	movs	r3, #0
 80115ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80115d0:	887b      	ldrh	r3, [r7, #2]
 80115d2:	0a1b      	lsrs	r3, r3, #8
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	4b10      	ldr	r3, [pc, #64]	@ (801161c <VL53LX_WrWord+0x60>)
 80115da:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80115dc:	887b      	ldrh	r3, [r7, #2]
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	4b0e      	ldr	r3, [pc, #56]	@ (801161c <VL53LX_WrWord+0x60>)
 80115e2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80115e4:	883b      	ldrh	r3, [r7, #0]
 80115e6:	0a1b      	lsrs	r3, r3, #8
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	4b0b      	ldr	r3, [pc, #44]	@ (801161c <VL53LX_WrWord+0x60>)
 80115ee:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80115f0:	883b      	ldrh	r3, [r7, #0]
 80115f2:	b2da      	uxtb	r2, r3
 80115f4:	4b09      	ldr	r3, [pc, #36]	@ (801161c <VL53LX_WrWord+0x60>)
 80115f6:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80115f8:	2204      	movs	r2, #4
 80115fa:	4908      	ldr	r1, [pc, #32]	@ (801161c <VL53LX_WrWord+0x60>)
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7ff ff20 	bl	8011442 <_I2CWrite>
 8011602:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801160a:	23f3      	movs	r3, #243	@ 0xf3
 801160c:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	20007328 	.word	0x20007328

08011620 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	460b      	mov	r3, r1
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801162e:	2300      	movs	r3, #0
 8011630:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011632:	897b      	ldrh	r3, [r7, #10]
 8011634:	0a1b      	lsrs	r3, r3, #8
 8011636:	b29b      	uxth	r3, r3
 8011638:	b2da      	uxtb	r2, r3
 801163a:	4b12      	ldr	r3, [pc, #72]	@ (8011684 <VL53LX_RdByte+0x64>)
 801163c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801163e:	897b      	ldrh	r3, [r7, #10]
 8011640:	b2da      	uxtb	r2, r3
 8011642:	4b10      	ldr	r3, [pc, #64]	@ (8011684 <VL53LX_RdByte+0x64>)
 8011644:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011646:	2202      	movs	r2, #2
 8011648:	490e      	ldr	r1, [pc, #56]	@ (8011684 <VL53LX_RdByte+0x64>)
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f7ff fef9 	bl	8011442 <_I2CWrite>
 8011650:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011658:	23f3      	movs	r3, #243	@ 0xf3
 801165a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801165c:	e00c      	b.n	8011678 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801165e:	2201      	movs	r2, #1
 8011660:	6879      	ldr	r1, [r7, #4]
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	f7ff ff00 	bl	8011468 <_I2CRead>
 8011668:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011670:	23f3      	movs	r3, #243	@ 0xf3
 8011672:	75fb      	strb	r3, [r7, #23]
 8011674:	e000      	b.n	8011678 <VL53LX_RdByte+0x58>
    }
done:
 8011676:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3718      	adds	r7, #24
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	20007328 	.word	0x20007328

08011688 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	460b      	mov	r3, r1
 8011692:	607a      	str	r2, [r7, #4]
 8011694:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011696:	2300      	movs	r3, #0
 8011698:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801169a:	897b      	ldrh	r3, [r7, #10]
 801169c:	0a1b      	lsrs	r3, r3, #8
 801169e:	b29b      	uxth	r3, r3
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	4b17      	ldr	r3, [pc, #92]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116a4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80116a6:	897b      	ldrh	r3, [r7, #10]
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b15      	ldr	r3, [pc, #84]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116ac:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80116ae:	2202      	movs	r2, #2
 80116b0:	4913      	ldr	r1, [pc, #76]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f7ff fec5 	bl	8011442 <_I2CWrite>
 80116b8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116c0:	23f3      	movs	r3, #243	@ 0xf3
 80116c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116c4:	e015      	b.n	80116f2 <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80116c6:	2202      	movs	r2, #2
 80116c8:	490d      	ldr	r1, [pc, #52]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f7ff fecc 	bl	8011468 <_I2CRead>
 80116d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116d8:	23f3      	movs	r3, #243	@ 0xf3
 80116da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116dc:	e009      	b.n	80116f2 <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80116de:	4b08      	ldr	r3, [pc, #32]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	021b      	lsls	r3, r3, #8
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4a06      	ldr	r2, [pc, #24]	@ (8011700 <VL53LX_RdWord+0x78>)
 80116e8:	7852      	ldrb	r2, [r2, #1]
 80116ea:	4413      	add	r3, r2
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80116f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20007328 	.word	0x20007328

08011704 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 801170e:	2300      	movs	r3, #0
 8011710:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	4798      	blx	r3
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	4619      	mov	r1, r3
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 f8d2 	bl	80118e4 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011740:	2300      	movs	r3, #0
}
 8011742:	4618      	mov	r0, r3
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
	...

0801174c <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	4a07      	ldr	r2, [pc, #28]	@ (8011778 <VL53LX_WaitUs+0x2c>)
 801175a:	fb82 1203 	smull	r1, r2, r2, r3
 801175e:	1192      	asrs	r2, r2, #6
 8011760:	17db      	asrs	r3, r3, #31
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 f8bc 	bl	80118e4 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 801176c:	2300      	movs	r3, #0
}
 801176e:	4618      	mov	r0, r3
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	10624dd3 	.word	0x10624dd3

0801177c <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8011782:	af00      	add	r7, sp, #0
 8011784:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8011788:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 801178c:	6020      	str	r0, [r4, #0]
 801178e:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8011792:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8011796:	6001      	str	r1, [r0, #0]
 8011798:	4619      	mov	r1, r3
 801179a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801179e:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80117a2:	801a      	strh	r2, [r3, #0]
 80117a4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117a8:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 80117ac:	460a      	mov	r2, r1
 80117ae:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80117b0:	2300      	movs	r3, #0
 80117b2:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 80117c2:	2300      	movs	r3, #0
 80117c4:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80117d4:	f107 0310 	add.w	r3, r7, #16
 80117d8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80117dc:	4940      	ldr	r1, [pc, #256]	@ (80118e0 <VL53LX_WaitValueMaskEx+0x164>)
 80117de:	4618      	mov	r0, r3
 80117e0:	f005 fa58 	bl	8016c94 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80117e4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80117e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117ec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80117f0:	4611      	mov	r1, r2
 80117f2:	6818      	ldr	r0, [r3, #0]
 80117f4:	f7ff ff86 	bl	8011704 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 80117f8:	e04e      	b.n	8011898 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 80117fa:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d110      	bne.n	8011824 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 8011802:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8011806:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801180a:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801180e:	8819      	ldrh	r1, [r3, #0]
 8011810:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011814:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011818:	6818      	ldr	r0, [r3, #0]
 801181a:	f7ff ff01 	bl	8011620 <VL53LX_RdByte>
 801181e:	4603      	mov	r3, r0
 8011820:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011824:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8011828:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801182c:	4013      	ands	r3, r2
 801182e:	b2db      	uxtb	r3, r3
 8011830:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8011834:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8011838:	7812      	ldrb	r2, [r2, #0]
 801183a:	429a      	cmp	r2, r3
 801183c:	d102      	bne.n	8011844 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 801183e:	2301      	movs	r3, #1
 8011840:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011844:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011848:	2b00      	cmp	r3, #0
 801184a:	d114      	bne.n	8011876 <VL53LX_WaitValueMaskEx+0xfa>
 801184c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011850:	2b00      	cmp	r3, #0
 8011852:	d110      	bne.n	8011876 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8011854:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00c      	beq.n	8011876 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 801185c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8011860:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011864:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011868:	4611      	mov	r1, r2
 801186a:	6818      	ldr	r0, [r3, #0]
 801186c:	f7ff ff5e 	bl	801172c <VL53LX_WaitMs>
 8011870:	4603      	mov	r3, r0
 8011872:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011876:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801187a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801187e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011882:	4611      	mov	r1, r2
 8011884:	6818      	ldr	r0, [r3, #0]
 8011886:	f7ff ff3d 	bl	8011704 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801188a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801188e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8011898:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10c      	bne.n	80118ba <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 80118a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80118a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80118a8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d203      	bcs.n	80118ba <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 80118b2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d09f      	beq.n	80117fa <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80118ba:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d106      	bne.n	80118d0 <VL53LX_WaitValueMaskEx+0x154>
 80118c2:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80118ca:	23f9      	movs	r3, #249	@ 0xf9
 80118cc:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 80118d0:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd90      	pop	{r4, r7, pc}
 80118de:	bf00      	nop
 80118e0:	08017858 	.word	0x08017858

080118e4 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	4798      	blx	r3
 80118f4:	4603      	mov	r3, r0
 80118f6:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80118f8:	bf00      	nop
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	695b      	ldr	r3, [r3, #20]
 80118fe:	4798      	blx	r3
 8011900:	4603      	mov	r3, r0
 8011902:	461a      	mov	r2, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	683a      	ldr	r2, [r7, #0]
 801190a:	429a      	cmp	r2, r3
 801190c:	d8f5      	bhi.n	80118fa <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 801190e:	2300      	movs	r3, #0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b08c      	sub	sp, #48	@ 0x30
 801191c:	af06      	add	r7, sp, #24
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011926:	2300      	movs	r3, #0
 8011928:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 801192a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192c:	9304      	str	r3, [sp, #16]
 801192e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011930:	9303      	str	r3, [sp, #12]
 8011932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011934:	9302      	str	r3, [sp, #8]
 8011936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011938:	9301      	str	r3, [sp, #4]
 801193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801193c:	9300      	str	r3, [sp, #0]
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	68b8      	ldr	r0, [r7, #8]
 8011946:	f7fc ffad 	bl	800e8a4 <VL53LX_hist_process_data>
 801194a:	4603      	mov	r3, r0
 801194c:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801194e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b084      	sub	sp, #16
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
 8011962:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d103      	bne.n	8011972 <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801196a:	f06f 0301 	mvn.w	r3, #1
 801196e:	60fb      	str	r3, [r7, #12]
 8011970:	e023      	b.n	80119ba <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	685a      	ldr	r2, [r3, #4]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	891a      	ldrh	r2, [r3, #8]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	68da      	ldr	r2, [r3, #12]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	691a      	ldr	r2, [r3, #16]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	695a      	ldr	r2, [r3, #20]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d004      	beq.n	80119b4 <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4798      	blx	r3
 80119b0:	60f8      	str	r0, [r7, #12]
 80119b2:	e002      	b.n	80119ba <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 80119b4:	f04f 33ff 	mov.w	r3, #4294967295
 80119b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80119ba:	68fb      	ldr	r3, [r7, #12]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80119d2:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 80119da:	f04f 33ff 	mov.w	r3, #4294967295
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	e043      	b.n	8011a6a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ef fd44 	bl	8001470 <VL53LX_WaitDeviceBooted>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d003      	beq.n	80119f6 <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 80119ee:	f04f 33ff 	mov.w	r3, #4294967295
 80119f2:	60fb      	str	r3, [r7, #12]
 80119f4:	e039      	b.n	8011a6a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7ef fcdf 	bl	80013ba <VL53LX_DataInit>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 8011a02:	f04f 33ff 	mov.w	r3, #4294967295
 8011a06:	60fb      	str	r3, [r7, #12]
 8011a08:	e02f      	b.n	8011a6a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7f0 fbf0 	bl	80021f0 <VL53LX_PerformRefSpadManagement>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d003      	beq.n	8011a1e <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 8011a16:	f04f 33ff 	mov.w	r3, #4294967295
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	e025      	b.n	8011a6a <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a24:	2200      	movs	r2, #0
 8011a26:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a54:	2200      	movs	r2, #0
 8011a56:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 8011a66:	2300      	movs	r3, #0
 8011a68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 8011a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a80:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a88:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d111      	bne.n	8011ab4 <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	4798      	blx	r3
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d003      	beq.n	8011aa4 <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa0:	60fb      	str	r3, [r7, #12]
 8011aa2:	e007      	b.n	8011ab4 <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b084      	sub	sp, #16
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
 8011ac6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d002      	beq.n	8011ad4 <VL53L4CX_ReadID+0x16>
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d103      	bne.n	8011adc <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011ad4:	f06f 0301 	mvn.w	r3, #1
 8011ad8:	60fb      	str	r3, [r7, #12]
 8011ada:	e00a      	b.n	8011af2 <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	f240 110f 	movw	r1, #271	@ 0x10f
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff fdcd 	bl	8011688 <VL53LX_RdWord>
 8011aee:	4603      	mov	r3, r0
 8011af0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011af2:	68fb      	ldr	r3, [r7, #12]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d002      	beq.n	8011b12 <VL53L4CX_GetCapabilities+0x16>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d103      	bne.n	8011b1a <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b12:	f06f 0301 	mvn.w	r3, #1
 8011b16:	60fb      	str	r3, [r7, #12]
 8011b18:	e00d      	b.n	8011b36 <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2204      	movs	r2, #4
 8011b24:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b36:	68fb      	ldr	r3, [r7, #12]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3714      	adds	r7, #20
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d009      	beq.n	8011b68 <VL53L4CX_ConfigProfile+0x24>
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d006      	beq.n	8011b68 <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011b60:	7afb      	ldrb	r3, [r7, #11]
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d103      	bne.n	8011b6e <VL53L4CX_ConfigProfile+0x2a>
 8011b66:	e00c      	b.n	8011b82 <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 8011b68:	f06f 0301 	mvn.w	r3, #1
 8011b6c:	e043      	b.n	8011bf6 <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011b6e:	7afb      	ldrb	r3, [r7, #11]
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d006      	beq.n	8011b82 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8011b74:	7afb      	ldrb	r3, [r7, #11]
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	d003      	beq.n	8011b82 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b7a:	f06f 0301 	mvn.w	r3, #1
 8011b7e:	60fb      	str	r3, [r7, #12]
 8011b80:	e038      	b.n	8011bf4 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011b82:	7afb      	ldrb	r3, [r7, #11]
 8011b84:	4619      	mov	r1, r3
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ef fd53 	bl	8001632 <VL53LX_SetDistanceMode>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8011b92:	f04f 33ff 	mov.w	r3, #4294967295
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	e02c      	b.n	8011bf4 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ba2:	fb02 f303 	mul.w	r3, r2, r3
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ef fdab 	bl	8001704 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d003      	beq.n	8011bbc <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	60fb      	str	r3, [r7, #12]
 8011bba:	e01b      	b.n	8011bf4 <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	bf14      	ite	ne
 8011bc4:	2301      	movne	r3, #1
 8011bc6:	2300      	moveq	r3, #0
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	461a      	mov	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bd2:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	691b      	ldr	r3, [r3, #16]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	bf14      	ite	ne
 8011bde:	2301      	movne	r3, #1
 8011be0:	2300      	moveq	r3, #0
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	461a      	mov	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bec:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b084      	sub	sp, #16
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d002      	beq.n	8011c14 <VL53L4CX_ConfigROI+0x16>
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d103      	bne.n	8011c1c <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c14:	f06f 0301 	mvn.w	r3, #1
 8011c18:	60fb      	str	r3, [r7, #12]
 8011c1a:	e01a      	b.n	8011c52 <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	789b      	ldrb	r3, [r3, #2]
 8011c20:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	78db      	ldrb	r3, [r3, #3]
 8011c26:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	785b      	ldrb	r3, [r3, #1]
 8011c32:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011c34:	f107 0308 	add.w	r3, r7, #8
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7ef fdda 	bl	80017f4 <VL53LX_SetUserROI>
 8011c40:	4603      	mov	r3, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 8011c46:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	e001      	b.n	8011c52 <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011c52:	68fb      	ldr	r3, [r7, #12]
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b083      	sub	sp, #12
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011c66:	f06f 0303 	mvn.w	r3, #3
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	370c      	adds	r7, #12
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr

08011c76 <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b084      	sub	sp, #16
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
 8011c7e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8011c80:	2300      	movs	r3, #0
 8011c82:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d002      	beq.n	8011c90 <VL53L4CX_GetDistance+0x1a>
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d103      	bne.n	8011c98 <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c90:	f06f 0301 	mvn.w	r3, #1
 8011c94:	60fb      	str	r3, [r7, #12]
 8011c96:	e009      	b.n	8011cac <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c9e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d102      	bne.n	8011cac <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 8011ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8011caa:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d112      	bne.n	8011cd8 <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cb8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d106      	bne.n	8011cce <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011cc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f000 f957 	bl	8011f78 <vl53l4cx_poll_for_measurement>
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	e004      	b.n	8011cd8 <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 8011cce:	2100      	movs	r1, #0
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f000 f951 	bl	8011f78 <vl53l4cx_poll_for_measurement>
 8011cd6:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d119      	bne.n	8011d12 <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 f977 	bl	8011fd4 <vl53l4cx_get_result>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d003      	beq.n	8011cf4 <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 8011cec:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf0:	60fb      	str	r3, [r7, #12]
 8011cf2:	e00e      	b.n	8011d12 <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cfa:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d105      	bne.n	8011d0e <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f7ef fe45 	bl	8001992 <VL53LX_ClearInterruptAndStartMeasurement>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	e001      	b.n	8011d12 <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011d12:	68fb      	ldr	r3, [r7, #12]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d103      	bne.n	8011d34 <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011d2c:	f06f 0301 	mvn.w	r3, #1
 8011d30:	60fb      	str	r3, [r7, #12]
 8011d32:	e06e      	b.n	8011e12 <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d3a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d103      	bne.n	8011d4a <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 8011d42:	f04f 33ff 	mov.w	r3, #4294967295
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	e063      	b.n	8011e12 <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ef fdbf 	bl	80018ce <VL53LX_StartMeasurement>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d15a      	bne.n	8011e0c <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011d62:	2300      	movs	r3, #0
 8011d64:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ef fe13 	bl	8001992 <VL53LX_ClearInterruptAndStartMeasurement>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	3b01      	subs	r3, #1
 8011d74:	2b03      	cmp	r3, #3
 8011d76:	d83f      	bhi.n	8011df8 <VL53L4CX_Start+0xdc>
 8011d78:	a201      	add	r2, pc, #4	@ (adr r2, 8011d80 <VL53L4CX_Start+0x64>)
 8011d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d7e:	bf00      	nop
 8011d80:	08011d91 	.word	0x08011d91
 8011d84:	08011dab 	.word	0x08011dab
 8011d88:	08011dc5 	.word	0x08011dc5
 8011d8c:	08011ddf 	.word	0x08011ddf
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011da2:	2201      	movs	r2, #1
 8011da4:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011da8:	e033      	b.n	8011e12 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011dc2:	e026      	b.n	8011e12 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011ddc:	e019      	b.n	8011e12 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011de4:	2200      	movs	r2, #0
 8011de6:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011df0:	2200      	movs	r2, #0
 8011df2:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011df6:	e00c      	b.n	8011e12 <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 8011e04:	f06f 0301 	mvn.w	r3, #1
 8011e08:	60fb      	str	r3, [r7, #12]
      break;
 8011e0a:	e002      	b.n	8011e12 <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e12:	68fb      	ldr	r3, [r7, #12]
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d103      	bne.n	8011e32 <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011e2a:	f06f 0301 	mvn.w	r3, #1
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	e01c      	b.n	8011e6c <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e38:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d103      	bne.n	8011e48 <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8011e40:	f04f 33ff 	mov.w	r3, #4294967295
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e011      	b.n	8011e6c <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7ef fd8e 	bl	800196a <VL53LX_StopMeasurement>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d108      	bne.n	8011e66 <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	60fb      	str	r3, [r7, #12]
 8011e64:	e002      	b.n	8011e6c <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011e66:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d103      	bne.n	8011e8e <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011e86:	f06f 0301 	mvn.w	r3, #1
 8011e8a:	60fb      	str	r3, [r7, #12]
 8011e8c:	e012      	b.n	8011eb4 <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	4619      	mov	r1, r3
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7ef fa69 	bl	800136c <VL53LX_SetDeviceAddress>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d003      	beq.n	8011ea8 <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 8011ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea4:	60fb      	str	r3, [r7, #12]
 8011ea6:	e005      	b.n	8011eb4 <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 8011ebe:	b480      	push	{r7}
 8011ec0:	b085      	sub	sp, #20
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <VL53L4CX_GetAddress+0x16>
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d103      	bne.n	8011edc <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011ed4:	f06f 0301 	mvn.w	r3, #1
 8011ed8:	60fb      	str	r3, [r7, #12]
 8011eda:	e006      	b.n	8011eea <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	891b      	ldrh	r3, [r3, #8]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011eea:	68fb      	ldr	r3, [r7, #12]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3714      	adds	r7, #20
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011f02:	f06f 0303 	mvn.w	r3, #3
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr

08011f12 <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011f12:	b480      	push	{r7}
 8011f14:	b083      	sub	sp, #12
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011f1c:	f06f 0303 	mvn.w	r3, #3
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	370c      	adds	r7, #12
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <VL53L4CX_OffsetCalibration>:
  * @param pObj    vl53l4cx context object.
  * @param CalDistance    Calibration distance in mm.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_OffsetCalibration(VL53L4CX_Object_t *pObj, uint32_t CalDistance)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  VL53LX_OffsetCorrectionModes Mode = VL53LX_OFFSETCORRECTIONMODE_STANDARD;
 8011f36:	2301      	movs	r3, #1
 8011f38:	72fb      	strb	r3, [r7, #11]

  if (VL53LX_SetOffsetCorrectionMode(pObj, Mode) != VL53LX_ERROR_NONE)
 8011f3a:	7afb      	ldrb	r3, [r7, #11]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7f0 fa52 	bl	80023e8 <VL53LX_SetOffsetCorrectionMode>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d003      	beq.n	8011f52 <VL53L4CX_OffsetCalibration+0x26>
  {
    ret = VL53L4CX_ERROR;
 8011f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4e:	60fb      	str	r3, [r7, #12]
 8011f50:	e00d      	b.n	8011f6e <VL53L4CX_OffsetCalibration+0x42>
  }
  else if (VL53LX_PerformOffsetSimpleCalibration(pObj, (int32_t)CalDistance) != VL53LX_ERROR_NONE)
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	4619      	mov	r1, r3
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7f0 fa6c 	bl	8002434 <VL53LX_PerformOffsetSimpleCalibration>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d003      	beq.n	8011f6a <VL53L4CX_OffsetCalibration+0x3e>
  {
    ret = VL53L4CX_ERROR;
 8011f62:	f04f 33ff 	mov.w	r3, #4294967295
 8011f66:	60fb      	str	r3, [r7, #12]
 8011f68:	e001      	b.n	8011f6e <VL53L4CX_OffsetCalibration+0x42>
  }
  else
  {
    ret = VL53L4CX_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d102      	bne.n	8011f92 <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8011f8c:	f06f 0301 	mvn.w	r3, #1
 8011f90:	e01b      	b.n	8011fca <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	695b      	ldr	r3, [r3, #20]
 8011f96:	4798      	blx	r3
 8011f98:	4603      	mov	r3, r0
 8011f9a:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011f9c:	f107 030b 	add.w	r3, r7, #11
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ef fd0b 	bl	80019be <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011fa8:	7afb      	ldrb	r3, [r7, #11]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d101      	bne.n	8011fb2 <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e00b      	b.n	8011fca <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	695b      	ldr	r3, [r3, #20]
 8011fb6:	4798      	blx	r3
 8011fb8:	4603      	mov	r3, r0
 8011fba:	461a      	mov	r2, r3
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	1ad3      	subs	r3, r2, r3
 8011fc0:	683a      	ldr	r2, [r7, #0]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d8ea      	bhi.n	8011f9c <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 8011fc6:	f06f 0302 	mvn.w	r3, #2
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
	...

08011fd4 <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b089      	sub	sp, #36	@ 0x24
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <vl53l4cx_get_result+0x16>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d103      	bne.n	8011ff2 <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011fea:	f06f 0301 	mvn.w	r3, #1
 8011fee:	61fb      	str	r3, [r7, #28]
 8011ff0:	e103      	b.n	80121fa <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011ff2:	4984      	ldr	r1, [pc, #528]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7f0 f8d4 	bl	80021a2 <VL53LX_GetMultiRangingData>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d003      	beq.n	8012008 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8012000:	f04f 33ff 	mov.w	r3, #4294967295
 8012004:	61fb      	str	r3, [r7, #28]
 8012006:	e0f8      	b.n	80121fa <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8012008:	2300      	movs	r3, #0
 801200a:	76fb      	strb	r3, [r7, #27]
 801200c:	e0ec      	b.n	80121e8 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801200e:	4b7d      	ldr	r3, [pc, #500]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012010:	795b      	ldrb	r3, [r3, #5]
 8012012:	7efa      	ldrb	r2, [r7, #27]
 8012014:	4618      	mov	r0, r3
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	4613      	mov	r3, r2
 801201a:	011b      	lsls	r3, r3, #4
 801201c:	4413      	add	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	440b      	add	r3, r1
 8012022:	3304      	adds	r3, #4
 8012024:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012026:	2300      	movs	r3, #0
 8012028:	76bb      	strb	r3, [r7, #26]
 801202a:	e0d4      	b.n	80121d6 <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 801202c:	7eba      	ldrb	r2, [r7, #26]
 801202e:	4975      	ldr	r1, [pc, #468]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012030:	4613      	mov	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	440b      	add	r3, r1
 801203a:	3318      	adds	r3, #24
 801203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012040:	2b00      	cmp	r3, #0
 8012042:	da0b      	bge.n	801205c <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8012044:	7efa      	ldrb	r2, [r7, #27]
 8012046:	7eb8      	ldrb	r0, [r7, #26]
 8012048:	6839      	ldr	r1, [r7, #0]
 801204a:	4613      	mov	r3, r2
 801204c:	011b      	lsls	r3, r3, #4
 801204e:	4413      	add	r3, r2
 8012050:	4403      	add	r3, r0
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	440b      	add	r3, r1
 8012056:	2200      	movs	r2, #0
 8012058:	609a      	str	r2, [r3, #8]
 801205a:	e014      	b.n	8012086 <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801205c:	7eba      	ldrb	r2, [r7, #26]
 801205e:	4969      	ldr	r1, [pc, #420]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012060:	4613      	mov	r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	4413      	add	r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	440b      	add	r3, r1
 801206a:	3318      	adds	r3, #24
 801206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012070:	7efa      	ldrb	r2, [r7, #27]
 8012072:	7eb8      	ldrb	r0, [r7, #26]
 8012074:	461c      	mov	r4, r3
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	4613      	mov	r3, r2
 801207a:	011b      	lsls	r3, r3, #4
 801207c:	4413      	add	r3, r2
 801207e:	4403      	add	r3, r0
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	440b      	add	r3, r1
 8012084:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801208c:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8012090:	2b01      	cmp	r3, #1
 8012092:	d132      	bne.n	80120fa <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8012094:	7eba      	ldrb	r2, [r7, #26]
 8012096:	495b      	ldr	r1, [pc, #364]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012098:	4613      	mov	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	440b      	add	r3, r1
 80120a2:	3310      	adds	r3, #16
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	ee07 3a90 	vmov	s15, r3
 80120aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80120ae:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8012208 <vl53l4cx_get_result+0x234>
 80120b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80120b6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801220c <vl53l4cx_get_result+0x238>
 80120ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120be:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80120c2:	4b50      	ldr	r3, [pc, #320]	@ (8012204 <vl53l4cx_get_result+0x230>)
 80120c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80120c8:	0a1b      	lsrs	r3, r3, #8
 80120ca:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80120cc:	8a7b      	ldrh	r3, [r7, #18]
 80120ce:	ee07 3a90 	vmov	s15, r3
 80120d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80120d6:	7efa      	ldrb	r2, [r7, #27]
 80120d8:	7eb8      	ldrb	r0, [r7, #26]
 80120da:	edd7 6a05 	vldr	s13, [r7, #20]
 80120de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120e2:	6839      	ldr	r1, [r7, #0]
 80120e4:	4613      	mov	r3, r2
 80120e6:	011b      	lsls	r3, r3, #4
 80120e8:	4413      	add	r3, r2
 80120ea:	4403      	add	r3, r0
 80120ec:	3308      	adds	r3, #8
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	440b      	add	r3, r1
 80120f2:	3308      	adds	r3, #8
 80120f4:	edc3 7a00 	vstr	s15, [r3]
 80120f8:	e00d      	b.n	8012116 <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80120fa:	7efa      	ldrb	r2, [r7, #27]
 80120fc:	7eb8      	ldrb	r0, [r7, #26]
 80120fe:	6839      	ldr	r1, [r7, #0]
 8012100:	4613      	mov	r3, r2
 8012102:	011b      	lsls	r3, r3, #4
 8012104:	4413      	add	r3, r2
 8012106:	4403      	add	r3, r0
 8012108:	3308      	adds	r3, #8
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	440b      	add	r3, r1
 801210e:	3308      	adds	r3, #8
 8012110:	f04f 0200 	mov.w	r2, #0
 8012114:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801211c:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 8012120:	2b01      	cmp	r3, #1
 8012122:	d132      	bne.n	801218a <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8012124:	7eba      	ldrb	r2, [r7, #26]
 8012126:	4937      	ldr	r1, [pc, #220]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012128:	4613      	mov	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	330c      	adds	r3, #12
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	ee07 3a90 	vmov	s15, r3
 801213a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801213e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8012208 <vl53l4cx_get_result+0x234>
 8012142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012146:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801220c <vl53l4cx_get_result+0x238>
 801214a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801214e:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8012152:	4b2c      	ldr	r3, [pc, #176]	@ (8012204 <vl53l4cx_get_result+0x230>)
 8012154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012158:	0a1b      	lsrs	r3, r3, #8
 801215a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801215c:	8a7b      	ldrh	r3, [r7, #18]
 801215e:	ee07 3a90 	vmov	s15, r3
 8012162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012166:	7efa      	ldrb	r2, [r7, #27]
 8012168:	7eb8      	ldrb	r0, [r7, #26]
 801216a:	edd7 6a03 	vldr	s13, [r7, #12]
 801216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012172:	6839      	ldr	r1, [r7, #0]
 8012174:	4613      	mov	r3, r2
 8012176:	011b      	lsls	r3, r3, #4
 8012178:	4413      	add	r3, r2
 801217a:	4403      	add	r3, r0
 801217c:	330c      	adds	r3, #12
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	440b      	add	r3, r1
 8012182:	3308      	adds	r3, #8
 8012184:	edc3 7a00 	vstr	s15, [r3]
 8012188:	e00d      	b.n	80121a6 <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 801218a:	7efa      	ldrb	r2, [r7, #27]
 801218c:	7eb8      	ldrb	r0, [r7, #26]
 801218e:	6839      	ldr	r1, [r7, #0]
 8012190:	4613      	mov	r3, r2
 8012192:	011b      	lsls	r3, r3, #4
 8012194:	4413      	add	r3, r2
 8012196:	4403      	add	r3, r0
 8012198:	330c      	adds	r3, #12
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	440b      	add	r3, r1
 801219e:	3308      	adds	r3, #8
 80121a0:	f04f 0200 	mov.w	r2, #0
 80121a4:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80121a6:	7eba      	ldrb	r2, [r7, #26]
 80121a8:	4916      	ldr	r1, [pc, #88]	@ (8012204 <vl53l4cx_get_result+0x230>)
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	440b      	add	r3, r1
 80121b4:	331a      	adds	r3, #26
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	7efa      	ldrb	r2, [r7, #27]
 80121ba:	7eb8      	ldrb	r0, [r7, #26]
 80121bc:	461c      	mov	r4, r3
 80121be:	6839      	ldr	r1, [r7, #0]
 80121c0:	4613      	mov	r3, r2
 80121c2:	011b      	lsls	r3, r3, #4
 80121c4:	4413      	add	r3, r2
 80121c6:	4403      	add	r3, r0
 80121c8:	3304      	adds	r3, #4
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	440b      	add	r3, r1
 80121ce:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80121d0:	7ebb      	ldrb	r3, [r7, #26]
 80121d2:	3301      	adds	r3, #1
 80121d4:	76bb      	strb	r3, [r7, #26]
 80121d6:	4b0b      	ldr	r3, [pc, #44]	@ (8012204 <vl53l4cx_get_result+0x230>)
 80121d8:	795b      	ldrb	r3, [r3, #5]
 80121da:	7eba      	ldrb	r2, [r7, #26]
 80121dc:	429a      	cmp	r2, r3
 80121de:	f4ff af25 	bcc.w	801202c <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 80121e2:	7efb      	ldrb	r3, [r7, #27]
 80121e4:	3301      	adds	r3, #1
 80121e6:	76fb      	strb	r3, [r7, #27]
 80121e8:	7efb      	ldrb	r3, [r7, #27]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	f43f af0f 	beq.w	801200e <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	2201      	movs	r2, #1
 80121f4:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80121fa:	69fb      	ldr	r3, [r7, #28]
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3724      	adds	r7, #36	@ 0x24
 8012200:	46bd      	mov	sp, r7
 8012202:	bd90      	pop	{r4, r7, pc}
 8012204:	20007428 	.word	0x20007428
 8012208:	47800000 	.word	0x47800000
 801220c:	447a0000 	.word	0x447a0000

08012210 <LL_AHB2_GRP1_EnableClock>:
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801221c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801221e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	4313      	orrs	r3, r2
 8012226:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801222c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4013      	ands	r3, r2
 8012232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012234:	68fb      	ldr	r3, [r7, #12]
}
 8012236:	bf00      	nop
 8012238:	3714      	adds	r7, #20
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8012242:	b480      	push	{r7}
 8012244:	b085      	sub	sp, #20
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801224e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	4313      	orrs	r3, r2
 8012258:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801225a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801225e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4013      	ands	r3, r2
 8012264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012266:	68fb      	ldr	r3, [r7, #12]
}
 8012268:	bf00      	nop
 801226a:	3714      	adds	r7, #20
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	460a      	mov	r2, r1
 801227e:	71fb      	strb	r3, [r7, #7]
 8012280:	4613      	mov	r3, r2
 8012282:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8012284:	2300      	movs	r3, #0
 8012286:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8012288:	79fb      	ldrb	r3, [r7, #7]
 801228a:	4a1f      	ldr	r2, [pc, #124]	@ (8012308 <BSP_PB_Init+0x94>)
 801228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012290:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8012292:	79bb      	ldrb	r3, [r7, #6]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d132      	bne.n	80122fe <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8012298:	79fb      	ldrb	r3, [r7, #7]
 801229a:	00db      	lsls	r3, r3, #3
 801229c:	4a1b      	ldr	r2, [pc, #108]	@ (801230c <BSP_PB_Init+0x98>)
 801229e:	441a      	add	r2, r3
 80122a0:	79fb      	ldrb	r3, [r7, #7]
 80122a2:	491b      	ldr	r1, [pc, #108]	@ (8012310 <BSP_PB_Init+0x9c>)
 80122a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80122a8:	4619      	mov	r1, r3
 80122aa:	4610      	mov	r0, r2
 80122ac:	f000 fb11 	bl	80128d2 <HAL_EXTI_GetHandle>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d003      	beq.n	80122be <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80122b6:	f06f 0303 	mvn.w	r3, #3
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e01f      	b.n	80122fe <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	00db      	lsls	r3, r3, #3
 80122c2:	4a12      	ldr	r2, [pc, #72]	@ (801230c <BSP_PB_Init+0x98>)
 80122c4:	1898      	adds	r0, r3, r2
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	4a12      	ldr	r2, [pc, #72]	@ (8012314 <BSP_PB_Init+0xa0>)
 80122ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ce:	461a      	mov	r2, r3
 80122d0:	2100      	movs	r1, #0
 80122d2:	f000 fae4 	bl	801289e <HAL_EXTI_RegisterCallback>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d003      	beq.n	80122e4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80122dc:	f06f 0303 	mvn.w	r3, #3
 80122e0:	60fb      	str	r3, [r7, #12]
 80122e2:	e00c      	b.n	80122fe <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80122e4:	2006      	movs	r0, #6
 80122e6:	79fb      	ldrb	r3, [r7, #7]
 80122e8:	4a0b      	ldr	r2, [pc, #44]	@ (8012318 <BSP_PB_Init+0xa4>)
 80122ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ee:	2200      	movs	r2, #0
 80122f0:	4619      	mov	r1, r3
 80122f2:	f000 faa0 	bl	8012836 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80122f6:	2306      	movs	r3, #6
 80122f8:	4618      	mov	r0, r3
 80122fa:	f000 fab6 	bl	801286a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80122fe:	68fb      	ldr	r3, [r7, #12]
}
 8012300:	4618      	mov	r0, r3
 8012302:	3710      	adds	r7, #16
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	08017ac8 	.word	0x08017ac8
 801230c:	20000070 	.word	0x20000070
 8012310:	08017acc 	.word	0x08017acc
 8012314:	08017ad0 	.word	0x08017ad0
 8012318:	08017ad4 	.word	0x08017ad4

0801231c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8012320:	2000      	movs	r0, #0
 8012322:	f004 fa79 	bl	8016818 <BSP_PB_Callback>
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
	...

0801232c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012332:	2008      	movs	r0, #8
 8012334:	f7ff ff6c 	bl	8012210 <LL_AHB2_GRP1_EnableClock>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8012338:	2200      	movs	r2, #0
 801233a:	2100      	movs	r1, #0
 801233c:	2006      	movs	r0, #6
 801233e:	f000 fa7a 	bl	8012836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8012342:	2006      	movs	r0, #6
 8012344:	f000 fa91 	bl	801286a <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012348:	1d3b      	adds	r3, r7, #4
 801234a:	2200      	movs	r2, #0
 801234c:	601a      	str	r2, [r3, #0]
 801234e:	605a      	str	r2, [r3, #4]
 8012350:	609a      	str	r2, [r3, #8]
 8012352:	60da      	str	r2, [r3, #12]
 8012354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012356:	2008      	movs	r0, #8
 8012358:	f7ff ff5a 	bl	8012210 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 801235c:	2301      	movs	r3, #1
 801235e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8012360:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8012364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012366:	2301      	movs	r3, #1
 8012368:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 801236a:	1d3b      	adds	r3, r7, #4
 801236c:	4619      	mov	r1, r3
 801236e:	4807      	ldr	r0, [pc, #28]	@ (801238c <BUTTON_USER_GPIO_Init+0x60>)
 8012370:	f000 faf2 	bl	8012958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8012374:	2200      	movs	r2, #0
 8012376:	2100      	movs	r1, #0
 8012378:	2006      	movs	r0, #6
 801237a:	f000 fa5c 	bl	8012836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801237e:	2006      	movs	r0, #6
 8012380:	f000 fa73 	bl	801286a <HAL_NVIC_EnableIRQ>

}
 8012384:	bf00      	nop
 8012386:	3718      	adds	r7, #24
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	48000c00 	.word	0x48000c00

08012390 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 801239a:	2300      	movs	r3, #0
 801239c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 801239e:	79fb      	ldrb	r3, [r7, #7]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d903      	bls.n	80123ac <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80123a4:	f06f 0301 	mvn.w	r3, #1
 80123a8:	60fb      	str	r3, [r7, #12]
 80123aa:	e022      	b.n	80123f2 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80123ac:	79fa      	ldrb	r2, [r7, #7]
 80123ae:	79fb      	ldrb	r3, [r7, #7]
 80123b0:	4912      	ldr	r1, [pc, #72]	@ (80123fc <BSP_COM_Init+0x6c>)
 80123b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80123b6:	4912      	ldr	r1, [pc, #72]	@ (8012400 <BSP_COM_Init+0x70>)
 80123b8:	2094      	movs	r0, #148	@ 0x94
 80123ba:	fb00 f303 	mul.w	r3, r0, r3
 80123be:	440b      	add	r3, r1
 80123c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	2294      	movs	r2, #148	@ 0x94
 80123c6:	fb02 f303 	mul.w	r3, r2, r3
 80123ca:	4a0d      	ldr	r2, [pc, #52]	@ (8012400 <BSP_COM_Init+0x70>)
 80123cc:	4413      	add	r3, r2
 80123ce:	4618      	mov	r0, r3
 80123d0:	f000 f86a 	bl	80124a8 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80123d4:	79fb      	ldrb	r3, [r7, #7]
 80123d6:	2294      	movs	r2, #148	@ 0x94
 80123d8:	fb02 f303 	mul.w	r3, r2, r3
 80123dc:	4a08      	ldr	r2, [pc, #32]	@ (8012400 <BSP_COM_Init+0x70>)
 80123de:	4413      	add	r3, r2
 80123e0:	4618      	mov	r0, r3
 80123e2:	f000 f80f 	bl	8012404 <MX_USART1_UART_Init>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80123ec:	f06f 0303 	mvn.w	r3, #3
 80123f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80123f2:	68fb      	ldr	r3, [r7, #12]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3710      	adds	r7, #16
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	20000078 	.word	0x20000078
 8012400:	20007484 	.word	0x20007484

08012404 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801240c:	2300      	movs	r3, #0
 801240e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	4a24      	ldr	r2, [pc, #144]	@ (80124a4 <MX_USART1_UART_Init+0xa0>)
 8012414:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801241c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012424:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	220c      	movs	r2, #12
 8012436:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2200      	movs	r2, #0
 8012442:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2200      	movs	r2, #0
 8012448:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f003 fa39 	bl	80158ce <HAL_UART_Init>
 801245c:	4603      	mov	r3, r0
 801245e:	2b00      	cmp	r3, #0
 8012460:	d001      	beq.n	8012466 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 8012462:	2301      	movs	r3, #1
 8012464:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012466:	2100      	movs	r1, #0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f003 ff0b 	bl	8016284 <HAL_UARTEx_SetTxFifoThreshold>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d001      	beq.n	8012478 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8012474:	2301      	movs	r3, #1
 8012476:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012478:	2100      	movs	r1, #0
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f003 ff40 	bl	8016300 <HAL_UARTEx_SetRxFifoThreshold>
 8012480:	4603      	mov	r3, r0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8012486:	2301      	movs	r3, #1
 8012488:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f003 fec1 	bl	8016212 <HAL_UARTEx_DisableFifoMode>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d001      	beq.n	801249a <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8012496:	2301      	movs	r3, #1
 8012498:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801249a:	7bfb      	ldrb	r3, [r7, #15]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	40013800 	.word	0x40013800

080124a8 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b09c      	sub	sp, #112	@ 0x70
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80124b0:	f107 030c 	add.w	r3, r7, #12
 80124b4:	2250      	movs	r2, #80	@ 0x50
 80124b6:	2100      	movs	r1, #0
 80124b8:	4618      	mov	r0, r3
 80124ba:	f004 fbe3 	bl	8016c84 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80124be:	2301      	movs	r3, #1
 80124c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80124c2:	2300      	movs	r3, #0
 80124c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80124c6:	f107 030c 	add.w	r3, r7, #12
 80124ca:	4618      	mov	r0, r3
 80124cc:	f002 ff52 	bl	8015374 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80124d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80124d4:	f7ff feb5 	bl	8012242 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80124d8:	2002      	movs	r0, #2
 80124da:	f7ff fe99 	bl	8012210 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80124de:	2340      	movs	r3, #64	@ 0x40
 80124e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124e2:	2302      	movs	r3, #2
 80124e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80124e6:	2301      	movs	r3, #1
 80124e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124ea:	2300      	movs	r3, #0
 80124ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80124ee:	2307      	movs	r3, #7
 80124f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80124f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80124f6:	4619      	mov	r1, r3
 80124f8:	480b      	ldr	r0, [pc, #44]	@ (8012528 <USART1_MspInit+0x80>)
 80124fa:	f000 fa2d 	bl	8012958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80124fe:	2380      	movs	r3, #128	@ 0x80
 8012500:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012502:	2302      	movs	r3, #2
 8012504:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012506:	2301      	movs	r3, #1
 8012508:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801250a:	2300      	movs	r3, #0
 801250c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 801250e:	2307      	movs	r3, #7
 8012510:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8012512:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012516:	4619      	mov	r1, r3
 8012518:	4803      	ldr	r0, [pc, #12]	@ (8012528 <USART1_MspInit+0x80>)
 801251a:	f000 fa1d 	bl	8012958 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 801251e:	bf00      	nop
 8012520:	3770      	adds	r7, #112	@ 0x70
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	48000400 	.word	0x48000400

0801252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012536:	4b0c      	ldr	r3, [pc, #48]	@ (8012568 <HAL_Init+0x3c>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a0b      	ldr	r2, [pc, #44]	@ (8012568 <HAL_Init+0x3c>)
 801253c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012540:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012542:	2003      	movs	r0, #3
 8012544:	f000 f96c 	bl	8012820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012548:	2000      	movs	r0, #0
 801254a:	f000 f80f 	bl	801256c <HAL_InitTick>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	d002      	beq.n	801255a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8012554:	2301      	movs	r3, #1
 8012556:	71fb      	strb	r3, [r7, #7]
 8012558:	e001      	b.n	801255e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801255a:	f7ee f9fb 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801255e:	79fb      	ldrb	r3, [r7, #7]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	58004000 	.word	0x58004000

0801256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8012578:	4b17      	ldr	r3, [pc, #92]	@ (80125d8 <HAL_InitTick+0x6c>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d024      	beq.n	80125ca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8012580:	f002 fc58 	bl	8014e34 <HAL_RCC_GetHCLKFreq>
 8012584:	4602      	mov	r2, r0
 8012586:	4b14      	ldr	r3, [pc, #80]	@ (80125d8 <HAL_InitTick+0x6c>)
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	4619      	mov	r1, r3
 801258c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012590:	fbb3 f3f1 	udiv	r3, r3, r1
 8012594:	fbb2 f3f3 	udiv	r3, r2, r3
 8012598:	4618      	mov	r0, r3
 801259a:	f000 f974 	bl	8012886 <HAL_SYSTICK_Config>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10f      	bne.n	80125c4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2b0f      	cmp	r3, #15
 80125a8:	d809      	bhi.n	80125be <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80125aa:	2200      	movs	r2, #0
 80125ac:	6879      	ldr	r1, [r7, #4]
 80125ae:	f04f 30ff 	mov.w	r0, #4294967295
 80125b2:	f000 f940 	bl	8012836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80125b6:	4a09      	ldr	r2, [pc, #36]	@ (80125dc <HAL_InitTick+0x70>)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	e007      	b.n	80125ce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	73fb      	strb	r3, [r7, #15]
 80125c2:	e004      	b.n	80125ce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80125c4:	2301      	movs	r3, #1
 80125c6:	73fb      	strb	r3, [r7, #15]
 80125c8:	e001      	b.n	80125ce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80125ca:	2301      	movs	r3, #1
 80125cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80125ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3710      	adds	r7, #16
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	20000080 	.word	0x20000080
 80125dc:	2000007c 	.word	0x2000007c

080125e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80125e0:	b480      	push	{r7}
 80125e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80125e4:	4b06      	ldr	r3, [pc, #24]	@ (8012600 <HAL_IncTick+0x20>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	461a      	mov	r2, r3
 80125ea:	4b06      	ldr	r3, [pc, #24]	@ (8012604 <HAL_IncTick+0x24>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4413      	add	r3, r2
 80125f0:	4a04      	ldr	r2, [pc, #16]	@ (8012604 <HAL_IncTick+0x24>)
 80125f2:	6013      	str	r3, [r2, #0]
}
 80125f4:	bf00      	nop
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	20000080 	.word	0x20000080
 8012604:	20007518 	.word	0x20007518

08012608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
  return uwTick;
 801260c:	4b03      	ldr	r3, [pc, #12]	@ (801261c <HAL_GetTick+0x14>)
 801260e:	681b      	ldr	r3, [r3, #0]
}
 8012610:	4618      	mov	r0, r3
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	20007518 	.word	0x20007518

08012620 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8012620:	b480      	push	{r7}
 8012622:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8012624:	4b03      	ldr	r3, [pc, #12]	@ (8012634 <HAL_GetTickPrio+0x14>)
 8012626:	681b      	ldr	r3, [r3, #0]
}
 8012628:	4618      	mov	r0, r3
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	2000007c 	.word	0x2000007c

08012638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b084      	sub	sp, #16
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012640:	f7ff ffe2 	bl	8012608 <HAL_GetTick>
 8012644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012650:	d005      	beq.n	801265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012652:	4b0a      	ldr	r3, [pc, #40]	@ (801267c <HAL_Delay+0x44>)
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	461a      	mov	r2, r3
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	4413      	add	r3, r2
 801265c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801265e:	bf00      	nop
 8012660:	f7ff ffd2 	bl	8012608 <HAL_GetTick>
 8012664:	4602      	mov	r2, r0
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	1ad3      	subs	r3, r2, r3
 801266a:	68fa      	ldr	r2, [r7, #12]
 801266c:	429a      	cmp	r2, r3
 801266e:	d8f7      	bhi.n	8012660 <HAL_Delay+0x28>
  {
  }
}
 8012670:	bf00      	nop
 8012672:	bf00      	nop
 8012674:	3710      	adds	r7, #16
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	20000080 	.word	0x20000080

08012680 <__NVIC_SetPriorityGrouping>:
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f003 0307 	and.w	r3, r3, #7
 801268e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012690:	4b0c      	ldr	r3, [pc, #48]	@ (80126c4 <__NVIC_SetPriorityGrouping+0x44>)
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012696:	68ba      	ldr	r2, [r7, #8]
 8012698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801269c:	4013      	ands	r3, r2
 801269e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80126a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80126ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80126b2:	4a04      	ldr	r2, [pc, #16]	@ (80126c4 <__NVIC_SetPriorityGrouping+0x44>)
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	60d3      	str	r3, [r2, #12]
}
 80126b8:	bf00      	nop
 80126ba:	3714      	adds	r7, #20
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr
 80126c4:	e000ed00 	.word	0xe000ed00

080126c8 <__NVIC_GetPriorityGrouping>:
{
 80126c8:	b480      	push	{r7}
 80126ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80126cc:	4b04      	ldr	r3, [pc, #16]	@ (80126e0 <__NVIC_GetPriorityGrouping+0x18>)
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	0a1b      	lsrs	r3, r3, #8
 80126d2:	f003 0307 	and.w	r3, r3, #7
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr
 80126e0:	e000ed00 	.word	0xe000ed00

080126e4 <__NVIC_EnableIRQ>:
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4603      	mov	r3, r0
 80126ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	db0b      	blt.n	801270e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126f6:	79fb      	ldrb	r3, [r7, #7]
 80126f8:	f003 021f 	and.w	r2, r3, #31
 80126fc:	4907      	ldr	r1, [pc, #28]	@ (801271c <__NVIC_EnableIRQ+0x38>)
 80126fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012702:	095b      	lsrs	r3, r3, #5
 8012704:	2001      	movs	r0, #1
 8012706:	fa00 f202 	lsl.w	r2, r0, r2
 801270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801270e:	bf00      	nop
 8012710:	370c      	adds	r7, #12
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	e000e100 	.word	0xe000e100

08012720 <__NVIC_SetPriority>:
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	4603      	mov	r3, r0
 8012728:	6039      	str	r1, [r7, #0]
 801272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012730:	2b00      	cmp	r3, #0
 8012732:	db0a      	blt.n	801274a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	b2da      	uxtb	r2, r3
 8012738:	490c      	ldr	r1, [pc, #48]	@ (801276c <__NVIC_SetPriority+0x4c>)
 801273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801273e:	0112      	lsls	r2, r2, #4
 8012740:	b2d2      	uxtb	r2, r2
 8012742:	440b      	add	r3, r1
 8012744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012748:	e00a      	b.n	8012760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	b2da      	uxtb	r2, r3
 801274e:	4908      	ldr	r1, [pc, #32]	@ (8012770 <__NVIC_SetPriority+0x50>)
 8012750:	79fb      	ldrb	r3, [r7, #7]
 8012752:	f003 030f 	and.w	r3, r3, #15
 8012756:	3b04      	subs	r3, #4
 8012758:	0112      	lsls	r2, r2, #4
 801275a:	b2d2      	uxtb	r2, r2
 801275c:	440b      	add	r3, r1
 801275e:	761a      	strb	r2, [r3, #24]
}
 8012760:	bf00      	nop
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	e000e100 	.word	0xe000e100
 8012770:	e000ed00 	.word	0xe000ed00

08012774 <NVIC_EncodePriority>:
{
 8012774:	b480      	push	{r7}
 8012776:	b089      	sub	sp, #36	@ 0x24
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f003 0307 	and.w	r3, r3, #7
 8012786:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	f1c3 0307 	rsb	r3, r3, #7
 801278e:	2b04      	cmp	r3, #4
 8012790:	bf28      	it	cs
 8012792:	2304      	movcs	r3, #4
 8012794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	3304      	adds	r3, #4
 801279a:	2b06      	cmp	r3, #6
 801279c:	d902      	bls.n	80127a4 <NVIC_EncodePriority+0x30>
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	3b03      	subs	r3, #3
 80127a2:	e000      	b.n	80127a6 <NVIC_EncodePriority+0x32>
 80127a4:	2300      	movs	r3, #0
 80127a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80127a8:	f04f 32ff 	mov.w	r2, #4294967295
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	fa02 f303 	lsl.w	r3, r2, r3
 80127b2:	43da      	mvns	r2, r3
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	401a      	ands	r2, r3
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80127bc:	f04f 31ff 	mov.w	r1, #4294967295
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	fa01 f303 	lsl.w	r3, r1, r3
 80127c6:	43d9      	mvns	r1, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80127cc:	4313      	orrs	r3, r2
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3724      	adds	r7, #36	@ 0x24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
	...

080127dc <SysTick_Config>:
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	3b01      	subs	r3, #1
 80127e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80127ec:	d301      	bcc.n	80127f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80127ee:	2301      	movs	r3, #1
 80127f0:	e00f      	b.n	8012812 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80127f2:	4a0a      	ldr	r2, [pc, #40]	@ (801281c <SysTick_Config+0x40>)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	3b01      	subs	r3, #1
 80127f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80127fa:	210f      	movs	r1, #15
 80127fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012800:	f7ff ff8e 	bl	8012720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012804:	4b05      	ldr	r3, [pc, #20]	@ (801281c <SysTick_Config+0x40>)
 8012806:	2200      	movs	r2, #0
 8012808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801280a:	4b04      	ldr	r3, [pc, #16]	@ (801281c <SysTick_Config+0x40>)
 801280c:	2207      	movs	r2, #7
 801280e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3708      	adds	r7, #8
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	e000e010 	.word	0xe000e010

08012820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ff ff29 	bl	8012680 <__NVIC_SetPriorityGrouping>
}
 801282e:	bf00      	nop
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b086      	sub	sp, #24
 801283a:	af00      	add	r7, sp, #0
 801283c:	4603      	mov	r3, r0
 801283e:	60b9      	str	r1, [r7, #8]
 8012840:	607a      	str	r2, [r7, #4]
 8012842:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012844:	f7ff ff40 	bl	80126c8 <__NVIC_GetPriorityGrouping>
 8012848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	68b9      	ldr	r1, [r7, #8]
 801284e:	6978      	ldr	r0, [r7, #20]
 8012850:	f7ff ff90 	bl	8012774 <NVIC_EncodePriority>
 8012854:	4602      	mov	r2, r0
 8012856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801285a:	4611      	mov	r1, r2
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff ff5f 	bl	8012720 <__NVIC_SetPriority>
}
 8012862:	bf00      	nop
 8012864:	3718      	adds	r7, #24
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b082      	sub	sp, #8
 801286e:	af00      	add	r7, sp, #0
 8012870:	4603      	mov	r3, r0
 8012872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff ff33 	bl	80126e4 <__NVIC_EnableIRQ>
}
 801287e:	bf00      	nop
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}

08012886 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012886:	b580      	push	{r7, lr}
 8012888:	b082      	sub	sp, #8
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7ff ffa4 	bl	80127dc <SysTick_Config>
 8012894:	4603      	mov	r3, r0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 801289e:	b480      	push	{r7}
 80128a0:	b087      	sub	sp, #28
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	60f8      	str	r0, [r7, #12]
 80128a6:	460b      	mov	r3, r1
 80128a8:	607a      	str	r2, [r7, #4]
 80128aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80128ac:	2300      	movs	r3, #0
 80128ae:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d103      	bne.n	80128be <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	605a      	str	r2, [r3, #4]
      break;
 80128bc:	e002      	b.n	80128c4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80128be:	2301      	movs	r3, #1
 80128c0:	75fb      	strb	r3, [r7, #23]
      break;
 80128c2:	bf00      	nop
  }

  return status;
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	371c      	adds	r7, #28
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80128d2:	b480      	push	{r7}
 80128d4:	b083      	sub	sp, #12
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d101      	bne.n	80128e6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80128e2:	2301      	movs	r3, #1
 80128e4:	e003      	b.n	80128ee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	683a      	ldr	r2, [r7, #0]
 80128ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80128ec:	2300      	movs	r3, #0
  }
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr

080128fa <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b086      	sub	sp, #24
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	0c1b      	lsrs	r3, r3, #16
 8012908:	f003 0301 	and.w	r3, r3, #1
 801290c:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f003 031f 	and.w	r3, r3, #31
 8012916:	2201      	movs	r2, #1
 8012918:	fa02 f303 	lsl.w	r3, r2, r3
 801291c:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	015b      	lsls	r3, r3, #5
 8012922:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8012926:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 801292a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	693a      	ldr	r2, [r7, #16]
 8012932:	4013      	ands	r3, r2
 8012934:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d009      	beq.n	8012950 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	693a      	ldr	r2, [r7, #16]
 8012940:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d002      	beq.n	8012950 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	4798      	blx	r3
    }
  }
}
 8012950:	bf00      	nop
 8012952:	3718      	adds	r7, #24
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012958:	b480      	push	{r7}
 801295a:	b087      	sub	sp, #28
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012962:	2300      	movs	r3, #0
 8012964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012966:	e14c      	b.n	8012c02 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	2101      	movs	r1, #1
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	fa01 f303 	lsl.w	r3, r1, r3
 8012974:	4013      	ands	r3, r2
 8012976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 813e 	beq.w	8012bfc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	f003 0303 	and.w	r3, r3, #3
 8012988:	2b01      	cmp	r3, #1
 801298a:	d005      	beq.n	8012998 <HAL_GPIO_Init+0x40>
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	f003 0303 	and.w	r3, r3, #3
 8012994:	2b02      	cmp	r3, #2
 8012996:	d130      	bne.n	80129fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	689b      	ldr	r3, [r3, #8]
 801299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	2203      	movs	r2, #3
 80129a4:	fa02 f303 	lsl.w	r3, r2, r3
 80129a8:	43db      	mvns	r3, r3
 80129aa:	693a      	ldr	r2, [r7, #16]
 80129ac:	4013      	ands	r3, r2
 80129ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	68da      	ldr	r2, [r3, #12]
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	fa02 f303 	lsl.w	r3, r2, r3
 80129bc:	693a      	ldr	r2, [r7, #16]
 80129be:	4313      	orrs	r3, r2
 80129c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	693a      	ldr	r2, [r7, #16]
 80129c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80129ce:	2201      	movs	r2, #1
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	fa02 f303 	lsl.w	r3, r2, r3
 80129d6:	43db      	mvns	r3, r3
 80129d8:	693a      	ldr	r2, [r7, #16]
 80129da:	4013      	ands	r3, r2
 80129dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	091b      	lsrs	r3, r3, #4
 80129e4:	f003 0201 	and.w	r2, r3, #1
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	fa02 f303 	lsl.w	r3, r2, r3
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	4313      	orrs	r3, r2
 80129f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	693a      	ldr	r2, [r7, #16]
 80129f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	f003 0303 	and.w	r3, r3, #3
 8012a02:	2b03      	cmp	r3, #3
 8012a04:	d017      	beq.n	8012a36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	005b      	lsls	r3, r3, #1
 8012a10:	2203      	movs	r2, #3
 8012a12:	fa02 f303 	lsl.w	r3, r2, r3
 8012a16:	43db      	mvns	r3, r3
 8012a18:	693a      	ldr	r2, [r7, #16]
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	689a      	ldr	r2, [r3, #8]
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	fa02 f303 	lsl.w	r3, r2, r3
 8012a2a:	693a      	ldr	r2, [r7, #16]
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	693a      	ldr	r2, [r7, #16]
 8012a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	f003 0303 	and.w	r3, r3, #3
 8012a3e:	2b02      	cmp	r3, #2
 8012a40:	d123      	bne.n	8012a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	08da      	lsrs	r2, r3, #3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3208      	adds	r2, #8
 8012a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	f003 0307 	and.w	r3, r3, #7
 8012a56:	009b      	lsls	r3, r3, #2
 8012a58:	220f      	movs	r2, #15
 8012a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a5e:	43db      	mvns	r3, r3
 8012a60:	693a      	ldr	r2, [r7, #16]
 8012a62:	4013      	ands	r3, r2
 8012a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	691a      	ldr	r2, [r3, #16]
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	f003 0307 	and.w	r3, r3, #7
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	fa02 f303 	lsl.w	r3, r2, r3
 8012a76:	693a      	ldr	r2, [r7, #16]
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	08da      	lsrs	r2, r3, #3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	3208      	adds	r2, #8
 8012a84:	6939      	ldr	r1, [r7, #16]
 8012a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	005b      	lsls	r3, r3, #1
 8012a94:	2203      	movs	r2, #3
 8012a96:	fa02 f303 	lsl.w	r3, r2, r3
 8012a9a:	43db      	mvns	r3, r3
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	4013      	ands	r3, r2
 8012aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	f003 0203 	and.w	r2, r3, #3
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	005b      	lsls	r3, r3, #1
 8012aae:	fa02 f303 	lsl.w	r3, r2, r3
 8012ab2:	693a      	ldr	r2, [r7, #16]
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	693a      	ldr	r2, [r7, #16]
 8012abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 8098 	beq.w	8012bfc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8012acc:	4a54      	ldr	r2, [pc, #336]	@ (8012c20 <HAL_GPIO_Init+0x2c8>)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	089b      	lsrs	r3, r3, #2
 8012ad2:	3302      	adds	r3, #2
 8012ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f003 0303 	and.w	r3, r3, #3
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	220f      	movs	r2, #15
 8012ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ae8:	43db      	mvns	r3, r3
 8012aea:	693a      	ldr	r2, [r7, #16]
 8012aec:	4013      	ands	r3, r2
 8012aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012af6:	d019      	beq.n	8012b2c <HAL_GPIO_Init+0x1d4>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4a4a      	ldr	r2, [pc, #296]	@ (8012c24 <HAL_GPIO_Init+0x2cc>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d013      	beq.n	8012b28 <HAL_GPIO_Init+0x1d0>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a49      	ldr	r2, [pc, #292]	@ (8012c28 <HAL_GPIO_Init+0x2d0>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d00d      	beq.n	8012b24 <HAL_GPIO_Init+0x1cc>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4a48      	ldr	r2, [pc, #288]	@ (8012c2c <HAL_GPIO_Init+0x2d4>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d007      	beq.n	8012b20 <HAL_GPIO_Init+0x1c8>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4a47      	ldr	r2, [pc, #284]	@ (8012c30 <HAL_GPIO_Init+0x2d8>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d101      	bne.n	8012b1c <HAL_GPIO_Init+0x1c4>
 8012b18:	2304      	movs	r3, #4
 8012b1a:	e008      	b.n	8012b2e <HAL_GPIO_Init+0x1d6>
 8012b1c:	2307      	movs	r3, #7
 8012b1e:	e006      	b.n	8012b2e <HAL_GPIO_Init+0x1d6>
 8012b20:	2303      	movs	r3, #3
 8012b22:	e004      	b.n	8012b2e <HAL_GPIO_Init+0x1d6>
 8012b24:	2302      	movs	r3, #2
 8012b26:	e002      	b.n	8012b2e <HAL_GPIO_Init+0x1d6>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e000      	b.n	8012b2e <HAL_GPIO_Init+0x1d6>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	f002 0203 	and.w	r2, r2, #3
 8012b34:	0092      	lsls	r2, r2, #2
 8012b36:	4093      	lsls	r3, r2
 8012b38:	693a      	ldr	r2, [r7, #16]
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012b3e:	4938      	ldr	r1, [pc, #224]	@ (8012c20 <HAL_GPIO_Init+0x2c8>)
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	089b      	lsrs	r3, r3, #2
 8012b44:	3302      	adds	r3, #2
 8012b46:	693a      	ldr	r2, [r7, #16]
 8012b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012b4c:	4b39      	ldr	r3, [pc, #228]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	43db      	mvns	r3, r3
 8012b56:	693a      	ldr	r2, [r7, #16]
 8012b58:	4013      	ands	r3, r2
 8012b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d003      	beq.n	8012b70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8012b68:	693a      	ldr	r2, [r7, #16]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012b70:	4a30      	ldr	r2, [pc, #192]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8012b76:	4b2f      	ldr	r3, [pc, #188]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	43db      	mvns	r3, r3
 8012b80:	693a      	ldr	r2, [r7, #16]
 8012b82:	4013      	ands	r3, r2
 8012b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d003      	beq.n	8012b9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8012b92:	693a      	ldr	r2, [r7, #16]
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8012b9a:	4a26      	ldr	r2, [pc, #152]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012ba0:	4b24      	ldr	r3, [pc, #144]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	43db      	mvns	r3, r3
 8012bac:	693a      	ldr	r2, [r7, #16]
 8012bae:	4013      	ands	r3, r2
 8012bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d003      	beq.n	8012bc6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8012bbe:	693a      	ldr	r2, [r7, #16]
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8012bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8012bce:	4b19      	ldr	r3, [pc, #100]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	43db      	mvns	r3, r3
 8012bda:	693a      	ldr	r2, [r7, #16]
 8012bdc:	4013      	ands	r3, r2
 8012bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d003      	beq.n	8012bf4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8012bec:	693a      	ldr	r2, [r7, #16]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8012bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8012c34 <HAL_GPIO_Init+0x2dc>)
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	fa22 f303 	lsr.w	r3, r2, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f47f aeab 	bne.w	8012968 <HAL_GPIO_Init+0x10>
  }
}
 8012c12:	bf00      	nop
 8012c14:	bf00      	nop
 8012c16:	371c      	adds	r7, #28
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr
 8012c20:	40010000 	.word	0x40010000
 8012c24:	48000400 	.word	0x48000400
 8012c28:	48000800 	.word	0x48000800
 8012c2c:	48000c00 	.word	0x48000c00
 8012c30:	48001000 	.word	0x48001000
 8012c34:	58000800 	.word	0x58000800

08012c38 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b087      	sub	sp, #28
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012c42:	2300      	movs	r3, #0
 8012c44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8012c46:	e0bb      	b.n	8012dc0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8012c48:	2201      	movs	r2, #1
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8012c50:	683a      	ldr	r2, [r7, #0]
 8012c52:	4013      	ands	r3, r2
 8012c54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f000 80ae 	beq.w	8012dba <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8012c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8012ddc <HAL_GPIO_DeInit+0x1a4>)
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	089b      	lsrs	r3, r3, #2
 8012c64:	3302      	adds	r3, #2
 8012c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	f003 0303 	and.w	r3, r3, #3
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	220f      	movs	r2, #15
 8012c76:	fa02 f303 	lsl.w	r3, r2, r3
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	4013      	ands	r3, r2
 8012c7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012c86:	d019      	beq.n	8012cbc <HAL_GPIO_DeInit+0x84>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4a55      	ldr	r2, [pc, #340]	@ (8012de0 <HAL_GPIO_DeInit+0x1a8>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d013      	beq.n	8012cb8 <HAL_GPIO_DeInit+0x80>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4a54      	ldr	r2, [pc, #336]	@ (8012de4 <HAL_GPIO_DeInit+0x1ac>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d00d      	beq.n	8012cb4 <HAL_GPIO_DeInit+0x7c>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	4a53      	ldr	r2, [pc, #332]	@ (8012de8 <HAL_GPIO_DeInit+0x1b0>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d007      	beq.n	8012cb0 <HAL_GPIO_DeInit+0x78>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	4a52      	ldr	r2, [pc, #328]	@ (8012dec <HAL_GPIO_DeInit+0x1b4>)
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d101      	bne.n	8012cac <HAL_GPIO_DeInit+0x74>
 8012ca8:	2304      	movs	r3, #4
 8012caa:	e008      	b.n	8012cbe <HAL_GPIO_DeInit+0x86>
 8012cac:	2307      	movs	r3, #7
 8012cae:	e006      	b.n	8012cbe <HAL_GPIO_DeInit+0x86>
 8012cb0:	2303      	movs	r3, #3
 8012cb2:	e004      	b.n	8012cbe <HAL_GPIO_DeInit+0x86>
 8012cb4:	2302      	movs	r3, #2
 8012cb6:	e002      	b.n	8012cbe <HAL_GPIO_DeInit+0x86>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e000      	b.n	8012cbe <HAL_GPIO_DeInit+0x86>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	f002 0203 	and.w	r2, r2, #3
 8012cc4:	0092      	lsls	r2, r2, #2
 8012cc6:	4093      	lsls	r3, r2
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d136      	bne.n	8012d3c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8012cce:	4b48      	ldr	r3, [pc, #288]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012cd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	43db      	mvns	r3, r3
 8012cd8:	4945      	ldr	r1, [pc, #276]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012cda:	4013      	ands	r3, r2
 8012cdc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8012ce0:	4b43      	ldr	r3, [pc, #268]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012ce2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	43db      	mvns	r3, r3
 8012cea:	4941      	ldr	r1, [pc, #260]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012cec:	4013      	ands	r3, r2
 8012cee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8012cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	43db      	mvns	r3, r3
 8012cfa:	493d      	ldr	r1, [pc, #244]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8012d00:	4b3b      	ldr	r3, [pc, #236]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012d02:	685a      	ldr	r2, [r3, #4]
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	43db      	mvns	r3, r3
 8012d08:	4939      	ldr	r1, [pc, #228]	@ (8012df0 <HAL_GPIO_DeInit+0x1b8>)
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	f003 0303 	and.w	r3, r3, #3
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	220f      	movs	r2, #15
 8012d18:	fa02 f303 	lsl.w	r3, r2, r3
 8012d1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8012d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8012ddc <HAL_GPIO_DeInit+0x1a4>)
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	089b      	lsrs	r3, r3, #2
 8012d24:	3302      	adds	r3, #2
 8012d26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	43da      	mvns	r2, r3
 8012d2e:	482b      	ldr	r0, [pc, #172]	@ (8012ddc <HAL_GPIO_DeInit+0x1a4>)
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	089b      	lsrs	r3, r3, #2
 8012d34:	400a      	ands	r2, r1
 8012d36:	3302      	adds	r3, #2
 8012d38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	005b      	lsls	r3, r3, #1
 8012d44:	2103      	movs	r1, #3
 8012d46:	fa01 f303 	lsl.w	r3, r1, r3
 8012d4a:	431a      	orrs	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	08da      	lsrs	r2, r3, #3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3208      	adds	r2, #8
 8012d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	f003 0307 	and.w	r3, r3, #7
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	220f      	movs	r2, #15
 8012d66:	fa02 f303 	lsl.w	r3, r2, r3
 8012d6a:	43db      	mvns	r3, r3
 8012d6c:	697a      	ldr	r2, [r7, #20]
 8012d6e:	08d2      	lsrs	r2, r2, #3
 8012d70:	4019      	ands	r1, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	3208      	adds	r2, #8
 8012d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	68da      	ldr	r2, [r3, #12]
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	005b      	lsls	r3, r3, #1
 8012d82:	2103      	movs	r1, #3
 8012d84:	fa01 f303 	lsl.w	r3, r1, r3
 8012d88:	43db      	mvns	r3, r3
 8012d8a:	401a      	ands	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	685a      	ldr	r2, [r3, #4]
 8012d94:	2101      	movs	r1, #1
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	fa01 f303 	lsl.w	r3, r1, r3
 8012d9c:	43db      	mvns	r3, r3
 8012d9e:	401a      	ands	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	689a      	ldr	r2, [r3, #8]
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	2103      	movs	r1, #3
 8012dae:	fa01 f303 	lsl.w	r3, r1, r3
 8012db2:	43db      	mvns	r3, r3
 8012db4:	401a      	ands	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8012dc0:	683a      	ldr	r2, [r7, #0]
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f47f af3d 	bne.w	8012c48 <HAL_GPIO_DeInit+0x10>
  }
}
 8012dce:	bf00      	nop
 8012dd0:	bf00      	nop
 8012dd2:	371c      	adds	r7, #28
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr
 8012ddc:	40010000 	.word	0x40010000
 8012de0:	48000400 	.word	0x48000400
 8012de4:	48000800 	.word	0x48000800
 8012de8:	48000c00 	.word	0x48000c00
 8012dec:	48001000 	.word	0x48001000
 8012df0:	58000800 	.word	0x58000800

08012df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	807b      	strh	r3, [r7, #2]
 8012e00:	4613      	mov	r3, r2
 8012e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012e04:	787b      	ldrb	r3, [r7, #1]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d003      	beq.n	8012e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012e0a:	887a      	ldrh	r2, [r7, #2]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012e10:	e002      	b.n	8012e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012e12:	887a      	ldrh	r2, [r7, #2]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8012e2e:	4b08      	ldr	r3, [pc, #32]	@ (8012e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012e30:	68da      	ldr	r2, [r3, #12]
 8012e32:	88fb      	ldrh	r3, [r7, #6]
 8012e34:	4013      	ands	r3, r2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d006      	beq.n	8012e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012e3a:	4a05      	ldr	r2, [pc, #20]	@ (8012e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
 8012e3e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012e40:	88fb      	ldrh	r3, [r7, #6]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f003 fcf8 	bl	8016838 <HAL_GPIO_EXTI_Callback>
  }
}
 8012e48:	bf00      	nop
 8012e4a:	3708      	adds	r7, #8
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	58000800 	.word	0x58000800

08012e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012e62:	2301      	movs	r3, #1
 8012e64:	e08d      	b.n	8012f82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 f8b4 	bl	8012fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2224      	movs	r2, #36	@ 0x24
 8012e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f022 0201 	bic.w	r2, r2, #1
 8012e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	685a      	ldr	r2, [r3, #4]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8012ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	689a      	ldr	r2, [r3, #8]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	d107      	bne.n	8012ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	689a      	ldr	r2, [r3, #8]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012eca:	609a      	str	r2, [r3, #8]
 8012ecc:	e006      	b.n	8012edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	689a      	ldr	r2, [r3, #8]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8012eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d108      	bne.n	8012ef6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	685a      	ldr	r2, [r3, #4]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012ef2:	605a      	str	r2, [r3, #4]
 8012ef4:	e007      	b.n	8012f06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	685a      	ldr	r2, [r3, #4]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	6812      	ldr	r2, [r2, #0]
 8012f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	68da      	ldr	r2, [r3, #12]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691a      	ldr	r2, [r3, #16]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	695b      	ldr	r3, [r3, #20]
 8012f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	430a      	orrs	r2, r1
 8012f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	69d9      	ldr	r1, [r3, #28]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6a1a      	ldr	r2, [r3, #32]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	430a      	orrs	r2, r1
 8012f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f042 0201 	orr.w	r2, r2, #1
 8012f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2220      	movs	r2, #32
 8012f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b082      	sub	sp, #8
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e021      	b.n	8012fe0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2224      	movs	r2, #36	@ 0x24
 8012fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f022 0201 	bic.w	r2, r2, #1
 8012fb2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f000 f821 	bl	8012ffc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8012fde:	2300      	movs	r3, #0
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012ff0:	bf00      	nop
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8013004:	bf00      	nop
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b088      	sub	sp, #32
 8013014:	af02      	add	r7, sp, #8
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	607a      	str	r2, [r7, #4]
 801301a:	461a      	mov	r2, r3
 801301c:	460b      	mov	r3, r1
 801301e:	817b      	strh	r3, [r7, #10]
 8013020:	4613      	mov	r3, r2
 8013022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801302a:	b2db      	uxtb	r3, r3
 801302c:	2b20      	cmp	r3, #32
 801302e:	f040 80fd 	bne.w	801322c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013038:	2b01      	cmp	r3, #1
 801303a:	d101      	bne.n	8013040 <HAL_I2C_Master_Transmit+0x30>
 801303c:	2302      	movs	r3, #2
 801303e:	e0f6      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2201      	movs	r2, #1
 8013044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013048:	f7ff fade 	bl	8012608 <HAL_GetTick>
 801304c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	2319      	movs	r3, #25
 8013054:	2201      	movs	r2, #1
 8013056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f000 fa24 	bl	80134a8 <I2C_WaitOnFlagUntilTimeout>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8013066:	2301      	movs	r3, #1
 8013068:	e0e1      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2221      	movs	r2, #33	@ 0x21
 801306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2210      	movs	r2, #16
 8013076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2200      	movs	r2, #0
 801307e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	893a      	ldrh	r2, [r7, #8]
 801308a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2200      	movs	r2, #0
 8013090:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013096:	b29b      	uxth	r3, r3
 8013098:	2bff      	cmp	r3, #255	@ 0xff
 801309a:	d906      	bls.n	80130aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	22ff      	movs	r2, #255	@ 0xff
 80130a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80130a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80130a6:	617b      	str	r3, [r7, #20]
 80130a8:	e007      	b.n	80130ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80130b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80130b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d024      	beq.n	801310c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130c6:	781a      	ldrb	r2, [r3, #0]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130dc:	b29b      	uxth	r3, r3
 80130de:	3b01      	subs	r3, #1
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ea:	3b01      	subs	r3, #1
 80130ec:	b29a      	uxth	r2, r3
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	3301      	adds	r3, #1
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	8979      	ldrh	r1, [r7, #10]
 80130fe:	4b4e      	ldr	r3, [pc, #312]	@ (8013238 <HAL_I2C_Master_Transmit+0x228>)
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f000 fc1f 	bl	8013948 <I2C_TransferConfig>
 801310a:	e066      	b.n	80131da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013110:	b2da      	uxtb	r2, r3
 8013112:	8979      	ldrh	r1, [r7, #10]
 8013114:	4b48      	ldr	r3, [pc, #288]	@ (8013238 <HAL_I2C_Master_Transmit+0x228>)
 8013116:	9300      	str	r3, [sp, #0]
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f000 fc14 	bl	8013948 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8013120:	e05b      	b.n	80131da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013122:	693a      	ldr	r2, [r7, #16]
 8013124:	6a39      	ldr	r1, [r7, #32]
 8013126:	68f8      	ldr	r0, [r7, #12]
 8013128:	f000 fa17 	bl	801355a <I2C_WaitOnTXISFlagUntilTimeout>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d001      	beq.n	8013136 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8013132:	2301      	movs	r3, #1
 8013134:	e07b      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801313a:	781a      	ldrb	r2, [r3, #0]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013146:	1c5a      	adds	r2, r3, #1
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013150:	b29b      	uxth	r3, r3
 8013152:	3b01      	subs	r3, #1
 8013154:	b29a      	uxth	r2, r3
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801315e:	3b01      	subs	r3, #1
 8013160:	b29a      	uxth	r2, r3
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801316a:	b29b      	uxth	r3, r3
 801316c:	2b00      	cmp	r3, #0
 801316e:	d034      	beq.n	80131da <HAL_I2C_Master_Transmit+0x1ca>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013174:	2b00      	cmp	r3, #0
 8013176:	d130      	bne.n	80131da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	6a3b      	ldr	r3, [r7, #32]
 801317e:	2200      	movs	r2, #0
 8013180:	2180      	movs	r1, #128	@ 0x80
 8013182:	68f8      	ldr	r0, [r7, #12]
 8013184:	f000 f990 	bl	80134a8 <I2C_WaitOnFlagUntilTimeout>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 801318e:	2301      	movs	r3, #1
 8013190:	e04d      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013196:	b29b      	uxth	r3, r3
 8013198:	2bff      	cmp	r3, #255	@ 0xff
 801319a:	d90e      	bls.n	80131ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	22ff      	movs	r2, #255	@ 0xff
 80131a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131a6:	b2da      	uxtb	r2, r3
 80131a8:	8979      	ldrh	r1, [r7, #10]
 80131aa:	2300      	movs	r3, #0
 80131ac:	9300      	str	r3, [sp, #0]
 80131ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80131b2:	68f8      	ldr	r0, [r7, #12]
 80131b4:	f000 fbc8 	bl	8013948 <I2C_TransferConfig>
 80131b8:	e00f      	b.n	80131da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131be:	b29a      	uxth	r2, r3
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131c8:	b2da      	uxtb	r2, r3
 80131ca:	8979      	ldrh	r1, [r7, #10]
 80131cc:	2300      	movs	r3, #0
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80131d4:	68f8      	ldr	r0, [r7, #12]
 80131d6:	f000 fbb7 	bl	8013948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131de:	b29b      	uxth	r3, r3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d19e      	bne.n	8013122 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80131e4:	693a      	ldr	r2, [r7, #16]
 80131e6:	6a39      	ldr	r1, [r7, #32]
 80131e8:	68f8      	ldr	r0, [r7, #12]
 80131ea:	f000 f9fd 	bl	80135e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d001      	beq.n	80131f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80131f4:	2301      	movs	r3, #1
 80131f6:	e01a      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2220      	movs	r2, #32
 80131fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	6859      	ldr	r1, [r3, #4]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	4b0c      	ldr	r3, [pc, #48]	@ (801323c <HAL_I2C_Master_Transmit+0x22c>)
 801320c:	400b      	ands	r3, r1
 801320e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2220      	movs	r2, #32
 8013214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2200      	movs	r2, #0
 801321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2200      	movs	r2, #0
 8013224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013228:	2300      	movs	r3, #0
 801322a:	e000      	b.n	801322e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 801322c:	2302      	movs	r3, #2
  }
}
 801322e:	4618      	mov	r0, r3
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	80002000 	.word	0x80002000
 801323c:	fe00e800 	.word	0xfe00e800

08013240 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b088      	sub	sp, #32
 8013244:	af02      	add	r7, sp, #8
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	607a      	str	r2, [r7, #4]
 801324a:	461a      	mov	r2, r3
 801324c:	460b      	mov	r3, r1
 801324e:	817b      	strh	r3, [r7, #10]
 8013250:	4613      	mov	r3, r2
 8013252:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801325a:	b2db      	uxtb	r3, r3
 801325c:	2b20      	cmp	r3, #32
 801325e:	f040 80db 	bne.w	8013418 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013268:	2b01      	cmp	r3, #1
 801326a:	d101      	bne.n	8013270 <HAL_I2C_Master_Receive+0x30>
 801326c:	2302      	movs	r3, #2
 801326e:	e0d4      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2201      	movs	r2, #1
 8013274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013278:	f7ff f9c6 	bl	8012608 <HAL_GetTick>
 801327c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	9300      	str	r3, [sp, #0]
 8013282:	2319      	movs	r3, #25
 8013284:	2201      	movs	r2, #1
 8013286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f000 f90c 	bl	80134a8 <I2C_WaitOnFlagUntilTimeout>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d001      	beq.n	801329a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8013296:	2301      	movs	r3, #1
 8013298:	e0bf      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	2222      	movs	r2, #34	@ 0x22
 801329e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	2210      	movs	r2, #16
 80132a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	893a      	ldrh	r2, [r7, #8]
 80132ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2200      	movs	r2, #0
 80132c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	2bff      	cmp	r3, #255	@ 0xff
 80132ca:	d90e      	bls.n	80132ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	22ff      	movs	r2, #255	@ 0xff
 80132d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132d6:	b2da      	uxtb	r2, r3
 80132d8:	8979      	ldrh	r1, [r7, #10]
 80132da:	4b52      	ldr	r3, [pc, #328]	@ (8013424 <HAL_I2C_Master_Receive+0x1e4>)
 80132dc:	9300      	str	r3, [sp, #0]
 80132de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	f000 fb30 	bl	8013948 <I2C_TransferConfig>
 80132e8:	e06d      	b.n	80133c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132f8:	b2da      	uxtb	r2, r3
 80132fa:	8979      	ldrh	r1, [r7, #10]
 80132fc:	4b49      	ldr	r3, [pc, #292]	@ (8013424 <HAL_I2C_Master_Receive+0x1e4>)
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f000 fb1f 	bl	8013948 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801330a:	e05c      	b.n	80133c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801330c:	697a      	ldr	r2, [r7, #20]
 801330e:	6a39      	ldr	r1, [r7, #32]
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f000 f9ad 	bl	8013670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d001      	beq.n	8013320 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801331c:	2301      	movs	r3, #1
 801331e:	e07c      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801332a:	b2d2      	uxtb	r2, r2
 801332c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801333c:	3b01      	subs	r3, #1
 801333e:	b29a      	uxth	r2, r3
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013348:	b29b      	uxth	r3, r3
 801334a:	3b01      	subs	r3, #1
 801334c:	b29a      	uxth	r2, r3
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013356:	b29b      	uxth	r3, r3
 8013358:	2b00      	cmp	r3, #0
 801335a:	d034      	beq.n	80133c6 <HAL_I2C_Master_Receive+0x186>
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013360:	2b00      	cmp	r3, #0
 8013362:	d130      	bne.n	80133c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	9300      	str	r3, [sp, #0]
 8013368:	6a3b      	ldr	r3, [r7, #32]
 801336a:	2200      	movs	r2, #0
 801336c:	2180      	movs	r1, #128	@ 0x80
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f000 f89a 	bl	80134a8 <I2C_WaitOnFlagUntilTimeout>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801337a:	2301      	movs	r3, #1
 801337c:	e04d      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013382:	b29b      	uxth	r3, r3
 8013384:	2bff      	cmp	r3, #255	@ 0xff
 8013386:	d90e      	bls.n	80133a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	22ff      	movs	r2, #255	@ 0xff
 801338c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013392:	b2da      	uxtb	r2, r3
 8013394:	8979      	ldrh	r1, [r7, #10]
 8013396:	2300      	movs	r3, #0
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f000 fad2 	bl	8013948 <I2C_TransferConfig>
 80133a4:	e00f      	b.n	80133c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133b4:	b2da      	uxtb	r2, r3
 80133b6:	8979      	ldrh	r1, [r7, #10]
 80133b8:	2300      	movs	r3, #0
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	f000 fac1 	bl	8013948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d19d      	bne.n	801330c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80133d0:	697a      	ldr	r2, [r7, #20]
 80133d2:	6a39      	ldr	r1, [r7, #32]
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f000 f907 	bl	80135e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80133e0:	2301      	movs	r3, #1
 80133e2:	e01a      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2220      	movs	r2, #32
 80133ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	6859      	ldr	r1, [r3, #4]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013428 <HAL_I2C_Master_Receive+0x1e8>)
 80133f8:	400b      	ands	r3, r1
 80133fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2220      	movs	r2, #32
 8013400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2200      	movs	r2, #0
 8013408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2200      	movs	r2, #0
 8013410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013414:	2300      	movs	r3, #0
 8013416:	e000      	b.n	801341a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8013418:	2302      	movs	r3, #2
  }
}
 801341a:	4618      	mov	r0, r3
 801341c:	3718      	adds	r7, #24
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	80002400 	.word	0x80002400
 8013428:	fe00e800 	.word	0xfe00e800

0801342c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801343a:	b2db      	uxtb	r3, r3
}
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8013454:	4618      	mov	r0, r3
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	f003 0302 	and.w	r3, r3, #2
 8013472:	2b02      	cmp	r3, #2
 8013474:	d103      	bne.n	801347e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2200      	movs	r2, #0
 801347c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	699b      	ldr	r3, [r3, #24]
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	2b01      	cmp	r3, #1
 801348a:	d007      	beq.n	801349c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	699a      	ldr	r2, [r3, #24]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	f042 0201 	orr.w	r2, r2, #1
 801349a:	619a      	str	r2, [r3, #24]
  }
}
 801349c:	bf00      	nop
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	603b      	str	r3, [r7, #0]
 80134b4:	4613      	mov	r3, r2
 80134b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80134b8:	e03b      	b.n	8013532 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80134ba:	69ba      	ldr	r2, [r7, #24]
 80134bc:	6839      	ldr	r1, [r7, #0]
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f000 f962 	bl	8013788 <I2C_IsErrorOccurred>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d001      	beq.n	80134ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80134ca:	2301      	movs	r3, #1
 80134cc:	e041      	b.n	8013552 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d4:	d02d      	beq.n	8013532 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134d6:	f7ff f897 	bl	8012608 <HAL_GetTick>
 80134da:	4602      	mov	r2, r0
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	1ad3      	subs	r3, r2, r3
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d302      	bcc.n	80134ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d122      	bne.n	8013532 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	699a      	ldr	r2, [r3, #24]
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	4013      	ands	r3, r2
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	bf0c      	ite	eq
 80134fc:	2301      	moveq	r3, #1
 80134fe:	2300      	movne	r3, #0
 8013500:	b2db      	uxtb	r3, r3
 8013502:	461a      	mov	r2, r3
 8013504:	79fb      	ldrb	r3, [r7, #7]
 8013506:	429a      	cmp	r2, r3
 8013508:	d113      	bne.n	8013532 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801350e:	f043 0220 	orr.w	r2, r3, #32
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2220      	movs	r2, #32
 801351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801352e:	2301      	movs	r3, #1
 8013530:	e00f      	b.n	8013552 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	699a      	ldr	r2, [r3, #24]
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	4013      	ands	r3, r2
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	429a      	cmp	r2, r3
 8013540:	bf0c      	ite	eq
 8013542:	2301      	moveq	r3, #1
 8013544:	2300      	movne	r3, #0
 8013546:	b2db      	uxtb	r3, r3
 8013548:	461a      	mov	r2, r3
 801354a:	79fb      	ldrb	r3, [r7, #7]
 801354c:	429a      	cmp	r2, r3
 801354e:	d0b4      	beq.n	80134ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013550:	2300      	movs	r3, #0
}
 8013552:	4618      	mov	r0, r3
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801355a:	b580      	push	{r7, lr}
 801355c:	b084      	sub	sp, #16
 801355e:	af00      	add	r7, sp, #0
 8013560:	60f8      	str	r0, [r7, #12]
 8013562:	60b9      	str	r1, [r7, #8]
 8013564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8013566:	e033      	b.n	80135d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	68b9      	ldr	r1, [r7, #8]
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f000 f90b 	bl	8013788 <I2C_IsErrorOccurred>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d001      	beq.n	801357c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013578:	2301      	movs	r3, #1
 801357a:	e031      	b.n	80135e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013582:	d025      	beq.n	80135d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013584:	f7ff f840 	bl	8012608 <HAL_GetTick>
 8013588:	4602      	mov	r2, r0
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	68ba      	ldr	r2, [r7, #8]
 8013590:	429a      	cmp	r2, r3
 8013592:	d302      	bcc.n	801359a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d11a      	bne.n	80135d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	f003 0302 	and.w	r3, r3, #2
 80135a4:	2b02      	cmp	r3, #2
 80135a6:	d013      	beq.n	80135d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135ac:	f043 0220 	orr.w	r2, r3, #32
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2220      	movs	r2, #32
 80135b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2200      	movs	r2, #0
 80135c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	2200      	movs	r2, #0
 80135c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80135cc:	2301      	movs	r3, #1
 80135ce:	e007      	b.n	80135e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	699b      	ldr	r3, [r3, #24]
 80135d6:	f003 0302 	and.w	r3, r3, #2
 80135da:	2b02      	cmp	r3, #2
 80135dc:	d1c4      	bne.n	8013568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3710      	adds	r7, #16
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80135f4:	e02f      	b.n	8013656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	68b9      	ldr	r1, [r7, #8]
 80135fa:	68f8      	ldr	r0, [r7, #12]
 80135fc:	f000 f8c4 	bl	8013788 <I2C_IsErrorOccurred>
 8013600:	4603      	mov	r3, r0
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013606:	2301      	movs	r3, #1
 8013608:	e02d      	b.n	8013666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801360a:	f7fe fffd 	bl	8012608 <HAL_GetTick>
 801360e:	4602      	mov	r2, r0
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	429a      	cmp	r2, r3
 8013618:	d302      	bcc.n	8013620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d11a      	bne.n	8013656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	699b      	ldr	r3, [r3, #24]
 8013626:	f003 0320 	and.w	r3, r3, #32
 801362a:	2b20      	cmp	r3, #32
 801362c:	d013      	beq.n	8013656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013632:	f043 0220 	orr.w	r2, r3, #32
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2220      	movs	r2, #32
 801363e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2200      	movs	r2, #0
 8013646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2200      	movs	r2, #0
 801364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8013652:	2301      	movs	r3, #1
 8013654:	e007      	b.n	8013666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	699b      	ldr	r3, [r3, #24]
 801365c:	f003 0320 	and.w	r3, r3, #32
 8013660:	2b20      	cmp	r3, #32
 8013662:	d1c8      	bne.n	80135f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
	...

08013670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b086      	sub	sp, #24
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013680:	e071      	b.n	8013766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	68b9      	ldr	r1, [r7, #8]
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f000 f87e 	bl	8013788 <I2C_IsErrorOccurred>
 801368c:	4603      	mov	r3, r0
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8013692:	2301      	movs	r3, #1
 8013694:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	699b      	ldr	r3, [r3, #24]
 801369c:	f003 0320 	and.w	r3, r3, #32
 80136a0:	2b20      	cmp	r3, #32
 80136a2:	d13b      	bne.n	801371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d138      	bne.n	801371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	699b      	ldr	r3, [r3, #24]
 80136b0:	f003 0304 	and.w	r3, r3, #4
 80136b4:	2b04      	cmp	r3, #4
 80136b6:	d105      	bne.n	80136c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d001      	beq.n	80136c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80136c0:	2300      	movs	r3, #0
 80136c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	f003 0310 	and.w	r3, r3, #16
 80136ce:	2b10      	cmp	r3, #16
 80136d0:	d121      	bne.n	8013716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2210      	movs	r2, #16
 80136d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2204      	movs	r2, #4
 80136de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2220      	movs	r2, #32
 80136e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	6859      	ldr	r1, [r3, #4]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	4b24      	ldr	r3, [pc, #144]	@ (8013784 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80136f4:	400b      	ands	r3, r1
 80136f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2220      	movs	r2, #32
 80136fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2200      	movs	r2, #0
 8013704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013710:	2301      	movs	r3, #1
 8013712:	75fb      	strb	r3, [r7, #23]
 8013714:	e002      	b.n	801371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2200      	movs	r2, #0
 801371a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 801371c:	f7fe ff74 	bl	8012608 <HAL_GetTick>
 8013720:	4602      	mov	r2, r0
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	1ad3      	subs	r3, r2, r3
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	429a      	cmp	r2, r3
 801372a:	d302      	bcc.n	8013732 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d119      	bne.n	8013766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8013732:	7dfb      	ldrb	r3, [r7, #23]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d116      	bne.n	8013766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	699b      	ldr	r3, [r3, #24]
 801373e:	f003 0304 	and.w	r3, r3, #4
 8013742:	2b04      	cmp	r3, #4
 8013744:	d00f      	beq.n	8013766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801374a:	f043 0220 	orr.w	r2, r3, #32
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2220      	movs	r2, #32
 8013756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013762:	2301      	movs	r3, #1
 8013764:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	699b      	ldr	r3, [r3, #24]
 801376c:	f003 0304 	and.w	r3, r3, #4
 8013770:	2b04      	cmp	r3, #4
 8013772:	d002      	beq.n	801377a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8013774:	7dfb      	ldrb	r3, [r7, #23]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d083      	beq.n	8013682 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 801377a:	7dfb      	ldrb	r3, [r7, #23]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3718      	adds	r7, #24
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	fe00e800 	.word	0xfe00e800

08013788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b08a      	sub	sp, #40	@ 0x28
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	699b      	ldr	r3, [r3, #24]
 80137a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	f003 0310 	and.w	r3, r3, #16
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d068      	beq.n	8013886 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2210      	movs	r2, #16
 80137ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80137bc:	e049      	b.n	8013852 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c4:	d045      	beq.n	8013852 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80137c6:	f7fe ff1f 	bl	8012608 <HAL_GetTick>
 80137ca:	4602      	mov	r2, r0
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d302      	bcc.n	80137dc <I2C_IsErrorOccurred+0x54>
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d13a      	bne.n	8013852 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80137e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80137ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	699b      	ldr	r3, [r3, #24]
 80137f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80137fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80137fe:	d121      	bne.n	8013844 <I2C_IsErrorOccurred+0xbc>
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013806:	d01d      	beq.n	8013844 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8013808:	7cfb      	ldrb	r3, [r7, #19]
 801380a:	2b20      	cmp	r3, #32
 801380c:	d01a      	beq.n	8013844 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	685a      	ldr	r2, [r3, #4]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801381c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801381e:	f7fe fef3 	bl	8012608 <HAL_GetTick>
 8013822:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013824:	e00e      	b.n	8013844 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013826:	f7fe feef 	bl	8012608 <HAL_GetTick>
 801382a:	4602      	mov	r2, r0
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	2b19      	cmp	r3, #25
 8013832:	d907      	bls.n	8013844 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013834:	6a3b      	ldr	r3, [r7, #32]
 8013836:	f043 0320 	orr.w	r3, r3, #32
 801383a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801383c:	2301      	movs	r3, #1
 801383e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8013842:	e006      	b.n	8013852 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	f003 0320 	and.w	r3, r3, #32
 801384e:	2b20      	cmp	r3, #32
 8013850:	d1e9      	bne.n	8013826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	699b      	ldr	r3, [r3, #24]
 8013858:	f003 0320 	and.w	r3, r3, #32
 801385c:	2b20      	cmp	r3, #32
 801385e:	d003      	beq.n	8013868 <I2C_IsErrorOccurred+0xe0>
 8013860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0aa      	beq.n	80137be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801386c:	2b00      	cmp	r3, #0
 801386e:	d103      	bne.n	8013878 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2220      	movs	r2, #32
 8013876:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8013878:	6a3b      	ldr	r3, [r7, #32]
 801387a:	f043 0304 	orr.w	r3, r3, #4
 801387e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013880:	2301      	movs	r3, #1
 8013882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	699b      	ldr	r3, [r3, #24]
 801388c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00b      	beq.n	80138b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8013898:	6a3b      	ldr	r3, [r7, #32]
 801389a:	f043 0301 	orr.w	r3, r3, #1
 801389e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80138a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138aa:	2301      	movs	r3, #1
 80138ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00b      	beq.n	80138d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80138ba:	6a3b      	ldr	r3, [r7, #32]
 80138bc:	f043 0308 	orr.w	r3, r3, #8
 80138c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80138ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138cc:	2301      	movs	r3, #1
 80138ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00b      	beq.n	80138f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80138dc:	6a3b      	ldr	r3, [r7, #32]
 80138de:	f043 0302 	orr.w	r3, r3, #2
 80138e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80138ee:	2301      	movs	r3, #1
 80138f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80138f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d01c      	beq.n	8013936 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff fdaf 	bl	8013460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	6859      	ldr	r1, [r3, #4]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	4b0d      	ldr	r3, [pc, #52]	@ (8013944 <I2C_IsErrorOccurred+0x1bc>)
 801390e:	400b      	ands	r3, r1
 8013910:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013916:	6a3b      	ldr	r3, [r7, #32]
 8013918:	431a      	orrs	r2, r3
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2220      	movs	r2, #32
 8013922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2200      	movs	r2, #0
 8013932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8013936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801393a:	4618      	mov	r0, r3
 801393c:	3728      	adds	r7, #40	@ 0x28
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	fe00e800 	.word	0xfe00e800

08013948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013948:	b480      	push	{r7}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	607b      	str	r3, [r7, #4]
 8013952:	460b      	mov	r3, r1
 8013954:	817b      	strh	r3, [r7, #10]
 8013956:	4613      	mov	r3, r2
 8013958:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801395a:	897b      	ldrh	r3, [r7, #10]
 801395c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013960:	7a7b      	ldrb	r3, [r7, #9]
 8013962:	041b      	lsls	r3, r3, #16
 8013964:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013968:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	4313      	orrs	r3, r2
 8013972:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013976:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	685a      	ldr	r2, [r3, #4]
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	0d5b      	lsrs	r3, r3, #21
 8013982:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8013986:	4b08      	ldr	r3, [pc, #32]	@ (80139a8 <I2C_TransferConfig+0x60>)
 8013988:	430b      	orrs	r3, r1
 801398a:	43db      	mvns	r3, r3
 801398c:	ea02 0103 	and.w	r1, r2, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	697a      	ldr	r2, [r7, #20]
 8013996:	430a      	orrs	r2, r1
 8013998:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801399a:	bf00      	nop
 801399c:	371c      	adds	r7, #28
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	03ff63ff 	.word	0x03ff63ff

080139ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b083      	sub	sp, #12
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	2b20      	cmp	r3, #32
 80139c0:	d138      	bne.n	8013a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d101      	bne.n	80139d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80139cc:	2302      	movs	r3, #2
 80139ce:	e032      	b.n	8013a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2201      	movs	r2, #1
 80139d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2224      	movs	r2, #36	@ 0x24
 80139dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f022 0201 	bic.w	r2, r2, #1
 80139ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80139fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	6819      	ldr	r1, [r3, #0]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	683a      	ldr	r2, [r7, #0]
 8013a0c:	430a      	orrs	r2, r1
 8013a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	681a      	ldr	r2, [r3, #0]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f042 0201 	orr.w	r2, r2, #1
 8013a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2220      	movs	r2, #32
 8013a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013a30:	2300      	movs	r3, #0
 8013a32:	e000      	b.n	8013a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013a34:	2302      	movs	r3, #2
  }
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013a42:	b480      	push	{r7}
 8013a44:	b085      	sub	sp, #20
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	2b20      	cmp	r3, #32
 8013a56:	d139      	bne.n	8013acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d101      	bne.n	8013a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013a62:	2302      	movs	r3, #2
 8013a64:	e033      	b.n	8013ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2201      	movs	r2, #1
 8013a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2224      	movs	r2, #36	@ 0x24
 8013a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f022 0201 	bic.w	r2, r2, #1
 8013a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8013a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	021b      	lsls	r3, r3, #8
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f042 0201 	orr.w	r2, r2, #1
 8013ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2220      	movs	r2, #32
 8013abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	e000      	b.n	8013ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8013acc:	2302      	movs	r3, #2
  }
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3714      	adds	r7, #20
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr

08013ada <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b084      	sub	sp, #16
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d101      	bne.n	8013aec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e0c0      	b.n	8013c6e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d106      	bne.n	8013b06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ec ff2f 	bl	8000964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2203      	movs	r2, #3
 8013b0a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f002 fc80 	bl	8016418 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b18:	2300      	movs	r3, #0
 8013b1a:	73fb      	strb	r3, [r7, #15]
 8013b1c:	e03e      	b.n	8013b9c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013b1e:	7bfa      	ldrb	r2, [r7, #15]
 8013b20:	6879      	ldr	r1, [r7, #4]
 8013b22:	4613      	mov	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3311      	adds	r3, #17
 8013b2e:	2201      	movs	r2, #1
 8013b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013b32:	7bfa      	ldrb	r2, [r7, #15]
 8013b34:	6879      	ldr	r1, [r7, #4]
 8013b36:	4613      	mov	r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	4413      	add	r3, r2
 8013b3c:	00db      	lsls	r3, r3, #3
 8013b3e:	440b      	add	r3, r1
 8013b40:	3310      	adds	r3, #16
 8013b42:	7bfa      	ldrb	r2, [r7, #15]
 8013b44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013b46:	7bfa      	ldrb	r2, [r7, #15]
 8013b48:	6879      	ldr	r1, [r7, #4]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4413      	add	r3, r2
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	440b      	add	r3, r1
 8013b54:	3313      	adds	r3, #19
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013b5a:	7bfa      	ldrb	r2, [r7, #15]
 8013b5c:	6879      	ldr	r1, [r7, #4]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	3320      	adds	r3, #32
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013b6e:	7bfa      	ldrb	r2, [r7, #15]
 8013b70:	6879      	ldr	r1, [r7, #4]
 8013b72:	4613      	mov	r3, r2
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	4413      	add	r3, r2
 8013b78:	00db      	lsls	r3, r3, #3
 8013b7a:	440b      	add	r3, r1
 8013b7c:	3324      	adds	r3, #36	@ 0x24
 8013b7e:	2200      	movs	r2, #0
 8013b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013b82:	7bfb      	ldrb	r3, [r7, #15]
 8013b84:	6879      	ldr	r1, [r7, #4]
 8013b86:	1c5a      	adds	r2, r3, #1
 8013b88:	4613      	mov	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	4413      	add	r3, r2
 8013b8e:	00db      	lsls	r3, r3, #3
 8013b90:	440b      	add	r3, r1
 8013b92:	2200      	movs	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	73fb      	strb	r3, [r7, #15]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	791b      	ldrb	r3, [r3, #4]
 8013ba0:	7bfa      	ldrb	r2, [r7, #15]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d3bb      	bcc.n	8013b1e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	73fb      	strb	r3, [r7, #15]
 8013baa:	e044      	b.n	8013c36 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013bac:	7bfa      	ldrb	r2, [r7, #15]
 8013bae:	6879      	ldr	r1, [r7, #4]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	009b      	lsls	r3, r3, #2
 8013bb4:	4413      	add	r3, r2
 8013bb6:	00db      	lsls	r3, r3, #3
 8013bb8:	440b      	add	r3, r1
 8013bba:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013bc2:	7bfa      	ldrb	r2, [r7, #15]
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	4413      	add	r3, r2
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	440b      	add	r3, r1
 8013bd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013bd4:	7bfa      	ldrb	r2, [r7, #15]
 8013bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013bd8:	7bfa      	ldrb	r2, [r7, #15]
 8013bda:	6879      	ldr	r1, [r7, #4]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	4413      	add	r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	440b      	add	r3, r1
 8013be6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8013bea:	2200      	movs	r2, #0
 8013bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013bee:	7bfa      	ldrb	r2, [r7, #15]
 8013bf0:	6879      	ldr	r1, [r7, #4]
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	009b      	lsls	r3, r3, #2
 8013bf6:	4413      	add	r3, r2
 8013bf8:	00db      	lsls	r3, r3, #3
 8013bfa:	440b      	add	r3, r1
 8013bfc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8013c00:	2200      	movs	r2, #0
 8013c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013c04:	7bfa      	ldrb	r2, [r7, #15]
 8013c06:	6879      	ldr	r1, [r7, #4]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	009b      	lsls	r3, r3, #2
 8013c0c:	4413      	add	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	440b      	add	r3, r1
 8013c12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013c16:	2200      	movs	r2, #0
 8013c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013c1a:	7bfa      	ldrb	r2, [r7, #15]
 8013c1c:	6879      	ldr	r1, [r7, #4]
 8013c1e:	4613      	mov	r3, r2
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	4413      	add	r3, r2
 8013c24:	00db      	lsls	r3, r3, #3
 8013c26:	440b      	add	r3, r1
 8013c28:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013c30:	7bfb      	ldrb	r3, [r7, #15]
 8013c32:	3301      	adds	r3, #1
 8013c34:	73fb      	strb	r3, [r7, #15]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	791b      	ldrb	r3, [r3, #4]
 8013c3a:	7bfa      	ldrb	r2, [r7, #15]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d3b5      	bcc.n	8013bac <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6818      	ldr	r0, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3304      	adds	r3, #4
 8013c48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013c4c:	f002 fbff 	bl	801644e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2201      	movs	r2, #1
 8013c5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	7a9b      	ldrb	r3, [r3, #10]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d102      	bne.n	8013c6c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f805 	bl	8013c76 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013c76:	b480      	push	{r7}
 8013c78:	b085      	sub	sp, #20
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2201      	movs	r2, #1
 8013c88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	f043 0301 	orr.w	r3, r3, #1
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	f043 0302 	orr.w	r3, r3, #2
 8013cb4:	b29a      	uxth	r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
	...

08013ccc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013cd0:	4b05      	ldr	r3, [pc, #20]	@ (8013ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	4a04      	ldr	r2, [pc, #16]	@ (8013ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8013cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013cda:	6013      	str	r3, [r2, #0]
}
 8013cdc:	bf00      	nop
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr
 8013ce6:	bf00      	nop
 8013ce8:	58000400 	.word	0x58000400

08013cec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013cec:	b480      	push	{r7}
 8013cee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8013cf0:	4b04      	ldr	r3, [pc, #16]	@ (8013d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	58000400 	.word	0x58000400

08013d08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8013d08:	b480      	push	{r7}
 8013d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8013d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013d1a:	d101      	bne.n	8013d20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	e000      	b.n	8013d22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8013d20:	2300      	movs	r3, #0
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr

08013d2c <LL_RCC_HSE_Enable>:
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8013d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013d3e:	6013      	str	r3, [r2, #0]
}
 8013d40:	bf00      	nop
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <LL_RCC_HSE_Disable>:
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8013d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013d5c:	6013      	str	r3, [r2, #0]
}
 8013d5e:	bf00      	nop
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <LL_RCC_HSE_IsReady>:
{
 8013d68:	b480      	push	{r7}
 8013d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8013d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d7a:	d101      	bne.n	8013d80 <LL_RCC_HSE_IsReady+0x18>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e000      	b.n	8013d82 <LL_RCC_HSE_IsReady+0x1a>
 8013d80:	2300      	movs	r3, #0
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <LL_RCC_HSI_Enable>:
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d9e:	6013      	str	r3, [r2, #0]
}
 8013da0:	bf00      	nop
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <LL_RCC_HSI_Disable>:
{
 8013daa:	b480      	push	{r7}
 8013dac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8013dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013dbc:	6013      	str	r3, [r2, #0]
}
 8013dbe:	bf00      	nop
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <LL_RCC_HSI_IsReady>:
{
 8013dc8:	b480      	push	{r7}
 8013dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8013dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013dda:	d101      	bne.n	8013de0 <LL_RCC_HSI_IsReady+0x18>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e000      	b.n	8013de2 <LL_RCC_HSI_IsReady+0x1a>
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <LL_RCC_HSI_SetCalibTrimming>:
{
 8013dec:	b480      	push	{r7}
 8013dee:	b083      	sub	sp, #12
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8013df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	061b      	lsls	r3, r3, #24
 8013e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013e06:	4313      	orrs	r3, r2
 8013e08:	604b      	str	r3, [r1, #4]
}
 8013e0a:	bf00      	nop
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <LL_RCC_HSI48_Enable>:
{
 8013e16:	b480      	push	{r7}
 8013e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e26:	f043 0301 	orr.w	r3, r3, #1
 8013e2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013e2e:	bf00      	nop
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <LL_RCC_HSI48_Disable>:
{
 8013e38:	b480      	push	{r7}
 8013e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e48:	f023 0301 	bic.w	r3, r3, #1
 8013e4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013e50:	bf00      	nop
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr

08013e5a <LL_RCC_HSI48_IsReady>:
{
 8013e5a:	b480      	push	{r7}
 8013e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8013e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013e66:	f003 0302 	and.w	r3, r3, #2
 8013e6a:	2b02      	cmp	r3, #2
 8013e6c:	d101      	bne.n	8013e72 <LL_RCC_HSI48_IsReady+0x18>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	e000      	b.n	8013e74 <LL_RCC_HSI48_IsReady+0x1a>
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <LL_RCC_LSE_Enable>:
{
 8013e7e:	b480      	push	{r7}
 8013e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e8e:	f043 0301 	orr.w	r3, r3, #1
 8013e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <LL_RCC_LSE_Disable>:
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013eb0:	f023 0301 	bic.w	r3, r3, #1
 8013eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013eb8:	bf00      	nop
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <LL_RCC_LSE_EnableBypass>:
{
 8013ec2:	b480      	push	{r7}
 8013ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ed2:	f043 0304 	orr.w	r3, r3, #4
 8013ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013eda:	bf00      	nop
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <LL_RCC_LSE_DisableBypass>:
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ef0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ef4:	f023 0304 	bic.w	r3, r3, #4
 8013ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013efc:	bf00      	nop
 8013efe:	46bd      	mov	sp, r7
 8013f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f04:	4770      	bx	lr

08013f06 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8013f06:	b480      	push	{r7}
 8013f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8013f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f12:	f003 0302 	and.w	r3, r3, #2
 8013f16:	2b02      	cmp	r3, #2
 8013f18:	d101      	bne.n	8013f1e <LL_RCC_LSE_IsReady+0x18>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e000      	b.n	8013f20 <LL_RCC_LSE_IsReady+0x1a>
 8013f1e:	2300      	movs	r3, #0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	46bd      	mov	sp, r7
 8013f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f28:	4770      	bx	lr

08013f2a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8013f2a:	b480      	push	{r7}
 8013f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f3a:	f043 0301 	orr.w	r3, r3, #1
 8013f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013f42:	bf00      	nop
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr

08013f4c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f5c:	f023 0301 	bic.w	r3, r3, #1
 8013f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013f64:	bf00      	nop
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8013f6e:	b480      	push	{r7}
 8013f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8013f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f7a:	f003 0302 	and.w	r3, r3, #2
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	d101      	bne.n	8013f86 <LL_RCC_LSI1_IsReady+0x18>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e000      	b.n	8013f88 <LL_RCC_LSI1_IsReady+0x1a>
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr

08013f92 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8013f92:	b480      	push	{r7}
 8013f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013fa2:	f043 0304 	orr.w	r3, r3, #4
 8013fa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013faa:	bf00      	nop
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013fc4:	f023 0304 	bic.w	r3, r3, #4
 8013fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013fcc:	bf00      	nop
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8013fd6:	b480      	push	{r7}
 8013fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8013fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fe2:	f003 0308 	and.w	r3, r3, #8
 8013fe6:	2b08      	cmp	r3, #8
 8013fe8:	d101      	bne.n	8013fee <LL_RCC_LSI2_IsReady+0x18>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <LL_RCC_LSI2_IsReady+0x1a>
 8013fee:	2300      	movs	r3, #0
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr

08013ffa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8013ffa:	b480      	push	{r7}
 8013ffc:	b083      	sub	sp, #12
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8014002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801400a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	021b      	lsls	r3, r3, #8
 8014012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014016:	4313      	orrs	r3, r2
 8014018:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 801401c:	bf00      	nop
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8014028:	b480      	push	{r7}
 801402a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801402c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014036:	f043 0301 	orr.w	r3, r3, #1
 801403a:	6013      	str	r3, [r2, #0]
}
 801403c:	bf00      	nop
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr

08014046 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8014046:	b480      	push	{r7}
 8014048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801404a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014054:	f023 0301 	bic.w	r3, r3, #1
 8014058:	6013      	str	r3, [r2, #0]
}
 801405a:	bf00      	nop
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8014064:	b480      	push	{r7}
 8014066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8014068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f003 0302 	and.w	r3, r3, #2
 8014072:	2b02      	cmp	r3, #2
 8014074:	d101      	bne.n	801407a <LL_RCC_MSI_IsReady+0x16>
 8014076:	2301      	movs	r3, #1
 8014078:	e000      	b.n	801407c <LL_RCC_MSI_IsReady+0x18>
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr

08014086 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8014086:	b480      	push	{r7}
 8014088:	b083      	sub	sp, #12
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801408e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014098:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	4313      	orrs	r3, r2
 80140a0:	600b      	str	r3, [r1, #0]
}
 80140a2:	bf00      	nop
 80140a4:	370c      	adds	r7, #12
 80140a6:	46bd      	mov	sp, r7
 80140a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ac:	4770      	bx	lr

080140ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80140ae:	b480      	push	{r7}
 80140b0:	b083      	sub	sp, #12
 80140b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80140b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80140be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2bb0      	cmp	r3, #176	@ 0xb0
 80140c4:	d901      	bls.n	80140ca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80140c6:	23b0      	movs	r3, #176	@ 0xb0
 80140c8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80140ca:	687b      	ldr	r3, [r7, #4]
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	370c      	adds	r7, #12
 80140d0:	46bd      	mov	sp, r7
 80140d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d6:	4770      	bx	lr

080140d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80140d8:	b480      	push	{r7}
 80140da:	b083      	sub	sp, #12
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80140e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	021b      	lsls	r3, r3, #8
 80140ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80140f2:	4313      	orrs	r3, r2
 80140f4:	604b      	str	r3, [r1, #4]
}
 80140f6:	bf00      	nop
 80140f8:	370c      	adds	r7, #12
 80140fa:	46bd      	mov	sp, r7
 80140fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014100:	4770      	bx	lr

08014102 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8014102:	b480      	push	{r7}
 8014104:	b083      	sub	sp, #12
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801410a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801410e:	689b      	ldr	r3, [r3, #8]
 8014110:	f023 0203 	bic.w	r2, r3, #3
 8014114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	4313      	orrs	r3, r2
 801411c:	608b      	str	r3, [r1, #8]
}
 801411e:	bf00      	nop
 8014120:	370c      	adds	r7, #12
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr

0801412a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801412a:	b480      	push	{r7}
 801412c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801412e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	f003 030c 	and.w	r3, r3, #12
}
 8014138:	4618      	mov	r0, r3
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8014142:	b480      	push	{r7}
 8014144:	b083      	sub	sp, #12
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014154:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	4313      	orrs	r3, r2
 801415c:	608b      	str	r3, [r1, #8]
}
 801415e:	bf00      	nop
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr

0801416a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801416a:	b480      	push	{r7}
 801416c:	b083      	sub	sp, #12
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8014172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014176:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801417a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801417e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4313      	orrs	r3, r2
 8014186:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 801418a:	bf00      	nop
 801418c:	370c      	adds	r7, #12
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr

08014196 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8014196:	b480      	push	{r7}
 8014198:	b083      	sub	sp, #12
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801419e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80141a6:	f023 020f 	bic.w	r2, r3, #15
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	091b      	lsrs	r3, r3, #4
 80141ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80141b2:	4313      	orrs	r3, r2
 80141b4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80141b8:	bf00      	nop
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80141cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141d0:	689b      	ldr	r3, [r3, #8]
 80141d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80141d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	4313      	orrs	r3, r2
 80141de:	608b      	str	r3, [r1, #8]
}
 80141e0:	bf00      	nop
 80141e2:	370c      	adds	r7, #12
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr

080141ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b083      	sub	sp, #12
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80141f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141f8:	689b      	ldr	r3, [r3, #8]
 80141fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80141fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	4313      	orrs	r3, r2
 8014206:	608b      	str	r3, [r1, #8]
}
 8014208:	bf00      	nop
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8014214:	b480      	push	{r7}
 8014216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8014218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8014222:	4618      	mov	r0, r3
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801422c:	b480      	push	{r7}
 801422e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8014230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014234:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014238:	011b      	lsls	r3, r3, #4
 801423a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801423e:	4618      	mov	r0, r3
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8014248:	b480      	push	{r7}
 801424a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801424c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014250:	689b      	ldr	r3, [r3, #8]
 8014252:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8014256:	4618      	mov	r0, r3
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8014260:	b480      	push	{r7}
 8014262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8014264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014268:	689b      	ldr	r3, [r3, #8]
 801426a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 801426e:	4618      	mov	r0, r3
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8014278:	b480      	push	{r7}
 801427a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801427c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801428a:	6013      	str	r3, [r2, #0]
}
 801428c:	bf00      	nop
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr

08014296 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8014296:	b480      	push	{r7}
 8014298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801429a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80142a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80142a8:	6013      	str	r3, [r2, #0]
}
 80142aa:	bf00      	nop
 80142ac:	46bd      	mov	sp, r7
 80142ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b2:	4770      	bx	lr

080142b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80142b4:	b480      	push	{r7}
 80142b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80142b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80142c6:	d101      	bne.n	80142cc <LL_RCC_PLL_IsReady+0x18>
 80142c8:	2301      	movs	r3, #1
 80142ca:	e000      	b.n	80142ce <LL_RCC_PLL_IsReady+0x1a>
 80142cc:	2300      	movs	r3, #0
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80142d8:	b480      	push	{r7}
 80142da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80142dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	0a1b      	lsrs	r3, r3, #8
 80142e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	46bd      	mov	sp, r7
 80142ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f0:	4770      	bx	lr

080142f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80142f2:	b480      	push	{r7}
 80142f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80142f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8014300:	4618      	mov	r0, r3
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801430a:	b480      	push	{r7}
 801430c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801430e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8014318:	4618      	mov	r0, r3
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr

08014322 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8014322:	b480      	push	{r7}
 8014324:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8014326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	f003 0303 	and.w	r3, r3, #3
}
 8014330:	4618      	mov	r0, r3
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801433a:	b480      	push	{r7}
 801433c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801433e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014342:	689b      	ldr	r3, [r3, #8]
 8014344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801434c:	d101      	bne.n	8014352 <LL_RCC_IsActiveFlag_HPRE+0x18>
 801434e:	2301      	movs	r3, #1
 8014350:	e000      	b.n	8014354 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8014352:	2300      	movs	r3, #0
}
 8014354:	4618      	mov	r0, r3
 8014356:	46bd      	mov	sp, r7
 8014358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435c:	4770      	bx	lr

0801435e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801435e:	b480      	push	{r7}
 8014360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8014362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014366:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801436e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014372:	d101      	bne.n	8014378 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8014374:	2301      	movs	r3, #1
 8014376:	e000      	b.n	801437a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8014378:	2300      	movs	r3, #0
}
 801437a:	4618      	mov	r0, r3
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8014384:	b480      	push	{r7}
 8014386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8014388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801438c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014398:	d101      	bne.n	801439e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801439a:	2301      	movs	r3, #1
 801439c:	e000      	b.n	80143a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr

080143aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80143aa:	b480      	push	{r7}
 80143ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80143ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80143b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80143bc:	d101      	bne.n	80143c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80143c2:	2300      	movs	r3, #0
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr

080143ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80143ce:	b480      	push	{r7}
 80143d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80143d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143d6:	689b      	ldr	r3, [r3, #8]
 80143d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80143dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80143e0:	d101      	bne.n	80143e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80143e2:	2301      	movs	r3, #1
 80143e4:	e000      	b.n	80143e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr
	...

080143f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80143f4:	b590      	push	{r4, r7, lr}
 80143f6:	b08d      	sub	sp, #52	@ 0x34
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d101      	bne.n	8014406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014402:	2301      	movs	r3, #1
 8014404:	e363      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f003 0320 	and.w	r3, r3, #32
 801440e:	2b00      	cmp	r3, #0
 8014410:	f000 808d 	beq.w	801452e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014414:	f7ff fe89 	bl	801412a <LL_RCC_GetSysClkSource>
 8014418:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801441a:	f7ff ff82 	bl	8014322 <LL_RCC_PLL_GetMainSource>
 801441e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8014420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014422:	2b00      	cmp	r3, #0
 8014424:	d005      	beq.n	8014432 <HAL_RCC_OscConfig+0x3e>
 8014426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014428:	2b0c      	cmp	r3, #12
 801442a:	d147      	bne.n	80144bc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801442e:	2b01      	cmp	r3, #1
 8014430:	d144      	bne.n	80144bc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	69db      	ldr	r3, [r3, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d101      	bne.n	801443e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801443a:	2301      	movs	r3, #1
 801443c:	e347      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014442:	f7ff fe34 	bl	80140ae <LL_RCC_MSI_GetRange>
 8014446:	4603      	mov	r3, r0
 8014448:	429c      	cmp	r4, r3
 801444a:	d914      	bls.n	8014476 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014450:	4618      	mov	r0, r3
 8014452:	f000 fd2f 	bl	8014eb4 <RCC_SetFlashLatencyFromMSIRange>
 8014456:	4603      	mov	r3, r0
 8014458:	2b00      	cmp	r3, #0
 801445a:	d001      	beq.n	8014460 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801445c:	2301      	movs	r3, #1
 801445e:	e336      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014464:	4618      	mov	r0, r3
 8014466:	f7ff fe0e 	bl	8014086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6a1b      	ldr	r3, [r3, #32]
 801446e:	4618      	mov	r0, r3
 8014470:	f7ff fe32 	bl	80140d8 <LL_RCC_MSI_SetCalibTrimming>
 8014474:	e013      	b.n	801449e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801447a:	4618      	mov	r0, r3
 801447c:	f7ff fe03 	bl	8014086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6a1b      	ldr	r3, [r3, #32]
 8014484:	4618      	mov	r0, r3
 8014486:	f7ff fe27 	bl	80140d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fd10 	bl	8014eb4 <RCC_SetFlashLatencyFromMSIRange>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d001      	beq.n	801449e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801449a:	2301      	movs	r3, #1
 801449c:	e317      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801449e:	f000 fcc9 	bl	8014e34 <HAL_RCC_GetHCLKFreq>
 80144a2:	4603      	mov	r3, r0
 80144a4:	4aa4      	ldr	r2, [pc, #656]	@ (8014738 <HAL_RCC_OscConfig+0x344>)
 80144a6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80144a8:	4ba4      	ldr	r3, [pc, #656]	@ (801473c <HAL_RCC_OscConfig+0x348>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe f85d 	bl	801256c <HAL_InitTick>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d039      	beq.n	801452c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80144b8:	2301      	movs	r3, #1
 80144ba:	e308      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	69db      	ldr	r3, [r3, #28]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d01e      	beq.n	8014502 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80144c4:	f7ff fdb0 	bl	8014028 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80144c8:	f7fe f89e 	bl	8012608 <HAL_GetTick>
 80144cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80144ce:	e008      	b.n	80144e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80144d0:	f7fe f89a 	bl	8012608 <HAL_GetTick>
 80144d4:	4602      	mov	r2, r0
 80144d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	2b02      	cmp	r3, #2
 80144dc:	d901      	bls.n	80144e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80144de:	2303      	movs	r3, #3
 80144e0:	e2f5      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80144e2:	f7ff fdbf 	bl	8014064 <LL_RCC_MSI_IsReady>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d0f1      	beq.n	80144d0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7ff fdc8 	bl	8014086 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6a1b      	ldr	r3, [r3, #32]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7ff fdec 	bl	80140d8 <LL_RCC_MSI_SetCalibTrimming>
 8014500:	e015      	b.n	801452e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014502:	f7ff fda0 	bl	8014046 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014506:	f7fe f87f 	bl	8012608 <HAL_GetTick>
 801450a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801450c:	e008      	b.n	8014520 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801450e:	f7fe f87b 	bl	8012608 <HAL_GetTick>
 8014512:	4602      	mov	r2, r0
 8014514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014516:	1ad3      	subs	r3, r2, r3
 8014518:	2b02      	cmp	r3, #2
 801451a:	d901      	bls.n	8014520 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801451c:	2303      	movs	r3, #3
 801451e:	e2d6      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8014520:	f7ff fda0 	bl	8014064 <LL_RCC_MSI_IsReady>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d1f1      	bne.n	801450e <HAL_RCC_OscConfig+0x11a>
 801452a:	e000      	b.n	801452e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801452c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f003 0301 	and.w	r3, r3, #1
 8014536:	2b00      	cmp	r3, #0
 8014538:	d047      	beq.n	80145ca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801453a:	f7ff fdf6 	bl	801412a <LL_RCC_GetSysClkSource>
 801453e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014540:	f7ff feef 	bl	8014322 <LL_RCC_PLL_GetMainSource>
 8014544:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8014546:	6a3b      	ldr	r3, [r7, #32]
 8014548:	2b08      	cmp	r3, #8
 801454a:	d005      	beq.n	8014558 <HAL_RCC_OscConfig+0x164>
 801454c:	6a3b      	ldr	r3, [r7, #32]
 801454e:	2b0c      	cmp	r3, #12
 8014550:	d108      	bne.n	8014564 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	2b03      	cmp	r3, #3
 8014556:	d105      	bne.n	8014564 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d134      	bne.n	80145ca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8014560:	2301      	movs	r3, #1
 8014562:	e2b4      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801456c:	d102      	bne.n	8014574 <HAL_RCC_OscConfig+0x180>
 801456e:	f7ff fbdd 	bl	8013d2c <LL_RCC_HSE_Enable>
 8014572:	e001      	b.n	8014578 <HAL_RCC_OscConfig+0x184>
 8014574:	f7ff fbe9 	bl	8013d4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d012      	beq.n	80145a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014580:	f7fe f842 	bl	8012608 <HAL_GetTick>
 8014584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8014586:	e008      	b.n	801459a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014588:	f7fe f83e 	bl	8012608 <HAL_GetTick>
 801458c:	4602      	mov	r2, r0
 801458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	2b64      	cmp	r3, #100	@ 0x64
 8014594:	d901      	bls.n	801459a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8014596:	2303      	movs	r3, #3
 8014598:	e299      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801459a:	f7ff fbe5 	bl	8013d68 <LL_RCC_HSE_IsReady>
 801459e:	4603      	mov	r3, r0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d0f1      	beq.n	8014588 <HAL_RCC_OscConfig+0x194>
 80145a4:	e011      	b.n	80145ca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145a6:	f7fe f82f 	bl	8012608 <HAL_GetTick>
 80145aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80145ac:	e008      	b.n	80145c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80145ae:	f7fe f82b 	bl	8012608 <HAL_GetTick>
 80145b2:	4602      	mov	r2, r0
 80145b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b6:	1ad3      	subs	r3, r2, r3
 80145b8:	2b64      	cmp	r3, #100	@ 0x64
 80145ba:	d901      	bls.n	80145c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80145bc:	2303      	movs	r3, #3
 80145be:	e286      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80145c0:	f7ff fbd2 	bl	8013d68 <LL_RCC_HSE_IsReady>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d1f1      	bne.n	80145ae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f003 0302 	and.w	r3, r3, #2
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d04c      	beq.n	8014670 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80145d6:	f7ff fda8 	bl	801412a <LL_RCC_GetSysClkSource>
 80145da:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80145dc:	f7ff fea1 	bl	8014322 <LL_RCC_PLL_GetMainSource>
 80145e0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	2b04      	cmp	r3, #4
 80145e6:	d005      	beq.n	80145f4 <HAL_RCC_OscConfig+0x200>
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	2b0c      	cmp	r3, #12
 80145ec:	d10e      	bne.n	801460c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d10b      	bne.n	801460c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d101      	bne.n	8014600 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80145fc:	2301      	movs	r3, #1
 80145fe:	e266      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	691b      	ldr	r3, [r3, #16]
 8014604:	4618      	mov	r0, r3
 8014606:	f7ff fbf1 	bl	8013dec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801460a:	e031      	b.n	8014670 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d019      	beq.n	8014648 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014614:	f7ff fbba 	bl	8013d8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014618:	f7fd fff6 	bl	8012608 <HAL_GetTick>
 801461c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801461e:	e008      	b.n	8014632 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014620:	f7fd fff2 	bl	8012608 <HAL_GetTick>
 8014624:	4602      	mov	r2, r0
 8014626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014628:	1ad3      	subs	r3, r2, r3
 801462a:	2b02      	cmp	r3, #2
 801462c:	d901      	bls.n	8014632 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801462e:	2303      	movs	r3, #3
 8014630:	e24d      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8014632:	f7ff fbc9 	bl	8013dc8 <LL_RCC_HSI_IsReady>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	d0f1      	beq.n	8014620 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	691b      	ldr	r3, [r3, #16]
 8014640:	4618      	mov	r0, r3
 8014642:	f7ff fbd3 	bl	8013dec <LL_RCC_HSI_SetCalibTrimming>
 8014646:	e013      	b.n	8014670 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014648:	f7ff fbaf 	bl	8013daa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801464c:	f7fd ffdc 	bl	8012608 <HAL_GetTick>
 8014650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8014652:	e008      	b.n	8014666 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014654:	f7fd ffd8 	bl	8012608 <HAL_GetTick>
 8014658:	4602      	mov	r2, r0
 801465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465c:	1ad3      	subs	r3, r2, r3
 801465e:	2b02      	cmp	r3, #2
 8014660:	d901      	bls.n	8014666 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8014662:	2303      	movs	r3, #3
 8014664:	e233      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8014666:	f7ff fbaf 	bl	8013dc8 <LL_RCC_HSI_IsReady>
 801466a:	4603      	mov	r3, r0
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1f1      	bne.n	8014654 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f003 0308 	and.w	r3, r3, #8
 8014678:	2b00      	cmp	r3, #0
 801467a:	d106      	bne.n	801468a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014684:	2b00      	cmp	r3, #0
 8014686:	f000 80a3 	beq.w	80147d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	695b      	ldr	r3, [r3, #20]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d076      	beq.n	8014780 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f003 0310 	and.w	r3, r3, #16
 801469a:	2b00      	cmp	r3, #0
 801469c:	d046      	beq.n	801472c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801469e:	f7ff fc66 	bl	8013f6e <LL_RCC_LSI1_IsReady>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d113      	bne.n	80146d0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80146a8:	f7ff fc3f 	bl	8013f2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80146ac:	f7fd ffac 	bl	8012608 <HAL_GetTick>
 80146b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80146b2:	e008      	b.n	80146c6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80146b4:	f7fd ffa8 	bl	8012608 <HAL_GetTick>
 80146b8:	4602      	mov	r2, r0
 80146ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	2b02      	cmp	r3, #2
 80146c0:	d901      	bls.n	80146c6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e203      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80146c6:	f7ff fc52 	bl	8013f6e <LL_RCC_LSI1_IsReady>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d0f1      	beq.n	80146b4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80146d0:	f7ff fc5f 	bl	8013f92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146d4:	f7fd ff98 	bl	8012608 <HAL_GetTick>
 80146d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80146da:	e008      	b.n	80146ee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80146dc:	f7fd ff94 	bl	8012608 <HAL_GetTick>
 80146e0:	4602      	mov	r2, r0
 80146e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	2b03      	cmp	r3, #3
 80146e8:	d901      	bls.n	80146ee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80146ea:	2303      	movs	r3, #3
 80146ec:	e1ef      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80146ee:	f7ff fc72 	bl	8013fd6 <LL_RCC_LSI2_IsReady>
 80146f2:	4603      	mov	r3, r0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d0f1      	beq.n	80146dc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	699b      	ldr	r3, [r3, #24]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7ff fc7c 	bl	8013ffa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8014702:	f7ff fc23 	bl	8013f4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014706:	f7fd ff7f 	bl	8012608 <HAL_GetTick>
 801470a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801470c:	e008      	b.n	8014720 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801470e:	f7fd ff7b 	bl	8012608 <HAL_GetTick>
 8014712:	4602      	mov	r2, r0
 8014714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	2b02      	cmp	r3, #2
 801471a:	d901      	bls.n	8014720 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801471c:	2303      	movs	r3, #3
 801471e:	e1d6      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014720:	f7ff fc25 	bl	8013f6e <LL_RCC_LSI1_IsReady>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d1f1      	bne.n	801470e <HAL_RCC_OscConfig+0x31a>
 801472a:	e051      	b.n	80147d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801472c:	f7ff fbfd 	bl	8013f2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014730:	f7fd ff6a 	bl	8012608 <HAL_GetTick>
 8014734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014736:	e00c      	b.n	8014752 <HAL_RCC_OscConfig+0x35e>
 8014738:	20000008 	.word	0x20000008
 801473c:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014740:	f7fd ff62 	bl	8012608 <HAL_GetTick>
 8014744:	4602      	mov	r2, r0
 8014746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	2b02      	cmp	r3, #2
 801474c:	d901      	bls.n	8014752 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801474e:	2303      	movs	r3, #3
 8014750:	e1bd      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014752:	f7ff fc0c 	bl	8013f6e <LL_RCC_LSI1_IsReady>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d0f1      	beq.n	8014740 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801475c:	f7ff fc2a 	bl	8013fb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014760:	e008      	b.n	8014774 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014762:	f7fd ff51 	bl	8012608 <HAL_GetTick>
 8014766:	4602      	mov	r2, r0
 8014768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	2b03      	cmp	r3, #3
 801476e:	d901      	bls.n	8014774 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8014770:	2303      	movs	r3, #3
 8014772:	e1ac      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014774:	f7ff fc2f 	bl	8013fd6 <LL_RCC_LSI2_IsReady>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d1f1      	bne.n	8014762 <HAL_RCC_OscConfig+0x36e>
 801477e:	e027      	b.n	80147d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8014780:	f7ff fc18 	bl	8013fb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014784:	f7fd ff40 	bl	8012608 <HAL_GetTick>
 8014788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801478a:	e008      	b.n	801479e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801478c:	f7fd ff3c 	bl	8012608 <HAL_GetTick>
 8014790:	4602      	mov	r2, r0
 8014792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	2b03      	cmp	r3, #3
 8014798:	d901      	bls.n	801479e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801479a:	2303      	movs	r3, #3
 801479c:	e197      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801479e:	f7ff fc1a 	bl	8013fd6 <LL_RCC_LSI2_IsReady>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d1f1      	bne.n	801478c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80147a8:	f7ff fbd0 	bl	8013f4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147ac:	f7fd ff2c 	bl	8012608 <HAL_GetTick>
 80147b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80147b2:	e008      	b.n	80147c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80147b4:	f7fd ff28 	bl	8012608 <HAL_GetTick>
 80147b8:	4602      	mov	r2, r0
 80147ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147bc:	1ad3      	subs	r3, r2, r3
 80147be:	2b02      	cmp	r3, #2
 80147c0:	d901      	bls.n	80147c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80147c2:	2303      	movs	r3, #3
 80147c4:	e183      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80147c6:	f7ff fbd2 	bl	8013f6e <LL_RCC_LSI1_IsReady>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d1f1      	bne.n	80147b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	f003 0304 	and.w	r3, r3, #4
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d05b      	beq.n	8014894 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80147dc:	4ba7      	ldr	r3, [pc, #668]	@ (8014a7c <HAL_RCC_OscConfig+0x688>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d114      	bne.n	8014812 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80147e8:	f7ff fa70 	bl	8013ccc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80147ec:	f7fd ff0c 	bl	8012608 <HAL_GetTick>
 80147f0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80147f2:	e008      	b.n	8014806 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80147f4:	f7fd ff08 	bl	8012608 <HAL_GetTick>
 80147f8:	4602      	mov	r2, r0
 80147fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fc:	1ad3      	subs	r3, r2, r3
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d901      	bls.n	8014806 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8014802:	2303      	movs	r3, #3
 8014804:	e163      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014806:	4b9d      	ldr	r3, [pc, #628]	@ (8014a7c <HAL_RCC_OscConfig+0x688>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801480e:	2b00      	cmp	r3, #0
 8014810:	d0f0      	beq.n	80147f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	689b      	ldr	r3, [r3, #8]
 8014816:	2b01      	cmp	r3, #1
 8014818:	d102      	bne.n	8014820 <HAL_RCC_OscConfig+0x42c>
 801481a:	f7ff fb30 	bl	8013e7e <LL_RCC_LSE_Enable>
 801481e:	e00c      	b.n	801483a <HAL_RCC_OscConfig+0x446>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	2b05      	cmp	r3, #5
 8014826:	d104      	bne.n	8014832 <HAL_RCC_OscConfig+0x43e>
 8014828:	f7ff fb4b 	bl	8013ec2 <LL_RCC_LSE_EnableBypass>
 801482c:	f7ff fb27 	bl	8013e7e <LL_RCC_LSE_Enable>
 8014830:	e003      	b.n	801483a <HAL_RCC_OscConfig+0x446>
 8014832:	f7ff fb35 	bl	8013ea0 <LL_RCC_LSE_Disable>
 8014836:	f7ff fb55 	bl	8013ee4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	689b      	ldr	r3, [r3, #8]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d014      	beq.n	801486c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014842:	f7fd fee1 	bl	8012608 <HAL_GetTick>
 8014846:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8014848:	e00a      	b.n	8014860 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801484a:	f7fd fedd 	bl	8012608 <HAL_GetTick>
 801484e:	4602      	mov	r2, r0
 8014850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014858:	4293      	cmp	r3, r2
 801485a:	d901      	bls.n	8014860 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801485c:	2303      	movs	r3, #3
 801485e:	e136      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8014860:	f7ff fb51 	bl	8013f06 <LL_RCC_LSE_IsReady>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	d0ef      	beq.n	801484a <HAL_RCC_OscConfig+0x456>
 801486a:	e013      	b.n	8014894 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801486c:	f7fd fecc 	bl	8012608 <HAL_GetTick>
 8014870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8014872:	e00a      	b.n	801488a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014874:	f7fd fec8 	bl	8012608 <HAL_GetTick>
 8014878:	4602      	mov	r2, r0
 801487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801487c:	1ad3      	subs	r3, r2, r3
 801487e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014882:	4293      	cmp	r3, r2
 8014884:	d901      	bls.n	801488a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8014886:	2303      	movs	r3, #3
 8014888:	e121      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801488a:	f7ff fb3c 	bl	8013f06 <LL_RCC_LSE_IsReady>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d1ef      	bne.n	8014874 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801489c:	2b00      	cmp	r3, #0
 801489e:	d02c      	beq.n	80148fa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d014      	beq.n	80148d2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80148a8:	f7ff fab5 	bl	8013e16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80148ac:	f7fd feac 	bl	8012608 <HAL_GetTick>
 80148b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80148b2:	e008      	b.n	80148c6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148b4:	f7fd fea8 	bl	8012608 <HAL_GetTick>
 80148b8:	4602      	mov	r2, r0
 80148ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	2b02      	cmp	r3, #2
 80148c0:	d901      	bls.n	80148c6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80148c2:	2303      	movs	r3, #3
 80148c4:	e103      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80148c6:	f7ff fac8 	bl	8013e5a <LL_RCC_HSI48_IsReady>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d0f1      	beq.n	80148b4 <HAL_RCC_OscConfig+0x4c0>
 80148d0:	e013      	b.n	80148fa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80148d2:	f7ff fab1 	bl	8013e38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80148d6:	f7fd fe97 	bl	8012608 <HAL_GetTick>
 80148da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80148dc:	e008      	b.n	80148f0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148de:	f7fd fe93 	bl	8012608 <HAL_GetTick>
 80148e2:	4602      	mov	r2, r0
 80148e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	2b02      	cmp	r3, #2
 80148ea:	d901      	bls.n	80148f0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80148ec:	2303      	movs	r3, #3
 80148ee:	e0ee      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80148f0:	f7ff fab3 	bl	8013e5a <LL_RCC_HSI48_IsReady>
 80148f4:	4603      	mov	r3, r0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d1f1      	bne.n	80148de <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f000 80e4 	beq.w	8014acc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014904:	f7ff fc11 	bl	801412a <LL_RCC_GetSysClkSource>
 8014908:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801490a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014916:	2b02      	cmp	r3, #2
 8014918:	f040 80b4 	bne.w	8014a84 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f003 0203 	and.w	r2, r3, #3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014926:	429a      	cmp	r2, r3
 8014928:	d123      	bne.n	8014972 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014934:	429a      	cmp	r2, r3
 8014936:	d11c      	bne.n	8014972 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	0a1b      	lsrs	r3, r3, #8
 801493c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014944:	429a      	cmp	r2, r3
 8014946:	d114      	bne.n	8014972 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014952:	429a      	cmp	r2, r3
 8014954:	d10d      	bne.n	8014972 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014960:	429a      	cmp	r2, r3
 8014962:	d106      	bne.n	8014972 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801496e:	429a      	cmp	r2, r3
 8014970:	d05d      	beq.n	8014a2e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2b0c      	cmp	r3, #12
 8014976:	d058      	beq.n	8014a2a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014982:	2b00      	cmp	r3, #0
 8014984:	d001      	beq.n	801498a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8014986:	2301      	movs	r3, #1
 8014988:	e0a1      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801498a:	f7ff fc84 	bl	8014296 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801498e:	f7fd fe3b 	bl	8012608 <HAL_GetTick>
 8014992:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014994:	e008      	b.n	80149a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014996:	f7fd fe37 	bl	8012608 <HAL_GetTick>
 801499a:	4602      	mov	r2, r0
 801499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	2b02      	cmp	r3, #2
 80149a2:	d901      	bls.n	80149a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80149a4:	2303      	movs	r3, #3
 80149a6:	e092      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80149a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1ef      	bne.n	8014996 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80149b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149ba:	68da      	ldr	r2, [r3, #12]
 80149bc:	4b30      	ldr	r3, [pc, #192]	@ (8014a80 <HAL_RCC_OscConfig+0x68c>)
 80149be:	4013      	ands	r3, r2
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80149c8:	4311      	orrs	r1, r2
 80149ca:	687a      	ldr	r2, [r7, #4]
 80149cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80149ce:	0212      	lsls	r2, r2, #8
 80149d0:	4311      	orrs	r1, r2
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80149d6:	4311      	orrs	r1, r2
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80149dc:	4311      	orrs	r1, r2
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80149e2:	430a      	orrs	r2, r1
 80149e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80149e8:	4313      	orrs	r3, r2
 80149ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80149ec:	f7ff fc44 	bl	8014278 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80149f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149f4:	68db      	ldr	r3, [r3, #12]
 80149f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80149fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80149fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014a00:	f7fd fe02 	bl	8012608 <HAL_GetTick>
 8014a04:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a06:	e008      	b.n	8014a1a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a08:	f7fd fdfe 	bl	8012608 <HAL_GetTick>
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	2b02      	cmp	r3, #2
 8014a14:	d901      	bls.n	8014a1a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8014a16:	2303      	movs	r3, #3
 8014a18:	e059      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d0ef      	beq.n	8014a08 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014a28:	e050      	b.n	8014acc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e04f      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d147      	bne.n	8014acc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014a3c:	f7ff fc1c 	bl	8014278 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a44:	68db      	ldr	r3, [r3, #12]
 8014a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014a50:	f7fd fdda 	bl	8012608 <HAL_GetTick>
 8014a54:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a56:	e008      	b.n	8014a6a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a58:	f7fd fdd6 	bl	8012608 <HAL_GetTick>
 8014a5c:	4602      	mov	r2, r0
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a60:	1ad3      	subs	r3, r2, r3
 8014a62:	2b02      	cmp	r3, #2
 8014a64:	d901      	bls.n	8014a6a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8014a66:	2303      	movs	r3, #3
 8014a68:	e031      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d0ef      	beq.n	8014a58 <HAL_RCC_OscConfig+0x664>
 8014a78:	e028      	b.n	8014acc <HAL_RCC_OscConfig+0x6d8>
 8014a7a:	bf00      	nop
 8014a7c:	58000400 	.word	0x58000400
 8014a80:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014a84:	693b      	ldr	r3, [r7, #16]
 8014a86:	2b0c      	cmp	r3, #12
 8014a88:	d01e      	beq.n	8014ac8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014a8a:	f7ff fc04 	bl	8014296 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a8e:	f7fd fdbb 	bl	8012608 <HAL_GetTick>
 8014a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014a94:	e008      	b.n	8014aa8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a96:	f7fd fdb7 	bl	8012608 <HAL_GetTick>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9e:	1ad3      	subs	r3, r2, r3
 8014aa0:	2b02      	cmp	r3, #2
 8014aa2:	d901      	bls.n	8014aa8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8014aa4:	2303      	movs	r3, #3
 8014aa6:	e012      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d1ef      	bne.n	8014a96 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8014ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014aba:	68da      	ldr	r2, [r3, #12]
 8014abc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ac0:	4b05      	ldr	r3, [pc, #20]	@ (8014ad8 <HAL_RCC_OscConfig+0x6e4>)
 8014ac2:	4013      	ands	r3, r2
 8014ac4:	60cb      	str	r3, [r1, #12]
 8014ac6:	e001      	b.n	8014acc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	e000      	b.n	8014ace <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8014acc:	2300      	movs	r3, #0
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3734      	adds	r7, #52	@ 0x34
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd90      	pop	{r4, r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	eefefffc 	.word	0xeefefffc

08014adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d101      	bne.n	8014af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014aec:	2301      	movs	r3, #1
 8014aee:	e12d      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014af0:	4b98      	ldr	r3, [pc, #608]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f003 0307 	and.w	r3, r3, #7
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d91b      	bls.n	8014b36 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014afe:	4b95      	ldr	r3, [pc, #596]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	f023 0207 	bic.w	r2, r3, #7
 8014b06:	4993      	ldr	r1, [pc, #588]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	4313      	orrs	r3, r2
 8014b0c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b0e:	f7fd fd7b 	bl	8012608 <HAL_GetTick>
 8014b12:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b14:	e008      	b.n	8014b28 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014b16:	f7fd fd77 	bl	8012608 <HAL_GetTick>
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	2b02      	cmp	r3, #2
 8014b22:	d901      	bls.n	8014b28 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8014b24:	2303      	movs	r3, #3
 8014b26:	e111      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b28:	4b8a      	ldr	r3, [pc, #552]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	f003 0307 	and.w	r3, r3, #7
 8014b30:	683a      	ldr	r2, [r7, #0]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d1ef      	bne.n	8014b16 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f003 0302 	and.w	r3, r3, #2
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d016      	beq.n	8014b70 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fafb 	bl	8014142 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014b4c:	f7fd fd5c 	bl	8012608 <HAL_GetTick>
 8014b50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014b52:	e008      	b.n	8014b66 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014b54:	f7fd fd58 	bl	8012608 <HAL_GetTick>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	d901      	bls.n	8014b66 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8014b62:	2303      	movs	r3, #3
 8014b64:	e0f2      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014b66:	f7ff fbe8 	bl	801433a <LL_RCC_IsActiveFlag_HPRE>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d0f1      	beq.n	8014b54 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f003 0320 	and.w	r3, r3, #32
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d016      	beq.n	8014baa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	695b      	ldr	r3, [r3, #20]
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7ff faf2 	bl	801416a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014b86:	f7fd fd3f 	bl	8012608 <HAL_GetTick>
 8014b8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014b8c:	e008      	b.n	8014ba0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014b8e:	f7fd fd3b 	bl	8012608 <HAL_GetTick>
 8014b92:	4602      	mov	r2, r0
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	1ad3      	subs	r3, r2, r3
 8014b98:	2b02      	cmp	r3, #2
 8014b9a:	d901      	bls.n	8014ba0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8014b9c:	2303      	movs	r3, #3
 8014b9e:	e0d5      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014ba0:	f7ff fbdd 	bl	801435e <LL_RCC_IsActiveFlag_C2HPRE>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d0f1      	beq.n	8014b8e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d016      	beq.n	8014be4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	699b      	ldr	r3, [r3, #24]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7ff faeb 	bl	8014196 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014bc0:	f7fd fd22 	bl	8012608 <HAL_GetTick>
 8014bc4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014bc6:	e008      	b.n	8014bda <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014bc8:	f7fd fd1e 	bl	8012608 <HAL_GetTick>
 8014bcc:	4602      	mov	r2, r0
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	1ad3      	subs	r3, r2, r3
 8014bd2:	2b02      	cmp	r3, #2
 8014bd4:	d901      	bls.n	8014bda <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8014bd6:	2303      	movs	r3, #3
 8014bd8:	e0b8      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014bda:	f7ff fbd3 	bl	8014384 <LL_RCC_IsActiveFlag_SHDHPRE>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d0f1      	beq.n	8014bc8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f003 0304 	and.w	r3, r3, #4
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d016      	beq.n	8014c1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7ff fae5 	bl	80141c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014bfa:	f7fd fd05 	bl	8012608 <HAL_GetTick>
 8014bfe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014c00:	e008      	b.n	8014c14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014c02:	f7fd fd01 	bl	8012608 <HAL_GetTick>
 8014c06:	4602      	mov	r2, r0
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	1ad3      	subs	r3, r2, r3
 8014c0c:	2b02      	cmp	r3, #2
 8014c0e:	d901      	bls.n	8014c14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8014c10:	2303      	movs	r3, #3
 8014c12:	e09b      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014c14:	f7ff fbc9 	bl	80143aa <LL_RCC_IsActiveFlag_PPRE1>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d0f1      	beq.n	8014c02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f003 0308 	and.w	r3, r3, #8
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d017      	beq.n	8014c5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	691b      	ldr	r3, [r3, #16]
 8014c2e:	00db      	lsls	r3, r3, #3
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7ff fadb 	bl	80141ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014c36:	f7fd fce7 	bl	8012608 <HAL_GetTick>
 8014c3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014c3c:	e008      	b.n	8014c50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014c3e:	f7fd fce3 	bl	8012608 <HAL_GetTick>
 8014c42:	4602      	mov	r2, r0
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	1ad3      	subs	r3, r2, r3
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	d901      	bls.n	8014c50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8014c4c:	2303      	movs	r3, #3
 8014c4e:	e07d      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014c50:	f7ff fbbd 	bl	80143ce <LL_RCC_IsActiveFlag_PPRE2>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0f1      	beq.n	8014c3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	f003 0301 	and.w	r3, r3, #1
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d043      	beq.n	8014cee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	2b02      	cmp	r3, #2
 8014c6c:	d106      	bne.n	8014c7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8014c6e:	f7ff f87b 	bl	8013d68 <LL_RCC_HSE_IsReady>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d11e      	bne.n	8014cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014c78:	2301      	movs	r3, #1
 8014c7a:	e067      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	685b      	ldr	r3, [r3, #4]
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d106      	bne.n	8014c92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8014c84:	f7ff fb16 	bl	80142b4 <LL_RCC_PLL_IsReady>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d113      	bne.n	8014cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e05c      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d106      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8014c9a:	f7ff f9e3 	bl	8014064 <LL_RCC_MSI_IsReady>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d108      	bne.n	8014cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e051      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8014ca8:	f7ff f88e 	bl	8013dc8 <LL_RCC_HSI_IsReady>
 8014cac:	4603      	mov	r3, r0
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d101      	bne.n	8014cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e04a      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7ff fa21 	bl	8014102 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014cc0:	f7fd fca2 	bl	8012608 <HAL_GetTick>
 8014cc4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cc6:	e00a      	b.n	8014cde <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014cc8:	f7fd fc9e 	bl	8012608 <HAL_GetTick>
 8014ccc:	4602      	mov	r2, r0
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	1ad3      	subs	r3, r2, r3
 8014cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d901      	bls.n	8014cde <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8014cda:	2303      	movs	r3, #3
 8014cdc:	e036      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cde:	f7ff fa24 	bl	801412a <LL_RCC_GetSysClkSource>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	685b      	ldr	r3, [r3, #4]
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d1ec      	bne.n	8014cc8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014cee:	4b19      	ldr	r3, [pc, #100]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	f003 0307 	and.w	r3, r3, #7
 8014cf6:	683a      	ldr	r2, [r7, #0]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d21b      	bcs.n	8014d34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014cfc:	4b15      	ldr	r3, [pc, #84]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f023 0207 	bic.w	r2, r3, #7
 8014d04:	4913      	ldr	r1, [pc, #76]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	4313      	orrs	r3, r2
 8014d0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d0c:	f7fd fc7c 	bl	8012608 <HAL_GetTick>
 8014d10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d12:	e008      	b.n	8014d26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014d14:	f7fd fc78 	bl	8012608 <HAL_GetTick>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	1ad3      	subs	r3, r2, r3
 8014d1e:	2b02      	cmp	r3, #2
 8014d20:	d901      	bls.n	8014d26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8014d22:	2303      	movs	r3, #3
 8014d24:	e012      	b.n	8014d4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d26:	4b0b      	ldr	r3, [pc, #44]	@ (8014d54 <HAL_RCC_ClockConfig+0x278>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f003 0307 	and.w	r3, r3, #7
 8014d2e:	683a      	ldr	r2, [r7, #0]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d1ef      	bne.n	8014d14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8014d34:	f000 f87e 	bl	8014e34 <HAL_RCC_GetHCLKFreq>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	4a07      	ldr	r2, [pc, #28]	@ (8014d58 <HAL_RCC_ClockConfig+0x27c>)
 8014d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8014d3e:	f7fd fc6f 	bl	8012620 <HAL_GetTickPrio>
 8014d42:	4603      	mov	r3, r0
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fd fc11 	bl	801256c <HAL_InitTick>
 8014d4a:	4603      	mov	r3, r0
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3710      	adds	r7, #16
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}
 8014d54:	58004000 	.word	0x58004000
 8014d58:	20000008 	.word	0x20000008

08014d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014d5c:	b590      	push	{r4, r7, lr}
 8014d5e:	b085      	sub	sp, #20
 8014d60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014d62:	f7ff f9e2 	bl	801412a <LL_RCC_GetSysClkSource>
 8014d66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d10a      	bne.n	8014d84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014d6e:	f7ff f99e 	bl	80140ae <LL_RCC_MSI_GetRange>
 8014d72:	4603      	mov	r3, r0
 8014d74:	091b      	lsrs	r3, r3, #4
 8014d76:	f003 030f 	and.w	r3, r3, #15
 8014d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8014d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d80:	60fb      	str	r3, [r7, #12]
 8014d82:	e04b      	b.n	8014e1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b04      	cmp	r3, #4
 8014d88:	d102      	bne.n	8014d90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014d8a:	4b28      	ldr	r3, [pc, #160]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8014d8c:	60fb      	str	r3, [r7, #12]
 8014d8e:	e045      	b.n	8014e1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2b08      	cmp	r3, #8
 8014d94:	d10a      	bne.n	8014dac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014d96:	f7fe ffb7 	bl	8013d08 <LL_RCC_HSE_IsEnabledDiv2>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d102      	bne.n	8014da6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8014da0:	4b22      	ldr	r3, [pc, #136]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	e03a      	b.n	8014e1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8014da6:	4b22      	ldr	r3, [pc, #136]	@ (8014e30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8014da8:	60fb      	str	r3, [r7, #12]
 8014daa:	e037      	b.n	8014e1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8014dac:	f7ff fab9 	bl	8014322 <LL_RCC_PLL_GetMainSource>
 8014db0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	2b02      	cmp	r3, #2
 8014db6:	d003      	beq.n	8014dc0 <HAL_RCC_GetSysClockFreq+0x64>
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	2b03      	cmp	r3, #3
 8014dbc:	d003      	beq.n	8014dc6 <HAL_RCC_GetSysClockFreq+0x6a>
 8014dbe:	e00d      	b.n	8014ddc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8014dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8014dc2:	60bb      	str	r3, [r7, #8]
        break;
 8014dc4:	e015      	b.n	8014df2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014dc6:	f7fe ff9f 	bl	8013d08 <LL_RCC_HSE_IsEnabledDiv2>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d102      	bne.n	8014dd6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8014dd0:	4b16      	ldr	r3, [pc, #88]	@ (8014e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8014dd2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8014dd4:	e00d      	b.n	8014df2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8014dd6:	4b16      	ldr	r3, [pc, #88]	@ (8014e30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8014dd8:	60bb      	str	r3, [r7, #8]
        break;
 8014dda:	e00a      	b.n	8014df2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014ddc:	f7ff f967 	bl	80140ae <LL_RCC_MSI_GetRange>
 8014de0:	4603      	mov	r3, r0
 8014de2:	091b      	lsrs	r3, r3, #4
 8014de4:	f003 030f 	and.w	r3, r3, #15
 8014de8:	4a0f      	ldr	r2, [pc, #60]	@ (8014e28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8014dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dee:	60bb      	str	r3, [r7, #8]
        break;
 8014df0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8014df2:	f7ff fa71 	bl	80142d8 <LL_RCC_PLL_GetN>
 8014df6:	4602      	mov	r2, r0
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	fb03 f402 	mul.w	r4, r3, r2
 8014dfe:	f7ff fa84 	bl	801430a <LL_RCC_PLL_GetDivider>
 8014e02:	4603      	mov	r3, r0
 8014e04:	091b      	lsrs	r3, r3, #4
 8014e06:	3301      	adds	r3, #1
 8014e08:	fbb4 f4f3 	udiv	r4, r4, r3
 8014e0c:	f7ff fa71 	bl	80142f2 <LL_RCC_PLL_GetR>
 8014e10:	4603      	mov	r3, r0
 8014e12:	0f5b      	lsrs	r3, r3, #29
 8014e14:	3301      	adds	r3, #1
 8014e16:	fbb4 f3f3 	udiv	r3, r4, r3
 8014e1a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3714      	adds	r7, #20
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd90      	pop	{r4, r7, pc}
 8014e26:	bf00      	nop
 8014e28:	08017a88 	.word	0x08017a88
 8014e2c:	00f42400 	.word	0x00f42400
 8014e30:	01e84800 	.word	0x01e84800

08014e34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014e34:	b598      	push	{r3, r4, r7, lr}
 8014e36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8014e38:	f7ff ff90 	bl	8014d5c <HAL_RCC_GetSysClockFreq>
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	f7ff f9e9 	bl	8014214 <LL_RCC_GetAHBPrescaler>
 8014e42:	4603      	mov	r3, r0
 8014e44:	091b      	lsrs	r3, r3, #4
 8014e46:	f003 030f 	and.w	r3, r3, #15
 8014e4a:	4a03      	ldr	r2, [pc, #12]	@ (8014e58 <HAL_RCC_GetHCLKFreq+0x24>)
 8014e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	bd98      	pop	{r3, r4, r7, pc}
 8014e58:	08017a28 	.word	0x08017a28

08014e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014e5c:	b598      	push	{r3, r4, r7, lr}
 8014e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8014e60:	f7ff ffe8 	bl	8014e34 <HAL_RCC_GetHCLKFreq>
 8014e64:	4604      	mov	r4, r0
 8014e66:	f7ff f9ef 	bl	8014248 <LL_RCC_GetAPB1Prescaler>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	0a1b      	lsrs	r3, r3, #8
 8014e6e:	f003 0307 	and.w	r3, r3, #7
 8014e72:	4a04      	ldr	r2, [pc, #16]	@ (8014e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e78:	f003 031f 	and.w	r3, r3, #31
 8014e7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	bd98      	pop	{r3, r4, r7, pc}
 8014e84:	08017a68 	.word	0x08017a68

08014e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014e88:	b598      	push	{r3, r4, r7, lr}
 8014e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8014e8c:	f7ff ffd2 	bl	8014e34 <HAL_RCC_GetHCLKFreq>
 8014e90:	4604      	mov	r4, r0
 8014e92:	f7ff f9e5 	bl	8014260 <LL_RCC_GetAPB2Prescaler>
 8014e96:	4603      	mov	r3, r0
 8014e98:	0adb      	lsrs	r3, r3, #11
 8014e9a:	f003 0307 	and.w	r3, r3, #7
 8014e9e:	4a04      	ldr	r2, [pc, #16]	@ (8014eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ea4:	f003 031f 	and.w	r3, r3, #31
 8014ea8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	bd98      	pop	{r3, r4, r7, pc}
 8014eb0:	08017a68 	.word	0x08017a68

08014eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8014eb4:	b590      	push	{r4, r7, lr}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2bb0      	cmp	r3, #176	@ 0xb0
 8014ec0:	d903      	bls.n	8014eca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8014ec2:	4b15      	ldr	r3, [pc, #84]	@ (8014f18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ec6:	60fb      	str	r3, [r7, #12]
 8014ec8:	e007      	b.n	8014eda <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	091b      	lsrs	r3, r3, #4
 8014ece:	f003 030f 	and.w	r3, r3, #15
 8014ed2:	4a11      	ldr	r2, [pc, #68]	@ (8014f18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ed8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8014eda:	f7ff f9a7 	bl	801422c <LL_RCC_GetAHB4Prescaler>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	091b      	lsrs	r3, r3, #4
 8014ee2:	f003 030f 	and.w	r3, r3, #15
 8014ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8014f1c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8014ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014eec:	68fa      	ldr	r2, [r7, #12]
 8014eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ef2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8014f20 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8014ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8014efc:	0c9c      	lsrs	r4, r3, #18
 8014efe:	f7fe fef5 	bl	8013cec <HAL_PWREx_GetVoltageRange>
 8014f02:	4603      	mov	r3, r0
 8014f04:	4619      	mov	r1, r3
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 f80c 	bl	8014f24 <RCC_SetFlashLatency>
 8014f0c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3714      	adds	r7, #20
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd90      	pop	{r4, r7, pc}
 8014f16:	bf00      	nop
 8014f18:	08017a88 	.word	0x08017a88
 8014f1c:	08017a28 	.word	0x08017a28
 8014f20:	431bde83 	.word	0x431bde83

08014f24 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8014f24:	b590      	push	{r4, r7, lr}
 8014f26:	b093      	sub	sp, #76	@ 0x4c
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
 8014f2c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8014f2e:	4b37      	ldr	r3, [pc, #220]	@ (801500c <RCC_SetFlashLatency+0xe8>)
 8014f30:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8014f34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8014f3a:	4a35      	ldr	r2, [pc, #212]	@ (8015010 <RCC_SetFlashLatency+0xec>)
 8014f3c:	f107 031c 	add.w	r3, r7, #28
 8014f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8014f42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8014f46:	4b33      	ldr	r3, [pc, #204]	@ (8015014 <RCC_SetFlashLatency+0xf0>)
 8014f48:	f107 040c 	add.w	r4, r7, #12
 8014f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8014f52:	2300      	movs	r3, #0
 8014f54:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f5c:	d11a      	bne.n	8014f94 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014f5e:	2300      	movs	r3, #0
 8014f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f62:	e013      	b.n	8014f8c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8014f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	3348      	adds	r3, #72	@ 0x48
 8014f6a:	443b      	add	r3, r7
 8014f6c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d807      	bhi.n	8014f86 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f78:	009b      	lsls	r3, r3, #2
 8014f7a:	3348      	adds	r3, #72	@ 0x48
 8014f7c:	443b      	add	r3, r7
 8014f7e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014f82:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014f84:	e020      	b.n	8014fc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f88:	3301      	adds	r3, #1
 8014f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d9e8      	bls.n	8014f64 <RCC_SetFlashLatency+0x40>
 8014f92:	e019      	b.n	8014fc8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014f94:	2300      	movs	r3, #0
 8014f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f98:	e013      	b.n	8014fc2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8014f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	3348      	adds	r3, #72	@ 0x48
 8014fa0:	443b      	add	r3, r7
 8014fa2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d807      	bhi.n	8014fbc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	3348      	adds	r3, #72	@ 0x48
 8014fb2:	443b      	add	r3, r7
 8014fb4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014fb8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014fba:	e005      	b.n	8014fc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fc4:	2b02      	cmp	r3, #2
 8014fc6:	d9e8      	bls.n	8014f9a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8014fc8:	4b13      	ldr	r3, [pc, #76]	@ (8015018 <RCC_SetFlashLatency+0xf4>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	f023 0207 	bic.w	r2, r3, #7
 8014fd0:	4911      	ldr	r1, [pc, #68]	@ (8015018 <RCC_SetFlashLatency+0xf4>)
 8014fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fd4:	4313      	orrs	r3, r2
 8014fd6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014fd8:	f7fd fb16 	bl	8012608 <HAL_GetTick>
 8014fdc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014fde:	e008      	b.n	8014ff2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014fe0:	f7fd fb12 	bl	8012608 <HAL_GetTick>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe8:	1ad3      	subs	r3, r2, r3
 8014fea:	2b02      	cmp	r3, #2
 8014fec:	d901      	bls.n	8014ff2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8014fee:	2303      	movs	r3, #3
 8014ff0:	e007      	b.n	8015002 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014ff2:	4b09      	ldr	r3, [pc, #36]	@ (8015018 <RCC_SetFlashLatency+0xf4>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f003 0307 	and.w	r3, r3, #7
 8014ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d1ef      	bne.n	8014fe0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8015000:	2300      	movs	r3, #0
}
 8015002:	4618      	mov	r0, r3
 8015004:	374c      	adds	r7, #76	@ 0x4c
 8015006:	46bd      	mov	sp, r7
 8015008:	bd90      	pop	{r4, r7, pc}
 801500a:	bf00      	nop
 801500c:	0801785c 	.word	0x0801785c
 8015010:	0801786c 	.word	0x0801786c
 8015014:	08017878 	.word	0x08017878
 8015018:	58004000 	.word	0x58004000

0801501c <LL_RCC_LSE_IsEnabled>:
{
 801501c:	b480      	push	{r7}
 801501e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8015020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015028:	f003 0301 	and.w	r3, r3, #1
 801502c:	2b01      	cmp	r3, #1
 801502e:	d101      	bne.n	8015034 <LL_RCC_LSE_IsEnabled+0x18>
 8015030:	2301      	movs	r3, #1
 8015032:	e000      	b.n	8015036 <LL_RCC_LSE_IsEnabled+0x1a>
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <LL_RCC_LSE_IsReady>:
{
 8015040:	b480      	push	{r7}
 8015042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8015044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801504c:	f003 0302 	and.w	r3, r3, #2
 8015050:	2b02      	cmp	r3, #2
 8015052:	d101      	bne.n	8015058 <LL_RCC_LSE_IsReady+0x18>
 8015054:	2301      	movs	r3, #1
 8015056:	e000      	b.n	801505a <LL_RCC_LSE_IsReady+0x1a>
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <LL_RCC_MSI_EnablePLLMode>:
{
 8015064:	b480      	push	{r7}
 8015066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8015068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015072:	f043 0304 	orr.w	r3, r3, #4
 8015076:	6013      	str	r3, [r2, #0]
}
 8015078:	bf00      	nop
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <LL_RCC_SetRFWKPClockSource>:
{
 8015082:	b480      	push	{r7}
 8015084:	b083      	sub	sp, #12
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801508a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801508e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015092:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8015096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4313      	orrs	r3, r2
 801509e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80150a2:	bf00      	nop
 80150a4:	370c      	adds	r7, #12
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr

080150ae <LL_RCC_SetSMPSClockSource>:
{
 80150ae:	b480      	push	{r7}
 80150b0:	b083      	sub	sp, #12
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80150b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80150ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150bc:	f023 0203 	bic.w	r2, r3, #3
 80150c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	4313      	orrs	r3, r2
 80150c8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80150ca:	bf00      	nop
 80150cc:	370c      	adds	r7, #12
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr

080150d6 <LL_RCC_SetSMPSPrescaler>:
{
 80150d6:	b480      	push	{r7}
 80150d8:	b083      	sub	sp, #12
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80150de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80150e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80150e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4313      	orrs	r3, r2
 80150f0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80150f2:	bf00      	nop
 80150f4:	370c      	adds	r7, #12
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr

080150fe <LL_RCC_SetUSARTClockSource>:
{
 80150fe:	b480      	push	{r7}
 8015100:	b083      	sub	sp, #12
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8015106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801510e:	f023 0203 	bic.w	r2, r3, #3
 8015112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	4313      	orrs	r3, r2
 801511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801511e:	bf00      	nop
 8015120:	370c      	adds	r7, #12
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr

0801512a <LL_RCC_SetLPUARTClockSource>:
{
 801512a:	b480      	push	{r7}
 801512c:	b083      	sub	sp, #12
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8015132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801513a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801513e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4313      	orrs	r3, r2
 8015146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801514a:	bf00      	nop
 801514c:	370c      	adds	r7, #12
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <LL_RCC_SetI2CClockSource>:
{
 8015156:	b480      	push	{r7}
 8015158:	b083      	sub	sp, #12
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015162:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	091b      	lsrs	r3, r3, #4
 801516a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 801516e:	43db      	mvns	r3, r3
 8015170:	401a      	ands	r2, r3
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	011b      	lsls	r3, r3, #4
 8015176:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 801517a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801517e:	4313      	orrs	r3, r2
 8015180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015184:	bf00      	nop
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <LL_RCC_SetLPTIMClockSource>:
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8015198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801519c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	0c1b      	lsrs	r3, r3, #16
 80151a4:	041b      	lsls	r3, r3, #16
 80151a6:	43db      	mvns	r3, r3
 80151a8:	401a      	ands	r2, r3
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	041b      	lsls	r3, r3, #16
 80151ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80151b2:	4313      	orrs	r3, r2
 80151b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80151b8:	bf00      	nop
 80151ba:	370c      	adds	r7, #12
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <LL_RCC_SetSAIClockSource>:
{
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80151cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80151d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	4313      	orrs	r3, r2
 80151e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80151e4:	bf00      	nop
 80151e6:	370c      	adds	r7, #12
 80151e8:	46bd      	mov	sp, r7
 80151ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ee:	4770      	bx	lr

080151f0 <LL_RCC_SetRNGClockSource>:
{
 80151f0:	b480      	push	{r7}
 80151f2:	b083      	sub	sp, #12
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80151f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015200:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8015204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4313      	orrs	r3, r2
 801520c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015210:	bf00      	nop
 8015212:	370c      	adds	r7, #12
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr

0801521c <LL_RCC_SetCLK48ClockSource>:
{
 801521c:	b480      	push	{r7}
 801521e:	b083      	sub	sp, #12
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8015224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801522c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8015230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	4313      	orrs	r3, r2
 8015238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801523c:	bf00      	nop
 801523e:	370c      	adds	r7, #12
 8015240:	46bd      	mov	sp, r7
 8015242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015246:	4770      	bx	lr

08015248 <LL_RCC_SetUSBClockSource>:
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7ff ffe3 	bl	801521c <LL_RCC_SetCLK48ClockSource>
}
 8015256:	bf00      	nop
 8015258:	3708      	adds	r7, #8
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <LL_RCC_SetADCClockSource>:
{
 801525e:	b480      	push	{r7}
 8015260:	b083      	sub	sp, #12
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8015266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801526e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8015272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	4313      	orrs	r3, r2
 801527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801527e:	bf00      	nop
 8015280:	370c      	adds	r7, #12
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr

0801528a <LL_RCC_SetRTCClockSource>:
{
 801528a:	b480      	push	{r7}
 801528c:	b083      	sub	sp, #12
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8015292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801529a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801529e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4313      	orrs	r3, r2
 80152a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80152aa:	bf00      	nop
 80152ac:	370c      	adds	r7, #12
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr

080152b6 <LL_RCC_GetRTCClockSource>:
{
 80152b6:	b480      	push	{r7}
 80152b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80152ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <LL_RCC_ForceBackupDomainReset>:
{
 80152d0:	b480      	push	{r7}
 80152d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80152d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80152e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80152e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80152e8:	bf00      	nop
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80152f2:	b480      	push	{r7}
 80152f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80152f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80152fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801530a:	bf00      	nop
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <LL_RCC_PLLSAI1_Enable>:
{
 8015314:	b480      	push	{r7}
 8015316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8015318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015326:	6013      	str	r3, [r2, #0]
}
 8015328:	bf00      	nop
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr

08015332 <LL_RCC_PLLSAI1_Disable>:
{
 8015332:	b480      	push	{r7}
 8015334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8015336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015340:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8015344:	6013      	str	r3, [r2, #0]
}
 8015346:	bf00      	nop
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr

08015350 <LL_RCC_PLLSAI1_IsReady>:
{
 8015350:	b480      	push	{r7}
 8015352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8015354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801535e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015362:	d101      	bne.n	8015368 <LL_RCC_PLLSAI1_IsReady+0x18>
 8015364:	2301      	movs	r3, #1
 8015366:	e000      	b.n	801536a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8015368:	2300      	movs	r3, #0
}
 801536a:	4618      	mov	r0, r3
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr

08015374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b088      	sub	sp, #32
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801537c:	2300      	movs	r3, #0
 801537e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8015380:	2300      	movs	r3, #0
 8015382:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801538c:	2b00      	cmp	r3, #0
 801538e:	d034      	beq.n	80153fa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015394:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015398:	d021      	beq.n	80153de <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801539a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801539e:	d81b      	bhi.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80153a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80153a4:	d01d      	beq.n	80153e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80153a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80153aa:	d815      	bhi.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d00b      	beq.n	80153c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80153b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153b4:	d110      	bne.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80153b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80153c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80153c4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80153c6:	e00d      	b.n	80153e4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	3304      	adds	r3, #4
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 f94d 	bl	801566c <RCCEx_PLLSAI1_ConfigNP>
 80153d2:	4603      	mov	r3, r0
 80153d4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80153d6:	e005      	b.n	80153e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80153d8:	2301      	movs	r3, #1
 80153da:	77fb      	strb	r3, [r7, #31]
        break;
 80153dc:	e002      	b.n	80153e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80153de:	bf00      	nop
 80153e0:	e000      	b.n	80153e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80153e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153e4:	7ffb      	ldrb	r3, [r7, #31]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d105      	bne.n	80153f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7ff fee8 	bl	80151c4 <LL_RCC_SetSAIClockSource>
 80153f4:	e001      	b.n	80153fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80153f6:	7ffb      	ldrb	r3, [r7, #31]
 80153f8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015402:	2b00      	cmp	r3, #0
 8015404:	d046      	beq.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8015406:	f7ff ff56 	bl	80152b6 <LL_RCC_GetRTCClockSource>
 801540a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015410:	69ba      	ldr	r2, [r7, #24]
 8015412:	429a      	cmp	r2, r3
 8015414:	d03c      	beq.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8015416:	f7fe fc59 	bl	8013ccc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801541a:	69bb      	ldr	r3, [r7, #24]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d105      	bne.n	801542c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015424:	4618      	mov	r0, r3
 8015426:	f7ff ff30 	bl	801528a <LL_RCC_SetRTCClockSource>
 801542a:	e02e      	b.n	801548a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801542c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015434:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8015436:	f7ff ff4b 	bl	80152d0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801543a:	f7ff ff5a 	bl	80152f2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015448:	4313      	orrs	r3, r2
 801544a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801544c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8015456:	f7ff fde1 	bl	801501c <LL_RCC_LSE_IsEnabled>
 801545a:	4603      	mov	r3, r0
 801545c:	2b01      	cmp	r3, #1
 801545e:	d114      	bne.n	801548a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8015460:	f7fd f8d2 	bl	8012608 <HAL_GetTick>
 8015464:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8015466:	e00b      	b.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015468:	f7fd f8ce 	bl	8012608 <HAL_GetTick>
 801546c:	4602      	mov	r2, r0
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	1ad3      	subs	r3, r2, r3
 8015472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015476:	4293      	cmp	r3, r2
 8015478:	d902      	bls.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801547a:	2303      	movs	r3, #3
 801547c:	77fb      	strb	r3, [r7, #31]
              break;
 801547e:	e004      	b.n	801548a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8015480:	f7ff fdde 	bl	8015040 <LL_RCC_LSE_IsReady>
 8015484:	4603      	mov	r3, r0
 8015486:	2b01      	cmp	r3, #1
 8015488:	d1ee      	bne.n	8015468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801548a:	7ffb      	ldrb	r3, [r7, #31]
 801548c:	77bb      	strb	r3, [r7, #30]
 801548e:	e001      	b.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015490:	7ffb      	ldrb	r3, [r7, #31]
 8015492:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f003 0301 	and.w	r3, r3, #1
 801549c:	2b00      	cmp	r3, #0
 801549e:	d004      	beq.n	80154aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	699b      	ldr	r3, [r3, #24]
 80154a4:	4618      	mov	r0, r3
 80154a6:	f7ff fe2a 	bl	80150fe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	f003 0302 	and.w	r3, r3, #2
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d004      	beq.n	80154c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	69db      	ldr	r3, [r3, #28]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff fe35 	bl	801512a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f003 0310 	and.w	r3, r3, #16
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d004      	beq.n	80154d6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7ff fe5d 	bl	8015190 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f003 0320 	and.w	r3, r3, #32
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d004      	beq.n	80154ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7ff fe52 	bl	8015190 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f003 0304 	and.w	r3, r3, #4
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d004      	beq.n	8015502 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6a1b      	ldr	r3, [r3, #32]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7ff fe2a 	bl	8015156 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f003 0308 	and.w	r3, r3, #8
 801550a:	2b00      	cmp	r3, #0
 801550c:	d004      	beq.n	8015518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015512:	4618      	mov	r0, r3
 8015514:	f7ff fe1f 	bl	8015156 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015520:	2b00      	cmp	r3, #0
 8015522:	d022      	beq.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015528:	4618      	mov	r0, r3
 801552a:	f7ff fe8d 	bl	8015248 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015536:	d107      	bne.n	8015548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8015538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015546:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801554c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015550:	d10b      	bne.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	3304      	adds	r3, #4
 8015556:	4618      	mov	r0, r3
 8015558:	f000 f8e3 	bl	8015722 <RCCEx_PLLSAI1_ConfigNQ>
 801555c:	4603      	mov	r3, r0
 801555e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8015560:	7ffb      	ldrb	r3, [r7, #31]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d001      	beq.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8015566:	7ffb      	ldrb	r3, [r7, #31]
 8015568:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015572:	2b00      	cmp	r3, #0
 8015574:	d02b      	beq.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801557e:	d008      	beq.n	8015592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015588:	d003      	beq.n	8015592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558e:	2b00      	cmp	r3, #0
 8015590:	d105      	bne.n	801559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015596:	4618      	mov	r0, r3
 8015598:	f7ff fe2a 	bl	80151f0 <LL_RCC_SetRNGClockSource>
 801559c:	e00a      	b.n	80155b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80155a6:	60fb      	str	r3, [r7, #12]
 80155a8:	2000      	movs	r0, #0
 80155aa:	f7ff fe21 	bl	80151f0 <LL_RCC_SetRNGClockSource>
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f7ff fe34 	bl	801521c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80155bc:	d107      	bne.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80155be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155c2:	68db      	ldr	r3, [r3, #12]
 80155c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80155c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80155cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d022      	beq.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff fe3d 	bl	801525e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80155ec:	d107      	bne.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80155ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80155f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80155fc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015606:	d10b      	bne.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	3304      	adds	r3, #4
 801560c:	4618      	mov	r0, r3
 801560e:	f000 f8e3 	bl	80157d8 <RCCEx_PLLSAI1_ConfigNR>
 8015612:	4603      	mov	r3, r0
 8015614:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8015616:	7ffb      	ldrb	r3, [r7, #31]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d001      	beq.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801561c:	7ffb      	ldrb	r3, [r7, #31]
 801561e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015628:	2b00      	cmp	r3, #0
 801562a:	d004      	beq.n	8015636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015630:	4618      	mov	r0, r3
 8015632:	f7ff fd26 	bl	8015082 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801563e:	2b00      	cmp	r3, #0
 8015640:	d009      	beq.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015646:	4618      	mov	r0, r3
 8015648:	f7ff fd45 	bl	80150d6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015650:	4618      	mov	r0, r3
 8015652:	f7ff fd2c 	bl	80150ae <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8015656:	7fbb      	ldrb	r3, [r7, #30]
}
 8015658:	4618      	mov	r0, r3
 801565a:	3720      	adds	r7, #32
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8015664:	f7ff fcfe 	bl	8015064 <LL_RCC_MSI_EnablePLLMode>
}
 8015668:	bf00      	nop
 801566a:	bd80      	pop	{r7, pc}

0801566c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015674:	2300      	movs	r3, #0
 8015676:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015678:	f7ff fe5b 	bl	8015332 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801567c:	f7fc ffc4 	bl	8012608 <HAL_GetTick>
 8015680:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015682:	e009      	b.n	8015698 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015684:	f7fc ffc0 	bl	8012608 <HAL_GetTick>
 8015688:	4602      	mov	r2, r0
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	1ad3      	subs	r3, r2, r3
 801568e:	2b02      	cmp	r3, #2
 8015690:	d902      	bls.n	8015698 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8015692:	2303      	movs	r3, #3
 8015694:	73fb      	strb	r3, [r7, #15]
      break;
 8015696:	e004      	b.n	80156a2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015698:	f7ff fe5a 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1f0      	bne.n	8015684 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80156a2:	7bfb      	ldrb	r3, [r7, #15]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d137      	bne.n	8015718 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80156a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156ac:	691b      	ldr	r3, [r3, #16]
 80156ae:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	021b      	lsls	r3, r3, #8
 80156b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80156bc:	4313      	orrs	r3, r2
 80156be:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80156c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156c4:	691b      	ldr	r3, [r3, #16]
 80156c6:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80156d2:	4313      	orrs	r3, r2
 80156d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80156d6:	f7ff fe1d 	bl	8015314 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80156da:	f7fc ff95 	bl	8012608 <HAL_GetTick>
 80156de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80156e0:	e009      	b.n	80156f6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80156e2:	f7fc ff91 	bl	8012608 <HAL_GetTick>
 80156e6:	4602      	mov	r2, r0
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	1ad3      	subs	r3, r2, r3
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d902      	bls.n	80156f6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80156f0:	2303      	movs	r3, #3
 80156f2:	73fb      	strb	r3, [r7, #15]
        break;
 80156f4:	e004      	b.n	8015700 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80156f6:	f7ff fe2b 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d1f0      	bne.n	80156e2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8015700:	7bfb      	ldrb	r3, [r7, #15]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d108      	bne.n	8015718 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801570a:	691a      	ldr	r2, [r3, #16]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	691b      	ldr	r3, [r3, #16]
 8015710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015714:	4313      	orrs	r3, r2
 8015716:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015718:	7bfb      	ldrb	r3, [r7, #15]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801572a:	2300      	movs	r3, #0
 801572c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801572e:	f7ff fe00 	bl	8015332 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015732:	f7fc ff69 	bl	8012608 <HAL_GetTick>
 8015736:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015738:	e009      	b.n	801574e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801573a:	f7fc ff65 	bl	8012608 <HAL_GetTick>
 801573e:	4602      	mov	r2, r0
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	2b02      	cmp	r3, #2
 8015746:	d902      	bls.n	801574e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8015748:	2303      	movs	r3, #3
 801574a:	73fb      	strb	r3, [r7, #15]
      break;
 801574c:	e004      	b.n	8015758 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801574e:	f7ff fdff 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 8015752:	4603      	mov	r3, r0
 8015754:	2b00      	cmp	r3, #0
 8015756:	d1f0      	bne.n	801573a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8015758:	7bfb      	ldrb	r3, [r7, #15]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d137      	bne.n	80157ce <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801575e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	021b      	lsls	r3, r3, #8
 801576e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015772:	4313      	orrs	r3, r2
 8015774:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8015776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801577a:	691b      	ldr	r3, [r3, #16]
 801577c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015788:	4313      	orrs	r3, r2
 801578a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801578c:	f7ff fdc2 	bl	8015314 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015790:	f7fc ff3a 	bl	8012608 <HAL_GetTick>
 8015794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015796:	e009      	b.n	80157ac <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015798:	f7fc ff36 	bl	8012608 <HAL_GetTick>
 801579c:	4602      	mov	r2, r0
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	2b02      	cmp	r3, #2
 80157a4:	d902      	bls.n	80157ac <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80157a6:	2303      	movs	r3, #3
 80157a8:	73fb      	strb	r3, [r7, #15]
        break;
 80157aa:	e004      	b.n	80157b6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80157ac:	f7ff fdd0 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d1f0      	bne.n	8015798 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80157b6:	7bfb      	ldrb	r3, [r7, #15]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d108      	bne.n	80157ce <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80157bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157c0:	691a      	ldr	r2, [r3, #16]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80157ca:	4313      	orrs	r3, r2
 80157cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80157ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80157e0:	2300      	movs	r3, #0
 80157e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80157e4:	f7ff fda5 	bl	8015332 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80157e8:	f7fc ff0e 	bl	8012608 <HAL_GetTick>
 80157ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80157ee:	e009      	b.n	8015804 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80157f0:	f7fc ff0a 	bl	8012608 <HAL_GetTick>
 80157f4:	4602      	mov	r2, r0
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	1ad3      	subs	r3, r2, r3
 80157fa:	2b02      	cmp	r3, #2
 80157fc:	d902      	bls.n	8015804 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80157fe:	2303      	movs	r3, #3
 8015800:	73fb      	strb	r3, [r7, #15]
      break;
 8015802:	e004      	b.n	801580e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015804:	f7ff fda4 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	d1f0      	bne.n	80157f0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801580e:	7bfb      	ldrb	r3, [r7, #15]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d137      	bne.n	8015884 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015818:	691b      	ldr	r3, [r3, #16]
 801581a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	021b      	lsls	r3, r3, #8
 8015824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015828:	4313      	orrs	r3, r2
 801582a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801582c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015830:	691b      	ldr	r3, [r3, #16]
 8015832:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801583e:	4313      	orrs	r3, r2
 8015840:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015842:	f7ff fd67 	bl	8015314 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015846:	f7fc fedf 	bl	8012608 <HAL_GetTick>
 801584a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801584c:	e009      	b.n	8015862 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801584e:	f7fc fedb 	bl	8012608 <HAL_GetTick>
 8015852:	4602      	mov	r2, r0
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	2b02      	cmp	r3, #2
 801585a:	d902      	bls.n	8015862 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801585c:	2303      	movs	r3, #3
 801585e:	73fb      	strb	r3, [r7, #15]
        break;
 8015860:	e004      	b.n	801586c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015862:	f7ff fd75 	bl	8015350 <LL_RCC_PLLSAI1_IsReady>
 8015866:	4603      	mov	r3, r0
 8015868:	2b01      	cmp	r3, #1
 801586a:	d1f0      	bne.n	801584e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801586c:	7bfb      	ldrb	r3, [r7, #15]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d108      	bne.n	8015884 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015876:	691a      	ldr	r2, [r3, #16]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015880:	4313      	orrs	r3, r2
 8015882:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015884:	7bfb      	ldrb	r3, [r7, #15]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3710      	adds	r7, #16
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <LL_RCC_GetUSARTClockSource>:
{
 801588e:	b480      	push	{r7}
 8015890:	b083      	sub	sp, #12
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8015896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801589a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	4013      	ands	r3, r2
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr

080158ae <LL_RCC_GetLPUARTClockSource>:
{
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80158b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80158ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	4013      	ands	r3, r2
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	370c      	adds	r7, #12
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr

080158ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80158ce:	b580      	push	{r7, lr}
 80158d0:	b082      	sub	sp, #8
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d101      	bne.n	80158e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80158dc:	2301      	movs	r3, #1
 80158de:	e042      	b.n	8015966 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d106      	bne.n	80158f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2200      	movs	r2, #0
 80158ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 f83b 	bl	801596e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2224      	movs	r2, #36	@ 0x24
 80158fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	f022 0201 	bic.w	r2, r2, #1
 801590e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015914:	2b00      	cmp	r3, #0
 8015916:	d002      	beq.n	801591e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f000 fa5b 	bl	8015dd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f000 f830 	bl	8015984 <UART_SetConfig>
 8015924:	4603      	mov	r3, r0
 8015926:	2b01      	cmp	r3, #1
 8015928:	d101      	bne.n	801592e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801592a:	2301      	movs	r3, #1
 801592c:	e01b      	b.n	8015966 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	685a      	ldr	r2, [r3, #4]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801593c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	689a      	ldr	r2, [r3, #8]
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801594c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f042 0201 	orr.w	r2, r2, #1
 801595c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 fada 	bl	8015f18 <UART_CheckIdleState>
 8015964:	4603      	mov	r3, r0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3708      	adds	r7, #8
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}

0801596e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801596e:	b480      	push	{r7}
 8015970:	b083      	sub	sp, #12
 8015972:	af00      	add	r7, sp, #0
 8015974:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8015976:	bf00      	nop
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr
	...

08015984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015988:	b08c      	sub	sp, #48	@ 0x30
 801598a:	af00      	add	r7, sp, #0
 801598c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801598e:	2300      	movs	r3, #0
 8015990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	689a      	ldr	r2, [r3, #8]
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	691b      	ldr	r3, [r3, #16]
 801599c:	431a      	orrs	r2, r3
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	431a      	orrs	r2, r3
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	69db      	ldr	r3, [r3, #28]
 80159a8:	4313      	orrs	r3, r2
 80159aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	4baf      	ldr	r3, [pc, #700]	@ (8015c70 <UART_SetConfig+0x2ec>)
 80159b4:	4013      	ands	r3, r2
 80159b6:	697a      	ldr	r2, [r7, #20]
 80159b8:	6812      	ldr	r2, [r2, #0]
 80159ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159bc:	430b      	orrs	r3, r1
 80159be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	685b      	ldr	r3, [r3, #4]
 80159c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	68da      	ldr	r2, [r3, #12]
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	430a      	orrs	r2, r1
 80159d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	699b      	ldr	r3, [r3, #24]
 80159da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4aa4      	ldr	r2, [pc, #656]	@ (8015c74 <UART_SetConfig+0x2f0>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d004      	beq.n	80159f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	6a1b      	ldr	r3, [r3, #32]
 80159ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159ec:	4313      	orrs	r3, r2
 80159ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	689b      	ldr	r3, [r3, #8]
 80159f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80159fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80159fe:	697a      	ldr	r2, [r7, #20]
 8015a00:	6812      	ldr	r2, [r2, #0]
 8015a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015a04:	430b      	orrs	r3, r1
 8015a06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a0e:	f023 010f 	bic.w	r1, r3, #15
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	430a      	orrs	r2, r1
 8015a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4a95      	ldr	r2, [pc, #596]	@ (8015c78 <UART_SetConfig+0x2f4>)
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d125      	bne.n	8015a74 <UART_SetConfig+0xf0>
 8015a28:	2003      	movs	r0, #3
 8015a2a:	f7ff ff30 	bl	801588e <LL_RCC_GetUSARTClockSource>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b03      	cmp	r3, #3
 8015a32:	d81b      	bhi.n	8015a6c <UART_SetConfig+0xe8>
 8015a34:	a201      	add	r2, pc, #4	@ (adr r2, 8015a3c <UART_SetConfig+0xb8>)
 8015a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a3a:	bf00      	nop
 8015a3c:	08015a4d 	.word	0x08015a4d
 8015a40:	08015a5d 	.word	0x08015a5d
 8015a44:	08015a55 	.word	0x08015a55
 8015a48:	08015a65 	.word	0x08015a65
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a52:	e042      	b.n	8015ada <UART_SetConfig+0x156>
 8015a54:	2302      	movs	r3, #2
 8015a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a5a:	e03e      	b.n	8015ada <UART_SetConfig+0x156>
 8015a5c:	2304      	movs	r3, #4
 8015a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a62:	e03a      	b.n	8015ada <UART_SetConfig+0x156>
 8015a64:	2308      	movs	r3, #8
 8015a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a6a:	e036      	b.n	8015ada <UART_SetConfig+0x156>
 8015a6c:	2310      	movs	r3, #16
 8015a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a72:	e032      	b.n	8015ada <UART_SetConfig+0x156>
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	4a7e      	ldr	r2, [pc, #504]	@ (8015c74 <UART_SetConfig+0x2f0>)
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d12a      	bne.n	8015ad4 <UART_SetConfig+0x150>
 8015a7e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015a82:	f7ff ff14 	bl	80158ae <LL_RCC_GetLPUARTClockSource>
 8015a86:	4603      	mov	r3, r0
 8015a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a8c:	d01a      	beq.n	8015ac4 <UART_SetConfig+0x140>
 8015a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a92:	d81b      	bhi.n	8015acc <UART_SetConfig+0x148>
 8015a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a98:	d00c      	beq.n	8015ab4 <UART_SetConfig+0x130>
 8015a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a9e:	d815      	bhi.n	8015acc <UART_SetConfig+0x148>
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d003      	beq.n	8015aac <UART_SetConfig+0x128>
 8015aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015aa8:	d008      	beq.n	8015abc <UART_SetConfig+0x138>
 8015aaa:	e00f      	b.n	8015acc <UART_SetConfig+0x148>
 8015aac:	2300      	movs	r3, #0
 8015aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ab2:	e012      	b.n	8015ada <UART_SetConfig+0x156>
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015aba:	e00e      	b.n	8015ada <UART_SetConfig+0x156>
 8015abc:	2304      	movs	r3, #4
 8015abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ac2:	e00a      	b.n	8015ada <UART_SetConfig+0x156>
 8015ac4:	2308      	movs	r3, #8
 8015ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015aca:	e006      	b.n	8015ada <UART_SetConfig+0x156>
 8015acc:	2310      	movs	r3, #16
 8015ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ad2:	e002      	b.n	8015ada <UART_SetConfig+0x156>
 8015ad4:	2310      	movs	r3, #16
 8015ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4a65      	ldr	r2, [pc, #404]	@ (8015c74 <UART_SetConfig+0x2f0>)
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	f040 8097 	bne.w	8015c14 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015aea:	2b08      	cmp	r3, #8
 8015aec:	d823      	bhi.n	8015b36 <UART_SetConfig+0x1b2>
 8015aee:	a201      	add	r2, pc, #4	@ (adr r2, 8015af4 <UART_SetConfig+0x170>)
 8015af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015af4:	08015b19 	.word	0x08015b19
 8015af8:	08015b37 	.word	0x08015b37
 8015afc:	08015b21 	.word	0x08015b21
 8015b00:	08015b37 	.word	0x08015b37
 8015b04:	08015b27 	.word	0x08015b27
 8015b08:	08015b37 	.word	0x08015b37
 8015b0c:	08015b37 	.word	0x08015b37
 8015b10:	08015b37 	.word	0x08015b37
 8015b14:	08015b2f 	.word	0x08015b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015b18:	f7ff f9a0 	bl	8014e5c <HAL_RCC_GetPCLK1Freq>
 8015b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015b1e:	e010      	b.n	8015b42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015b20:	4b56      	ldr	r3, [pc, #344]	@ (8015c7c <UART_SetConfig+0x2f8>)
 8015b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015b24:	e00d      	b.n	8015b42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015b26:	f7ff f919 	bl	8014d5c <HAL_RCC_GetSysClockFreq>
 8015b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015b2c:	e009      	b.n	8015b42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015b34:	e005      	b.n	8015b42 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8015b36:	2300      	movs	r3, #0
 8015b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015b40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 812b 	beq.w	8015da0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8015c80 <UART_SetConfig+0x2fc>)
 8015b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b54:	461a      	mov	r2, r3
 8015b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	685a      	ldr	r2, [r3, #4]
 8015b62:	4613      	mov	r3, r2
 8015b64:	005b      	lsls	r3, r3, #1
 8015b66:	4413      	add	r3, r2
 8015b68:	69ba      	ldr	r2, [r7, #24]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d305      	bcc.n	8015b7a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b74:	69ba      	ldr	r2, [r7, #24]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d903      	bls.n	8015b82 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015b80:	e10e      	b.n	8015da0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b84:	2200      	movs	r2, #0
 8015b86:	60bb      	str	r3, [r7, #8]
 8015b88:	60fa      	str	r2, [r7, #12]
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8015c80 <UART_SetConfig+0x2fc>)
 8015b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	2200      	movs	r2, #0
 8015b98:	603b      	str	r3, [r7, #0]
 8015b9a:	607a      	str	r2, [r7, #4]
 8015b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ba4:	f7ea fb8c 	bl	80002c0 <__aeabi_uldivmod>
 8015ba8:	4602      	mov	r2, r0
 8015baa:	460b      	mov	r3, r1
 8015bac:	4610      	mov	r0, r2
 8015bae:	4619      	mov	r1, r3
 8015bb0:	f04f 0200 	mov.w	r2, #0
 8015bb4:	f04f 0300 	mov.w	r3, #0
 8015bb8:	020b      	lsls	r3, r1, #8
 8015bba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015bbe:	0202      	lsls	r2, r0, #8
 8015bc0:	6979      	ldr	r1, [r7, #20]
 8015bc2:	6849      	ldr	r1, [r1, #4]
 8015bc4:	0849      	lsrs	r1, r1, #1
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	460c      	mov	r4, r1
 8015bca:	4605      	mov	r5, r0
 8015bcc:	eb12 0804 	adds.w	r8, r2, r4
 8015bd0:	eb43 0905 	adc.w	r9, r3, r5
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	685b      	ldr	r3, [r3, #4]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	469a      	mov	sl, r3
 8015bdc:	4693      	mov	fp, r2
 8015bde:	4652      	mov	r2, sl
 8015be0:	465b      	mov	r3, fp
 8015be2:	4640      	mov	r0, r8
 8015be4:	4649      	mov	r1, r9
 8015be6:	f7ea fb6b 	bl	80002c0 <__aeabi_uldivmod>
 8015bea:	4602      	mov	r2, r0
 8015bec:	460b      	mov	r3, r1
 8015bee:	4613      	mov	r3, r2
 8015bf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015bf2:	6a3b      	ldr	r3, [r7, #32]
 8015bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015bf8:	d308      	bcc.n	8015c0c <UART_SetConfig+0x288>
 8015bfa:	6a3b      	ldr	r3, [r7, #32]
 8015bfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015c00:	d204      	bcs.n	8015c0c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	6a3a      	ldr	r2, [r7, #32]
 8015c08:	60da      	str	r2, [r3, #12]
 8015c0a:	e0c9      	b.n	8015da0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015c12:	e0c5      	b.n	8015da0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	69db      	ldr	r3, [r3, #28]
 8015c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015c1c:	d16d      	bne.n	8015cfa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8015c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015c22:	3b01      	subs	r3, #1
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	d82d      	bhi.n	8015c84 <UART_SetConfig+0x300>
 8015c28:	a201      	add	r2, pc, #4	@ (adr r2, 8015c30 <UART_SetConfig+0x2ac>)
 8015c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c2e:	bf00      	nop
 8015c30:	08015c51 	.word	0x08015c51
 8015c34:	08015c59 	.word	0x08015c59
 8015c38:	08015c85 	.word	0x08015c85
 8015c3c:	08015c5f 	.word	0x08015c5f
 8015c40:	08015c85 	.word	0x08015c85
 8015c44:	08015c85 	.word	0x08015c85
 8015c48:	08015c85 	.word	0x08015c85
 8015c4c:	08015c67 	.word	0x08015c67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c50:	f7ff f91a 	bl	8014e88 <HAL_RCC_GetPCLK2Freq>
 8015c54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c56:	e01b      	b.n	8015c90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c58:	4b08      	ldr	r3, [pc, #32]	@ (8015c7c <UART_SetConfig+0x2f8>)
 8015c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c5c:	e018      	b.n	8015c90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c5e:	f7ff f87d 	bl	8014d5c <HAL_RCC_GetSysClockFreq>
 8015c62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c64:	e014      	b.n	8015c90 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c6c:	e010      	b.n	8015c90 <UART_SetConfig+0x30c>
 8015c6e:	bf00      	nop
 8015c70:	cfff69f3 	.word	0xcfff69f3
 8015c74:	40008000 	.word	0x40008000
 8015c78:	40013800 	.word	0x40013800
 8015c7c:	00f42400 	.word	0x00f42400
 8015c80:	08017ad8 	.word	0x08017ad8
      default:
        pclk = 0U;
 8015c84:	2300      	movs	r3, #0
 8015c86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f000 8084 	beq.w	8015da0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8015dcc <UART_SetConfig+0x448>)
 8015c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8015caa:	005a      	lsls	r2, r3, #1
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	085b      	lsrs	r3, r3, #1
 8015cb2:	441a      	add	r2, r3
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	685b      	ldr	r3, [r3, #4]
 8015cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cbc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015cbe:	6a3b      	ldr	r3, [r7, #32]
 8015cc0:	2b0f      	cmp	r3, #15
 8015cc2:	d916      	bls.n	8015cf2 <UART_SetConfig+0x36e>
 8015cc4:	6a3b      	ldr	r3, [r7, #32]
 8015cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cca:	d212      	bcs.n	8015cf2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015ccc:	6a3b      	ldr	r3, [r7, #32]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	f023 030f 	bic.w	r3, r3, #15
 8015cd4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015cd6:	6a3b      	ldr	r3, [r7, #32]
 8015cd8:	085b      	lsrs	r3, r3, #1
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	f003 0307 	and.w	r3, r3, #7
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	8bfb      	ldrh	r3, [r7, #30]
 8015ce4:	4313      	orrs	r3, r2
 8015ce6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	8bfa      	ldrh	r2, [r7, #30]
 8015cee:	60da      	str	r2, [r3, #12]
 8015cf0:	e056      	b.n	8015da0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015cf8:	e052      	b.n	8015da0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	2b07      	cmp	r3, #7
 8015d02:	d822      	bhi.n	8015d4a <UART_SetConfig+0x3c6>
 8015d04:	a201      	add	r2, pc, #4	@ (adr r2, 8015d0c <UART_SetConfig+0x388>)
 8015d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d0a:	bf00      	nop
 8015d0c:	08015d2d 	.word	0x08015d2d
 8015d10:	08015d35 	.word	0x08015d35
 8015d14:	08015d4b 	.word	0x08015d4b
 8015d18:	08015d3b 	.word	0x08015d3b
 8015d1c:	08015d4b 	.word	0x08015d4b
 8015d20:	08015d4b 	.word	0x08015d4b
 8015d24:	08015d4b 	.word	0x08015d4b
 8015d28:	08015d43 	.word	0x08015d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015d2c:	f7ff f8ac 	bl	8014e88 <HAL_RCC_GetPCLK2Freq>
 8015d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d32:	e010      	b.n	8015d56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015d34:	4b26      	ldr	r3, [pc, #152]	@ (8015dd0 <UART_SetConfig+0x44c>)
 8015d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d38:	e00d      	b.n	8015d56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015d3a:	f7ff f80f 	bl	8014d5c <HAL_RCC_GetSysClockFreq>
 8015d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d40:	e009      	b.n	8015d56 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d48:	e005      	b.n	8015d56 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015d4e:	2301      	movs	r3, #1
 8015d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015d54:	bf00      	nop
    }

    if (pclk != 0U)
 8015d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d021      	beq.n	8015da0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d60:	4a1a      	ldr	r2, [pc, #104]	@ (8015dcc <UART_SetConfig+0x448>)
 8015d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d66:	461a      	mov	r2, r3
 8015d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	085b      	lsrs	r3, r3, #1
 8015d74:	441a      	add	r2, r3
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d80:	6a3b      	ldr	r3, [r7, #32]
 8015d82:	2b0f      	cmp	r3, #15
 8015d84:	d909      	bls.n	8015d9a <UART_SetConfig+0x416>
 8015d86:	6a3b      	ldr	r3, [r7, #32]
 8015d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d8c:	d205      	bcs.n	8015d9a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	b29a      	uxth	r2, r3
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	60da      	str	r2, [r3, #12]
 8015d98:	e002      	b.n	8015da0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015da0:	697b      	ldr	r3, [r7, #20]
 8015da2:	2201      	movs	r2, #1
 8015da4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	2201      	movs	r2, #1
 8015dac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	2200      	movs	r2, #0
 8015db4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8015db6:	697b      	ldr	r3, [r7, #20]
 8015db8:	2200      	movs	r2, #0
 8015dba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015dbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3730      	adds	r7, #48	@ 0x30
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015dca:	bf00      	nop
 8015dcc:	08017ad8 	.word	0x08017ad8
 8015dd0:	00f42400 	.word	0x00f42400

08015dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015de0:	f003 0308 	and.w	r3, r3, #8
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00a      	beq.n	8015dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	685b      	ldr	r3, [r3, #4]
 8015dee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	430a      	orrs	r2, r1
 8015dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e02:	f003 0301 	and.w	r3, r3, #1
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d00a      	beq.n	8015e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	430a      	orrs	r2, r1
 8015e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e24:	f003 0302 	and.w	r3, r3, #2
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00a      	beq.n	8015e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	430a      	orrs	r2, r1
 8015e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e46:	f003 0304 	and.w	r3, r3, #4
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00a      	beq.n	8015e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	685b      	ldr	r3, [r3, #4]
 8015e54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	430a      	orrs	r2, r1
 8015e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e68:	f003 0310 	and.w	r3, r3, #16
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00a      	beq.n	8015e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	689b      	ldr	r3, [r3, #8]
 8015e76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	430a      	orrs	r2, r1
 8015e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e8a:	f003 0320 	and.w	r3, r3, #32
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00a      	beq.n	8015ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	689b      	ldr	r3, [r3, #8]
 8015e98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	430a      	orrs	r2, r1
 8015ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d01a      	beq.n	8015eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	430a      	orrs	r2, r1
 8015ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015ed2:	d10a      	bne.n	8015eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	430a      	orrs	r2, r1
 8015ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d00a      	beq.n	8015f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	430a      	orrs	r2, r1
 8015f0a:	605a      	str	r2, [r3, #4]
  }
}
 8015f0c:	bf00      	nop
 8015f0e:	370c      	adds	r7, #12
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr

08015f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b098      	sub	sp, #96	@ 0x60
 8015f1c:	af02      	add	r7, sp, #8
 8015f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2200      	movs	r2, #0
 8015f24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015f28:	f7fc fb6e 	bl	8012608 <HAL_GetTick>
 8015f2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	f003 0308 	and.w	r3, r3, #8
 8015f38:	2b08      	cmp	r3, #8
 8015f3a:	d12f      	bne.n	8015f9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f44:	2200      	movs	r2, #0
 8015f46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f000 f88e 	bl	801606c <UART_WaitOnFlagUntilTimeout>
 8015f50:	4603      	mov	r3, r0
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d022      	beq.n	8015f9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f5e:	e853 3f00 	ldrex	r3, [r3]
 8015f62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	461a      	mov	r2, r3
 8015f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8015f76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015f7c:	e841 2300 	strex	r3, r2, [r1]
 8015f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1e6      	bne.n	8015f56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2220      	movs	r2, #32
 8015f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2200      	movs	r2, #0
 8015f94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f98:	2303      	movs	r3, #3
 8015f9a:	e063      	b.n	8016064 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f003 0304 	and.w	r3, r3, #4
 8015fa6:	2b04      	cmp	r3, #4
 8015fa8:	d149      	bne.n	801603e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015faa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 f857 	bl	801606c <UART_WaitOnFlagUntilTimeout>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d03c      	beq.n	801603e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fcc:	e853 3f00 	ldrex	r3, [r3]
 8015fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8015fd2:	6a3b      	ldr	r3, [r7, #32]
 8015fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	461a      	mov	r2, r3
 8015fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8015fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fea:	e841 2300 	strex	r3, r2, [r1]
 8015fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d1e6      	bne.n	8015fc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	3308      	adds	r3, #8
 8015ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	e853 3f00 	ldrex	r3, [r3]
 8016004:	60fb      	str	r3, [r7, #12]
   return(result);
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	f023 0301 	bic.w	r3, r3, #1
 801600c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	3308      	adds	r3, #8
 8016014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016016:	61fa      	str	r2, [r7, #28]
 8016018:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801601a:	69b9      	ldr	r1, [r7, #24]
 801601c:	69fa      	ldr	r2, [r7, #28]
 801601e:	e841 2300 	strex	r3, r2, [r1]
 8016022:	617b      	str	r3, [r7, #20]
   return(result);
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1e5      	bne.n	8015ff6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2220      	movs	r2, #32
 801602e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2200      	movs	r2, #0
 8016036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801603a:	2303      	movs	r3, #3
 801603c:	e012      	b.n	8016064 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2220      	movs	r2, #32
 8016042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2220      	movs	r2, #32
 801604a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2200      	movs	r2, #0
 8016052:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2200      	movs	r2, #0
 8016058:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016062:	2300      	movs	r3, #0
}
 8016064:	4618      	mov	r0, r3
 8016066:	3758      	adds	r7, #88	@ 0x58
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b084      	sub	sp, #16
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	603b      	str	r3, [r7, #0]
 8016078:	4613      	mov	r3, r2
 801607a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801607c:	e04f      	b.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016084:	d04b      	beq.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016086:	f7fc fabf 	bl	8012608 <HAL_GetTick>
 801608a:	4602      	mov	r2, r0
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	69ba      	ldr	r2, [r7, #24]
 8016092:	429a      	cmp	r2, r3
 8016094:	d302      	bcc.n	801609c <UART_WaitOnFlagUntilTimeout+0x30>
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d101      	bne.n	80160a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801609c:	2303      	movs	r3, #3
 801609e:	e04e      	b.n	801613e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f003 0304 	and.w	r3, r3, #4
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d037      	beq.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	2b80      	cmp	r3, #128	@ 0x80
 80160b2:	d034      	beq.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2b40      	cmp	r3, #64	@ 0x40
 80160b8:	d031      	beq.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	69db      	ldr	r3, [r3, #28]
 80160c0:	f003 0308 	and.w	r3, r3, #8
 80160c4:	2b08      	cmp	r3, #8
 80160c6:	d110      	bne.n	80160ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2208      	movs	r2, #8
 80160ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80160d0:	68f8      	ldr	r0, [r7, #12]
 80160d2:	f000 f838 	bl	8016146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2208      	movs	r2, #8
 80160da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2200      	movs	r2, #0
 80160e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80160e6:	2301      	movs	r3, #1
 80160e8:	e029      	b.n	801613e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	69db      	ldr	r3, [r3, #28]
 80160f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80160f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80160f8:	d111      	bne.n	801611e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f000 f81e 	bl	8016146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2220      	movs	r2, #32
 801610e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2200      	movs	r2, #0
 8016116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801611a:	2303      	movs	r3, #3
 801611c:	e00f      	b.n	801613e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	69da      	ldr	r2, [r3, #28]
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	4013      	ands	r3, r2
 8016128:	68ba      	ldr	r2, [r7, #8]
 801612a:	429a      	cmp	r2, r3
 801612c:	bf0c      	ite	eq
 801612e:	2301      	moveq	r3, #1
 8016130:	2300      	movne	r3, #0
 8016132:	b2db      	uxtb	r3, r3
 8016134:	461a      	mov	r2, r3
 8016136:	79fb      	ldrb	r3, [r7, #7]
 8016138:	429a      	cmp	r2, r3
 801613a:	d0a0      	beq.n	801607e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3710      	adds	r7, #16
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016146:	b480      	push	{r7}
 8016148:	b095      	sub	sp, #84	@ 0x54
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016156:	e853 3f00 	ldrex	r3, [r3]
 801615a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801615e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	461a      	mov	r2, r3
 801616a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801616c:	643b      	str	r3, [r7, #64]	@ 0x40
 801616e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016174:	e841 2300 	strex	r3, r2, [r1]
 8016178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801617a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801617c:	2b00      	cmp	r3, #0
 801617e:	d1e6      	bne.n	801614e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	3308      	adds	r3, #8
 8016186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016188:	6a3b      	ldr	r3, [r7, #32]
 801618a:	e853 3f00 	ldrex	r3, [r3]
 801618e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016196:	f023 0301 	bic.w	r3, r3, #1
 801619a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	3308      	adds	r3, #8
 80161a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80161a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80161a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161ac:	e841 2300 	strex	r3, r2, [r1]
 80161b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80161b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d1e3      	bne.n	8016180 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d118      	bne.n	80161f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	e853 3f00 	ldrex	r3, [r3]
 80161cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	f023 0310 	bic.w	r3, r3, #16
 80161d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	461a      	mov	r2, r3
 80161dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161de:	61bb      	str	r3, [r7, #24]
 80161e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161e2:	6979      	ldr	r1, [r7, #20]
 80161e4:	69ba      	ldr	r2, [r7, #24]
 80161e6:	e841 2300 	strex	r3, r2, [r1]
 80161ea:	613b      	str	r3, [r7, #16]
   return(result);
 80161ec:	693b      	ldr	r3, [r7, #16]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d1e6      	bne.n	80161c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2220      	movs	r2, #32
 80161f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2200      	movs	r2, #0
 80161fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2200      	movs	r2, #0
 8016204:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8016206:	bf00      	nop
 8016208:	3754      	adds	r7, #84	@ 0x54
 801620a:	46bd      	mov	sp, r7
 801620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016210:	4770      	bx	lr

08016212 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016212:	b480      	push	{r7}
 8016214:	b085      	sub	sp, #20
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016220:	2b01      	cmp	r3, #1
 8016222:	d101      	bne.n	8016228 <HAL_UARTEx_DisableFifoMode+0x16>
 8016224:	2302      	movs	r3, #2
 8016226:	e027      	b.n	8016278 <HAL_UARTEx_DisableFifoMode+0x66>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2201      	movs	r2, #1
 801622c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2224      	movs	r2, #36	@ 0x24
 8016234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	681a      	ldr	r2, [r3, #0]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f022 0201 	bic.w	r2, r2, #1
 801624e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8016256:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2200      	movs	r2, #0
 801625c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	68fa      	ldr	r2, [r7, #12]
 8016264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	2220      	movs	r2, #32
 801626a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2200      	movs	r2, #0
 8016272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016276:	2300      	movs	r3, #0
}
 8016278:	4618      	mov	r0, r3
 801627a:	3714      	adds	r7, #20
 801627c:	46bd      	mov	sp, r7
 801627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016282:	4770      	bx	lr

08016284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016294:	2b01      	cmp	r3, #1
 8016296:	d101      	bne.n	801629c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016298:	2302      	movs	r3, #2
 801629a:	e02d      	b.n	80162f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2201      	movs	r2, #1
 80162a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2224      	movs	r2, #36	@ 0x24
 80162a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	681a      	ldr	r2, [r3, #0]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f022 0201 	bic.w	r2, r2, #1
 80162c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	689b      	ldr	r3, [r3, #8]
 80162ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	683a      	ldr	r2, [r7, #0]
 80162d4:	430a      	orrs	r2, r1
 80162d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f000 f84f 	bl	801637c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	68fa      	ldr	r2, [r7, #12]
 80162e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	2220      	movs	r2, #32
 80162ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2200      	movs	r2, #0
 80162f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80162f6:	2300      	movs	r3, #0
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3710      	adds	r7, #16
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016310:	2b01      	cmp	r3, #1
 8016312:	d101      	bne.n	8016318 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016314:	2302      	movs	r3, #2
 8016316:	e02d      	b.n	8016374 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2201      	movs	r2, #1
 801631c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2224      	movs	r2, #36	@ 0x24
 8016324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	f022 0201 	bic.w	r2, r2, #1
 801633e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	689b      	ldr	r3, [r3, #8]
 8016346:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	430a      	orrs	r2, r1
 8016352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 f811 	bl	801637c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2220      	movs	r2, #32
 8016366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2200      	movs	r2, #0
 801636e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016372:	2300      	movs	r3, #0
}
 8016374:	4618      	mov	r0, r3
 8016376:	3710      	adds	r7, #16
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}

0801637c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801637c:	b480      	push	{r7}
 801637e:	b085      	sub	sp, #20
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016388:	2b00      	cmp	r3, #0
 801638a:	d108      	bne.n	801639e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2201      	movs	r2, #1
 8016390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2201      	movs	r2, #1
 8016398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801639c:	e031      	b.n	8016402 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801639e:	2308      	movs	r3, #8
 80163a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80163a2:	2308      	movs	r3, #8
 80163a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	689b      	ldr	r3, [r3, #8]
 80163ac:	0e5b      	lsrs	r3, r3, #25
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	f003 0307 	and.w	r3, r3, #7
 80163b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	689b      	ldr	r3, [r3, #8]
 80163bc:	0f5b      	lsrs	r3, r3, #29
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	f003 0307 	and.w	r3, r3, #7
 80163c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163c6:	7bbb      	ldrb	r3, [r7, #14]
 80163c8:	7b3a      	ldrb	r2, [r7, #12]
 80163ca:	4911      	ldr	r1, [pc, #68]	@ (8016410 <UARTEx_SetNbDataToProcess+0x94>)
 80163cc:	5c8a      	ldrb	r2, [r1, r2]
 80163ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80163d2:	7b3a      	ldrb	r2, [r7, #12]
 80163d4:	490f      	ldr	r1, [pc, #60]	@ (8016414 <UARTEx_SetNbDataToProcess+0x98>)
 80163d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80163dc:	b29a      	uxth	r2, r3
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163e4:	7bfb      	ldrb	r3, [r7, #15]
 80163e6:	7b7a      	ldrb	r2, [r7, #13]
 80163e8:	4909      	ldr	r1, [pc, #36]	@ (8016410 <UARTEx_SetNbDataToProcess+0x94>)
 80163ea:	5c8a      	ldrb	r2, [r1, r2]
 80163ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80163f0:	7b7a      	ldrb	r2, [r7, #13]
 80163f2:	4908      	ldr	r1, [pc, #32]	@ (8016414 <UARTEx_SetNbDataToProcess+0x98>)
 80163f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8016402:	bf00      	nop
 8016404:	3714      	adds	r7, #20
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	08017af0 	.word	0x08017af0
 8016414:	08017af8 	.word	0x08017af8

08016418 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8016418:	b480      	push	{r7}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8016420:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8016424:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801642c:	b29a      	uxth	r2, r3
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	b29b      	uxth	r3, r3
 8016432:	43db      	mvns	r3, r3
 8016434:	b29b      	uxth	r3, r3
 8016436:	4013      	ands	r3, r2
 8016438:	b29a      	uxth	r2, r3
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8016440:	2300      	movs	r3, #0
}
 8016442:	4618      	mov	r0, r3
 8016444:	3714      	adds	r7, #20
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr

0801644e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801644e:	b480      	push	{r7}
 8016450:	b085      	sub	sp, #20
 8016452:	af00      	add	r7, sp, #0
 8016454:	60f8      	str	r0, [r7, #12]
 8016456:	1d3b      	adds	r3, r7, #4
 8016458:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2201      	movs	r2, #1
 8016460:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2200      	movs	r2, #0
 8016468:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2200      	movs	r2, #0
 8016470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2200      	movs	r2, #0
 8016478:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 801647c:	2300      	movs	r3, #0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3714      	adds	r7, #20
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr

0801648a <MX_TOF_Init>:
static void MX_53L4A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);
static int32_t decimal_part(float_t x);

void MX_TOF_Init(void)
{
 801648a:	b580      	push	{r7, lr}
 801648c:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L4A2_SimpleRanging_Init();
 801648e:	f000 f809 	bl	80164a4 <MX_53L4A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8016492:	bf00      	nop
 8016494:	bd80      	pop	{r7, pc}

08016496 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8016496:	b580      	push	{r7, lr}
 8016498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L4A2_SimpleRanging_Process();
 801649a:	f000 f839 	bl	8016510 <MX_53L4A2_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 801649e:	bf00      	nop
 80164a0:	bd80      	pop	{r7, pc}
	...

080164a4 <MX_53L4A2_SimpleRanging_Init>:

static void MX_53L4A2_SimpleRanging_Init(void)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80164a8:	2000      	movs	r0, #0
 80164aa:	f7fb ff71 	bl	8012390 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80164ae:	2101      	movs	r1, #1
 80164b0:	2000      	movs	r0, #0
 80164b2:	f7fb fedf 	bl	8012274 <BSP_PB_Init>

  /* reset XSHUT (XSDN) pin */
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_RESET);
 80164b6:	2200      	movs	r2, #0
 80164b8:	2101      	movs	r1, #1
 80164ba:	4811      	ldr	r0, [pc, #68]	@ (8016500 <MX_53L4A2_SimpleRanging_Init+0x5c>)
 80164bc:	f7fc fc9a 	bl	8012df4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80164c0:	2002      	movs	r0, #2
 80164c2:	f7fc f8b9 	bl	8012638 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_SET);
 80164c6:	2201      	movs	r2, #1
 80164c8:	2101      	movs	r1, #1
 80164ca:	480d      	ldr	r0, [pc, #52]	@ (8016500 <MX_53L4A2_SimpleRanging_Init+0x5c>)
 80164cc:	f7fc fc92 	bl	8012df4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80164d0:	2002      	movs	r0, #2
 80164d2:	f7fc f8b1 	bl	8012638 <HAL_Delay>

  printf("53L4A2 Simple Ranging demo application\n");
 80164d6:	480b      	ldr	r0, [pc, #44]	@ (8016504 <MX_53L4A2_SimpleRanging_Init+0x60>)
 80164d8:	f000 faf4 	bl	8016ac4 <puts>
  status = VL53L4A2_RANGING_SENSOR_Init(VL53L4A2_DEV_CENTER);
 80164dc:	2001      	movs	r0, #1
 80164de:	f7ea fd92 	bl	8001006 <VL53L4A2_RANGING_SENSOR_Init>
 80164e2:	4603      	mov	r3, r0
 80164e4:	4a08      	ldr	r2, [pc, #32]	@ (8016508 <MX_53L4A2_SimpleRanging_Init+0x64>)
 80164e6:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80164e8:	4b07      	ldr	r3, [pc, #28]	@ (8016508 <MX_53L4A2_SimpleRanging_Init+0x64>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d004      	beq.n	80164fa <MX_53L4A2_SimpleRanging_Init+0x56>
  {
    printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
 80164f0:	4806      	ldr	r0, [pc, #24]	@ (801650c <MX_53L4A2_SimpleRanging_Init+0x68>)
 80164f2:	f000 fae7 	bl	8016ac4 <puts>
    while (1);
 80164f6:	bf00      	nop
 80164f8:	e7fd      	b.n	80164f6 <MX_53L4A2_SimpleRanging_Init+0x52>
  }
}
 80164fa:	bf00      	nop
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	48000400 	.word	0x48000400
 8016504:	08017888 	.word	0x08017888
 8016508:	20007588 	.word	0x20007588
 801650c:	080178b0 	.word	0x080178b0

08016510 <MX_53L4A2_SimpleRanging_Process>:

static void MX_53L4A2_SimpleRanging_Process(void)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
  uint8_t i;
  uint32_t cal_distance_mm = 100; /* target distance used for offset calibration */
 8016516:	2364      	movs	r3, #100	@ 0x64
 8016518:	60bb      	str	r3, [r7, #8]
  uint32_t Id;

  VL53L4A2_RANGING_SENSOR_ReadID(VL53L4A2_DEV_CENTER, &Id);
 801651a:	1d3b      	adds	r3, r7, #4
 801651c:	4619      	mov	r1, r3
 801651e:	2001      	movs	r0, #1
 8016520:	f7ea fd86 	bl	8001030 <VL53L4A2_RANGING_SENSOR_ReadID>
  VL53L4A2_RANGING_SENSOR_GetCapabilities(VL53L4A2_DEV_CENTER, &Cap);
 8016524:	4941      	ldr	r1, [pc, #260]	@ (801662c <MX_53L4A2_SimpleRanging_Process+0x11c>)
 8016526:	2001      	movs	r0, #1
 8016528:	f7ea fdaa 	bl	8001080 <VL53L4A2_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 801652c:	4b40      	ldr	r3, [pc, #256]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 801652e:	2202      	movs	r2, #2
 8016530:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 8016532:	4b3f      	ldr	r3, [pc, #252]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016534:	221e      	movs	r2, #30
 8016536:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 8016538:	4b3d      	ldr	r3, [pc, #244]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 801653a:	2200      	movs	r2, #0
 801653c:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 801653e:	4b3c      	ldr	r3, [pc, #240]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016540:	2201      	movs	r2, #1
 8016542:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8016544:	4b3a      	ldr	r3, [pc, #232]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 8016546:	2201      	movs	r2, #1
 8016548:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L4A2_RANGING_SENSOR_ConfigProfile(VL53L4A2_DEV_CENTER, &Profile);
 801654a:	4939      	ldr	r1, [pc, #228]	@ (8016630 <MX_53L4A2_SimpleRanging_Process+0x120>)
 801654c:	2001      	movs	r0, #1
 801654e:	f7ea fdbf 	bl	80010d0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>

  printf("--- OFFSET CALIBRATION ---\n");
 8016552:	4838      	ldr	r0, [pc, #224]	@ (8016634 <MX_53L4A2_SimpleRanging_Process+0x124>)
 8016554:	f000 fab6 	bl	8016ac4 <puts>
  printf("Please put a target at %lu mm\n", (unsigned long)cal_distance_mm);
 8016558:	68b9      	ldr	r1, [r7, #8]
 801655a:	4837      	ldr	r0, [pc, #220]	@ (8016638 <MX_53L4A2_SimpleRanging_Process+0x128>)
 801655c:	f000 fa42 	bl	80169e4 <iprintf>
  printf("Press the user button to continue...\n");
 8016560:	4836      	ldr	r0, [pc, #216]	@ (801663c <MX_53L4A2_SimpleRanging_Process+0x12c>)
 8016562:	f000 faaf 	bl	8016ac4 <puts>

  /* wait until the button is pressed */
  while (PushButtonDetected != 1);
 8016566:	bf00      	nop
 8016568:	4b35      	ldr	r3, [pc, #212]	@ (8016640 <MX_53L4A2_SimpleRanging_Process+0x130>)
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	b2db      	uxtb	r3, r3
 801656e:	2b01      	cmp	r3, #1
 8016570:	d1fa      	bne.n	8016568 <MX_53L4A2_SimpleRanging_Process+0x58>
  PushButtonDetected = 0;
 8016572:	4b33      	ldr	r3, [pc, #204]	@ (8016640 <MX_53L4A2_SimpleRanging_Process+0x130>)
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]

  printf("--- BEGIN OFFSET CALIBRATION ---\n");
 8016578:	4832      	ldr	r0, [pc, #200]	@ (8016644 <MX_53L4A2_SimpleRanging_Process+0x134>)
 801657a:	f000 faa3 	bl	8016ac4 <puts>
  /* make sure that a target is placed at cal_distance_mm (100 mm is the default value in this example)
   * the application will perform some measure in order to have a log of some pre-calibration values
   */
  status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 801657e:	2101      	movs	r1, #1
 8016580:	2001      	movs	r0, #1
 8016582:	f7ea fdf5 	bl	8001170 <VL53L4A2_RANGING_SENSOR_Start>
 8016586:	4603      	mov	r3, r0
 8016588:	4a2f      	ldr	r2, [pc, #188]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 801658a:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 801658c:	4b2e      	ldr	r3, [pc, #184]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d004      	beq.n	801659e <MX_53L4A2_SimpleRanging_Process+0x8e>
  {
    printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 8016594:	482d      	ldr	r0, [pc, #180]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x13c>)
 8016596:	f000 fa95 	bl	8016ac4 <puts>
    while (1);
 801659a:	bf00      	nop
 801659c:	e7fd      	b.n	801659a <MX_53L4A2_SimpleRanging_Process+0x8a>
  }

  /* Pre-calibration ranging */
  for (i = 0; i < 10; i++)
 801659e:	2300      	movs	r3, #0
 80165a0:	73fb      	strb	r3, [r7, #15]
 80165a2:	e013      	b.n	80165cc <MX_53L4A2_SimpleRanging_Process+0xbc>
  {
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 80165a4:	492a      	ldr	r1, [pc, #168]	@ (8016650 <MX_53L4A2_SimpleRanging_Process+0x140>)
 80165a6:	2001      	movs	r0, #1
 80165a8:	f7ea fdba 	bl	8001120 <VL53L4A2_RANGING_SENSOR_GetDistance>
 80165ac:	4603      	mov	r3, r0
 80165ae:	4a26      	ldr	r2, [pc, #152]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165b0:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 80165b2:	4b25      	ldr	r3, [pc, #148]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d102      	bne.n	80165c0 <MX_53L4A2_SimpleRanging_Process+0xb0>
    {
      print_result(&Result);
 80165ba:	4825      	ldr	r0, [pc, #148]	@ (8016650 <MX_53L4A2_SimpleRanging_Process+0x140>)
 80165bc:	f000 f84c 	bl	8016658 <print_result>
    }

    HAL_Delay(POLLING_PERIOD);
 80165c0:	20fa      	movs	r0, #250	@ 0xfa
 80165c2:	f7fc f839 	bl	8012638 <HAL_Delay>
  for (i = 0; i < 10; i++)
 80165c6:	7bfb      	ldrb	r3, [r7, #15]
 80165c8:	3301      	adds	r3, #1
 80165ca:	73fb      	strb	r3, [r7, #15]
 80165cc:	7bfb      	ldrb	r3, [r7, #15]
 80165ce:	2b09      	cmp	r3, #9
 80165d0:	d9e8      	bls.n	80165a4 <MX_53L4A2_SimpleRanging_Process+0x94>
  }

  /* stop ranging and perform offset calibration */
  VL53L4A2_RANGING_SENSOR_Stop(VL53L4A2_DEV_CENTER);
 80165d2:	2001      	movs	r0, #1
 80165d4:	f7ea fdf4 	bl	80011c0 <VL53L4A2_RANGING_SENSOR_Stop>
  VL53L4A2_RANGING_SENSOR_OffsetCalibration(VL53L4A2_DEV_CENTER, cal_distance_mm);
 80165d8:	68b9      	ldr	r1, [r7, #8]
 80165da:	2001      	movs	r0, #1
 80165dc:	f7ea fe16 	bl	800120c <VL53L4A2_RANGING_SENSOR_OffsetCalibration>
  printf("--- END OF OFFSET CALIBRATION ---\n");
 80165e0:	481c      	ldr	r0, [pc, #112]	@ (8016654 <MX_53L4A2_SimpleRanging_Process+0x144>)
 80165e2:	f000 fa6f 	bl	8016ac4 <puts>

  status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80165e6:	2101      	movs	r1, #1
 80165e8:	2001      	movs	r0, #1
 80165ea:	f7ea fdc1 	bl	8001170 <VL53L4A2_RANGING_SENSOR_Start>
 80165ee:	4603      	mov	r3, r0
 80165f0:	4a15      	ldr	r2, [pc, #84]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165f2:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80165f4:	4b14      	ldr	r3, [pc, #80]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d004      	beq.n	8016606 <MX_53L4A2_SimpleRanging_Process+0xf6>
  {
    printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 80165fc:	4813      	ldr	r0, [pc, #76]	@ (801664c <MX_53L4A2_SimpleRanging_Process+0x13c>)
 80165fe:	f000 fa61 	bl	8016ac4 <puts>
    while (1);
 8016602:	bf00      	nop
 8016604:	e7fd      	b.n	8016602 <MX_53L4A2_SimpleRanging_Process+0xf2>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8016606:	4912      	ldr	r1, [pc, #72]	@ (8016650 <MX_53L4A2_SimpleRanging_Process+0x140>)
 8016608:	2001      	movs	r0, #1
 801660a:	f7ea fd89 	bl	8001120 <VL53L4A2_RANGING_SENSOR_GetDistance>
 801660e:	4603      	mov	r3, r0
 8016610:	4a0d      	ldr	r2, [pc, #52]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 8016612:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 8016614:	4b0c      	ldr	r3, [pc, #48]	@ (8016648 <MX_53L4A2_SimpleRanging_Process+0x138>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d102      	bne.n	8016622 <MX_53L4A2_SimpleRanging_Process+0x112>
    {
      print_result(&Result);
 801661c:	480c      	ldr	r0, [pc, #48]	@ (8016650 <MX_53L4A2_SimpleRanging_Process+0x140>)
 801661e:	f000 f81b 	bl	8016658 <print_result>
    }

    HAL_Delay(POLLING_PERIOD);
 8016622:	20fa      	movs	r0, #250	@ 0xfa
 8016624:	f7fc f808 	bl	8012638 <HAL_Delay>
    status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8016628:	e7ed      	b.n	8016606 <MX_53L4A2_SimpleRanging_Process+0xf6>
 801662a:	bf00      	nop
 801662c:	2000751c 	.word	0x2000751c
 8016630:	2000752c 	.word	0x2000752c
 8016634:	080178d4 	.word	0x080178d4
 8016638:	080178f0 	.word	0x080178f0
 801663c:	08017910 	.word	0x08017910
 8016640:	2000758c 	.word	0x2000758c
 8016644:	08017938 	.word	0x08017938
 8016648:	20007588 	.word	0x20007588
 801664c:	0801795c 	.word	0x0801795c
 8016650:	20007540 	.word	0x20007540
 8016654:	08017984 	.word	0x08017984

08016658 <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8016658:	b590      	push	{r4, r7, lr}
 801665a:	ed2d 8b02 	vpush	{d8}
 801665e:	b085      	sub	sp, #20
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8016664:	2300      	movs	r3, #0
 8016666:	73fb      	strb	r3, [r7, #15]
 8016668:	e096      	b.n	8016798 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 801666a:	7bfa      	ldrb	r2, [r7, #15]
 801666c:	6879      	ldr	r1, [r7, #4]
 801666e:	4613      	mov	r3, r2
 8016670:	011b      	lsls	r3, r3, #4
 8016672:	4413      	add	r3, r2
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	440b      	add	r3, r1
 8016678:	3304      	adds	r3, #4
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	4619      	mov	r1, r3
 801667e:	484d      	ldr	r0, [pc, #308]	@ (80167b4 <print_result+0x15c>)
 8016680:	f000 f9b0 	bl	80169e4 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8016684:	2300      	movs	r3, #0
 8016686:	73bb      	strb	r3, [r7, #14]
 8016688:	e076      	b.n	8016778 <print_result+0x120>
    {
      printf("\n |---> ");
 801668a:	484b      	ldr	r0, [pc, #300]	@ (80167b8 <print_result+0x160>)
 801668c:	f000 f9aa 	bl	80169e4 <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 8016690:	7bfa      	ldrb	r2, [r7, #15]
 8016692:	7bb8      	ldrb	r0, [r7, #14]
 8016694:	6879      	ldr	r1, [r7, #4]
 8016696:	4613      	mov	r3, r2
 8016698:	011b      	lsls	r3, r3, #4
 801669a:	4413      	add	r3, r2
 801669c:	4403      	add	r3, r0
 801669e:	3304      	adds	r3, #4
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	440b      	add	r3, r1
 80166a4:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80166a6:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 80166a8:	7bfa      	ldrb	r2, [r7, #15]
 80166aa:	7bb8      	ldrb	r0, [r7, #14]
 80166ac:	6879      	ldr	r1, [r7, #4]
 80166ae:	4613      	mov	r3, r2
 80166b0:	011b      	lsls	r3, r3, #4
 80166b2:	4413      	add	r3, r2
 80166b4:	4403      	add	r3, r0
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	440b      	add	r3, r1
 80166ba:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80166bc:	461a      	mov	r2, r3
 80166be:	4621      	mov	r1, r4
 80166c0:	483e      	ldr	r0, [pc, #248]	@ (80167bc <print_result+0x164>)
 80166c2:	f000 f98f 	bl	80169e4 <iprintf>

      if (Profile.EnableAmbient)
 80166c6:	4b3e      	ldr	r3, [pc, #248]	@ (80167c0 <print_result+0x168>)
 80166c8:	68db      	ldr	r3, [r3, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d026      	beq.n	801671c <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 80166ce:	7bfa      	ldrb	r2, [r7, #15]
 80166d0:	7bb8      	ldrb	r0, [r7, #14]
 80166d2:	6879      	ldr	r1, [r7, #4]
 80166d4:	4613      	mov	r3, r2
 80166d6:	011b      	lsls	r3, r3, #4
 80166d8:	4413      	add	r3, r2
 80166da:	4403      	add	r3, r0
 80166dc:	3308      	adds	r3, #8
 80166de:	009b      	lsls	r3, r3, #2
 80166e0:	440b      	add	r3, r1
 80166e2:	3308      	adds	r3, #8
 80166e4:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 80166e8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 80166ec:	7bfa      	ldrb	r2, [r7, #15]
 80166ee:	7bb8      	ldrb	r0, [r7, #14]
 80166f0:	6879      	ldr	r1, [r7, #4]
 80166f2:	4613      	mov	r3, r2
 80166f4:	011b      	lsls	r3, r3, #4
 80166f6:	4413      	add	r3, r2
 80166f8:	4403      	add	r3, r0
 80166fa:	3308      	adds	r3, #8
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	440b      	add	r3, r1
 8016700:	3308      	adds	r3, #8
 8016702:	edd3 7a00 	vldr	s15, [r3]
 8016706:	eeb0 0a67 	vmov.f32	s0, s15
 801670a:	f000 f85f 	bl	80167cc <decimal_part>
 801670e:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 8016710:	461a      	mov	r2, r3
 8016712:	ee18 1a10 	vmov	r1, s16
 8016716:	482b      	ldr	r0, [pc, #172]	@ (80167c4 <print_result+0x16c>)
 8016718:	f000 f964 	bl	80169e4 <iprintf>

      if (Profile.EnableSignal)
 801671c:	4b28      	ldr	r3, [pc, #160]	@ (80167c0 <print_result+0x168>)
 801671e:	691b      	ldr	r3, [r3, #16]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d026      	beq.n	8016772 <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8016724:	7bfa      	ldrb	r2, [r7, #15]
 8016726:	7bb8      	ldrb	r0, [r7, #14]
 8016728:	6879      	ldr	r1, [r7, #4]
 801672a:	4613      	mov	r3, r2
 801672c:	011b      	lsls	r3, r3, #4
 801672e:	4413      	add	r3, r2
 8016730:	4403      	add	r3, r0
 8016732:	330c      	adds	r3, #12
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	440b      	add	r3, r1
 8016738:	3308      	adds	r3, #8
 801673a:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 801673e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 8016742:	7bfa      	ldrb	r2, [r7, #15]
 8016744:	7bb8      	ldrb	r0, [r7, #14]
 8016746:	6879      	ldr	r1, [r7, #4]
 8016748:	4613      	mov	r3, r2
 801674a:	011b      	lsls	r3, r3, #4
 801674c:	4413      	add	r3, r2
 801674e:	4403      	add	r3, r0
 8016750:	330c      	adds	r3, #12
 8016752:	009b      	lsls	r3, r3, #2
 8016754:	440b      	add	r3, r1
 8016756:	3308      	adds	r3, #8
 8016758:	edd3 7a00 	vldr	s15, [r3]
 801675c:	eeb0 0a67 	vmov.f32	s0, s15
 8016760:	f000 f834 	bl	80167cc <decimal_part>
 8016764:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 8016766:	461a      	mov	r2, r3
 8016768:	ee18 1a10 	vmov	r1, s16
 801676c:	4816      	ldr	r0, [pc, #88]	@ (80167c8 <print_result+0x170>)
 801676e:	f000 f939 	bl	80169e4 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8016772:	7bbb      	ldrb	r3, [r7, #14]
 8016774:	3301      	adds	r3, #1
 8016776:	73bb      	strb	r3, [r7, #14]
 8016778:	7bb9      	ldrb	r1, [r7, #14]
 801677a:	7bfa      	ldrb	r2, [r7, #15]
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	4613      	mov	r3, r2
 8016780:	011b      	lsls	r3, r3, #4
 8016782:	4413      	add	r3, r2
 8016784:	009b      	lsls	r3, r3, #2
 8016786:	4403      	add	r3, r0
 8016788:	3304      	adds	r3, #4
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	4299      	cmp	r1, r3
 801678e:	f4ff af7c 	bcc.w	801668a <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8016792:	7bfb      	ldrb	r3, [r7, #15]
 8016794:	3301      	adds	r3, #1
 8016796:	73fb      	strb	r3, [r7, #15]
 8016798:	7bfb      	ldrb	r3, [r7, #15]
 801679a:	2b00      	cmp	r3, #0
 801679c:	f43f af65 	beq.w	801666a <print_result+0x12>
    }
  }
  printf("\n");
 80167a0:	200a      	movs	r0, #10
 80167a2:	f000 f931 	bl	8016a08 <putchar>
}
 80167a6:	bf00      	nop
 80167a8:	3714      	adds	r7, #20
 80167aa:	46bd      	mov	sp, r7
 80167ac:	ecbd 8b02 	vpop	{d8}
 80167b0:	bd90      	pop	{r4, r7, pc}
 80167b2:	bf00      	nop
 80167b4:	080179a8 	.word	0x080179a8
 80167b8:	080179b8 	.word	0x080179b8
 80167bc:	080179c4 	.word	0x080179c4
 80167c0:	2000752c 	.word	0x2000752c
 80167c4:	080179e8 	.word	0x080179e8
 80167c8:	08017a08 	.word	0x08017a08

080167cc <decimal_part>:

static int32_t decimal_part(float_t x)
{
 80167cc:	b480      	push	{r7}
 80167ce:	b085      	sub	sp, #20
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 80167d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80167da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167de:	ee17 3a90 	vmov	r3, s15
 80167e2:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	ee07 3a90 	vmov	s15, r3
 80167ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80167f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167f6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016814 <decimal_part+0x48>
 80167fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016802:	ee17 3a90 	vmov	r3, s15
}
 8016806:	4618      	mov	r0, r3
 8016808:	3714      	adds	r7, #20
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop
 8016814:	42c80000 	.word	0x42c80000

08016818 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8016818:	b480      	push	{r7}
 801681a:	b083      	sub	sp, #12
 801681c:	af00      	add	r7, sp, #0
 801681e:	4603      	mov	r3, r0
 8016820:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8016822:	4b04      	ldr	r3, [pc, #16]	@ (8016834 <BSP_PB_Callback+0x1c>)
 8016824:	2201      	movs	r2, #1
 8016826:	701a      	strb	r2, [r3, #0]
}
 8016828:	bf00      	nop
 801682a:	370c      	adds	r7, #12
 801682c:	46bd      	mov	sp, r7
 801682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016832:	4770      	bx	lr
 8016834:	2000758c 	.word	0x2000758c

08016838 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8016838:	b480      	push	{r7}
 801683a:	b083      	sub	sp, #12
 801683c:	af00      	add	r7, sp, #0
 801683e:	4603      	mov	r3, r0
 8016840:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8016842:	88fb      	ldrh	r3, [r7, #6]
 8016844:	2b10      	cmp	r3, #16
 8016846:	d102      	bne.n	801684e <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8016848:	4b04      	ldr	r3, [pc, #16]	@ (801685c <HAL_GPIO_EXTI_Callback+0x24>)
 801684a:	2201      	movs	r2, #1
 801684c:	701a      	strb	r2, [r3, #0]
  }
}
 801684e:	bf00      	nop
 8016850:	370c      	adds	r7, #12
 8016852:	46bd      	mov	sp, r7
 8016854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016858:	4770      	bx	lr
 801685a:	bf00      	nop
 801685c:	2000758d 	.word	0x2000758d

08016860 <std>:
 8016860:	2300      	movs	r3, #0
 8016862:	b510      	push	{r4, lr}
 8016864:	4604      	mov	r4, r0
 8016866:	e9c0 3300 	strd	r3, r3, [r0]
 801686a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801686e:	6083      	str	r3, [r0, #8]
 8016870:	8181      	strh	r1, [r0, #12]
 8016872:	6643      	str	r3, [r0, #100]	@ 0x64
 8016874:	81c2      	strh	r2, [r0, #14]
 8016876:	6183      	str	r3, [r0, #24]
 8016878:	4619      	mov	r1, r3
 801687a:	2208      	movs	r2, #8
 801687c:	305c      	adds	r0, #92	@ 0x5c
 801687e:	f000 fa01 	bl	8016c84 <memset>
 8016882:	4b0d      	ldr	r3, [pc, #52]	@ (80168b8 <std+0x58>)
 8016884:	6263      	str	r3, [r4, #36]	@ 0x24
 8016886:	4b0d      	ldr	r3, [pc, #52]	@ (80168bc <std+0x5c>)
 8016888:	62a3      	str	r3, [r4, #40]	@ 0x28
 801688a:	4b0d      	ldr	r3, [pc, #52]	@ (80168c0 <std+0x60>)
 801688c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801688e:	4b0d      	ldr	r3, [pc, #52]	@ (80168c4 <std+0x64>)
 8016890:	6323      	str	r3, [r4, #48]	@ 0x30
 8016892:	4b0d      	ldr	r3, [pc, #52]	@ (80168c8 <std+0x68>)
 8016894:	6224      	str	r4, [r4, #32]
 8016896:	429c      	cmp	r4, r3
 8016898:	d006      	beq.n	80168a8 <std+0x48>
 801689a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801689e:	4294      	cmp	r4, r2
 80168a0:	d002      	beq.n	80168a8 <std+0x48>
 80168a2:	33d0      	adds	r3, #208	@ 0xd0
 80168a4:	429c      	cmp	r4, r3
 80168a6:	d105      	bne.n	80168b4 <std+0x54>
 80168a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80168ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b0:	f000 ba74 	b.w	8016d9c <__retarget_lock_init_recursive>
 80168b4:	bd10      	pop	{r4, pc}
 80168b6:	bf00      	nop
 80168b8:	08016ad5 	.word	0x08016ad5
 80168bc:	08016af7 	.word	0x08016af7
 80168c0:	08016b2f 	.word	0x08016b2f
 80168c4:	08016b53 	.word	0x08016b53
 80168c8:	20007590 	.word	0x20007590

080168cc <stdio_exit_handler>:
 80168cc:	4a02      	ldr	r2, [pc, #8]	@ (80168d8 <stdio_exit_handler+0xc>)
 80168ce:	4903      	ldr	r1, [pc, #12]	@ (80168dc <stdio_exit_handler+0x10>)
 80168d0:	4803      	ldr	r0, [pc, #12]	@ (80168e0 <stdio_exit_handler+0x14>)
 80168d2:	f000 b869 	b.w	80169a8 <_fwalk_sglue>
 80168d6:	bf00      	nop
 80168d8:	20000084 	.word	0x20000084
 80168dc:	08017659 	.word	0x08017659
 80168e0:	20000094 	.word	0x20000094

080168e4 <cleanup_stdio>:
 80168e4:	6841      	ldr	r1, [r0, #4]
 80168e6:	4b0c      	ldr	r3, [pc, #48]	@ (8016918 <cleanup_stdio+0x34>)
 80168e8:	4299      	cmp	r1, r3
 80168ea:	b510      	push	{r4, lr}
 80168ec:	4604      	mov	r4, r0
 80168ee:	d001      	beq.n	80168f4 <cleanup_stdio+0x10>
 80168f0:	f000 feb2 	bl	8017658 <_fflush_r>
 80168f4:	68a1      	ldr	r1, [r4, #8]
 80168f6:	4b09      	ldr	r3, [pc, #36]	@ (801691c <cleanup_stdio+0x38>)
 80168f8:	4299      	cmp	r1, r3
 80168fa:	d002      	beq.n	8016902 <cleanup_stdio+0x1e>
 80168fc:	4620      	mov	r0, r4
 80168fe:	f000 feab 	bl	8017658 <_fflush_r>
 8016902:	68e1      	ldr	r1, [r4, #12]
 8016904:	4b06      	ldr	r3, [pc, #24]	@ (8016920 <cleanup_stdio+0x3c>)
 8016906:	4299      	cmp	r1, r3
 8016908:	d004      	beq.n	8016914 <cleanup_stdio+0x30>
 801690a:	4620      	mov	r0, r4
 801690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016910:	f000 bea2 	b.w	8017658 <_fflush_r>
 8016914:	bd10      	pop	{r4, pc}
 8016916:	bf00      	nop
 8016918:	20007590 	.word	0x20007590
 801691c:	200075f8 	.word	0x200075f8
 8016920:	20007660 	.word	0x20007660

08016924 <global_stdio_init.part.0>:
 8016924:	b510      	push	{r4, lr}
 8016926:	4b0b      	ldr	r3, [pc, #44]	@ (8016954 <global_stdio_init.part.0+0x30>)
 8016928:	4c0b      	ldr	r4, [pc, #44]	@ (8016958 <global_stdio_init.part.0+0x34>)
 801692a:	4a0c      	ldr	r2, [pc, #48]	@ (801695c <global_stdio_init.part.0+0x38>)
 801692c:	601a      	str	r2, [r3, #0]
 801692e:	4620      	mov	r0, r4
 8016930:	2200      	movs	r2, #0
 8016932:	2104      	movs	r1, #4
 8016934:	f7ff ff94 	bl	8016860 <std>
 8016938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801693c:	2201      	movs	r2, #1
 801693e:	2109      	movs	r1, #9
 8016940:	f7ff ff8e 	bl	8016860 <std>
 8016944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016948:	2202      	movs	r2, #2
 801694a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801694e:	2112      	movs	r1, #18
 8016950:	f7ff bf86 	b.w	8016860 <std>
 8016954:	200076c8 	.word	0x200076c8
 8016958:	20007590 	.word	0x20007590
 801695c:	080168cd 	.word	0x080168cd

08016960 <__sfp_lock_acquire>:
 8016960:	4801      	ldr	r0, [pc, #4]	@ (8016968 <__sfp_lock_acquire+0x8>)
 8016962:	f000 ba1c 	b.w	8016d9e <__retarget_lock_acquire_recursive>
 8016966:	bf00      	nop
 8016968:	200076d1 	.word	0x200076d1

0801696c <__sfp_lock_release>:
 801696c:	4801      	ldr	r0, [pc, #4]	@ (8016974 <__sfp_lock_release+0x8>)
 801696e:	f000 ba17 	b.w	8016da0 <__retarget_lock_release_recursive>
 8016972:	bf00      	nop
 8016974:	200076d1 	.word	0x200076d1

08016978 <__sinit>:
 8016978:	b510      	push	{r4, lr}
 801697a:	4604      	mov	r4, r0
 801697c:	f7ff fff0 	bl	8016960 <__sfp_lock_acquire>
 8016980:	6a23      	ldr	r3, [r4, #32]
 8016982:	b11b      	cbz	r3, 801698c <__sinit+0x14>
 8016984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016988:	f7ff bff0 	b.w	801696c <__sfp_lock_release>
 801698c:	4b04      	ldr	r3, [pc, #16]	@ (80169a0 <__sinit+0x28>)
 801698e:	6223      	str	r3, [r4, #32]
 8016990:	4b04      	ldr	r3, [pc, #16]	@ (80169a4 <__sinit+0x2c>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d1f5      	bne.n	8016984 <__sinit+0xc>
 8016998:	f7ff ffc4 	bl	8016924 <global_stdio_init.part.0>
 801699c:	e7f2      	b.n	8016984 <__sinit+0xc>
 801699e:	bf00      	nop
 80169a0:	080168e5 	.word	0x080168e5
 80169a4:	200076c8 	.word	0x200076c8

080169a8 <_fwalk_sglue>:
 80169a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169ac:	4607      	mov	r7, r0
 80169ae:	4688      	mov	r8, r1
 80169b0:	4614      	mov	r4, r2
 80169b2:	2600      	movs	r6, #0
 80169b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169b8:	f1b9 0901 	subs.w	r9, r9, #1
 80169bc:	d505      	bpl.n	80169ca <_fwalk_sglue+0x22>
 80169be:	6824      	ldr	r4, [r4, #0]
 80169c0:	2c00      	cmp	r4, #0
 80169c2:	d1f7      	bne.n	80169b4 <_fwalk_sglue+0xc>
 80169c4:	4630      	mov	r0, r6
 80169c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ca:	89ab      	ldrh	r3, [r5, #12]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d907      	bls.n	80169e0 <_fwalk_sglue+0x38>
 80169d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169d4:	3301      	adds	r3, #1
 80169d6:	d003      	beq.n	80169e0 <_fwalk_sglue+0x38>
 80169d8:	4629      	mov	r1, r5
 80169da:	4638      	mov	r0, r7
 80169dc:	47c0      	blx	r8
 80169de:	4306      	orrs	r6, r0
 80169e0:	3568      	adds	r5, #104	@ 0x68
 80169e2:	e7e9      	b.n	80169b8 <_fwalk_sglue+0x10>

080169e4 <iprintf>:
 80169e4:	b40f      	push	{r0, r1, r2, r3}
 80169e6:	b507      	push	{r0, r1, r2, lr}
 80169e8:	4906      	ldr	r1, [pc, #24]	@ (8016a04 <iprintf+0x20>)
 80169ea:	ab04      	add	r3, sp, #16
 80169ec:	6808      	ldr	r0, [r1, #0]
 80169ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80169f2:	6881      	ldr	r1, [r0, #8]
 80169f4:	9301      	str	r3, [sp, #4]
 80169f6:	f000 fb05 	bl	8017004 <_vfiprintf_r>
 80169fa:	b003      	add	sp, #12
 80169fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a00:	b004      	add	sp, #16
 8016a02:	4770      	bx	lr
 8016a04:	20000090 	.word	0x20000090

08016a08 <putchar>:
 8016a08:	4b02      	ldr	r3, [pc, #8]	@ (8016a14 <putchar+0xc>)
 8016a0a:	4601      	mov	r1, r0
 8016a0c:	6818      	ldr	r0, [r3, #0]
 8016a0e:	6882      	ldr	r2, [r0, #8]
 8016a10:	f000 beac 	b.w	801776c <_putc_r>
 8016a14:	20000090 	.word	0x20000090

08016a18 <_puts_r>:
 8016a18:	6a03      	ldr	r3, [r0, #32]
 8016a1a:	b570      	push	{r4, r5, r6, lr}
 8016a1c:	6884      	ldr	r4, [r0, #8]
 8016a1e:	4605      	mov	r5, r0
 8016a20:	460e      	mov	r6, r1
 8016a22:	b90b      	cbnz	r3, 8016a28 <_puts_r+0x10>
 8016a24:	f7ff ffa8 	bl	8016978 <__sinit>
 8016a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a2a:	07db      	lsls	r3, r3, #31
 8016a2c:	d405      	bmi.n	8016a3a <_puts_r+0x22>
 8016a2e:	89a3      	ldrh	r3, [r4, #12]
 8016a30:	0598      	lsls	r0, r3, #22
 8016a32:	d402      	bmi.n	8016a3a <_puts_r+0x22>
 8016a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a36:	f000 f9b2 	bl	8016d9e <__retarget_lock_acquire_recursive>
 8016a3a:	89a3      	ldrh	r3, [r4, #12]
 8016a3c:	0719      	lsls	r1, r3, #28
 8016a3e:	d502      	bpl.n	8016a46 <_puts_r+0x2e>
 8016a40:	6923      	ldr	r3, [r4, #16]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d135      	bne.n	8016ab2 <_puts_r+0x9a>
 8016a46:	4621      	mov	r1, r4
 8016a48:	4628      	mov	r0, r5
 8016a4a:	f000 f8c5 	bl	8016bd8 <__swsetup_r>
 8016a4e:	b380      	cbz	r0, 8016ab2 <_puts_r+0x9a>
 8016a50:	f04f 35ff 	mov.w	r5, #4294967295
 8016a54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a56:	07da      	lsls	r2, r3, #31
 8016a58:	d405      	bmi.n	8016a66 <_puts_r+0x4e>
 8016a5a:	89a3      	ldrh	r3, [r4, #12]
 8016a5c:	059b      	lsls	r3, r3, #22
 8016a5e:	d402      	bmi.n	8016a66 <_puts_r+0x4e>
 8016a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a62:	f000 f99d 	bl	8016da0 <__retarget_lock_release_recursive>
 8016a66:	4628      	mov	r0, r5
 8016a68:	bd70      	pop	{r4, r5, r6, pc}
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	da04      	bge.n	8016a78 <_puts_r+0x60>
 8016a6e:	69a2      	ldr	r2, [r4, #24]
 8016a70:	429a      	cmp	r2, r3
 8016a72:	dc17      	bgt.n	8016aa4 <_puts_r+0x8c>
 8016a74:	290a      	cmp	r1, #10
 8016a76:	d015      	beq.n	8016aa4 <_puts_r+0x8c>
 8016a78:	6823      	ldr	r3, [r4, #0]
 8016a7a:	1c5a      	adds	r2, r3, #1
 8016a7c:	6022      	str	r2, [r4, #0]
 8016a7e:	7019      	strb	r1, [r3, #0]
 8016a80:	68a3      	ldr	r3, [r4, #8]
 8016a82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a86:	3b01      	subs	r3, #1
 8016a88:	60a3      	str	r3, [r4, #8]
 8016a8a:	2900      	cmp	r1, #0
 8016a8c:	d1ed      	bne.n	8016a6a <_puts_r+0x52>
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	da11      	bge.n	8016ab6 <_puts_r+0x9e>
 8016a92:	4622      	mov	r2, r4
 8016a94:	210a      	movs	r1, #10
 8016a96:	4628      	mov	r0, r5
 8016a98:	f000 f85f 	bl	8016b5a <__swbuf_r>
 8016a9c:	3001      	adds	r0, #1
 8016a9e:	d0d7      	beq.n	8016a50 <_puts_r+0x38>
 8016aa0:	250a      	movs	r5, #10
 8016aa2:	e7d7      	b.n	8016a54 <_puts_r+0x3c>
 8016aa4:	4622      	mov	r2, r4
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	f000 f857 	bl	8016b5a <__swbuf_r>
 8016aac:	3001      	adds	r0, #1
 8016aae:	d1e7      	bne.n	8016a80 <_puts_r+0x68>
 8016ab0:	e7ce      	b.n	8016a50 <_puts_r+0x38>
 8016ab2:	3e01      	subs	r6, #1
 8016ab4:	e7e4      	b.n	8016a80 <_puts_r+0x68>
 8016ab6:	6823      	ldr	r3, [r4, #0]
 8016ab8:	1c5a      	adds	r2, r3, #1
 8016aba:	6022      	str	r2, [r4, #0]
 8016abc:	220a      	movs	r2, #10
 8016abe:	701a      	strb	r2, [r3, #0]
 8016ac0:	e7ee      	b.n	8016aa0 <_puts_r+0x88>
	...

08016ac4 <puts>:
 8016ac4:	4b02      	ldr	r3, [pc, #8]	@ (8016ad0 <puts+0xc>)
 8016ac6:	4601      	mov	r1, r0
 8016ac8:	6818      	ldr	r0, [r3, #0]
 8016aca:	f7ff bfa5 	b.w	8016a18 <_puts_r>
 8016ace:	bf00      	nop
 8016ad0:	20000090 	.word	0x20000090

08016ad4 <__sread>:
 8016ad4:	b510      	push	{r4, lr}
 8016ad6:	460c      	mov	r4, r1
 8016ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016adc:	f000 f910 	bl	8016d00 <_read_r>
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	bfab      	itete	ge
 8016ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8016ae8:	181b      	addge	r3, r3, r0
 8016aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016aee:	bfac      	ite	ge
 8016af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016af2:	81a3      	strhlt	r3, [r4, #12]
 8016af4:	bd10      	pop	{r4, pc}

08016af6 <__swrite>:
 8016af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016afa:	461f      	mov	r7, r3
 8016afc:	898b      	ldrh	r3, [r1, #12]
 8016afe:	05db      	lsls	r3, r3, #23
 8016b00:	4605      	mov	r5, r0
 8016b02:	460c      	mov	r4, r1
 8016b04:	4616      	mov	r6, r2
 8016b06:	d505      	bpl.n	8016b14 <__swrite+0x1e>
 8016b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b0c:	2302      	movs	r3, #2
 8016b0e:	2200      	movs	r2, #0
 8016b10:	f000 f8e4 	bl	8016cdc <_lseek_r>
 8016b14:	89a3      	ldrh	r3, [r4, #12]
 8016b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b1e:	81a3      	strh	r3, [r4, #12]
 8016b20:	4632      	mov	r2, r6
 8016b22:	463b      	mov	r3, r7
 8016b24:	4628      	mov	r0, r5
 8016b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2a:	f000 b8fb 	b.w	8016d24 <_write_r>

08016b2e <__sseek>:
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	460c      	mov	r4, r1
 8016b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b36:	f000 f8d1 	bl	8016cdc <_lseek_r>
 8016b3a:	1c43      	adds	r3, r0, #1
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	bf15      	itete	ne
 8016b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b4a:	81a3      	strheq	r3, [r4, #12]
 8016b4c:	bf18      	it	ne
 8016b4e:	81a3      	strhne	r3, [r4, #12]
 8016b50:	bd10      	pop	{r4, pc}

08016b52 <__sclose>:
 8016b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b56:	f000 b8b1 	b.w	8016cbc <_close_r>

08016b5a <__swbuf_r>:
 8016b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b5c:	460e      	mov	r6, r1
 8016b5e:	4614      	mov	r4, r2
 8016b60:	4605      	mov	r5, r0
 8016b62:	b118      	cbz	r0, 8016b6c <__swbuf_r+0x12>
 8016b64:	6a03      	ldr	r3, [r0, #32]
 8016b66:	b90b      	cbnz	r3, 8016b6c <__swbuf_r+0x12>
 8016b68:	f7ff ff06 	bl	8016978 <__sinit>
 8016b6c:	69a3      	ldr	r3, [r4, #24]
 8016b6e:	60a3      	str	r3, [r4, #8]
 8016b70:	89a3      	ldrh	r3, [r4, #12]
 8016b72:	071a      	lsls	r2, r3, #28
 8016b74:	d501      	bpl.n	8016b7a <__swbuf_r+0x20>
 8016b76:	6923      	ldr	r3, [r4, #16]
 8016b78:	b943      	cbnz	r3, 8016b8c <__swbuf_r+0x32>
 8016b7a:	4621      	mov	r1, r4
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	f000 f82b 	bl	8016bd8 <__swsetup_r>
 8016b82:	b118      	cbz	r0, 8016b8c <__swbuf_r+0x32>
 8016b84:	f04f 37ff 	mov.w	r7, #4294967295
 8016b88:	4638      	mov	r0, r7
 8016b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b8c:	6823      	ldr	r3, [r4, #0]
 8016b8e:	6922      	ldr	r2, [r4, #16]
 8016b90:	1a98      	subs	r0, r3, r2
 8016b92:	6963      	ldr	r3, [r4, #20]
 8016b94:	b2f6      	uxtb	r6, r6
 8016b96:	4283      	cmp	r3, r0
 8016b98:	4637      	mov	r7, r6
 8016b9a:	dc05      	bgt.n	8016ba8 <__swbuf_r+0x4e>
 8016b9c:	4621      	mov	r1, r4
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	f000 fd5a 	bl	8017658 <_fflush_r>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d1ed      	bne.n	8016b84 <__swbuf_r+0x2a>
 8016ba8:	68a3      	ldr	r3, [r4, #8]
 8016baa:	3b01      	subs	r3, #1
 8016bac:	60a3      	str	r3, [r4, #8]
 8016bae:	6823      	ldr	r3, [r4, #0]
 8016bb0:	1c5a      	adds	r2, r3, #1
 8016bb2:	6022      	str	r2, [r4, #0]
 8016bb4:	701e      	strb	r6, [r3, #0]
 8016bb6:	6962      	ldr	r2, [r4, #20]
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d004      	beq.n	8016bc8 <__swbuf_r+0x6e>
 8016bbe:	89a3      	ldrh	r3, [r4, #12]
 8016bc0:	07db      	lsls	r3, r3, #31
 8016bc2:	d5e1      	bpl.n	8016b88 <__swbuf_r+0x2e>
 8016bc4:	2e0a      	cmp	r6, #10
 8016bc6:	d1df      	bne.n	8016b88 <__swbuf_r+0x2e>
 8016bc8:	4621      	mov	r1, r4
 8016bca:	4628      	mov	r0, r5
 8016bcc:	f000 fd44 	bl	8017658 <_fflush_r>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d0d9      	beq.n	8016b88 <__swbuf_r+0x2e>
 8016bd4:	e7d6      	b.n	8016b84 <__swbuf_r+0x2a>
	...

08016bd8 <__swsetup_r>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	4b29      	ldr	r3, [pc, #164]	@ (8016c80 <__swsetup_r+0xa8>)
 8016bdc:	4605      	mov	r5, r0
 8016bde:	6818      	ldr	r0, [r3, #0]
 8016be0:	460c      	mov	r4, r1
 8016be2:	b118      	cbz	r0, 8016bec <__swsetup_r+0x14>
 8016be4:	6a03      	ldr	r3, [r0, #32]
 8016be6:	b90b      	cbnz	r3, 8016bec <__swsetup_r+0x14>
 8016be8:	f7ff fec6 	bl	8016978 <__sinit>
 8016bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bf0:	0719      	lsls	r1, r3, #28
 8016bf2:	d422      	bmi.n	8016c3a <__swsetup_r+0x62>
 8016bf4:	06da      	lsls	r2, r3, #27
 8016bf6:	d407      	bmi.n	8016c08 <__swsetup_r+0x30>
 8016bf8:	2209      	movs	r2, #9
 8016bfa:	602a      	str	r2, [r5, #0]
 8016bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c00:	81a3      	strh	r3, [r4, #12]
 8016c02:	f04f 30ff 	mov.w	r0, #4294967295
 8016c06:	e033      	b.n	8016c70 <__swsetup_r+0x98>
 8016c08:	0758      	lsls	r0, r3, #29
 8016c0a:	d512      	bpl.n	8016c32 <__swsetup_r+0x5a>
 8016c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c0e:	b141      	cbz	r1, 8016c22 <__swsetup_r+0x4a>
 8016c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c14:	4299      	cmp	r1, r3
 8016c16:	d002      	beq.n	8016c1e <__swsetup_r+0x46>
 8016c18:	4628      	mov	r0, r5
 8016c1a:	f000 f8d1 	bl	8016dc0 <_free_r>
 8016c1e:	2300      	movs	r3, #0
 8016c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c22:	89a3      	ldrh	r3, [r4, #12]
 8016c24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c28:	81a3      	strh	r3, [r4, #12]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	6063      	str	r3, [r4, #4]
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	6023      	str	r3, [r4, #0]
 8016c32:	89a3      	ldrh	r3, [r4, #12]
 8016c34:	f043 0308 	orr.w	r3, r3, #8
 8016c38:	81a3      	strh	r3, [r4, #12]
 8016c3a:	6923      	ldr	r3, [r4, #16]
 8016c3c:	b94b      	cbnz	r3, 8016c52 <__swsetup_r+0x7a>
 8016c3e:	89a3      	ldrh	r3, [r4, #12]
 8016c40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c48:	d003      	beq.n	8016c52 <__swsetup_r+0x7a>
 8016c4a:	4621      	mov	r1, r4
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f000 fd51 	bl	80176f4 <__smakebuf_r>
 8016c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c56:	f013 0201 	ands.w	r2, r3, #1
 8016c5a:	d00a      	beq.n	8016c72 <__swsetup_r+0x9a>
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	60a2      	str	r2, [r4, #8]
 8016c60:	6962      	ldr	r2, [r4, #20]
 8016c62:	4252      	negs	r2, r2
 8016c64:	61a2      	str	r2, [r4, #24]
 8016c66:	6922      	ldr	r2, [r4, #16]
 8016c68:	b942      	cbnz	r2, 8016c7c <__swsetup_r+0xa4>
 8016c6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c6e:	d1c5      	bne.n	8016bfc <__swsetup_r+0x24>
 8016c70:	bd38      	pop	{r3, r4, r5, pc}
 8016c72:	0799      	lsls	r1, r3, #30
 8016c74:	bf58      	it	pl
 8016c76:	6962      	ldrpl	r2, [r4, #20]
 8016c78:	60a2      	str	r2, [r4, #8]
 8016c7a:	e7f4      	b.n	8016c66 <__swsetup_r+0x8e>
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	e7f7      	b.n	8016c70 <__swsetup_r+0x98>
 8016c80:	20000090 	.word	0x20000090

08016c84 <memset>:
 8016c84:	4402      	add	r2, r0
 8016c86:	4603      	mov	r3, r0
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d100      	bne.n	8016c8e <memset+0xa>
 8016c8c:	4770      	bx	lr
 8016c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8016c92:	e7f9      	b.n	8016c88 <memset+0x4>

08016c94 <strncpy>:
 8016c94:	b510      	push	{r4, lr}
 8016c96:	3901      	subs	r1, #1
 8016c98:	4603      	mov	r3, r0
 8016c9a:	b132      	cbz	r2, 8016caa <strncpy+0x16>
 8016c9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ca0:	f803 4b01 	strb.w	r4, [r3], #1
 8016ca4:	3a01      	subs	r2, #1
 8016ca6:	2c00      	cmp	r4, #0
 8016ca8:	d1f7      	bne.n	8016c9a <strncpy+0x6>
 8016caa:	441a      	add	r2, r3
 8016cac:	2100      	movs	r1, #0
 8016cae:	4293      	cmp	r3, r2
 8016cb0:	d100      	bne.n	8016cb4 <strncpy+0x20>
 8016cb2:	bd10      	pop	{r4, pc}
 8016cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8016cb8:	e7f9      	b.n	8016cae <strncpy+0x1a>
	...

08016cbc <_close_r>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4d06      	ldr	r5, [pc, #24]	@ (8016cd8 <_close_r+0x1c>)
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	602b      	str	r3, [r5, #0]
 8016cc8:	f7ea f8a7 	bl	8000e1a <_close>
 8016ccc:	1c43      	adds	r3, r0, #1
 8016cce:	d102      	bne.n	8016cd6 <_close_r+0x1a>
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	b103      	cbz	r3, 8016cd6 <_close_r+0x1a>
 8016cd4:	6023      	str	r3, [r4, #0]
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	200076cc 	.word	0x200076cc

08016cdc <_lseek_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4d07      	ldr	r5, [pc, #28]	@ (8016cfc <_lseek_r+0x20>)
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	4608      	mov	r0, r1
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	602a      	str	r2, [r5, #0]
 8016cea:	461a      	mov	r2, r3
 8016cec:	f7ea f8bc 	bl	8000e68 <_lseek>
 8016cf0:	1c43      	adds	r3, r0, #1
 8016cf2:	d102      	bne.n	8016cfa <_lseek_r+0x1e>
 8016cf4:	682b      	ldr	r3, [r5, #0]
 8016cf6:	b103      	cbz	r3, 8016cfa <_lseek_r+0x1e>
 8016cf8:	6023      	str	r3, [r4, #0]
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	200076cc 	.word	0x200076cc

08016d00 <_read_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	4d07      	ldr	r5, [pc, #28]	@ (8016d20 <_read_r+0x20>)
 8016d04:	4604      	mov	r4, r0
 8016d06:	4608      	mov	r0, r1
 8016d08:	4611      	mov	r1, r2
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	602a      	str	r2, [r5, #0]
 8016d0e:	461a      	mov	r2, r3
 8016d10:	f7ea f866 	bl	8000de0 <_read>
 8016d14:	1c43      	adds	r3, r0, #1
 8016d16:	d102      	bne.n	8016d1e <_read_r+0x1e>
 8016d18:	682b      	ldr	r3, [r5, #0]
 8016d1a:	b103      	cbz	r3, 8016d1e <_read_r+0x1e>
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	bd38      	pop	{r3, r4, r5, pc}
 8016d20:	200076cc 	.word	0x200076cc

08016d24 <_write_r>:
 8016d24:	b538      	push	{r3, r4, r5, lr}
 8016d26:	4d07      	ldr	r5, [pc, #28]	@ (8016d44 <_write_r+0x20>)
 8016d28:	4604      	mov	r4, r0
 8016d2a:	4608      	mov	r0, r1
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	2200      	movs	r2, #0
 8016d30:	602a      	str	r2, [r5, #0]
 8016d32:	461a      	mov	r2, r3
 8016d34:	f7e9 fc92 	bl	800065c <_write>
 8016d38:	1c43      	adds	r3, r0, #1
 8016d3a:	d102      	bne.n	8016d42 <_write_r+0x1e>
 8016d3c:	682b      	ldr	r3, [r5, #0]
 8016d3e:	b103      	cbz	r3, 8016d42 <_write_r+0x1e>
 8016d40:	6023      	str	r3, [r4, #0]
 8016d42:	bd38      	pop	{r3, r4, r5, pc}
 8016d44:	200076cc 	.word	0x200076cc

08016d48 <__errno>:
 8016d48:	4b01      	ldr	r3, [pc, #4]	@ (8016d50 <__errno+0x8>)
 8016d4a:	6818      	ldr	r0, [r3, #0]
 8016d4c:	4770      	bx	lr
 8016d4e:	bf00      	nop
 8016d50:	20000090 	.word	0x20000090

08016d54 <__libc_init_array>:
 8016d54:	b570      	push	{r4, r5, r6, lr}
 8016d56:	4d0d      	ldr	r5, [pc, #52]	@ (8016d8c <__libc_init_array+0x38>)
 8016d58:	4c0d      	ldr	r4, [pc, #52]	@ (8016d90 <__libc_init_array+0x3c>)
 8016d5a:	1b64      	subs	r4, r4, r5
 8016d5c:	10a4      	asrs	r4, r4, #2
 8016d5e:	2600      	movs	r6, #0
 8016d60:	42a6      	cmp	r6, r4
 8016d62:	d109      	bne.n	8016d78 <__libc_init_array+0x24>
 8016d64:	4d0b      	ldr	r5, [pc, #44]	@ (8016d94 <__libc_init_array+0x40>)
 8016d66:	4c0c      	ldr	r4, [pc, #48]	@ (8016d98 <__libc_init_array+0x44>)
 8016d68:	f000 fd66 	bl	8017838 <_init>
 8016d6c:	1b64      	subs	r4, r4, r5
 8016d6e:	10a4      	asrs	r4, r4, #2
 8016d70:	2600      	movs	r6, #0
 8016d72:	42a6      	cmp	r6, r4
 8016d74:	d105      	bne.n	8016d82 <__libc_init_array+0x2e>
 8016d76:	bd70      	pop	{r4, r5, r6, pc}
 8016d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d7c:	4798      	blx	r3
 8016d7e:	3601      	adds	r6, #1
 8016d80:	e7ee      	b.n	8016d60 <__libc_init_array+0xc>
 8016d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d86:	4798      	blx	r3
 8016d88:	3601      	adds	r6, #1
 8016d8a:	e7f2      	b.n	8016d72 <__libc_init_array+0x1e>
 8016d8c:	08017b3c 	.word	0x08017b3c
 8016d90:	08017b3c 	.word	0x08017b3c
 8016d94:	08017b3c 	.word	0x08017b3c
 8016d98:	08017b40 	.word	0x08017b40

08016d9c <__retarget_lock_init_recursive>:
 8016d9c:	4770      	bx	lr

08016d9e <__retarget_lock_acquire_recursive>:
 8016d9e:	4770      	bx	lr

08016da0 <__retarget_lock_release_recursive>:
 8016da0:	4770      	bx	lr

08016da2 <memcpy>:
 8016da2:	440a      	add	r2, r1
 8016da4:	4291      	cmp	r1, r2
 8016da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8016daa:	d100      	bne.n	8016dae <memcpy+0xc>
 8016dac:	4770      	bx	lr
 8016dae:	b510      	push	{r4, lr}
 8016db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016db8:	4291      	cmp	r1, r2
 8016dba:	d1f9      	bne.n	8016db0 <memcpy+0xe>
 8016dbc:	bd10      	pop	{r4, pc}
	...

08016dc0 <_free_r>:
 8016dc0:	b538      	push	{r3, r4, r5, lr}
 8016dc2:	4605      	mov	r5, r0
 8016dc4:	2900      	cmp	r1, #0
 8016dc6:	d041      	beq.n	8016e4c <_free_r+0x8c>
 8016dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016dcc:	1f0c      	subs	r4, r1, #4
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	bfb8      	it	lt
 8016dd2:	18e4      	addlt	r4, r4, r3
 8016dd4:	f000 f8e0 	bl	8016f98 <__malloc_lock>
 8016dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8016e50 <_free_r+0x90>)
 8016dda:	6813      	ldr	r3, [r2, #0]
 8016ddc:	b933      	cbnz	r3, 8016dec <_free_r+0x2c>
 8016dde:	6063      	str	r3, [r4, #4]
 8016de0:	6014      	str	r4, [r2, #0]
 8016de2:	4628      	mov	r0, r5
 8016de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016de8:	f000 b8dc 	b.w	8016fa4 <__malloc_unlock>
 8016dec:	42a3      	cmp	r3, r4
 8016dee:	d908      	bls.n	8016e02 <_free_r+0x42>
 8016df0:	6820      	ldr	r0, [r4, #0]
 8016df2:	1821      	adds	r1, r4, r0
 8016df4:	428b      	cmp	r3, r1
 8016df6:	bf01      	itttt	eq
 8016df8:	6819      	ldreq	r1, [r3, #0]
 8016dfa:	685b      	ldreq	r3, [r3, #4]
 8016dfc:	1809      	addeq	r1, r1, r0
 8016dfe:	6021      	streq	r1, [r4, #0]
 8016e00:	e7ed      	b.n	8016dde <_free_r+0x1e>
 8016e02:	461a      	mov	r2, r3
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	b10b      	cbz	r3, 8016e0c <_free_r+0x4c>
 8016e08:	42a3      	cmp	r3, r4
 8016e0a:	d9fa      	bls.n	8016e02 <_free_r+0x42>
 8016e0c:	6811      	ldr	r1, [r2, #0]
 8016e0e:	1850      	adds	r0, r2, r1
 8016e10:	42a0      	cmp	r0, r4
 8016e12:	d10b      	bne.n	8016e2c <_free_r+0x6c>
 8016e14:	6820      	ldr	r0, [r4, #0]
 8016e16:	4401      	add	r1, r0
 8016e18:	1850      	adds	r0, r2, r1
 8016e1a:	4283      	cmp	r3, r0
 8016e1c:	6011      	str	r1, [r2, #0]
 8016e1e:	d1e0      	bne.n	8016de2 <_free_r+0x22>
 8016e20:	6818      	ldr	r0, [r3, #0]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	6053      	str	r3, [r2, #4]
 8016e26:	4408      	add	r0, r1
 8016e28:	6010      	str	r0, [r2, #0]
 8016e2a:	e7da      	b.n	8016de2 <_free_r+0x22>
 8016e2c:	d902      	bls.n	8016e34 <_free_r+0x74>
 8016e2e:	230c      	movs	r3, #12
 8016e30:	602b      	str	r3, [r5, #0]
 8016e32:	e7d6      	b.n	8016de2 <_free_r+0x22>
 8016e34:	6820      	ldr	r0, [r4, #0]
 8016e36:	1821      	adds	r1, r4, r0
 8016e38:	428b      	cmp	r3, r1
 8016e3a:	bf04      	itt	eq
 8016e3c:	6819      	ldreq	r1, [r3, #0]
 8016e3e:	685b      	ldreq	r3, [r3, #4]
 8016e40:	6063      	str	r3, [r4, #4]
 8016e42:	bf04      	itt	eq
 8016e44:	1809      	addeq	r1, r1, r0
 8016e46:	6021      	streq	r1, [r4, #0]
 8016e48:	6054      	str	r4, [r2, #4]
 8016e4a:	e7ca      	b.n	8016de2 <_free_r+0x22>
 8016e4c:	bd38      	pop	{r3, r4, r5, pc}
 8016e4e:	bf00      	nop
 8016e50:	200076d8 	.word	0x200076d8

08016e54 <sbrk_aligned>:
 8016e54:	b570      	push	{r4, r5, r6, lr}
 8016e56:	4e0f      	ldr	r6, [pc, #60]	@ (8016e94 <sbrk_aligned+0x40>)
 8016e58:	460c      	mov	r4, r1
 8016e5a:	6831      	ldr	r1, [r6, #0]
 8016e5c:	4605      	mov	r5, r0
 8016e5e:	b911      	cbnz	r1, 8016e66 <sbrk_aligned+0x12>
 8016e60:	f000 fcda 	bl	8017818 <_sbrk_r>
 8016e64:	6030      	str	r0, [r6, #0]
 8016e66:	4621      	mov	r1, r4
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f000 fcd5 	bl	8017818 <_sbrk_r>
 8016e6e:	1c43      	adds	r3, r0, #1
 8016e70:	d103      	bne.n	8016e7a <sbrk_aligned+0x26>
 8016e72:	f04f 34ff 	mov.w	r4, #4294967295
 8016e76:	4620      	mov	r0, r4
 8016e78:	bd70      	pop	{r4, r5, r6, pc}
 8016e7a:	1cc4      	adds	r4, r0, #3
 8016e7c:	f024 0403 	bic.w	r4, r4, #3
 8016e80:	42a0      	cmp	r0, r4
 8016e82:	d0f8      	beq.n	8016e76 <sbrk_aligned+0x22>
 8016e84:	1a21      	subs	r1, r4, r0
 8016e86:	4628      	mov	r0, r5
 8016e88:	f000 fcc6 	bl	8017818 <_sbrk_r>
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	d1f2      	bne.n	8016e76 <sbrk_aligned+0x22>
 8016e90:	e7ef      	b.n	8016e72 <sbrk_aligned+0x1e>
 8016e92:	bf00      	nop
 8016e94:	200076d4 	.word	0x200076d4

08016e98 <_malloc_r>:
 8016e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e9c:	1ccd      	adds	r5, r1, #3
 8016e9e:	f025 0503 	bic.w	r5, r5, #3
 8016ea2:	3508      	adds	r5, #8
 8016ea4:	2d0c      	cmp	r5, #12
 8016ea6:	bf38      	it	cc
 8016ea8:	250c      	movcc	r5, #12
 8016eaa:	2d00      	cmp	r5, #0
 8016eac:	4606      	mov	r6, r0
 8016eae:	db01      	blt.n	8016eb4 <_malloc_r+0x1c>
 8016eb0:	42a9      	cmp	r1, r5
 8016eb2:	d904      	bls.n	8016ebe <_malloc_r+0x26>
 8016eb4:	230c      	movs	r3, #12
 8016eb6:	6033      	str	r3, [r6, #0]
 8016eb8:	2000      	movs	r0, #0
 8016eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016f94 <_malloc_r+0xfc>
 8016ec2:	f000 f869 	bl	8016f98 <__malloc_lock>
 8016ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8016eca:	461c      	mov	r4, r3
 8016ecc:	bb44      	cbnz	r4, 8016f20 <_malloc_r+0x88>
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	f7ff ffbf 	bl	8016e54 <sbrk_aligned>
 8016ed6:	1c43      	adds	r3, r0, #1
 8016ed8:	4604      	mov	r4, r0
 8016eda:	d158      	bne.n	8016f8e <_malloc_r+0xf6>
 8016edc:	f8d8 4000 	ldr.w	r4, [r8]
 8016ee0:	4627      	mov	r7, r4
 8016ee2:	2f00      	cmp	r7, #0
 8016ee4:	d143      	bne.n	8016f6e <_malloc_r+0xd6>
 8016ee6:	2c00      	cmp	r4, #0
 8016ee8:	d04b      	beq.n	8016f82 <_malloc_r+0xea>
 8016eea:	6823      	ldr	r3, [r4, #0]
 8016eec:	4639      	mov	r1, r7
 8016eee:	4630      	mov	r0, r6
 8016ef0:	eb04 0903 	add.w	r9, r4, r3
 8016ef4:	f000 fc90 	bl	8017818 <_sbrk_r>
 8016ef8:	4581      	cmp	r9, r0
 8016efa:	d142      	bne.n	8016f82 <_malloc_r+0xea>
 8016efc:	6821      	ldr	r1, [r4, #0]
 8016efe:	1a6d      	subs	r5, r5, r1
 8016f00:	4629      	mov	r1, r5
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7ff ffa6 	bl	8016e54 <sbrk_aligned>
 8016f08:	3001      	adds	r0, #1
 8016f0a:	d03a      	beq.n	8016f82 <_malloc_r+0xea>
 8016f0c:	6823      	ldr	r3, [r4, #0]
 8016f0e:	442b      	add	r3, r5
 8016f10:	6023      	str	r3, [r4, #0]
 8016f12:	f8d8 3000 	ldr.w	r3, [r8]
 8016f16:	685a      	ldr	r2, [r3, #4]
 8016f18:	bb62      	cbnz	r2, 8016f74 <_malloc_r+0xdc>
 8016f1a:	f8c8 7000 	str.w	r7, [r8]
 8016f1e:	e00f      	b.n	8016f40 <_malloc_r+0xa8>
 8016f20:	6822      	ldr	r2, [r4, #0]
 8016f22:	1b52      	subs	r2, r2, r5
 8016f24:	d420      	bmi.n	8016f68 <_malloc_r+0xd0>
 8016f26:	2a0b      	cmp	r2, #11
 8016f28:	d917      	bls.n	8016f5a <_malloc_r+0xc2>
 8016f2a:	1961      	adds	r1, r4, r5
 8016f2c:	42a3      	cmp	r3, r4
 8016f2e:	6025      	str	r5, [r4, #0]
 8016f30:	bf18      	it	ne
 8016f32:	6059      	strne	r1, [r3, #4]
 8016f34:	6863      	ldr	r3, [r4, #4]
 8016f36:	bf08      	it	eq
 8016f38:	f8c8 1000 	streq.w	r1, [r8]
 8016f3c:	5162      	str	r2, [r4, r5]
 8016f3e:	604b      	str	r3, [r1, #4]
 8016f40:	4630      	mov	r0, r6
 8016f42:	f000 f82f 	bl	8016fa4 <__malloc_unlock>
 8016f46:	f104 000b 	add.w	r0, r4, #11
 8016f4a:	1d23      	adds	r3, r4, #4
 8016f4c:	f020 0007 	bic.w	r0, r0, #7
 8016f50:	1ac2      	subs	r2, r0, r3
 8016f52:	bf1c      	itt	ne
 8016f54:	1a1b      	subne	r3, r3, r0
 8016f56:	50a3      	strne	r3, [r4, r2]
 8016f58:	e7af      	b.n	8016eba <_malloc_r+0x22>
 8016f5a:	6862      	ldr	r2, [r4, #4]
 8016f5c:	42a3      	cmp	r3, r4
 8016f5e:	bf0c      	ite	eq
 8016f60:	f8c8 2000 	streq.w	r2, [r8]
 8016f64:	605a      	strne	r2, [r3, #4]
 8016f66:	e7eb      	b.n	8016f40 <_malloc_r+0xa8>
 8016f68:	4623      	mov	r3, r4
 8016f6a:	6864      	ldr	r4, [r4, #4]
 8016f6c:	e7ae      	b.n	8016ecc <_malloc_r+0x34>
 8016f6e:	463c      	mov	r4, r7
 8016f70:	687f      	ldr	r7, [r7, #4]
 8016f72:	e7b6      	b.n	8016ee2 <_malloc_r+0x4a>
 8016f74:	461a      	mov	r2, r3
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	42a3      	cmp	r3, r4
 8016f7a:	d1fb      	bne.n	8016f74 <_malloc_r+0xdc>
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	6053      	str	r3, [r2, #4]
 8016f80:	e7de      	b.n	8016f40 <_malloc_r+0xa8>
 8016f82:	230c      	movs	r3, #12
 8016f84:	6033      	str	r3, [r6, #0]
 8016f86:	4630      	mov	r0, r6
 8016f88:	f000 f80c 	bl	8016fa4 <__malloc_unlock>
 8016f8c:	e794      	b.n	8016eb8 <_malloc_r+0x20>
 8016f8e:	6005      	str	r5, [r0, #0]
 8016f90:	e7d6      	b.n	8016f40 <_malloc_r+0xa8>
 8016f92:	bf00      	nop
 8016f94:	200076d8 	.word	0x200076d8

08016f98 <__malloc_lock>:
 8016f98:	4801      	ldr	r0, [pc, #4]	@ (8016fa0 <__malloc_lock+0x8>)
 8016f9a:	f7ff bf00 	b.w	8016d9e <__retarget_lock_acquire_recursive>
 8016f9e:	bf00      	nop
 8016fa0:	200076d0 	.word	0x200076d0

08016fa4 <__malloc_unlock>:
 8016fa4:	4801      	ldr	r0, [pc, #4]	@ (8016fac <__malloc_unlock+0x8>)
 8016fa6:	f7ff befb 	b.w	8016da0 <__retarget_lock_release_recursive>
 8016faa:	bf00      	nop
 8016fac:	200076d0 	.word	0x200076d0

08016fb0 <__sfputc_r>:
 8016fb0:	6893      	ldr	r3, [r2, #8]
 8016fb2:	3b01      	subs	r3, #1
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	b410      	push	{r4}
 8016fb8:	6093      	str	r3, [r2, #8]
 8016fba:	da08      	bge.n	8016fce <__sfputc_r+0x1e>
 8016fbc:	6994      	ldr	r4, [r2, #24]
 8016fbe:	42a3      	cmp	r3, r4
 8016fc0:	db01      	blt.n	8016fc6 <__sfputc_r+0x16>
 8016fc2:	290a      	cmp	r1, #10
 8016fc4:	d103      	bne.n	8016fce <__sfputc_r+0x1e>
 8016fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fca:	f7ff bdc6 	b.w	8016b5a <__swbuf_r>
 8016fce:	6813      	ldr	r3, [r2, #0]
 8016fd0:	1c58      	adds	r0, r3, #1
 8016fd2:	6010      	str	r0, [r2, #0]
 8016fd4:	7019      	strb	r1, [r3, #0]
 8016fd6:	4608      	mov	r0, r1
 8016fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fdc:	4770      	bx	lr

08016fde <__sfputs_r>:
 8016fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fe0:	4606      	mov	r6, r0
 8016fe2:	460f      	mov	r7, r1
 8016fe4:	4614      	mov	r4, r2
 8016fe6:	18d5      	adds	r5, r2, r3
 8016fe8:	42ac      	cmp	r4, r5
 8016fea:	d101      	bne.n	8016ff0 <__sfputs_r+0x12>
 8016fec:	2000      	movs	r0, #0
 8016fee:	e007      	b.n	8017000 <__sfputs_r+0x22>
 8016ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ff4:	463a      	mov	r2, r7
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f7ff ffda 	bl	8016fb0 <__sfputc_r>
 8016ffc:	1c43      	adds	r3, r0, #1
 8016ffe:	d1f3      	bne.n	8016fe8 <__sfputs_r+0xa>
 8017000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017004 <_vfiprintf_r>:
 8017004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017008:	460d      	mov	r5, r1
 801700a:	b09d      	sub	sp, #116	@ 0x74
 801700c:	4614      	mov	r4, r2
 801700e:	4698      	mov	r8, r3
 8017010:	4606      	mov	r6, r0
 8017012:	b118      	cbz	r0, 801701c <_vfiprintf_r+0x18>
 8017014:	6a03      	ldr	r3, [r0, #32]
 8017016:	b90b      	cbnz	r3, 801701c <_vfiprintf_r+0x18>
 8017018:	f7ff fcae 	bl	8016978 <__sinit>
 801701c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801701e:	07d9      	lsls	r1, r3, #31
 8017020:	d405      	bmi.n	801702e <_vfiprintf_r+0x2a>
 8017022:	89ab      	ldrh	r3, [r5, #12]
 8017024:	059a      	lsls	r2, r3, #22
 8017026:	d402      	bmi.n	801702e <_vfiprintf_r+0x2a>
 8017028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801702a:	f7ff feb8 	bl	8016d9e <__retarget_lock_acquire_recursive>
 801702e:	89ab      	ldrh	r3, [r5, #12]
 8017030:	071b      	lsls	r3, r3, #28
 8017032:	d501      	bpl.n	8017038 <_vfiprintf_r+0x34>
 8017034:	692b      	ldr	r3, [r5, #16]
 8017036:	b99b      	cbnz	r3, 8017060 <_vfiprintf_r+0x5c>
 8017038:	4629      	mov	r1, r5
 801703a:	4630      	mov	r0, r6
 801703c:	f7ff fdcc 	bl	8016bd8 <__swsetup_r>
 8017040:	b170      	cbz	r0, 8017060 <_vfiprintf_r+0x5c>
 8017042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017044:	07dc      	lsls	r4, r3, #31
 8017046:	d504      	bpl.n	8017052 <_vfiprintf_r+0x4e>
 8017048:	f04f 30ff 	mov.w	r0, #4294967295
 801704c:	b01d      	add	sp, #116	@ 0x74
 801704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017052:	89ab      	ldrh	r3, [r5, #12]
 8017054:	0598      	lsls	r0, r3, #22
 8017056:	d4f7      	bmi.n	8017048 <_vfiprintf_r+0x44>
 8017058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801705a:	f7ff fea1 	bl	8016da0 <__retarget_lock_release_recursive>
 801705e:	e7f3      	b.n	8017048 <_vfiprintf_r+0x44>
 8017060:	2300      	movs	r3, #0
 8017062:	9309      	str	r3, [sp, #36]	@ 0x24
 8017064:	2320      	movs	r3, #32
 8017066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801706a:	f8cd 800c 	str.w	r8, [sp, #12]
 801706e:	2330      	movs	r3, #48	@ 0x30
 8017070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017220 <_vfiprintf_r+0x21c>
 8017074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017078:	f04f 0901 	mov.w	r9, #1
 801707c:	4623      	mov	r3, r4
 801707e:	469a      	mov	sl, r3
 8017080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017084:	b10a      	cbz	r2, 801708a <_vfiprintf_r+0x86>
 8017086:	2a25      	cmp	r2, #37	@ 0x25
 8017088:	d1f9      	bne.n	801707e <_vfiprintf_r+0x7a>
 801708a:	ebba 0b04 	subs.w	fp, sl, r4
 801708e:	d00b      	beq.n	80170a8 <_vfiprintf_r+0xa4>
 8017090:	465b      	mov	r3, fp
 8017092:	4622      	mov	r2, r4
 8017094:	4629      	mov	r1, r5
 8017096:	4630      	mov	r0, r6
 8017098:	f7ff ffa1 	bl	8016fde <__sfputs_r>
 801709c:	3001      	adds	r0, #1
 801709e:	f000 80a7 	beq.w	80171f0 <_vfiprintf_r+0x1ec>
 80170a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170a4:	445a      	add	r2, fp
 80170a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80170a8:	f89a 3000 	ldrb.w	r3, [sl]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	f000 809f 	beq.w	80171f0 <_vfiprintf_r+0x1ec>
 80170b2:	2300      	movs	r3, #0
 80170b4:	f04f 32ff 	mov.w	r2, #4294967295
 80170b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170bc:	f10a 0a01 	add.w	sl, sl, #1
 80170c0:	9304      	str	r3, [sp, #16]
 80170c2:	9307      	str	r3, [sp, #28]
 80170c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80170ca:	4654      	mov	r4, sl
 80170cc:	2205      	movs	r2, #5
 80170ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170d2:	4853      	ldr	r0, [pc, #332]	@ (8017220 <_vfiprintf_r+0x21c>)
 80170d4:	f7e9 f854 	bl	8000180 <memchr>
 80170d8:	9a04      	ldr	r2, [sp, #16]
 80170da:	b9d8      	cbnz	r0, 8017114 <_vfiprintf_r+0x110>
 80170dc:	06d1      	lsls	r1, r2, #27
 80170de:	bf44      	itt	mi
 80170e0:	2320      	movmi	r3, #32
 80170e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170e6:	0713      	lsls	r3, r2, #28
 80170e8:	bf44      	itt	mi
 80170ea:	232b      	movmi	r3, #43	@ 0x2b
 80170ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170f0:	f89a 3000 	ldrb.w	r3, [sl]
 80170f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f6:	d015      	beq.n	8017124 <_vfiprintf_r+0x120>
 80170f8:	9a07      	ldr	r2, [sp, #28]
 80170fa:	4654      	mov	r4, sl
 80170fc:	2000      	movs	r0, #0
 80170fe:	f04f 0c0a 	mov.w	ip, #10
 8017102:	4621      	mov	r1, r4
 8017104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017108:	3b30      	subs	r3, #48	@ 0x30
 801710a:	2b09      	cmp	r3, #9
 801710c:	d94b      	bls.n	80171a6 <_vfiprintf_r+0x1a2>
 801710e:	b1b0      	cbz	r0, 801713e <_vfiprintf_r+0x13a>
 8017110:	9207      	str	r2, [sp, #28]
 8017112:	e014      	b.n	801713e <_vfiprintf_r+0x13a>
 8017114:	eba0 0308 	sub.w	r3, r0, r8
 8017118:	fa09 f303 	lsl.w	r3, r9, r3
 801711c:	4313      	orrs	r3, r2
 801711e:	9304      	str	r3, [sp, #16]
 8017120:	46a2      	mov	sl, r4
 8017122:	e7d2      	b.n	80170ca <_vfiprintf_r+0xc6>
 8017124:	9b03      	ldr	r3, [sp, #12]
 8017126:	1d19      	adds	r1, r3, #4
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	9103      	str	r1, [sp, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	bfbb      	ittet	lt
 8017130:	425b      	neglt	r3, r3
 8017132:	f042 0202 	orrlt.w	r2, r2, #2
 8017136:	9307      	strge	r3, [sp, #28]
 8017138:	9307      	strlt	r3, [sp, #28]
 801713a:	bfb8      	it	lt
 801713c:	9204      	strlt	r2, [sp, #16]
 801713e:	7823      	ldrb	r3, [r4, #0]
 8017140:	2b2e      	cmp	r3, #46	@ 0x2e
 8017142:	d10a      	bne.n	801715a <_vfiprintf_r+0x156>
 8017144:	7863      	ldrb	r3, [r4, #1]
 8017146:	2b2a      	cmp	r3, #42	@ 0x2a
 8017148:	d132      	bne.n	80171b0 <_vfiprintf_r+0x1ac>
 801714a:	9b03      	ldr	r3, [sp, #12]
 801714c:	1d1a      	adds	r2, r3, #4
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	9203      	str	r2, [sp, #12]
 8017152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017156:	3402      	adds	r4, #2
 8017158:	9305      	str	r3, [sp, #20]
 801715a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017230 <_vfiprintf_r+0x22c>
 801715e:	7821      	ldrb	r1, [r4, #0]
 8017160:	2203      	movs	r2, #3
 8017162:	4650      	mov	r0, sl
 8017164:	f7e9 f80c 	bl	8000180 <memchr>
 8017168:	b138      	cbz	r0, 801717a <_vfiprintf_r+0x176>
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	eba0 000a 	sub.w	r0, r0, sl
 8017170:	2240      	movs	r2, #64	@ 0x40
 8017172:	4082      	lsls	r2, r0
 8017174:	4313      	orrs	r3, r2
 8017176:	3401      	adds	r4, #1
 8017178:	9304      	str	r3, [sp, #16]
 801717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801717e:	4829      	ldr	r0, [pc, #164]	@ (8017224 <_vfiprintf_r+0x220>)
 8017180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017184:	2206      	movs	r2, #6
 8017186:	f7e8 fffb 	bl	8000180 <memchr>
 801718a:	2800      	cmp	r0, #0
 801718c:	d03f      	beq.n	801720e <_vfiprintf_r+0x20a>
 801718e:	4b26      	ldr	r3, [pc, #152]	@ (8017228 <_vfiprintf_r+0x224>)
 8017190:	bb1b      	cbnz	r3, 80171da <_vfiprintf_r+0x1d6>
 8017192:	9b03      	ldr	r3, [sp, #12]
 8017194:	3307      	adds	r3, #7
 8017196:	f023 0307 	bic.w	r3, r3, #7
 801719a:	3308      	adds	r3, #8
 801719c:	9303      	str	r3, [sp, #12]
 801719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171a0:	443b      	add	r3, r7
 80171a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a4:	e76a      	b.n	801707c <_vfiprintf_r+0x78>
 80171a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80171aa:	460c      	mov	r4, r1
 80171ac:	2001      	movs	r0, #1
 80171ae:	e7a8      	b.n	8017102 <_vfiprintf_r+0xfe>
 80171b0:	2300      	movs	r3, #0
 80171b2:	3401      	adds	r4, #1
 80171b4:	9305      	str	r3, [sp, #20]
 80171b6:	4619      	mov	r1, r3
 80171b8:	f04f 0c0a 	mov.w	ip, #10
 80171bc:	4620      	mov	r0, r4
 80171be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171c2:	3a30      	subs	r2, #48	@ 0x30
 80171c4:	2a09      	cmp	r2, #9
 80171c6:	d903      	bls.n	80171d0 <_vfiprintf_r+0x1cc>
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d0c6      	beq.n	801715a <_vfiprintf_r+0x156>
 80171cc:	9105      	str	r1, [sp, #20]
 80171ce:	e7c4      	b.n	801715a <_vfiprintf_r+0x156>
 80171d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80171d4:	4604      	mov	r4, r0
 80171d6:	2301      	movs	r3, #1
 80171d8:	e7f0      	b.n	80171bc <_vfiprintf_r+0x1b8>
 80171da:	ab03      	add	r3, sp, #12
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	462a      	mov	r2, r5
 80171e0:	4b12      	ldr	r3, [pc, #72]	@ (801722c <_vfiprintf_r+0x228>)
 80171e2:	a904      	add	r1, sp, #16
 80171e4:	4630      	mov	r0, r6
 80171e6:	f3af 8000 	nop.w
 80171ea:	4607      	mov	r7, r0
 80171ec:	1c78      	adds	r0, r7, #1
 80171ee:	d1d6      	bne.n	801719e <_vfiprintf_r+0x19a>
 80171f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171f2:	07d9      	lsls	r1, r3, #31
 80171f4:	d405      	bmi.n	8017202 <_vfiprintf_r+0x1fe>
 80171f6:	89ab      	ldrh	r3, [r5, #12]
 80171f8:	059a      	lsls	r2, r3, #22
 80171fa:	d402      	bmi.n	8017202 <_vfiprintf_r+0x1fe>
 80171fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171fe:	f7ff fdcf 	bl	8016da0 <__retarget_lock_release_recursive>
 8017202:	89ab      	ldrh	r3, [r5, #12]
 8017204:	065b      	lsls	r3, r3, #25
 8017206:	f53f af1f 	bmi.w	8017048 <_vfiprintf_r+0x44>
 801720a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801720c:	e71e      	b.n	801704c <_vfiprintf_r+0x48>
 801720e:	ab03      	add	r3, sp, #12
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	462a      	mov	r2, r5
 8017214:	4b05      	ldr	r3, [pc, #20]	@ (801722c <_vfiprintf_r+0x228>)
 8017216:	a904      	add	r1, sp, #16
 8017218:	4630      	mov	r0, r6
 801721a:	f000 f879 	bl	8017310 <_printf_i>
 801721e:	e7e4      	b.n	80171ea <_vfiprintf_r+0x1e6>
 8017220:	08017b00 	.word	0x08017b00
 8017224:	08017b0a 	.word	0x08017b0a
 8017228:	00000000 	.word	0x00000000
 801722c:	08016fdf 	.word	0x08016fdf
 8017230:	08017b06 	.word	0x08017b06

08017234 <_printf_common>:
 8017234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017238:	4616      	mov	r6, r2
 801723a:	4698      	mov	r8, r3
 801723c:	688a      	ldr	r2, [r1, #8]
 801723e:	690b      	ldr	r3, [r1, #16]
 8017240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017244:	4293      	cmp	r3, r2
 8017246:	bfb8      	it	lt
 8017248:	4613      	movlt	r3, r2
 801724a:	6033      	str	r3, [r6, #0]
 801724c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017250:	4607      	mov	r7, r0
 8017252:	460c      	mov	r4, r1
 8017254:	b10a      	cbz	r2, 801725a <_printf_common+0x26>
 8017256:	3301      	adds	r3, #1
 8017258:	6033      	str	r3, [r6, #0]
 801725a:	6823      	ldr	r3, [r4, #0]
 801725c:	0699      	lsls	r1, r3, #26
 801725e:	bf42      	ittt	mi
 8017260:	6833      	ldrmi	r3, [r6, #0]
 8017262:	3302      	addmi	r3, #2
 8017264:	6033      	strmi	r3, [r6, #0]
 8017266:	6825      	ldr	r5, [r4, #0]
 8017268:	f015 0506 	ands.w	r5, r5, #6
 801726c:	d106      	bne.n	801727c <_printf_common+0x48>
 801726e:	f104 0a19 	add.w	sl, r4, #25
 8017272:	68e3      	ldr	r3, [r4, #12]
 8017274:	6832      	ldr	r2, [r6, #0]
 8017276:	1a9b      	subs	r3, r3, r2
 8017278:	42ab      	cmp	r3, r5
 801727a:	dc26      	bgt.n	80172ca <_printf_common+0x96>
 801727c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017280:	6822      	ldr	r2, [r4, #0]
 8017282:	3b00      	subs	r3, #0
 8017284:	bf18      	it	ne
 8017286:	2301      	movne	r3, #1
 8017288:	0692      	lsls	r2, r2, #26
 801728a:	d42b      	bmi.n	80172e4 <_printf_common+0xb0>
 801728c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017290:	4641      	mov	r1, r8
 8017292:	4638      	mov	r0, r7
 8017294:	47c8      	blx	r9
 8017296:	3001      	adds	r0, #1
 8017298:	d01e      	beq.n	80172d8 <_printf_common+0xa4>
 801729a:	6823      	ldr	r3, [r4, #0]
 801729c:	6922      	ldr	r2, [r4, #16]
 801729e:	f003 0306 	and.w	r3, r3, #6
 80172a2:	2b04      	cmp	r3, #4
 80172a4:	bf02      	ittt	eq
 80172a6:	68e5      	ldreq	r5, [r4, #12]
 80172a8:	6833      	ldreq	r3, [r6, #0]
 80172aa:	1aed      	subeq	r5, r5, r3
 80172ac:	68a3      	ldr	r3, [r4, #8]
 80172ae:	bf0c      	ite	eq
 80172b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172b4:	2500      	movne	r5, #0
 80172b6:	4293      	cmp	r3, r2
 80172b8:	bfc4      	itt	gt
 80172ba:	1a9b      	subgt	r3, r3, r2
 80172bc:	18ed      	addgt	r5, r5, r3
 80172be:	2600      	movs	r6, #0
 80172c0:	341a      	adds	r4, #26
 80172c2:	42b5      	cmp	r5, r6
 80172c4:	d11a      	bne.n	80172fc <_printf_common+0xc8>
 80172c6:	2000      	movs	r0, #0
 80172c8:	e008      	b.n	80172dc <_printf_common+0xa8>
 80172ca:	2301      	movs	r3, #1
 80172cc:	4652      	mov	r2, sl
 80172ce:	4641      	mov	r1, r8
 80172d0:	4638      	mov	r0, r7
 80172d2:	47c8      	blx	r9
 80172d4:	3001      	adds	r0, #1
 80172d6:	d103      	bne.n	80172e0 <_printf_common+0xac>
 80172d8:	f04f 30ff 	mov.w	r0, #4294967295
 80172dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172e0:	3501      	adds	r5, #1
 80172e2:	e7c6      	b.n	8017272 <_printf_common+0x3e>
 80172e4:	18e1      	adds	r1, r4, r3
 80172e6:	1c5a      	adds	r2, r3, #1
 80172e8:	2030      	movs	r0, #48	@ 0x30
 80172ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80172ee:	4422      	add	r2, r4
 80172f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80172f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80172f8:	3302      	adds	r3, #2
 80172fa:	e7c7      	b.n	801728c <_printf_common+0x58>
 80172fc:	2301      	movs	r3, #1
 80172fe:	4622      	mov	r2, r4
 8017300:	4641      	mov	r1, r8
 8017302:	4638      	mov	r0, r7
 8017304:	47c8      	blx	r9
 8017306:	3001      	adds	r0, #1
 8017308:	d0e6      	beq.n	80172d8 <_printf_common+0xa4>
 801730a:	3601      	adds	r6, #1
 801730c:	e7d9      	b.n	80172c2 <_printf_common+0x8e>
	...

08017310 <_printf_i>:
 8017310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017314:	7e0f      	ldrb	r7, [r1, #24]
 8017316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017318:	2f78      	cmp	r7, #120	@ 0x78
 801731a:	4691      	mov	r9, r2
 801731c:	4680      	mov	r8, r0
 801731e:	460c      	mov	r4, r1
 8017320:	469a      	mov	sl, r3
 8017322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017326:	d807      	bhi.n	8017338 <_printf_i+0x28>
 8017328:	2f62      	cmp	r7, #98	@ 0x62
 801732a:	d80a      	bhi.n	8017342 <_printf_i+0x32>
 801732c:	2f00      	cmp	r7, #0
 801732e:	f000 80d2 	beq.w	80174d6 <_printf_i+0x1c6>
 8017332:	2f58      	cmp	r7, #88	@ 0x58
 8017334:	f000 80b9 	beq.w	80174aa <_printf_i+0x19a>
 8017338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801733c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017340:	e03a      	b.n	80173b8 <_printf_i+0xa8>
 8017342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017346:	2b15      	cmp	r3, #21
 8017348:	d8f6      	bhi.n	8017338 <_printf_i+0x28>
 801734a:	a101      	add	r1, pc, #4	@ (adr r1, 8017350 <_printf_i+0x40>)
 801734c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017350:	080173a9 	.word	0x080173a9
 8017354:	080173bd 	.word	0x080173bd
 8017358:	08017339 	.word	0x08017339
 801735c:	08017339 	.word	0x08017339
 8017360:	08017339 	.word	0x08017339
 8017364:	08017339 	.word	0x08017339
 8017368:	080173bd 	.word	0x080173bd
 801736c:	08017339 	.word	0x08017339
 8017370:	08017339 	.word	0x08017339
 8017374:	08017339 	.word	0x08017339
 8017378:	08017339 	.word	0x08017339
 801737c:	080174bd 	.word	0x080174bd
 8017380:	080173e7 	.word	0x080173e7
 8017384:	08017477 	.word	0x08017477
 8017388:	08017339 	.word	0x08017339
 801738c:	08017339 	.word	0x08017339
 8017390:	080174df 	.word	0x080174df
 8017394:	08017339 	.word	0x08017339
 8017398:	080173e7 	.word	0x080173e7
 801739c:	08017339 	.word	0x08017339
 80173a0:	08017339 	.word	0x08017339
 80173a4:	0801747f 	.word	0x0801747f
 80173a8:	6833      	ldr	r3, [r6, #0]
 80173aa:	1d1a      	adds	r2, r3, #4
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	6032      	str	r2, [r6, #0]
 80173b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80173b8:	2301      	movs	r3, #1
 80173ba:	e09d      	b.n	80174f8 <_printf_i+0x1e8>
 80173bc:	6833      	ldr	r3, [r6, #0]
 80173be:	6820      	ldr	r0, [r4, #0]
 80173c0:	1d19      	adds	r1, r3, #4
 80173c2:	6031      	str	r1, [r6, #0]
 80173c4:	0606      	lsls	r6, r0, #24
 80173c6:	d501      	bpl.n	80173cc <_printf_i+0xbc>
 80173c8:	681d      	ldr	r5, [r3, #0]
 80173ca:	e003      	b.n	80173d4 <_printf_i+0xc4>
 80173cc:	0645      	lsls	r5, r0, #25
 80173ce:	d5fb      	bpl.n	80173c8 <_printf_i+0xb8>
 80173d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80173d4:	2d00      	cmp	r5, #0
 80173d6:	da03      	bge.n	80173e0 <_printf_i+0xd0>
 80173d8:	232d      	movs	r3, #45	@ 0x2d
 80173da:	426d      	negs	r5, r5
 80173dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80173e0:	4859      	ldr	r0, [pc, #356]	@ (8017548 <_printf_i+0x238>)
 80173e2:	230a      	movs	r3, #10
 80173e4:	e011      	b.n	801740a <_printf_i+0xfa>
 80173e6:	6821      	ldr	r1, [r4, #0]
 80173e8:	6833      	ldr	r3, [r6, #0]
 80173ea:	0608      	lsls	r0, r1, #24
 80173ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80173f0:	d402      	bmi.n	80173f8 <_printf_i+0xe8>
 80173f2:	0649      	lsls	r1, r1, #25
 80173f4:	bf48      	it	mi
 80173f6:	b2ad      	uxthmi	r5, r5
 80173f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80173fa:	4853      	ldr	r0, [pc, #332]	@ (8017548 <_printf_i+0x238>)
 80173fc:	6033      	str	r3, [r6, #0]
 80173fe:	bf14      	ite	ne
 8017400:	230a      	movne	r3, #10
 8017402:	2308      	moveq	r3, #8
 8017404:	2100      	movs	r1, #0
 8017406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801740a:	6866      	ldr	r6, [r4, #4]
 801740c:	60a6      	str	r6, [r4, #8]
 801740e:	2e00      	cmp	r6, #0
 8017410:	bfa2      	ittt	ge
 8017412:	6821      	ldrge	r1, [r4, #0]
 8017414:	f021 0104 	bicge.w	r1, r1, #4
 8017418:	6021      	strge	r1, [r4, #0]
 801741a:	b90d      	cbnz	r5, 8017420 <_printf_i+0x110>
 801741c:	2e00      	cmp	r6, #0
 801741e:	d04b      	beq.n	80174b8 <_printf_i+0x1a8>
 8017420:	4616      	mov	r6, r2
 8017422:	fbb5 f1f3 	udiv	r1, r5, r3
 8017426:	fb03 5711 	mls	r7, r3, r1, r5
 801742a:	5dc7      	ldrb	r7, [r0, r7]
 801742c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017430:	462f      	mov	r7, r5
 8017432:	42bb      	cmp	r3, r7
 8017434:	460d      	mov	r5, r1
 8017436:	d9f4      	bls.n	8017422 <_printf_i+0x112>
 8017438:	2b08      	cmp	r3, #8
 801743a:	d10b      	bne.n	8017454 <_printf_i+0x144>
 801743c:	6823      	ldr	r3, [r4, #0]
 801743e:	07df      	lsls	r7, r3, #31
 8017440:	d508      	bpl.n	8017454 <_printf_i+0x144>
 8017442:	6923      	ldr	r3, [r4, #16]
 8017444:	6861      	ldr	r1, [r4, #4]
 8017446:	4299      	cmp	r1, r3
 8017448:	bfde      	ittt	le
 801744a:	2330      	movle	r3, #48	@ 0x30
 801744c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017454:	1b92      	subs	r2, r2, r6
 8017456:	6122      	str	r2, [r4, #16]
 8017458:	f8cd a000 	str.w	sl, [sp]
 801745c:	464b      	mov	r3, r9
 801745e:	aa03      	add	r2, sp, #12
 8017460:	4621      	mov	r1, r4
 8017462:	4640      	mov	r0, r8
 8017464:	f7ff fee6 	bl	8017234 <_printf_common>
 8017468:	3001      	adds	r0, #1
 801746a:	d14a      	bne.n	8017502 <_printf_i+0x1f2>
 801746c:	f04f 30ff 	mov.w	r0, #4294967295
 8017470:	b004      	add	sp, #16
 8017472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017476:	6823      	ldr	r3, [r4, #0]
 8017478:	f043 0320 	orr.w	r3, r3, #32
 801747c:	6023      	str	r3, [r4, #0]
 801747e:	4833      	ldr	r0, [pc, #204]	@ (801754c <_printf_i+0x23c>)
 8017480:	2778      	movs	r7, #120	@ 0x78
 8017482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	6831      	ldr	r1, [r6, #0]
 801748a:	061f      	lsls	r7, r3, #24
 801748c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017490:	d402      	bmi.n	8017498 <_printf_i+0x188>
 8017492:	065f      	lsls	r7, r3, #25
 8017494:	bf48      	it	mi
 8017496:	b2ad      	uxthmi	r5, r5
 8017498:	6031      	str	r1, [r6, #0]
 801749a:	07d9      	lsls	r1, r3, #31
 801749c:	bf44      	itt	mi
 801749e:	f043 0320 	orrmi.w	r3, r3, #32
 80174a2:	6023      	strmi	r3, [r4, #0]
 80174a4:	b11d      	cbz	r5, 80174ae <_printf_i+0x19e>
 80174a6:	2310      	movs	r3, #16
 80174a8:	e7ac      	b.n	8017404 <_printf_i+0xf4>
 80174aa:	4827      	ldr	r0, [pc, #156]	@ (8017548 <_printf_i+0x238>)
 80174ac:	e7e9      	b.n	8017482 <_printf_i+0x172>
 80174ae:	6823      	ldr	r3, [r4, #0]
 80174b0:	f023 0320 	bic.w	r3, r3, #32
 80174b4:	6023      	str	r3, [r4, #0]
 80174b6:	e7f6      	b.n	80174a6 <_printf_i+0x196>
 80174b8:	4616      	mov	r6, r2
 80174ba:	e7bd      	b.n	8017438 <_printf_i+0x128>
 80174bc:	6833      	ldr	r3, [r6, #0]
 80174be:	6825      	ldr	r5, [r4, #0]
 80174c0:	6961      	ldr	r1, [r4, #20]
 80174c2:	1d18      	adds	r0, r3, #4
 80174c4:	6030      	str	r0, [r6, #0]
 80174c6:	062e      	lsls	r6, r5, #24
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	d501      	bpl.n	80174d0 <_printf_i+0x1c0>
 80174cc:	6019      	str	r1, [r3, #0]
 80174ce:	e002      	b.n	80174d6 <_printf_i+0x1c6>
 80174d0:	0668      	lsls	r0, r5, #25
 80174d2:	d5fb      	bpl.n	80174cc <_printf_i+0x1bc>
 80174d4:	8019      	strh	r1, [r3, #0]
 80174d6:	2300      	movs	r3, #0
 80174d8:	6123      	str	r3, [r4, #16]
 80174da:	4616      	mov	r6, r2
 80174dc:	e7bc      	b.n	8017458 <_printf_i+0x148>
 80174de:	6833      	ldr	r3, [r6, #0]
 80174e0:	1d1a      	adds	r2, r3, #4
 80174e2:	6032      	str	r2, [r6, #0]
 80174e4:	681e      	ldr	r6, [r3, #0]
 80174e6:	6862      	ldr	r2, [r4, #4]
 80174e8:	2100      	movs	r1, #0
 80174ea:	4630      	mov	r0, r6
 80174ec:	f7e8 fe48 	bl	8000180 <memchr>
 80174f0:	b108      	cbz	r0, 80174f6 <_printf_i+0x1e6>
 80174f2:	1b80      	subs	r0, r0, r6
 80174f4:	6060      	str	r0, [r4, #4]
 80174f6:	6863      	ldr	r3, [r4, #4]
 80174f8:	6123      	str	r3, [r4, #16]
 80174fa:	2300      	movs	r3, #0
 80174fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017500:	e7aa      	b.n	8017458 <_printf_i+0x148>
 8017502:	6923      	ldr	r3, [r4, #16]
 8017504:	4632      	mov	r2, r6
 8017506:	4649      	mov	r1, r9
 8017508:	4640      	mov	r0, r8
 801750a:	47d0      	blx	sl
 801750c:	3001      	adds	r0, #1
 801750e:	d0ad      	beq.n	801746c <_printf_i+0x15c>
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	079b      	lsls	r3, r3, #30
 8017514:	d413      	bmi.n	801753e <_printf_i+0x22e>
 8017516:	68e0      	ldr	r0, [r4, #12]
 8017518:	9b03      	ldr	r3, [sp, #12]
 801751a:	4298      	cmp	r0, r3
 801751c:	bfb8      	it	lt
 801751e:	4618      	movlt	r0, r3
 8017520:	e7a6      	b.n	8017470 <_printf_i+0x160>
 8017522:	2301      	movs	r3, #1
 8017524:	4632      	mov	r2, r6
 8017526:	4649      	mov	r1, r9
 8017528:	4640      	mov	r0, r8
 801752a:	47d0      	blx	sl
 801752c:	3001      	adds	r0, #1
 801752e:	d09d      	beq.n	801746c <_printf_i+0x15c>
 8017530:	3501      	adds	r5, #1
 8017532:	68e3      	ldr	r3, [r4, #12]
 8017534:	9903      	ldr	r1, [sp, #12]
 8017536:	1a5b      	subs	r3, r3, r1
 8017538:	42ab      	cmp	r3, r5
 801753a:	dcf2      	bgt.n	8017522 <_printf_i+0x212>
 801753c:	e7eb      	b.n	8017516 <_printf_i+0x206>
 801753e:	2500      	movs	r5, #0
 8017540:	f104 0619 	add.w	r6, r4, #25
 8017544:	e7f5      	b.n	8017532 <_printf_i+0x222>
 8017546:	bf00      	nop
 8017548:	08017b11 	.word	0x08017b11
 801754c:	08017b22 	.word	0x08017b22

08017550 <__sflush_r>:
 8017550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017558:	0716      	lsls	r6, r2, #28
 801755a:	4605      	mov	r5, r0
 801755c:	460c      	mov	r4, r1
 801755e:	d454      	bmi.n	801760a <__sflush_r+0xba>
 8017560:	684b      	ldr	r3, [r1, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	dc02      	bgt.n	801756c <__sflush_r+0x1c>
 8017566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017568:	2b00      	cmp	r3, #0
 801756a:	dd48      	ble.n	80175fe <__sflush_r+0xae>
 801756c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801756e:	2e00      	cmp	r6, #0
 8017570:	d045      	beq.n	80175fe <__sflush_r+0xae>
 8017572:	2300      	movs	r3, #0
 8017574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017578:	682f      	ldr	r7, [r5, #0]
 801757a:	6a21      	ldr	r1, [r4, #32]
 801757c:	602b      	str	r3, [r5, #0]
 801757e:	d030      	beq.n	80175e2 <__sflush_r+0x92>
 8017580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017582:	89a3      	ldrh	r3, [r4, #12]
 8017584:	0759      	lsls	r1, r3, #29
 8017586:	d505      	bpl.n	8017594 <__sflush_r+0x44>
 8017588:	6863      	ldr	r3, [r4, #4]
 801758a:	1ad2      	subs	r2, r2, r3
 801758c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801758e:	b10b      	cbz	r3, 8017594 <__sflush_r+0x44>
 8017590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017592:	1ad2      	subs	r2, r2, r3
 8017594:	2300      	movs	r3, #0
 8017596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017598:	6a21      	ldr	r1, [r4, #32]
 801759a:	4628      	mov	r0, r5
 801759c:	47b0      	blx	r6
 801759e:	1c43      	adds	r3, r0, #1
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	d106      	bne.n	80175b2 <__sflush_r+0x62>
 80175a4:	6829      	ldr	r1, [r5, #0]
 80175a6:	291d      	cmp	r1, #29
 80175a8:	d82b      	bhi.n	8017602 <__sflush_r+0xb2>
 80175aa:	4a2a      	ldr	r2, [pc, #168]	@ (8017654 <__sflush_r+0x104>)
 80175ac:	410a      	asrs	r2, r1
 80175ae:	07d6      	lsls	r6, r2, #31
 80175b0:	d427      	bmi.n	8017602 <__sflush_r+0xb2>
 80175b2:	2200      	movs	r2, #0
 80175b4:	6062      	str	r2, [r4, #4]
 80175b6:	04d9      	lsls	r1, r3, #19
 80175b8:	6922      	ldr	r2, [r4, #16]
 80175ba:	6022      	str	r2, [r4, #0]
 80175bc:	d504      	bpl.n	80175c8 <__sflush_r+0x78>
 80175be:	1c42      	adds	r2, r0, #1
 80175c0:	d101      	bne.n	80175c6 <__sflush_r+0x76>
 80175c2:	682b      	ldr	r3, [r5, #0]
 80175c4:	b903      	cbnz	r3, 80175c8 <__sflush_r+0x78>
 80175c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80175c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175ca:	602f      	str	r7, [r5, #0]
 80175cc:	b1b9      	cbz	r1, 80175fe <__sflush_r+0xae>
 80175ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175d2:	4299      	cmp	r1, r3
 80175d4:	d002      	beq.n	80175dc <__sflush_r+0x8c>
 80175d6:	4628      	mov	r0, r5
 80175d8:	f7ff fbf2 	bl	8016dc0 <_free_r>
 80175dc:	2300      	movs	r3, #0
 80175de:	6363      	str	r3, [r4, #52]	@ 0x34
 80175e0:	e00d      	b.n	80175fe <__sflush_r+0xae>
 80175e2:	2301      	movs	r3, #1
 80175e4:	4628      	mov	r0, r5
 80175e6:	47b0      	blx	r6
 80175e8:	4602      	mov	r2, r0
 80175ea:	1c50      	adds	r0, r2, #1
 80175ec:	d1c9      	bne.n	8017582 <__sflush_r+0x32>
 80175ee:	682b      	ldr	r3, [r5, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d0c6      	beq.n	8017582 <__sflush_r+0x32>
 80175f4:	2b1d      	cmp	r3, #29
 80175f6:	d001      	beq.n	80175fc <__sflush_r+0xac>
 80175f8:	2b16      	cmp	r3, #22
 80175fa:	d11e      	bne.n	801763a <__sflush_r+0xea>
 80175fc:	602f      	str	r7, [r5, #0]
 80175fe:	2000      	movs	r0, #0
 8017600:	e022      	b.n	8017648 <__sflush_r+0xf8>
 8017602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017606:	b21b      	sxth	r3, r3
 8017608:	e01b      	b.n	8017642 <__sflush_r+0xf2>
 801760a:	690f      	ldr	r7, [r1, #16]
 801760c:	2f00      	cmp	r7, #0
 801760e:	d0f6      	beq.n	80175fe <__sflush_r+0xae>
 8017610:	0793      	lsls	r3, r2, #30
 8017612:	680e      	ldr	r6, [r1, #0]
 8017614:	bf08      	it	eq
 8017616:	694b      	ldreq	r3, [r1, #20]
 8017618:	600f      	str	r7, [r1, #0]
 801761a:	bf18      	it	ne
 801761c:	2300      	movne	r3, #0
 801761e:	eba6 0807 	sub.w	r8, r6, r7
 8017622:	608b      	str	r3, [r1, #8]
 8017624:	f1b8 0f00 	cmp.w	r8, #0
 8017628:	dde9      	ble.n	80175fe <__sflush_r+0xae>
 801762a:	6a21      	ldr	r1, [r4, #32]
 801762c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801762e:	4643      	mov	r3, r8
 8017630:	463a      	mov	r2, r7
 8017632:	4628      	mov	r0, r5
 8017634:	47b0      	blx	r6
 8017636:	2800      	cmp	r0, #0
 8017638:	dc08      	bgt.n	801764c <__sflush_r+0xfc>
 801763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801763e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017642:	81a3      	strh	r3, [r4, #12]
 8017644:	f04f 30ff 	mov.w	r0, #4294967295
 8017648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801764c:	4407      	add	r7, r0
 801764e:	eba8 0800 	sub.w	r8, r8, r0
 8017652:	e7e7      	b.n	8017624 <__sflush_r+0xd4>
 8017654:	dfbffffe 	.word	0xdfbffffe

08017658 <_fflush_r>:
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	690b      	ldr	r3, [r1, #16]
 801765c:	4605      	mov	r5, r0
 801765e:	460c      	mov	r4, r1
 8017660:	b913      	cbnz	r3, 8017668 <_fflush_r+0x10>
 8017662:	2500      	movs	r5, #0
 8017664:	4628      	mov	r0, r5
 8017666:	bd38      	pop	{r3, r4, r5, pc}
 8017668:	b118      	cbz	r0, 8017672 <_fflush_r+0x1a>
 801766a:	6a03      	ldr	r3, [r0, #32]
 801766c:	b90b      	cbnz	r3, 8017672 <_fflush_r+0x1a>
 801766e:	f7ff f983 	bl	8016978 <__sinit>
 8017672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d0f3      	beq.n	8017662 <_fflush_r+0xa>
 801767a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801767c:	07d0      	lsls	r0, r2, #31
 801767e:	d404      	bmi.n	801768a <_fflush_r+0x32>
 8017680:	0599      	lsls	r1, r3, #22
 8017682:	d402      	bmi.n	801768a <_fflush_r+0x32>
 8017684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017686:	f7ff fb8a 	bl	8016d9e <__retarget_lock_acquire_recursive>
 801768a:	4628      	mov	r0, r5
 801768c:	4621      	mov	r1, r4
 801768e:	f7ff ff5f 	bl	8017550 <__sflush_r>
 8017692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017694:	07da      	lsls	r2, r3, #31
 8017696:	4605      	mov	r5, r0
 8017698:	d4e4      	bmi.n	8017664 <_fflush_r+0xc>
 801769a:	89a3      	ldrh	r3, [r4, #12]
 801769c:	059b      	lsls	r3, r3, #22
 801769e:	d4e1      	bmi.n	8017664 <_fflush_r+0xc>
 80176a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176a2:	f7ff fb7d 	bl	8016da0 <__retarget_lock_release_recursive>
 80176a6:	e7dd      	b.n	8017664 <_fflush_r+0xc>

080176a8 <__swhatbuf_r>:
 80176a8:	b570      	push	{r4, r5, r6, lr}
 80176aa:	460c      	mov	r4, r1
 80176ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176b0:	2900      	cmp	r1, #0
 80176b2:	b096      	sub	sp, #88	@ 0x58
 80176b4:	4615      	mov	r5, r2
 80176b6:	461e      	mov	r6, r3
 80176b8:	da0d      	bge.n	80176d6 <__swhatbuf_r+0x2e>
 80176ba:	89a3      	ldrh	r3, [r4, #12]
 80176bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176c0:	f04f 0100 	mov.w	r1, #0
 80176c4:	bf14      	ite	ne
 80176c6:	2340      	movne	r3, #64	@ 0x40
 80176c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176cc:	2000      	movs	r0, #0
 80176ce:	6031      	str	r1, [r6, #0]
 80176d0:	602b      	str	r3, [r5, #0]
 80176d2:	b016      	add	sp, #88	@ 0x58
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	466a      	mov	r2, sp
 80176d8:	f000 f87c 	bl	80177d4 <_fstat_r>
 80176dc:	2800      	cmp	r0, #0
 80176de:	dbec      	blt.n	80176ba <__swhatbuf_r+0x12>
 80176e0:	9901      	ldr	r1, [sp, #4]
 80176e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176ea:	4259      	negs	r1, r3
 80176ec:	4159      	adcs	r1, r3
 80176ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176f2:	e7eb      	b.n	80176cc <__swhatbuf_r+0x24>

080176f4 <__smakebuf_r>:
 80176f4:	898b      	ldrh	r3, [r1, #12]
 80176f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f8:	079d      	lsls	r5, r3, #30
 80176fa:	4606      	mov	r6, r0
 80176fc:	460c      	mov	r4, r1
 80176fe:	d507      	bpl.n	8017710 <__smakebuf_r+0x1c>
 8017700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017704:	6023      	str	r3, [r4, #0]
 8017706:	6123      	str	r3, [r4, #16]
 8017708:	2301      	movs	r3, #1
 801770a:	6163      	str	r3, [r4, #20]
 801770c:	b003      	add	sp, #12
 801770e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017710:	ab01      	add	r3, sp, #4
 8017712:	466a      	mov	r2, sp
 8017714:	f7ff ffc8 	bl	80176a8 <__swhatbuf_r>
 8017718:	9f00      	ldr	r7, [sp, #0]
 801771a:	4605      	mov	r5, r0
 801771c:	4639      	mov	r1, r7
 801771e:	4630      	mov	r0, r6
 8017720:	f7ff fbba 	bl	8016e98 <_malloc_r>
 8017724:	b948      	cbnz	r0, 801773a <__smakebuf_r+0x46>
 8017726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801772a:	059a      	lsls	r2, r3, #22
 801772c:	d4ee      	bmi.n	801770c <__smakebuf_r+0x18>
 801772e:	f023 0303 	bic.w	r3, r3, #3
 8017732:	f043 0302 	orr.w	r3, r3, #2
 8017736:	81a3      	strh	r3, [r4, #12]
 8017738:	e7e2      	b.n	8017700 <__smakebuf_r+0xc>
 801773a:	89a3      	ldrh	r3, [r4, #12]
 801773c:	6020      	str	r0, [r4, #0]
 801773e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017742:	81a3      	strh	r3, [r4, #12]
 8017744:	9b01      	ldr	r3, [sp, #4]
 8017746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801774a:	b15b      	cbz	r3, 8017764 <__smakebuf_r+0x70>
 801774c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017750:	4630      	mov	r0, r6
 8017752:	f000 f851 	bl	80177f8 <_isatty_r>
 8017756:	b128      	cbz	r0, 8017764 <__smakebuf_r+0x70>
 8017758:	89a3      	ldrh	r3, [r4, #12]
 801775a:	f023 0303 	bic.w	r3, r3, #3
 801775e:	f043 0301 	orr.w	r3, r3, #1
 8017762:	81a3      	strh	r3, [r4, #12]
 8017764:	89a3      	ldrh	r3, [r4, #12]
 8017766:	431d      	orrs	r5, r3
 8017768:	81a5      	strh	r5, [r4, #12]
 801776a:	e7cf      	b.n	801770c <__smakebuf_r+0x18>

0801776c <_putc_r>:
 801776c:	b570      	push	{r4, r5, r6, lr}
 801776e:	460d      	mov	r5, r1
 8017770:	4614      	mov	r4, r2
 8017772:	4606      	mov	r6, r0
 8017774:	b118      	cbz	r0, 801777e <_putc_r+0x12>
 8017776:	6a03      	ldr	r3, [r0, #32]
 8017778:	b90b      	cbnz	r3, 801777e <_putc_r+0x12>
 801777a:	f7ff f8fd 	bl	8016978 <__sinit>
 801777e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017780:	07d8      	lsls	r0, r3, #31
 8017782:	d405      	bmi.n	8017790 <_putc_r+0x24>
 8017784:	89a3      	ldrh	r3, [r4, #12]
 8017786:	0599      	lsls	r1, r3, #22
 8017788:	d402      	bmi.n	8017790 <_putc_r+0x24>
 801778a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801778c:	f7ff fb07 	bl	8016d9e <__retarget_lock_acquire_recursive>
 8017790:	68a3      	ldr	r3, [r4, #8]
 8017792:	3b01      	subs	r3, #1
 8017794:	2b00      	cmp	r3, #0
 8017796:	60a3      	str	r3, [r4, #8]
 8017798:	da05      	bge.n	80177a6 <_putc_r+0x3a>
 801779a:	69a2      	ldr	r2, [r4, #24]
 801779c:	4293      	cmp	r3, r2
 801779e:	db12      	blt.n	80177c6 <_putc_r+0x5a>
 80177a0:	b2eb      	uxtb	r3, r5
 80177a2:	2b0a      	cmp	r3, #10
 80177a4:	d00f      	beq.n	80177c6 <_putc_r+0x5a>
 80177a6:	6823      	ldr	r3, [r4, #0]
 80177a8:	1c5a      	adds	r2, r3, #1
 80177aa:	6022      	str	r2, [r4, #0]
 80177ac:	701d      	strb	r5, [r3, #0]
 80177ae:	b2ed      	uxtb	r5, r5
 80177b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177b2:	07da      	lsls	r2, r3, #31
 80177b4:	d405      	bmi.n	80177c2 <_putc_r+0x56>
 80177b6:	89a3      	ldrh	r3, [r4, #12]
 80177b8:	059b      	lsls	r3, r3, #22
 80177ba:	d402      	bmi.n	80177c2 <_putc_r+0x56>
 80177bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177be:	f7ff faef 	bl	8016da0 <__retarget_lock_release_recursive>
 80177c2:	4628      	mov	r0, r5
 80177c4:	bd70      	pop	{r4, r5, r6, pc}
 80177c6:	4629      	mov	r1, r5
 80177c8:	4622      	mov	r2, r4
 80177ca:	4630      	mov	r0, r6
 80177cc:	f7ff f9c5 	bl	8016b5a <__swbuf_r>
 80177d0:	4605      	mov	r5, r0
 80177d2:	e7ed      	b.n	80177b0 <_putc_r+0x44>

080177d4 <_fstat_r>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4d07      	ldr	r5, [pc, #28]	@ (80177f4 <_fstat_r+0x20>)
 80177d8:	2300      	movs	r3, #0
 80177da:	4604      	mov	r4, r0
 80177dc:	4608      	mov	r0, r1
 80177de:	4611      	mov	r1, r2
 80177e0:	602b      	str	r3, [r5, #0]
 80177e2:	f7e9 fb26 	bl	8000e32 <_fstat>
 80177e6:	1c43      	adds	r3, r0, #1
 80177e8:	d102      	bne.n	80177f0 <_fstat_r+0x1c>
 80177ea:	682b      	ldr	r3, [r5, #0]
 80177ec:	b103      	cbz	r3, 80177f0 <_fstat_r+0x1c>
 80177ee:	6023      	str	r3, [r4, #0]
 80177f0:	bd38      	pop	{r3, r4, r5, pc}
 80177f2:	bf00      	nop
 80177f4:	200076cc 	.word	0x200076cc

080177f8 <_isatty_r>:
 80177f8:	b538      	push	{r3, r4, r5, lr}
 80177fa:	4d06      	ldr	r5, [pc, #24]	@ (8017814 <_isatty_r+0x1c>)
 80177fc:	2300      	movs	r3, #0
 80177fe:	4604      	mov	r4, r0
 8017800:	4608      	mov	r0, r1
 8017802:	602b      	str	r3, [r5, #0]
 8017804:	f7e9 fb25 	bl	8000e52 <_isatty>
 8017808:	1c43      	adds	r3, r0, #1
 801780a:	d102      	bne.n	8017812 <_isatty_r+0x1a>
 801780c:	682b      	ldr	r3, [r5, #0]
 801780e:	b103      	cbz	r3, 8017812 <_isatty_r+0x1a>
 8017810:	6023      	str	r3, [r4, #0]
 8017812:	bd38      	pop	{r3, r4, r5, pc}
 8017814:	200076cc 	.word	0x200076cc

08017818 <_sbrk_r>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4d06      	ldr	r5, [pc, #24]	@ (8017834 <_sbrk_r+0x1c>)
 801781c:	2300      	movs	r3, #0
 801781e:	4604      	mov	r4, r0
 8017820:	4608      	mov	r0, r1
 8017822:	602b      	str	r3, [r5, #0]
 8017824:	f7e9 fb2e 	bl	8000e84 <_sbrk>
 8017828:	1c43      	adds	r3, r0, #1
 801782a:	d102      	bne.n	8017832 <_sbrk_r+0x1a>
 801782c:	682b      	ldr	r3, [r5, #0]
 801782e:	b103      	cbz	r3, 8017832 <_sbrk_r+0x1a>
 8017830:	6023      	str	r3, [r4, #0]
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	200076cc 	.word	0x200076cc

08017838 <_init>:
 8017838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801783a:	bf00      	nop
 801783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801783e:	bc08      	pop	{r3}
 8017840:	469e      	mov	lr, r3
 8017842:	4770      	bx	lr

08017844 <_fini>:
 8017844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017846:	bf00      	nop
 8017848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801784a:	bc08      	pop	{r3}
 801784c:	469e      	mov	lr, r3
 801784e:	4770      	bx	lr
